openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: codeguru_security
  x-aws-serviceName: codegurusecurity
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-05-10'
  title: Amazon CodeGuru Security
  description: |-
    Amazon CodeGuru Security is in preview release and is subject to change.

    This section provides documentation for the Amazon CodeGuru Security API operations. CodeGuru Security is a service that uses program analysis and machine learning to detect security policy violations and vulnerabilities, and recommends ways to address these security risks.

    By proactively detecting and providing recommendations for addressing security risks, CodeGuru Security improves the overall security of your application code. For more information about CodeGuru Security, see the [Amazon CodeGuru Security User Guide](https://docs.aws.amazon.com/codeguru/latest/security-ug/what-is-codeguru-security.html).
servers:
- description: The Amazon CodeGuru Security regional endpoint
  url: https://codeguru-security.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /batchGetFindings:
    post:
      operationId: BatchGetFindings
      description: |-
        Returns a list of requested findings from standard scans.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                findingIdentifiers:
                  $ref: '#/components/schemas/FindingIdentifiers'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /scans:
    post:
      operationId: CreateScan
      description: |-
        Use to create a scan using code uploaded to an Amazon S3 bucket.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                resourceId:
                  $ref: '#/components/schemas/ResourceId'
                scanName:
                  $ref: '#/components/schemas/ScanName'
                scanType:
                  $ref: '#/components/schemas/ScanType'
                analysisType:
                  $ref: '#/components/schemas/AnalysisType'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListScans
      description: |-
        Returns a list of all scans in an account. Does not return `EXPRESS` scans.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /uploadUrl:
    post:
      operationId: CreateUploadUrl
      description: |-
        Generates a pre-signed URL, request headers used to upload a code resource, and code artifact identifier for the uploaded resource.

        You can upload your code resource to the URL with the request headers using any HTTP client.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scanName:
                  $ref: '#/components/schemas/ScanName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /accountConfiguration/get:
    get:
      operationId: GetAccountConfiguration
      description: |-
        Use to get the encryption configuration for an account.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /findings/{scanName}:
    get:
      operationId: GetFindings
      description: |-
        Returns a list of all findings generated by a particular scan.
      parameters:
      - name: scanName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ScanName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Status'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /metrics/summary:
    get:
      operationId: GetMetricsSummary
      description: |-
        Returns a summary of metrics for an account from a specified date, including number of open findings, the categories with most findings, the scans with most open findings, and scans with most open critical findings.
      parameters:
      - name: date
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /scans/{scanName}:
    get:
      operationId: GetScan
      description: |-
        Returns details about a scan, including whether or not a scan has completed.
      parameters:
      - name: scanName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ScanName'
      - name: runId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Uuid'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /metrics/findings:
    get:
      operationId: ListFindingsMetrics
      description: |-
        Returns metrics about all findings in an account within a specified time range.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: startDate
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: endDate
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Returns a list of all tags associated with a scan.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ScanNameArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Use to add one or more tags to an existing scan.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ScanNameArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Use to remove one or more tags from an existing scan.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ScanNameArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /updateAccountConfiguration:
    put:
      operationId: UpdateAccountConfiguration
      description: |-
        Use to update the encryption configuration for an account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                encryptionConfig:
                  $ref: '#/components/schemas/EncryptionConfig'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        errorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the error.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the resource you don't have access to.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of resource you don't have access to.
      required:
      - errorCode
      - message
      description: You do not have sufficient access to perform this action.
    AccountFindingsMetric:
      type: object
      properties:
        date:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date from which the findings metrics were retrieved.
        newFindings:
          allOf:
          - $ref: '#/components/schemas/FindingMetricsValuePerSeverity'
          description: The number of new findings of each severity on the specified
            date.
        closedFindings:
          allOf:
          - $ref: '#/components/schemas/FindingMetricsValuePerSeverity'
          description: The number of closed findings of each severity on the specified
            date.
        openFindings:
          allOf:
          - $ref: '#/components/schemas/FindingMetricsValuePerSeverity'
          description: The number of open findings of each severity as of the specified
            date.
        meanTimeToClose:
          allOf:
          - $ref: '#/components/schemas/FindingMetricsValuePerSeverity'
          description: The average time in days it takes to close findings of each
            severity as of a specified date.
      description: A summary of findings metrics for an account on a specified date.
    AnalysisType:
      type: string
      enum:
      - Security
      - All
    BatchGetFindingsError:
      type: object
      properties:
        scanName:
          allOf:
          - $ref: '#/components/schemas/ScanName'
          description: The name of the scan that generated the finding.
        findingId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The finding ID of the finding that was not fetched.
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: A code associated with the type of error.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Describes the error.
      required:
      - scanName
      - findingId
      - errorCode
      - message
      description: Contains information about the error that caused a finding to fail
        to be retrieved.
    BatchGetFindingsErrors:
      type: array
      items:
        $ref: '#/components/schemas/BatchGetFindingsError'
    BatchGetFindingsRequest:
      type: object
      properties:
        findingIdentifiers:
          allOf:
          - $ref: '#/components/schemas/FindingIdentifiers'
          description: A list of finding identifiers. Each identifier consists of
            a `scanName` and a `findingId`. You retrieve the `findingId` when you
            call `GetFindings`.
      required:
      - findingIdentifiers
    BatchGetFindingsResponse:
      type: object
      properties:
        findings:
          allOf:
          - $ref: '#/components/schemas/Findings'
          description: A list of all findings which were successfully fetched.
        failedFindings:
          allOf:
          - $ref: '#/components/schemas/BatchGetFindingsErrors'
          description: A list of errors for individual findings which were not fetched.
            Each BatchGetFindingsError contains the `scanName`, `findingId`, `errorCode`
            and error `message`.
      required:
      - findings
      - failedFindings
    CategoriesWithMostFindings:
      type: array
      items:
        $ref: '#/components/schemas/CategoryWithFindingNum'
    CategoryWithFindingNum:
      type: object
      properties:
        categoryName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the finding category. A finding category is determined
            by the detector that detected the finding.
        findingNumber:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of open findings in the category.
      description: Information about a finding category with open findings.
    ClientToken:
      type: string
      pattern: ^[\S]+$
      minLength: 1
      maxLength: 64
    CodeLine:
      type: object
      properties:
        number:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The code line number.
        content:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The code that contains a vulnerability.
      description: The line of code where a finding was detected.
    CodeSnippet:
      type: array
      items:
        $ref: '#/components/schemas/CodeLine'
    ConflictException:
      type: object
      properties:
        errorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the error.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the service resource associated with the
            request.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of resource associated with the request.
      required:
      - errorCode
      - message
      - resourceId
      - resourceType
      description: The requested operation would cause a conflict with the current
        state of a service resource associated with the request. Resolve the conflict
        before retrying this request.
    CreateScanRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The idempotency token for the request. Amazon CodeGuru Security
            uses this value to prevent the accidental creation of duplicate scans
            if there are failures and retries.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The identifier for the resource object to be scanned.
        scanName:
          allOf:
          - $ref: '#/components/schemas/ScanName'
          description: The unique name that CodeGuru Security uses to track revisions
            across multiple scans of the same resource. Only allowed for a `STANDARD`
            scan type.
        scanType:
          allOf:
          - $ref: '#/components/schemas/ScanType'
          description: 'The type of scan, either `Standard` or `Express`. Defaults
            to `Standard` type if missing.


            `Express` scans run on limited resources and use a limited set of detectors
            to analyze your code in near-real time. `Standard` scans have standard
            resource limits and use the full set of detectors to analyze your code.'
        analysisType:
          allOf:
          - $ref: '#/components/schemas/AnalysisType'
          description: The type of analysis you want CodeGuru Security to perform
            in the scan, either `Security` or `All`. The `Security` type only generates
            findings related to security. The `All` type generates both security findings
            and quality findings. Defaults to `Security` type if missing.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "An array of key-value pairs used to tag a scan. A tag is a\
            \ custom attribute label with two parts:\n\n  * A tag key. For example,\
            \ `CostCenter`, `Environment`, or `Secret`. Tag keys are case sensitive.\n\
            \n  * An optional tag value field. For example, `111122223333`, `Production`,\
            \ or a team name. Omitting the tag value is the same as using an empty\
            \ string. Tag values are case sensitive."
      required:
      - resourceId
      - scanName
    CreateScanResponse:
      type: object
      properties:
        scanName:
          allOf:
          - $ref: '#/components/schemas/ScanName'
          description: The name of the scan.
        runId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          description: UUID that identifies the individual scan run.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The identifier for the resource object that contains resources
            that were scanned.
        scanState:
          allOf:
          - $ref: '#/components/schemas/ScanState'
          description: The current state of the scan. Returns either `InProgress`,
            `Successful`, or `Failed`.
        scanNameArn:
          allOf:
          - $ref: '#/components/schemas/ScanNameArn'
          description: The ARN for the scan name.
      required:
      - scanName
      - runId
      - resourceId
      - scanState
    CreateUploadUrlRequest:
      type: object
      properties:
        scanName:
          allOf:
          - $ref: '#/components/schemas/ScanName'
          description: The name of the scan that will use the uploaded resource. CodeGuru
            Security uses the unique scan name to track revisions across multiple
            scans of the same resource. Use this `scanName` when you call `CreateScan`
            on the code resource you upload to this URL.
      required:
      - scanName
    CreateUploadUrlResponse:
      type: object
      properties:
        s3Url:
          allOf:
          - $ref: '#/components/schemas/S3Url'
          description: A pre-signed S3 URL. You can upload the code file you want
            to scan with the required `requestHeaders` using any HTTP client.
        requestHeaders:
          allOf:
          - $ref: '#/components/schemas/RequestHeaderMap'
          description: A set of key-value pairs that contain the required headers
            when uploading your resource.
        codeArtifactId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          description: The identifier for the uploaded code resource. Pass this to
            `CreateScan` to use the uploaded resources.
      required:
      - s3Url
      - requestHeaders
      - codeArtifactId
    DetectorTags:
      type: array
      items:
        type: string
    EncryptionConfig:
      type: object
      properties:
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key ARN that is used for encryption. If an AWS-managed
            key is used for encryption, returns empty.
      description: Information about the encryption configuration for an account.
        Required to call `UpdateAccountConfiguration`.
    ErrorCode:
      type: string
      enum:
      - DUPLICATE_IDENTIFIER
      - ITEM_DOES_NOT_EXIST
      - INTERNAL_ERROR
      - INVALID_FINDING_ID
      - INVALID_SCAN_NAME
    ErrorMessage:
      type: string
      minLength: 1
    FilePath:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the file.
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The path to the resource with the security vulnerability.
        startLine:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The first line number of the code snippet where the security
            vulnerability appears in your code.
        endLine:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The last line number of the code snippet where the security
            vulnerability appears in your code.
        codeSnippet:
          allOf:
          - $ref: '#/components/schemas/CodeSnippet'
          description: A list of `CodeLine` objects that describe where the security
            vulnerability appears in your code.
      description: Information about the location of security vulnerabilities that
        Amazon CodeGuru Security detected in your code.
    Finding:
      type: object
      properties:
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the finding was created.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the finding.
        generatorId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the component that generated a finding such
            as AmazonCodeGuruSecurity.
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for a finding.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the finding was last updated. Findings are updated
            when you remediate them or when the finding code location changes.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of finding.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the finding. A finding status can be open or
            closed.
        resource:
          allOf:
          - $ref: '#/components/schemas/Resource'
          description: The resource where Amazon CodeGuru Security detected a finding.
        vulnerability:
          allOf:
          - $ref: '#/components/schemas/Vulnerability'
          description: An object that describes the detected security vulnerability.
        severity:
          allOf:
          - $ref: '#/components/schemas/Severity'
          description: The severity of the finding. Severity can be critical, high,
            medium, low, or informational. For information on severity levels, see
            [Finding severity](https://docs.aws.amazon.com/codeguru/latest/security-ug/findings-overview.html#severity-distribution)
            in the _Amazon CodeGuru Security User Guide_.
        remediation:
          allOf:
          - $ref: '#/components/schemas/Remediation'
          description: An object that contains the details about how to remediate
            a finding.
        title:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The title of the finding.
        detectorTags:
          allOf:
          - $ref: '#/components/schemas/DetectorTags'
          description: One or more tags or categorizations that are associated with
            a detector. These tags are defined by type, programming language, or other
            classification such as maintainability or consistency.
        detectorId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the detector that detected the finding in
            your code. A detector is a defined rule based on industry standards and
            AWS best practices.
        detectorName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the detector that identified the security vulnerability
            in your code.
        ruleId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the rule that generated the finding.
      description: Information about a finding that was detected in your code.
    FindingIdentifier:
      type: object
      properties:
        scanName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the scan that generated the finding.
        findingId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for a finding.
      required:
      - scanName
      - findingId
      description: An object that contains information about a finding and the scan
        that generated it.
    FindingIdentifiers:
      type: array
      items:
        $ref: '#/components/schemas/FindingIdentifier'
    FindingMetricsValuePerSeverity:
      type: object
      properties:
        info:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: A numeric value corresponding to an informational finding.
        low:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: A numeric value corresponding to a low severity finding.
        medium:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: A numeric value corresponding to a medium severity finding.
        high:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: A numeric value corresponding to a high severity finding.
        critical:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: A numeric value corresponding to a critical finding.
      description: A numeric value corresponding to the severity of a finding, such
        as the number of open findings or the average time it takes to close findings
        of a given severity.
    Findings:
      type: array
      items:
        $ref: '#/components/schemas/Finding'
    FindingsMetricList:
      type: array
      items:
        $ref: '#/components/schemas/AccountFindingsMetric'
    GetAccountConfigurationRequest:
      type: object
      properties: {}
    GetAccountConfigurationResponse:
      type: object
      properties:
        encryptionConfig:
          allOf:
          - $ref: '#/components/schemas/EncryptionConfig'
          description: An `EncryptionConfig` object that contains the KMS key ARN
            that is used for encryption. By default, CodeGuru Security uses an AWS-managed
            key for encryption. To specify your own key, call `UpdateAccountConfiguration`.
            If you do not specify a customer-managed key, returns empty.
      required:
      - encryptionConfig
    GetFindingsRequest:
      type: object
      properties:
        scanName:
          allOf:
          - $ref: '#/components/schemas/ScanName'
          description: The name of the scan you want to retrieve findings from.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token to use for paginating results that are returned in
            the response. Set the value of this parameter to null for the first request.
            For subsequent calls, use the `nextToken` value returned from the previous
            request to continue listing results after the first page.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to return in the response. Use
            this parameter when paginating results. If additional results exist beyond
            the number you specify, the `nextToken` element is returned in the response.
            Use `nextToken` in a subsequent request to retrieve additional results.
            If not specified, returns 1000 results.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the findings you want to get. Pass either `Open`,
            `Closed`, or `All`.
      required:
      - scanName
    GetFindingsResponse:
      type: object
      properties:
        findings:
          allOf:
          - $ref: '#/components/schemas/Findings'
          description: A list of findings generated by the specified scan.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. You can use this in future calls to `GetFindings`
            to continue listing results after the current page.
    GetMetricsSummaryRequest:
      type: object
      properties:
        date:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date you want to retrieve summary metrics from, rounded
            to the nearest day. The date must be within the past two years.
      required:
      - date
    GetMetricsSummaryResponse:
      type: object
      properties:
        metricsSummary:
          allOf:
          - $ref: '#/components/schemas/MetricsSummary'
          description: The summary metrics from the specified date.
    GetScanRequest:
      type: object
      properties:
        scanName:
          allOf:
          - $ref: '#/components/schemas/ScanName'
          description: The name of the scan you want to view details about.
        runId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          description: UUID that identifies the individual scan run you want to view
            details about. You retrieve this when you call the `CreateScan` operation.
            Defaults to the latest scan run if missing.
      required:
      - scanName
    GetScanResponse:
      type: object
      properties:
        scanName:
          allOf:
          - $ref: '#/components/schemas/ScanName'
          description: The name of the scan.
        runId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          description: UUID that identifies the individual scan run.
        scanState:
          allOf:
          - $ref: '#/components/schemas/ScanState'
          description: The current state of the scan. Returns either `InProgress`,
            `Successful`, or `Failed`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the scan was created.
        analysisType:
          allOf:
          - $ref: '#/components/schemas/AnalysisType'
          description: The type of analysis CodeGuru Security performed in the scan,
            either `Security` or `All`. The `Security` type only generates findings
            related to security. The `All` type generates both security findings and
            quality findings.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the scan was last updated. Only available for
            `STANDARD` scan types.
        numberOfRevisions:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of times a scan has been re-run on a revised resource.
        scanNameArn:
          allOf:
          - $ref: '#/components/schemas/ScanNameArn'
          description: The ARN for the scan name.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: Details about the error that causes a scan to fail to be retrieved.
      required:
      - scanName
      - runId
      - scanState
      - createdAt
      - analysisType
    HeaderKey:
      type: string
      minLength: 1
    HeaderValue:
      type: string
      minLength: 1
    InternalServerException:
      type: object
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The internal error encountered by the server.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
      description: The server encountered an internal error and is unable to complete
        the request.
    KmsKeyArn:
      type: string
      pattern: ^arn:aws:kms:[\S]+:[\d]{12}:key\/(([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})|(mrk-[0-9a-zA-Z]{32}))$
      minLength: 1
      maxLength: 2048
    ListFindingsMetricsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token to use for paginating results that are returned in
            the response. Set the value of this parameter to null for the first request.
            For subsequent calls, use the `nextToken` value returned from the previous
            request to continue listing results after the first page.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to return in the response. Use
            this parameter when paginating results. If additional results exist beyond
            the number you specify, the `nextToken` element is returned in the response.
            Use `nextToken` in a subsequent request to retrieve additional results.
            If not specified, returns 1000 results.
        startDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The start date of the interval which you want to retrieve metrics
            from. Rounds to the nearest day.
        endDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The end date of the interval which you want to retrieve metrics
            from. Round to the nearest day.
      required:
      - startDate
      - endDate
    ListFindingsMetricsResponse:
      type: object
      properties:
        findingsMetrics:
          allOf:
          - $ref: '#/components/schemas/FindingsMetricList'
          description: A list of `AccountFindingsMetric` objects retrieved from the
            specified time interval.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. You can use this in future calls to `ListFindingMetrics`
            to continue listing results after the current page.
    ListScansRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token to use for paginating results that are returned in
            the response. Set the value of this parameter to null for the first request.
            For subsequent calls, use the `nextToken` value returned from the previous
            request to continue listing results after the first page.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to return in the response. Use
            this parameter when paginating results. If additional results exist beyond
            the number you specify, the `nextToken` element is returned in the response.
            Use `nextToken` in a subsequent request to retrieve additional results.
            If not specified, returns 100 results.
    ListScansResponse:
      type: object
      properties:
        summaries:
          allOf:
          - $ref: '#/components/schemas/ScanSummaries'
          description: A list of `ScanSummary` objects with information about all
            scans in an account.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. You can use this in future calls to `ListScans`
            to continue listing results after the current page.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ScanNameArn'
          description: The ARN of the `ScanName` object. You can retrieve this ARN
            by calling `CreateScan`, `ListScans`, or `GetScan`.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "An array of key-value pairs used to tag an existing scan.\
            \ A tag is a custom attribute label with two parts:\n\n  * A tag key.\
            \ For example, `CostCenter`, `Environment`, or `Secret`. Tag keys are\
            \ case sensitive.\n\n  * An optional tag value field. For example, `111122223333`,\
            \ `Production`, or a team name. Omitting the tag value is the same as\
            \ using an empty string. Tag values are case sensitive."
    MetricsSummary:
      type: object
      properties:
        date:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date from which the metrics summary information was retrieved.
        openFindings:
          allOf:
          - $ref: '#/components/schemas/FindingMetricsValuePerSeverity'
          description: The number of open findings of each severity.
        categoriesWithMostFindings:
          allOf:
          - $ref: '#/components/schemas/CategoriesWithMostFindings'
          description: A list of `CategoryWithFindingNum` objects for the top 5 finding
            categories with the most findings.
        scansWithMostOpenFindings:
          allOf:
          - $ref: '#/components/schemas/ScansWithMostOpenFindings'
          description: A list of `ScanNameWithFindingNum` objects for the top 3 scans
            with the most number of open findings.
        scansWithMostOpenCriticalFindings:
          allOf:
          - $ref: '#/components/schemas/ScansWithMostOpenCriticalFindings'
          description: A list of `ScanNameWithFindingNum` objects for the top 3 scans
            with the most number of open critical findings.
      description: A summary of metrics for an account as of a specified date.
    NextToken:
      type: string
      pattern: ^[\S]+$
      minLength: 1
      maxLength: 2048
    Recommendation:
      type: object
      properties:
        text:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The recommended course of action to remediate the finding.
        url:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The URL address to the recommendation for remediating the finding.
      description: Information about the recommended course of action to remediate
        a finding.
    ReferenceUrls:
      type: array
      items:
        type: string
    RelatedVulnerabilities:
      type: array
      items:
        type: string
    Remediation:
      type: object
      properties:
        recommendation:
          allOf:
          - $ref: '#/components/schemas/Recommendation'
          description: An object that contains information about the recommended course
            of action to remediate a finding.
        suggestedFixes:
          allOf:
          - $ref: '#/components/schemas/SuggestedFixes'
          description: A list of `SuggestedFix` objects. Each object contains information
            about a suggested code fix to remediate the finding.
      description: Information about how to remediate a finding.
    RequestHeaderMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/HeaderValue'
    Resource:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `scanName` of the scan that was run on the resource.
        subResourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for a section of the resource.
      description: Information about a resource that contains a finding.
    ResourceId:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/Uuid'
        description: |-
          The identifier for the code file uploaded to the resource object. Returned by `CreateUploadUrl` when you upload resources to be scanned.
      description: |-
        The identifier for a resource object that contains resources to scan. Specifying a codeArtifactId is required to create a scan.
    ResourceNotFoundException:
      type: object
      properties:
        errorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the error.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the resource that was not found.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of resource that was not found.
      required:
      - errorCode
      - message
      - resourceId
      - resourceType
      description: The resource specified in the request was not found.
    S3Url:
      type: string
      minLength: 1
    ScanName:
      type: string
      pattern: ^[a-zA-Z0-9-_$:.]*$
      minLength: 1
      maxLength: 140
    ScanNameArn:
      type: string
      pattern: ^arn:aws:codeguru-security:[\S]+:[\d]{12}:scans\/[a-zA-Z0-9-_$:.]*$
      minLength: 1
      maxLength: 300
    ScanNameWithFindingNum:
      type: object
      properties:
        scanName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the scan.
        findingNumber:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of findings generated by a scan.
      description: Information about the number of findings generated by a scan.
    ScanState:
      type: string
      enum:
      - InProgress
      - Successful
      - Failed
    ScanSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ScanSummary'
    ScanSummary:
      type: object
      properties:
        scanState:
          allOf:
          - $ref: '#/components/schemas/ScanState'
          description: The state of the scan. A scan can be `In Progress`, `Complete`,
            or `Failed`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the scan was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the scan was last updated. A scan is updated when
            it is re-run.
        scanName:
          allOf:
          - $ref: '#/components/schemas/ScanName'
          description: The name of the scan.
        runId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          description: The identifier for the scan run.
        scanNameArn:
          allOf:
          - $ref: '#/components/schemas/ScanNameArn'
          description: The ARN for the scan name.
      required:
      - scanState
      - createdAt
      - scanName
      - runId
      description: Information about a scan.
    ScanType:
      type: string
      enum:
      - Standard
      - Express
    ScansWithMostOpenCriticalFindings:
      type: array
      items:
        $ref: '#/components/schemas/ScanNameWithFindingNum'
    ScansWithMostOpenFindings:
      type: array
      items:
        $ref: '#/components/schemas/ScanNameWithFindingNum'
    Severity:
      type: string
      enum:
      - Critical
      - High
      - Medium
      - Low
      - Info
    Status:
      type: string
      enum:
      - Closed
      - Open
      - All
    SuggestedFix:
      type: object
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the suggested code fix and why it is being
            suggested.
        code:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The suggested code fix. If applicable, includes code patch
            to replace your source code.
      description: Information about the suggested code fix to remediate a finding.
    SuggestedFixes:
      type: array
      items:
        $ref: '#/components/schemas/SuggestedFix'
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ScanNameArn'
          description: The ARN of the `ScanName` object. You can retrieve this ARN
            by calling `CreateScan`, `ListScans`, or `GetScan`.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "An array of key-value pairs used to tag an existing scan.\
            \ A tag is a custom attribute label with two parts:\n\n  * A tag key.\
            \ For example, `CostCenter`, `Environment`, or `Secret`. Tag keys are\
            \ case sensitive.\n\n  * An optional tag value field. For example, `111122223333`,\
            \ `Production`, or a team name. Omitting the tag value is the same as\
            \ using an empty string. Tag values are case sensitive."
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    ThrottlingException:
      type: object
      properties:
        errorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the error.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the originating service.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the originating quota.
      required:
      - errorCode
      - message
      description: The request was denied due to request throttling.
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ScanNameArn'
          description: The ARN of the `ScanName` object. You can retrieve this ARN
            by calling `CreateScan`, `ListScans`, or `GetScan`.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of keys for each tag you want to remove from a scan.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateAccountConfigurationRequest:
      type: object
      properties:
        encryptionConfig:
          allOf:
          - $ref: '#/components/schemas/EncryptionConfig'
          description: The customer-managed KMS key ARN you want to use for encryption.
            If not specified, CodeGuru Security will use an AWS-managed key for encryption.
            If you previously specified a customer-managed KMS key and want CodeGuru
            Security to use an AWS-managed key for encryption instead, pass nothing.
      required:
      - encryptionConfig
    UpdateAccountConfigurationResponse:
      type: object
      properties:
        encryptionConfig:
          allOf:
          - $ref: '#/components/schemas/EncryptionConfig'
          description: An `EncryptionConfig` object that contains the KMS key ARN
            that is used for encryption. If you did not specify a customer-managed
            KMS key in the request, returns empty.
      required:
      - encryptionConfig
    Uuid:
      type: string
      pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
    ValidationException:
      type: object
      properties:
        errorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the error.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: The reason the request failed validation.
        fieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: The field that caused the error, if applicable.
      required:
      - errorCode
      - message
      - reason
      description: The input fails to satisfy the specified constraints.
    ValidationExceptionField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the exception.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Describes the exception.
      required:
      - name
      - message
      description: Information about a validation exception.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - unknownOperation
      - cannotParse
      - fieldValidationFailed
      - other
      - lambdaCodeShaMisMatch
    Vulnerability:
      type: object
      properties:
        referenceUrls:
          allOf:
          - $ref: '#/components/schemas/ReferenceUrls'
          description: One or more URL addresses that contain details about a vulnerability.
        relatedVulnerabilities:
          allOf:
          - $ref: '#/components/schemas/RelatedVulnerabilities'
          description: One or more vulnerabilities that are related to the vulnerability
            being described.
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the vulnerability.
        filePath:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          description: An object that describes the location of the detected security
            vulnerability in your code.
        itemCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of times the vulnerability appears in your code.
      description: Information about a security vulnerability that Amazon CodeGuru
        Security detected.
