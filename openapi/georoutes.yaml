openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: geo_routes
  x-aws-serviceName: georoutes
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-11-19'
  title: Amazon Location Service Routes V2
  description: |-
    With the Amazon Location Routes API you can calculate routes and estimate travel time based on up-to-date road network and live traffic information.

    Calculate optimal travel routes and estimate travel times using up-to-date road network and traffic data. Key features include:

      * Point-to-point routing with estimated travel time, distance, and turn-by-turn directions

      * Multi-point route optimization to minimize travel time or distance

      * Route matrices for efficient multi-destination planning

      * Isoline calculations to determine reachable areas within specified time or distance thresholds

      * Map-matching to align GPS traces with the road network
servers:
- description: The Amazon Location Service Routes V2 regional endpoint
  url: https://geo-routes.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /isolines:
    post:
      operationId: CalculateIsolines
      description: |-
        Use the `CalculateIsolines` action to find service areas that can be reached in a given threshold of time, distance.
      parameters:
      - name: key
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ApiKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Allow:
                  $ref: '#/components/schemas/IsolineAllowOptions'
                ArrivalTime:
                  $ref: '#/components/schemas/TimestampWithTimezoneOffset'
                Avoid:
                  $ref: '#/components/schemas/IsolineAvoidanceOptions'
                DepartNow:
                  $ref: '#/components/schemas/Boolean'
                DepartureTime:
                  $ref: '#/components/schemas/TimestampWithTimezoneOffset'
                Destination:
                  $ref: '#/components/schemas/Position'
                DestinationOptions:
                  $ref: '#/components/schemas/IsolineDestinationOptions'
                IsolineGeometryFormat:
                  $ref: '#/components/schemas/GeometryFormat'
                IsolineGranularity:
                  $ref: '#/components/schemas/IsolineGranularityOptions'
                OptimizeIsolineFor:
                  $ref: '#/components/schemas/IsolineOptimizationObjective'
                OptimizeRoutingFor:
                  $ref: '#/components/schemas/RoutingObjective'
                Origin:
                  $ref: '#/components/schemas/Position'
                OriginOptions:
                  $ref: '#/components/schemas/IsolineOriginOptions'
                Thresholds:
                  $ref: '#/components/schemas/IsolineThresholds'
                Traffic:
                  $ref: '#/components/schemas/IsolineTrafficOptions'
                TravelMode:
                  $ref: '#/components/schemas/IsolineTravelMode'
                TravelModeOptions:
                  $ref: '#/components/schemas/IsolineTravelModeOptions'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /route-matrix:
    post:
      operationId: CalculateRouteMatrix
      description: |-
        Use `CalculateRouteMatrix` to compute results for all pairs of Origins to Destinations. Each row corresponds to one entry in Origins. Each entry in the row corresponds to the route from that entry in Origins to an entry in Destinations positions.
      parameters:
      - name: key
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ApiKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Allow:
                  $ref: '#/components/schemas/RouteMatrixAllowOptions'
                Avoid:
                  $ref: '#/components/schemas/RouteMatrixAvoidanceOptions'
                DepartNow:
                  $ref: '#/components/schemas/Boolean'
                DepartureTime:
                  $ref: '#/components/schemas/TimestampWithTimezoneOffset'
                Destinations:
                  $ref: '#/components/schemas/RouteMatrixDestinationList'
                Exclude:
                  $ref: '#/components/schemas/RouteMatrixExclusionOptions'
                OptimizeRoutingFor:
                  $ref: '#/components/schemas/RoutingObjective'
                Origins:
                  $ref: '#/components/schemas/RouteMatrixOriginList'
                RoutingBoundary:
                  $ref: '#/components/schemas/RouteMatrixBoundary'
                Traffic:
                  $ref: '#/components/schemas/RouteMatrixTrafficOptions'
                TravelMode:
                  $ref: '#/components/schemas/RouteMatrixTravelMode'
                TravelModeOptions:
                  $ref: '#/components/schemas/RouteMatrixTravelModeOptions'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /routes:
    post:
      operationId: CalculateRoutes
      description: |-
        `CalculateRoutes` computes routes given the following required parameters: `Origin` and `Destination`.
      parameters:
      - name: key
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ApiKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Allow:
                  $ref: '#/components/schemas/RouteAllowOptions'
                ArrivalTime:
                  $ref: '#/components/schemas/TimestampWithTimezoneOffset'
                Avoid:
                  $ref: '#/components/schemas/RouteAvoidanceOptions'
                DepartNow:
                  $ref: '#/components/schemas/Boolean'
                DepartureTime:
                  $ref: '#/components/schemas/TimestampWithTimezoneOffset'
                Destination:
                  $ref: '#/components/schemas/Position'
                DestinationOptions:
                  $ref: '#/components/schemas/RouteDestinationOptions'
                Driver:
                  $ref: '#/components/schemas/RouteDriverOptions'
                Exclude:
                  $ref: '#/components/schemas/RouteExclusionOptions'
                InstructionsMeasurementSystem:
                  $ref: '#/components/schemas/MeasurementSystem'
                Languages:
                  $ref: '#/components/schemas/LanguageTagList'
                LegAdditionalFeatures:
                  $ref: '#/components/schemas/RouteLegAdditionalFeatureList'
                LegGeometryFormat:
                  $ref: '#/components/schemas/GeometryFormat'
                MaxAlternatives:
                  $ref: '#/components/schemas/Integer'
                OptimizeRoutingFor:
                  $ref: '#/components/schemas/RoutingObjective'
                Origin:
                  $ref: '#/components/schemas/Position'
                OriginOptions:
                  $ref: '#/components/schemas/RouteOriginOptions'
                SpanAdditionalFeatures:
                  $ref: '#/components/schemas/RouteSpanAdditionalFeatureList'
                Tolls:
                  $ref: '#/components/schemas/RouteTollOptions'
                Traffic:
                  $ref: '#/components/schemas/RouteTrafficOptions'
                TravelMode:
                  $ref: '#/components/schemas/RouteTravelMode'
                TravelModeOptions:
                  $ref: '#/components/schemas/RouteTravelModeOptions'
                TravelStepType:
                  $ref: '#/components/schemas/RouteTravelStepType'
                Waypoints:
                  $ref: '#/components/schemas/RouteWaypointList'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /optimize-waypoints:
    post:
      operationId: OptimizeWaypoints
      description: |-
        `OptimizeWaypoints` calculates the optimal order to travel between a set of waypoints to minimize either the travel time or the distance travelled during the journey, based on road network restrictions and the traffic pattern data.
      parameters:
      - name: key
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ApiKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Avoid:
                  $ref: '#/components/schemas/WaypointOptimizationAvoidanceOptions'
                Clustering:
                  $ref: '#/components/schemas/WaypointOptimizationClusteringOptions'
                DepartureTime:
                  $ref: '#/components/schemas/TimestampWithTimezoneOffset'
                Destination:
                  $ref: '#/components/schemas/Position'
                DestinationOptions:
                  $ref: '#/components/schemas/WaypointOptimizationDestinationOptions'
                Driver:
                  $ref: '#/components/schemas/WaypointOptimizationDriverOptions'
                Exclude:
                  $ref: '#/components/schemas/WaypointOptimizationExclusionOptions'
                OptimizeSequencingFor:
                  $ref: '#/components/schemas/WaypointOptimizationSequencingObjective'
                Origin:
                  $ref: '#/components/schemas/Position'
                OriginOptions:
                  $ref: '#/components/schemas/WaypointOptimizationOriginOptions'
                Traffic:
                  $ref: '#/components/schemas/WaypointOptimizationTrafficOptions'
                TravelMode:
                  $ref: '#/components/schemas/WaypointOptimizationTravelMode'
                TravelModeOptions:
                  $ref: '#/components/schemas/WaypointOptimizationTravelModeOptions'
                Waypoints:
                  $ref: '#/components/schemas/WaypointOptimizationWaypointList'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /snap-to-roads:
    post:
      operationId: SnapToRoads
      description: |-
        `SnapToRoads` matches GPS trace to roads most likely traveled on.
      parameters:
      - name: key
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ApiKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                SnappedGeometryFormat:
                  $ref: '#/components/schemas/GeometryFormat'
                SnapRadius:
                  $ref: '#/components/schemas/DistanceMeters'
                TracePoints:
                  $ref: '#/components/schemas/RoadSnapTracePointList'
                TravelMode:
                  $ref: '#/components/schemas/RoadSnapTravelMode'
                TravelModeOptions:
                  $ref: '#/components/schemas/RoadSnapTravelModeOptions'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: You don't have sufficient access to perform this action.
    ApiKey:
      type: string
      maxLength: 1000
    BeforeWaypointsList:
      type: array
      items:
        $ref: '#/components/schemas/WaypointIndex'
    BoundingBox:
      type: array
      items:
        type: number
      x-sensitive: true
    CalculateIsolinesRequest:
      type: object
      properties:
        Allow:
          allOf:
          - $ref: '#/components/schemas/IsolineAllowOptions'
          description: Features that are allowed while calculating an isoline.
        ArrivalTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: 'Time of arrival at the destination.


            Time format: `YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


            Examples:


            `2020-04-22T17:57:24Z`


            `2020-04-22T17:57:24+02:00`'
        Avoid:
          allOf:
          - $ref: '#/components/schemas/IsolineAvoidanceOptions'
          description: Features that are avoided while calculating a route. Avoidance
            is on a best-case basis. If an avoidance can't be satisfied for a particular
            case, it violates the avoidance and the returned response produces a notice
            for the violation.
        DepartNow:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Uses the current time as the time of departure.
        DepartureTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: 'Time of departure from thr origin.


            Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


            Examples:


            `2020-04-22T17:57:24Z`


            `2020-04-22T17:57:24+02:00`'
        Destination:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: 'The final position for the route. In the World Geodetic System
            (WGS 84) format: `[longitude, latitude]`.'
        DestinationOptions:
          allOf:
          - $ref: '#/components/schemas/IsolineDestinationOptions'
          description: Destination related options.
        IsolineGeometryFormat:
          allOf:
          - $ref: '#/components/schemas/GeometryFormat'
          description: 'The format of the returned IsolineGeometry.


            Default Value:`FlexiblePolyline`'
        IsolineGranularity:
          allOf:
          - $ref: '#/components/schemas/IsolineGranularityOptions'
          description: Defines the granularity of the returned Isoline.
        Key:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: 'Optional: The API key to be used for authorization. Either
            an API key or valid SigV4 signature must be provided when making a request.'
        OptimizeIsolineFor:
          allOf:
          - $ref: '#/components/schemas/IsolineOptimizationObjective'
          description: 'Specifies the optimization criteria for when calculating an
            isoline. AccurateCalculation generates an isoline of higher granularity
            that is more precise. FastCalculation generates an isoline faster by reducing
            the granularity, and in turn the quality of the isoline. BalancedCalculation
            generates an isoline by balancing between quality and performance.


            Default Value: `BalancedCalculation`'
        OptimizeRoutingFor:
          allOf:
          - $ref: '#/components/schemas/RoutingObjective'
          description: 'Specifies the optimization criteria for calculating a route.


            Default Value: `FastestRoute`'
        Origin:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: The start position for the route.
        OriginOptions:
          allOf:
          - $ref: '#/components/schemas/IsolineOriginOptions'
          description: Origin related options.
        Thresholds:
          allOf:
          - $ref: '#/components/schemas/IsolineThresholds'
          description: 'Threshold to be used for the isoline calculation. Up to 3
            thresholds per provided type can be requested.


            You incur a calculation charge for each threshold. Using a large amount
            of thresholds in a request can lead you to incur unexpected charges. See
            [ Amazon Location''s pricing page](https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`)
            for more information.'
        Traffic:
          allOf:
          - $ref: '#/components/schemas/IsolineTrafficOptions'
          description: Traffic related options.
        TravelMode:
          allOf:
          - $ref: '#/components/schemas/IsolineTravelMode'
          description: 'Specifies the mode of transport when calculating a route.
            Used in estimating the speed of travel and road compatibility.


            The mode `Scooter` also applies to motorcycles, set to `Scooter` when
            wanted to calculate options for motorcycles.


            Default Value: `Car`'
        TravelModeOptions:
          allOf:
          - $ref: '#/components/schemas/IsolineTravelModeOptions'
          description: Travel mode related options for the provided travel mode.
      required:
      - Thresholds
    CalculateIsolinesResponse:
      type: object
      properties:
        ArrivalTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: 'Time of arrival at the destination. This parameter is returned
            only if the Destination parameters was provided in the request.


            Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


            Examples:


            `2020-04-22T17:57:24Z`


            `2020-04-22T17:57:24+02:00`'
        DepartureTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: 'Time of departure from thr origin.


            Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


            Examples:


            `2020-04-22T17:57:24Z`


            `2020-04-22T17:57:24+02:00`'
        IsolineGeometryFormat:
          allOf:
          - $ref: '#/components/schemas/GeometryFormat'
          description: 'The format of the returned IsolineGeometry.


            Default Value:`FlexiblePolyline`'
        Isolines:
          allOf:
          - $ref: '#/components/schemas/IsolineList'
          description: Calculated isolines and associated properties.
        PricingBucket:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pricing bucket for which the query is charged at.
        SnappedDestination:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Snapped destination that was used for the Isoline calculation.
        SnappedOrigin:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Snapped origin that was used for the Isoline calculation.
      required:
      - IsolineGeometryFormat
      - Isolines
      - PricingBucket
    CalculateRouteMatrixRequest:
      type: object
      properties:
        Allow:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixAllowOptions'
          description: Features that are allowed while calculating a route.
        Avoid:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixAvoidanceOptions'
          description: Features that are avoided while calculating a route. Avoidance
            is on a best-case basis. If an avoidance can't be satisfied for a particular
            case, it violates the avoidance and the returned response produces a notice
            for the violation.
        DepartNow:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Uses the current time as the time of departure.
        DepartureTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: 'Time of departure from thr origin.


            Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


            Examples:


            `2020-04-22T17:57:24Z`


            `2020-04-22T17:57:24+02:00`'
        Destinations:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixDestinationList'
          description: 'List of destinations for the route.


            Route calculations are billed for each origin and destination pair. If
            you use a large matrix of origins and destinations, your costs will increase
            accordingly. See [ Amazon Location''s pricing page](https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`)
            for more information.'
        Exclude:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixExclusionOptions'
          description: Features to be strictly excluded while calculating the route.
        Key:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: 'Optional: The API key to be used for authorization. Either
            an API key or valid SigV4 signature must be provided when making a request.'
        OptimizeRoutingFor:
          allOf:
          - $ref: '#/components/schemas/RoutingObjective'
          description: 'Specifies the optimization criteria for calculating a route.


            Default Value: `FastestRoute`'
        Origins:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixOriginList'
          description: 'The position in longitude and latitude for the origin.


            Route calculations are billed for each origin and destination pair. Using
            a large amount of Origins in a request can lead you to incur unexpected
            charges. See [ Amazon Location''s pricing page](https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`)
            for more information.'
        RoutingBoundary:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixBoundary'
          description: 'Boundary within which the matrix is to be calculated. All
            data, origins and destinations outside the boundary are considered invalid.


            When request routing boundary was set as AutoCircle, the response routing
            boundary will return Circle derived from the AutoCircle settings.'
        Traffic:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixTrafficOptions'
          description: Traffic related options.
        TravelMode:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixTravelMode'
          description: 'Specifies the mode of transport when calculating a route.
            Used in estimating the speed of travel and road compatibility.


            Default Value: `Car`'
        TravelModeOptions:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixTravelModeOptions'
          description: Travel mode related options for the provided travel mode.
      required:
      - Destinations
      - Origins
      - RoutingBoundary
    CalculateRouteMatrixResponse:
      type: object
      properties:
        ErrorCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The count of error results in the route matrix. If this number
            is 0, all routes were calculated successfully.
        PricingBucket:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pricing bucket for which the query is charged at.
        RouteMatrix:
          allOf:
          - $ref: '#/components/schemas/RouteMatrix'
          description: The calculated route matrix containing the results for all
            pairs of Origins to Destination positions. Each row corresponds to one
            entry in Origins. Each entry in the row corresponds to the route from
            that entry in Origins to an entry in Destination positions.
        RoutingBoundary:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixBoundary'
          description: 'Boundary within which the matrix is to be calculated. All
            data, origins and destinations outside the boundary are considered invalid.


            When request routing boundary was set as AutoCircle, the response routing
            boundary will return Circle derived from the AutoCircle settings.'
      required:
      - ErrorCount
      - PricingBucket
      - RouteMatrix
      - RoutingBoundary
    CalculateRoutesRequest:
      type: object
      properties:
        Allow:
          allOf:
          - $ref: '#/components/schemas/RouteAllowOptions'
          description: Features that are allowed while calculating a route.
        ArrivalTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: 'Time of arrival at the destination.


            Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


            Examples:


            `2020-04-22T17:57:24Z`


            `2020-04-22T17:57:24+02:00`'
        Avoid:
          allOf:
          - $ref: '#/components/schemas/RouteAvoidanceOptions'
          description: Features that are avoided while calculating a route. Avoidance
            is on a best-case basis. If an avoidance can't be satisfied for a particular
            case, it violates the avoidance and the returned response produces a notice
            for the violation.
        DepartNow:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Uses the current time as the time of departure.
        DepartureTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: 'Time of departure from thr origin.


            Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


            Examples:


            `2020-04-22T17:57:24Z`


            `2020-04-22T17:57:24+02:00`'
        Destination:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: 'The final position for the route. In the World Geodetic System
            (WGS 84) format: `[longitude, latitude]`.'
        DestinationOptions:
          allOf:
          - $ref: '#/components/schemas/RouteDestinationOptions'
          description: Destination related options.
        Driver:
          allOf:
          - $ref: '#/components/schemas/RouteDriverOptions'
          description: Driver related options.
        Exclude:
          allOf:
          - $ref: '#/components/schemas/RouteExclusionOptions'
          description: Features to be strictly excluded while calculating the route.
        InstructionsMeasurementSystem:
          allOf:
          - $ref: '#/components/schemas/MeasurementSystem'
          description: Measurement system to be used for instructions within steps
            in the response.
        Key:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: 'Optional: The API key to be used for authorization. Either
            an API key or valid SigV4 signature must be provided when making a request.'
        Languages:
          allOf:
          - $ref: '#/components/schemas/LanguageTagList'
          description: 'List of languages for instructions within steps in the response.


            Instructions in the requested language are returned only if they are available.'
        LegAdditionalFeatures:
          allOf:
          - $ref: '#/components/schemas/RouteLegAdditionalFeatureList'
          description: "A list of optional additional parameters such as timezone\
            \ that can be requested for each result.\n\n  * `Elevation`: Retrieves\
            \ the elevation information for each location.\n\n  * `Incidents`: Provides\
            \ information on traffic incidents along the route.\n\n  * `PassThroughWaypoints`:\
            \ Indicates waypoints that are passed through without stopping.\n\n  *\
            \ `Summary`: Returns a summary of the route, including distance and duration.\n\
            \n  * `Tolls`: Supplies toll cost information along the route.\n\n  *\
            \ `TravelStepInstructions`: Provides step-by-step instructions for travel\
            \ along the route.\n\n  * `TruckRoadTypes`: Returns information about\
            \ road types suitable for trucks.\n\n  * `TypicalDuration`: Gives typical\
            \ travel duration based on historical data.\n\n  * `Zones`: Specifies\
            \ the time zone information for each waypoint."
        LegGeometryFormat:
          allOf:
          - $ref: '#/components/schemas/GeometryFormat'
          description: 'Specifies the format of the geometry returned for each leg
            of the route. You can choose between two different geometry encoding formats.


            `FlexiblePolyline`: A compact and precise encoding format for the leg
            geometry. For more information on the format, see the GitHub repository
            for [ `FlexiblePolyline` ](https://github.com/heremaps/flexible-polyline).


            `Simple`: A less compact encoding, which is easier to decode but may be
            less precise and result in larger payloads.'
        MaxAlternatives:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Maximum number of alternative routes to be provided in the
            response, if available.
        OptimizeRoutingFor:
          allOf:
          - $ref: '#/components/schemas/RoutingObjective'
          description: 'Specifies the optimization criteria for calculating a route.


            Default Value: `FastestRoute`'
        Origin:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: The start position for the route.
        OriginOptions:
          allOf:
          - $ref: '#/components/schemas/RouteOriginOptions'
          description: Origin related options.
        SpanAdditionalFeatures:
          allOf:
          - $ref: '#/components/schemas/RouteSpanAdditionalFeatureList'
          description: A list of optional features such as SpeedLimit that can be
            requested for a Span. A span is a section of a Leg for which the requested
            features have the same values.
        Tolls:
          allOf:
          - $ref: '#/components/schemas/RouteTollOptions'
          description: Toll related options.
        Traffic:
          allOf:
          - $ref: '#/components/schemas/RouteTrafficOptions'
          description: Traffic related options.
        TravelMode:
          allOf:
          - $ref: '#/components/schemas/RouteTravelMode'
          description: 'Specifies the mode of transport when calculating a route.
            Used in estimating the speed of travel and road compatibility.


            Default Value: `Car`'
        TravelModeOptions:
          allOf:
          - $ref: '#/components/schemas/RouteTravelModeOptions'
          description: Travel mode related options for the provided travel mode.
        TravelStepType:
          allOf:
          - $ref: '#/components/schemas/RouteTravelStepType'
          description: Type of step returned by the response. Default provides basic
            steps intended for web based applications. TurnByTurn provides detailed
            instructions with more granularity intended for a turn based navigation
            system.
        Waypoints:
          allOf:
          - $ref: '#/components/schemas/RouteWaypointList'
          description: List of waypoints between the Origin and Destination.
      required:
      - Destination
      - Origin
    CalculateRoutesResponse:
      type: object
      properties:
        LegGeometryFormat:
          allOf:
          - $ref: '#/components/schemas/GeometryFormat'
          description: Specifies the format of the geometry returned for each leg
            of the route.
        Notices:
          allOf:
          - $ref: '#/components/schemas/RouteResponseNoticeList'
          description: Notices are additional information returned that indicate issues
            that occurred during route calculation.
        PricingBucket:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pricing bucket for which the query is charged at.
        Routes:
          allOf:
          - $ref: '#/components/schemas/RouteList'
          description: The path from the origin to the destination.
      required:
      - LegGeometryFormat
      - Notices
      - PricingBucket
      - Routes
    Circle:
      type: object
      properties:
        Center:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: 'Center of the Circle defined in longitude and latitude coordinates.


            Example: `[-123.1174, 49.2847]` represents the position with longitude
            `-123.1174` and latitude `49.2847`.'
        Radius:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: 'Radius of the Circle.


            **Unit** : `meters`'
      required:
      - Center
      - Radius
      description: Geometry defined as a circle. When request routing boundary was
        set as `AutoCircle`, the response routing boundary will return `Circle` derived
        from the `AutoCircle` settings.
    ClusterIndex:
      type: integer
      minimum: 0
    Corridor:
      type: object
      properties:
        LineString:
          allOf:
          - $ref: '#/components/schemas/LineString'
          description: 'An ordered list of positions used to plot a route on a map.


            LineString and Polyline are mutually exclusive properties.'
        Radius:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Radius that defines the width of the corridor.
      required:
      - LineString
      - Radius
      description: Geometry defined as a corridor - a LineString with a radius that
        defines the width of the corridor.
    CountryCode:
      type: string
      pattern: ^([A-Z]{2}|[A-Z]{3})$
      minLength: 2
      maxLength: 3
    CountryCode3:
      type: string
      pattern: ^[A-Z]{3}$
      minLength: 3
      maxLength: 3
    CountryCodeList:
      type: array
      items:
        $ref: '#/components/schemas/CountryCode'
    CurrencyCode:
      type: string
      pattern: ^[A-Z]{3}$
      minLength: 3
      maxLength: 3
    DayOfWeek:
      type: string
      enum:
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday
      - Saturday
      - Sunday
    DimensionCentimeters:
      type: integer
      format: int64
      default: 0
      minimum: 0
      maximum: 4294967295
    DistanceMeters:
      type: integer
      format: int64
      default: 0
      minimum: 0
      maximum: 4294967295
    DistanceThresholdList:
      type: array
      items:
        $ref: '#/components/schemas/DistanceMeters'
    DurationSeconds:
      type: integer
      format: int64
      default: 0
      minimum: 0
      maximum: 4294967295
    GeometryFormat:
      type: string
      enum:
      - FlexiblePolyline
      - Simple
    Heading:
      type: number
      format: double
      default: 0
      minimum: 0.0
      maximum: 360.0
    IndexList:
      type: array
      items:
        type: integer
    InternalServerException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: The request processing has failed because of an unknown error,
        exception or failure.
    Isoline:
      type: object
      properties:
        Connections:
          allOf:
          - $ref: '#/components/schemas/IsolineConnectionList'
          description: Isolines may contain multiple components, if these components
            are connected by ferry links. These components are returned as separate
            polygons while the ferry links are returned as connections.
        DistanceThreshold:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance threshold corresponding to the calculated Isoline.
        Geometries:
          allOf:
          - $ref: '#/components/schemas/IsolineShapeGeometryList'
          description: Geometries for the Calculated isolines.
        TimeThreshold:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: Time threshold corresponding to the calculated isoline.
      required:
      - Connections
      - Geometries
      description: Calculated isolines and associated properties.
    IsolineAllowOptions:
      type: object
      properties:
        Hot:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Allow Hot (High Occupancy Toll) lanes while calculating an
            isoline.


            Default value: `false`'
        Hov:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Allow Hov (High Occupancy vehicle) lanes while calculating
            an isoline.


            Default value: `false`'
      description: Features that are allowed while calculating an isoline.
    IsolineAvoidanceArea:
      type: object
      properties:
        Except:
          allOf:
          - $ref: '#/components/schemas/IsolineAvoidanceAreaGeometryList'
          description: Exceptions to the provided avoidance geometry, to be included
            while calculating an isoline.
        Geometry:
          allOf:
          - $ref: '#/components/schemas/IsolineAvoidanceAreaGeometry'
          description: Geometry of the area to be avoided.
      required:
      - Geometry
      description: The area to be avoided.
    IsolineAvoidanceAreaGeometry:
      type: object
      properties:
        BoundingBox:
          allOf:
          - $ref: '#/components/schemas/BoundingBox'
          description: Geometry defined as a bounding box. The first pair represents
            the X and Y coordinates (longitude and latitude,) of the southwest corner
            of the bounding box; the second pair represents the X and Y coordinates
            (longitude and latitude) of the northeast corner.
        Corridor:
          allOf:
          - $ref: '#/components/schemas/Corridor'
          description: Geometry defined as a corridor - a LineString with a radius
            that defines the width of the corridor.
        Polygon:
          allOf:
          - $ref: '#/components/schemas/LinearRings'
          description: A list of Polygon will be excluded for calculating isolines,
            the list can only contain 1 polygon.
        PolylineCorridor:
          allOf:
          - $ref: '#/components/schemas/PolylineCorridor'
          description: Geometry defined as an encoded corridor – a polyline with a
            radius that defines the width of the corridor. For more information on
            polyline encoding, see <https://github.com/heremaps/flexiblepolyline/blob/master/README.md>.
        PolylinePolygon:
          allOf:
          - $ref: '#/components/schemas/PolylineRingList'
          description: A list of PolylinePolygon's that are excluded for calculating
            isolines, the list can only contain 1 polygon. For more information on
            polyline encoding, see <https://github.com/heremaps/flexiblepolyline/blob/master/README.md>.
      description: The avoidance geometry, to be included while calculating an isoline.
    IsolineAvoidanceAreaGeometryList:
      type: array
      items:
        $ref: '#/components/schemas/IsolineAvoidanceAreaGeometry'
    IsolineAvoidanceAreaList:
      type: array
      items:
        $ref: '#/components/schemas/IsolineAvoidanceArea'
    IsolineAvoidanceOptions:
      type: object
      properties:
        Areas:
          allOf:
          - $ref: '#/components/schemas/IsolineAvoidanceAreaList'
          description: Areas to be avoided.
        CarShuttleTrains:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid car-shuttle-trains while calculating an isoline.
        ControlledAccessHighways:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid controlled access highways while calculating an isoline.
        DirtRoads:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid dirt roads while calculating an isoline.
        Ferries:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid ferries while calculating an isoline.
        SeasonalClosure:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid roads that have seasonal closure while calculating an
            isoline.
        TollRoads:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoids roads where the specified toll transponders are the
            only mode of payment.
        TollTransponders:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoids roads where the specified toll transponders are the
            only mode of payment.
        TruckRoadTypes:
          allOf:
          - $ref: '#/components/schemas/TruckRoadTypeList'
          description: 'Truck road type identifiers. `BK1` through `BK4` apply only
            to Sweden. `A2,A4,B2,B4,C,D,ET2,ET4` apply only to Mexico.


            There are currently no other supported values as of 26th April 2024.'
        Tunnels:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid tunnels while calculating an isoline.
        UTurns:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid U-turns for calculation on highways and motorways.
        ZoneCategories:
          allOf:
          - $ref: '#/components/schemas/IsolineAvoidanceZoneCategoryList'
          description: Zone categories to be avoided.
      description: Features that are avoided while calculating isolines. Avoidance
        is on a best-case basis. If an avoidance can't be satisfied for a particular
        case, it violates the avoidance and the returned response produces a notice
        for the violation.
    IsolineAvoidanceZoneCategory:
      type: object
      properties:
        Category:
          allOf:
          - $ref: '#/components/schemas/IsolineZoneCategory'
          description: Zone category to be avoided.
      description: Zone category to be avoided.
    IsolineAvoidanceZoneCategoryList:
      type: array
      items:
        $ref: '#/components/schemas/IsolineAvoidanceZoneCategory'
    IsolineCarOptions:
      type: object
      properties:
        EngineType:
          allOf:
          - $ref: '#/components/schemas/IsolineEngineType'
          description: Engine type of the vehicle.
        LicensePlate:
          allOf:
          - $ref: '#/components/schemas/IsolineVehicleLicensePlate'
          description: The vehicle License Plate.
        MaxSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Maximum speed.


            **Unit** : `KilometersPerHour`'
        Occupancy:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The number of occupants in the vehicle.


            Default Value: `1`'
      description: Travel mode options when the provided travel mode is `Car`.
    IsolineConnection:
      type: object
      properties:
        FromPolygonIndex:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Index of the polygon corresponding to the "from" component
            of the connection. The polygon is available from `Isoline[].Geometries`.
        Geometry:
          allOf:
          - $ref: '#/components/schemas/IsolineConnectionGeometry'
          description: The isoline geometry.
        ToPolygonIndex:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Index of the polygon corresponding to the "to" component of
            the connection. The polygon is available from `Isoline[].Geometries`.
      required:
      - FromPolygonIndex
      - Geometry
      - ToPolygonIndex
      description: Isolines may contain multiple components, if these components are
        connected by ferry links. These components are returned as separate polygons
        while the ferry links are returned as connections.
    IsolineConnectionGeometry:
      type: object
      properties:
        LineString:
          allOf:
          - $ref: '#/components/schemas/LineString'
          description: 'An ordered list of positions used to plot a route on a map.


            LineString and Polyline are mutually exclusive properties.'
        Polyline:
          allOf:
          - $ref: '#/components/schemas/Polyline'
          description: 'An ordered list of positions used to plot a route on a map
            in a lossy compression format.


            LineString and Polyline are mutually exclusive properties.'
      description: Geometry of the connection between different isoline components.
    IsolineConnectionList:
      type: array
      items:
        $ref: '#/components/schemas/IsolineConnection'
    IsolineDestinationOptions:
      type: object
      properties:
        AvoidActionsForDistance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Avoids actions for the provided distance. This is typically
            to consider for users in moving vehicles who may not have sufficient time
            to make an action at an origin or a destination.
        Heading:
          allOf:
          - $ref: '#/components/schemas/Heading'
          description: GPS Heading at the position.
        Matching:
          allOf:
          - $ref: '#/components/schemas/IsolineMatchingOptions'
          description: Options to configure matching the provided position to the
            road network.
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/IsolineSideOfStreetOptions'
          description: Options to configure matching the provided position to a side
            of the street.
      description: Destination related options.
    IsolineEngineType:
      type: string
      enum:
      - Electric
      - InternalCombustion
      - PluginHybrid
    IsolineGranularityOptions:
      type: object
      properties:
        MaxPoints:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Maximum number of points of returned Isoline.
        MaxResolution:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: 'Maximum resolution of the returned isoline.


            **Unit** : `meters`'
      description: Isoline granularity related options.
    IsolineHazardousCargoType:
      type: string
      enum:
      - Combustible
      - Corrosive
      - Explosive
      - Flammable
      - Gas
      - HarmfulToWater
      - Organic
      - Other
      - Poison
      - PoisonousInhalation
      - Radioactive
    IsolineHazardousCargoTypeList:
      type: array
      items:
        $ref: '#/components/schemas/IsolineHazardousCargoType'
    IsolineList:
      type: array
      items:
        $ref: '#/components/schemas/Isoline'
    IsolineMatchingOptions:
      type: object
      properties:
        NameHint:
          allOf:
          - $ref: '#/components/schemas/SensitiveString'
          description: Attempts to match the provided position to a road similar to
            the provided name.
        OnRoadThreshold:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: 'If the distance to a highway/bridge/tunnel/sliproad is within
            threshold, the waypoint will be snapped to the highway/bridge/tunnel/sliproad.


            **Unit** : `meters`'
        Radius:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: 'Considers all roads within the provided radius to match the
            provided destination to. The roads that are considered are determined
            by the provided Strategy.


            **Unit** : `Meters`'
        Strategy:
          allOf:
          - $ref: '#/components/schemas/MatchingStrategy'
          description: Strategy that defines matching of the position onto the road
            network. MatchAny considers all roads possible, whereas MatchMostSignificantRoad
            matches to the most significant road.
      description: Isoline matching related options.
    IsolineOptimizationObjective:
      type: string
      enum:
      - AccurateCalculation
      - BalancedCalculation
      - FastCalculation
    IsolineOriginOptions:
      type: object
      properties:
        AvoidActionsForDistance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Avoids actions for the provided distance. This is typically
            to consider for users in moving vehicles who may not have sufficient time
            to make an action at an origin or a destination.
        Heading:
          allOf:
          - $ref: '#/components/schemas/Heading'
          description: GPS Heading at the position.
        Matching:
          allOf:
          - $ref: '#/components/schemas/IsolineMatchingOptions'
          description: Options to configure matching the provided position to the
            road network.
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/IsolineSideOfStreetOptions'
          description: Options to configure matching the provided position to a side
            of the street.
      description: Origin related options.
    IsolineScooterOptions:
      type: object
      properties:
        EngineType:
          allOf:
          - $ref: '#/components/schemas/IsolineEngineType'
          description: Engine type of the vehicle.
        LicensePlate:
          allOf:
          - $ref: '#/components/schemas/IsolineVehicleLicensePlate'
          description: The vehicle License Plate.
        MaxSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Maximum speed specified.


            **Unit** : `KilometersPerHour`'
        Occupancy:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The number of occupants in the vehicle.


            Default Value: `1`'
      description: Travel mode options when the provided travel mode is `Scooter`
    IsolineShapeGeometry:
      type: object
      properties:
        Polygon:
          allOf:
          - $ref: '#/components/schemas/LinearRings'
          description: A list of Isoline Polygons, for each isoline polygon, it contains
            polygons of the first linear ring (the outer ring) and from 2nd item to
            the last item (the inner rings).
        PolylinePolygon:
          allOf:
          - $ref: '#/components/schemas/PolylineRingList'
          description: A list of Isoline PolylinePolygon, for each isoline PolylinePolygon,
            it contains PolylinePolygon of the first linear ring (the outer ring)
            and from 2nd item to the last item (the inner rings). For more information
            on polyline encoding, see <https://github.com/heremaps/flexiblepolyline/blob/master/README.md>.
      description: Geometry of the connection between different Isoline components.
    IsolineShapeGeometryList:
      type: array
      items:
        $ref: '#/components/schemas/IsolineShapeGeometry'
    IsolineSideOfStreetOptions:
      type: object
      properties:
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
        UseWith:
          allOf:
          - $ref: '#/components/schemas/SideOfStreetMatchingStrategy'
          description: 'Strategy that defines when the side of street position should
            be used. AnyStreet will always use the provided position.


            Default Value: `DividedStreetOnly`'
      required:
      - Position
      description: Options to configure matching the provided position to a side of
        the street.
    IsolineThresholds:
      type: object
      properties:
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceThresholdList'
          description: Distance to be used for the isoline calculation.
        Time:
          allOf:
          - $ref: '#/components/schemas/TimeThresholdList'
          description: Time to be used for the isoline calculation.
      description: Threshold to be used for the isoline calculation. Up to 5 thresholds
        per provided type can be requested.
    IsolineTrafficOptions:
      type: object
      properties:
        FlowEventThresholdOverride:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration for which flow traffic is considered valid. For this
            period, the flow traffic is used over historical traffic data. Flow traffic
            refers to congestion, which changes very quickly. Duration in seconds
            for which flow traffic event would be considered valid. While flow traffic
            event is valid it will be used over the historical traffic data.


            **Unit** : `seconds`'
        Usage:
          allOf:
          - $ref: '#/components/schemas/TrafficUsage'
          description: 'Determines if traffic should be used or ignored while calculating
            the route.


            Default Value: `UseTrafficData`'
      description: Options related to traffic.
    IsolineTrailerOptions:
      type: object
      properties:
        AxleCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Total number of axles of the vehicle.
        TrailerCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'Number of trailers attached to the vehicle.


            Default Value: `0`'
      description: Trailer options corresponding to the vehicle.
    IsolineTravelMode:
      type: string
      enum:
      - Car
      - Pedestrian
      - Scooter
      - Truck
    IsolineTravelModeOptions:
      type: object
      properties:
        Car:
          allOf:
          - $ref: '#/components/schemas/IsolineCarOptions'
          description: Travel mode options when the provided travel mode is "Car"
        Scooter:
          allOf:
          - $ref: '#/components/schemas/IsolineScooterOptions'
          description: 'Travel mode options when the provided travel mode is `Scooter`


            When travel mode is set to `Scooter`, then the avoidance option `ControlledAccessHighways`
            defaults to `true`.'
        Truck:
          allOf:
          - $ref: '#/components/schemas/IsolineTruckOptions'
          description: Travel mode options when the provided travel mode is "Truck"
      description: Travel mode related options for the provided travel mode.
    IsolineTruckOptions:
      type: object
      properties:
        AxleCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Total number of axles of the vehicle.
        EngineType:
          allOf:
          - $ref: '#/components/schemas/IsolineEngineType'
          description: Engine type of the vehicle.
        GrossWeight:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Gross weight of the vehicle including trailers, and goods
            at capacity.


            **Unit** : `Kilograms`'
        HazardousCargos:
          allOf:
          - $ref: '#/components/schemas/IsolineHazardousCargoTypeList'
          description: List of Hazardous cargo contained in the vehicle.
        Height:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Height of the vehicle.


            **Unit** : `centimeters`'
        HeightAboveFirstAxle:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Height of the vehicle above its first axle.


            **Unit** : `centimeters`'
        KpraLength:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Kingpin to rear axle length of the vehicle.


            **Unit** : `centimeters`'
        Length:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Length of the vehicle.


            **Unit** : `centimeters`'
        LicensePlate:
          allOf:
          - $ref: '#/components/schemas/IsolineVehicleLicensePlate'
          description: The vehicle License Plate.
        MaxSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Maximum speed specified.


            **Unit** : `KilometersPerHour`'
        Occupancy:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The number of occupants in the vehicle.


            Default Value: `1`'
        PayloadCapacity:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Payload capacity of the vehicle and trailers attached.


            **Unit** : `kilograms`'
        TireCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Number of tires on the vehicle.
        Trailer:
          allOf:
          - $ref: '#/components/schemas/IsolineTrailerOptions'
          description: Trailer options corresponding to the vehicle.
        TruckType:
          allOf:
          - $ref: '#/components/schemas/IsolineTruckType'
          description: Type of the truck.
        TunnelRestrictionCode:
          allOf:
          - $ref: '#/components/schemas/TunnelRestrictionCode'
          description: "The tunnel restriction code.\n\nTunnel categories in this\
            \ list indicate the restrictions which apply to certain tunnels in Great\
            \ Britain. They relate to the types of dangerous goods that can be transported\
            \ through them.\n\n  * _Tunnel Category B_\n\n    * _Risk Level_ : Limited\
            \ risk\n\n    * _Restrictions_ : Few restrictions\n\n  * _Tunnel Category\
            \ C_\n\n    * _Risk Level_ : Medium risk\n\n    * _Restrictions_ : Some\
            \ restrictions\n\n  * _Tunnel Category D_\n\n    * _Risk Level_ : High\
            \ risk\n\n    * _Restrictions_ : Many restrictions occur\n\n  * _Tunnel\
            \ Category E_\n\n    * _Risk Level_ : Very high risk\n\n    * _Restrictions_\
            \ : Restricted tunnel"
        WeightPerAxle:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Heaviest weight per axle irrespective of the axle type or
            the axle group. Meant for usage in countries where the differences in
            axle types or axle groups are not distinguished.


            **Unit** : `Kilograms`'
        WeightPerAxleGroup:
          allOf:
          - $ref: '#/components/schemas/WeightPerAxleGroup'
          description: 'Specifies the total weight for the specified axle group. Meant
            for usage in countries that have different regulations based on the axle
            group type.


            **Unit** : `Kilograms`'
        Width:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Width of the vehicle.


            **Unit** : `centimeters`'
      description: Travel mode options when the provided travel mode is "Truck"
    IsolineTruckType:
      type: string
      enum:
      - LightTruck
      - StraightTruck
      - Tractor
    IsolineVehicleLicensePlate:
      type: object
      properties:
        LastCharacter:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The last character of the License Plate.
      description: The vehicle license plate.
    IsolineZoneCategory:
      type: string
      enum:
      - CongestionPricing
      - Environmental
      - Vignette
    LanguageTag:
      type: string
      minLength: 2
      maxLength: 35
    LanguageTagList:
      type: array
      items:
        $ref: '#/components/schemas/LanguageTag'
    LineString:
      type: array
      items:
        $ref: '#/components/schemas/Position'
    LinearRing:
      type: array
      items:
        $ref: '#/components/schemas/Position'
    LinearRings:
      type: array
      items:
        $ref: '#/components/schemas/LinearRing'
    LocalizedString:
      type: object
      properties:
        Language:
          allOf:
          - $ref: '#/components/schemas/LanguageTag'
          description: A list of BCP 47 compliant language codes for the results to
            be rendered in. The request uses the regional default as the fallback
            if the requested language can't be provided.
        Value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of the localized string.
      required:
      - Value
      description: The localized string.
    LocalizedStringList:
      type: array
      items:
        $ref: '#/components/schemas/LocalizedString'
    MatchingStrategy:
      type: string
      enum:
      - MatchAny
      - MatchMostSignificantRoad
    MeasurementSystem:
      type: string
      enum:
      - Metric
      - Imperial
    OptimizeWaypointsRequest:
      type: object
      properties:
        Avoid:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationAvoidanceOptions'
          description: Features that are avoided. Avoidance is on a best-case basis.
            If an avoidance can't be satisfied for a particular case, this setting
            is ignored.
        Clustering:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationClusteringOptions'
          description: Clustering allows you to specify how nearby waypoints can be
            clustered to improve the optimized sequence.
        DepartureTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: 'Departure time from the waypoint.


            Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


            Examples:


            `2020-04-22T17:57:24Z`


            `2020-04-22T17:57:24+02:00`'
        Destination:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: 'The final position for the route in the World Geodetic System
            (WGS 84) format: `[longitude, latitude]`.'
        DestinationOptions:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationDestinationOptions'
          description: Destination related options.
        Driver:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationDriverOptions'
          description: Driver related options.
        Exclude:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationExclusionOptions'
          description: Features to be strictly excluded while calculating the route.
        Key:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: 'Optional: The API key to be used for authorization. Either
            an API key or valid SigV4 signature must be provided when making a request.'
        OptimizeSequencingFor:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationSequencingObjective'
          description: 'Specifies the optimization criteria for the calculated sequence.


            Default Value: `FastestRoute`.'
        Origin:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: The start position for the route.
        OriginOptions:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationOriginOptions'
          description: Origin related options.
        Traffic:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationTrafficOptions'
          description: Traffic-related options.
        TravelMode:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationTravelMode'
          description: 'Specifies the mode of transport when calculating a route.
            Used in estimating the speed of travel and road compatibility.


            Default Value: `Car`'
        TravelModeOptions:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationTravelModeOptions'
          description: Travel mode related options for the provided travel mode.
        Waypoints:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationWaypointList'
          description: List of waypoints between the `Origin` and `Destination`.
      required:
      - Origin
    OptimizeWaypointsResponse:
      type: object
      properties:
        Connections:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationConnectionList'
          description: Details about the connection from one waypoint to the next,
            within the optimized sequence.
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Overall distance to travel the whole sequence.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Overall duration to travel the whole sequence.


            **Unit** : `seconds`'
        ImpedingWaypoints:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationImpedingWaypointList'
          description: Returns waypoints that caused the optimization problem to fail,
            and the constraints that were unsatisfied leading to the failure.
        OptimizedWaypoints:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationOptimizedWaypointList'
          description: Waypoints in the order of the optimized sequence.
        PricingBucket:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pricing bucket for which the query is charged at.
        TimeBreakdown:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationTimeBreakdown'
          description: Time breakdown for the sequence.
      required:
      - Connections
      - Distance
      - Duration
      - ImpedingWaypoints
      - OptimizedWaypoints
      - PricingBucket
      - TimeBreakdown
    Polyline:
      type: string
      minLength: 1
    PolylineCorridor:
      type: object
      properties:
        Polyline:
          allOf:
          - $ref: '#/components/schemas/Polyline'
          description: 'An ordered list of positions used to plot a route on a map
            in a lossy compression format.


            LineString and Polyline are mutually exclusive properties.'
        Radius:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'Considers all roads within the provided radius to match the
            provided destination to. The roads that are considered are determined
            by the provided Strategy.


            **Unit** : `Meters`'
      required:
      - Polyline
      - Radius
      description: Geometry defined as an encoded corridor - an encoded polyline with
        a radius that defines the width of the corridor.
    PolylineRing:
      type: string
      minLength: 1
    PolylineRingList:
      type: array
      items:
        $ref: '#/components/schemas/PolylineRing'
    Position:
      type: array
      items:
        type: number
      x-sensitive: true
    Position23:
      type: array
      items:
        type: number
      x-sensitive: true
    RoadSnapHazardousCargoType:
      type: string
      enum:
      - Combustible
      - Corrosive
      - Explosive
      - Flammable
      - Gas
      - HarmfulToWater
      - Organic
      - Other
      - Poison
      - PoisonousInhalation
      - Radioactive
    RoadSnapHazardousCargoTypeList:
      type: array
      items:
        $ref: '#/components/schemas/RoadSnapHazardousCargoType'
    RoadSnapNotice:
      type: object
      properties:
        Code:
          allOf:
          - $ref: '#/components/schemas/RoadSnapNoticeCode'
          description: Code corresponding to the issue.
        Title:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The notice title.
        TracePointIndexes:
          allOf:
          - $ref: '#/components/schemas/RoadSnapTracePointIndexList'
          description: TracePoint indices for which the provided notice code corresponds
            to.
      required:
      - Code
      - Title
      - TracePointIndexes
      description: Notices provide information around factors that may have influenced
        snapping in a manner atypical to the standard use cases.
    RoadSnapNoticeCode:
      type: string
      enum:
      - TracePointsHeadingIgnored
      - TracePointsIgnored
      - TracePointsMovedByLargeDistance
      - TracePointsNotMatched
      - TracePointsOutOfSequence
      - TracePointsSpeedEstimated
      - TracePointsSpeedIgnored
    RoadSnapNoticeList:
      type: array
      items:
        $ref: '#/components/schemas/RoadSnapNotice'
    RoadSnapSnappedGeometry:
      type: object
      properties:
        LineString:
          allOf:
          - $ref: '#/components/schemas/LineString'
          description: 'An ordered list of positions used to plot a route on a map.


            LineString and Polyline are mutually exclusive properties.'
        Polyline:
          allOf:
          - $ref: '#/components/schemas/Polyline'
          description: 'An ordered list of positions used to plot a route on a map
            in a lossy compression format.


            LineString and Polyline are mutually exclusive properties.'
      description: Interpolated geometry for the snapped route that is overlay-able
        onto a map.
    RoadSnapSnappedTracePoint:
      type: object
      properties:
        Confidence:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: Confidence value for the correctness of this point match.
        OriginalPosition:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position of the TracePoint provided within the request, at
            the same index.
        SnappedPosition:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Snapped position of the TracePoint provided within the request,
            at the same index.
      required:
      - Confidence
      - OriginalPosition
      - SnappedPosition
      description: TracePoints snapped onto the road network.
    RoadSnapSnappedTracePointList:
      type: array
      items:
        $ref: '#/components/schemas/RoadSnapSnappedTracePoint'
    RoadSnapTracePoint:
      type: object
      properties:
        Heading:
          allOf:
          - $ref: '#/components/schemas/Heading'
          description: GPS Heading at the position.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
        Speed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Speed at the specified trace point .


            **Unit** : `KilometersPerHour`'
        Timestamp:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: Timestamp of the event.
      required:
      - Position
      description: TracePoint indices for which the provided notice code corresponds
        to.
    RoadSnapTracePointIndexList:
      type: array
      items:
        type: integer
    RoadSnapTracePointList:
      type: array
      items:
        $ref: '#/components/schemas/RoadSnapTracePoint'
    RoadSnapTrailerOptions:
      type: object
      properties:
        TrailerCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'Number of trailers attached to the vehicle.


            Default Value: `0`'
      description: Trailer options corresponding to the vehicle.
    RoadSnapTravelMode:
      type: string
      enum:
      - Car
      - Pedestrian
      - Scooter
      - Truck
    RoadSnapTravelModeOptions:
      type: object
      properties:
        Truck:
          allOf:
          - $ref: '#/components/schemas/RoadSnapTruckOptions'
          description: Travel mode options when the provided travel mode is "Truck".
      description: Travel mode related options for the provided travel mode.
    RoadSnapTruckOptions:
      type: object
      properties:
        GrossWeight:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Gross weight of the vehicle including trailers, and goods
            at capacity.


            **Unit** : `Kilograms`'
        HazardousCargos:
          allOf:
          - $ref: '#/components/schemas/RoadSnapHazardousCargoTypeList'
          description: List of Hazardous cargos contained in the vehicle.
        Height:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Height of the vehicle.


            **Unit** : `centimeters`'
        Length:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Length of the vehicle.


            **Unit** : `centimeters`'
        Trailer:
          allOf:
          - $ref: '#/components/schemas/RoadSnapTrailerOptions'
          description: Trailer options corresponding to the vehicle.
        TunnelRestrictionCode:
          allOf:
          - $ref: '#/components/schemas/TunnelRestrictionCode'
          description: "The tunnel restriction code.\n\nTunnel categories in this\
            \ list indicate the restrictions which apply to certain tunnels in Great\
            \ Britain. They relate to the types of dangerous goods that can be transported\
            \ through them.\n\n  * _Tunnel Category B_\n\n    * _Risk Level_ : Limited\
            \ risk\n\n    * _Restrictions_ : Few restrictions\n\n  * _Tunnel Category\
            \ C_\n\n    * _Risk Level_ : Medium risk\n\n    * _Restrictions_ : Some\
            \ restrictions\n\n  * _Tunnel Category D_\n\n    * _Risk Level_ : High\
            \ risk\n\n    * _Restrictions_ : Many restrictions occur\n\n  * _Tunnel\
            \ Category E_\n\n    * _Risk Level_ : Very high risk\n\n    * _Restrictions_\
            \ : Restricted tunnel"
        Width:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: Width of the vehicle in centimenters.
      description: Travel mode options when the provided travel mode is "Truck".
    RoundaboutAngle:
      type: number
      format: double
      default: 0
      minimum: -360
      maximum: 360
    Route:
      type: object
      properties:
        Legs:
          allOf:
          - $ref: '#/components/schemas/RouteLegList'
          description: A leg is a section of a route from one waypoint to the next.
            A leg could be of type Vehicle, Pedestrian or Ferry. Legs of different
            types could occur together within a single route. For example, a car employing
            the use of a Ferry will contain Vehicle legs corresponding to journey
            on land, and Ferry legs corresponding to the journey via Ferry.
        MajorRoadLabels:
          allOf:
          - $ref: '#/components/schemas/RouteMajorRoadLabelList'
          description: Important labels including names and route numbers that differentiate
            the current route from the alternatives presented.
        Summary:
          allOf:
          - $ref: '#/components/schemas/RouteSummary'
          description: Summarized details of the leg.
      required:
      - Legs
      - MajorRoadLabels
      description: The route.
    RouteAllowOptions:
      type: object
      properties:
        Hot:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Allow Hot (High Occupancy Toll) lanes while calculating the
            route.


            Default value: `false`'
        Hov:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Allow Hov (High Occupancy vehicle) lanes while calculating
            the route.


            Default value: `false`'
      description: Features that are allowed while calculating a route.
    RouteAvoidanceArea:
      type: object
      properties:
        Except:
          allOf:
          - $ref: '#/components/schemas/RouteAvoidanceAreaGeometryList'
          description: Exceptions to the provided avoidance geometry, to be included
            while calculating the route.
        Geometry:
          $ref: '#/components/schemas/RouteAvoidanceAreaGeometry'
      required:
      - Geometry
      description: Areas to be avoided.
    RouteAvoidanceAreaGeometry:
      type: object
      properties:
        Corridor:
          allOf:
          - $ref: '#/components/schemas/Corridor'
          description: Geometry defined as a corridor - a LineString with a radius
            that defines the width of the corridor.
        BoundingBox:
          allOf:
          - $ref: '#/components/schemas/BoundingBox'
          description: Geometry defined as a bounding box. The first pair represents
            the X and Y coordinates (longitude and latitude,) of the southwest corner
            of the bounding box; the second pair represents the X and Y coordinates
            (longitude and latitude) of the northeast corner.
        Polygon:
          allOf:
          - $ref: '#/components/schemas/LinearRings'
          description: Geometry defined as a polygon with only one linear ring.
        PolylineCorridor:
          allOf:
          - $ref: '#/components/schemas/PolylineCorridor'
          description: Geometry defined as an encoded corridor - an encoded polyline
            with a radius that defines the width of the corridor.
        PolylinePolygon:
          allOf:
          - $ref: '#/components/schemas/PolylineRingList'
          description: A list of Isoline PolylinePolygon, for each isoline PolylinePolygon,
            it contains PolylinePolygon of the first linear ring (the outer ring)
            and from 2nd item to the last item (the inner rings). For more information
            on polyline encoding, see <https://github.com/heremaps/flexiblepolyline/blob/master/README.md>.
      description: Geometry of the area to be avoided.
    RouteAvoidanceAreaGeometryList:
      type: array
      items:
        $ref: '#/components/schemas/RouteAvoidanceAreaGeometry'
    RouteAvoidanceAreaList:
      type: array
      items:
        $ref: '#/components/schemas/RouteAvoidanceArea'
    RouteAvoidanceOptions:
      type: object
      properties:
        Areas:
          allOf:
          - $ref: '#/components/schemas/RouteAvoidanceAreaList'
          description: Areas to be avoided.
        CarShuttleTrains:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid car-shuttle-trains while calculating the route.
        ControlledAccessHighways:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid controlled access highways while calculating the route.
        DirtRoads:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid dirt roads while calculating the route.
        Ferries:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid ferries while calculating the route.
        SeasonalClosure:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid roads that have seasonal closure while calculating the
            route.
        TollRoads:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoids roads where the specified toll transponders are the
            only mode of payment.
        TollTransponders:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoids roads where the specified toll transponders are the
            only mode of payment.
        TruckRoadTypes:
          allOf:
          - $ref: '#/components/schemas/TruckRoadTypeList'
          description: 'Truck road type identifiers. `BK1` through `BK4` apply only
            to Sweden. `A2,A4,B2,B4,C,D,ET2,ET4` apply only to Mexico.


            There are currently no other supported values as of 26th April 2024.'
        Tunnels:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid tunnels while calculating the route.
        UTurns:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid U-turns for calculation on highways and motorways.
        ZoneCategories:
          allOf:
          - $ref: '#/components/schemas/RouteAvoidanceZoneCategoryList'
          description: Zone categories to be avoided.
      description: Specifies options for areas to avoid when calculating the route.
        This is a best-effort avoidance setting, meaning the router will try to honor
        the avoidance preferences but may still include restricted areas if no feasible
        alternative route exists. If avoidance options are not followed, the response
        will indicate that the avoidance criteria were violated.
    RouteAvoidanceZoneCategory:
      type: object
      properties:
        Category:
          allOf:
          - $ref: '#/components/schemas/RouteZoneCategory'
          description: Zone category to be avoided.
      required:
      - Category
      description: Zone categories to be avoided.
    RouteAvoidanceZoneCategoryList:
      type: array
      items:
        $ref: '#/components/schemas/RouteAvoidanceZoneCategory'
    RouteCarOptions:
      type: object
      properties:
        EngineType:
          allOf:
          - $ref: '#/components/schemas/RouteEngineType'
          description: Engine type of the vehicle.
        LicensePlate:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleLicensePlate'
          description: The vehicle License Plate.
        MaxSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Maximum speed specified.


            **Unit** : `KilometersPerHour`'
        Occupancy:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The number of occupants in the vehicle.


            Default Value: `1`'
      description: Travel mode options when the provided travel mode is `Car`.
    RouteContinueHighwayStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
        SteeringDirection:
          allOf:
          - $ref: '#/components/schemas/RouteSteeringDirection'
          description: Steering direction for the step.
        TurnAngle:
          allOf:
          - $ref: '#/components/schemas/TurnAngle'
          description: Angle of the turn.
        TurnIntensity:
          allOf:
          - $ref: '#/components/schemas/RouteTurnIntensity'
          description: Intensity of the turn.
      required:
      - Intersection
      description: Details related to the continue highway step.
    RouteContinueStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
      required:
      - Intersection
      description: Details related to the continue step.
    RouteDestinationOptions:
      type: object
      properties:
        AvoidActionsForDistance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Avoids actions for the provided distance. This is typically
            to consider for users in moving vehicles who may not have sufficient time
            to make an action at an origin or a destination.
        AvoidUTurns:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid U-turns for calculation on highways and motorways.
        Heading:
          allOf:
          - $ref: '#/components/schemas/Heading'
          description: GPS Heading at the position.
        Matching:
          allOf:
          - $ref: '#/components/schemas/RouteMatchingOptions'
          description: Options to configure matching the provided position to the
            road network.
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/RouteSideOfStreetOptions'
          description: Options to configure matching the provided position to a side
            of the street.
        StopDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the stop.


            **Unit** : `seconds`'
      description: Options related to the destination.
    RouteDirection:
      type: string
      enum:
      - East
      - North
      - South
      - West
    RouteDriverOptions:
      type: object
      properties:
        Schedule:
          allOf:
          - $ref: '#/components/schemas/RouteDriverScheduleIntervalList'
          description: Driver work-rest schedule. Stops are added to fulfil the provided
            rest schedule.
      description: Driver related options.
    RouteDriverScheduleInterval:
      type: object
      properties:
        DriveDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Maximum allowed driving time before stopping to rest.


            **Unit** : `seconds`'
        RestDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Resting time before the driver can continue driving.


            **Unit** : `seconds`'
      required:
      - DriveDuration
      - RestDuration
      description: Interval of the driver work-rest schedule. Stops are added to fulfil
        the provided rest schedule.
    RouteDriverScheduleIntervalList:
      type: array
      items:
        $ref: '#/components/schemas/RouteDriverScheduleInterval'
    RouteEmissionType:
      type: object
      properties:
        Co2EmissionClass:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The CO 2 emission classes.
        Type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Type of the emission.


            **Valid values** : `Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev`'
      required:
      - Type
      description: 'Type of the emission.


        **Valid values** : `Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev`'
    RouteEngineType:
      type: string
      enum:
      - Electric
      - InternalCombustion
      - PluginHybrid
    RouteEnterHighwayStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
        SteeringDirection:
          allOf:
          - $ref: '#/components/schemas/RouteSteeringDirection'
          description: Steering direction for the step.
        TurnAngle:
          allOf:
          - $ref: '#/components/schemas/TurnAngle'
          description: Angle of the turn.
        TurnIntensity:
          allOf:
          - $ref: '#/components/schemas/RouteTurnIntensity'
          description: Intensity of the turn.
      required:
      - Intersection
      description: Details related to the enter highway step.
    RouteExclusionOptions:
      type: object
      properties:
        Countries:
          allOf:
          - $ref: '#/components/schemas/CountryCodeList'
          description: List of countries to be avoided defined by two-letter or three-letter
            country codes.
      required:
      - Countries
      description: Specifies strict exclusion options for the route calculation. This
        setting mandates that the router will avoid any routes that include the specified
        options, rather than merely attempting to minimize them.
    RouteExitStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
        RelativeExit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Exit to be taken.
        SteeringDirection:
          allOf:
          - $ref: '#/components/schemas/RouteSteeringDirection'
          description: Steering direction for the step.
        TurnAngle:
          allOf:
          - $ref: '#/components/schemas/TurnAngle'
          description: Angle of the turn.
        TurnIntensity:
          allOf:
          - $ref: '#/components/schemas/RouteTurnIntensity'
          description: Intensity of the turn.
      required:
      - Intersection
      description: Details related to the exit step.
    RouteFerryAfterTravelStep:
      type: object
      properties:
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the step.


            **Unit** : `seconds`'
        Instruction:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Brief description of the step in the requested language.


            Only available when the TravelStepType is Default.'
        Type:
          allOf:
          - $ref: '#/components/schemas/RouteFerryAfterTravelStepType'
          description: Type of the step.
      required:
      - Duration
      - Type
      description: Steps of a leg that must be performed after the travel portion
        of the leg.
    RouteFerryAfterTravelStepList:
      type: array
      items:
        $ref: '#/components/schemas/RouteFerryAfterTravelStep'
    RouteFerryAfterTravelStepType:
      type: string
      enum:
      - Deboard
    RouteFerryArrival:
      type: object
      properties:
        Place:
          allOf:
          - $ref: '#/components/schemas/RouteFerryPlace'
          description: The place details.
        Time:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: The time.
      required:
      - Place
      description: Details corresponding to the arrival for the leg.
    RouteFerryBeforeTravelStep:
      type: object
      properties:
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the step.


            **Unit** : `seconds`'
        Instruction:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Brief description of the step in the requested language.


            Only available when the TravelStepType is Default.'
        Type:
          allOf:
          - $ref: '#/components/schemas/RouteFerryBeforeTravelStepType'
          description: Type of the step.
      required:
      - Duration
      - Type
      description: Steps of a leg that must be performed before the travel portion
        of the leg.
    RouteFerryBeforeTravelStepList:
      type: array
      items:
        $ref: '#/components/schemas/RouteFerryBeforeTravelStep'
    RouteFerryBeforeTravelStepType:
      type: string
      enum:
      - Board
    RouteFerryDeparture:
      type: object
      properties:
        Place:
          allOf:
          - $ref: '#/components/schemas/RouteFerryPlace'
          description: The place details.
        Time:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: The time.
      required:
      - Place
      description: Details corresponding to the departure for the leg.
    RouteFerryLegDetails:
      type: object
      properties:
        AfterTravelSteps:
          allOf:
          - $ref: '#/components/schemas/RouteFerryAfterTravelStepList'
          description: Steps of a leg that must be performed after the travel portion
            of the leg.
        Arrival:
          allOf:
          - $ref: '#/components/schemas/RouteFerryArrival'
          description: Details corresponding to the arrival for the leg.
        BeforeTravelSteps:
          allOf:
          - $ref: '#/components/schemas/RouteFerryBeforeTravelStepList'
          description: Steps of a leg that must be performed before the travel portion
            of the leg.
        Departure:
          allOf:
          - $ref: '#/components/schemas/RouteFerryDeparture'
          description: Details corresponding to the departure for the leg.
        Notices:
          allOf:
          - $ref: '#/components/schemas/RouteFerryNoticeList'
          description: Notices are additional information returned that indicate issues
            that occurred during route calculation.
        PassThroughWaypoints:
          allOf:
          - $ref: '#/components/schemas/RoutePassThroughWaypointList'
          description: Waypoints that were passed through during the leg. This includes
            the waypoints that were configured with the PassThrough option.
        RouteName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Route name of the ferry line.
        Spans:
          allOf:
          - $ref: '#/components/schemas/RouteFerrySpanList'
          description: Spans that were computed for the requested SpanAdditionalFeatures.
        Summary:
          allOf:
          - $ref: '#/components/schemas/RouteFerrySummary'
          description: Summarized details of the leg.
        TravelSteps:
          allOf:
          - $ref: '#/components/schemas/RouteFerryTravelStepList'
          description: Steps of a leg that must be performed before the travel portion
            of the leg.
      required:
      - AfterTravelSteps
      - Arrival
      - BeforeTravelSteps
      - Departure
      - Notices
      - PassThroughWaypoints
      - Spans
      - TravelSteps
      description: FerryLegDetails is populated when the Leg type is Ferry, and provides
        additional information that is specific
    RouteFerryNotice:
      type: object
      properties:
        Code:
          allOf:
          - $ref: '#/components/schemas/RouteFerryNoticeCode'
          description: Code corresponding to the issue.
        Impact:
          allOf:
          - $ref: '#/components/schemas/RouteNoticeImpact'
          description: Impact corresponding to the issue. While Low impact notices
            can be safely ignored, High impact notices must be evaluated further to
            determine the impact.
      required:
      - Code
      description: Notices are additional information returned that indicate issues
        that occurred during route calculation.
    RouteFerryNoticeCode:
      type: string
      enum:
      - AccuratePolylineUnavailable
      - NoSchedule
      - Other
      - ViolatedAvoidFerry
      - ViolatedAvoidRailFerry
      - SeasonalClosure
    RouteFerryNoticeList:
      type: array
      items:
        $ref: '#/components/schemas/RouteFerryNotice'
    RouteFerryOverviewSummary:
      type: object
      properties:
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance of the step.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the step.


            **Unit** : `seconds`'
      required:
      - Distance
      - Duration
      description: Summarized details of the leg.
    RouteFerryPlace:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the place.
        OriginalPosition:
          allOf:
          - $ref: '#/components/schemas/Position23'
          description: Position provided in the request.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position23'
          description: Position defined as `[longitude, latitude]`.
        WaypointIndex:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Index of the waypoint in the request.
      required:
      - Position
      description: Position provided in the request.
    RouteFerrySpan:
      type: object
      properties:
        Country:
          allOf:
          - $ref: '#/components/schemas/CountryCode3'
          description: 3 letter Country code corresponding to the Span.
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: 'Distance of the computed span. This feature doesn''t split
            a span, but is always computed on a span split by other properties.


            **Unit** : `meters`'
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the computed span. This feature doesn''t split
            a span, but is always computed on a span split by other properties.


            **Unit** : `seconds`'
        GeometryOffset:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Offset in the leg geometry corresponding to the start of this
            span.
        Names:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Provides an array of names of the ferry span in available languages.
        Region:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 2-3 letter Region code corresponding to the Span. This is either
            a province or a state.
      description: Span computed for the requested SpanAdditionalFeatures.
    RouteFerrySpanList:
      type: array
      items:
        $ref: '#/components/schemas/RouteFerrySpan'
    RouteFerrySummary:
      type: object
      properties:
        Overview:
          allOf:
          - $ref: '#/components/schemas/RouteFerryOverviewSummary'
          description: Summarized details for the leg including before travel, travel
            and after travel steps.
        TravelOnly:
          allOf:
          - $ref: '#/components/schemas/RouteFerryTravelOnlySummary'
          description: Summarized details for the leg including travel steps only.
            The Distance for the travel only portion of the journey is in meters
      description: Summarized details for the leg including travel steps only. The
        Distance for the travel only portion of the journey is the same as the Distance
        within the Overview summary.
    RouteFerryTravelOnlySummary:
      type: object
      properties:
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Total duration in free flowing traffic, which is the best
            case or shortest duration possible to cover the leg.


            **Unit** : `seconds`'
      required:
      - Duration
      description: Summarized details for the leg including travel steps only. The
        Distance for the travel only portion of the journey is the same as the Distance
        within the Overview summary.
    RouteFerryTravelStep:
      type: object
      properties:
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance of the step.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the step.


            **Unit** : `seconds`'
        GeometryOffset:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Offset in the leg geometry corresponding to the start of this
            step.
        Instruction:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Brief description of the step in the requested language.


            Only available when the TravelStepType is Default.'
        Type:
          allOf:
          - $ref: '#/components/schemas/RouteFerryTravelStepType'
          description: Type of the step.
      required:
      - Duration
      - Type
      description: Steps of a leg that must be performed during the travel portion
        of the leg.
    RouteFerryTravelStepList:
      type: array
      items:
        $ref: '#/components/schemas/RouteFerryTravelStep'
    RouteFerryTravelStepType:
      type: string
      enum:
      - Depart
      - Continue
      - Arrive
    RouteHazardousCargoType:
      type: string
      enum:
      - Combustible
      - Corrosive
      - Explosive
      - Flammable
      - Gas
      - HarmfulToWater
      - Organic
      - Other
      - Poison
      - PoisonousInhalation
      - Radioactive
    RouteHazardousCargoTypeList:
      type: array
      items:
        $ref: '#/components/schemas/RouteHazardousCargoType'
    RouteKeepStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
        SteeringDirection:
          allOf:
          - $ref: '#/components/schemas/RouteSteeringDirection'
          description: Steering direction for the step.
        TurnAngle:
          allOf:
          - $ref: '#/components/schemas/TurnAngle'
          description: Angle of the turn.
        TurnIntensity:
          allOf:
          - $ref: '#/components/schemas/RouteTurnIntensity'
          description: Intensity of the turn.
      required:
      - Intersection
      description: Details that are specific to a Keep step.
    RouteLeg:
      type: object
      properties:
        FerryLegDetails:
          allOf:
          - $ref: '#/components/schemas/RouteFerryLegDetails'
          description: FerryLegDetails is populated when the Leg type is Ferry, and
            provides additional information that is specific
        Geometry:
          allOf:
          - $ref: '#/components/schemas/RouteLegGeometry'
          description: Geometry of the area to be avoided.
        Language:
          allOf:
          - $ref: '#/components/schemas/LanguageTag'
          description: List of languages for instructions within steps in the response.
        PedestrianLegDetails:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianLegDetails'
          description: Details related to the pedestrian leg.
        TravelMode:
          allOf:
          - $ref: '#/components/schemas/RouteLegTravelMode'
          description: 'Specifies the mode of transport when calculating a route.
            Used in estimating the speed of travel and road compatibility.


            Default Value: `Car`'
        Type:
          allOf:
          - $ref: '#/components/schemas/RouteLegType'
          description: Type of the leg.
        VehicleLegDetails:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleLegDetails'
          description: Details related to the vehicle leg.
      required:
      - Geometry
      - TravelMode
      - Type
      description: A leg is a section of a route from one waypoint to the next. A
        leg could be of type Vehicle, Pedestrian or Ferry. Legs of different types
        could occur together within a single route. For example, a car employing the
        use of a Ferry will contain Vehicle legs corresponding to journey on land,
        and Ferry legs corresponding to the journey via Ferry.
    RouteLegAdditionalFeature:
      type: string
      enum:
      - Elevation
      - Incidents
      - PassThroughWaypoints
      - Summary
      - Tolls
      - TravelStepInstructions
      - TruckRoadTypes
      - TypicalDuration
      - Zones
    RouteLegAdditionalFeatureList:
      type: array
      items:
        $ref: '#/components/schemas/RouteLegAdditionalFeature'
    RouteLegGeometry:
      type: object
      properties:
        LineString:
          allOf:
          - $ref: '#/components/schemas/LineString'
          description: 'An ordered list of positions used to plot a route on a map.


            LineString and Polyline are mutually exclusive properties.'
        Polyline:
          allOf:
          - $ref: '#/components/schemas/Polyline'
          description: 'An ordered list of positions used to plot a route on a map
            in a lossy compression format.


            LineString and Polyline are mutually exclusive properties.'
      description: The returned Route leg geometry.
    RouteLegList:
      type: array
      items:
        $ref: '#/components/schemas/RouteLeg'
    RouteLegTravelMode:
      type: string
      enum:
      - Car
      - Ferry
      - Pedestrian
      - Scooter
      - Truck
      - CarShuttleTrain
    RouteLegType:
      type: string
      enum:
      - Ferry
      - Pedestrian
      - Vehicle
    RouteList:
      type: array
      items:
        $ref: '#/components/schemas/Route'
    RouteMajorRoadLabel:
      type: object
      properties:
        RoadName:
          allOf:
          - $ref: '#/components/schemas/LocalizedString'
          description: Name of the road (localized).
        RouteNumber:
          allOf:
          - $ref: '#/components/schemas/RouteNumber'
          description: Route number of the road.
      description: Important labels including names and route numbers that differentiate
        the current route from the alternatives presented.
    RouteMajorRoadLabelList:
      type: array
      items:
        $ref: '#/components/schemas/RouteMajorRoadLabel'
    RouteMatchingOptions:
      type: object
      properties:
        NameHint:
          allOf:
          - $ref: '#/components/schemas/SensitiveString'
          description: Attempts to match the provided position to a road similar to
            the provided name.
        OnRoadThreshold:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: 'If the distance to a highway/bridge/tunnel/sliproad is within
            threshold, the waypoint will be snapped to the highway/bridge/tunnel/sliproad.


            **Unit** : `meters`'
        Radius:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: 'Considers all roads within the provided radius to match the
            provided destination to. The roads that are considered are determined
            by the provided Strategy.


            **Unit** : `Meters`'
        Strategy:
          allOf:
          - $ref: '#/components/schemas/MatchingStrategy'
          description: Strategy that defines matching of the position onto the road
            network. MatchAny considers all roads possible, whereas MatchMostSignificantRoad
            matches to the most significant road.
      description: Options related to route matching.
    RouteMatrix:
      type: array
      items:
        $ref: '#/components/schemas/RouteMatrixRow'
    RouteMatrixAllowOptions:
      type: object
      properties:
        Hot:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Allow Hot (High Occupancy Toll) lanes while calculating the
            route.


            Default value: `false`'
        Hov:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Allow Hov (High Occupancy vehicle) lanes while calculating
            the route.


            Default value: `false`'
      description: Allow Options related to the route matrix.
    RouteMatrixAutoCircle:
      type: object
      properties:
        Margin:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: The margin provided for the calculation.
        MaxRadius:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: The maximum size of the radius provided for the calculation.
      description: Provides the circle that was used while calculating the route.
    RouteMatrixAvoidanceArea:
      type: object
      properties:
        Geometry:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixAvoidanceAreaGeometry'
          description: Geometry of the area to be avoided.
      required:
      - Geometry
      description: Area to be avoided.
    RouteMatrixAvoidanceAreaGeometry:
      type: object
      properties:
        BoundingBox:
          allOf:
          - $ref: '#/components/schemas/BoundingBox'
          description: Geometry defined as a bounding box. The first pair represents
            the X and Y coordinates (longitude and latitude,) of the southwest corner
            of the bounding box; the second pair represents the X and Y coordinates
            (longitude and latitude) of the northeast corner.
        Polygon:
          allOf:
          - $ref: '#/components/schemas/LinearRings'
          description: Geometry defined as a polygon with only one linear ring.
        PolylinePolygon:
          allOf:
          - $ref: '#/components/schemas/PolylineRingList'
          description: A list of Isoline PolylinePolygon, for each isoline PolylinePolygon,
            it contains PolylinePolygon of the first linear ring (the outer ring)
            and from second item to the last item (the inner rings). For more information
            on polyline encoding, see <https://github.com/heremaps/flexiblepolyline/blob/master/README.md>.
      description: Geometry of the area to be avoided.
    RouteMatrixAvoidanceAreaList:
      type: array
      items:
        $ref: '#/components/schemas/RouteMatrixAvoidanceArea'
    RouteMatrixAvoidanceOptions:
      type: object
      properties:
        Areas:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixAvoidanceAreaList'
          description: Areas to be avoided.
        CarShuttleTrains:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid car-shuttle-trains while calculating the route.
        ControlledAccessHighways:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid controlled access highways while calculating the route.
        DirtRoads:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid dirt roads while calculating the route.
        Ferries:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid ferries while calculating the route.
        TollRoads:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoids roads where the specified toll transponders are the
            only mode of payment.
        TollTransponders:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoids roads where the specified toll transponders are the
            only mode of payment.
        TruckRoadTypes:
          allOf:
          - $ref: '#/components/schemas/TruckRoadTypeList'
          description: 'Truck road type identifiers. `BK1` through `BK4` apply only
            to Sweden. `A2,A4,B2,B4,C,D,ET2,ET4` apply only to Mexico.


            There are currently no other supported values as of 26th April 2024.'
        Tunnels:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid tunnels while calculating the route.
        UTurns:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid U-turns for calculation on highways and motorways.
        ZoneCategories:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixAvoidanceZoneCategoryList'
          description: Zone categories to be avoided.
      description: Specifies options for areas to avoid when calculating the route.
        This is a best-effort avoidance setting, meaning the router will try to honor
        the avoidance preferences but may still include restricted areas if no feasible
        alternative route exists. If avoidance options are not followed, the response
        will indicate that the avoidance criteria were violated.
    RouteMatrixAvoidanceZoneCategory:
      type: object
      properties:
        Category:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixZoneCategory'
          description: Zone category to be avoided.
      description: Zone categories to be avoided.
    RouteMatrixAvoidanceZoneCategoryList:
      type: array
      items:
        $ref: '#/components/schemas/RouteMatrixAvoidanceZoneCategory'
    RouteMatrixBoundary:
      type: object
      properties:
        Geometry:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixBoundaryGeometry'
          description: Geometry of the area to be avoided.
        Unbounded:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: No restrictions in terms of a routing boundary, and is typically
            used for longer routes.
      description: Boundary within which the matrix is to be calculated. All data,
        origins and destinations outside the boundary are considered invalid.
    RouteMatrixBoundaryGeometry:
      type: object
      properties:
        AutoCircle:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixAutoCircle'
          description: Provides the circle that was used while calculating the route.
        Circle:
          allOf:
          - $ref: '#/components/schemas/Circle'
          description: Geometry defined as a circle. When request routing boundary
            was set as `AutoCircle`, the response routing boundary will return `Circle`
            derived from the `AutoCircle` settings.
        BoundingBox:
          allOf:
          - $ref: '#/components/schemas/BoundingBox'
          description: Geometry defined as a bounding box. The first pair represents
            the X and Y coordinates (longitude and latitude,) of the southwest corner
            of the bounding box; the second pair represents the X and Y coordinates
            (longitude and latitude) of the northeast corner.
        Polygon:
          allOf:
          - $ref: '#/components/schemas/LinearRings'
          description: Geometry defined as a polygon with only one linear ring.
      description: Geometry of the routing boundary.
    RouteMatrixCarOptions:
      type: object
      properties:
        LicensePlate:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixVehicleLicensePlate'
          description: The vehicle License Plate.
        MaxSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Maximum speed


            **Unit** : `KilometersPerHour`'
        Occupancy:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The number of occupants in the vehicle.


            Default Value: `1`'
      description: Travel mode options when the provided travel mode is `Car`.
    RouteMatrixDestination:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixDestinationOptions'
          description: Destination related options.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
      required:
      - Position
      description: The route destination.
    RouteMatrixDestinationList:
      type: array
      items:
        $ref: '#/components/schemas/RouteMatrixDestination'
    RouteMatrixDestinationOptions:
      type: object
      properties:
        AvoidActionsForDistance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Avoids actions for the provided distance. This is typically
            to consider for users in moving vehicles who may not have sufficient time
            to make an action at an origin or a destination.
        Heading:
          allOf:
          - $ref: '#/components/schemas/Heading'
          description: GPS Heading at the position.
        Matching:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixMatchingOptions'
          description: Options to configure matching the provided position to the
            road network.
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixSideOfStreetOptions'
          description: Options to configure matching the provided position to a side
            of the street.
      description: Options related to the destination.
    RouteMatrixEntry:
      type: object
      properties:
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: The total distance of travel for the route.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'The expected duration of travel for the route.


            **Unit** : `seconds`'
        Error:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixErrorCode'
          description: Error code that occurred during calculation of the route.
      required:
      - Distance
      - Duration
      description: The calculated route matrix containing the results for all pairs
        of Origins to Destination positions. Each row corresponds to one entry in
        Origins. Each entry in the row corresponds to the route from that entry in
        Origins to an entry in Destination positions.
    RouteMatrixErrorCode:
      type: string
      enum:
      - NoMatch
      - NoMatchDestination
      - NoMatchOrigin
      - NoRoute
      - OutOfBounds
      - OutOfBoundsDestination
      - OutOfBoundsOrigin
      - Other
      - Violation
    RouteMatrixExclusionOptions:
      type: object
      properties:
        Countries:
          allOf:
          - $ref: '#/components/schemas/CountryCodeList'
          description: List of countries to be avoided defined by two-letter or three-letter
            country codes.
      required:
      - Countries
      description: Specifies strict exclusion options for the route calculation. This
        setting mandates that the router will avoid any routes that include the specified
        options, rather than merely attempting to minimize them.
    RouteMatrixHazardousCargoType:
      type: string
      enum:
      - Combustible
      - Corrosive
      - Explosive
      - Flammable
      - Gas
      - HarmfulToWater
      - Organic
      - Other
      - Poison
      - PoisonousInhalation
      - Radioactive
    RouteMatrixHazardousCargoTypeList:
      type: array
      items:
        $ref: '#/components/schemas/RouteMatrixHazardousCargoType'
    RouteMatrixMatchingOptions:
      type: object
      properties:
        NameHint:
          allOf:
          - $ref: '#/components/schemas/SensitiveString'
          description: Attempts to match the provided position to a road similar to
            the provided name.
        OnRoadThreshold:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: 'If the distance to a highway/bridge/tunnel/sliproad is within
            threshold, the waypoint will be snapped to the highway/bridge/tunnel/sliproad.


            **Unit** : `meters`'
        Radius:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: 'Considers all roads within the provided radius to match the
            provided destination to. The roads that are considered are determined
            by the provided Strategy.


            **Unit** : `Meters`'
        Strategy:
          allOf:
          - $ref: '#/components/schemas/MatchingStrategy'
          description: Strategy that defines matching of the position onto the road
            network. MatchAny considers all roads possible, whereas MatchMostSignificantRoad
            matches to the most significant road.
      description: Matching options.
    RouteMatrixOrigin:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixOriginOptions'
          description: Origin related options.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
      required:
      - Position
      description: The start position for the route.
    RouteMatrixOriginList:
      type: array
      items:
        $ref: '#/components/schemas/RouteMatrixOrigin'
    RouteMatrixOriginOptions:
      type: object
      properties:
        AvoidActionsForDistance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Avoids actions for the provided distance. This is typically
            to consider for users in moving vehicles who may not have sufficient time
            to make an action at an origin or a destination.
        Heading:
          allOf:
          - $ref: '#/components/schemas/Heading'
          description: GPS Heading at the position.
        Matching:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixMatchingOptions'
          description: Options to configure matching the provided position to the
            road network.
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixSideOfStreetOptions'
          description: Options to configure matching the provided position to a side
            of the street.
      description: Origin related options.
    RouteMatrixRow:
      type: array
      items:
        $ref: '#/components/schemas/RouteMatrixEntry'
    RouteMatrixScooterOptions:
      type: object
      properties:
        LicensePlate:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixVehicleLicensePlate'
          description: The vehicle License Plate.
        MaxSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Maximum speed.


            **Unit** : `KilometersPerHour`'
        Occupancy:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The number of occupants in the vehicle.


            Default Value: `1`'
      description: Travel mode options when the provided travel mode is `Scooter`
    RouteMatrixSideOfStreetOptions:
      type: object
      properties:
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
        UseWith:
          allOf:
          - $ref: '#/components/schemas/SideOfStreetMatchingStrategy'
          description: 'Strategy that defines when the side of street position should
            be used. AnyStreet will always use the provided position.


            Default Value: `DividedStreetOnly`'
      required:
      - Position
      description: Options to configure matching the provided position to a side of
        the street.
    RouteMatrixTrafficOptions:
      type: object
      properties:
        FlowEventThresholdOverride:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: Duration for which flow traffic is considered valid. For this
            period, the flow traffic is used over historical traffic data. Flow traffic
            refers to congestion, which changes very quickly. Duration in seconds
            for which flow traffic event would be considered valid. While flow traffic
            event is valid it will be used over the historical traffic data.
        Usage:
          allOf:
          - $ref: '#/components/schemas/TrafficUsage'
          description: 'Determines if traffic should be used or ignored while calculating
            the route.


            Default Value: `UseTrafficData`'
      description: Traffic related options.
    RouteMatrixTrailerOptions:
      type: object
      properties:
        TrailerCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'Number of trailers attached to the vehicle.


            Default Value: `0`'
      description: Trailer options corresponding to the vehicle.
    RouteMatrixTravelMode:
      type: string
      enum:
      - Car
      - Pedestrian
      - Scooter
      - Truck
    RouteMatrixTravelModeOptions:
      type: object
      properties:
        Car:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixCarOptions'
          description: Travel mode options when the provided travel mode is "Car"
        Scooter:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixScooterOptions'
          description: 'Travel mode options when the provided travel mode is `Scooter`


            When travel mode is set to `Scooter`, then the avoidance option `ControlledAccessHighways`
            defaults to `true`.'
        Truck:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixTruckOptions'
          description: Travel mode options when the provided travel mode is "Truck"
      description: Travel mode related options for the provided travel mode.
    RouteMatrixTruckOptions:
      type: object
      properties:
        AxleCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Total number of axles of the vehicle.
        GrossWeight:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Gross weight of the vehicle including trailers, and goods
            at capacity.


            **Unit** : `Kilograms`'
        HazardousCargos:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixHazardousCargoTypeList'
          description: List of Hazardous cargo contained in the vehicle.
        Height:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Height of the vehicle.


            **Unit** : `centimeters`'
        KpraLength:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Kingpin to rear axle length of the vehicle


            **Unit** : `centimeters`'
        Length:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Length of the vehicle.


            **Unit** : `centimeters`'
        LicensePlate:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixVehicleLicensePlate'
          description: The vehicle License Plate.
        MaxSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Maximum speed


            **Unit** : `KilometersPerHour`'
        Occupancy:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The number of occupants in the vehicle.


            Default Value: `1`'
        PayloadCapacity:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Payload capacity of the vehicle and trailers attached.


            **Unit** : `kilograms`'
        Trailer:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixTrailerOptions'
          description: Trailer options corresponding to the vehicle.
        TruckType:
          allOf:
          - $ref: '#/components/schemas/RouteMatrixTruckType'
          description: Type of the truck.
        TunnelRestrictionCode:
          allOf:
          - $ref: '#/components/schemas/TunnelRestrictionCode'
          description: "The tunnel restriction code.\n\nTunnel categories in this\
            \ list indicate the restrictions which apply to certain tunnels in Great\
            \ Britain. They relate to the types of dangerous goods that can be transported\
            \ through them.\n\n  * _Tunnel Category B_\n\n    * _Risk Level_ : Limited\
            \ risk\n\n    * _Restrictions_ : Few restrictions\n\n  * _Tunnel Category\
            \ C_\n\n    * _Risk Level_ : Medium risk\n\n    * _Restrictions_ : Some\
            \ restrictions\n\n  * _Tunnel Category D_\n\n    * _Risk Level_ : High\
            \ risk\n\n    * _Restrictions_ : Many restrictions occur\n\n  * _Tunnel\
            \ Category E_\n\n    * _Risk Level_ : Very high risk\n\n    * _Restrictions_\
            \ : Restricted tunnel"
        WeightPerAxle:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Heaviest weight per axle irrespective of the axle type or
            the axle group. Meant for usage in countries where the differences in
            axle types or axle groups are not distinguished.


            **Unit** : `Kilograms`'
        WeightPerAxleGroup:
          allOf:
          - $ref: '#/components/schemas/WeightPerAxleGroup'
          description: Specifies the total weight for the specified axle group. Meant
            for usage in countries that have different regulations based on the axle
            group type.
        Width:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Width of the vehicle.


            **Unit** : `centimeters`'
      description: Travel mode options when the provided travel mode is "Truck"
    RouteMatrixTruckType:
      type: string
      enum:
      - LightTruck
      - StraightTruck
      - Tractor
    RouteMatrixVehicleLicensePlate:
      type: object
      properties:
        LastCharacter:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The last character of the License Plate.
      description: The vehicle License Plate.
    RouteMatrixZoneCategory:
      type: string
      enum:
      - CongestionPricing
      - Environmental
      - Vignette
    RouteNoticeDetailRange:
      type: object
      properties:
        Min:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Minimum value for the range.
        Max:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Maximum value for the range.
      description: Notice Detail that is a range.
    RouteNoticeImpact:
      type: string
      enum:
      - High
      - Low
    RouteNumber:
      type: object
      properties:
        Direction:
          allOf:
          - $ref: '#/components/schemas/RouteDirection'
          description: Directional identifier of the route.
        Language:
          allOf:
          - $ref: '#/components/schemas/LanguageTag'
          description: List of languages for instructions corresponding to the route
            number.
        Value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The route number.
      required:
      - Value
      description: The route number.
    RouteNumberList:
      type: array
      items:
        $ref: '#/components/schemas/RouteNumber'
    RouteOriginOptions:
      type: object
      properties:
        AvoidActionsForDistance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Avoids actions for the provided distance. This is typically
            to consider for users in moving vehicles who may not have sufficient time
            to make an action at an origin or a destination.
        AvoidUTurns:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid U-turns for calculation on highways and motorways.
        Heading:
          allOf:
          - $ref: '#/components/schemas/Heading'
          description: GPS Heading at the position.
        Matching:
          allOf:
          - $ref: '#/components/schemas/RouteMatchingOptions'
          description: Options to configure matching the provided position to the
            road network.
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/RouteSideOfStreetOptions'
          description: Options to configure matching the provided position to a side
            of the street.
      description: Origin related options.
    RoutePassThroughPlace:
      type: object
      properties:
        OriginalPosition:
          allOf:
          - $ref: '#/components/schemas/Position23'
          description: Position provided in the request.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position23'
          description: Position defined as `[longitude, latitude]`.
        WaypointIndex:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Index of the waypoint in the request.
      required:
      - Position
      description: The place where the waypoint is passed through and not treated
        as a stop.
    RoutePassThroughWaypoint:
      type: object
      properties:
        GeometryOffset:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Offset in the leg geometry corresponding to the start of this
            step.
        Place:
          allOf:
          - $ref: '#/components/schemas/RoutePassThroughPlace'
          description: The place details.
      required:
      - Place
      description: If the waypoint should be treated as a stop. If yes, the route
        is split up into different legs around the stop.
    RoutePassThroughWaypointList:
      type: array
      items:
        $ref: '#/components/schemas/RoutePassThroughWaypoint'
    RoutePedestrianArrival:
      type: object
      properties:
        Place:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianPlace'
          description: The place details.
        Time:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: The time.
      required:
      - Place
      description: 'Details corresponding to the arrival for a leg.


        Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


        Examples:


        `2020-04-22T17:57:24Z`


        `2020-04-22T17:57:24+02:00`'
    RoutePedestrianDeparture:
      type: object
      properties:
        Place:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianPlace'
          description: The place details.
        Time:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: The time.
      required:
      - Place
      description: 'Details corresponding to the departure for a leg.


        Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


        Examples:


        `2020-04-22T17:57:24Z`


        `2020-04-22T17:57:24+02:00`'
    RoutePedestrianLegDetails:
      type: object
      properties:
        Arrival:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianArrival'
          description: Details corresponding to the arrival for the leg.
        Departure:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianDeparture'
          description: Details corresponding to the departure for the leg.
        Notices:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianNoticeList'
          description: Notices are additional information returned that indicate issues
            that occurred during route calculation.
        PassThroughWaypoints:
          allOf:
          - $ref: '#/components/schemas/RoutePassThroughWaypointList'
          description: Waypoints that were passed through during the leg. This includes
            the waypoints that were configured with the PassThrough option.
        Spans:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianSpanList'
          description: Spans that were computed for the requested SpanAdditionalFeatures.
        Summary:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianSummary'
          description: Summarized details of the leg.
        TravelSteps:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianTravelStepList'
          description: Steps of a leg that must be performed before the travel portion
            of the leg.
      required:
      - Arrival
      - Departure
      - Notices
      - PassThroughWaypoints
      - Spans
      - TravelSteps
      description: Details that are specific to a pedestrian leg.
    RoutePedestrianNotice:
      type: object
      properties:
        Code:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianNoticeCode'
          description: Code corresponding to the issue.
        Impact:
          allOf:
          - $ref: '#/components/schemas/RouteNoticeImpact'
          description: Impact corresponding to the issue. While Low impact notices
            can be safely ignored, High impact notices must be evaluated further to
            determine the impact.
      required:
      - Code
      description: Notices are additional information returned that indicate issues
        that occurred during route calculation.
    RoutePedestrianNoticeCode:
      type: string
      enum:
      - AccuratePolylineUnavailable
      - Other
      - ViolatedAvoidDirtRoad
      - ViolatedAvoidTunnel
      - ViolatedPedestrianOption
    RoutePedestrianNoticeList:
      type: array
      items:
        $ref: '#/components/schemas/RoutePedestrianNotice'
    RoutePedestrianOptions:
      type: object
      properties:
        Speed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: Walking speed in Kilometers per hour.
      description: Options related to the pedestrian.
    RoutePedestrianOverviewSummary:
      type: object
      properties:
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance of the step.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: Duration of the step.
      required:
      - Distance
      - Duration
      description: Provides a summary of a pedestrian route step.
    RoutePedestrianPlace:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the place.
        OriginalPosition:
          allOf:
          - $ref: '#/components/schemas/Position23'
          description: Position provided in the request.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position23'
          description: Position defined as `[longitude, latitude]`.
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/RouteSideOfStreet'
          description: Options to configure matching the provided position to a side
            of the street.
        WaypointIndex:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Index of the waypoint in the request.
      required:
      - Position
      description: Place details corresponding to the arrival or departure.
    RoutePedestrianSpan:
      type: object
      properties:
        BestCaseDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the computed span without traffic congestion.


            **Unit** : `seconds`'
        Country:
          allOf:
          - $ref: '#/components/schemas/CountryCode3'
          description: 3 letter Country code corresponding to the Span.
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance of the computed span. This feature doesn't split a
            span, but is always computed on a span split by other properties.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the computed span. This feature doesn''t split
            a span, but is always computed on a span split by other properties.


            **Unit** : `seconds`'
        DynamicSpeed:
          allOf:
          - $ref: '#/components/schemas/RouteSpanDynamicSpeedDetails'
          description: 'Dynamic speed details corresponding to the span.


            **Unit** : `KilometersPerHour`'
        FunctionalClassification:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Functional classification of the road segment corresponding
            to the span.
        GeometryOffset:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Offset in the leg geometry corresponding to the start of this
            span.
        Incidents:
          allOf:
          - $ref: '#/components/schemas/IndexList'
          description: Incidents corresponding to the span. These index into the Incidents
            in the parent Leg.
        Names:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Provides an array of names of the pedestrian span in available
            languages.
        PedestrianAccess:
          allOf:
          - $ref: '#/components/schemas/RouteSpanPedestrianAccessAttributeList'
          description: Access attributes for a pedestrian corresponding to the span.
        Region:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 2-3 letter Region code corresponding to the Span. This is either
            a province or a state.
        RoadAttributes:
          allOf:
          - $ref: '#/components/schemas/RouteSpanRoadAttributeList'
          description: Attributes for the road segment corresponding to the span.
        RouteNumbers:
          allOf:
          - $ref: '#/components/schemas/RouteNumberList'
          description: Designated route name or number corresponding to the span.
        SpeedLimit:
          allOf:
          - $ref: '#/components/schemas/RouteSpanSpeedLimitDetails'
          description: 'Speed limit details corresponding to the span.


            **Unit** : `KilometersPerHour`'
        TypicalDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the computed span under typical traffic congestion.


            **Unit** : `seconds`'
      description: Span computed for the requested SpanAdditionalFeatures.
    RoutePedestrianSpanList:
      type: array
      items:
        $ref: '#/components/schemas/RoutePedestrianSpan'
    RoutePedestrianSummary:
      type: object
      properties:
        Overview:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianOverviewSummary'
          description: Summarized details for the leg including before travel, travel
            and after travel steps.
        TravelOnly:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianTravelOnlySummary'
          description: Summarized details for the leg including travel steps only.
            The Distance for the travel only portion of the journey is in meters
      description: Summarized details for the leg including before travel, travel
        and after travel steps.
    RoutePedestrianTravelOnlySummary:
      type: object
      properties:
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the step.


            **Unit** : `seconds`'
      required:
      - Duration
      description: Summarized details for the leg including travel steps.
    RoutePedestrianTravelStep:
      type: object
      properties:
        ContinueStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteContinueStepDetails'
          description: Details related to the continue step.
        CurrentRoad:
          allOf:
          - $ref: '#/components/schemas/RouteRoad'
          description: Details of the current road. See RouteRoad for details of sub-attributes.
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance of the step.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the step.


            **Unit** : `seconds`'
        ExitNumber:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Exit number of the road exit, if applicable.
        GeometryOffset:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Offset in the leg geometry corresponding to the start of this
            step.
        Instruction:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Brief description of the step in the requested language.


            Only available when the TravelStepType is Default.'
        KeepStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteKeepStepDetails'
          description: Details that are specific to a Keep step.
        NextRoad:
          allOf:
          - $ref: '#/components/schemas/RouteRoad'
          description: Details of the next road. See RouteRoad for details of sub-attributes.
        RoundaboutEnterStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteRoundaboutEnterStepDetails'
          description: Details that are specific to a Roundabout Enter step.
        RoundaboutExitStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteRoundaboutExitStepDetails'
          description: Details that are specific to a Roundabout Exit step.
        RoundaboutPassStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteRoundaboutPassStepDetails'
          description: Details that are specific to a Roundabout Pass step.
        Signpost:
          allOf:
          - $ref: '#/components/schemas/RouteSignpost'
          description: Sign post information of the action, applicable only for TurnByTurn
            steps. See RouteSignpost for details of sub-attributes.
        TurnStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteTurnStepDetails'
          description: Details that are specific to a turn step.
        Type:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianTravelStepType'
          description: Type of the step.
      required:
      - Duration
      - Type
      description: Steps of a leg that must be performed during the travel portion
        of the leg.
    RoutePedestrianTravelStepList:
      type: array
      items:
        $ref: '#/components/schemas/RoutePedestrianTravelStep'
    RoutePedestrianTravelStepType:
      type: string
      enum:
      - Arrive
      - Continue
      - Depart
      - Keep
      - RoundaboutEnter
      - RoundaboutExit
      - RoundaboutPass
      - Turn
      - Exit
      - Ramp
      - UTurn
    RouteRampStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
        SteeringDirection:
          allOf:
          - $ref: '#/components/schemas/RouteSteeringDirection'
          description: Steering direction for the step.
        TurnAngle:
          allOf:
          - $ref: '#/components/schemas/TurnAngle'
          description: Angle of the turn.
        TurnIntensity:
          allOf:
          - $ref: '#/components/schemas/RouteTurnIntensity'
          description: Intensity of the turn.
      required:
      - Intersection
      description: Details that are specific to a ramp step.
    RouteResponseNotice:
      type: object
      properties:
        Code:
          allOf:
          - $ref: '#/components/schemas/RouteResponseNoticeCode'
          description: Code corresponding to the issue.
        Impact:
          allOf:
          - $ref: '#/components/schemas/RouteNoticeImpact'
          description: Impact corresponding to the issue. While Low impact notices
            can be safely ignored, High impact notices must be evaluated further to
            determine the impact.
      required:
      - Code
      description: Notices are additional information returned that indicate issues
        that occurred during route calculation.
    RouteResponseNoticeCode:
      type: string
      enum:
      - MainLanguageNotFound
      - Other
      - TravelTimeExceedsDriverWorkHours
    RouteResponseNoticeList:
      type: array
      items:
        $ref: '#/components/schemas/RouteResponseNotice'
    RouteRoad:
      type: object
      properties:
        RoadName:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the road (localized).
        RouteNumber:
          allOf:
          - $ref: '#/components/schemas/RouteNumberList'
          description: Route number of the road.
        Towards:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Names of destinations that can be reached when traveling on
            the road.
        Type:
          allOf:
          - $ref: '#/components/schemas/RouteRoadType'
          description: The type of road.
      required:
      - RoadName
      - RouteNumber
      - Towards
      description: The road on the route.
    RouteRoadType:
      type: string
      enum:
      - Highway
      - Rural
      - Urban
    RouteRoundaboutEnterStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
        SteeringDirection:
          allOf:
          - $ref: '#/components/schemas/RouteSteeringDirection'
          description: Steering direction for the step.
        TurnAngle:
          allOf:
          - $ref: '#/components/schemas/TurnAngle'
          description: Angle of the turn.
        TurnIntensity:
          allOf:
          - $ref: '#/components/schemas/RouteTurnIntensity'
          description: Intensity of the turn.
      required:
      - Intersection
      description: Details about the roundabout leg.
    RouteRoundaboutExitStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
        RelativeExit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Exit to be taken.
        RoundaboutAngle:
          allOf:
          - $ref: '#/components/schemas/RoundaboutAngle'
          description: Angle of the roundabout.
        SteeringDirection:
          allOf:
          - $ref: '#/components/schemas/RouteSteeringDirection'
          description: Steering direction for the step.
      required:
      - Intersection
      description: Details about the roundabout step.
    RouteRoundaboutPassStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
        SteeringDirection:
          allOf:
          - $ref: '#/components/schemas/RouteSteeringDirection'
          description: Steering direction for the step.
        TurnAngle:
          allOf:
          - $ref: '#/components/schemas/TurnAngle'
          description: Angle of the turn.
        TurnIntensity:
          allOf:
          - $ref: '#/components/schemas/RouteTurnIntensity'
          description: Intensity of the turn.
      required:
      - Intersection
      description: Details about the step.
    RouteScooterOptions:
      type: object
      properties:
        EngineType:
          allOf:
          - $ref: '#/components/schemas/RouteEngineType'
          description: Engine type of the vehicle.
        LicensePlate:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleLicensePlate'
          description: The vehicle License Plate.
        MaxSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Maximum speed


            **Unit** : `KilometersPerHour`'
        Occupancy:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The number of occupants in the vehicle.


            Default Value: `1`'
      description: Travel mode options when the provided travel mode is `Scooter`
    RouteSideOfStreet:
      type: string
      enum:
      - Left
      - Right
    RouteSideOfStreetOptions:
      type: object
      properties:
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
        UseWith:
          allOf:
          - $ref: '#/components/schemas/SideOfStreetMatchingStrategy'
          description: 'Strategy that defines when the side of street position should
            be used.


            Default Value: `DividedStreetOnly`'
      required:
      - Position
      description: Options to configure matching the provided position to a side of
        the street.
    RouteSignpost:
      type: object
      properties:
        Labels:
          allOf:
          - $ref: '#/components/schemas/RouteSignpostLabelList'
          description: Labels present on the sign post.
      required:
      - Labels
      description: Sign post information of the action, applicable only for TurnByTurn
        steps. See RouteSignpost for details of sub-attributes.
    RouteSignpostLabel:
      type: object
      properties:
        RouteNumber:
          allOf:
          - $ref: '#/components/schemas/RouteNumber'
          description: Route number of the road.
        Text:
          allOf:
          - $ref: '#/components/schemas/LocalizedString'
          description: The Signpost text.
      description: Labels presented on the sign post.
    RouteSignpostLabelList:
      type: array
      items:
        $ref: '#/components/schemas/RouteSignpostLabel'
    RouteSpanAdditionalFeature:
      type: string
      enum:
      - BestCaseDuration
      - CarAccess
      - Country
      - Distance
      - Duration
      - DynamicSpeed
      - FunctionalClassification
      - Gates
      - Incidents
      - Names
      - Notices
      - PedestrianAccess
      - RailwayCrossings
      - Region
      - RoadAttributes
      - RouteNumbers
      - ScooterAccess
      - SpeedLimit
      - TollSystems
      - TruckAccess
      - TruckRoadTypes
      - TypicalDuration
      - Zones
      - Consumption
    RouteSpanAdditionalFeatureList:
      type: array
      items:
        $ref: '#/components/schemas/RouteSpanAdditionalFeature'
    RouteSpanCarAccessAttribute:
      type: string
      enum:
      - Allowed
      - NoThroughTraffic
      - TollRoad
    RouteSpanCarAccessAttributeList:
      type: array
      items:
        $ref: '#/components/schemas/RouteSpanCarAccessAttribute'
    RouteSpanDynamicSpeedDetails:
      type: object
      properties:
        BestCaseSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Estimated speed while traversing the span without traffic
            congestion.


            **Unit** : `KilometersPerHour`'
        TurnDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Estimated time to turn from this span into the next.


            **Unit** : `seconds`'
        TypicalSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Estimated speed while traversing the span under typical traffic
            congestion.


            **Unit** : `KilometersPerHour`'
      description: 'Details about the dynamic speed.


        **Unit** : `KilometersPerHour`'
    RouteSpanGateAttribute:
      type: string
      enum:
      - Emergency
      - KeyAccess
      - PermissionRequired
    RouteSpanPedestrianAccessAttribute:
      type: string
      enum:
      - Allowed
      - Indoors
      - NoThroughTraffic
      - Park
      - Stairs
      - TollRoad
    RouteSpanPedestrianAccessAttributeList:
      type: array
      items:
        $ref: '#/components/schemas/RouteSpanPedestrianAccessAttribute'
    RouteSpanRailwayCrossingAttribute:
      type: string
      enum:
      - Protected
      - Unprotected
    RouteSpanRoadAttribute:
      type: string
      enum:
      - Bridge
      - BuiltUpArea
      - ControlledAccessHighway
      - DirtRoad
      - DividedRoad
      - Motorway
      - PrivateRoad
      - Ramp
      - RightHandTraffic
      - Roundabout
      - Tunnel
      - UnderConstruction
    RouteSpanRoadAttributeList:
      type: array
      items:
        $ref: '#/components/schemas/RouteSpanRoadAttribute'
    RouteSpanScooterAccessAttribute:
      type: string
      enum:
      - Allowed
      - NoThroughTraffic
      - TollRoad
    RouteSpanScooterAccessAttributeList:
      type: array
      items:
        $ref: '#/components/schemas/RouteSpanScooterAccessAttribute'
    RouteSpanSpeedLimitDetails:
      type: object
      properties:
        MaxSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Maximum speed.


            **Unit** : `KilometersPerHour`'
        Unlimited:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If the span doesn't have a speed limit like the Autobahn.
      description: 'Details about the speed limit corresponding to the span.


        **Unit** : `KilometersPerHour`'
    RouteSpanTruckAccessAttribute:
      type: string
      enum:
      - Allowed
      - NoThroughTraffic
      - TollRoad
    RouteSpanTruckAccessAttributeList:
      type: array
      items:
        $ref: '#/components/schemas/RouteSpanTruckAccessAttribute'
    RouteSteeringDirection:
      type: string
      enum:
      - Left
      - Right
      - Straight
    RouteSummary:
      type: object
      properties:
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance of the route.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the route.


            **Unit** : `seconds`'
        Tolls:
          allOf:
          - $ref: '#/components/schemas/RouteTollSummary'
          description: Toll summary for the complete route.
      description: Summarized details for the leg including travel steps only. The
        Distance for the travel only portion of the journey is the same as the Distance
        within the Overview summary.
    RouteToll:
      type: object
      properties:
        Country:
          allOf:
          - $ref: '#/components/schemas/CountryCode3'
          description: The alpha-2 or alpha-3 character code for the country.
        PaymentSites:
          allOf:
          - $ref: '#/components/schemas/RouteTollPaymentSiteList'
          description: Locations or sites where the toll fare is collected.
        Rates:
          allOf:
          - $ref: '#/components/schemas/RouteTollRateList'
          description: Toll rates that need to be paid to travel this leg of the route.
        Systems:
          allOf:
          - $ref: '#/components/schemas/IndexList'
          description: Toll systems are authorities that collect payments for the
            toll.
      required:
      - PaymentSites
      - Rates
      - Systems
      description: Provides details about toll information along a route, including
        the payment sites, applicable toll rates, toll systems, and the country associated
        with the toll collection.
    RouteTollList:
      type: array
      items:
        $ref: '#/components/schemas/RouteToll'
    RouteTollOptions:
      type: object
      properties:
        AllTransponders:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies if the user has valid transponder with access to
            all toll systems. This impacts toll calculation, and if true the price
            with transponders is used.
        AllVignettes:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies if the user has valid vignettes with access for all
            toll roads. If a user has a vignette for a toll road, then toll cost for
            that road is omitted since no further payment is necessary.
        Currency:
          allOf:
          - $ref: '#/components/schemas/CurrencyCode'
          description: Currency code corresponding to the price. This is the same
            as Currency specified in the request.
        EmissionType:
          allOf:
          - $ref: '#/components/schemas/RouteEmissionType'
          description: 'Emission type of the vehicle for toll cost calculation.


            **Valid values** : `Euro1, Euro2, Euro3, Euro4, Euro5, Euro6, EuroEev`'
        VehicleCategory:
          allOf:
          - $ref: '#/components/schemas/RouteTollVehicleCategory'
          description: Vehicle category for toll cost calculation.
      description: Options related to Tolls on a route.
    RouteTollPass:
      type: object
      properties:
        IncludesReturnTrip:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If the pass includes the rate for the return leg of the trip.
        SeniorPass:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If the pass is only valid for senior persons.
        TransferCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: If the toll pass can be transferred, and how many times.
        TripCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Number of trips the pass is valid for.
        ValidityPeriod:
          allOf:
          - $ref: '#/components/schemas/RouteTollPassValidityPeriod'
          description: Period for which the pass is valid.
      description: Details if the toll rate can be a pass that supports multiple trips.
    RouteTollPassValidityPeriod:
      type: object
      properties:
        Period:
          allOf:
          - $ref: '#/components/schemas/RouteTollPassValidityPeriodType'
          description: Validity period.
        PeriodCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Counts for the validity period.
      required:
      - Period
      description: Period for which the pass is valid.
    RouteTollPassValidityPeriodType:
      type: string
      enum:
      - Annual
      - Days
      - ExtendedAnnual
      - Minutes
      - Months
    RouteTollPaymentMethod:
      type: string
      enum:
      - BankCard
      - Cash
      - CashExact
      - CreditCard
      - PassSubscription
      - TravelCard
      - Transponder
      - VideoToll
    RouteTollPaymentMethodList:
      type: array
      items:
        $ref: '#/components/schemas/RouteTollPaymentMethod'
    RouteTollPaymentSite:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Name of the payment site.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position23'
          description: Position defined as `[longitude, latitude]`.
      required:
      - Position
      description: Locations or sites where the toll fare is collected.
    RouteTollPaymentSiteList:
      type: array
      items:
        $ref: '#/components/schemas/RouteTollPaymentSite'
    RouteTollPrice:
      type: object
      properties:
        Currency:
          allOf:
          - $ref: '#/components/schemas/CurrencyCode'
          description: Currency code corresponding to the price. This is the same
            as Currency specified in the request.
        Estimate:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If the price is an estimate or an exact value.
        PerDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration for which the price corresponds to.


            **Unit** : `seconds`'
        Range:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If the price is a range or an exact value. If any of the toll
            fares making up the route is a range, the overall price is also a range.
        RangeValue:
          allOf:
          - $ref: '#/components/schemas/RouteTollPriceValueRange'
          description: Price range with a minimum and maximum value, if a range.
        Value:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: Exact price, if not a range.
      required:
      - Currency
      - Estimate
      - Range
      - Value
      description: The toll price.
    RouteTollPriceSummary:
      type: object
      properties:
        Currency:
          allOf:
          - $ref: '#/components/schemas/CurrencyCode'
          description: Currency code corresponding to the price. This is the same
            as Currency specified in the request.
        Estimate:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If the price is an estimate or an exact value.
        Range:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If the price is a range or an exact value. If any of the toll
            fares making up the route is a range, the overall price is also a range.
        RangeValue:
          allOf:
          - $ref: '#/components/schemas/RouteTollPriceValueRange'
          description: Price range with a minimum and maximum value, if a range.
        Value:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: Exact price, if not a range.
      required:
      - Currency
      - Estimate
      - Range
      - Value
      description: Summary of the route and toll price.
    RouteTollPriceValueRange:
      type: object
      properties:
        Min:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: Minimum price.
        Max:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: Maximum price.
      required:
      - Min
      - Max
      description: Price range with a minimum and maximum value, if a range.
    RouteTollRate:
      type: object
      properties:
        ApplicableTimes:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Time when the rate is valid.
        ConvertedPrice:
          allOf:
          - $ref: '#/components/schemas/RouteTollPrice'
          description: Price in the converted currency as specified in the request.
        Id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Toll rate Id.
        LocalPrice:
          allOf:
          - $ref: '#/components/schemas/RouteTollPrice'
          description: Price in the local regional currency.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the toll.
        Pass:
          allOf:
          - $ref: '#/components/schemas/RouteTollPass'
          description: Details if the toll rate can be a pass that supports multiple
            trips.
        PaymentMethods:
          allOf:
          - $ref: '#/components/schemas/RouteTollPaymentMethodList'
          description: Accepted payment methods at the toll.
        Transponders:
          allOf:
          - $ref: '#/components/schemas/RouteTransponderList'
          description: Transponders for which this toll can be applied.
      required:
      - Id
      - LocalPrice
      - Name
      - PaymentMethods
      - Transponders
      description: The toll rate.
    RouteTollRateList:
      type: array
      items:
        $ref: '#/components/schemas/RouteTollRate'
    RouteTollSummary:
      type: object
      properties:
        Total:
          allOf:
          - $ref: '#/components/schemas/RouteTollPriceSummary'
          description: Total toll summary for the complete route. Total is the only
            summary available today.
      description: The toll summary for the complete route.
    RouteTollSystem:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The toll system name.
      description: Toll systems are authorities that collect payments for the toll.
    RouteTollSystemList:
      type: array
      items:
        $ref: '#/components/schemas/RouteTollSystem'
    RouteTollVehicleCategory:
      type: string
      enum:
      - Minibus
    RouteTrafficOptions:
      type: object
      properties:
        FlowEventThresholdOverride:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: Duration for which flow traffic is considered valid. For this
            period, the flow traffic is used over historical traffic data. Flow traffic
            refers to congestion, which changes very quickly. Duration in seconds
            for which flow traffic event would be considered valid. While flow traffic
            event is valid it will be used over the historical traffic data.
        Usage:
          allOf:
          - $ref: '#/components/schemas/TrafficUsage'
          description: 'Determines if traffic should be used or ignored while calculating
            the route.


            Default Value: `UseTrafficData`'
      description: Traffic options for the route.
    RouteTrailerOptions:
      type: object
      properties:
        AxleCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Total number of axles of the vehicle.
        TrailerCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'Number of trailers attached to the vehicle.


            Default Value: `0`'
      description: Trailer options corresponding to the vehicle.
    RouteTransponder:
      type: object
      properties:
        SystemName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Names of the toll system collecting the toll.
      description: Transponders for which this toll can be applied.
    RouteTransponderList:
      type: array
      items:
        $ref: '#/components/schemas/RouteTransponder'
    RouteTravelMode:
      type: string
      enum:
      - Car
      - Pedestrian
      - Scooter
      - Truck
    RouteTravelModeOptions:
      type: object
      properties:
        Car:
          allOf:
          - $ref: '#/components/schemas/RouteCarOptions'
          description: Travel mode options when the provided travel mode is "Car"
        Pedestrian:
          allOf:
          - $ref: '#/components/schemas/RoutePedestrianOptions'
          description: Travel mode options when the provided travel mode is "Pedestrian"
        Scooter:
          allOf:
          - $ref: '#/components/schemas/RouteScooterOptions'
          description: 'Travel mode options when the provided travel mode is `Scooter`


            When travel mode is set to `Scooter`, then the avoidance option `ControlledAccessHighways`
            defaults to `true`.'
        Truck:
          allOf:
          - $ref: '#/components/schemas/RouteTruckOptions'
          description: Travel mode options when the provided travel mode is "Truck"
      description: Travel mode related options for the provided travel mode.
    RouteTravelStepType:
      type: string
      enum:
      - Default
      - TurnByTurn
    RouteTruckOptions:
      type: object
      properties:
        AxleCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Total number of axles of the vehicle.
        EngineType:
          allOf:
          - $ref: '#/components/schemas/RouteEngineType'
          description: Engine type of the vehicle.
        GrossWeight:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Gross weight of the vehicle including trailers, and goods
            at capacity.


            **Unit** : `Kilograms`'
        HazardousCargos:
          allOf:
          - $ref: '#/components/schemas/RouteHazardousCargoTypeList'
          description: List of Hazardous cargo contained in the vehicle.
        Height:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Height of the vehicle.


            **Unit** : `centimeters`'
        HeightAboveFirstAxle:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Height of the vehicle above its first axle.


            **Unit** : `centimeters`'
        KpraLength:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Kingpin to rear axle length of the vehicle.


            **Unit** : `centimeters`'
        Length:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Length of the vehicle.


            **Unit** : `c`'
        LicensePlate:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleLicensePlate'
          description: The vehicle License Plate.
        MaxSpeed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Maximum speed


            **Unit** : `KilometersPerHour`'
        Occupancy:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The number of occupants in the vehicle.


            Default Value: `1`'
        PayloadCapacity:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Payload capacity of the vehicle and trailers attached.


            **Unit** : `kilograms`'
        TireCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Number of tires on the vehicle.
        Trailer:
          allOf:
          - $ref: '#/components/schemas/RouteTrailerOptions'
          description: Trailer options corresponding to the vehicle.
        TruckType:
          allOf:
          - $ref: '#/components/schemas/RouteTruckType'
          description: Type of the truck.
        TunnelRestrictionCode:
          allOf:
          - $ref: '#/components/schemas/TunnelRestrictionCode'
          description: "The tunnel restriction code.\n\nTunnel categories in this\
            \ list indicate the restrictions which apply to certain tunnels in Great\
            \ Britain. They relate to the types of dangerous goods that can be transported\
            \ through them.\n\n  * _Tunnel Category B_\n\n    * _Risk Level_ : Limited\
            \ risk\n\n    * _Restrictions_ : Few restrictions\n\n  * _Tunnel Category\
            \ C_\n\n    * _Risk Level_ : Medium risk\n\n    * _Restrictions_ : Some\
            \ restrictions\n\n  * _Tunnel Category D_\n\n    * _Risk Level_ : High\
            \ risk\n\n    * _Restrictions_ : Many restrictions occur\n\n  * _Tunnel\
            \ Category E_\n\n    * _Risk Level_ : Very high risk\n\n    * _Restrictions_\
            \ : Restricted tunnel"
        WeightPerAxle:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Heaviest weight per axle irrespective of the axle type or
            the axle group. Meant for usage in countries where the differences in
            axle types or axle groups are not distinguished.


            **Unit** : `Kilograms`'
        WeightPerAxleGroup:
          allOf:
          - $ref: '#/components/schemas/WeightPerAxleGroup'
          description: 'Specifies the total weight for the specified axle group. Meant
            for usage in countries that have different regulations based on the axle
            group type.


            **Unit** : `Kilograms`'
        Width:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Width of the vehicle.


            **Unit** : `centimeters`'
      description: Travel mode options when the provided travel mode is "Truck"
    RouteTruckType:
      type: string
      enum:
      - LightTruck
      - StraightTruck
      - Tractor
    RouteTurnIntensity:
      type: string
      enum:
      - Sharp
      - Slight
      - Typical
    RouteTurnStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
        SteeringDirection:
          allOf:
          - $ref: '#/components/schemas/RouteSteeringDirection'
          description: Steering direction for the step.
        TurnAngle:
          allOf:
          - $ref: '#/components/schemas/TurnAngle'
          description: Angle of the turn.
        TurnIntensity:
          allOf:
          - $ref: '#/components/schemas/RouteTurnIntensity'
          description: Intensity of the turn.
      required:
      - Intersection
      description: Details related to the turn step.
    RouteUTurnStepDetails:
      type: object
      properties:
        Intersection:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Name of the intersection, if applicable to the step.
        SteeringDirection:
          allOf:
          - $ref: '#/components/schemas/RouteSteeringDirection'
          description: Steering direction for the step.
        TurnAngle:
          allOf:
          - $ref: '#/components/schemas/TurnAngle'
          description: Angle of the turn.
        TurnIntensity:
          allOf:
          - $ref: '#/components/schemas/RouteTurnIntensity'
          description: Intensity of the turn.
      required:
      - Intersection
      description: Details related to the U-turn step.
    RouteVehicleArrival:
      type: object
      properties:
        Place:
          allOf:
          - $ref: '#/components/schemas/RouteVehiclePlace'
          description: The place details.
        Time:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: The time.
      required:
      - Place
      description: Details corresponding to the arrival for a leg.
    RouteVehicleDeparture:
      type: object
      properties:
        Place:
          allOf:
          - $ref: '#/components/schemas/RouteVehiclePlace'
          description: The place details.
        Time:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: The departure time.
      required:
      - Place
      description: Details corresponding to the departure for the leg.
    RouteVehicleIncident:
      type: object
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Brief readable description of the incident.
        EndTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: End timestamp of the incident.
        Severity:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleIncidentSeverity'
          description: Severity of the incident Critical - The part of the route the
            incident affects is unusable. Major- Major impact on the leg duration,
            for example stop and go Minor- Minor impact on the leg duration, for example
            traffic jam Low - Low on duration, for example slightly increased traffic
        StartTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: Start time of the incident.
        Type:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleIncidentType'
          description: Type of the incident.
      description: Incidents corresponding to this leg of the route.
    RouteVehicleIncidentList:
      type: array
      items:
        $ref: '#/components/schemas/RouteVehicleIncident'
    RouteVehicleIncidentSeverity:
      type: string
      enum:
      - Critical
      - High
      - Medium
      - Low
    RouteVehicleIncidentType:
      type: string
      enum:
      - Accident
      - Congestion
      - Construction
      - DisabledVehicle
      - LaneRestriction
      - MassTransit
      - Other
      - PlannedEvent
      - RoadClosure
      - RoadHazard
      - Weather
    RouteVehicleLegDetails:
      type: object
      properties:
        Arrival:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleArrival'
          description: Details corresponding to the arrival for the leg.
        Departure:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleDeparture'
          description: Details corresponding to the departure for the leg.
        Incidents:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleIncidentList'
          description: Incidents corresponding to this leg of the route.
        Notices:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleNoticeList'
          description: Notices are additional information returned that indicate issues
            that occurred during route calculation.
        PassThroughWaypoints:
          allOf:
          - $ref: '#/components/schemas/RoutePassThroughWaypointList'
          description: Waypoints that were passed through during the leg. This includes
            the waypoints that were configured with the PassThrough option.
        Spans:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleSpanList'
          description: Spans that were computed for the requested SpanAdditionalFeatures.
        Summary:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleSummary'
          description: Summarized details of the leg.
        Tolls:
          allOf:
          - $ref: '#/components/schemas/RouteTollList'
          description: Toll related options.
        TollSystems:
          allOf:
          - $ref: '#/components/schemas/RouteTollSystemList'
          description: Toll systems are authorities that collect payments for the
            toll.
        TravelSteps:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleTravelStepList'
          description: Steps of a leg that must be performed before the travel portion
            of the leg.
        TruckRoadTypes:
          allOf:
          - $ref: '#/components/schemas/TruckRoadTypeList'
          description: 'Truck road type identifiers. `BK1` through `BK4` apply only
            to Sweden. `A2,A4,B2,B4,C,D,ET2,ET4` apply only to Mexico.


            There are currently no other supported values as of 26th April 2024.'
        Zones:
          allOf:
          - $ref: '#/components/schemas/RouteZoneList'
          description: Zones corresponding to this leg of the route.
      required:
      - Arrival
      - Departure
      - Incidents
      - Notices
      - PassThroughWaypoints
      - Spans
      - Tolls
      - TollSystems
      - TravelSteps
      - TruckRoadTypes
      - Zones
      description: Steps of a leg that correspond to the travel portion of the leg.
    RouteVehicleLicensePlate:
      type: object
      properties:
        LastCharacter:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The last character of the License Plate.
      description: License plate information of the vehicle. Currently, only the last
        character is used where license plate based controlled access is enforced.
    RouteVehicleNotice:
      type: object
      properties:
        Code:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleNoticeCode'
          description: Code corresponding to the issue.
        Details:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleNoticeDetailList'
          description: Additional details of the notice.
        Impact:
          allOf:
          - $ref: '#/components/schemas/RouteNoticeImpact'
          description: Impact corresponding to the issue. While Low impact notices
            can be safely ignored, High impact notices must be evaluated further to
            determine the impact.
      required:
      - Code
      - Details
      description: Notices are additional information returned that indicate issues
        that occurred during route calculation.
    RouteVehicleNoticeCode:
      type: string
      enum:
      - AccuratePolylineUnavailable
      - Other
      - PotentialViolatedAvoidTollRoadUsage
      - PotentialViolatedCarpoolUsage
      - PotentialViolatedTurnRestrictionUsage
      - PotentialViolatedVehicleRestrictionUsage
      - PotentialViolatedZoneRestrictionUsage
      - SeasonalClosure
      - TollsDataTemporarilyUnavailable
      - TollsDataUnavailable
      - TollTransponder
      - ViolatedAvoidControlledAccessHighway
      - ViolatedAvoidDifficultTurns
      - ViolatedAvoidDirtRoad
      - ViolatedAvoidSeasonalClosure
      - ViolatedAvoidTollRoad
      - ViolatedAvoidTollTransponder
      - ViolatedAvoidTruckRoadType
      - ViolatedAvoidTunnel
      - ViolatedAvoidUTurns
      - ViolatedBlockedRoad
      - ViolatedCarpool
      - ViolatedEmergencyGate
      - ViolatedStartDirection
      - ViolatedTurnRestriction
      - ViolatedVehicleRestriction
      - ViolatedZoneRestriction
    RouteVehicleNoticeDetail:
      type: object
      properties:
        Title:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The notice title.
        ViolatedConstraints:
          allOf:
          - $ref: '#/components/schemas/RouteViolatedConstraints'
          description: Any violated constraints.
      description: Additional details of the notice.
    RouteVehicleNoticeDetailList:
      type: array
      items:
        $ref: '#/components/schemas/RouteVehicleNoticeDetail'
    RouteVehicleNoticeList:
      type: array
      items:
        $ref: '#/components/schemas/RouteVehicleNotice'
    RouteVehicleOverviewSummary:
      type: object
      properties:
        BestCaseDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Total duration in free flowing traffic, which is the best
            case or shortest duration possible to cover the leg.


            **Unit** : `seconds`'
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance of the step.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the step.


            **Unit** : `seconds`'
        TypicalDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the computed span under typical traffic congestion.


            **Unit** : `seconds`'
      required:
      - Distance
      - Duration
      description: Summarized details of the leg.
    RouteVehiclePlace:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the place.
        OriginalPosition:
          allOf:
          - $ref: '#/components/schemas/Position23'
          description: Position provided in the request.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position23'
          description: Position defined as `[longitude, latitude]`.
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/RouteSideOfStreet'
          description: Options to configure matching the provided position to a side
            of the street.
        WaypointIndex:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Index of the waypoint in the request.
      required:
      - Position
      description: Place details corresponding to the arrival or departure.
    RouteVehicleSpan:
      type: object
      properties:
        BestCaseDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the computed span without traffic congestion.


            **Unit** : `seconds`'
        CarAccess:
          allOf:
          - $ref: '#/components/schemas/RouteSpanCarAccessAttributeList'
          description: Access attributes for a car corresponding to the span.
        Country:
          allOf:
          - $ref: '#/components/schemas/CountryCode3'
          description: 3 letter Country code corresponding to the Span.
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance of the computed span. This feature doesn't split a
            span, but is always computed on a span split by other properties.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the computed span. This feature doesn''t split
            a span, but is always computed on a span split by other properties.


            **Unit** : `seconds`'
        DynamicSpeed:
          allOf:
          - $ref: '#/components/schemas/RouteSpanDynamicSpeedDetails'
          description: 'Dynamic speed details corresponding to the span.


            **Unit** : `KilometersPerHour`'
        FunctionalClassification:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Functional classification of the road segment corresponding
            to the span.
        Gate:
          allOf:
          - $ref: '#/components/schemas/RouteSpanGateAttribute'
          description: Attributes corresponding to a gate. The gate is present at
            the end of the returned span.
        GeometryOffset:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Offset in the leg geometry corresponding to the start of this
            span.
        Incidents:
          allOf:
          - $ref: '#/components/schemas/IndexList'
          description: Incidents corresponding to the span. These index into the Incidents
            in the parent Leg.
        Names:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Provides an array of names of the vehicle span in available
            languages.
        Notices:
          allOf:
          - $ref: '#/components/schemas/IndexList'
          description: Notices are additional information returned that indicate issues
            that occurred during route calculation.
        RailwayCrossing:
          allOf:
          - $ref: '#/components/schemas/RouteSpanRailwayCrossingAttribute'
          description: Attributes corresponding to a railway crossing. The gate is
            present at the end of the returned span.
        Region:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 2-3 letter Region code corresponding to the Span. This is either
            a province or a state.
        RoadAttributes:
          allOf:
          - $ref: '#/components/schemas/RouteSpanRoadAttributeList'
          description: Attributes for the road segment corresponding to the span.
        RouteNumbers:
          allOf:
          - $ref: '#/components/schemas/RouteNumberList'
          description: Designated route name or number corresponding to the span.
        ScooterAccess:
          allOf:
          - $ref: '#/components/schemas/RouteSpanScooterAccessAttributeList'
          description: Access attributes for a scooter corresponding to the span.
        SpeedLimit:
          allOf:
          - $ref: '#/components/schemas/RouteSpanSpeedLimitDetails'
          description: 'Speed limit details corresponding to the span.


            **Unit** : `KilometersPerHour`'
        TollSystems:
          allOf:
          - $ref: '#/components/schemas/IndexList'
          description: Toll systems are authorities that collect payments for the
            toll.
        TruckAccess:
          allOf:
          - $ref: '#/components/schemas/RouteSpanTruckAccessAttributeList'
          description: Access attributes for a truck corresponding to the span.
        TruckRoadTypes:
          allOf:
          - $ref: '#/components/schemas/IndexList'
          description: 'Truck road type identifiers. `BK1` through `BK4` apply only
            to Sweden. `A2,A4,B2,B4,C,D,ET2,ET4` apply only to Mexico.


            There are currently no other supported values as of 26th April 2024.'
        TypicalDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the computed span under typical traffic congestion.


            **Unit** : `seconds`'
        Zones:
          allOf:
          - $ref: '#/components/schemas/IndexList'
          description: Zones corresponding to this leg of the route.
      description: Span computed for the requested SpanAdditionalFeatures.
    RouteVehicleSpanList:
      type: array
      items:
        $ref: '#/components/schemas/RouteVehicleSpan'
    RouteVehicleSummary:
      type: object
      properties:
        Overview:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleOverviewSummary'
          description: Summarized details for the leg including before travel, travel
            and after travel steps.
        TravelOnly:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleTravelOnlySummary'
          description: Summarized details for the leg including travel steps only.
            The Distance for the travel only portion of the journey is in meters
      description: Summarized details of the route.
    RouteVehicleTravelOnlySummary:
      type: object
      properties:
        BestCaseDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Total duration in free flowing traffic, which is the best
            case or shortest duration possible to cover the leg.


            **Unit** : `seconds`'
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the step.


            **Unit** : `seconds`'
        TypicalDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the computed span under typical traffic congestion.


            **Unit** : `seconds`'
      required:
      - Duration
      description: Summarized details of the route.
    RouteVehicleTravelStep:
      type: object
      properties:
        ContinueHighwayStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteContinueHighwayStepDetails'
          description: Details that are specific to a Continue Highway step.
        ContinueStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteContinueStepDetails'
          description: Details that are specific to a Continue step.
        CurrentRoad:
          allOf:
          - $ref: '#/components/schemas/RouteRoad'
          description: Details of the current road.
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance of the step.
        Duration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the step.


            **Unit** : `seconds`'
        EnterHighwayStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteEnterHighwayStepDetails'
          description: Details that are specific to a Enter Highway step.
        ExitNumber:
          allOf:
          - $ref: '#/components/schemas/LocalizedStringList'
          description: Exit number of the road exit, if applicable.
        ExitStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteExitStepDetails'
          description: Details that are specific to a Roundabout Exit step.
        GeometryOffset:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Offset in the leg geometry corresponding to the start of this
            step.
        Instruction:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Brief description of the step in the requested language.


            Only available when the TravelStepType is Default.'
        KeepStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteKeepStepDetails'
          description: Details that are specific to a Keep step.
        NextRoad:
          allOf:
          - $ref: '#/components/schemas/RouteRoad'
          description: Details of the next road. See RouteRoad for details of sub-attributes.
        RampStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteRampStepDetails'
          description: Details that are specific to a Ramp step.
        RoundaboutEnterStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteRoundaboutEnterStepDetails'
          description: Details that are specific to a Roundabout Enter step.
        RoundaboutExitStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteRoundaboutExitStepDetails'
          description: Details that are specific to a Roundabout Exit step.
        RoundaboutPassStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteRoundaboutPassStepDetails'
          description: Details that are specific to a Roundabout Pass step.
        Signpost:
          allOf:
          - $ref: '#/components/schemas/RouteSignpost'
          description: Sign post information of the action, applicable only for TurnByTurn
            steps. See RouteSignpost for details of sub-attributes.
        TurnStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteTurnStepDetails'
          description: Details that are specific to a Turn step.
        Type:
          allOf:
          - $ref: '#/components/schemas/RouteVehicleTravelStepType'
          description: Type of the step.
        UTurnStepDetails:
          allOf:
          - $ref: '#/components/schemas/RouteUTurnStepDetails'
          description: Details that are specific to a Turn step.
      required:
      - Duration
      - Type
      description: Steps of a leg that correspond to the travel portion of the leg.
    RouteVehicleTravelStepList:
      type: array
      items:
        $ref: '#/components/schemas/RouteVehicleTravelStep'
    RouteVehicleTravelStepType:
      type: string
      enum:
      - Arrive
      - Continue
      - ContinueHighway
      - Depart
      - EnterHighway
      - Exit
      - Keep
      - Ramp
      - RoundaboutEnter
      - RoundaboutExit
      - RoundaboutPass
      - Turn
      - UTurn
    RouteViolatedConstraints:
      type: object
      properties:
        AllHazardsRestricted:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: This restriction applies to truck cargo, where the resulting
            route excludes roads on which hazardous materials are prohibited from
            being transported.
        AxleCount:
          allOf:
          - $ref: '#/components/schemas/RouteNoticeDetailRange'
          description: Total number of axles of the vehicle.
        HazardousCargos:
          allOf:
          - $ref: '#/components/schemas/RouteHazardousCargoTypeList'
          description: List of Hazardous cargo contained in the vehicle.
        MaxHeight:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: The maximum height of the vehicle.
        MaxKpraLength:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'The maximum Kpra length of the vehicle.


            **Unit** : `centimeters`'
        MaxLength:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: The maximum length of the vehicle.
        MaxPayloadCapacity:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'The maximum load capacity of the vehicle.


            **Unit** : `kilograms`'
        MaxWeight:
          allOf:
          - $ref: '#/components/schemas/RouteWeightConstraint'
          description: 'The maximum weight of the route.


            **Unit** : `Kilograms`'
        MaxWeightPerAxle:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'The maximum weight per axle of the vehicle.


            **Unit** : `Kilograms`'
        MaxWeightPerAxleGroup:
          allOf:
          - $ref: '#/components/schemas/WeightPerAxleGroup'
          description: 'The maximum weight per axle group of the vehicle.


            **Unit** : `Kilograms`'
        MaxWidth:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: The maximum width of the vehicle.
        Occupancy:
          allOf:
          - $ref: '#/components/schemas/RouteNoticeDetailRange'
          description: 'The number of occupants in the vehicle.


            Default Value: `1`'
        RestrictedTimes:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Access radius restrictions based on time.
        TimeDependent:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The time dependent constraint.
        TrailerCount:
          allOf:
          - $ref: '#/components/schemas/RouteNoticeDetailRange'
          description: 'Number of trailers attached to the vehicle.


            Default Value: `0`'
        TravelMode:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Travel mode corresponding to the leg.
        TruckRoadType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Truck road type identifiers. `BK1` through `BK4` apply only
            to Sweden. `A2,A4,B2,B4,C,D,ET2,ET4` apply only to Mexico.


            There are currently no other supported values as of 26th April 2024.'
        TruckType:
          allOf:
          - $ref: '#/components/schemas/RouteTruckType'
          description: Type of the truck.
        TunnelRestrictionCode:
          allOf:
          - $ref: '#/components/schemas/TunnelRestrictionCode'
          description: "The tunnel restriction code.\n\nTunnel categories in this\
            \ list indicate the restrictions which apply to certain tunnels in Great\
            \ Britain. They relate to the types of dangerous goods that can be transported\
            \ through them.\n\n  * _Tunnel Category B_\n\n    * _Risk Level_ : Limited\
            \ risk\n\n    * _Restrictions_ : Few restrictions\n\n  * _Tunnel Category\
            \ C_\n\n    * _Risk Level_ : Medium risk\n\n    * _Restrictions_ : Some\
            \ restrictions\n\n  * _Tunnel Category D_\n\n    * _Risk Level_ : High\
            \ risk\n\n    * _Restrictions_ : Many restrictions occur\n\n  * _Tunnel\
            \ Category E_\n\n    * _Risk Level_ : Very high risk\n\n    * _Restrictions_\
            \ : Restricted tunnel"
      required:
      - HazardousCargos
      description: This property contains a summary of violated constraints.
    RouteWaypoint:
      type: object
      properties:
        AvoidActionsForDistance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Avoids actions for the provided distance. This is typically
            to consider for users in moving vehicles who may not have sufficient time
            to make an action at an origin or a destination.
        AvoidUTurns:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid U-turns for calculation on highways and motorways.
        Heading:
          allOf:
          - $ref: '#/components/schemas/Heading'
          description: GPS Heading at the position.
        Matching:
          allOf:
          - $ref: '#/components/schemas/RouteMatchingOptions'
          description: Options to configure matching the provided position to the
            road network.
        PassThrough:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If the waypoint should not be treated as a stop. If yes, the
            waypoint is passed through and doesn't split the route into different
            legs.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/RouteSideOfStreetOptions'
          description: Options to configure matching the provided position to a side
            of the street.
        StopDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of the stop.


            **Unit** : `seconds`'
      required:
      - Position
      description: Waypoint between the Origin and Destination.
    RouteWaypointList:
      type: array
      items:
        $ref: '#/components/schemas/RouteWaypoint'
    RouteWeightConstraint:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/RouteWeightConstraintType'
          description: The type of constraint.
        Value:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'The constraint value.


            **Unit** : `Kilograms`'
      required:
      - Type
      - Value
      description: 'The weight constraint for the route.


        **Unit** : `Kilograms`'
    RouteWeightConstraintType:
      type: string
      enum:
      - Current
      - Gross
      - Unknown
    RouteZone:
      type: object
      properties:
        Category:
          allOf:
          - $ref: '#/components/schemas/RouteZoneCategory'
          description: The zone category.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the zone.
      description: The zone.
    RouteZoneCategory:
      type: string
      enum:
      - CongestionPricing
      - Environmental
      - Vignette
    RouteZoneList:
      type: array
      items:
        $ref: '#/components/schemas/RouteZone'
    RoutingObjective:
      type: string
      enum:
      - FastestRoute
      - ShortestRoute
    SensitiveString:
      type: string
    SideOfStreetMatchingStrategy:
      type: string
      enum:
      - AnyStreet
      - DividedStreetOnly
    SnapToRoadsRequest:
      type: object
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: 'Optional: The API key to be used for authorization. Either
            an API key or valid SigV4 signature must be provided when making a request.'
        SnappedGeometryFormat:
          allOf:
          - $ref: '#/components/schemas/GeometryFormat'
          description: 'Chooses what the returned SnappedGeometry format should be.


            Default Value: `FlexiblePolyline`'
        SnapRadius:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: 'The radius around the provided tracepoint that is considered
            for snapping.


            **Unit** : `meters`


            Default value: `300`'
        TracePoints:
          allOf:
          - $ref: '#/components/schemas/RoadSnapTracePointList'
          description: List of trace points to be snapped onto the road network.
        TravelMode:
          allOf:
          - $ref: '#/components/schemas/RoadSnapTravelMode'
          description: 'Specifies the mode of transport when calculating a route.
            Used in estimating the speed of travel and road compatibility.


            Default Value: `Car`'
        TravelModeOptions:
          allOf:
          - $ref: '#/components/schemas/RoadSnapTravelModeOptions'
          description: Travel mode related options for the provided travel mode.
      required:
      - TracePoints
    SnapToRoadsResponse:
      type: object
      properties:
        Notices:
          allOf:
          - $ref: '#/components/schemas/RoadSnapNoticeList'
          description: Notices are additional information returned that indicate issues
            that occurred during route calculation.
        PricingBucket:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pricing bucket for which the query is charged at.
        SnappedGeometry:
          allOf:
          - $ref: '#/components/schemas/RoadSnapSnappedGeometry'
          description: The interpolated geometry for the snapped route onto the road
            network.
        SnappedGeometryFormat:
          allOf:
          - $ref: '#/components/schemas/GeometryFormat'
          description: Specifies the format of the geometry returned for each leg
            of the route.
        SnappedTracePoints:
          allOf:
          - $ref: '#/components/schemas/RoadSnapSnappedTracePointList'
          description: The trace points snapped onto the road network.
      required:
      - Notices
      - PricingBucket
      - SnappedGeometryFormat
      - SnappedTracePoints
    SpeedKilometersPerHour:
      type: number
      format: double
      default: 0
      minimum: 0.0
    ThrottlingException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: The request was denied due to request throttling.
    TimeOfDay:
      type: string
      pattern: ^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](Z|[+-]([0-1]?[0-9]|2[0-3]):[0-5][0-9])$
    TimeThresholdList:
      type: array
      items:
        $ref: '#/components/schemas/DurationSeconds'
    TimestampWithTimezoneOffset:
      type: string
      pattern: ^([1-2][0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]{0,9})?(Z|[+-]([01][0-9]|2[0-3]):[0-5][0-9])$
    TrafficUsage:
      type: string
      enum:
      - IgnoreTrafficData
      - UseTrafficData
    TruckRoadType:
      type: string
      minLength: 1
      maxLength: 3
    TruckRoadTypeList:
      type: array
      items:
        $ref: '#/components/schemas/TruckRoadType'
    TunnelRestrictionCode:
      type: string
      minLength: 1
      maxLength: 1
    TurnAngle:
      type: number
      format: double
      default: 0
      minimum: -180
      maximum: 180
    ValidationException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
        Reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: A message with the reason for the validation exception error.
        FieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: The field where the invalid entry was detected.
      required:
      - Message
      - Reason
      - FieldList
      description: The input fails to satisfy the constraints specified by an AWS
        service.
    ValidationExceptionField:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Validation Exception Field.
        Message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message.
      required:
      - Name
      - Message
      description: The input fails to satisfy the constraints specified by the Amazon
        Location service.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - UnknownOperation
      - Missing
      - CannotParse
      - FieldValidationFailed
      - Other
      - UnknownField
    WaypointId:
      type: string
      minLength: 1
      maxLength: 100
    WaypointIndex:
      type: integer
      default: 0
    WaypointOptimizationAccessHours:
      type: object
      properties:
        From:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationAccessHoursEntry'
          description: Contains the ID of the starting waypoint in this connection.
        To:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationAccessHoursEntry'
          description: Contains the ID of the ending waypoint in this connection.
      required:
      - From
      - To
      description: Access hours corresponding to when a destination can be visited.
    WaypointOptimizationAccessHoursEntry:
      type: object
      properties:
        DayOfWeek:
          allOf:
          - $ref: '#/components/schemas/DayOfWeek'
          description: Day of the week.
        TimeOfDay:
          allOf:
          - $ref: '#/components/schemas/TimeOfDay'
          description: Time of the day.
      required:
      - DayOfWeek
      - TimeOfDay
      description: Hours of entry.
    WaypointOptimizationAvoidanceArea:
      type: object
      properties:
        Geometry:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationAvoidanceAreaGeometry'
          description: Geometry of the area to be avoided.
      required:
      - Geometry
      description: The area to be avoided.
    WaypointOptimizationAvoidanceAreaGeometry:
      type: object
      properties:
        BoundingBox:
          allOf:
          - $ref: '#/components/schemas/BoundingBox'
          description: Geometry defined as a bounding box. The first pair represents
            the X and Y coordinates (longitude and latitude,) of the southwest corner
            of the bounding box; the second pair represents the X and Y coordinates
            (longitude and latitude) of the northeast corner.
      description: Geometry of the area to be avoided.
    WaypointOptimizationAvoidanceAreaList:
      type: array
      items:
        $ref: '#/components/schemas/WaypointOptimizationAvoidanceArea'
    WaypointOptimizationAvoidanceOptions:
      type: object
      properties:
        Areas:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationAvoidanceAreaList'
          description: Areas to be avoided.
        CarShuttleTrains:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoidance options for cars-shuttles-trains.
        ControlledAccessHighways:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid controlled access highways while calculating the route.
        DirtRoads:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid dirt roads while calculating the route.
        Ferries:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoidance options for ferries.
        TollRoads:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoids roads where the specified toll transponders are the
            only mode of payment.
        Tunnels:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid tunnels while calculating the route.
        UTurns:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Avoid U-turns for calculation on highways and motorways.
      description: Specifies options for areas to avoid. This is a best-effort avoidance
        setting, meaning the router will try to honor the avoidance preferences but
        may still include restricted areas if no feasible alternative route exists.
        If avoidance options are not followed, the response will indicate that the
        avoidance criteria were violated.
    WaypointOptimizationClusteringAlgorithm:
      type: string
      enum:
      - DrivingDistance
      - TopologySegment
    WaypointOptimizationClusteringOptions:
      type: object
      properties:
        Algorithm:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationClusteringAlgorithm'
          description: The algorithm to be used. `DrivingDistance` assigns all the
            waypoints that are within driving distance of each other into a single
            cluster. `TopologySegment` assigns all the waypoints that are within the
            same topology segment into a single cluster. A Topology segment is a linear
            stretch of road between two junctions.
        DrivingDistanceOptions:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationDrivingDistanceOptions'
          description: Driving distance options to be used when the clustering algorithm
            is DrivingDistance.
      required:
      - Algorithm
      description: Options for WaypointOptimizationClustering.
    WaypointOptimizationConnection:
      type: object
      properties:
        Distance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: Distance of the step.
        From:
          allOf:
          - $ref: '#/components/schemas/WaypointId'
          description: contains the ID of the starting waypoint in this connection.
        RestDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: Resting time before the driver can continue driving.
        To:
          allOf:
          - $ref: '#/components/schemas/WaypointId'
          description: Contains the ID of the ending waypoint in this connection.
        TravelDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Total duration.


            **Unit** : `seconds`'
        WaitDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Duration of a wait step.


            **Unit** : `seconds`'
      required:
      - Distance
      - From
      - RestDuration
      - To
      - TravelDuration
      - WaitDuration
      description: This contains information such as distance and duration from one
        waypoint to the next waypoint in the sequence.
    WaypointOptimizationConnectionList:
      type: array
      items:
        $ref: '#/components/schemas/WaypointOptimizationConnection'
    WaypointOptimizationConstraint:
      type: string
      enum:
      - AccessHours
      - AppointmentTime
      - Before
      - Heading
      - ServiceDuration
      - SideOfStreet
    WaypointOptimizationDestinationOptions:
      type: object
      properties:
        AccessHours:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationAccessHours'
          description: Access hours corresponding to when a waypoint can be visited.
        AppointmentTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: Appointment time at the destination.
        Heading:
          allOf:
          - $ref: '#/components/schemas/Heading'
          description: GPS Heading at the position.
        Id:
          allOf:
          - $ref: '#/components/schemas/WaypointId'
          description: The waypoint Id.
        ServiceDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Service time spent at the destination. At an appointment,
            the service time should be the appointment duration.


            **Unit** : `seconds`'
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationSideOfStreetOptions'
          description: Options to configure matching the provided position to a side
            of the street.
      description: Destination related options.
    WaypointOptimizationDriverOptions:
      type: object
      properties:
        RestCycles:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationRestCycles'
          description: Driver work-rest schedules defined by a short and long cycle.
            A rest needs to be taken after the short work duration. The short cycle
            can be repeated until you hit the long work duration, at which point the
            long rest duration should be taken before restarting.
        RestProfile:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationRestProfile'
          description: Pre defined rest profiles for a driver schedule. The only currently
            supported profile is EU.
        TreatServiceTimeAs:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationServiceTimeTreatment'
          description: If the service time provided at a waypoint/destination should
            be considered as rest or work. This contributes to the total time breakdown
            returned within the response.
      description: Driver related options.
    WaypointOptimizationDrivingDistanceOptions:
      type: object
      properties:
        DrivingDistance:
          allOf:
          - $ref: '#/components/schemas/DistanceMeters'
          description: DrivingDistance assigns all the waypoints that are within driving
            distance of each other into a single cluster.
      required:
      - DrivingDistance
      description: Driving distance related options.
    WaypointOptimizationExclusionOptions:
      type: object
      properties:
        Countries:
          allOf:
          - $ref: '#/components/schemas/CountryCodeList'
          description: List of countries to be avoided defined by two-letter or three-letter
            country codes.
      required:
      - Countries
      description: Specifies strict exclusion options for the route calculation. This
        setting mandates that the router will avoid any routes that include the specified
        options, rather than merely attempting to minimize them.
    WaypointOptimizationFailedConstraint:
      type: object
      properties:
        Constraint:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationConstraint'
          description: The failed constraint.
        Reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Reason for the failed constraint.
      description: The failed constraint.
    WaypointOptimizationFailedConstraintList:
      type: array
      items:
        $ref: '#/components/schemas/WaypointOptimizationFailedConstraint'
    WaypointOptimizationHazardousCargoType:
      type: string
      enum:
      - Combustible
      - Corrosive
      - Explosive
      - Flammable
      - Gas
      - HarmfulToWater
      - Organic
      - Other
      - Poison
      - PoisonousInhalation
      - Radioactive
    WaypointOptimizationHazardousCargoTypeList:
      type: array
      items:
        $ref: '#/components/schemas/WaypointOptimizationHazardousCargoType'
    WaypointOptimizationImpedingWaypoint:
      type: object
      properties:
        FailedConstraints:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationFailedConstraintList'
          description: Failed constraints for an impeding waypoint.
        Id:
          allOf:
          - $ref: '#/components/schemas/WaypointId'
          description: The waypoint Id.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
      required:
      - FailedConstraints
      - Id
      - Position
      description: The impeding waypoint.
    WaypointOptimizationImpedingWaypointList:
      type: array
      items:
        $ref: '#/components/schemas/WaypointOptimizationImpedingWaypoint'
    WaypointOptimizationOptimizedWaypoint:
      type: object
      properties:
        ArrivalTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: 'Estimated time of arrival at the destination.


            Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


            Examples:


            `2020-04-22T17:57:24Z`


            `2020-04-22T17:57:24+02:00`'
        ClusterIndex:
          allOf:
          - $ref: '#/components/schemas/ClusterIndex'
          description: Index of the cluster the waypoint is associated with. The index
            is included in the response only if clustering was performed while processing
            the request.
        DepartureTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: 'Estimated time of departure from thr origin.


            Time format:`YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm`


            Examples:


            `2020-04-22T17:57:24Z`


            `2020-04-22T17:57:24+02:00`'
        Id:
          allOf:
          - $ref: '#/components/schemas/WaypointId'
          description: The waypoint Id.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
      required:
      - DepartureTime
      - Id
      - Position
      description: The optimized waypoint.
    WaypointOptimizationOptimizedWaypointList:
      type: array
      items:
        $ref: '#/components/schemas/WaypointOptimizationOptimizedWaypoint'
    WaypointOptimizationOriginOptions:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/WaypointId'
          description: The Origin Id.
      description: Origin related options.
    WaypointOptimizationPedestrianOptions:
      type: object
      properties:
        Speed:
          allOf:
          - $ref: '#/components/schemas/SpeedKilometersPerHour'
          description: 'Walking speed.


            **Unit** : `KilometersPerHour`'
      description: Options related to a pedestrian.
    WaypointOptimizationRestCycleDurations:
      type: object
      properties:
        RestDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Resting phase of the cycle.


            **Unit** : `seconds`'
        WorkDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Working phase of the cycle.


            **Unit** : `seconds`'
      required:
      - RestDuration
      - WorkDuration
      description: 'Driver work-rest schedules defined by a short and long cycle.
        A rest needs to be taken after the short work duration. The short cycle can
        be repeated until you hit the long work duration, at which point the long
        rest duration should be taken before restarting.


        **Unit** : `seconds`'
    WaypointOptimizationRestCycles:
      type: object
      properties:
        LongCycle:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationRestCycleDurations'
          description: Long cycle for a driver work-rest schedule.
        ShortCycle:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationRestCycleDurations'
          description: Short cycle for a driver work-rest schedule
      required:
      - LongCycle
      - ShortCycle
      description: Resting phase of the cycle.
    WaypointOptimizationRestProfile:
      type: object
      properties:
        Profile:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Pre defined rest profiles for a driver schedule. The only currently
            supported profile is EU.
      required:
      - Profile
      description: Pre defined rest profiles for a driver schedule. The only currently
        supported profile is EU.
    WaypointOptimizationSequencingObjective:
      type: string
      enum:
      - FastestRoute
      - ShortestRoute
    WaypointOptimizationServiceTimeTreatment:
      type: string
      enum:
      - Rest
      - Work
    WaypointOptimizationSideOfStreetOptions:
      type: object
      properties:
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
        UseWith:
          allOf:
          - $ref: '#/components/schemas/SideOfStreetMatchingStrategy'
          description: 'Strategy that defines when the side of street position should
            be used. AnyStreet will always use the provided position.


            Default Value: `DividedStreetOnly`'
      required:
      - Position
      description: Options to configure matching the provided position to a side of
        the street.
    WaypointOptimizationTimeBreakdown:
      type: object
      properties:
        RestDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Resting phase of the cycle.


            **Unit** : `seconds`'
        ServiceDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Service time spent at the destination. At an appointment,
            the service time should be the appointment duration.


            **Unit** : `seconds`'
        TravelDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Traveling phase of the cycle.


            **Unit** : `seconds`'
        WaitDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Waiting phase of the cycle.


            **Unit** : `seconds`'
      required:
      - RestDuration
      - ServiceDuration
      - TravelDuration
      - WaitDuration
      description: Time breakdown for the sequence.
    WaypointOptimizationTrafficOptions:
      type: object
      properties:
        Usage:
          allOf:
          - $ref: '#/components/schemas/TrafficUsage'
          description: 'Determines if traffic should be used or ignored while calculating
            the route.


            Default Value: `UseTrafficData`'
      description: Options related to traffic.
    WaypointOptimizationTrailerOptions:
      type: object
      properties:
        TrailerCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'Number of trailers attached to the vehicle.


            Default Value: `0`'
      description: Trailer options corresponding to the vehicle.
    WaypointOptimizationTravelMode:
      type: string
      enum:
      - Car
      - Pedestrian
      - Scooter
      - Truck
    WaypointOptimizationTravelModeOptions:
      type: object
      properties:
        Pedestrian:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationPedestrianOptions'
          description: Travel mode options when the provided travel mode is "Pedestrian"
        Truck:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationTruckOptions'
          description: Travel mode options when the provided travel mode is "Truck"
      description: Travel mode related options for the provided travel mode.
    WaypointOptimizationTruckOptions:
      type: object
      properties:
        GrossWeight:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Gross weight of the vehicle including trailers, and goods
            at capacity.


            **Unit** : `Kilograms`'
        HazardousCargos:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationHazardousCargoTypeList'
          description: List of Hazardous cargo contained in the vehicle.
        Height:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Height of the vehicle.


            **Unit** : `centimeters`'
        Length:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Length of the vehicle.


            **Unit** : `centimeters`'
        Trailer:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationTrailerOptions'
          description: Trailer options corresponding to the vehicle.
        TruckType:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationTruckType'
          description: Type of the truck.
        TunnelRestrictionCode:
          allOf:
          - $ref: '#/components/schemas/TunnelRestrictionCode'
          description: "The tunnel restriction code.\n\nTunnel categories in this\
            \ list indicate the restrictions which apply to certain tunnels in Great\
            \ Britain. They relate to the types of dangerous goods that can be transported\
            \ through them.\n\n  * _Tunnel Category B_\n\n    * _Risk Level_ : Limited\
            \ risk\n\n    * _Restrictions_ : Few restrictions\n\n  * _Tunnel Category\
            \ C_\n\n    * _Risk Level_ : Medium risk\n\n    * _Restrictions_ : Some\
            \ restrictions\n\n  * _Tunnel Category D_\n\n    * _Risk Level_ : High\
            \ risk\n\n    * _Restrictions_ : Many restrictions occur\n\n  * _Tunnel\
            \ Category E_\n\n    * _Risk Level_ : Very high risk\n\n    * _Restrictions_\
            \ : Restricted tunnel"
        WeightPerAxle:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Heaviest weight per axle irrespective of the axle type or
            the axle group. Meant for usage in countries where the differences in
            axle types or axle groups are not distinguished.


            **Unit** : `Kilograms`'
        Width:
          allOf:
          - $ref: '#/components/schemas/DimensionCentimeters'
          description: 'Width of the vehicle.


            **Unit** : `centimeters`'
      description: Travel mode options when the provided travel mode is "Truck"
    WaypointOptimizationTruckType:
      type: string
      enum:
      - StraightTruck
      - Tractor
    WaypointOptimizationWaypoint:
      type: object
      properties:
        AccessHours:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationAccessHours'
          description: Access hours corresponding to when a waypoint can be visited.
        AppointmentTime:
          allOf:
          - $ref: '#/components/schemas/TimestampWithTimezoneOffset'
          description: Appointment time at the waypoint.
        Before:
          allOf:
          - $ref: '#/components/schemas/BeforeWaypointsList'
          description: Constraint defining what waypoints are to be visited after
            this waypoint.
        Heading:
          allOf:
          - $ref: '#/components/schemas/Heading'
          description: GPS Heading at the position.
        Id:
          allOf:
          - $ref: '#/components/schemas/WaypointId'
          description: The waypoint Id.
        Position:
          allOf:
          - $ref: '#/components/schemas/Position'
          description: Position defined as `[longitude, latitude]`.
        ServiceDuration:
          allOf:
          - $ref: '#/components/schemas/DurationSeconds'
          description: 'Service time spent at the waypoint. At an appointment, the
            service time should be the appointment duration.


            **Unit** : `seconds`'
        SideOfStreet:
          allOf:
          - $ref: '#/components/schemas/WaypointOptimizationSideOfStreetOptions'
          description: Options to configure matching the provided position to a side
            of the street.
      required:
      - Position
      description: Waypoint between the Origin and Destination.
    WaypointOptimizationWaypointList:
      type: array
      items:
        $ref: '#/components/schemas/WaypointOptimizationWaypoint'
    WeightKilograms:
      type: integer
      format: int64
      default: 0
      minimum: 0
      maximum: 4294967295
    WeightPerAxleGroup:
      type: object
      properties:
        Single:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Weight for single axle group.


            **Unit** : `Kilograms`'
        Tandem:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Weight for tandem axle group.


            **Unit** : `Kilograms`'
        Triple:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Weight for triple axle group.


            **Unit** : `Kilograms`'
        Quad:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Weight for quad axle group.


            **Unit** : `Kilograms`'
        Quint:
          allOf:
          - $ref: '#/components/schemas/WeightKilograms'
          description: 'Weight for quad quint group.


            **Unit** : `Kilograms`'
      description: 'Specifies the total weight for the specified axle group. Meant
        for usage in countries that have different regulations based on the axle group
        type.


        **Unit** : `Kilograms`'
