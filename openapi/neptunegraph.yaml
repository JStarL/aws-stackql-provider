openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: neptune_graph
  x-aws-serviceName: neptunegraph
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2023-11-29'
  title: Amazon Neptune Graph
  description: |-
    Neptune Analytics is a new analytics database engine for Amazon Neptune that helps customers get to insights faster by quickly processing large amounts of graph data, invoking popular graph analytic algorithms in low-latency queries, and getting analytics results in seconds.
servers:
- description: The Amazon Neptune Graph regional endpoint
  url: https://neptune-graph.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /exporttasks/{taskIdentifier}:
    delete:
      operationId: CancelExportTask
      description: |-
        Cancel the specified export task.
      parameters:
      - name: taskIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ExportTaskId'
      responses:
        '200': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetExportTask
      description: |-
        Retrieves a specified export task.
      parameters:
      - name: taskIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ExportTaskId'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /importtasks/{taskIdentifier}:
    delete:
      operationId: CancelImportTask
      description: |-
        Deletes the specified import task.
      parameters:
      - name: taskIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      responses:
        '200': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetImportTask
      description: |-
        Retrieves a specified import task.
      parameters:
      - name: taskIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /queries/{queryId}:
    delete:
      operationId: CancelQuery
      description: |-
        Cancels a specified query.
      parameters:
      - name: graphIdentifier
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      - name: queryId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            Raised in case of an authentication or authorization failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetQuery
      description: |-
        Retrieves the status of a specified query.

        When invoking this operation in a Neptune Analytics cluster, the IAM user or role making the request must have the `neptune-graph:GetQueryStatus` IAM action attached.
      parameters:
      - name: graphIdentifier
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      - name: queryId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            Raised in case of an authentication or authorization failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /graphs:
    post:
      operationId: CreateGraph
      description: |-
        Creates a new Neptune Analytics graph.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                graphName:
                  $ref: '#/components/schemas/GraphName'
                tags:
                  $ref: '#/components/schemas/TagMap'
                publicConnectivity:
                  $ref: '#/components/schemas/Boolean'
                kmsKeyIdentifier:
                  $ref: '#/components/schemas/KmsKeyArn'
                vectorSearchConfiguration:
                  $ref: '#/components/schemas/VectorSearchConfiguration'
                replicaCount:
                  $ref: '#/components/schemas/ReplicaCount'
                deletionProtection:
                  $ref: '#/components/schemas/Boolean'
                provisionedMemory:
                  $ref: '#/components/schemas/ProvisionedMemory'
      responses:
        '201': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            A service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListGraphs
      description: |-
        Lists available Neptune Analytics graphs.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /snapshots:
    post:
      operationId: CreateGraphSnapshot
      description: |-
        Creates a snapshot of the specific graph.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                graphIdentifier:
                  $ref: '#/components/schemas/GraphIdentifier'
                snapshotName:
                  $ref: '#/components/schemas/SnapshotName'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            A service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListGraphSnapshots
      description: |-
        Lists available snapshots of a specified Neptune Analytics graph.
      parameters:
      - name: graphIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /importtasks:
    post:
      operationId: CreateGraphUsingImportTask
      description: |-
        Creates a new Neptune Analytics graph and imports data into it, either from Amazon Simple Storage Service (S3) or from a Neptune database or a Neptune database snapshot.

        The data can be loaded from files in S3 that in either the [Gremlin CSV format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html) or the [openCypher load format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                graphName:
                  $ref: '#/components/schemas/GraphName'
                tags:
                  $ref: '#/components/schemas/TagMap'
                publicConnectivity:
                  $ref: '#/components/schemas/Boolean'
                kmsKeyIdentifier:
                  $ref: '#/components/schemas/KmsKeyArn'
                vectorSearchConfiguration:
                  $ref: '#/components/schemas/VectorSearchConfiguration'
                replicaCount:
                  $ref: '#/components/schemas/ReplicaCount'
                deletionProtection:
                  $ref: '#/components/schemas/Boolean'
                importOptions:
                  $ref: '#/components/schemas/ImportOptions'
                maxProvisionedMemory:
                  $ref: '#/components/schemas/ProvisionedMemory'
                minProvisionedMemory:
                  $ref: '#/components/schemas/ProvisionedMemory'
                failOnError:
                  $ref: '#/components/schemas/Boolean'
                source:
                  $ref: '#/components/schemas/String'
                format:
                  $ref: '#/components/schemas/Format'
                parquetType:
                  $ref: '#/components/schemas/ParquetType'
                blankNodeHandling:
                  $ref: '#/components/schemas/BlankNodeHandling'
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
      responses:
        '201': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            A service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListImportTasks
      description: |-
        Lists import tasks.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /graphs/{graphIdentifier}/endpoints/:
    post:
      operationId: CreatePrivateGraphEndpoint
      description: |-
        Create a private graph endpoint to allow private access from to the graph from within a VPC. You can attach security groups to the private graph endpoint.

        VPC endpoint charges apply.
      parameters:
      - name: graphIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vpcId:
                  $ref: '#/components/schemas/VpcId'
                subnetIds:
                  $ref: '#/components/schemas/SubnetIds'
                vpcSecurityGroupIds:
                  $ref: '#/components/schemas/SecurityGroupIds'
      responses:
        '201': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            A service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListPrivateGraphEndpoints
      description: |-
        Lists private endpoints for a specified Neptune Analytics graph.
      parameters:
      - name: graphIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /graphs/{graphIdentifier}:
    delete:
      operationId: DeleteGraph
      description: |-
        Deletes the specified graph. Graphs cannot be deleted if delete-protection is enabled.
      parameters:
      - name: graphIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      - name: skipSnapshot
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetGraph
      description: |-
        Gets information about a specified graph.
      parameters:
      - name: graphIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: ResetGraph
      description: |-
        Empties the data from a specified Neptune Analytics graph.
      parameters:
      - name: graphIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skipSnapshot:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateGraph
      description: |-
        Updates the configuration of a specified Neptune Analytics graph
      parameters:
      - name: graphIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                publicConnectivity:
                  $ref: '#/components/schemas/Boolean'
                provisionedMemory:
                  $ref: '#/components/schemas/ProvisionedMemory'
                deletionProtection:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /snapshots/{snapshotIdentifier}:
    delete:
      operationId: DeleteGraphSnapshot
      description: |-
        Deletes the specifed graph snapshot.
      parameters:
      - name: snapshotIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SnapshotIdentifier'
      responses:
        '200': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetGraphSnapshot
      description: |-
        Retrieves a specified graph snapshot.
      parameters:
      - name: snapshotIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SnapshotIdentifier'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /graphs/{graphIdentifier}/endpoints/{vpcId}:
    delete:
      operationId: DeletePrivateGraphEndpoint
      description: |-
        Deletes a private graph endpoint.
      parameters:
      - name: graphIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      - name: vpcId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VpcId'
      responses:
        '200': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetPrivateGraphEndpoint
      description: |-
        Retrieves information about a specified private endpoint.
      parameters:
      - name: graphIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      - name: vpcId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VpcId'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /queries:
    post:
      operationId: ExecuteQuery
      description: |-
        Execute an openCypher query.

        When invoking this operation in a Neptune Analytics cluster, the IAM user or role making the request must have a policy attached that allows one of the following IAM actions in that cluster, depending on the query:

          * neptune-graph:ReadDataViaQuery

          * neptune-graph:WriteDataViaQuery

          * neptune-graph:DeleteDataViaQuery
      parameters:
      - name: graphIdentifier
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                queryString:
                  $ref: '#/components/schemas/String'
                language:
                  $ref: '#/components/schemas/QueryLanguage'
                parameters:
                  $ref: '#/components/schemas/DocumentValuedMap'
                planCache:
                  $ref: '#/components/schemas/PlanCacheType'
                explainMode:
                  $ref: '#/components/schemas/ExplainMode'
                queryTimeoutMilliseconds:
                  $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            Raised in case of an authentication or authorization failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            Request cannot be processed due to known reasons. Eg. partition full.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListQueries
      description: |-
        Lists active openCypher queries.
      parameters:
      - name: graphIdentifier
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      - name: maxResults
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Integer'
      - name: state
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/QueryStateInput'
      responses:
        '200': {}
        '403':
          description: |-
            Raised in case of an authentication or authorization failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /summary:
    get:
      operationId: GetGraphSummary
      description: |-
        Gets a graph summary for a property graph.
      parameters:
      - name: graphIdentifier
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      - name: mode
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GraphSummaryMode'
      responses:
        '200': {}
        '403':
          description: |-
            Raised in case of an authentication or authorization failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /exporttasks:
    get:
      operationId: ListExportTasks
      description: |-
        Retrieves a list of export tasks.
      parameters:
      - name: graphIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartExportTask
      description: |-
        Export data from an existing Neptune Analytics graph to Amazon S3. The graph state should be `AVAILABLE`.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                graphIdentifier:
                  $ref: '#/components/schemas/GraphIdentifier'
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
                format:
                  $ref: '#/components/schemas/ExportFormat'
                destination:
                  $ref: '#/components/schemas/String'
                kmsKeyIdentifier:
                  $ref: '#/components/schemas/KmsKeyArn'
                parquetType:
                  $ref: '#/components/schemas/ParquetType'
                exportFilter:
                  $ref: '#/components/schemas/ExportFilter'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Lists tags associated with a specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Adds tags to the specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes the specified tags from the specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /snapshots/{snapshotIdentifier}/restore:
    post:
      operationId: RestoreGraphFromSnapshot
      description: |-
        Restores a graph from a snapshot.
      parameters:
      - name: snapshotIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SnapshotIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                graphName:
                  $ref: '#/components/schemas/GraphName'
                provisionedMemory:
                  $ref: '#/components/schemas/ProvisionedMemory'
                deletionProtection:
                  $ref: '#/components/schemas/Boolean'
                tags:
                  $ref: '#/components/schemas/TagMap'
                replicaCount:
                  $ref: '#/components/schemas/ReplicaCount'
                publicConnectivity:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '201': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            A service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /graphs/{graphIdentifier}/importtasks:
    post:
      operationId: StartImportTask
      description: |-
        Import data into existing Neptune Analytics graph from Amazon Simple Storage Service (S3). The graph needs to be empty and in the AVAILABLE state.
      parameters:
      - name: graphIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GraphIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                importOptions:
                  $ref: '#/components/schemas/ImportOptions'
                failOnError:
                  $ref: '#/components/schemas/Boolean'
                source:
                  $ref: '#/components/schemas/String'
                format:
                  $ref: '#/components/schemas/Format'
                parquetType:
                  $ref: '#/components/schemas/ParquetType'
                blankNodeHandling:
                  $ref: '#/components/schemas/BlankNodeHandling'
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
      responses:
        '201': {}
        '409':
          description: |-
            Raised when a conflict is encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            A failure occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            A specified resource could not be located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The exception was interrupted by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A resource could not be validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A message describing the problem.
      required:
      - message
      description: Raised in case of an authentication or authorization failure.
    Arn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 1011
    BlankNodeHandling:
      type: string
      enum:
      - convertToIri
    CancelExportTaskInput:
      type: object
      properties:
        taskIdentifier:
          allOf:
          - $ref: '#/components/schemas/ExportTaskId'
          description: The unique identifier of the export task.
      required:
      - taskIdentifier
    CancelExportTaskOutput:
      type: object
      properties:
        graphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The source graph identifier of the cancelled export task.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow the exporting of data
            to the destination.
        taskId:
          allOf:
          - $ref: '#/components/schemas/ExportTaskId'
          description: The unique identifier of the export task.
        status:
          allOf:
          - $ref: '#/components/schemas/ExportTaskStatus'
          description: The current status of the export task. The status is `CANCELLING`
            when the export task is cancelled.
        format:
          allOf:
          - $ref: '#/components/schemas/ExportFormat'
          description: The format of the cancelled export task.
        destination:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon S3 URI of the cancelled export task where data will
            be exported to.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key identifier of the cancelled export task.
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the cancelled export task.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that the export task has this status value.
      required:
      - graphId
      - roleArn
      - taskId
      - status
      - format
      - destination
      - kmsKeyIdentifier
    CancelImportTaskInput:
      type: object
      properties:
        taskIdentifier:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The unique identifier of the import task.
      required:
      - taskIdentifier
    CancelImportTaskOutput:
      type: object
      properties:
        graphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the Neptune Analytics graph.
        taskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The unique identifier of the import task.
        source:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A URL identifying to the location of the data to be imported.
            This can be an Amazon S3 path, or can point to a Neptune database endpoint
            or snapshot.
        format:
          allOf:
          - $ref: '#/components/schemas/Format'
          description: Specifies the format of S3 data to be imported. Valid values
            are `CSV`, which identifies the [Gremlin CSV format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html)
            or `OPENCYPHER`, which identies the [openCypher load format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html).
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the cancelled import task.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow access to the data
            that is to be imported.
        status:
          allOf:
          - $ref: '#/components/schemas/ImportTaskStatus'
          description: Current status of the task. Status is CANCELLING when the import
            task is cancelled.
      required:
      - taskId
      - source
      - roleArn
      - status
    CancelQueryInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        queryId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique identifier of the query to cancel.
      required:
      - graphIdentifier
      - queryId
    ConflictException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A message describing the problem.
        reason:
          allOf:
          - $ref: '#/components/schemas/ConflictExceptionReason'
          description: The reason for the conflict exception.
      required:
      - message
      description: Raised when a conflict is encountered.
    ConflictExceptionReason:
      type: string
      enum:
      - CONCURRENT_MODIFICATION
    CreateGraphInput:
      type: object
      properties:
        graphName:
          allOf:
          - $ref: '#/components/schemas/GraphName'
          description: 'A name for the new Neptune Analytics graph to be created.


            The name must contain from 1 to 63 letters, numbers, or hyphens, and its
            first character must be a letter. It cannot end with a hyphen or contain
            two consecutive hyphens. Only lowercase letters are allowed.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Adds metadata tags to the new graph. These tags can also be
            used with cost allocation reporting, or used in a Condition statement
            in an IAM policy.
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether or not the graph can be reachable over the
            internet. All access to graphs is IAM authenticated. (`true` to enable,
            or `false` to disable.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: Specifies a KMS key to use to encrypt data in the new graph.
        vectorSearchConfiguration:
          allOf:
          - $ref: '#/components/schemas/VectorSearchConfiguration'
          description: Specifies the number of dimensions for vector embeddings that
            will be loaded into the graph. The value is specified as `dimension=`value.
            Max = 65,535
        replicaCount:
          allOf:
          - $ref: '#/components/schemas/ReplicaCount'
          description: 'The number of replicas in other AZs. Min =0, Max = 2, Default
            = 1.


            Additional charges equivalent to the m-NCUs selected for the graph apply
            for each replica.'
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether or not to enable deletion protection on the
            graph. The graph can’t be deleted when deletion protection is enabled.
            (`true` or `false`).
        provisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: The provisioned memory-optimized Neptune Capacity Units (m-NCUs)
            to use for the graph. Min = 16
      required:
      - graphName
      - provisionedMemory
    CreateGraphOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The ID of the graph.
        name:
          allOf:
          - $ref: '#/components/schemas/GraphName'
          description: 'The graph name. For example: `my-graph-1`.


            The name must contain from 1 to 63 letters, numbers, or hyphens, and its
            first character must be a letter. It cannot end with a hyphen or contain
            two consecutive hyphens. Only lowercase letters are allowed.'
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the graph.
        status:
          allOf:
          - $ref: '#/components/schemas/GraphStatus'
          description: The current status of the graph.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason the status was given.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the graph was created.
        provisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: 'The provisioned memory-optimized Neptune Capacity Units (m-NCUs)
            to use for the graph.


            Min = 16'
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The graph endpoint.
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether or not the graph can be reachable over the
            internet. All access to graphs is IAM authenticated.


            If enabling public connectivity for the first time, there will be a delay
            while it is enabled.'
        vectorSearchConfiguration:
          allOf:
          - $ref: '#/components/schemas/VectorSearchConfiguration'
          description: The vector-search configuration for the graph, which specifies
            the vector dimension to use in the vector index, if any.
        replicaCount:
          allOf:
          - $ref: '#/components/schemas/ReplicaCount'
          description: 'The number of replicas in other AZs.


            Default: If not specified, the default value is 1.'
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: Specifies the KMS key used to encrypt data in the new graph.
        sourceSnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the source graph.
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A value that indicates whether the graph has deletion protection
            enabled. The graph can't be deleted when deletion protection is enabled.
        buildNumber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The build number of the graph software.
      required:
      - id
      - name
      - arn
    CreateGraphSnapshotInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        snapshotName:
          allOf:
          - $ref: '#/components/schemas/SnapshotName'
          description: 'The snapshot name. For example: `my-snapshot-1`.


            The name must contain from 1 to 63 letters, numbers, or hyphens, and its
            first character must be a letter. It cannot end with a hyphen or contain
            two consecutive hyphens. Only lowercase letters are allowed.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Adds metadata tags to the new graph. These tags can also be
            used with cost allocation reporting, or used in a Condition statement
            in an IAM policy.
      required:
      - graphIdentifier
      - snapshotName
    CreateGraphSnapshotOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the snapshot created.
        name:
          allOf:
          - $ref: '#/components/schemas/SnapshotName'
          description: The name of the snapshot created.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the snapshot created.
        sourceGraphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The Id of the Neptune Analytics graph from which the snapshot
            is created.
        snapshotCreateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The snapshot creation time
        status:
          allOf:
          - $ref: '#/components/schemas/SnapshotStatus'
          description: The current state of the snapshot.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The ID of the KMS key used to encrypt and decrypt graph data.
      required:
      - id
      - name
      - arn
    CreateGraphUsingImportTaskInput:
      type: object
      properties:
        graphName:
          allOf:
          - $ref: '#/components/schemas/GraphName'
          description: 'A name for the new Neptune Analytics graph to be created.


            The name must contain from 1 to 63 letters, numbers, or hyphens, and its
            first character must be a letter. It cannot end with a hyphen or contain
            two consecutive hyphens. Only lowercase letters are allowed.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Adds metadata tags to the new graph. These tags can also be
            used with cost allocation reporting, or used in a Condition statement
            in an IAM policy.
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether or not the graph can be reachable over the
            internet. All access to graphs is IAM authenticated. (`true` to enable,
            or `false` to disable).
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: Specifies a KMS key to use to encrypt data imported into the
            new graph.
        vectorSearchConfiguration:
          allOf:
          - $ref: '#/components/schemas/VectorSearchConfiguration'
          description: Specifies the number of dimensions for vector embeddings that
            will be loaded into the graph. The value is specified as `dimension=`value.
            Max = 65,535
        replicaCount:
          allOf:
          - $ref: '#/components/schemas/ReplicaCount'
          description: 'The number of replicas in other AZs to provision on the new
            graph after import. Default = 0, Min = 0, Max = 2.


            Additional charges equivalent to the m-NCUs selected for the graph apply
            for each replica.'
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether or not to enable deletion protection on the
            graph. The graph can’t be deleted when deletion protection is enabled.
            (`true` or `false`).
        importOptions:
          allOf:
          - $ref: '#/components/schemas/ImportOptions'
          description: Contains options for controlling the import process. For example,
            if the `failOnError` key is set to `false`, the import skips problem data
            and attempts to continue (whereas if set to `true`, the default, or if
            omitted, the import operation halts immediately when an error is encountered.
        maxProvisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: 'The maximum provisioned memory-optimized Neptune Capacity
            Units (m-NCUs) to use for the graph. Default: 1024, or the approved upper
            limit for your account.


            If both the minimum and maximum values are specified, the final `provisioned-memory`
            will be chosen per the actual size of your imported data. If neither value
            is specified, 128 m-NCUs are used.'
        minProvisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: 'The minimum provisioned memory-optimized Neptune Capacity
            Units (m-NCUs) to use for the graph. Default: 16'
        failOnError:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If set to `true`, the task halts when an import error is encountered.
            If set to `false`, the task skips the data that caused the error and continues
            if possible.
        source:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A URL identifying to the location of the data to be imported.
            This can be an Amazon S3 path, or can point to a Neptune database endpoint
            or snapshot.
        format:
          allOf:
          - $ref: '#/components/schemas/Format'
          description: Specifies the format of S3 data to be imported. Valid values
            are `CSV`, which identifies the [Gremlin CSV format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html),
            `OPEN_CYPHER`, which identifies the [openCypher load format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html),
            or `ntriples`, which identifies the [RDF n-triples](https://docs.aws.amazon.com/neptune-analytics/latest/userguide/using-rdf-data.html)
            format.
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the import task.
        blankNodeHandling:
          allOf:
          - $ref: '#/components/schemas/BlankNodeHandling'
          description: The method to handle blank nodes in the dataset. Currently,
            only `convertToIri` is supported, meaning blank nodes are converted to
            unique IRIs at load time. Must be provided when format is `ntriples`.
            For more information, see [Handling RDF values](https://docs.aws.amazon.com/neptune-analytics/latest/userguide/using-rdf-data.html#rdf-handling).
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow access to the data
            that is to be imported.
      required:
      - graphName
      - source
      - roleArn
    CreateGraphUsingImportTaskOutput:
      type: object
      properties:
        graphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the Neptune Analytics graph.
        taskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The unique identifier of the import task.
        source:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A URL identifying to the location of the data to be imported.
            This can be an Amazon S3 path, or can point to a Neptune database endpoint
            or snapshot.
        format:
          allOf:
          - $ref: '#/components/schemas/Format'
          description: Specifies the format of S3 data to be imported. Valid values
            are `CSV`, which identifies the [Gremlin CSV format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html),
            `OPENCYPHER`, which identifies the [openCypher load format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html),
            or `ntriples`, which identifies the [RDF n-triples](https://docs.aws.amazon.com/neptune-analytics/latest/userguide/using-rdf-data.html)
            format.
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the import task.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow access to the data
            that is to be imported.
        status:
          allOf:
          - $ref: '#/components/schemas/ImportTaskStatus'
          description: The status of the import task.
        importOptions:
          allOf:
          - $ref: '#/components/schemas/ImportOptions'
          description: Contains options for controlling the import process. For example,
            if the `failOnError` key is set to `false`, the import skips problem data
            and attempts to continue (whereas if set to `true`, the default, or if
            omitted, the import operation halts immediately when an error is encountered.
      required:
      - taskId
      - source
      - roleArn
      - status
    CreatePrivateGraphEndpointInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The VPC in which the private graph endpoint needs to be created.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIds'
          description: Subnets in which private graph endpoint ENIs are created.
        vpcSecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIds'
          description: Security groups to be attached to the private graph endpoint..
      required:
      - graphIdentifier
    CreatePrivateGraphEndpointOutput:
      type: object
      properties:
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: VPC in which the private graph endpoint is created.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIds'
          description: Subnets in which the private graph endpoint ENIs are created.
        status:
          allOf:
          - $ref: '#/components/schemas/PrivateGraphEndpointStatus'
          description: Status of the private graph endpoint.
        vpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: Endpoint ID of the prviate grpah endpoint.
      required:
      - vpcId
      - subnetIds
      - status
    DeleteGraphInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        skipSnapshot:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Determines whether a final graph snapshot is created before
            the graph is deleted. If `true` is specified, no graph snapshot is created.
            If `false` is specified, a graph snapshot is created before the graph
            is deleted.
      required:
      - graphIdentifier
      - skipSnapshot
    DeleteGraphOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the graph.
        name:
          allOf:
          - $ref: '#/components/schemas/GraphName'
          description: The name of the graph.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN associated with the graph.
        status:
          allOf:
          - $ref: '#/components/schemas/GraphStatus'
          description: The status of the graph.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason for the status of the graph.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the graph was created.
        provisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: The number of memory-optimized Neptune Capacity Units (m-NCUs)
            allocated to the graph.
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The graph endpoint.
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, the graph has a public endpoint, otherwise not.
        vectorSearchConfiguration:
          $ref: '#/components/schemas/VectorSearchConfiguration'
        replicaCount:
          allOf:
          - $ref: '#/components/schemas/ReplicaCount'
          description: The number of replicas for the graph.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The ID of the KMS key used to encrypt and decrypt graph data.
        sourceSnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the snapshot from which the graph was created, if
            the graph was recovered from a snapshot.
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, deletion protection was enabled for the graph.
        buildNumber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The build number associated with the graph.
      required:
      - id
      - name
      - arn
    DeleteGraphSnapshotInput:
      type: object
      properties:
        snapshotIdentifier:
          allOf:
          - $ref: '#/components/schemas/SnapshotIdentifier'
          description: ID of the graph snapshot to be deleted.
      required:
      - snapshotIdentifier
    DeleteGraphSnapshotOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The unique identifier of the graph snapshot.
        name:
          allOf:
          - $ref: '#/components/schemas/SnapshotName'
          description: 'The snapshot name. For example: `my-snapshot-1`.


            The name must contain from 1 to 63 letters, numbers, or hyphens, and its
            first character must be a letter. It cannot end with a hyphen or contain
            two consecutive hyphens. Only lowercase letters are allowed.'
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the graph snapshot.
        sourceGraphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The graph identifier for the graph from which the snapshot
            was created.
        snapshotCreateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the snapshot was created.
        status:
          allOf:
          - $ref: '#/components/schemas/SnapshotStatus'
          description: The status of the graph snapshot.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The ID of the KMS key used to encrypt and decrypt the snapshot.
      required:
      - id
      - name
      - arn
    DeletePrivateGraphEndpointInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC where the private endpoint is located.
      required:
      - graphIdentifier
      - vpcId
    DeletePrivateGraphEndpointOutput:
      type: object
      properties:
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC where the private endpoint was deleted.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIds'
          description: The subnet IDs involved.
        status:
          allOf:
          - $ref: '#/components/schemas/PrivateGraphEndpointStatus'
          description: The status of the delete operation.
        vpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: The ID of the VPC endpoint that was deleted.
      required:
      - vpcId
      - subnetIds
      - status
    DocumentValuedMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Document'
    EdgeLabels:
      type: array
      items:
        type: string
    EdgeProperties:
      type: array
      items:
        type: string
    EdgeStructure:
      type: object
      properties:
        count:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of instances of the edge in the graph.
        edgeProperties:
          allOf:
          - $ref: '#/components/schemas/EdgeProperties'
          description: A list of the properties associated with the edge.
      description: Contains information about an edge in a Neptune Analytics graph.
    EdgeStructures:
      type: array
      items:
        $ref: '#/components/schemas/EdgeStructure'
    ExecuteQueryInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        queryString:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The query string to be executed.
        language:
          allOf:
          - $ref: '#/components/schemas/QueryLanguage'
          description: The query language the query is written in. Currently only
            openCypher is supported.
        parameters:
          allOf:
          - $ref: '#/components/schemas/DocumentValuedMap'
          description: 'The data parameters the query can use in JSON format. For
            example: {"name": "john", "age": 20}. (optional)'
        planCache:
          allOf:
          - $ref: '#/components/schemas/PlanCacheType'
          description: Query plan cache is a feature that saves the query plan and
            reuses it on successive executions of the same query. This reduces query
            latency, and works for both `READ` and `UPDATE` queries. The plan cache
            is an LRU cache with a 5 minute TTL and a capacity of 1000.
        explainMode:
          allOf:
          - $ref: '#/components/schemas/ExplainMode'
          description: The explain mode parameter returns a query explain instead
            of the actual query results. A query explain can be used to gather insights
            about the query execution such as planning decisions, time spent on each
            operator, solutions flowing etc.
        queryTimeoutMilliseconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies the query timeout duration, in milliseconds. (optional)
      required:
      - graphIdentifier
      - queryString
      - language
    ExecuteQueryOutput:
      type: object
      properties:
        payload:
          allOf:
          - $ref: '#/components/schemas/QueryResponseBlob'
          description: The query results.
      required:
      - payload
    ExplainMode:
      type: string
      enum:
      - STATIC
      - DETAILS
    ExportFilter:
      type: object
      properties:
        vertexFilter:
          allOf:
          - $ref: '#/components/schemas/ExportFilterPerLabelMap'
          description: Used to specify filters on a per-label basis for vertices.
            This allows you to control which vertex labels and properties are included
            in the export.
        edgeFilter:
          allOf:
          - $ref: '#/components/schemas/ExportFilterPerLabelMap'
          description: Used to specify filters on a per-label basis for edges. This
            allows you to control which edge labels and properties are included in
            the export.
      description: This is the top-level field for specifying vertex or edge filters.
        If the ExportFilter is not provided, then all properties for all labels will
        be exported. If the ExportFilter is provided but is an empty object, then
        no data will be exported.
    ExportFilterElement:
      type: object
      properties:
        properties:
          allOf:
          - $ref: '#/components/schemas/ExportFilterPropertyMap'
          description: Each property is defined by a key-value pair, where the key
            is the desired output property name (e.g. "name"), and the value is an
            object.
      description: Specifies whihc properties of that label should be included in
        the export.
    ExportFilterLabel:
      type: string
      minLength: 1
      maxLength: 128
    ExportFilterOutputDataType:
      type: string
      pattern: ^(Any|Byte|Short|Int|Long|Float|Double|String|Bool|Boolean|Float\[\]|Double\[\])$
    ExportFilterOutputPropertyName:
      type: string
      pattern: ^[a-zA-Z0-9_]+$
      minLength: 1
      maxLength: 128
    ExportFilterPerLabelMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ExportFilterElement'
    ExportFilterPropertyAttributes:
      type: object
      properties:
        outputType:
          allOf:
          - $ref: '#/components/schemas/ExportFilterOutputDataType'
          description: Specifies the data type to use for the property in the exported
            data (e.g. "String", "Int", "Float"). If a type is not provided, the export
            process will determine the type. If a given property is present as multiple
            types (e.g. one vertex has "height" stored as a double, and another edge
            has it stored as a string), the type will be of Any type, otherwise, it
            will be the type of the property as present in vertices.
        sourcePropertyName:
          allOf:
          - $ref: '#/components/schemas/ExportFilterSourcePropertyName'
          description: The name of the property as it exists in the original graph
            data. If not provided, it is assumed that the key matches the desired
            sourcePropertyName.
        multiValueHandling:
          allOf:
          - $ref: '#/components/schemas/MultiValueHandlingType'
          description: Specifies how to handle properties that have multiple values.
            Can be either `TO_LIST` to export all values as a list, or `PICK_FIRST`
            to export the first value encountered. If not specified, the default value
            is `PICK_FIRST`.
      description: A structure representing a property's attributes. It is a map object
        of outputType, sourcePropertyName and multiValueHandling.
    ExportFilterPropertyMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ExportFilterPropertyAttributes'
    ExportFilterSourcePropertyName:
      type: string
      minLength: 1
      maxLength: 128
    ExportFormat:
      type: string
      enum:
      - PARQUET
      - CSV
    ExportTaskDetails:
      type: object
      properties:
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The start time of the export task.
        timeElapsedSeconds:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The time elapsed, in seconds, since the start time of the export
            task.
        progressPercentage:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of progress percentage of the export task.
        numVerticesWritten:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of exported vertices.
        numEdgesWritten:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of exported edges.
      required:
      - startTime
      - timeElapsedSeconds
      - progressPercentage
      description: Contains details about the specified export task.
    ExportTaskId:
      type: string
      pattern: ^t-[a-z0-9]{10}$
    ExportTaskStatus:
      type: string
      enum:
      - INITIALIZING
      - EXPORTING
      - SUCCEEDED
      - FAILED
      - CANCELLING
      - CANCELLED
      - DELETED
    ExportTaskSummary:
      type: object
      properties:
        graphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The source graph identifier of the export task.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow the data to be exported
            to the destination.
        taskId:
          allOf:
          - $ref: '#/components/schemas/ExportTaskId'
          description: The unique identifier of the export task.
        status:
          allOf:
          - $ref: '#/components/schemas/ExportTaskStatus'
          description: The current status of the export task.
        format:
          allOf:
          - $ref: '#/components/schemas/ExportFormat'
          description: The format of the export task.
        destination:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon S3 URI of the export task where data will be exported
            to.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key identifier of the export task.
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the export task.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that the export task has this status value.
      required:
      - graphId
      - roleArn
      - taskId
      - status
      - format
      - destination
      - kmsKeyIdentifier
      description: Provides details about an export task.
    ExportTaskSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ExportTaskSummary'
    Format:
      type: string
      enum:
      - CSV
      - OPEN_CYPHER
      - PARQUET
      - NTRIPLES
    GetExportTaskInput:
      type: object
      properties:
        taskIdentifier:
          allOf:
          - $ref: '#/components/schemas/ExportTaskId'
          description: The unique identifier of the export task.
      required:
      - taskIdentifier
    GetExportTaskOutput:
      type: object
      properties:
        graphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The source graph identifier of the export task.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow data to be exported
            to the destination.
        taskId:
          allOf:
          - $ref: '#/components/schemas/ExportTaskId'
          description: The unique identifier of the export task.
        status:
          allOf:
          - $ref: '#/components/schemas/ExportTaskStatus'
          description: The current status of the export task.
        format:
          allOf:
          - $ref: '#/components/schemas/ExportFormat'
          description: The format of the export task.
        destination:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon S3 URI of the export task where data will be exported.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key identifier of the export task.
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the export task.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that the export task has this status value.
        exportTaskDetails:
          allOf:
          - $ref: '#/components/schemas/ExportTaskDetails'
          description: The details of the export task.
        exportFilter:
          allOf:
          - $ref: '#/components/schemas/ExportFilter'
          description: The export filter of the export task.
      required:
      - graphId
      - roleArn
      - taskId
      - status
      - format
      - destination
      - kmsKeyIdentifier
    GetGraphInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
      required:
      - graphIdentifier
    GetGraphOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the graph.
        name:
          allOf:
          - $ref: '#/components/schemas/GraphName'
          description: The name of the graph.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN associated with the graph.
        status:
          allOf:
          - $ref: '#/components/schemas/GraphStatus'
          description: The status of the graph.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that the graph has this status.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the graph was created.
        provisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: The number of memory-optimized Neptune Capacity Units (m-NCUs)
            allocated to the graph.
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The graph endpoint.
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, the graph has a public endpoint, otherwise not.
        vectorSearchConfiguration:
          $ref: '#/components/schemas/VectorSearchConfiguration'
        replicaCount:
          allOf:
          - $ref: '#/components/schemas/ReplicaCount'
          description: The number of replicas for the graph.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The ID of the KMS key used to encrypt and decrypt graph data.
        sourceSnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the snapshot from which the graph was created, if
            it was created from a snapshot.
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, deletion protection is enabled for the graph.
        buildNumber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The build number of the graph.
      required:
      - id
      - name
      - arn
    GetGraphSnapshotInput:
      type: object
      properties:
        snapshotIdentifier:
          allOf:
          - $ref: '#/components/schemas/SnapshotIdentifier'
          description: The ID of the snapshot to retrieve.
      required:
      - snapshotIdentifier
    GetGraphSnapshotOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The unique identifier of the graph snapshot.
        name:
          allOf:
          - $ref: '#/components/schemas/SnapshotName'
          description: 'The snapshot name. For example: `my-snapshot-1`.


            The name must contain from 1 to 63 letters, numbers, or hyphens, and its
            first character must be a letter. It cannot end with a hyphen or contain
            two consecutive hyphens. Only lowercase letters are allowed.'
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the graph snapshot.
        sourceGraphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The graph identifier for the graph for which a snapshot is
            to be created.
        snapshotCreateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the snapshot was created.
        status:
          allOf:
          - $ref: '#/components/schemas/SnapshotStatus'
          description: The status of the graph snapshot.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The ID of the KMS key used to encrypt and decrypt the snapshot.
      required:
      - id
      - name
      - arn
    GetGraphSummaryInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        mode:
          allOf:
          - $ref: '#/components/schemas/GraphSummaryMode'
          description: 'The summary mode can take one of two values: `basic` (the
            default), and `detailed`.'
      required:
      - graphIdentifier
    GetGraphSummaryOutput:
      type: object
      properties:
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Display the version of this tool.
        lastStatisticsComputationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp, in ISO 8601 format, of the time at which Neptune
            Analytics last computed statistics.
        graphSummary:
          allOf:
          - $ref: '#/components/schemas/GraphDataSummary'
          description: The graph summary.
    GetImportTaskInput:
      type: object
      properties:
        taskIdentifier:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The unique identifier of the import task.
      required:
      - taskIdentifier
    GetImportTaskOutput:
      type: object
      properties:
        graphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the Neptune Analytics graph.
        taskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The unique identifier of the import task.
        source:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A URL identifying to the location of the data to be imported.
            This can be an Amazon S3 path, or can point to a Neptune database endpoint
            or snapshot
        format:
          allOf:
          - $ref: '#/components/schemas/Format'
          description: Specifies the format of S3 data to be imported. Valid values
            are `CSV`, which identifies the [Gremlin CSV format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html)
            or `OPENCYPHER`, which identies the [openCypher load format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html).
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the import task.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow access to the data
            that is to be imported.
        status:
          allOf:
          - $ref: '#/components/schemas/ImportTaskStatus'
          description: "The status of the import task:\n\n  * **INITIALIZING** – The\
            \ necessary resources needed to create the graph are being prepared.\n\
            \n  * **ANALYZING_DATA** – The data is being analyzed to determine the\
            \ optimal infrastructure configuration for the new graph.\n\n  * **RE_PROVISIONING**\
            \ – The data did not fit into the provisioned graph, so it is being re-provisioned\
            \ with more capacity.\n\n  * **IMPORTING** – The data is being loaded.\n\
            \n  * **ERROR_ENCOUNTERED** – An error has been encountered while trying\
            \ to create the graph and import the data.\n\n  * **ERROR_ENCOUNTERED_ROLLING_BACK**\
            \ – Because of the error that was encountered, the graph is being rolled\
            \ back and all its resources released.\n\n  * **SUCCEEDED** – Graph creation\
            \ and data loading succeeded.\n\n  * **FAILED** – Graph creation or data\
            \ loading failed. When the status is `FAILED`, you can use `get-graphs`\
            \ to get more information about the state of the graph.\n\n  * **CANCELLING**\
            \ – Because you cancelled the import task, cancellation is in progress.\n\
            \n  * **CANCELLED** – You have successfully cancelled the import task."
        importOptions:
          allOf:
          - $ref: '#/components/schemas/ImportOptions'
          description: Contains options for controlling the import process. For example,
            if the `failOnError` key is set to `false`, the import skips problem data
            and attempts to continue (whereas if set to `true`, the default, or if
            omitted, the import operation halts immediately when an error is encountered.
        importTaskDetails:
          allOf:
          - $ref: '#/components/schemas/ImportTaskDetails'
          description: Contains details about the specified import task.
        attemptNumber:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of the current attempts to execute the import task.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that the import task has this status value.
      required:
      - taskId
      - source
      - roleArn
      - status
    GetPrivateGraphEndpointInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC where the private endpoint is located.
      required:
      - graphIdentifier
      - vpcId
    GetPrivateGraphEndpointOutput:
      type: object
      properties:
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC where the private endpoint is located.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIds'
          description: The subnet IDs involved.
        status:
          allOf:
          - $ref: '#/components/schemas/PrivateGraphEndpointStatus'
          description: The current status of the private endpoint.
        vpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: The ID of the private endpoint.
      required:
      - vpcId
      - subnetIds
      - status
    GetQueryInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        queryId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the query in question.
      required:
      - graphIdentifier
      - queryId
    GetQueryOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the query in question.
        queryString:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The query in question.
        waited:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Indicates how long the query waited, in milliseconds.
        elapsed:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of milliseconds the query has been running.
        state:
          allOf:
          - $ref: '#/components/schemas/QueryState'
          description: State of the query.
    GraphDataSummary:
      type: object
      properties:
        numNodes:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of nodes in the graph.
        numEdges:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of edges in the graph.
        numNodeLabels:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of distinct node labels in the graph.
        numEdgeLabels:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of unique edge labels in the graph.
        nodeLabels:
          allOf:
          - $ref: '#/components/schemas/NodeLabels'
          description: A list of distinct node labels in the graph.
        edgeLabels:
          allOf:
          - $ref: '#/components/schemas/EdgeLabels'
          description: A list of the edge labels in the graph.
        numNodeProperties:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of distinct node properties in the graph.
        numEdgeProperties:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of edge properties in the graph.
        nodeProperties:
          allOf:
          - $ref: '#/components/schemas/LongValuedMapList'
          description: A list of the distinct node properties in the graph, along
            with the count of nodes where each property is used.
        edgeProperties:
          allOf:
          - $ref: '#/components/schemas/LongValuedMapList'
          description: A list of the distinct edge properties in the graph, along
            with the count of edges where each property is used.
        totalNodePropertyValues:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total number of usages of all node properties.
        totalEdgePropertyValues:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total number of usages of all edge properties.
        nodeStructures:
          allOf:
          - $ref: '#/components/schemas/NodeStructures'
          description: This field is only present when the requested mode is DETAILED.
            It contains a list of node structures.
        edgeStructures:
          allOf:
          - $ref: '#/components/schemas/EdgeStructures'
          description: This field is only present when the requested mode is DETAILED.
            It contains a list of edge structures.
      description: Summary information about the graph.
    GraphId:
      type: string
      pattern: ^g-[a-z0-9]{10}$
    GraphIdentifier:
      type: string
      pattern: ^g-[a-z0-9]{10}$
    GraphName:
      type: string
      pattern: ^(?!g-)[a-z][a-z0-9]*(-[a-z0-9]+)*$
      minLength: 1
      maxLength: 63
    GraphSnapshotSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The unique identifier of the graph snapshot.
        name:
          allOf:
          - $ref: '#/components/schemas/SnapshotName'
          description: 'The snapshot name. For example: `my-snapshot-1`.


            The name must contain from 1 to 63 letters, numbers, or hyphens, and its
            first character must be a letter. It cannot end with a hyphen or contain
            two consecutive hyphens. Only lowercase letters are allowed.'
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the graph snapshot.
        sourceGraphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The graph identifier for the graph for which a snapshot is
            to be created.
        snapshotCreateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the snapshot was created.
        status:
          allOf:
          - $ref: '#/components/schemas/SnapshotStatus'
          description: The status of the graph snapshot.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The ID of the KMS key used to encrypt and decrypt the snapshot.
      required:
      - id
      - name
      - arn
      description: Details about a graph snapshot.
    GraphSnapshotSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/GraphSnapshotSummary'
    GraphStatus:
      type: string
      enum:
      - CREATING
      - AVAILABLE
      - DELETING
      - RESETTING
      - UPDATING
      - SNAPSHOTTING
      - FAILED
      - IMPORTING
    GraphSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the graph.
        name:
          allOf:
          - $ref: '#/components/schemas/GraphName'
          description: The name of the graph.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN associated with the graph.
        status:
          allOf:
          - $ref: '#/components/schemas/GraphStatus'
          description: The status of the graph.
        provisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: The number of memory-optimized Neptune Capacity Units (m-NCUs)
            allocated to the graph.
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, the graph has a public endpoint, otherwise not.
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The graph endpoint.
        replicaCount:
          allOf:
          - $ref: '#/components/schemas/ReplicaCount'
          description: The number of replicas for the graph.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the KMS key used to encrypt and decrypt graph data.
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, deletion protection is enabled for the graph.
      required:
      - id
      - name
      - arn
      description: Summary details about a graph.
    GraphSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/GraphSummary'
    GraphSummaryMode:
      type: string
      enum:
      - BASIC
      - DETAILED
    ImportOptions:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/NeptuneImportOptions'
        description: |-
          Options for importing data from a Neptune database.
      description: |-
        Options for how to perform an import.
    ImportTaskDetails:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Status of the import task.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Time at which the import task started.
        timeElapsedSeconds:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: Seconds elapsed since the import task started.
        progressPercentage:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The percentage progress so far.
        errorCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of errors encountered so far.
        errorDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the errors that have been encountered.
        statementCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of statements in the import task.
        dictionaryEntryCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of dictionary entries in the import task.
      required:
      - status
      - startTime
      - timeElapsedSeconds
      - progressPercentage
      - errorCount
      - statementCount
      - dictionaryEntryCount
      description: Contains details about an import task.
    ImportTaskStatus:
      type: string
      enum:
      - INITIALIZING
      - EXPORTING
      - ANALYZING_DATA
      - IMPORTING
      - REPROVISIONING
      - ROLLING_BACK
      - SUCCEEDED
      - FAILED
      - CANCELLING
      - CANCELLED
      - DELETED
    ImportTaskSummary:
      type: object
      properties:
        graphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the Neptune Analytics graph.
        taskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The unique identifier of the import task.
        source:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A URL identifying to the location of the data to be imported.
            This can be an Amazon S3 path, or can point to a Neptune database endpoint
            or snapshot
        format:
          allOf:
          - $ref: '#/components/schemas/Format'
          description: Specifies the format of S3 data to be imported. Valid values
            are `CSV`, which identifies the [Gremlin CSV format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-gremlin.html)
            or `OPENCYPHER`, which identies the [openCypher load format](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load-tutorial-format-opencypher.html).
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the import task.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow access to the data
            that is to be imported.
        status:
          allOf:
          - $ref: '#/components/schemas/ImportTaskStatus'
          description: Status of the import task.
      required:
      - taskId
      - source
      - roleArn
      - status
      description: Details about an import task.
    ImportTaskSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ImportTaskSummary'
    InternalServerException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A message describing the problem.
      required:
      - message
      description: A failure occurred on the server.
    KmsKeyArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$
      minLength: 1
      maxLength: 1024
    ListExportTasksInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Pagination token used to paginate input.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of export tasks to return.
    ListExportTasksOutput:
      type: object
      properties:
        tasks:
          allOf:
          - $ref: '#/components/schemas/ExportTaskSummaryList'
          description: The requested list of export tasks.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Pagination token used to paginate output.
      required:
      - tasks
    ListGraphSnapshotsInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'Pagination token used to paginate output.


            When this value is provided as input, the service returns results from
            where the previous response left off. When this value is present in output,
            it indicates that there are more results to retrieve.'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The total number of records to return in the command''s output.


            If the total number of records available is more than the value specified,
            `nextToken` is provided in the command''s output. To resume pagination,
            provide the `nextToken` output value in the `nextToken` argument of a
            subsequent command. Do not use the `nextToken` response element directly
            outside of the Amazon CLI.'
    ListGraphSnapshotsOutput:
      type: object
      properties:
        graphSnapshots:
          allOf:
          - $ref: '#/components/schemas/GraphSnapshotSummaryList'
          description: The requested list of snapshots.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'Pagination token used to paginate output.


            When this value is provided as input, the service returns results from
            where the previous response left off. When this value is present in output,
            it indicates that there are more results to retrieve.'
      required:
      - graphSnapshots
    ListGraphsInput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'Pagination token used to paginate output.


            When this value is provided as input, the service returns results from
            where the previous response left off. When this value is present in output,
            it indicates that there are more results to retrieve.'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The total number of records to return in the command''s output.


            If the total number of records available is more than the value specified,
            `nextToken` is provided in the command''s output. To resume pagination,
            provide the `nextToken` output value in the `nextToken` argument of a
            subsequent command. Do not use the `nextToken` response element directly
            outside of the Amazon CLI.'
    ListGraphsOutput:
      type: object
      properties:
        graphs:
          allOf:
          - $ref: '#/components/schemas/GraphSummaryList'
          description: A list of the graphs.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'Pagination token used to paginate output.


            When this value is provided as input, the service returns results from
            where the previous response left off. When this value is present in output,
            it indicates that there are more results to retrieve.'
      required:
      - graphs
    ListImportTasksInput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'Pagination token used to paginate output.


            When this value is provided as input, the service returns results from
            where the previous response left off. When this value is present in output,
            it indicates that there are more results to retrieve.'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The total number of records to return in the command''s output.


            If the total number of records available is more than the value specified,
            `nextToken` is provided in the command''s output. To resume pagination,
            provide the `nextToken` output value in the `nextToken` argument of a
            subsequent command. Do not use the `nextToken` response element directly
            outside of the Amazon CLI.'
    ListImportTasksOutput:
      type: object
      properties:
        tasks:
          allOf:
          - $ref: '#/components/schemas/ImportTaskSummaryList'
          description: The requested list of import tasks.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'Pagination token used to paginate output.


            When this value is provided as input, the service returns results from
            where the previous response left off. When this value is present in output,
            it indicates that there are more results to retrieve.'
      required:
      - tasks
    ListPrivateGraphEndpointsInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'Pagination token used to paginate output.


            When this value is provided as input, the service returns results from
            where the previous response left off. When this value is present in output,
            it indicates that there are more results to retrieve.'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The total number of records to return in the command''s output.


            If the total number of records available is more than the value specified,
            `nextToken` is provided in the command''s output. To resume pagination,
            provide the `nextToken` output value in the `nextToken` argument of a
            subsequent command. Do not use the `nextToken` response element directly
            outside of the Amazon CLI.'
      required:
      - graphIdentifier
    ListPrivateGraphEndpointsOutput:
      type: object
      properties:
        privateGraphEndpoints:
          allOf:
          - $ref: '#/components/schemas/PrivateGraphEndpointSummaryList'
          description: A list of private endpoints for the specified Neptune Analytics
            graph.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'Pagination token used to paginate output.


            When this value is provided as input, the service returns results from
            where the previous response left off. When this value is present in output,
            it indicates that there are more results to retrieve.'
      required:
      - privateGraphEndpoints
    ListQueriesInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to be fetched by the API.
        state:
          allOf:
          - $ref: '#/components/schemas/QueryStateInput'
          description: Filtered list of queries based on state.
      required:
      - graphIdentifier
      - maxResults
    ListQueriesOutput:
      type: object
      properties:
        queries:
          allOf:
          - $ref: '#/components/schemas/QuerySummaryList'
          description: A list of current openCypher queries.
      required:
      - queries
    ListTagsForResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the resource.
      required:
      - resourceArn
    ListTagsForResourceOutput:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of metadata tags associated with the resource.
    LongValuedMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Long'
    LongValuedMapList:
      type: array
      items:
        $ref: '#/components/schemas/LongValuedMap'
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    MultiValueHandlingType:
      type: string
      enum:
      - TO_LIST
      - PICK_FIRST
    NeptuneImportOptions:
      type: object
      properties:
        s3ExportPath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The path to an S3 bucket from which to import data.
        s3ExportKmsKeyId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The KMS key to use to encrypt data in the S3 bucket where the
            graph data is exported
        preserveDefaultVertexLabels:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Neptune Analytics supports label-less vertices and no labels
            are assigned unless one is explicitly provided. Neptune assigns default
            labels when none is explicitly provided. When importing the data into
            Neptune Analytics, the default vertex labels can be omitted by setting
            _preserveDefaultVertexLabels_ to false. Note that if the vertex only has
            default labels, and has no other properties or edges, then the vertex
            will effectively not get imported into Neptune Analytics when preserveDefaultVertexLabels
            is set to false.
        preserveEdgeIds:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Neptune Analytics currently does not support user defined edge
            ids. The edge ids are not imported by default. They are imported if _preserveEdgeIds_
            is set to true, and ids are stored as properties on the relationships
            with the property name _neptuneEdgeId_.
      required:
      - s3ExportPath
      - s3ExportKmsKeyId
      description: Options for how to import Neptune data.
    NodeLabels:
      type: array
      items:
        type: string
    NodeProperties:
      type: array
      items:
        type: string
    NodeStructure:
      type: object
      properties:
        count:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of instances of this node.
        nodeProperties:
          allOf:
          - $ref: '#/components/schemas/NodeProperties'
          description: Properties associated with this node.
        distinctOutgoingEdgeLabels:
          allOf:
          - $ref: '#/components/schemas/OutgoingEdgeLabels'
          description: The outgoing edge labels associated with this node.
      description: Information about a node.
    NodeStructures:
      type: array
      items:
        $ref: '#/components/schemas/NodeStructure'
    OutgoingEdgeLabels:
      type: array
      items:
        type: string
    PaginationToken:
      type: string
      minLength: 1
      maxLength: 8192
    ParquetType:
      type: string
      enum:
      - COLUMNAR
    PlanCacheType:
      type: string
      enum:
      - ENABLED
      - DISABLED
      - AUTO
    PrivateGraphEndpointStatus:
      type: string
      enum:
      - CREATING
      - AVAILABLE
      - DELETING
      - FAILED
    PrivateGraphEndpointSummary:
      type: object
      properties:
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC in which the private graph endpoint is located.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIds'
          description: The subnet IDs associated with the private graph endpoint.
        status:
          allOf:
          - $ref: '#/components/schemas/PrivateGraphEndpointStatus'
          description: The status of the private graph endpoint.
        vpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: The ID of the VPC endpoint.
      required:
      - vpcId
      - subnetIds
      - status
      description: Details about a private graph endpoint.
    PrivateGraphEndpointSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/PrivateGraphEndpointSummary'
    ProvisionedMemory:
      type: integer
      minimum: 16
      maximum: 24576
    QueryLanguage:
      type: string
      enum:
      - OPEN_CYPHER
    QueryResponseBlob:
      type: string
      format: byte
    QueryState:
      type: string
      enum:
      - RUNNING
      - WAITING
      - CANCELLING
    QueryStateInput:
      type: string
      enum:
      - ALL
      - RUNNING
      - WAITING
      - CANCELLING
    QuerySummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A string representation of the id of the query.
        queryString:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The actual query text. The `queryString` may be truncated if
            the actual query string is too long.
        waited:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The amount of time, in milliseconds, the query has waited in
            the queue before being picked up by a worker thread.
        elapsed:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The running time of the query, in milliseconds.
        state:
          allOf:
          - $ref: '#/components/schemas/QueryState'
          description: State of the query.
      description: Details of the query listed.
    QuerySummaryList:
      type: array
      items:
        $ref: '#/components/schemas/QuerySummary'
    ReplicaCount:
      type: integer
      minimum: 0
      maximum: 2
    ResetGraphInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: ID of the graph to reset.
        skipSnapshot:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Determines whether a final graph snapshot is created before
            the graph data is deleted. If set to `true`, no graph snapshot is created.
            If set to `false`, a graph snapshot is created before the data is deleted.
      required:
      - graphIdentifier
      - skipSnapshot
    ResetGraphOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the graph.
        name:
          allOf:
          - $ref: '#/components/schemas/GraphName'
          description: The name of the graph.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN associated with the graph.
        status:
          allOf:
          - $ref: '#/components/schemas/GraphStatus'
          description: The status of the graph.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that the graph has this status.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the graph was created.
        provisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: The number of memory-optimized Neptune Capacity Units (m-NCUs)
            allocated to the graph.
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The graph endpoint.
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, the graph has a public endpoint, otherwise not.
        vectorSearchConfiguration:
          $ref: '#/components/schemas/VectorSearchConfiguration'
        replicaCount:
          allOf:
          - $ref: '#/components/schemas/ReplicaCount'
          description: The number of replicas for the graph.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The ID of the KMS key used to encrypt and decrypt graph data.
        sourceSnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the snapshot from which the graph was created, if
            any.
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, deletion protection is enabled for the graph.
        buildNumber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The build number of the graph.
      required:
      - id
      - name
      - arn
    ResourceNotFoundException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A message describing the problem.
      required:
      - message
      description: A specified resource could not be located.
    RestoreGraphFromSnapshotInput:
      type: object
      properties:
        snapshotIdentifier:
          allOf:
          - $ref: '#/components/schemas/SnapshotIdentifier'
          description: The ID of the snapshot in question.
        graphName:
          allOf:
          - $ref: '#/components/schemas/GraphName'
          description: 'A name for the new Neptune Analytics graph to be created from
            the snapshot.


            The name must contain from 1 to 63 letters, numbers, or hyphens, and its
            first character must be a letter. It cannot end with a hyphen or contain
            two consecutive hyphens. Only lowercase letters are allowed.'
        provisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: 'The provisioned memory-optimized Neptune Capacity Units (m-NCUs)
            to use for the graph.


            Min = 16'
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A value that indicates whether the graph has deletion protection
            enabled. The graph can't be deleted when deletion protection is enabled.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Adds metadata tags to the snapshot. These tags can also be
            used with cost allocation reporting, or used in a Condition statement
            in an IAM policy.
        replicaCount:
          allOf:
          - $ref: '#/components/schemas/ReplicaCount'
          description: 'The number of replicas in other AZs. Min =0, Max = 2, Default
            =1


            Additional charges equivalent to the m-NCUs selected for the graph apply
            for each replica.'
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether or not the graph can be reachable over the
            internet. All access to graphs is IAM authenticated. (`true` to enable,
            or `false` to disable).
      required:
      - snapshotIdentifier
      - graphName
    RestoreGraphFromSnapshotOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the graph.
        name:
          allOf:
          - $ref: '#/components/schemas/GraphName'
          description: The name of the graph.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN associated with the graph.
        status:
          allOf:
          - $ref: '#/components/schemas/GraphStatus'
          description: The status of the graph.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that the graph has this status.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the graph was created.
        provisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: The number of memory-optimized Neptune Capacity Units (m-NCUs)
            allocated to the graph.
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The graph endpoint.
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, the graph has a public endpoint, otherwise not.
        vectorSearchConfiguration:
          $ref: '#/components/schemas/VectorSearchConfiguration'
        replicaCount:
          allOf:
          - $ref: '#/components/schemas/ReplicaCount'
          description: The number of replicas for the graph.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The ID of the KMS key used to encrypt and decrypt graph data.
        sourceSnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the snapshot from which the graph was created, if
            any.
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, deletion protection is enabled for the graph.
        buildNumber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The build number of the graph.
      required:
      - id
      - name
      - arn
    RoleArn:
      type: string
      pattern: ^arn:aws[^:]*:iam::\d{12}:(role|role/service-role)(/[\w+=,.@-]+)+$
    SecurityGroupId:
      type: string
      pattern: ^sg-[a-z0-9]+$
    SecurityGroupIds:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupId'
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the resource that exceeded quota.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The type of the resource that exceeded quota. Ex: Graph, Snapshot'
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The service code that exceeded quota.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Service quota code of the resource for which quota was exceeded.
      required:
      - message
      description: A service quota was exceeded.
    SnapshotId:
      type: string
      pattern: ^gs-[a-z0-9]{10}$
    SnapshotIdentifier:
      type: string
      pattern: ^gs-[a-z0-9]{10}$
    SnapshotName:
      type: string
      pattern: ^(?!gs-)[a-z][a-z0-9]*(-[a-z0-9]+)*$
      minLength: 1
      maxLength: 63
    SnapshotStatus:
      type: string
      enum:
      - CREATING
      - AVAILABLE
      - DELETING
      - FAILED
    StartExportTaskInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The source graph identifier of the export task.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow data to be exported
            to the destination.
        format:
          allOf:
          - $ref: '#/components/schemas/ExportFormat'
          description: The format of the export task.
        destination:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon S3 URI where data will be exported to.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key identifier of the export task.
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the export task.
        exportFilter:
          allOf:
          - $ref: '#/components/schemas/ExportFilter'
          description: The export filter of the export task.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags to be applied to the export task.
      required:
      - graphIdentifier
      - roleArn
      - format
      - destination
      - kmsKeyIdentifier
    StartExportTaskOutput:
      type: object
      properties:
        graphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The source graph identifier of the export task.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow data to be exported
            to the destination.
        taskId:
          allOf:
          - $ref: '#/components/schemas/ExportTaskId'
          description: The unique identifier of the export task.
        status:
          allOf:
          - $ref: '#/components/schemas/ExportTaskStatus'
          description: The current status of the export task.
        format:
          allOf:
          - $ref: '#/components/schemas/ExportFormat'
          description: The format of the export task.
        destination:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon S3 URI of the export task where data will be exported
            to.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key identifier of the export task.
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the export task.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that the export task has this status value.
        exportFilter:
          allOf:
          - $ref: '#/components/schemas/ExportFilter'
          description: The export filter of the export task.
      required:
      - graphId
      - roleArn
      - taskId
      - status
      - format
      - destination
      - kmsKeyIdentifier
    StartImportTaskInput:
      type: object
      properties:
        importOptions:
          $ref: '#/components/schemas/ImportOptions'
        failOnError:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If set to true, the task halts when an import error is encountered.
            If set to false, the task skips the data that caused the error and continues
            if possible.
        source:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A URL identifying the location of the data to be imported.
            This can be an Amazon S3 path, or can point to a Neptune database endpoint
            or snapshot.
        format:
          allOf:
          - $ref: '#/components/schemas/Format'
          description: Specifies the format of Amazon S3 data to be imported. Valid
            values are CSV, which identifies the Gremlin CSV format or OPENCYPHER,
            which identies the openCypher load format.
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the import task.
        blankNodeHandling:
          allOf:
          - $ref: '#/components/schemas/BlankNodeHandling'
          description: The method to handle blank nodes in the dataset. Currently,
            only `convertToIri` is supported, meaning blank nodes are converted to
            unique IRIs at load time. Must be provided when format is `ntriples`.
            For more information, see [Handling RDF values](https://docs.aws.amazon.com/neptune-analytics/latest/userguide/using-rdf-data.html#rdf-handling).
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow access to the data
            that is to be imported.
      required:
      - source
      - graphIdentifier
      - roleArn
    StartImportTaskOutput:
      type: object
      properties:
        graphId:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the Neptune Analytics graph.
        taskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The unique identifier of the import task.
        source:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A URL identifying the location of the data to be imported.
            This can be an Amazon S3 path, or can point to a Neptune database endpoint
            or snapshot.
        format:
          allOf:
          - $ref: '#/components/schemas/Format'
          description: Specifies the format of Amazon S3 data to be imported. Valid
            values are CSV, which identifies the Gremlin CSV format or OPENCYPHER,
            which identies the openCypher load format.
        parquetType:
          allOf:
          - $ref: '#/components/schemas/ParquetType'
          description: The parquet type of the import task.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role that will allow access to the data
            that is to be imported.
        status:
          allOf:
          - $ref: '#/components/schemas/ImportTaskStatus'
          description: The status of the import task.
        importOptions:
          $ref: '#/components/schemas/ImportOptions'
      required:
      - taskId
      - source
      - roleArn
      - status
    SubnetId:
      type: string
      pattern: ^subnet-[a-z0-9]+$
    SubnetIds:
      type: array
      items:
        $ref: '#/components/schemas/SubnetId'
    TagKey:
      type: string
      pattern: ^(?!aws:)[a-zA-Z+-=._:/]+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: ARN of the resource for which tags need to be added.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: 'The tags to be assigned to the Neptune Analytics resource.


            The tags are metadata that are specified as a list of key-value pairs:


            **Key** (string) – A key is the required name of the tag. The string value
            can be from 1 to 128 Unicode characters in length. It can''t be prefixed
            with `aws:` and can only contain the set of Unicode characters specified
            by this Java regular expression: `"^([\p{L}\p{Z}\p{N}_.:/=+\-]*)$")`.


            **Value** (string) – A value is the optional value of the tag. The string
            value can be from 1 to 256 Unicode characters in length. It can''t be
            prefixed with `aws:` and can only contain the set of Unicode characters
            specified by this Java regular expression: `"^([\p{L}\p{Z}\p{N}_.:/=+\-]*)$")`.'
      required:
      - resourceArn
      - tags
    TagResourceOutput:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TaskId:
      type: string
      pattern: ^t-[a-z0-9]{10}$
    ThrottlingException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A message describing the problem.
      required:
      - message
      description: The exception was interrupted by throttling.
    UnprocessableException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        reason:
          allOf:
          - $ref: '#/components/schemas/UnprocessableExceptionReason'
          description: The reason for the unprocessable exception.
      required:
      - message
      - reason
      description: Request cannot be processed due to known reasons. Eg. partition
        full.
    UnprocessableExceptionReason:
      type: string
      enum:
      - QUERY_TIMEOUT
      - INTERNAL_LIMIT_EXCEEDED
      - MEMORY_LIMIT_EXCEEDED
      - STORAGE_LIMIT_EXCEEDED
      - PARTITION_FULL
    UntagResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: ARN of the resource whose tag needs to be removed.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: Tag keys for the tags to be removed.
      required:
      - resourceArn
      - tagKeys
    UntagResourceOutput:
      type: object
      properties: {}
    UpdateGraphInput:
      type: object
      properties:
        graphIdentifier:
          allOf:
          - $ref: '#/components/schemas/GraphIdentifier'
          description: The unique identifier of the Neptune Analytics graph.
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether or not the graph can be reachable over the
            internet. All access to graphs is IAM authenticated. (`true` to enable,
            or `false` to disable.
        provisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: 'The provisioned memory-optimized Neptune Capacity Units (m-NCUs)
            to use for the graph.


            Min = 16'
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A value that indicates whether the graph has deletion protection
            enabled. The graph can't be deleted when deletion protection is enabled.
      required:
      - graphIdentifier
    UpdateGraphOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/GraphId'
          description: The unique identifier of the graph.
        name:
          allOf:
          - $ref: '#/components/schemas/GraphName'
          description: The name of the graph.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN associated with the graph.
        status:
          allOf:
          - $ref: '#/components/schemas/GraphStatus'
          description: The status of the graph.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that the graph has this status.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the graph was created.
        provisionedMemory:
          allOf:
          - $ref: '#/components/schemas/ProvisionedMemory'
          description: The number of memory-optimized Neptune Capacity Units (m-NCUs)
            allocated to the graph.
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The graph endpoint.
        publicConnectivity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, the graph has a public endpoint, otherwise not.
        vectorSearchConfiguration:
          $ref: '#/components/schemas/VectorSearchConfiguration'
        replicaCount:
          allOf:
          - $ref: '#/components/schemas/ReplicaCount'
          description: The number of replicas for the graph.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The ID of the KMS key used to encrypt and decrypt graph data.
        sourceSnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the snapshot from which the graph was created, if
            any.
        deletionProtection:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If `true`, deletion protection is enabled for the graph.
        buildNumber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The build number of the graph.
      required:
      - id
      - name
      - arn
    ValidationException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A message describing the problem.
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: The reason that the resource could not be validated.
      required:
      - message
      description: A resource could not be validated.
    ValidationExceptionReason:
      type: string
      enum:
      - CONSTRAINT_VIOLATION
      - ILLEGAL_ARGUMENT
      - MALFORMED_QUERY
      - QUERY_CANCELLED
      - QUERY_TOO_LARGE
      - UNSUPPORTED_OPERATION
      - BAD_REQUEST
    VectorSearchConfiguration:
      type: object
      properties:
        dimension:
          allOf:
          - $ref: '#/components/schemas/VectorSearchDimension'
          description: The number of dimensions.
      required:
      - dimension
      description: Specifies the number of dimensions for vector embeddings loaded
        into the graph. Max = 65535
    VectorSearchDimension:
      type: integer
      minimum: 1
      maximum: 65536
    VpcEndpointId:
      type: string
      pattern: ^vpce-[0-9a-f]{17}$
    VpcId:
      type: string
      pattern: ^vpc-[a-z0-9]+$
