openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: customer_profiles
  x-aws-serviceName: customerprofiles
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-08-15'
  title: Amazon Connect Customer Profiles
  description: |-
    Amazon Connect Customer Profiles

      * [Customer Profiles actions](https://docs.aws.amazon.com/connect/latest/APIReference/API_Operations_Amazon_Connect_Customer_Profiles.html)

      * [Customer Profiles data types](https://docs.aws.amazon.com/connect/latest/APIReference/API_Types_Amazon_Connect_Customer_Profiles.html)

    Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center.

    For more information about the Amazon Connect Customer Profiles feature, see [Use Customer Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/customer-profiles.html) in the _Amazon Connect Administrator's Guide_.
servers:
- description: The Amazon Connect Customer Profiles regional endpoint
  url: https://profile.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /domains/{DomainName}/profiles/keys:
    post:
      operationId: AddProfileKey
      description: |-
        Associates a new key value with a specific profile, such as a Contact Record ContactId.

        A profile object can have a single unique key and any number of additional keys that can be used to identify the profile that it belongs to.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProfileId:
                  $ref: '#/components/schemas/uuid'
                KeyName:
                  $ref: '#/components/schemas/name'
                Values:
                  $ref: '#/components/schemas/requestValueList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}/batch-get-for-profiles:
    post:
      operationId: BatchGetCalculatedAttributeForProfile
      description: |-
        Fetch the possible attribute values given the attribute name.
      parameters:
      - name: CalculatedAttributeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/typeName'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProfileIds:
                  $ref: '#/components/schemas/BatchGetCalculatedAttributeForProfileIdList'
                ConditionOverrides:
                  $ref: '#/components/schemas/ConditionOverrides'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/batch-get-profiles:
    post:
      operationId: BatchGetProfile
      description: |-
        Get a batch of profiles.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProfileIds:
                  $ref: '#/components/schemas/BatchGetProfileIdList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}:
    post:
      operationId: CreateCalculatedAttributeDefinition
      description: |-
        Creates a new calculated attribute definition. After creation, new object data ingested into Customer Profiles will be included in the calculated attribute, which can be retrieved for a profile using the [GetCalculatedAttributeForProfile](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetCalculatedAttributeForProfile.html) API. Defining a calculated attribute makes it available for all profiles within a domain. Each calculated attribute can only reference one `ObjectType` and at most, two fields from that `ObjectType`.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: CalculatedAttributeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/typeName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DisplayName:
                  $ref: '#/components/schemas/displayName'
                Description:
                  $ref: '#/components/schemas/sensitiveText'
                AttributeDetails:
                  $ref: '#/components/schemas/AttributeDetails'
                Conditions:
                  $ref: '#/components/schemas/Conditions'
                Filter:
                  $ref: '#/components/schemas/Filter'
                Statistic:
                  $ref: '#/components/schemas/Statistic'
                Tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    delete:
      operationId: DeleteCalculatedAttributeDefinition
      description: |-
        Deletes an existing calculated attribute definition. Note that deleting a default calculated attribute is possible, however once deleted, you will be unable to undo that action and will need to recreate it on your own using the CreateCalculatedAttributeDefinition API if you want it back.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: CalculatedAttributeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/typeName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetCalculatedAttributeDefinition
      description: |-
        Provides more information on a calculated attribute definition for Customer Profiles.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: CalculatedAttributeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/typeName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: UpdateCalculatedAttributeDefinition
      description: |-
        Updates an existing calculated attribute definition. When updating the Conditions, note that increasing the date range of a calculated attribute will not trigger inclusion of historical data greater than the current date range.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: CalculatedAttributeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/typeName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DisplayName:
                  $ref: '#/components/schemas/displayName'
                Description:
                  $ref: '#/components/schemas/sensitiveText'
                Conditions:
                  $ref: '#/components/schemas/Conditions'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}:
    post:
      operationId: CreateDomain
      description: |-
        Creates a domain, which is a container for all customer data, such as customer profile attributes, object types, profile keys, and encryption keys. You can create multiple domains, and each domain can have multiple third-party integrations.

        Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain.

        Use this API or [UpdateDomain](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html) to enable [identity resolution](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html): set `Matching` to true.

        To prevent cross-service impersonation when you call this API, see [Cross-service confused deputy prevention](https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html) for sample policies that you should apply.

        It is not possible to associate a Customer Profiles domain with an Amazon Connect Instance directly from the API. If you would like to create a domain and associate a Customer Profiles domain, use the Amazon Connect admin website. For more information, see [Enable Customer Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/enable-customer-profiles.html#enable-customer-profiles-step1).

        Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DefaultExpirationDays:
                  $ref: '#/components/schemas/expirationDaysInteger'
                DefaultEncryptionKey:
                  $ref: '#/components/schemas/encryptionKey'
                DeadLetterQueueUrl:
                  $ref: '#/components/schemas/sqsQueueUrl'
                Matching:
                  $ref: '#/components/schemas/MatchingRequest'
                RuleBasedMatching:
                  $ref: '#/components/schemas/RuleBasedMatchingRequest'
                Tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    delete:
      operationId: DeleteDomain
      description: |-
        Deletes a specific domain and all of its customer data, such as customer profile attributes and their related objects.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetDomain
      description: |-
        Returns information about a specific domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: UpdateDomain
      description: |-
        Updates the properties of a domain, including creating or selecting a dead letter queue or an encryption key.

        After a domain is created, the name can’t be changed.

        Use this API or [CreateDomain](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html) to enable [identity resolution](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html): set `Matching` to true.

        To prevent cross-service impersonation when you call this API, see [Cross-service confused deputy prevention](https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html) for sample policies that you should apply.

        To add or remove tags on an existing Domain, see [TagResource](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html)/[UntagResource](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html).
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DefaultExpirationDays:
                  $ref: '#/components/schemas/expirationDaysInteger'
                DefaultEncryptionKey:
                  $ref: '#/components/schemas/encryptionKey'
                DeadLetterQueueUrl:
                  $ref: '#/components/schemas/sqsQueueUrl'
                Matching:
                  $ref: '#/components/schemas/MatchingRequest'
                RuleBasedMatching:
                  $ref: '#/components/schemas/RuleBasedMatchingRequest'
                Tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/event-streams/{EventStreamName}:
    post:
      operationId: CreateEventStream
      description: |-
        Creates an event stream, which is a subscription to real-time events, such as when profiles are created and updated through Amazon Connect Customer Profiles.

        Each event stream can be associated with only one Kinesis Data Stream destination in the same region and Amazon Web Services account as the customer profiles domain
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: EventStreamName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Uri:
                  $ref: '#/components/schemas/string1To255'
                Tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    delete:
      operationId: DeleteEventStream
      description: |-
        Disables and deletes the specified event stream.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: EventStreamName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetEventStream
      description: |-
        Returns information about the specified event stream in a specific domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: EventStreamName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/event-triggers/{EventTriggerName}:
    post:
      operationId: CreateEventTrigger
      description: |-
        Creates an event trigger, which specifies the rules when to perform action based on customer's ingested data.

        Each event stream can be associated with only one integration in the same region and AWS account as the event stream.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: EventTriggerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ObjectTypeName:
                  $ref: '#/components/schemas/typeName'
                Description:
                  $ref: '#/components/schemas/sensitiveText'
                EventTriggerConditions:
                  $ref: '#/components/schemas/EventTriggerConditions'
                SegmentFilter:
                  $ref: '#/components/schemas/name'
                EventTriggerLimits:
                  $ref: '#/components/schemas/EventTriggerLimits'
                Tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    delete:
      operationId: DeleteEventTrigger
      description: |-
        Disable and deletes the Event Trigger.

        You cannot delete an Event Trigger with an active Integration associated.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: EventTriggerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetEventTrigger
      description: |-
        Get a specific Event Trigger from the domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: EventTriggerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: UpdateEventTrigger
      description: |-
        Update the properties of an Event Trigger.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: EventTriggerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ObjectTypeName:
                  $ref: '#/components/schemas/typeName'
                Description:
                  $ref: '#/components/schemas/sensitiveText'
                EventTriggerConditions:
                  $ref: '#/components/schemas/EventTriggerConditions'
                SegmentFilter:
                  $ref: '#/components/schemas/name'
                EventTriggerLimits:
                  $ref: '#/components/schemas/EventTriggerLimits'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/workflows/integrations:
    post:
      operationId: CreateIntegrationWorkflow
      description: |-
        Creates an integration workflow. An integration workflow is an async process which ingests historic data and sets up an integration for ongoing updates. The supported Amazon AppFlow sources are Salesforce, ServiceNow, and Marketo.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                WorkflowType:
                  $ref: '#/components/schemas/WorkflowType'
                IntegrationConfig:
                  $ref: '#/components/schemas/IntegrationConfig'
                ObjectTypeName:
                  $ref: '#/components/schemas/typeName'
                RoleArn:
                  $ref: '#/components/schemas/RoleArn'
                Tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profiles:
    post:
      operationId: CreateProfile
      description: |-
        Creates a standard profile.

        A standard profile represents the following attributes for a customer profile in a domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AccountNumber:
                  $ref: '#/components/schemas/sensitiveString1To255'
                AdditionalInformation:
                  $ref: '#/components/schemas/sensitiveString1To1000'
                PartyType:
                  $ref: '#/components/schemas/PartyType'
                BusinessName:
                  $ref: '#/components/schemas/sensitiveString1To255'
                FirstName:
                  $ref: '#/components/schemas/sensitiveString1To255'
                MiddleName:
                  $ref: '#/components/schemas/sensitiveString1To255'
                LastName:
                  $ref: '#/components/schemas/sensitiveString1To255'
                BirthDate:
                  $ref: '#/components/schemas/sensitiveString1To255'
                Gender:
                  $ref: '#/components/schemas/Gender'
                PhoneNumber:
                  $ref: '#/components/schemas/sensitiveString1To255'
                MobilePhoneNumber:
                  $ref: '#/components/schemas/sensitiveString1To255'
                HomePhoneNumber:
                  $ref: '#/components/schemas/sensitiveString1To255'
                BusinessPhoneNumber:
                  $ref: '#/components/schemas/sensitiveString1To255'
                EmailAddress:
                  $ref: '#/components/schemas/sensitiveString1To255'
                PersonalEmailAddress:
                  $ref: '#/components/schemas/sensitiveString1To255'
                BusinessEmailAddress:
                  $ref: '#/components/schemas/sensitiveString1To255'
                Address:
                  $ref: '#/components/schemas/Address'
                ShippingAddress:
                  $ref: '#/components/schemas/Address'
                MailingAddress:
                  $ref: '#/components/schemas/Address'
                BillingAddress:
                  $ref: '#/components/schemas/Address'
                Attributes:
                  $ref: '#/components/schemas/Attributes'
                PartyTypeString:
                  $ref: '#/components/schemas/sensitiveString1To255'
                GenderString:
                  $ref: '#/components/schemas/sensitiveString1To255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: UpdateProfile
      description: |-
        Updates the properties of a profile. The ProfileId is required for updating a customer profile.

        When calling the UpdateProfile API, specifying an empty string value means that any existing value will be removed. Not specifying a string value means that any value already there will be kept.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProfileId:
                  $ref: '#/components/schemas/uuid'
                AdditionalInformation:
                  $ref: '#/components/schemas/sensitiveString0To1000'
                AccountNumber:
                  $ref: '#/components/schemas/sensitiveString0To255'
                PartyType:
                  $ref: '#/components/schemas/PartyType'
                BusinessName:
                  $ref: '#/components/schemas/sensitiveString0To255'
                FirstName:
                  $ref: '#/components/schemas/sensitiveString0To255'
                MiddleName:
                  $ref: '#/components/schemas/sensitiveString0To255'
                LastName:
                  $ref: '#/components/schemas/sensitiveString0To255'
                BirthDate:
                  $ref: '#/components/schemas/sensitiveString0To255'
                Gender:
                  $ref: '#/components/schemas/Gender'
                PhoneNumber:
                  $ref: '#/components/schemas/sensitiveString0To255'
                MobilePhoneNumber:
                  $ref: '#/components/schemas/sensitiveString0To255'
                HomePhoneNumber:
                  $ref: '#/components/schemas/sensitiveString0To255'
                BusinessPhoneNumber:
                  $ref: '#/components/schemas/sensitiveString0To255'
                EmailAddress:
                  $ref: '#/components/schemas/sensitiveString0To255'
                PersonalEmailAddress:
                  $ref: '#/components/schemas/sensitiveString0To255'
                BusinessEmailAddress:
                  $ref: '#/components/schemas/sensitiveString0To255'
                Address:
                  $ref: '#/components/schemas/UpdateAddress'
                ShippingAddress:
                  $ref: '#/components/schemas/UpdateAddress'
                MailingAddress:
                  $ref: '#/components/schemas/UpdateAddress'
                BillingAddress:
                  $ref: '#/components/schemas/UpdateAddress'
                Attributes:
                  $ref: '#/components/schemas/UpdateAttributes'
                PartyTypeString:
                  $ref: '#/components/schemas/sensitiveString0To255'
                GenderString:
                  $ref: '#/components/schemas/sensitiveString0To255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/segment-definitions/{SegmentDefinitionName}:
    post:
      operationId: CreateSegmentDefinition
      description: |-
        Creates a segment definition associated to the given domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: SegmentDefinitionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DisplayName:
                  $ref: '#/components/schemas/string1To255'
                Description:
                  $ref: '#/components/schemas/sensitiveText'
                SegmentGroups:
                  $ref: '#/components/schemas/SegmentGroup'
                Tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    delete:
      operationId: DeleteSegmentDefinition
      description: |-
        Deletes a segment definition from the domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: SegmentDefinitionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetSegmentDefinition
      description: |-
        Gets a segment definition from the domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: SegmentDefinitionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/segment-estimates:
    post:
      operationId: CreateSegmentEstimate
      description: |-
        Creates a segment estimate query.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                SegmentQuery:
                  $ref: '#/components/schemas/SegmentGroupStructure'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/segments/{SegmentDefinitionName}/snapshots:
    post:
      operationId: CreateSegmentSnapshot
      description: |-
        Triggers a job to export a segment to a specified destination.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: SegmentDefinitionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DataFormat:
                  $ref: '#/components/schemas/DataFormat'
                EncryptionKey:
                  $ref: '#/components/schemas/encryptionKey'
                RoleArn:
                  $ref: '#/components/schemas/RoleArn'
                DestinationUri:
                  $ref: '#/components/schemas/string1To255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/integrations/delete:
    post:
      operationId: DeleteIntegration
      description: |-
        Removes an integration from a specific domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Uri:
                  $ref: '#/components/schemas/string1To255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profiles/delete:
    post:
      operationId: DeleteProfile
      description: |-
        Deletes the standard customer profile and all data pertaining to the profile.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProfileId:
                  $ref: '#/components/schemas/uuid'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profiles/keys/delete:
    post:
      operationId: DeleteProfileKey
      description: |-
        Removes a searchable key from a customer profile.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProfileId:
                  $ref: '#/components/schemas/uuid'
                KeyName:
                  $ref: '#/components/schemas/name'
                Values:
                  $ref: '#/components/schemas/requestValueList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profiles/objects/delete:
    post:
      operationId: DeleteProfileObject
      description: |-
        Removes an object associated with a profile of a given ProfileObjectType.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProfileId:
                  $ref: '#/components/schemas/uuid'
                ProfileObjectUniqueKey:
                  $ref: '#/components/schemas/string1To255'
                ObjectTypeName:
                  $ref: '#/components/schemas/typeName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/object-types/{ObjectTypeName}:
    delete:
      operationId: DeleteProfileObjectType
      description: |-
        Removes a ProfileObjectType from a specific domain as well as removes all the ProfileObjects of that type. It also disables integrations from this specific ProfileObjectType. In addition, it scrubs all of the fields of the standard profile that were populated from this ProfileObjectType.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: ObjectTypeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/typeName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetProfileObjectType
      description: |-
        Returns the object types for a specific domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: ObjectTypeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/typeName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: PutProfileObjectType
      description: |-
        Defines a ProfileObjectType.

        To add or remove tags on an existing ObjectType, see [ TagResource](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html)/[UntagResource](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html).
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: ObjectTypeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/typeName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/sensitiveText'
                TemplateId:
                  $ref: '#/components/schemas/name'
                ExpirationDays:
                  $ref: '#/components/schemas/expirationDaysInteger'
                EncryptionKey:
                  $ref: '#/components/schemas/encryptionKey'
                AllowProfileCreation:
                  $ref: '#/components/schemas/boolean'
                SourceLastUpdatedTimestampFormat:
                  $ref: '#/components/schemas/string1To255'
                MaxProfileObjectCount:
                  $ref: '#/components/schemas/minSize1'
                Fields:
                  $ref: '#/components/schemas/FieldMap'
                Keys:
                  $ref: '#/components/schemas/KeyMap'
                Tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/workflows/{WorkflowId}:
    delete:
      operationId: DeleteWorkflow
      description: |-
        Deletes the specified workflow and all its corresponding resources. This is an async process.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: WorkflowId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string1To255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetWorkflow
      description: |-
        Get details of specified workflow.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: WorkflowId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/uuid'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/detect/object-types:
    post:
      operationId: DetectProfileObjectType
      description: |-
        The process of detecting profile object type mapping by using given objects.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Objects:
                  $ref: '#/components/schemas/Objects'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/identity-resolution-jobs/auto-merging-preview:
    post:
      operationId: GetAutoMergingPreview
      description: |-
        Tests the auto-merging settings of your Identity Resolution Job without merging your data. It randomly selects a sample of matching groups from the existing matching results, and applies the automerging settings that you provided. You can then view the number of profiles in the sample, the number of matches, and the number of profiles identified to be merged. This enables you to evaluate the accuracy of the attributes in your matching list.

        You can't view which profiles are matched and would be merged.

        We strongly recommend you use this API to do a dry run of the automerging process before running the Identity Resolution Job. Include **at least** two matching attributes. If your matching list includes too few attributes (such as only `FirstName` or only `LastName`), there may be a large number of matches. This increases the chances of erroneous merges.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Consolidation:
                  $ref: '#/components/schemas/Consolidation'
                ConflictResolution:
                  $ref: '#/components/schemas/ConflictResolution'
                MinAllowedConfidenceScoreForMerging:
                  $ref: '#/components/schemas/Double0To1'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profile/{ProfileId}/calculated-attributes/{CalculatedAttributeName}:
    get:
      operationId: GetCalculatedAttributeForProfile
      description: |-
        Retrieve a calculated attribute for a customer profile.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: ProfileId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/uuid'
      - name: CalculatedAttributeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/typeName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/identity-resolution-jobs/{JobId}:
    get:
      operationId: GetIdentityResolutionJob
      description: |-
        Returns information about an Identity Resolution Job in a specific domain.

        Identity Resolution Jobs are set up using the Amazon Connect admin console. For more information, see [Use Identity Resolution to consolidate similar profiles](https://docs.aws.amazon.com/connect/latest/adminguide/use-identity-resolution.html).
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: JobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/uuid'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/integrations:
    post:
      operationId: GetIntegration
      description: |-
        Returns an integration for a domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Uri:
                  $ref: '#/components/schemas/string1To255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListIntegrations
      description: |-
        Lists all of the integrations in your domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      - name: include-hidden
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/optionalBoolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: PutIntegration
      description: |-
        Adds an integration between the service and a third-party service, which includes Amazon AppFlow and Amazon Connect.

        An integration can belong to only one domain.

        To add or remove tags on an existing Integration, see [ TagResource ](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html)/[ UntagResource](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html).
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Uri:
                  $ref: '#/components/schemas/string1To255'
                ObjectTypeName:
                  $ref: '#/components/schemas/typeName'
                Tags:
                  $ref: '#/components/schemas/TagMap'
                FlowDefinition:
                  $ref: '#/components/schemas/FlowDefinition'
                ObjectTypeNames:
                  $ref: '#/components/schemas/ObjectTypeNames'
                RoleArn:
                  $ref: '#/components/schemas/RoleArn'
                EventTriggerNames:
                  $ref: '#/components/schemas/EventTriggerNames'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/matches:
    get:
      operationId: GetMatches
      description: |-
        Before calling this API, use [CreateDomain](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html) or [UpdateDomain](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html) to enable identity resolution: set `Matching` to true.

        GetMatches returns potentially matching profiles, based on the results of the latest run of a machine learning process.

        The process of matching duplicate profiles. If `Matching` = `true`, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains.

        After the Identity Resolution Job completes, use the [GetMatches](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html) API to return and review the results. Or, if you have configured `ExportingConfig` in the `MatchingRequest`, you can download the results from S3.

        Amazon Connect uses the following profile attributes to identify matches:

          * PhoneNumber

          * HomePhoneNumber

          * BusinessPhoneNumber

          * MobilePhoneNumber

          * EmailAddress

          * PersonalEmailAddress

          * BusinessEmailAddress

          * FullName

        For example, two or more profiles—with spelling mistakes such as **John Doe** and **Jhn Doe** , or different casing email addresses such as **JOHN_DOE@ANYCOMPANY.COM** and **johndoe@anycompany.com** , or different phone number formats such as **555-010-0000** and **+1-555-010-0000** —can be detected as belonging to the same customer **John Doe** and merged into a unified profile.
      parameters:
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    post:
      operationId: GetSimilarProfiles
      description: |-
        Returns a set of profiles that belong to the same matching group using the `matchId` or `profileId`. You can also specify the type of matching that you want for finding similar profiles using either `RULE_BASED_MATCHING` or `ML_BASED_MATCHING`.
      parameters:
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                MatchType:
                  $ref: '#/components/schemas/MatchType'
                SearchKey:
                  $ref: '#/components/schemas/string1To255'
                SearchValue:
                  $ref: '#/components/schemas/string1To255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /templates/{TemplateId}:
    get:
      operationId: GetProfileObjectTypeTemplate
      description: |-
        Returns the template information for a specific object type.

        A template is a predefined ProfileObjectType, such as “Salesforce-Account” or “Salesforce-Contact.” When a user sends a ProfileObject, using the PutProfileObject API, with an ObjectTypeName that matches one of the TemplateIds, it uses the mappings from the template.
      parameters:
      - name: TemplateId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/segment-estimates/{EstimateId}:
    get:
      operationId: GetSegmentEstimate
      description: |-
        Gets the result of a segment estimate query.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: EstimateId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string1To255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/segments/{SegmentDefinitionName}/membership:
    post:
      operationId: GetSegmentMembership
      description: |-
        Determines if the given profiles are within a segment.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: SegmentDefinitionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProfileIds:
                  $ref: '#/components/schemas/ProfileIds'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/segments/{SegmentDefinitionName}/snapshots/{SnapshotId}:
    get:
      operationId: GetSegmentSnapshot
      description: |-
        Retrieve the latest status of a segment snapshot.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: SegmentDefinitionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: SnapshotId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/uuid'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/workflows/{WorkflowId}/steps:
    get:
      operationId: GetWorkflowSteps
      description: |-
        Get granular list of steps in workflow.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: WorkflowId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/uuid'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /integrations:
    post:
      operationId: ListAccountIntegrations
      description: |-
        Lists all of the integrations associated to a specific URI in the AWS account.
      parameters:
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      - name: include-hidden
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/optionalBoolean'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Uri:
                  $ref: '#/components/schemas/string1To255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/calculated-attributes:
    get:
      operationId: ListCalculatedAttributeDefinitions
      description: |-
        Lists calculated attribute definitions for Customer Profiles
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profile/{ProfileId}/calculated-attributes:
    get:
      operationId: ListCalculatedAttributesForProfile
      description: |-
        Retrieve a list of calculated attributes for a customer profile.
      parameters:
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: ProfileId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/uuid'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains:
    get:
      operationId: ListDomains
      description: |-
        Returns a list of all the domains for an AWS account that have been created.
      parameters:
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/event-streams:
    get:
      operationId: ListEventStreams
      description: |-
        Returns a list of all the event streams in a specific domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/event-triggers:
    get:
      operationId: ListEventTriggers
      description: |-
        List all Event Triggers under a domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/identity-resolution-jobs:
    get:
      operationId: ListIdentityResolutionJobs
      description: |-
        Lists all of the Identity Resolution Jobs in your domain. The response sorts the list by `JobStartTime`.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/object-types/{ObjectTypeName}/attributes:
    get:
      operationId: ListObjectTypeAttributes
      description: |-
        Fetch the possible attribute values given the attribute name.
      parameters:
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: ObjectTypeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/typeName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profile-attributes/{AttributeName}/values:
    get:
      operationId: ListProfileAttributeValues
      description: |-
        Fetch the possible attribute values given the attribute name.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: AttributeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string1To255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /templates:
    get:
      operationId: ListProfileObjectTypeTemplates
      description: |-
        Lists all of the template information for object types.
      parameters:
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/object-types:
    get:
      operationId: ListProfileObjectTypes
      description: |-
        Lists all of the templates available within the service.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profiles/objects:
    post:
      operationId: ListProfileObjects
      description: |-
        Returns a list of objects associated with a profile of a given ProfileObjectType.
      parameters:
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ObjectTypeName:
                  $ref: '#/components/schemas/typeName'
                ProfileId:
                  $ref: '#/components/schemas/uuid'
                ObjectFilter:
                  $ref: '#/components/schemas/ObjectFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: PutProfileObject
      description: |-
        Adds additional objects to customer profiles of a given ObjectType.

        When adding a specific profile object, like a Contact Record, an inferred profile can get created if it is not mapped to an existing profile. The resulting profile will only have a phone number populated in the standard ProfileObject. Any additional Contact Records with the same phone number will be mapped to the same inferred profile.

        When a ProfileObject is created and if a ProfileObjectType already exists for the ProfileObject, it will provide data to a standard profile depending on the ProfileObjectType definition.

        PutProfileObject needs an ObjectType, which can be created using PutProfileObjectType.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ObjectTypeName:
                  $ref: '#/components/schemas/typeName'
                Object:
                  $ref: '#/components/schemas/stringifiedJson'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profiles/ruleBasedMatches:
    get:
      operationId: ListRuleBasedMatches
      description: |-
        Returns a set of `MatchIds` that belong to the given domain.
      parameters:
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/segment-definitions:
    get:
      operationId: ListSegmentDefinitions
      description: |-
        Lists all segment definitions under a domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxSize500'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Displays the tags associated with an Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TagArn'
      responses:
        '200': {}
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
    post:
      operationId: TagResource
      description: |-
        Assigns one or more tags (key-value pairs) to the specified Amazon Connect Customer Profiles resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.

        Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.

        You can use the TagResource action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.

        You can associate as many as 50 tags with a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TagArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
    delete:
      operationId: UntagResource
      description: |-
        Removes one or more tags from the specified Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TagArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /domains/{DomainName}/workflows:
    post:
      operationId: ListWorkflows
      description: |-
        Query to list all workflows.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                WorkflowType:
                  $ref: '#/components/schemas/WorkflowType'
                Status:
                  $ref: '#/components/schemas/Status'
                QueryStartDate:
                  $ref: '#/components/schemas/timestamp'
                QueryEndDate:
                  $ref: '#/components/schemas/timestamp'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profiles/objects/merge:
    post:
      operationId: MergeProfiles
      description: "Runs an AWS Lambda job that does the following:\n\n  1. All the\
        \ profileKeys in the `ProfileToBeMerged` will be moved to the main profile.\n\
        \n  2. All the objects in the `ProfileToBeMerged` will be moved to the main\
        \ profile.\n\n  3. All the `ProfileToBeMerged` will be deleted at the end.\n\
        \n  4. All the profileKeys in the `ProfileIdsToBeMerged` will be moved to\
        \ the main profile.\n\n  5. Standard fields are merged as follows:\n\n   \
        \  1. Fields are always \"union\"-ed if there are no conflicts in standard\
        \ fields or attributeKeys.\n\n     2. When there are conflicting fields:\n\
        \n        1. If no `SourceProfileIds` entry is specified, the main Profile\
        \ value is always taken. \n\n        2. If a `SourceProfileIds` entry is specified,\
        \ the specified profileId is always taken, even if it is a NULL value.\n\n\
        You can use MergeProfiles together with [GetMatches](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html),\
        \ which returns potentially matching profiles, or use it with the results\
        \ of another matching system. After profiles have been merged, they cannot\
        \ be separated (unmerged)."
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                MainProfileId:
                  $ref: '#/components/schemas/uuid'
                ProfileIdsToBeMerged:
                  $ref: '#/components/schemas/ProfileIdToBeMergedList'
                FieldSourceProfileIds:
                  $ref: '#/components/schemas/FieldSourceProfileIds'
      responses:
        '200': {}
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /domains/{DomainName}/profiles/search:
    post:
      operationId: SearchProfiles
      description: |-
        Searches for profiles within a specific domain using one or more predefined search keys (e.g., _fullName, _phone, _email, _account, etc.) and/or custom-defined search keys. A search key is a data type pair that consists of a `KeyName` and `Values` list.

        This operation supports searching for profiles with a minimum of 1 key-value(s) pair and up to 5 key-value(s) pairs using either `AND` or `OR` logic.
      parameters:
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/token'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/maxSize100'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                KeyName:
                  $ref: '#/components/schemas/name'
                Values:
                  $ref: '#/components/schemas/requestValueList'
                AdditionalSearchKeys:
                  $ref: '#/components/schemas/additionalSearchKeysList'
                LogicalOperator:
                  $ref: '#/components/schemas/logicalOperator'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input you provided is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The requested resource does not exist, or access was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            You exceeded the maximum number of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/message'
      description: You do not have sufficient access to perform this action.
    AddProfileKeyRequest:
      type: object
      properties:
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
        KeyName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: 'A searchable identifier of a customer profile. The predefined
            keys you can use include: _account, _profileId, _assetId, _caseId, _orderId,
            _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId,
            _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId,
            _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId,
            _shopifyCustomerId, _shopifyOrderId.'
        Values:
          allOf:
          - $ref: '#/components/schemas/requestValueList'
          description: A list of key values.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
      required:
      - ProfileId
      - KeyName
      - Values
      - DomainName
    AddProfileKeyResponse:
      type: object
      properties:
        KeyName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: A searchable identifier of a customer profile.
        Values:
          allOf:
          - $ref: '#/components/schemas/requestValueList'
          description: A list of key values.
    AdditionalSearchKey:
      type: object
      properties:
        KeyName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: A searchable identifier of a customer profile.
        Values:
          allOf:
          - $ref: '#/components/schemas/requestValueList'
          description: A list of key values.
      required:
      - KeyName
      - Values
      description: A data type pair that consists of a `KeyName` and `Values` list
        that is used in conjunction with the [KeyName](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html#customerprofiles-SearchProfiles-request-KeyName)
        and [Values](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html#customerprofiles-SearchProfiles-request-Values)
        parameters to search for profiles using the [SearchProfiles](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html)
        API.
    Address:
      type: object
      properties:
        Address1:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The first line of a customer address.
        Address2:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The second line of a customer address.
        Address3:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The third line of a customer address.
        Address4:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The fourth line of a customer address.
        City:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The city in which a customer lives.
        County:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The county in which a customer lives.
        State:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The state in which a customer lives.
        Province:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The province in which a customer lives.
        Country:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The country in which a customer lives.
        PostalCode:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The postal code of a customer address.
      description: A generic address associated with the customer that is not mailing,
        shipping, or billing.
    AddressDimension:
      type: object
      properties:
        City:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: The city belonging to the address.
        Country:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: The country belonging to the address.
        County:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: The county belonging to the address.
        PostalCode:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: The postal code belonging to the address.
        Province:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: The province belonging to the address.
        State:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: The state belonging to the address.
      description: Object that segments on Customer Profile's address object.
    AddressList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    AppflowIntegration:
      type: object
      properties:
        FlowDefinition:
          $ref: '#/components/schemas/FlowDefinition'
        Batches:
          allOf:
          - $ref: '#/components/schemas/Batches'
          description: Batches in workflow of type `APPFLOW_INTEGRATION`.
      required:
      - FlowDefinition
      description: Details for workflow of type `APPFLOW_INTEGRATION`.
    AppflowIntegrationWorkflowAttributes:
      type: object
      properties:
        SourceConnectorType:
          allOf:
          - $ref: '#/components/schemas/SourceConnectorType'
          description: Specifies the source connector type, such as Salesforce, ServiceNow,
            and Marketo. Indicates source of ingestion.
        ConnectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: The name of the AppFlow connector profile used for ingestion.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The Amazon Resource Name (ARN) of the IAM role. Customer Profiles
            assumes this role to create resources on your behalf as part of workflow
            execution.
      required:
      - SourceConnectorType
      - ConnectorProfileName
      description: Structure holding all `APPFLOW_INTEGRATION` specific workflow attributes.
    AppflowIntegrationWorkflowMetrics:
      type: object
      properties:
        RecordsProcessed:
          allOf:
          - $ref: '#/components/schemas/long'
          description: Number of records processed in `APPFLOW_INTEGRATION` workflow.
        StepsCompleted:
          allOf:
          - $ref: '#/components/schemas/long'
          description: Total steps completed in `APPFLOW_INTEGRATION` workflow.
        TotalSteps:
          allOf:
          - $ref: '#/components/schemas/long'
          description: Total steps in `APPFLOW_INTEGRATION` workflow.
      required:
      - RecordsProcessed
      - StepsCompleted
      - TotalSteps
      description: Workflow specific execution metrics for `APPFLOW_INTEGRATION` workflow.
    AppflowIntegrationWorkflowStep:
      type: object
      properties:
        FlowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: Name of the flow created during execution of workflow step.
            `APPFLOW_INTEGRATION` workflow type creates an appflow flow during workflow
            step execution on the customers behalf.
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Workflow step status for `APPFLOW_INTEGRATION` workflow.
        ExecutionMessage:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Message indicating execution of workflow step for `APPFLOW_INTEGRATION`
            workflow.
        RecordsProcessed:
          allOf:
          - $ref: '#/components/schemas/long'
          description: Total number of records processed during execution of workflow
            step for `APPFLOW_INTEGRATION` workflow.
        BatchRecordsStartTime:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Start datetime of records pulled in batch during execution
            of workflow step for `APPFLOW_INTEGRATION` workflow.
        BatchRecordsEndTime:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: End datetime of records pulled in batch during execution of
            workflow step for `APPFLOW_INTEGRATION` workflow.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: Creation timestamp of workflow step for `APPFLOW_INTEGRATION`
            workflow.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: Last updated timestamp for workflow step for `APPFLOW_INTEGRATION`
            workflow.
      required:
      - FlowName
      - Status
      - ExecutionMessage
      - RecordsProcessed
      - BatchRecordsStartTime
      - BatchRecordsEndTime
      - CreatedAt
      - LastUpdatedAt
      description: Workflow step details for `APPFLOW_INTEGRATION` workflow.
    AttributeDetails:
      type: object
      properties:
        Attributes:
          allOf:
          - $ref: '#/components/schemas/AttributeList'
          description: A list of attribute items specified in the mathematical expression.
        Expression:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Mathematical expression that is performed on attribute items
            provided in the attribute list. Each element in the expression should
            follow the structure of \"{ObjectTypeName.AttributeName}\".
      required:
      - Attributes
      - Expression
      description: Mathematical expression and a list of attribute items specified
        in that expression.
    AttributeDimension:
      type: object
      properties:
        DimensionType:
          allOf:
          - $ref: '#/components/schemas/AttributeDimensionType'
          description: The action to segment with.
        Values:
          allOf:
          - $ref: '#/components/schemas/Values'
          description: The values to apply the DimensionType on.
      required:
      - DimensionType
      - Values
      description: Object that segments on various Customer Profile's fields.
    AttributeDimensionType:
      type: string
      enum:
      - INCLUSIVE
      - EXCLUSIVE
      - CONTAINS
      - BEGINS_WITH
      - ENDS_WITH
      - BEFORE
      - AFTER
      - BETWEEN
      - NOT_BETWEEN
      - 'ON'
      - GREATER_THAN
      - LESS_THAN
      - GREATER_THAN_OR_EQUAL
      - LESS_THAN_OR_EQUAL
      - EQUAL
    AttributeItem:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/attributeName'
          description: The name of an attribute defined in a profile object type.
      required:
      - Name
      description: The details of a single attribute item specified in the mathematical
        expression.
    AttributeList:
      type: array
      items:
        $ref: '#/components/schemas/AttributeItem'
    AttributeMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FilterAttributeDimension'
    AttributeMatchingModel:
      type: string
      enum:
      - ONE_TO_ONE
      - MANY_TO_MANY
    AttributeSourceIdMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/uuid'
    AttributeTypesSelector:
      type: object
      properties:
        AttributeMatchingModel:
          allOf:
          - $ref: '#/components/schemas/AttributeMatchingModel'
          description: Configures the `AttributeMatchingModel`, you can either choose
            `ONE_TO_ONE` or `MANY_TO_MANY`.
        Address:
          allOf:
          - $ref: '#/components/schemas/AddressList'
          description: 'The `Address` type. You can choose from `Address`, `BusinessAddress`,
            `MaillingAddress`, and `ShippingAddress`.


            You only can use the Address type in the `MatchingRule`. For example,
            if you want to match profile based on `BusinessAddress.City` or `MaillingAddress.City`,
            you need to choose the `BusinessAddress` and the `MaillingAddress` to
            represent the Address type and specify the `Address.City` on the matching
            rule.'
        PhoneNumber:
          allOf:
          - $ref: '#/components/schemas/PhoneNumberList'
          description: 'The `PhoneNumber` type. You can choose from `PhoneNumber`,
            `HomePhoneNumber`, and `MobilePhoneNumber`.


            You only can use the `PhoneNumber` type in the `MatchingRule`. For example,
            if you want to match a profile based on `Phone` or `HomePhone`, you need
            to choose the `Phone` and the `HomePhone` to represent the `PhoneNumber`
            type and only specify the `PhoneNumber` on the matching rule.'
        EmailAddress:
          allOf:
          - $ref: '#/components/schemas/EmailList'
          description: 'The `Email` type. You can choose from `EmailAddress`, `BusinessEmailAddress`
            and `PersonalEmailAddress`.


            You only can use the `EmailAddress` type in the `MatchingRule`. For example,
            if you want to match profile based on `PersonalEmailAddress` or `BusinessEmailAddress`,
            you need to choose the `PersonalEmailAddress` and the `BusinessEmailAddress`
            to represent the `EmailAddress` type and only specify the `EmailAddress`
            on the matching rule.'
      required:
      - AttributeMatchingModel
      description: "Configuration information about the `AttributeTypesSelector `where\
        \ the rule-based identity resolution uses to match profiles. You can choose\
        \ how profiles are compared across attribute types and which attribute to\
        \ use for matching from each type. There are three attribute types you can\
        \ configure:\n\n  * Email type\n\n    * You can choose from `Email`, `BusinessEmail`,\
        \ and `PersonalEmail`\n\n  * Phone number type\n\n    * You can choose from\
        \ `Phone`, `HomePhone`, and `MobilePhone`\n\n  * Address type\n\n    * You\
        \ can choose from `Address`, `BusinessAddress`, `MaillingAddress`, and `ShippingAddress`\n\
        \nYou can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `AttributeMatchingModel`.\
        \ When choosing `MANY_TO_MANY`, the system can match attribute across the\
        \ sub-types of an attribute type. For example, if the value of the `Email`\
        \ field of Profile A and the value of `BusinessEmail` field of Profile B matches,\
        \ the two profiles are matched on the Email type. When choosing `ONE_TO_ONE`\
        \ the system can only match if the sub-types are exact matches. For example,\
        \ only when the value of the `Email` field of Profile A and the value of the\
        \ `Email` field of Profile B matches, the two profiles are matched on the\
        \ Email type."
    AttributeValueItem:
      type: object
      properties:
        Value:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: An individual value belonging to the given attribute.
      description: List containing the values for the given attribute.
    AttributeValueItemList:
      type: array
      items:
        $ref: '#/components/schemas/AttributeValueItem'
    Attributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/string1To255'
    AutoMerging:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/optionalBoolean'
          description: The flag that enables the auto-merging of duplicate profiles.
        Consolidation:
          allOf:
          - $ref: '#/components/schemas/Consolidation'
          description: A list of matching attributes that represent matching criteria.
            If two profiles meet at least one of the requirements in the matching
            attributes list, they will be merged.
        ConflictResolution:
          allOf:
          - $ref: '#/components/schemas/ConflictResolution'
          description: How the auto-merging process should resolve conflicts between
            different profiles. For example, if Profile A and Profile B have the same
            `FirstName` and `LastName` (and that is the matching criteria), which
            `EmailAddress` should be used?
        MinAllowedConfidenceScoreForMerging:
          allOf:
          - $ref: '#/components/schemas/Double0To1'
          description: A number between 0 and 1 that represents the minimum confidence
            score required for profiles within a matching group to be merged during
            the auto-merge process. A higher score means higher similarity required
            to merge profiles.
      required:
      - Enabled
      description: Configuration settings for how to perform the auto-merging of profiles.
    BadRequestException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/message'
      description: The input you provided is invalid.
    Batch:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: Start time of batch to split ingestion.
        EndTime:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: End time of batch to split ingestion.
      required:
      - StartTime
      - EndTime
      description: Batch defines the boundaries for ingestion for each step in `APPFLOW_INTEGRATION`
        workflow. `APPFLOW_INTEGRATION` workflow splits ingestion based on these boundaries.
    BatchGetCalculatedAttributeForProfileError:
      type: object
      properties:
        Code:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Status code for why a specific profile and calculated attribute
            failed.
        Message:
          allOf:
          - $ref: '#/components/schemas/string1To1000'
          description: Message describing why a specific profile and calculated attribute
            failed.
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The profile id that failed.
      required:
      - Code
      - Message
      - ProfileId
      description: Error object describing why a specific profile and calculated attribute
        failed.
    BatchGetCalculatedAttributeForProfileErrorList:
      type: array
      items:
        $ref: '#/components/schemas/BatchGetCalculatedAttributeForProfileError'
    BatchGetCalculatedAttributeForProfileIdList:
      type: array
      items:
        $ref: '#/components/schemas/uuid'
    BatchGetCalculatedAttributeForProfileRequest:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        ProfileIds:
          allOf:
          - $ref: '#/components/schemas/BatchGetCalculatedAttributeForProfileIdList'
          description: List of unique identifiers for customer profiles to retrieve.
        ConditionOverrides:
          allOf:
          - $ref: '#/components/schemas/ConditionOverrides'
          description: Overrides the condition block within the original calculated
            attribute definition.
      required:
      - CalculatedAttributeName
      - DomainName
      - ProfileIds
    BatchGetCalculatedAttributeForProfileResponse:
      type: object
      properties:
        Errors:
          allOf:
          - $ref: '#/components/schemas/BatchGetCalculatedAttributeForProfileErrorList'
          description: List of errors for calculated attribute values that could not
            be retrieved.
        CalculatedAttributeValues:
          allOf:
          - $ref: '#/components/schemas/CalculatedAttributeValueList'
          description: List of calculated attribute values retrieved.
        ConditionOverrides:
          allOf:
          - $ref: '#/components/schemas/ConditionOverrides'
          description: Overrides the condition block within the original calculated
            attribute definition.
    BatchGetProfileError:
      type: object
      properties:
        Code:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Status code for why a specific profile failed.
        Message:
          allOf:
          - $ref: '#/components/schemas/string1To1000'
          description: Message describing why a specific profile failed.
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The profile id that failed.
      required:
      - Code
      - Message
      - ProfileId
      description: Error object describing why a specific profile failed.
    BatchGetProfileErrorList:
      type: array
      items:
        $ref: '#/components/schemas/BatchGetProfileError'
    BatchGetProfileIdList:
      type: array
      items:
        $ref: '#/components/schemas/uuid'
    BatchGetProfileRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        ProfileIds:
          allOf:
          - $ref: '#/components/schemas/BatchGetProfileIdList'
          description: List of unique identifiers for customer profiles to retrieve.
      required:
      - DomainName
      - ProfileIds
    BatchGetProfileResponse:
      type: object
      properties:
        Errors:
          allOf:
          - $ref: '#/components/schemas/BatchGetProfileErrorList'
          description: For information about the errors that are common to all actions,
            see [Common Errors](https://docs.aws.amazon.com/connect/latest/APIReference/CommonErrors.html).
        Profiles:
          allOf:
          - $ref: '#/components/schemas/ProfileList'
          description: Array of Profile Objects.
    Batches:
      type: array
      items:
        $ref: '#/components/schemas/Batch'
    BucketName:
      type: string
      pattern: ^\S+$
      minLength: 3
      maxLength: 63
    BucketPrefix:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 512
    CalculatedAttributeDefinitionsList:
      type: array
      items:
        $ref: '#/components/schemas/ListCalculatedAttributeDefinitionItem'
      x-sensitive: true
    CalculatedAttributeDimension:
      type: object
      properties:
        DimensionType:
          allOf:
          - $ref: '#/components/schemas/AttributeDimensionType'
          description: The action to segment with.
        Values:
          allOf:
          - $ref: '#/components/schemas/Values'
          description: The values to apply the DimensionType with.
        ConditionOverrides:
          allOf:
          - $ref: '#/components/schemas/ConditionOverrides'
          description: Applies the given condition over the initial Calculated Attribute's
            definition.
      required:
      - DimensionType
      - Values
      description: Object that segments on Customer Profile's Calculated Attributes.
    CalculatedAttributeValue:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The display name of the calculated attribute.
        IsDataPartial:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Indicates whether the calculated attribute's value is based
            on partial data. If the data is partial, it is set to true.
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The profile id belonging to this calculated attribute value.
        Value:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The value of the calculated attribute.
      description: The object containing the values of a single calculated attribute
        value.
    CalculatedAttributeValueList:
      type: array
      items:
        $ref: '#/components/schemas/CalculatedAttributeValue'
    CalculatedAttributesForProfileList:
      type: array
      items:
        $ref: '#/components/schemas/ListCalculatedAttributeForProfileItem'
    CalculatedCustomAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CalculatedAttributeDimension'
    ComparisonOperator:
      type: string
      enum:
      - INCLUSIVE
      - EXCLUSIVE
      - CONTAINS
      - BEGINS_WITH
      - ENDS_WITH
      - GREATER_THAN
      - LESS_THAN
      - GREATER_THAN_OR_EQUAL
      - LESS_THAN_OR_EQUAL
      - EQUAL
      - BEFORE
      - AFTER
      - 'ON'
      - BETWEEN
      - NOT_BETWEEN
    ConditionOverrides:
      type: object
      properties:
        Range:
          allOf:
          - $ref: '#/components/schemas/RangeOverride'
          description: The relative time period over which data is included in the
            aggregation for this override.
      description: An object to override the original condition block of a calculated
        attribute.
    Conditions:
      type: object
      properties:
        Range:
          allOf:
          - $ref: '#/components/schemas/Range'
          description: The relative time period over which data is included in the
            aggregation.
        ObjectCount:
          allOf:
          - $ref: '#/components/schemas/ObjectCount'
          description: The number of profile objects used for the calculated attribute.
        Threshold:
          allOf:
          - $ref: '#/components/schemas/Threshold'
          description: The threshold for the calculated attribute.
      description: The conditions including range, object count, and threshold for
        the calculated attribute.
    ConflictResolution:
      type: object
      properties:
        ConflictResolvingModel:
          allOf:
          - $ref: '#/components/schemas/ConflictResolvingModel'
          description: "How the auto-merging process should resolve conflicts between\
            \ different profiles.\n\n  * `RECENCY`: Uses the data that was most recently\
            \ updated.\n\n  * `SOURCE`: Uses the data from a specific source. For\
            \ example, if a company has been aquired or two departments have merged,\
            \ data from the specified source is used. If two duplicate profiles are\
            \ from the same source, then `RECENCY` is used again."
        SourceName:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The `ObjectType` name that is used to resolve profile merging
            conflicts when choosing `SOURCE` as the `ConflictResolvingModel`.
      required:
      - ConflictResolvingModel
      description: How the auto-merging process should resolve conflicts between different
        profiles.
    ConflictResolvingModel:
      type: string
      enum:
      - RECENCY
      - SOURCE
    ConnectorOperator:
      type: object
      properties:
        Marketo:
          allOf:
          - $ref: '#/components/schemas/MarketoConnectorOperator'
          description: The operation to be performed on the provided Marketo source
            fields.
        S3:
          allOf:
          - $ref: '#/components/schemas/S3ConnectorOperator'
          description: The operation to be performed on the provided Amazon S3 source
            fields.
        Salesforce:
          allOf:
          - $ref: '#/components/schemas/SalesforceConnectorOperator'
          description: The operation to be performed on the provided Salesforce source
            fields.
        ServiceNow:
          allOf:
          - $ref: '#/components/schemas/ServiceNowConnectorOperator'
          description: The operation to be performed on the provided ServiceNow source
            fields.
        Zendesk:
          allOf:
          - $ref: '#/components/schemas/ZendeskConnectorOperator'
          description: The operation to be performed on the provided Zendesk source
            fields.
      description: The operation to be performed on the provided source fields.
    ConnectorProfileName:
      type: string
      pattern: ^[\w/!@#+=.-]+$
      minLength: 0
      maxLength: 256
    Consolidation:
      type: object
      properties:
        MatchingAttributesList:
          allOf:
          - $ref: '#/components/schemas/MatchingAttributesList'
          description: A list of matching criteria.
      required:
      - MatchingAttributesList
      description: The matching criteria to be used during the auto-merging process.
    CreateCalculatedAttributeDefinitionRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The display name of the calculated attribute.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the calculated attribute.
        AttributeDetails:
          allOf:
          - $ref: '#/components/schemas/AttributeDetails'
          description: Mathematical expression and a list of attribute items specified
            in that expression.
        Conditions:
          allOf:
          - $ref: '#/components/schemas/Conditions'
          description: The conditions including range, object count, and threshold
            for the calculated attribute.
        Filter:
          allOf:
          - $ref: '#/components/schemas/Filter'
          description: Defines how to filter incoming objects to include part of the
            Calculated Attribute.
        Statistic:
          allOf:
          - $ref: '#/components/schemas/Statistic'
          description: The aggregation operation to perform for the calculated attribute.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - CalculatedAttributeName
      - AttributeDetails
      - Statistic
    CreateCalculatedAttributeDefinitionResponse:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The display name of the calculated attribute.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the calculated attribute.
        AttributeDetails:
          allOf:
          - $ref: '#/components/schemas/AttributeDetails'
          description: Mathematical expression and a list of attribute items specified
            in that expression.
        Conditions:
          allOf:
          - $ref: '#/components/schemas/Conditions'
          description: The conditions including range, object count, and threshold
            for the calculated attribute.
        Filter:
          allOf:
          - $ref: '#/components/schemas/Filter'
          description: The filter that was used as part of the request.
        Statistic:
          allOf:
          - $ref: '#/components/schemas/Statistic'
          description: The aggregation operation to perform for the calculated attribute.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the calculated attribute definition was
            created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the calculated attribute definition was
            most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
    CreateDomainRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        DefaultExpirationDays:
          allOf:
          - $ref: '#/components/schemas/expirationDaysInteger'
          description: The default number of days until the data within the domain
            expires.
        DefaultEncryptionKey:
          allOf:
          - $ref: '#/components/schemas/encryptionKey'
          description: The default encryption key, which is an AWS managed key, is
            used when no specific type of encryption key is specified. It is used
            to encrypt all data before it is placed in permanent or semi-permanent
            storage.
        DeadLetterQueueUrl:
          allOf:
          - $ref: '#/components/schemas/sqsQueueUrl'
          description: The URL of the SQS dead letter queue, which is used for reporting
            errors associated with ingesting data from third party applications. You
            must set up a policy on the DeadLetterQueue for the SendMessage operation
            to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.
        Matching:
          allOf:
          - $ref: '#/components/schemas/MatchingRequest'
          description: 'The process of matching duplicate profiles. If `Matching`
            = `true`, Amazon Connect Customer Profiles starts a weekly batch process
            called Identity Resolution Job. If you do not specify a date and time
            for Identity Resolution Job to run, by default it runs every Saturday
            at 12AM UTC to detect duplicate profiles in your domains.


            After the Identity Resolution Job completes, use the [GetMatches](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html)
            API to return and review the results. Or, if you have configured `ExportingConfig`
            in the `MatchingRequest`, you can download the results from S3.'
        RuleBasedMatching:
          allOf:
          - $ref: '#/components/schemas/RuleBasedMatchingRequest'
          description: The process of matching duplicate profiles using the Rule-Based
            matching. If `RuleBasedMatching` = true, Amazon Connect Customer Profiles
            will start to match and merge your profiles according to your configuration
            in the `RuleBasedMatchingRequest`. You can use the `ListRuleBasedMatches`
            and `GetSimilarProfiles` API to return and review the results. Also, if
            you have configured `ExportingConfig` in the `RuleBasedMatchingRequest`,
            you can download the results from S3.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - DefaultExpirationDays
    CreateDomainResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        DefaultExpirationDays:
          allOf:
          - $ref: '#/components/schemas/expirationDaysInteger'
          description: The default number of days until the data within the domain
            expires.
        DefaultEncryptionKey:
          allOf:
          - $ref: '#/components/schemas/encryptionKey'
          description: The default encryption key, which is an AWS managed key, is
            used when no specific type of encryption key is specified. It is used
            to encrypt all data before it is placed in permanent or semi-permanent
            storage.
        DeadLetterQueueUrl:
          allOf:
          - $ref: '#/components/schemas/sqsQueueUrl'
          description: The URL of the SQS dead letter queue, which is used for reporting
            errors associated with ingesting data from third party applications.
        Matching:
          allOf:
          - $ref: '#/components/schemas/MatchingResponse'
          description: 'The process of matching duplicate profiles. If `Matching`
            = `true`, Amazon Connect Customer Profiles starts a weekly batch process
            called Identity Resolution Job. If you do not specify a date and time
            for Identity Resolution Job to run, by default it runs every Saturday
            at 12AM UTC to detect duplicate profiles in your domains.


            After the Identity Resolution Job completes, use the [GetMatches](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html)
            API to return and review the results. Or, if you have configured `ExportingConfig`
            in the `MatchingRequest`, you can download the results from S3.'
        RuleBasedMatching:
          allOf:
          - $ref: '#/components/schemas/RuleBasedMatchingResponse'
          description: The process of matching duplicate profiles using the Rule-Based
            matching. If `RuleBasedMatching` = true, Amazon Connect Customer Profiles
            will start to match and merge your profiles according to your configuration
            in the `RuleBasedMatchingRequest`. You can use the `ListRuleBasedMatches`
            and `GetSimilarProfiles` API to return and review the results. Also, if
            you have configured `ExportingConfig` in the `RuleBasedMatchingRequest`,
            you can download the results from S3.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - DefaultExpirationDays
      - CreatedAt
      - LastUpdatedAt
    CreateEventStreamRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        Uri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The StreamARN of the destination to deliver profile events
            to. For example, arn:aws:kinesis:region:account-id:stream/stream-name
        EventStreamName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The name of the event stream.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - Uri
      - EventStreamName
    CreateEventStreamResponse:
      type: object
      properties:
        EventStreamArn:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: A unique identifier for the event stream.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - EventStreamArn
    CreateEventTriggerRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EventTriggerName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the event trigger.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the object type.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the event trigger.
        EventTriggerConditions:
          allOf:
          - $ref: '#/components/schemas/EventTriggerConditions'
          description: A list of conditions that determine when an event should trigger
            the destination.
        SegmentFilter:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The destination is triggered only for profiles that meet the
            criteria of a segment definition.
        EventTriggerLimits:
          allOf:
          - $ref: '#/components/schemas/EventTriggerLimits'
          description: Defines limits controlling whether an event triggers the destination,
            based on ingestion latency and the number of invocations per profile over
            specific time periods.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: An array of key-value pairs to apply to this resource.
      required:
      - DomainName
      - EventTriggerName
      - ObjectTypeName
      - EventTriggerConditions
    CreateEventTriggerResponse:
      type: object
      properties:
        EventTriggerName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the event trigger.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the object type.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the event trigger.
        EventTriggerConditions:
          allOf:
          - $ref: '#/components/schemas/EventTriggerConditions'
          description: A list of conditions that determine when an event should trigger
            the destination.
        SegmentFilter:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The destination is triggered only for profiles that meet the
            criteria of a segment definition.
        EventTriggerLimits:
          allOf:
          - $ref: '#/components/schemas/EventTriggerLimits'
          description: Defines limits controlling whether an event triggers the destination,
            based on ingestion latency and the number of invocations per profile over
            specific time periods.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the event trigger was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the event trigger was most recently updated.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: An array of key-value pairs to apply to this resource.
    CreateIntegrationWorkflowRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        WorkflowType:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
        IntegrationConfig:
          allOf:
          - $ref: '#/components/schemas/IntegrationConfig'
          description: Configuration data for integration workflow.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Customer Profiles
            assumes this role to create resources on your behalf as part of workflow
            execution.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - WorkflowType
      - IntegrationConfig
      - ObjectTypeName
      - RoleArn
    CreateIntegrationWorkflowResponse:
      type: object
      properties:
        WorkflowId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: Unique identifier for the workflow.
        Message:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: A message indicating create request was received.
      required:
      - WorkflowId
      - Message
    CreateProfileRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        AccountNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: An account number that you have given to the customer.
        AdditionalInformation:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To1000'
          description: Any additional information relevant to the customer’s profile.
        PartyType:
          allOf:
          - $ref: '#/components/schemas/PartyType'
          description: The type of profile used to describe the customer.
        BusinessName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The name of the customer’s business.
        FirstName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s first name.
        MiddleName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s middle name.
        LastName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s last name.
        BirthDate:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s birth date.
        Gender:
          allOf:
          - $ref: '#/components/schemas/Gender'
          description: The gender with which the customer identifies.
        PhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s phone number, which has not been specified as
            a mobile, home, or business number.
        MobilePhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s mobile phone number.
        HomePhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s home phone number.
        BusinessPhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s business phone number.
        EmailAddress:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s email address, which has not been specified
            as a personal or business address.
        PersonalEmailAddress:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s personal email address.
        BusinessEmailAddress:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s business email address.
        Address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: A generic address associated with the customer that is not
            mailing, shipping, or billing.
        ShippingAddress:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The customer’s shipping address.
        MailingAddress:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The customer’s mailing address.
        BillingAddress:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The customer’s billing address.
        Attributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: A key value pair of attributes of a customer profile.
        PartyTypeString:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: An alternative to `PartyType` which accepts any string as input.
        GenderString:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: An alternative to `Gender` which accepts any string as input.
      required:
      - DomainName
    CreateProfileResponse:
      type: object
      properties:
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
      required:
      - ProfileId
    CreateSegmentDefinitionRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the segment definition.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The display name of the segment definition.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the segment definition.
        SegmentGroups:
          allOf:
          - $ref: '#/components/schemas/SegmentGroup'
          description: Specifies the base segments and dimensions for a segment definition
            along with their respective relationship.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - SegmentDefinitionName
      - DisplayName
      - SegmentGroups
    CreateSegmentDefinitionResponse:
      type: object
      properties:
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The name of the segment definition.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The display name of the segment definition.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the segment definition.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the segment definition was created.
        SegmentDefinitionArn:
          allOf:
          - $ref: '#/components/schemas/SegmentDefinitionArn'
          description: The arn of the segment definition.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - SegmentDefinitionName
    CreateSegmentEstimateRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        SegmentQuery:
          allOf:
          - $ref: '#/components/schemas/SegmentGroupStructure'
          description: The segment query for calculating a segment estimate.
      required:
      - DomainName
      - SegmentQuery
    CreateSegmentEstimateResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EstimateId:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: A unique identifier for the resource. The value can be passed
            to `GetSegmentEstimate` to retrieve the result of segment estimate status.
        StatusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The status code for the response.
    CreateSegmentSnapshotRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The name of the segment definition used in this snapshot request.
        DataFormat:
          allOf:
          - $ref: '#/components/schemas/DataFormat'
          description: The format in which the segment will be exported.
        EncryptionKey:
          allOf:
          - $ref: '#/components/schemas/encryptionKey'
          description: The Amazon Resource Name (ARN) of the KMS key used to encrypt
            the exported segment.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role that allows
            Customer Profiles service principal to assume the role for conducting
            KMS and S3 operations.
        DestinationUri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The destination to which the segment will be exported. This
            field must be provided if the request is not submitted from the Amazon
            Connect Admin Website.
      required:
      - DomainName
      - SegmentDefinitionName
      - DataFormat
    CreateSegmentSnapshotResponse:
      type: object
      properties:
        SnapshotId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the segment snapshot.
      required:
      - SnapshotId
    CustomAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/AttributeDimension'
    DataFormat:
      type: string
      enum:
      - CSV
      - JSONL
      - ORC
    DataPullMode:
      type: string
      enum:
      - Incremental
      - Complete
    Date:
      type: string
      format: date-time
    DateDimension:
      type: object
      properties:
        DimensionType:
          allOf:
          - $ref: '#/components/schemas/DateDimensionType'
          description: The action to segment with.
        Values:
          allOf:
          - $ref: '#/components/schemas/DateValues'
          description: The values to apply the DimensionType on.
      required:
      - DimensionType
      - Values
      description: Object that segments on various Customer Profile's date fields.
    DateDimensionType:
      type: string
      enum:
      - BEFORE
      - AFTER
      - BETWEEN
      - NOT_BETWEEN
      - 'ON'
    DateValues:
      type: array
      items:
        type: string
    DatetimeTypeFieldName:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    DeleteCalculatedAttributeDefinitionRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
      required:
      - DomainName
      - CalculatedAttributeName
    DeleteCalculatedAttributeDefinitionResponse:
      type: object
      properties: {}
    DeleteDomainRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
      required:
      - DomainName
    DeleteDomainResponse:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/message'
          description: A message that indicates the delete request is done.
      required:
      - Message
    DeleteEventStreamRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EventStreamName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The name of the event stream
      required:
      - DomainName
      - EventStreamName
    DeleteEventStreamResponse:
      type: object
      properties: {}
    DeleteEventTriggerRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EventTriggerName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the event trigger.
      required:
      - DomainName
      - EventTriggerName
    DeleteEventTriggerResponse:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/message'
          description: A message that indicates the delete request is done.
      required:
      - Message
    DeleteIntegrationRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        Uri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The URI of the S3 bucket or any other type of data source.
      required:
      - DomainName
      - Uri
    DeleteIntegrationResponse:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/message'
          description: A message that indicates the delete request is done.
      required:
      - Message
    DeleteProfileKeyRequest:
      type: object
      properties:
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
        KeyName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: A searchable identifier of a customer profile.
        Values:
          allOf:
          - $ref: '#/components/schemas/requestValueList'
          description: A list of key values.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
      required:
      - ProfileId
      - KeyName
      - Values
      - DomainName
    DeleteProfileKeyResponse:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/message'
          description: A message that indicates the delete request is done.
    DeleteProfileObjectRequest:
      type: object
      properties:
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
        ProfileObjectUniqueKey:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The unique identifier of the profile object generated by the
            service.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
      required:
      - ProfileId
      - ProfileObjectUniqueKey
      - ObjectTypeName
      - DomainName
    DeleteProfileObjectResponse:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/message'
          description: A message that indicates the delete request is done.
    DeleteProfileObjectTypeRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
      required:
      - DomainName
      - ObjectTypeName
    DeleteProfileObjectTypeResponse:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/message'
          description: A message that indicates the delete request is done.
      required:
      - Message
    DeleteProfileRequest:
      type: object
      properties:
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
      required:
      - ProfileId
      - DomainName
    DeleteProfileResponse:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/message'
          description: A message that indicates the delete request is done.
    DeleteSegmentDefinitionRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the segment definition.
      required:
      - DomainName
      - SegmentDefinitionName
    DeleteSegmentDefinitionResponse:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/string1To1000'
          description: A message that indicates the delete request is done.
    DeleteWorkflowRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        WorkflowId:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Unique identifier for the workflow.
      required:
      - DomainName
      - WorkflowId
    DeleteWorkflowResponse:
      type: object
      properties: {}
    DestinationField:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    DestinationSummary:
      type: object
      properties:
        Uri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The StreamARN of the destination to deliver profile events
            to. For example, arn:aws:kinesis:region:account-id:stream/stream-name.
        Status:
          allOf:
          - $ref: '#/components/schemas/EventStreamDestinationStatus'
          description: The status of enabling the Kinesis stream as a destination
            for export.
        UnhealthySince:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp when the status last changed to `UNHEALHY`.
      required:
      - Uri
      - Status
      description: Summary information about the Kinesis data stream
    DetectProfileObjectTypeRequest:
      type: object
      properties:
        Objects:
          allOf:
          - $ref: '#/components/schemas/Objects'
          description: A string that is serialized from a JSON object.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
      required:
      - Objects
      - DomainName
    DetectProfileObjectTypeResponse:
      type: object
      properties:
        DetectedProfileObjectTypes:
          allOf:
          - $ref: '#/components/schemas/DetectedProfileObjectTypes'
          description: Detected `ProfileObjectType` mappings from given objects. A
            maximum of one mapping is supported.
    DetectedProfileObjectType:
      type: object
      properties:
        SourceLastUpdatedTimestampFormat:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The format of `sourceLastUpdatedTimestamp` that was detected
            in fields.
        Fields:
          allOf:
          - $ref: '#/components/schemas/FieldMap'
          description: A map of the name and the `ObjectType` field.
        Keys:
          allOf:
          - $ref: '#/components/schemas/KeyMap'
          description: A list of unique keys that can be used to map data to a profile.
      description: Contains `ProfileObjectType` mapping information from the model.
    DetectedProfileObjectTypes:
      type: array
      items:
        $ref: '#/components/schemas/DetectedProfileObjectType'
    Dimension:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ProfileAttributes'
        description: |-
          Object that holds the profile attributes to segment on.
      - allOf:
        - $ref: '#/components/schemas/CalculatedCustomAttributes'
        description: |-
          Object that holds the calculated attributes to segment on.
      description: |-
        Object that holds what profile and calculated attributes to segment on.
    DimensionList:
      type: array
      items:
        $ref: '#/components/schemas/Dimension'
    DomainList:
      type: array
      items:
        $ref: '#/components/schemas/ListDomainItem'
    DomainStats:
      type: object
      properties:
        ProfileCount:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The total number of profiles currently in the domain.
        MeteringProfileCount:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The number of profiles that you are currently paying for in
            the domain. If you have more than 100 objects associated with a single
            profile, that profile counts as two profiles. If you have more than 200
            objects, that profile counts as three, and so on.
        ObjectCount:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The total number of objects in domain.
        TotalSize:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The total size, in bytes, of all objects in the domain.
      description: Usage-specific statistics about the domain.
    Double:
      type: number
      format: double
    Double0To1:
      type: number
      format: double
      minimum: 0.0
      maximum: 1.0
    EmailList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    End:
      type: integer
      default: 0
      minimum: 0
      maximum: 366
    EstimateStatus:
      type: string
      enum:
      - RUNNING
      - SUCCEEDED
      - FAILED
    EventStreamDestinationDetails:
      type: object
      properties:
        Uri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The StreamARN of the destination to deliver profile events
            to. For example, arn:aws:kinesis:region:account-id:stream/stream-name.
        Status:
          allOf:
          - $ref: '#/components/schemas/EventStreamDestinationStatus'
          description: The status of enabling the Kinesis stream as a destination
            for export.
        UnhealthySince:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp when the status last changed to `UNHEALHY`.
        Message:
          allOf:
          - $ref: '#/components/schemas/string1To1000'
          description: The human-readable string that corresponds to the error or
            success while enabling the streaming destination.
      required:
      - Uri
      - Status
      description: Details of the destination being used for the EventStream.
    EventStreamDestinationStatus:
      type: string
      enum:
      - HEALTHY
      - UNHEALTHY
    EventStreamState:
      type: string
      enum:
      - RUNNING
      - STOPPED
    EventStreamSummary:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EventStreamName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The name of the event stream.
        EventStreamArn:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: A unique identifier for the event stream.
        State:
          allOf:
          - $ref: '#/components/schemas/EventStreamState'
          description: The operational state of destination stream for export.
        StoppedSince:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp when the `State` changed to `STOPPED`.
        DestinationSummary:
          allOf:
          - $ref: '#/components/schemas/DestinationSummary'
          description: Summary information about the Kinesis data stream.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - EventStreamName
      - EventStreamArn
      - State
      description: An instance of EventStream in a list of EventStreams.
    EventStreamSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/EventStreamSummary'
    EventTriggerCondition:
      type: object
      properties:
        EventTriggerDimensions:
          allOf:
          - $ref: '#/components/schemas/EventTriggerDimensions'
          description: A list of dimensions to be evaluated for the event.
        LogicalOperator:
          allOf:
          - $ref: '#/components/schemas/EventTriggerLogicalOperator'
          description: The operator used to combine multiple dimensions.
      required:
      - EventTriggerDimensions
      - LogicalOperator
      description: Specifies the circumstances under which the event should trigger
        the destination.
    EventTriggerConditions:
      type: array
      items:
        $ref: '#/components/schemas/EventTriggerCondition'
      x-sensitive: true
    EventTriggerDimension:
      type: object
      properties:
        ObjectAttributes:
          allOf:
          - $ref: '#/components/schemas/ObjectAttributes'
          description: A list of object attributes to be evaluated.
      required:
      - ObjectAttributes
      description: A specific event dimension to be assessed.
    EventTriggerDimensions:
      type: array
      items:
        $ref: '#/components/schemas/EventTriggerDimension'
    EventTriggerLimits:
      type: object
      properties:
        EventExpiration:
          allOf:
          - $ref: '#/components/schemas/optionalLong'
          description: In milliseconds. Specifies that an event will only trigger
            the destination if it is processed within a certain latency period.
        Periods:
          allOf:
          - $ref: '#/components/schemas/Periods'
          description: A list of time periods during which the limits apply.
      description: Defines limits controlling whether an event triggers the destination,
        based on ingestion latency and the number of invocations per profile over
        specific time periods.
    EventTriggerLogicalOperator:
      type: string
      enum:
      - ANY
      - ALL
      - NONE
    EventTriggerNames:
      type: array
      items:
        $ref: '#/components/schemas/name'
    EventTriggerSummaryItem:
      type: object
      properties:
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the object type.
        EventTriggerName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the event trigger.
        Description:
          allOf:
          - $ref: '#/components/schemas/text'
          description: The description of the event trigger.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the event trigger was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the event trigger was most recently updated.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: An array of key-value pairs to apply to this resource.
      description: The summary of the event trigger.
    EventTriggerSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/EventTriggerSummaryItem'
      x-sensitive: true
    EventTriggerValues:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    ExportingConfig:
      type: object
      properties:
        S3Exporting:
          allOf:
          - $ref: '#/components/schemas/S3ExportingConfig'
          description: The S3 location where Identity Resolution Jobs write result
            files.
      description: 'Configuration information about the S3 bucket where Identity Resolution
        Jobs writes result files.


        You need to give Customer Profiles service principal write permission to your
        S3 bucket. Otherwise, you''ll get an exception in the API response. For an
        example policy, see [Amazon Connect Customer Profiles cross-service confused
        deputy prevention](https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html#customer-profiles-cross-service).'
    ExportingLocation:
      type: object
      properties:
        S3Exporting:
          allOf:
          - $ref: '#/components/schemas/S3ExportingLocation'
          description: Information about the S3 location where Identity Resolution
            Jobs write result files.
      description: The S3 location where Identity Resolution Jobs write result files.
    ExtraLengthValueProfileDimension:
      type: object
      properties:
        DimensionType:
          allOf:
          - $ref: '#/components/schemas/StringDimensionType'
          description: The action to segment with.
        Values:
          allOf:
          - $ref: '#/components/schemas/ExtraLengthValues'
          description: The values to apply the DimensionType on.
      required:
      - DimensionType
      - Values
      description: Object that segments on various Customer profile's fields that
        are larger than normal.
    ExtraLengthValues:
      type: array
      items:
        $ref: '#/components/schemas/string1To1000'
    Failures:
      type: array
      items:
        $ref: '#/components/schemas/ProfileQueryFailures'
    FieldContentType:
      type: string
      enum:
      - STRING
      - NUMBER
      - PHONE_NUMBER
      - EMAIL_ADDRESS
      - NAME
    FieldMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ObjectTypeField'
    FieldNameList:
      type: array
      items:
        $ref: '#/components/schemas/name'
    FieldSourceProfileIds:
      type: object
      properties:
        AccountNumber:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the account number field to be merged.
        AdditionalInformation:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the additional information field to
            be merged.
        PartyType:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the party type field to be merged.
        BusinessName:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the business name field to be merged.
        FirstName:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the first name field to be merged.
        MiddleName:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the middle name field to be merged.
        LastName:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the last name field to be merged.
        BirthDate:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the birthdate field to be merged.
        Gender:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the gender field to be merged.
        PhoneNumber:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the phone number field to be merged.
        MobilePhoneNumber:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the mobile phone number field to be
            merged.
        HomePhoneNumber:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the home phone number field to be merged.
        BusinessPhoneNumber:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the business phone number field to
            be merged.
        EmailAddress:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the email address field to be merged.
        PersonalEmailAddress:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the personal email address field to
            be merged.
        BusinessEmailAddress:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the party type field to be merged.
        Address:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the party type field to be merged.
        ShippingAddress:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the shipping address field to be merged.
        MailingAddress:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the mailing address field to be merged.
        BillingAddress:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: A unique identifier for the billing type field to be merged.
        Attributes:
          allOf:
          - $ref: '#/components/schemas/AttributeSourceIdMap'
          description: A unique identifier for the attributes field to be merged.
      description: A duplicate customer profile that is to be merged into a main profile.
    Filter:
      type: object
      properties:
        Include:
          allOf:
          - $ref: '#/components/schemas/Include'
          description: Define whether to include or exclude objects for Calculated
            Attributed calculation that fit the filter groups criteria.
        Groups:
          allOf:
          - $ref: '#/components/schemas/GroupList'
          description: Holds the list of Filter groups within the Filter definition.
      required:
      - Include
      - Groups
      description: Defines how to filter the objects coming in for calculated attributes.
    FilterAttributeDimension:
      type: object
      properties:
        DimensionType:
          allOf:
          - $ref: '#/components/schemas/FilterDimensionType'
          description: The action to filter with.
        Values:
          allOf:
          - $ref: '#/components/schemas/ValueList'
          description: The values to apply the DimensionType on.
      required:
      - DimensionType
      - Values
      description: Object that defines how to filter the incoming objects for the
        calculated attribute.
    FilterDimension:
      type: object
      properties:
        Attributes:
          allOf:
          - $ref: '#/components/schemas/AttributeMap'
          description: Is the attribute within the FilterDimension map
      required:
      - Attributes
      description: Contains the map of attribute names to attribute dimensions.
    FilterDimensionList:
      type: array
      items:
        $ref: '#/components/schemas/FilterDimension'
    FilterDimensionType:
      type: string
      enum:
      - INCLUSIVE
      - EXCLUSIVE
      - CONTAINS
      - BEGINS_WITH
      - ENDS_WITH
      - BEFORE
      - AFTER
      - BETWEEN
      - NOT_BETWEEN
      - 'ON'
      - GREATER_THAN
      - LESS_THAN
      - GREATER_THAN_OR_EQUAL
      - LESS_THAN_OR_EQUAL
      - EQUAL
    FilterGroup:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The type of logical relationship between the dimensions of
            the Filter group.
        Dimensions:
          allOf:
          - $ref: '#/components/schemas/FilterDimensionList'
          description: Object that holds the attributes to filter on.
      required:
      - Type
      - Dimensions
      description: Object that holds the dimensions to filter on.
    FlowDefinition:
      type: object
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: A description of the flow you want to create.
        FlowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The specified name of the flow. Use underscores (_) or hyphens
            (-) only. Spaces are not allowed.
        KmsArn:
          allOf:
          - $ref: '#/components/schemas/KmsArn'
          description: The Amazon Resource Name of the AWS Key Management Service
            (KMS) key you provide for encryption.
        SourceFlowConfig:
          allOf:
          - $ref: '#/components/schemas/SourceFlowConfig'
          description: The configuration that controls how Customer Profiles retrieves
            data from the source.
        Tasks:
          allOf:
          - $ref: '#/components/schemas/Tasks'
          description: A list of tasks that Customer Profiles performs while transferring
            the data in the flow run.
        TriggerConfig:
          allOf:
          - $ref: '#/components/schemas/TriggerConfig'
          description: The trigger settings that determine how and when the flow runs.
      required:
      - FlowName
      - KmsArn
      - SourceFlowConfig
      - Tasks
      - TriggerConfig
      description: The configurations that control how Customer Profiles retrieves
        data from the source, Amazon AppFlow. Customer Profiles uses this information
        to create an AppFlow flow on behalf of customers.
    FlowDescription:
      type: string
      pattern: ^[\w!@#\-.?,\s]*$
      minLength: 0
      maxLength: 2048
    FlowName:
      type: string
      pattern: ^[a-zA-Z0-9][\w!@#.-]+$
      minLength: 0
      maxLength: 256
    FoundByKeyValue:
      type: object
      properties:
        KeyName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: A searchable identifier of a customer profile.
        Values:
          allOf:
          - $ref: '#/components/schemas/requestValueList'
          description: A list of key values.
      description: A data type pair that consists of a `KeyName` and `Values` list
        that were used to find a profile returned in response to a [SearchProfiles](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html)
        request.
    Gender:
      type: string
      enum:
      - MALE
      - FEMALE
      - UNSPECIFIED
    GetAutoMergingPreviewRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        Consolidation:
          allOf:
          - $ref: '#/components/schemas/Consolidation'
          description: A list of matching attributes that represent matching criteria.
        ConflictResolution:
          allOf:
          - $ref: '#/components/schemas/ConflictResolution'
          description: How the auto-merging process should resolve conflicts between
            different profiles.
        MinAllowedConfidenceScoreForMerging:
          allOf:
          - $ref: '#/components/schemas/Double0To1'
          description: Minimum confidence score required for profiles within a matching
            group to be merged during the auto-merge process.
      required:
      - DomainName
      - Consolidation
      - ConflictResolution
    GetAutoMergingPreviewResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        NumberOfMatchesInSample:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The number of match groups in the domain that have been reviewed
            in this preview dry run.
        NumberOfProfilesInSample:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The number of profiles found in this preview dry run.
        NumberOfProfilesWillBeMerged:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The number of profiles that would be merged if this wasn't
            a preview dry run.
      required:
      - DomainName
    GetCalculatedAttributeDefinitionRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
      required:
      - DomainName
      - CalculatedAttributeName
    GetCalculatedAttributeDefinitionResponse:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The display name of the calculated attribute.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the calculated attribute.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the calculated attribute definition was
            created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the calculated attribute definition was
            most recently edited.
        Statistic:
          allOf:
          - $ref: '#/components/schemas/Statistic'
          description: The aggregation operation to perform for the calculated attribute.
        Filter:
          allOf:
          - $ref: '#/components/schemas/Filter'
          description: The filter assigned to this calculated attribute definition.
        Conditions:
          allOf:
          - $ref: '#/components/schemas/Conditions'
          description: The conditions including range, object count, and threshold
            for the calculated attribute.
        AttributeDetails:
          allOf:
          - $ref: '#/components/schemas/AttributeDetails'
          description: Mathematical expression and a list of attribute items specified
            in that expression.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
    GetCalculatedAttributeForProfileRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
      required:
      - DomainName
      - ProfileId
      - CalculatedAttributeName
    GetCalculatedAttributeForProfileResponse:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The display name of the calculated attribute.
        IsDataPartial:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Indicates whether the calculated attribute’s value is based
            on partial data. If data is partial, it is set to true.
        Value:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The value of the calculated attribute.
    GetDomainRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
      required:
      - DomainName
    GetDomainResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        DefaultExpirationDays:
          allOf:
          - $ref: '#/components/schemas/expirationDaysInteger'
          description: The default number of days until the data within the domain
            expires.
        DefaultEncryptionKey:
          allOf:
          - $ref: '#/components/schemas/encryptionKey'
          description: The default encryption key, which is an AWS managed key, is
            used when no specific type of encryption key is specified. It is used
            to encrypt all data before it is placed in permanent or semi-permanent
            storage.
        DeadLetterQueueUrl:
          allOf:
          - $ref: '#/components/schemas/sqsQueueUrl'
          description: The URL of the SQS dead letter queue, which is used for reporting
            errors associated with ingesting data from third party applications.
        Stats:
          allOf:
          - $ref: '#/components/schemas/DomainStats'
          description: Usage-specific statistics about the domain.
        Matching:
          allOf:
          - $ref: '#/components/schemas/MatchingResponse'
          description: 'The process of matching duplicate profiles. If `Matching`
            = `true`, Amazon Connect Customer Profiles starts a weekly batch process
            called Identity Resolution Job. If you do not specify a date and time
            for Identity Resolution Job to run, by default it runs every Saturday
            at 12AM UTC to detect duplicate profiles in your domains.


            After the Identity Resolution Job completes, use the [GetMatches](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html)
            API to return and review the results. Or, if you have configured `ExportingConfig`
            in the `MatchingRequest`, you can download the results from S3.'
        RuleBasedMatching:
          allOf:
          - $ref: '#/components/schemas/RuleBasedMatchingResponse'
          description: The process of matching duplicate profiles using the Rule-Based
            matching. If `RuleBasedMatching` = true, Amazon Connect Customer Profiles
            will start to match and merge your profiles according to your configuration
            in the `RuleBasedMatchingRequest`. You can use the `ListRuleBasedMatches`
            and `GetSimilarProfiles` API to return and review the results. Also, if
            you have configured `ExportingConfig` in the `RuleBasedMatchingRequest`,
            you can download the results from S3.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - CreatedAt
      - LastUpdatedAt
    GetEventStreamRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EventStreamName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The name of the event stream provided during create operations.
      required:
      - DomainName
      - EventStreamName
    GetEventStreamResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EventStreamArn:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: A unique identifier for the event stream.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the export was created.
        State:
          allOf:
          - $ref: '#/components/schemas/EventStreamState'
          description: The operational state of destination stream for export.
        StoppedSince:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp when the `State` changed to `STOPPED`.
        DestinationDetails:
          allOf:
          - $ref: '#/components/schemas/EventStreamDestinationDetails'
          description: Details regarding the Kinesis stream.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - EventStreamArn
      - CreatedAt
      - State
      - DestinationDetails
    GetEventTriggerRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EventTriggerName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the event trigger.
      required:
      - DomainName
      - EventTriggerName
    GetEventTriggerResponse:
      type: object
      properties:
        EventTriggerName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the event trigger.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the object type.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the event trigger.
        EventTriggerConditions:
          allOf:
          - $ref: '#/components/schemas/EventTriggerConditions'
          description: A list of conditions that determine when an event should trigger
            the destination.
        SegmentFilter:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The destination is triggered only for profiles that meet the
            criteria of a segment definition.
        EventTriggerLimits:
          allOf:
          - $ref: '#/components/schemas/EventTriggerLimits'
          description: Defines limits controlling whether an event triggers the destination,
            based on ingestion latency and the number of invocations per profile over
            specific time periods.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the event trigger was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the event trigger was most recently updated.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: An array of key-value pairs to apply to this resource.
    GetIdentityResolutionJobRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        JobId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the Identity Resolution Job.
      required:
      - DomainName
      - JobId
    GetIdentityResolutionJobResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        JobId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the Identity Resolution Job.
        Status:
          allOf:
          - $ref: '#/components/schemas/IdentityResolutionJobStatus'
          description: "The status of the Identity Resolution Job.\n\n  * `PENDING`:\
            \ The Identity Resolution Job is scheduled but has not started yet. If\
            \ you turn off the Identity Resolution feature in your domain, jobs in\
            \ the `PENDING` state are deleted.\n\n  * `PREPROCESSING`: The Identity\
            \ Resolution Job is loading your data.\n\n  * `FIND_MATCHING`: The Identity\
            \ Resolution Job is using the machine learning model to identify profiles\
            \ that belong to the same matching group.\n\n  * `MERGING`: The Identity\
            \ Resolution Job is merging duplicate profiles.\n\n  * `COMPLETED`: The\
            \ Identity Resolution Job completed successfully.\n\n  * `PARTIAL_SUCCESS`:\
            \ There's a system error and not all of the data is merged. The Identity\
            \ Resolution Job writes a message indicating the source of the problem.\n\
            \n  * `FAILED`: The Identity Resolution Job did not merge any data. It\
            \ writes a message indicating the source of the problem."
        Message:
          allOf:
          - $ref: '#/components/schemas/stringTo2048'
          description: The error messages that are generated when the Identity Resolution
            Job runs.
        JobStartTime:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the Identity Resolution Job was started
            or will be started.
        JobEndTime:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the Identity Resolution Job was completed.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the Identity Resolution Job was most
            recently edited.
        JobExpirationTime:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the Identity Resolution Job will expire.
        AutoMerging:
          allOf:
          - $ref: '#/components/schemas/AutoMerging'
          description: Configuration settings for how to perform the auto-merging
            of profiles.
        ExportingLocation:
          allOf:
          - $ref: '#/components/schemas/ExportingLocation'
          description: The S3 location where the Identity Resolution Job writes result
            files.
        JobStats:
          allOf:
          - $ref: '#/components/schemas/JobStats'
          description: Statistics about the Identity Resolution Job.
    GetIntegrationRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        Uri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The URI of the S3 bucket or any other type of data source.
      required:
      - DomainName
      - Uri
    GetIntegrationResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        Uri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
        ObjectTypeNames:
          allOf:
          - $ref: '#/components/schemas/ObjectTypeNames'
          description: 'A map in which each key is an event type from an external
            application such as Segment or Shopify, and each value is an `ObjectTypeName`
            (template) used to ingest the event. It supports the following event types:
            `SegmentIdentify`, `ShopifyCreateCustomers`, `ShopifyUpdateCustomers`,
            `ShopifyCreateDraftOrders`, `ShopifyUpdateDraftOrders`, `ShopifyCreateOrders`,
            and `ShopifyUpdatedOrders`.'
        WorkflowId:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Unique identifier for the workflow.
        IsUnstructured:
          allOf:
          - $ref: '#/components/schemas/optionalBoolean'
          description: Boolean that shows if the Flow that's associated with the Integration
            is created in Amazon Appflow, or with ObjectTypeName equals _unstructured
            via API/CLI in flowDefinition.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. The Integration
            uses this role to make Customer Profiles requests on your behalf.
        EventTriggerNames:
          allOf:
          - $ref: '#/components/schemas/EventTriggerNames'
          description: A list of unique names for active event triggers associated
            with the integration. This list would be empty if no Event Trigger is
            associated with the integration.
      required:
      - DomainName
      - Uri
      - CreatedAt
      - LastUpdatedAt
    GetMatchesRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of results to return per page.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
      required:
      - DomainName
    GetMatchesResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: If there are additional results, this is the token for the
            next set of results.
        MatchGenerationDate:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp this version of Match Result generated.
        PotentialMatches:
          allOf:
          - $ref: '#/components/schemas/matchesNumber'
          description: The number of potential matches found.
        Matches:
          allOf:
          - $ref: '#/components/schemas/MatchesList'
          description: The list of matched profiles for this instance.
    GetProfileObjectTypeRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
      required:
      - DomainName
      - ObjectTypeName
    GetProfileObjectTypeResponse:
      type: object
      properties:
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the profile object type.
        TemplateId:
          allOf:
          - $ref: '#/components/schemas/name'
          description: A unique identifier for the object template.
        ExpirationDays:
          allOf:
          - $ref: '#/components/schemas/expirationDaysInteger'
          description: The number of days until the data in the object expires.
        EncryptionKey:
          allOf:
          - $ref: '#/components/schemas/encryptionKey'
          description: The customer-provided key to encrypt the profile object that
            will be created in this profile object type.
        AllowProfileCreation:
          allOf:
          - $ref: '#/components/schemas/boolean'
          description: Indicates whether a profile should be created when data is
            received if one doesn’t exist for an object of this type. The default
            is `FALSE`. If the AllowProfileCreation flag is set to `FALSE`, then the
            service tries to fetch a standard profile and associate this object with
            the profile. If it is set to `TRUE`, and if no match is found, then the
            service creates a new standard profile.
        SourceLastUpdatedTimestampFormat:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The format of your `sourceLastUpdatedTimestamp` that was previously
            set up.
        MaxAvailableProfileObjectCount:
          allOf:
          - $ref: '#/components/schemas/minSize0'
          description: The amount of provisioned profile object max count available.
        MaxProfileObjectCount:
          allOf:
          - $ref: '#/components/schemas/minSize1'
          description: The amount of profile object max count assigned to the object
            type.
        Fields:
          allOf:
          - $ref: '#/components/schemas/FieldMap'
          description: A map of the name and ObjectType field.
        Keys:
          allOf:
          - $ref: '#/components/schemas/KeyMap'
          description: A list of unique keys that can be used to map data to the profile.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - ObjectTypeName
      - Description
    GetProfileObjectTypeTemplateRequest:
      type: object
      properties:
        TemplateId:
          allOf:
          - $ref: '#/components/schemas/name'
          description: A unique identifier for the object template.
      required:
      - TemplateId
    GetProfileObjectTypeTemplateResponse:
      type: object
      properties:
        TemplateId:
          allOf:
          - $ref: '#/components/schemas/name'
          description: A unique identifier for the object template.
        SourceName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The name of the source of the object template.
        SourceObject:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The source of the object template.
        AllowProfileCreation:
          allOf:
          - $ref: '#/components/schemas/boolean'
          description: Indicates whether a profile should be created when data is
            received if one doesn’t exist for an object of this type. The default
            is `FALSE`. If the AllowProfileCreation flag is set to `FALSE`, then the
            service tries to fetch a standard profile and associate this object with
            the profile. If it is set to `TRUE`, and if no match is found, then the
            service creates a new standard profile.
        SourceLastUpdatedTimestampFormat:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The format of your `sourceLastUpdatedTimestamp` that was previously
            set up.
        Fields:
          allOf:
          - $ref: '#/components/schemas/FieldMap'
          description: A map of the name and ObjectType field.
        Keys:
          allOf:
          - $ref: '#/components/schemas/KeyMap'
          description: A list of unique keys that can be used to map data to the profile.
    GetSegmentDefinitionRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the segment definition.
      required:
      - DomainName
      - SegmentDefinitionName
    GetSegmentDefinitionResponse:
      type: object
      properties:
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The name of the segment definition.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The display name of the segment definition.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the segment definition.
        SegmentGroups:
          allOf:
          - $ref: '#/components/schemas/SegmentGroup'
          description: The segment criteria associated with this definition.
        SegmentDefinitionArn:
          allOf:
          - $ref: '#/components/schemas/SegmentDefinitionArn'
          description: The arn of the segment definition.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the segment definition was created.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - SegmentDefinitionArn
    GetSegmentEstimateRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EstimateId:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The query Id passed by a previous `CreateSegmentEstimate` operation.
      required:
      - DomainName
      - EstimateId
    GetSegmentEstimateResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EstimateId:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The `QueryId` which is the same as the value passed in `QueryId`.
        Status:
          allOf:
          - $ref: '#/components/schemas/EstimateStatus'
          description: The current status of the query.
        Estimate:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The estimated number of profiles contained in the segment.
        Message:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The error message if there is any error.
        StatusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The status code of the segment estimate.
    GetSegmentMembershipMessage:
      type: string
    GetSegmentMembershipRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The Id of the wanted segment. Needs to be a valid, and existing
            segment Id.
        ProfileIds:
          allOf:
          - $ref: '#/components/schemas/ProfileIds'
          description: The list of profile IDs to query for.
      required:
      - DomainName
      - SegmentDefinitionName
      - ProfileIds
    GetSegmentMembershipResponse:
      type: object
      properties:
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the segment definition.
        Profiles:
          allOf:
          - $ref: '#/components/schemas/Profiles'
          description: An array of maps where each contains a response per profile
            requested.
        Failures:
          allOf:
          - $ref: '#/components/schemas/Failures'
          description: An array of maps where each contains a response per profile
            failed for the request.
    GetSegmentMembershipStatus:
      type: integer
    GetSegmentSnapshotRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique identifier of the domain.
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the segment definition.
        SnapshotId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the segment snapshot.
      required:
      - DomainName
      - SegmentDefinitionName
      - SnapshotId
    GetSegmentSnapshotResponse:
      type: object
      properties:
        SnapshotId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the segment snapshot.
        Status:
          allOf:
          - $ref: '#/components/schemas/SegmentSnapshotStatus'
          description: The status of the asynchronous job for exporting the segment
            snapshot.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/string1To1000'
          description: The status message of the asynchronous job for exporting the
            segment snapshot.
        DataFormat:
          allOf:
          - $ref: '#/components/schemas/DataFormat'
          description: The format in which the segment will be exported.
        EncryptionKey:
          allOf:
          - $ref: '#/components/schemas/encryptionKey'
          description: The Amazon Resource Name (ARN) of the KMS key used to encrypt
            the exported segment.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role that allows
            Customer Profiles service principal to assume the role for conducting
            KMS and S3 operations.
        DestinationUri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The destination to which the segment will be exported. This
            field must be provided if the request is not submitted from the Amazon
            Connect Admin Website.
      required:
      - SnapshotId
      - Status
      - DataFormat
    GetSimilarProfilesRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous `GetSimilarProfiles`
            API call.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of objects returned per page.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        MatchType:
          allOf:
          - $ref: '#/components/schemas/MatchType'
          description: Specify the type of matching to get similar profiles for.
        SearchKey:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The string indicating the search key to be used.
        SearchValue:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The string based on `SearchKey` to be searched for similar
            profiles.
      required:
      - DomainName
      - MatchType
      - SearchKey
      - SearchValue
    GetSimilarProfilesResponse:
      type: object
      properties:
        ProfileIds:
          allOf:
          - $ref: '#/components/schemas/ProfileIdList'
          description: Set of `profileId`s that belong to the same matching group.
        MatchId:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The string `matchId` that the similar profiles belong to.
        MatchType:
          allOf:
          - $ref: '#/components/schemas/MatchType'
          description: Specify the type of matching to get similar profiles for.
        RuleLevel:
          allOf:
          - $ref: '#/components/schemas/RuleLevel'
          description: The integer rule level that the profiles matched on.
        ConfidenceScore:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: It only has value when the `MatchType` is `ML_BASED_MATCHING`.A
            number between 0 and 1, where a higher score means higher similarity.
            Examining match confidence scores lets you distinguish between groups
            of similar records in which the system is highly confident (which you
            may decide to merge), groups of similar records about which the system
            is uncertain (which you may decide to have reviewed by a human), and groups
            of similar records that the system deems to be unlikely (which you may
            decide to reject). Given confidence scores vary as per the data input,
            it should not be used as an absolute measure of matching quality.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous `GetSimilarProfiles`
            API call.
    GetWorkflowRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        WorkflowId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: Unique identifier for the workflow.
      required:
      - DomainName
      - WorkflowId
    GetWorkflowResponse:
      type: object
      properties:
        WorkflowId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: Unique identifier for the workflow.
        WorkflowType:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of workflow execution.
        ErrorDescription:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Workflow error messages during execution (if any).
        StartDate:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp that represents when workflow execution started.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp that represents when workflow execution last
            updated.
        Attributes:
          allOf:
          - $ref: '#/components/schemas/WorkflowAttributes'
          description: Attributes provided for workflow execution.
        Metrics:
          allOf:
          - $ref: '#/components/schemas/WorkflowMetrics'
          description: Workflow specific execution metrics.
    GetWorkflowStepsRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        WorkflowId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: Unique identifier for the workflow.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of results to return per page.
      required:
      - DomainName
      - WorkflowId
    GetWorkflowStepsResponse:
      type: object
      properties:
        WorkflowId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: Unique identifier for the workflow.
        WorkflowType:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
        Items:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepsList'
          description: List containing workflow step details.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: If there are additional results, this is the token for the
            next set of results.
    Group:
      type: object
      properties:
        Dimensions:
          allOf:
          - $ref: '#/components/schemas/DimensionList'
          description: Defines the attributes to segment on.
        SourceSegments:
          allOf:
          - $ref: '#/components/schemas/SourceSegmentList'
          description: Defines the starting source of data.
        SourceType:
          allOf:
          - $ref: '#/components/schemas/IncludeOptions'
          description: Defines how to interact with the source data.
        Type:
          allOf:
          - $ref: '#/components/schemas/IncludeOptions'
          description: Defines how to interact with the profiles found in the current
            filtering.
      description: Contains dimensions that determine what to segment on.
    GroupList:
      type: array
      items:
        $ref: '#/components/schemas/FilterGroup'
    IdentityResolutionJob:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        JobId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of the Identity Resolution Job.
        Status:
          allOf:
          - $ref: '#/components/schemas/IdentityResolutionJobStatus'
          description: "The status of the Identity Resolution Job.\n\n  * `PENDING`:\
            \ The Identity Resolution Job is scheduled but has not started yet. If\
            \ you turn off the Identity Resolution feature in your domain, jobs in\
            \ the `PENDING` state are deleted.\n\n  * `PREPROCESSING`: The Identity\
            \ Resolution Job is loading your data.\n\n  * `FIND_MATCHING`: The Identity\
            \ Resolution Job is using the machine learning model to identify profiles\
            \ that belong to the same matching group.\n\n  * `MERGING`: The Identity\
            \ Resolution Job is merging duplicate profiles.\n\n  * `COMPLETED`: The\
            \ Identity Resolution Job completed successfully.\n\n  * `PARTIAL_SUCCESS`:\
            \ There's a system error and not all of the data is merged. The Identity\
            \ Resolution Job writes a message indicating the source of the problem.\n\
            \n  * `FAILED`: The Identity Resolution Job did not merge any data. It\
            \ writes a message indicating the source of the problem."
        JobStartTime:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the job was started or will be started.
        JobEndTime:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the job was completed.
        JobStats:
          allOf:
          - $ref: '#/components/schemas/JobStats'
          description: Statistics about an Identity Resolution Job.
        ExportingLocation:
          allOf:
          - $ref: '#/components/schemas/ExportingLocation'
          description: The S3 location where the Identity Resolution Job writes result
            files.
        Message:
          allOf:
          - $ref: '#/components/schemas/stringTo2048'
          description: The error messages that are generated when the Identity Resolution
            Job runs.
      description: Information about the Identity Resolution Job.
    IdentityResolutionJobStatus:
      type: string
      enum:
      - PENDING
      - PREPROCESSING
      - FIND_MATCHING
      - MERGING
      - COMPLETED
      - PARTIAL_SUCCESS
      - FAILED
    IdentityResolutionJobsList:
      type: array
      items:
        $ref: '#/components/schemas/IdentityResolutionJob'
    Include:
      type: string
      enum:
      - ALL
      - ANY
      - NONE
    IncludeOptions:
      type: string
      enum:
      - ALL
      - ANY
      - NONE
    IncrementalPullConfig:
      type: object
      properties:
        DatetimeTypeFieldName:
          allOf:
          - $ref: '#/components/schemas/DatetimeTypeFieldName'
          description: A field that specifies the date time or timestamp field as
            the criteria to use when importing incremental records from the source.
      description: Specifies the configuration used when importing incremental records
        from the source.
    IntegrationConfig:
      type: object
      properties:
        AppflowIntegration:
          allOf:
          - $ref: '#/components/schemas/AppflowIntegration'
          description: Configuration data for `APPFLOW_INTEGRATION` workflow type.
      description: Configuration data for integration workflow.
    IntegrationList:
      type: array
      items:
        $ref: '#/components/schemas/ListIntegrationItem'
    InternalServerException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/message'
      description: An internal service error occurred.
    JobSchedule:
      type: object
      properties:
        DayOfTheWeek:
          allOf:
          - $ref: '#/components/schemas/JobScheduleDayOfTheWeek'
          description: The day when the Identity Resolution Job should run every week.
        Time:
          allOf:
          - $ref: '#/components/schemas/JobScheduleTime'
          description: The time when the Identity Resolution Job should run every
            week.
      required:
      - DayOfTheWeek
      - Time
      description: The day and time when do you want to start the Identity Resolution
        Job every week.
    JobScheduleDayOfTheWeek:
      type: string
      enum:
      - SUNDAY
      - MONDAY
      - TUESDAY
      - WEDNESDAY
      - THURSDAY
      - FRIDAY
      - SATURDAY
    JobScheduleTime:
      type: string
      pattern: ^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$
      minLength: 3
      maxLength: 5
    JobStats:
      type: object
      properties:
        NumberOfProfilesReviewed:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The number of profiles reviewed.
        NumberOfMatchesFound:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The number of matches found.
        NumberOfMergesDone:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The number of merges completed.
      description: Statistics about the Identity Resolution Job.
    KeyMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ObjectTypeKeyList'
    KmsArn:
      type: string
      pattern: '^arn:aws:kms:.*:[0-9]+:'
      minLength: 20
      maxLength: 2048
    ListAccountIntegrationsRequest:
      type: object
      properties:
        Uri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The URI of the S3 bucket or any other type of data source.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous ListAccountIntegrations
            API call.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of objects returned per page.
        IncludeHidden:
          allOf:
          - $ref: '#/components/schemas/optionalBoolean'
          description: Boolean to indicate if hidden integration should be returned.
            Defaults to `False`.
      required:
      - Uri
    ListAccountIntegrationsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/IntegrationList'
          description: The list of ListAccountIntegration instances.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous ListAccountIntegrations
            API call.
    ListCalculatedAttributeDefinitionItem:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The display name of the calculated attribute.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The threshold for the calculated attribute.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The threshold for the calculated attribute.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the calculated attribute definition was
            most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      description: The details of a single calculated attribute definition.
    ListCalculatedAttributeDefinitionsRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call to ListCalculatedAttributeDefinitions.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of calculated attribute definitions returned
            per page.
      required:
      - DomainName
    ListCalculatedAttributeDefinitionsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/CalculatedAttributeDefinitionsList'
          description: The list of calculated attribute definitions.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call to ListCalculatedAttributeDefinitions.
    ListCalculatedAttributeForProfileItem:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The display name of the calculated attribute.
        IsDataPartial:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Indicates whether the calculated attribute’s value is based
            on partial data. If data is partial, it is set to true.
        Value:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The value of the calculated attribute.
      description: The details of a single calculated attribute for a profile.
    ListCalculatedAttributesForProfileRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call to ListCalculatedAttributesForProfile.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of calculated attributes returned per page.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
      required:
      - DomainName
      - ProfileId
    ListCalculatedAttributesForProfileResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/CalculatedAttributesForProfileList'
          description: The list of calculated attributes.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call to ListCalculatedAttributesForProfile.
    ListDomainItem:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - CreatedAt
      - LastUpdatedAt
      description: An object in a list that represents a domain.
    ListDomainsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous ListDomain API call.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of objects returned per page.
    ListDomainsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/DomainList'
          description: The list of ListDomains instances.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous ListDomains API call.
    ListEventStreamsRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: Identifies the next page of results to return.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of objects returned per page.
      required:
      - DomainName
    ListEventStreamsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/EventStreamSummaryList'
          description: Contains summary information about an EventStream.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: Identifies the next page of results to return.
    ListEventTriggersRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token to use with ListEventTriggers.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of results to return per page.
      required:
      - DomainName
    ListEventTriggersResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/EventTriggerSummaryList'
          description: The list of Event Triggers.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call to ListEventTriggers.
    ListIdentityResolutionJobsRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of results to return per page.
      required:
      - DomainName
    ListIdentityResolutionJobsResponse:
      type: object
      properties:
        IdentityResolutionJobsList:
          allOf:
          - $ref: '#/components/schemas/IdentityResolutionJobsList'
          description: A list of Identity Resolution Jobs.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: If there are additional results, this is the token for the
            next set of results.
    ListIntegrationItem:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        Uri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
        ObjectTypeNames:
          allOf:
          - $ref: '#/components/schemas/ObjectTypeNames'
          description: 'A map in which each key is an event type from an external
            application such as Segment or Shopify, and each value is an `ObjectTypeName`
            (template) used to ingest the event. It supports the following event types:
            `SegmentIdentify`, `ShopifyCreateCustomers`, `ShopifyUpdateCustomers`,
            `ShopifyCreateDraftOrders`, `ShopifyUpdateDraftOrders`, `ShopifyCreateOrders`,
            and `ShopifyUpdatedOrders`.'
        WorkflowId:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Unique identifier for the workflow.
        IsUnstructured:
          allOf:
          - $ref: '#/components/schemas/optionalBoolean'
          description: Boolean that shows if the Flow that's associated with the Integration
            is created in Amazon Appflow, or with ObjectTypeName equals _unstructured
            via API/CLI in flowDefinition.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. The Integration
            uses this role to make Customer Profiles requests on your behalf.
        EventTriggerNames:
          allOf:
          - $ref: '#/components/schemas/EventTriggerNames'
          description: A list of unique names for active event triggers associated
            with the integration.
      required:
      - DomainName
      - Uri
      - CreatedAt
      - LastUpdatedAt
      description: An integration in list of integrations.
    ListIntegrationsRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous ListIntegrations API
            call.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of objects returned per page.
        IncludeHidden:
          allOf:
          - $ref: '#/components/schemas/optionalBoolean'
          description: Boolean to indicate if hidden integration should be returned.
            Defaults to `False`.
      required:
      - DomainName
    ListIntegrationsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/IntegrationList'
          description: The list of ListIntegrations instances.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous ListIntegrations API
            call.
    ListObjectTypeAttributeItem:
      type: object
      properties:
        AttributeName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: Name of the attribute.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: When the attribute was last updated.
      required:
      - AttributeName
      - LastUpdatedAt
      description: Item that contains the attribute and when it was last updated.
    ListObjectTypeAttributesList:
      type: array
      items:
        $ref: '#/components/schemas/ListObjectTypeAttributeItem'
    ListObjectTypeAttributesRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of objects returned per page.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique identifier of the domain.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
      required:
      - DomainName
      - ObjectTypeName
    ListObjectTypeAttributesResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/ListObjectTypeAttributesList'
          description: The items returned as part of the response.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call.
    ListProfileObjectTypeItem:
      type: object
      properties:
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        Description:
          allOf:
          - $ref: '#/components/schemas/text'
          description: Description of the profile object type.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was most recently edited.
        MaxProfileObjectCount:
          allOf:
          - $ref: '#/components/schemas/minSize1'
          description: The amount of profile object max count assigned to the object
            type.
        MaxAvailableProfileObjectCount:
          allOf:
          - $ref: '#/components/schemas/minSize0'
          description: The amount of provisioned profile object max count available.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - ObjectTypeName
      - Description
      description: A ProfileObjectType instance.
    ListProfileObjectTypeTemplateItem:
      type: object
      properties:
        TemplateId:
          allOf:
          - $ref: '#/components/schemas/name'
          description: A unique identifier for the object template.
        SourceName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The name of the source of the object template.
        SourceObject:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The source of the object template.
      description: A ProfileObjectTypeTemplate in a list of ProfileObjectTypeTemplates.
    ListProfileObjectTypeTemplatesRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous ListObjectTypeTemplates
            API call.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of objects returned per page.
    ListProfileObjectTypeTemplatesResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/ProfileObjectTypeTemplateList'
          description: The list of ListProfileObjectType template instances.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous ListObjectTypeTemplates
            API call.
    ListProfileObjectTypesRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: Identifies the next page of results to return.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of objects returned per page.
      required:
      - DomainName
    ListProfileObjectTypesResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/ProfileObjectTypeList'
          description: The list of ListProfileObjectTypes instances.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: Identifies the next page of results to return.
    ListProfileObjectsItem:
      type: object
      properties:
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: Specifies the kind of object being added to a profile, such
            as "Salesforce-Account."
        ProfileObjectUniqueKey:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The unique identifier of the ProfileObject generated by the
            service.
        Object:
          allOf:
          - $ref: '#/components/schemas/stringifiedJson'
          description: A JSON representation of a ProfileObject that belongs to a
            profile.
      description: A ProfileObject in a list of ProfileObjects.
    ListProfileObjectsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call to ListProfileObjects.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of objects returned per page.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
        ObjectFilter:
          allOf:
          - $ref: '#/components/schemas/ObjectFilter'
          description: Applies a filter to the response to include profile objects
            with the specified index values.
      required:
      - DomainName
      - ObjectTypeName
      - ProfileId
    ListProfileObjectsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/ProfileObjectList'
          description: The list of ListProfileObject instances.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call to ListProfileObjects.
    ListRuleBasedMatchesRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous `ListRuleBasedMatches`
            API call.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of `MatchIds` returned per page.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
      required:
      - DomainName
    ListRuleBasedMatchesResponse:
      type: object
      properties:
        MatchIds:
          allOf:
          - $ref: '#/components/schemas/MatchIdList'
          description: The list of `MatchIds` for the given domain.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous `ListRuleBasedMatches`
            API call.
    ListSegmentDefinitionsRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique identifier of the domain.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxSize500'
          description: The maximum number of objects returned per page.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call.
      required:
      - DomainName
    ListSegmentDefinitionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous call.
        Items:
          allOf:
          - $ref: '#/components/schemas/SegmentDefinitionsList'
          description: List of segment definitions.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TagArn'
          description: The ARN of the resource for which you want to view tags.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
    ListWorkflowsItem:
      type: object
      properties:
        WorkflowType:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
        WorkflowId:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Unique identifier for the workflow.
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of workflow execution.
        StatusDescription:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Description for workflow execution status.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: Creation timestamp for workflow.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: Last updated timestamp for workflow.
      required:
      - WorkflowType
      - WorkflowId
      - Status
      - StatusDescription
      - CreatedAt
      - LastUpdatedAt
      description: A workflow in list of workflows.
    ListWorkflowsRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        WorkflowType:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of workflow execution.
        QueryStartDate:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: Retrieve workflows started after timestamp.
        QueryEndDate:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: Retrieve workflows ended after timestamp.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: The maximum number of results to return per page.
      required:
      - DomainName
    ListWorkflowsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/WorkflowList'
          description: List containing workflow details.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: If there are additional results, this is the token for the
            next set of results.
    MarketoConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - GREATER_THAN
      - BETWEEN
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    MarketoSourceProperties:
      type: object
      properties:
        Object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Marketo flow source.
      required:
      - Object
      description: The properties that are applied when Marketo is being used as a
        source.
    MatchIdList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    MatchItem:
      type: object
      properties:
        MatchId:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The unique identifiers for this group of profiles that match.
        ProfileIds:
          allOf:
          - $ref: '#/components/schemas/ProfileIdList'
          description: A list of identifiers for profiles that match.
        ConfidenceScore:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: A number between 0 and 1, where a higher score means higher
            similarity. Examining match confidence scores lets you distinguish between
            groups of similar records in which the system is highly confident (which
            you may decide to merge), groups of similar records about which the system
            is uncertain (which you may decide to have reviewed by a human), and groups
            of similar records that the system deems to be unlikely (which you may
            decide to reject). Given confidence scores vary as per the data input,
            it should not be used an absolute measure of matching quality.
      description: The Match group object.
    MatchType:
      type: string
      enum:
      - RULE_BASED_MATCHING
      - ML_BASED_MATCHING
    MatchesList:
      type: array
      items:
        $ref: '#/components/schemas/MatchItem'
    MatchingAttributes:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    MatchingAttributesList:
      type: array
      items:
        $ref: '#/components/schemas/MatchingAttributes'
    MatchingRequest:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/optionalBoolean'
          description: The flag that enables the matching process of duplicate profiles.
        JobSchedule:
          allOf:
          - $ref: '#/components/schemas/JobSchedule'
          description: The day and time when do you want to start the Identity Resolution
            Job every week.
        AutoMerging:
          allOf:
          - $ref: '#/components/schemas/AutoMerging'
          description: Configuration information about the auto-merging process.
        ExportingConfig:
          allOf:
          - $ref: '#/components/schemas/ExportingConfig'
          description: Configuration information for exporting Identity Resolution
            results, for example, to an S3 bucket.
      required:
      - Enabled
      description: The flag that enables the matching process of duplicate profiles.
    MatchingResponse:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/optionalBoolean'
          description: The flag that enables the matching process of duplicate profiles.
        JobSchedule:
          allOf:
          - $ref: '#/components/schemas/JobSchedule'
          description: The day and time when do you want to start the Identity Resolution
            Job every week.
        AutoMerging:
          allOf:
          - $ref: '#/components/schemas/AutoMerging'
          description: Configuration information about the auto-merging process.
        ExportingConfig:
          allOf:
          - $ref: '#/components/schemas/ExportingConfig'
          description: Configuration information for exporting Identity Resolution
            results, for example, to an S3 bucket.
      description: The flag that enables the matching process of duplicate profiles.
    MatchingRule:
      type: object
      properties:
        Rule:
          allOf:
          - $ref: '#/components/schemas/MatchingRuleAttributeList'
          description: A single rule level of the `MatchRules`. Configures how the
            rule-based matching process should match profiles.
      required:
      - Rule
      description: "Specifies how does the rule-based matching process should match\
        \ profiles. You can choose from the following attributes to build the matching\
        \ Rule:\n\n  * AccountNumber\n\n  * Address.Address\n\n  * Address.City\n\n\
        \  * Address.Country\n\n  * Address.County\n\n  * Address.PostalCode\n\n \
        \ * Address.State\n\n  * Address.Province\n\n  * BirthDate\n\n  * BusinessName\n\
        \n  * EmailAddress\n\n  * FirstName\n\n  * Gender\n\n  * LastName\n\n  * MiddleName\n\
        \n  * PhoneNumber\n\n  * Any customized profile attributes that start with\
        \ the `Attributes`"
    MatchingRuleAttributeList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    MatchingRules:
      type: array
      items:
        $ref: '#/components/schemas/MatchingRule'
    MaxAllowedRuleLevelForMatching:
      type: integer
      minimum: 1
      maximum: 15
    MaxAllowedRuleLevelForMerging:
      type: integer
      minimum: 1
      maximum: 15
    MaxSize500:
      type: integer
      minimum: 1
      maximum: 500
    MergeProfilesRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        MainProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The identifier of the profile to be taken.
        ProfileIdsToBeMerged:
          allOf:
          - $ref: '#/components/schemas/ProfileIdToBeMergedList'
          description: The identifier of the profile to be merged into MainProfileId.
        FieldSourceProfileIds:
          allOf:
          - $ref: '#/components/schemas/FieldSourceProfileIds'
          description: The identifiers of the fields in the profile that has the information
            you want to apply to the merge. For example, say you want to merge EmailAddress
            from Profile1 into MainProfile. This would be the identifier of the EmailAddress
            field in Profile1.
      required:
      - DomainName
      - MainProfileId
      - ProfileIdsToBeMerged
    MergeProfilesResponse:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/message'
          description: A message that indicates the merge request is complete.
    Object:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    ObjectAttribute:
      type: object
      properties:
        Source:
          allOf:
          - $ref: '#/components/schemas/text'
          description: An attribute contained within a source object.
        FieldName:
          allOf:
          - $ref: '#/components/schemas/fieldName'
          description: A field defined within an object type.
        ComparisonOperator:
          allOf:
          - $ref: '#/components/schemas/ComparisonOperator'
          description: The operator used to compare an attribute against a list of
            values.
        Values:
          allOf:
          - $ref: '#/components/schemas/EventTriggerValues'
          description: A list of attribute values used for comparison.
      required:
      - ComparisonOperator
      - Values
      description: The criteria that a specific object attribute must meet to trigger
        the destination.
    ObjectAttributes:
      type: array
      items:
        $ref: '#/components/schemas/ObjectAttribute'
    ObjectCount:
      type: integer
      minimum: 1
      maximum: 100
    ObjectFilter:
      type: object
      properties:
        KeyName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: 'A searchable identifier of a profile object. The predefined
            keys you can use to search for `_asset` include: `_assetId`, `_assetName`,
            and `_serialNumber`. The predefined keys you can use to search for `_case`
            include: `_caseId`. The predefined keys you can use to search for `_order`
            include: `_orderId`.'
        Values:
          allOf:
          - $ref: '#/components/schemas/requestValueList'
          description: A list of key values.
      required:
      - KeyName
      - Values
      description: The filter applied to `ListProfileObjects` response to include
        profile objects with the specified index values.
    ObjectTypeField:
      type: object
      properties:
        Source:
          allOf:
          - $ref: '#/components/schemas/text'
          description: 'A field of a ProfileObject. For example: _source.FirstName,
            where “_source” is a ProfileObjectType of a Zendesk user and “FirstName”
            is a field in that ObjectType.'
        Target:
          allOf:
          - $ref: '#/components/schemas/text'
          description: 'The location of the data in the standard ProfileObject model.
            For example: _profile.Address.PostalCode.'
        ContentType:
          allOf:
          - $ref: '#/components/schemas/FieldContentType'
          description: The content type of the field. Used for determining equality
            when searching.
      description: Represents a field in a ProfileObjectType.
    ObjectTypeKey:
      type: object
      properties:
        StandardIdentifiers:
          allOf:
          - $ref: '#/components/schemas/StandardIdentifierList'
          description: The types of keys that a ProfileObject can have. Each ProfileObject
            can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE, ASSET,
            CASE, or ORDER means that this key can be used to tie an object to a PROFILE,
            ASSET, CASE, or ORDER respectively. UNIQUE means that it can be used to
            uniquely identify an object. If a key a is marked as SECONDARY, it will
            be used to search for profiles after all other PROFILE keys have been
            searched. A LOOKUP_ONLY key is only used to match a profile but is not
            persisted to be used for searching of the profile. A NEW_ONLY key is only
            used if the profile does not already exist before the object is ingested,
            otherwise it is only used for matching objects to profiles.
        FieldNames:
          allOf:
          - $ref: '#/components/schemas/FieldNameList'
          description: The reference for the key name of the fields map.
      description: An object that defines the Key element of a ProfileObject. A Key
        is a special element that can be used to search for a customer profile.
    ObjectTypeKeyList:
      type: array
      items:
        $ref: '#/components/schemas/ObjectTypeKey'
    ObjectTypeNames:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/typeName'
    Objects:
      type: array
      items:
        $ref: '#/components/schemas/stringifiedJson'
      x-sensitive: true
    Operator:
      type: string
      enum:
      - EQUAL_TO
      - GREATER_THAN
      - LESS_THAN
      - NOT_EQUAL_TO
    OperatorPropertiesKeys:
      type: string
      enum:
      - VALUE
      - VALUES
      - DATA_TYPE
      - UPPER_BOUND
      - LOWER_BOUND
      - SOURCE_DATA_TYPE
      - DESTINATION_DATA_TYPE
      - VALIDATION_ACTION
      - MASK_VALUE
      - MASK_LENGTH
      - TRUNCATE_LENGTH
      - MATH_OPERATION_FIELDS_ORDER
      - CONCAT_FORMAT
      - SUBFIELD_CATEGORY_MAP
    PartyType:
      type: string
      enum:
      - INDIVIDUAL
      - BUSINESS
      - OTHER
    Period:
      type: object
      properties:
        Unit:
          allOf:
          - $ref: '#/components/schemas/PeriodUnit'
          description: The unit of time.
        Value:
          allOf:
          - $ref: '#/components/schemas/maxSize24'
          description: The amount of time of the specified unit.
        MaxInvocationsPerProfile:
          allOf:
          - $ref: '#/components/schemas/maxSize1000'
          description: The maximum allowed number of destination invocations per profile.
        Unlimited:
          allOf:
          - $ref: '#/components/schemas/boolean'
          description: If set to true, there is no limit on the number of destination
            invocations per profile. The default is false.
      required:
      - Unit
      - Value
      description: Defines a limit and the time period during which it is enforced.
    PeriodUnit:
      type: string
      enum:
      - HOURS
      - DAYS
      - WEEKS
      - MONTHS
    Periods:
      type: array
      items:
        $ref: '#/components/schemas/Period'
    PhoneNumberList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    Profile:
      type: object
      properties:
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
        AccountNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: An account number that you have given to the customer.
        AdditionalInformation:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To1000'
          description: Any additional information relevant to the customer’s profile.
        PartyType:
          allOf:
          - $ref: '#/components/schemas/PartyType'
          description: The type of profile used to describe the customer.
        BusinessName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The name of the customer’s business.
        FirstName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s first name.
        MiddleName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s middle name.
        LastName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s last name.
        BirthDate:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s birth date.
        Gender:
          allOf:
          - $ref: '#/components/schemas/Gender'
          description: The gender with which the customer identifies.
        PhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer's phone number, which has not been specified as
            a mobile, home, or business number.
        MobilePhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s mobile phone number.
        HomePhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s home phone number.
        BusinessPhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s home phone number.
        EmailAddress:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s email address, which has not been specified
            as a personal or business address.
        PersonalEmailAddress:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s personal email address.
        BusinessEmailAddress:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: The customer’s business email address.
        Address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: A generic address associated with the customer that is not
            mailing, shipping, or billing.
        ShippingAddress:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The customer’s shipping address.
        MailingAddress:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The customer’s mailing address.
        BillingAddress:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The customer’s billing address.
        Attributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: A key value pair of attributes of a customer profile.
        FoundByItems:
          allOf:
          - $ref: '#/components/schemas/foundByList'
          description: "A list of items used to find a profile returned in a [SearchProfiles](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html)\
            \ response. An item is a key-value(s) pair that matches an attribute in\
            \ the profile.\n\nIf the optional `AdditionalSearchKeys` parameter was\
            \ included in the [SearchProfiles](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html)\
            \ request, the `FoundByItems` list should be interpreted based on the\
            \ `LogicalOperator` used in the request:\n\n  * `AND` \\- The profile\
            \ included in the response matched all of the search keys specified in\
            \ the request. The `FoundByItems` will include all of the key-value(s)\
            \ pairs that were specified in the request (as this is a requirement of\
            \ `AND` search logic).\n\n  * `OR` \\- The profile included in the response\
            \ matched at least one of the search keys specified in the request. The\
            \ `FoundByItems` will include each of the key-value(s) pairs that the\
            \ profile was found by.\n\nThe `OR` relationship is the default behavior\
            \ if the `LogicalOperator` parameter is not included in the [SearchProfiles](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html)\
            \ request."
        PartyTypeString:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: An alternative to PartyType which accepts any string as input.
        GenderString:
          allOf:
          - $ref: '#/components/schemas/sensitiveString1To255'
          description: An alternative to Gender which accepts any string as input.
      description: The standard profile of a customer.
    ProfileAttributeValuesRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique identifier of the domain.
        AttributeName:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The attribute name.
      required:
      - DomainName
      - AttributeName
    ProfileAttributeValuesResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The name of the domain.
        AttributeName:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The attribute name.
        Items:
          allOf:
          - $ref: '#/components/schemas/AttributeValueItemList'
          description: The items returned as part of the response.
        StatusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The status code for the response.
    ProfileAttributes:
      type: object
      properties:
        AccountNumber:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within account number.
        AdditionalInformation:
          allOf:
          - $ref: '#/components/schemas/ExtraLengthValueProfileDimension'
          description: A field to describe values to segment on within additional
            information.
        FirstName:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within first name.
        LastName:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within last name.
        MiddleName:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within middle name.
        GenderString:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within genderString.
        PartyTypeString:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within partyTypeString.
        BirthDate:
          allOf:
          - $ref: '#/components/schemas/DateDimension'
          description: A field to describe values to segment on within birthDate.
        PhoneNumber:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within phone number.
        BusinessName:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within business name.
        BusinessPhoneNumber:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within business phone
            number.
        HomePhoneNumber:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within home phone
            number.
        MobilePhoneNumber:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within mobile phone
            number.
        EmailAddress:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within email address.
        PersonalEmailAddress:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within personal email
            address.
        BusinessEmailAddress:
          allOf:
          - $ref: '#/components/schemas/ProfileDimension'
          description: A field to describe values to segment on within business email
            address.
        Address:
          allOf:
          - $ref: '#/components/schemas/AddressDimension'
          description: A field to describe values to segment on within address.
        ShippingAddress:
          allOf:
          - $ref: '#/components/schemas/AddressDimension'
          description: A field to describe values to segment on within shipping address.
        MailingAddress:
          allOf:
          - $ref: '#/components/schemas/AddressDimension'
          description: A field to describe values to segment on within mailing address.
        BillingAddress:
          allOf:
          - $ref: '#/components/schemas/AddressDimension'
          description: A field to describe values to segment on within billing address.
        Attributes:
          allOf:
          - $ref: '#/components/schemas/CustomAttributes'
          description: A field to describe values to segment on within attributes.
      description: The object used to segment on attributes within the customer profile.
    ProfileDimension:
      type: object
      properties:
        DimensionType:
          allOf:
          - $ref: '#/components/schemas/StringDimensionType'
          description: The action to segment on.
        Values:
          allOf:
          - $ref: '#/components/schemas/Values'
          description: The values to apply the DimensionType on.
      required:
      - DimensionType
      - Values
      description: Object to hold the dimensions of a profile's fields to segment
        on.
    ProfileId:
      type: string
    ProfileIdList:
      type: array
      items:
        $ref: '#/components/schemas/uuid'
    ProfileIdToBeMergedList:
      type: array
      items:
        $ref: '#/components/schemas/uuid'
    ProfileIds:
      type: array
      items:
        $ref: '#/components/schemas/uuid'
    ProfileList:
      type: array
      items:
        $ref: '#/components/schemas/Profile'
    ProfileObjectList:
      type: array
      items:
        $ref: '#/components/schemas/ListProfileObjectsItem'
    ProfileObjectTypeList:
      type: array
      items:
        $ref: '#/components/schemas/ListProfileObjectTypeItem'
      x-sensitive: true
    ProfileObjectTypeTemplateList:
      type: array
      items:
        $ref: '#/components/schemas/ListProfileObjectTypeTemplateItem'
    ProfileQueryFailures:
      type: object
      properties:
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/ProfileId'
          description: The profile id the failure belongs to.
        Message:
          allOf:
          - $ref: '#/components/schemas/GetSegmentMembershipMessage'
          description: A message describing the failure.
        Status:
          allOf:
          - $ref: '#/components/schemas/GetSegmentMembershipStatus'
          description: The status describing the failure.
      required:
      - ProfileId
      - Message
      description: Object that holds failures for membership.
    ProfileQueryResult:
      type: object
      properties:
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/ProfileId'
          description: The profile id the result belongs to.
        QueryResult:
          allOf:
          - $ref: '#/components/schemas/QueryResult'
          description: Describes whether the profile was absent or present in the
            segment.
        Profile:
          $ref: '#/components/schemas/Profile'
      required:
      - ProfileId
      - QueryResult
      description: Object that holds the results for membership.
    Profiles:
      type: array
      items:
        $ref: '#/components/schemas/ProfileQueryResult'
    Property:
      type: string
      pattern: ^.+$
      minLength: 0
      maxLength: 2048
    PutIntegrationRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        Uri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
        FlowDefinition:
          allOf:
          - $ref: '#/components/schemas/FlowDefinition'
          description: The configuration that controls how Customer Profiles retrieves
            data from the source.
        ObjectTypeNames:
          allOf:
          - $ref: '#/components/schemas/ObjectTypeNames'
          description: 'A map in which each key is an event type from an external
            application such as Segment or Shopify, and each value is an `ObjectTypeName`
            (template) used to ingest the event. It supports the following event types:
            `SegmentIdentify`, `ShopifyCreateCustomers`, `ShopifyUpdateCustomers`,
            `ShopifyCreateDraftOrders`, `ShopifyUpdateDraftOrders`, `ShopifyCreateOrders`,
            and `ShopifyUpdatedOrders`.'
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. The Integration
            uses this role to make Customer Profiles requests on your behalf.
        EventTriggerNames:
          allOf:
          - $ref: '#/components/schemas/EventTriggerNames'
          description: A list of unique names for active event triggers associated
            with the integration.
      required:
      - DomainName
    PutIntegrationResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        Uri:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
        ObjectTypeNames:
          allOf:
          - $ref: '#/components/schemas/ObjectTypeNames'
          description: 'A map in which each key is an event type from an external
            application such as Segment or Shopify, and each value is an `ObjectTypeName`
            (template) used to ingest the event. It supports the following event types:
            `SegmentIdentify`, `ShopifyCreateCustomers`, `ShopifyUpdateCustomers`,
            `ShopifyCreateDraftOrders`, `ShopifyUpdateDraftOrders`, `ShopifyCreateOrders`,
            and `ShopifyUpdatedOrders`.'
        WorkflowId:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Unique identifier for the workflow.
        IsUnstructured:
          allOf:
          - $ref: '#/components/schemas/optionalBoolean'
          description: Boolean that shows if the Flow that's associated with the Integration
            is created in Amazon Appflow, or with ObjectTypeName equals _unstructured
            via API/CLI in flowDefinition.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. The Integration
            uses this role to make Customer Profiles requests on your behalf.
        EventTriggerNames:
          allOf:
          - $ref: '#/components/schemas/EventTriggerNames'
          description: A list of unique names for active event triggers associated
            with the integration. This list would be empty if no Event Trigger is
            associated with the integration.
      required:
      - DomainName
      - Uri
      - CreatedAt
      - LastUpdatedAt
    PutProfileObjectRequest:
      type: object
      properties:
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        Object:
          allOf:
          - $ref: '#/components/schemas/stringifiedJson'
          description: A string that is serialized from a JSON object.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
      required:
      - ObjectTypeName
      - Object
      - DomainName
    PutProfileObjectResponse:
      type: object
      properties:
        ProfileObjectUniqueKey:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The unique identifier of the profile object generated by the
            service.
    PutProfileObjectTypeRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: Description of the profile object type.
        TemplateId:
          allOf:
          - $ref: '#/components/schemas/name'
          description: 'A unique identifier for the object template. For some attributes
            in the request, the service will use the default value from the object
            template when TemplateId is present. If these attributes are present in
            the request, the service may return a `BadRequestException`. These attributes
            include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields,
            and Keys. For example, if AllowProfileCreation is set to true when TemplateId
            is set, the service may return a `BadRequestException`.'
        ExpirationDays:
          allOf:
          - $ref: '#/components/schemas/expirationDaysInteger'
          description: The number of days until the data in the object expires.
        EncryptionKey:
          allOf:
          - $ref: '#/components/schemas/encryptionKey'
          description: The customer-provided key to encrypt the profile object that
            will be created in this profile object type.
        AllowProfileCreation:
          allOf:
          - $ref: '#/components/schemas/boolean'
          description: Indicates whether a profile should be created when data is
            received if one doesn’t exist for an object of this type. The default
            is `FALSE`. If the AllowProfileCreation flag is set to `FALSE`, then the
            service tries to fetch a standard profile and associate this object with
            the profile. If it is set to `TRUE`, and if no match is found, then the
            service creates a new standard profile.
        SourceLastUpdatedTimestampFormat:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The format of your `sourceLastUpdatedTimestamp` that was previously
            set up.
        MaxProfileObjectCount:
          allOf:
          - $ref: '#/components/schemas/minSize1'
          description: The amount of profile object max count assigned to the object
            type
        Fields:
          allOf:
          - $ref: '#/components/schemas/FieldMap'
          description: A map of the name and ObjectType field.
        Keys:
          allOf:
          - $ref: '#/components/schemas/KeyMap'
          description: A list of unique keys that can be used to map data to the profile.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - ObjectTypeName
      - Description
    PutProfileObjectTypeResponse:
      type: object
      properties:
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The name of the profile object type.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: Description of the profile object type.
        TemplateId:
          allOf:
          - $ref: '#/components/schemas/name'
          description: A unique identifier for the object template.
        ExpirationDays:
          allOf:
          - $ref: '#/components/schemas/expirationDaysInteger'
          description: The number of days until the data in the object expires.
        EncryptionKey:
          allOf:
          - $ref: '#/components/schemas/encryptionKey'
          description: The customer-provided key to encrypt the profile object that
            will be created in this profile object type.
        AllowProfileCreation:
          allOf:
          - $ref: '#/components/schemas/boolean'
          description: Indicates whether a profile should be created when data is
            received if one doesn’t exist for an object of this type. The default
            is `FALSE`. If the AllowProfileCreation flag is set to `FALSE`, then the
            service tries to fetch a standard profile and associate this object with
            the profile. If it is set to `TRUE`, and if no match is found, then the
            service creates a new standard profile.
        SourceLastUpdatedTimestampFormat:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The format of your `sourceLastUpdatedTimestamp` that was previously
            set up in fields that were parsed using [SimpleDateFormat](https://docs.oracle.com/javase/10/docs/api/java/text/SimpleDateFormat.html).
            If you have `sourceLastUpdatedTimestamp` in your field, you must set up
            `sourceLastUpdatedTimestampFormat`.
        MaxProfileObjectCount:
          allOf:
          - $ref: '#/components/schemas/minSize1'
          description: The amount of profile object max count assigned to the object
            type.
        MaxAvailableProfileObjectCount:
          allOf:
          - $ref: '#/components/schemas/minSize0'
          description: The amount of provisioned profile object max count available.
        Fields:
          allOf:
          - $ref: '#/components/schemas/FieldMap'
          description: A map of the name and ObjectType field.
        Keys:
          allOf:
          - $ref: '#/components/schemas/KeyMap'
          description: A list of unique keys that can be used to map data to the profile.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - ObjectTypeName
      - Description
    QueryResult:
      type: string
      enum:
      - PRESENT
      - ABSENT
    Range:
      type: object
      properties:
        Value:
          allOf:
          - $ref: '#/components/schemas/Value'
          description: The amount of time of the specified unit.
        Unit:
          allOf:
          - $ref: '#/components/schemas/Unit'
          description: The unit of time.
      required:
      - Value
      - Unit
      description: The relative time period over which data is included in the aggregation.
    RangeOverride:
      type: object
      properties:
        Start:
          allOf:
          - $ref: '#/components/schemas/Start'
          description: The start time of when to include objects.
        End:
          allOf:
          - $ref: '#/components/schemas/End'
          description: The end time of when to include objects.
        Unit:
          allOf:
          - $ref: '#/components/schemas/RangeUnit'
          description: The unit for start and end.
      required:
      - Start
      - Unit
      description: Overrides the original range on a calculated attribute definition.
    RangeUnit:
      type: string
      enum:
      - DAYS
    ResourceNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/message'
      description: The requested resource does not exist, or access was denied.
    RoleArn:
      type: string
      pattern: '^arn:aws:iam:.*:[0-9]+:'
      minLength: 0
      maxLength: 512
    RuleBasedMatchingRequest:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/optionalBoolean'
          description: The flag that enables the rule-based matching process of duplicate
            profiles.
        MatchingRules:
          allOf:
          - $ref: '#/components/schemas/MatchingRules'
          description: Configures how the rule-based matching process should match
            profiles. You can have up to 15 `MatchingRule` in the `MatchingRules`.
        MaxAllowedRuleLevelForMerging:
          allOf:
          - $ref: '#/components/schemas/MaxAllowedRuleLevelForMerging'
          description: '[MatchingRule](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_MatchingRule.html)'
        MaxAllowedRuleLevelForMatching:
          allOf:
          - $ref: '#/components/schemas/MaxAllowedRuleLevelForMatching'
          description: Indicates the maximum allowed rule level.
        AttributeTypesSelector:
          allOf:
          - $ref: '#/components/schemas/AttributeTypesSelector'
          description: Configures information about the `AttributeTypesSelector` where
            the rule-based identity resolution uses to match profiles.
        ConflictResolution:
          $ref: '#/components/schemas/ConflictResolution'
        ExportingConfig:
          $ref: '#/components/schemas/ExportingConfig'
      required:
      - Enabled
      description: The request to enable the rule-based matching.
    RuleBasedMatchingResponse:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/optionalBoolean'
          description: The flag that enables the rule-based matching process of duplicate
            profiles.
        MatchingRules:
          allOf:
          - $ref: '#/components/schemas/MatchingRules'
          description: Configures how the rule-based matching process should match
            profiles. You can have up to 15 `MatchingRule` in the `MatchingRules`.
        Status:
          allOf:
          - $ref: '#/components/schemas/RuleBasedMatchingStatus'
          description: "PENDING\n\n  * The first status after configuration a rule-based\
            \ matching rule. If it is an existing domain, the rule-based Identity\
            \ Resolution waits one hour before creating the matching rule. If it is\
            \ a new domain, the system will skip the `PENDING` stage.\n\nIN_PROGRESS\n\
            \n  * The system is creating the rule-based matching rule. Under this\
            \ status, the system is evaluating the existing data and you can no longer\
            \ change the Rule-based matching configuration.\n\nACTIVE\n\n  * The rule\
            \ is ready to use. You can change the rule a day after the status is in\
            \ `ACTIVE`."
        MaxAllowedRuleLevelForMerging:
          allOf:
          - $ref: '#/components/schemas/MaxAllowedRuleLevelForMerging'
          description: '[MatchingRule](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_MatchingRule.html)'
        MaxAllowedRuleLevelForMatching:
          allOf:
          - $ref: '#/components/schemas/MaxAllowedRuleLevelForMatching'
          description: Indicates the maximum allowed rule level.
        AttributeTypesSelector:
          allOf:
          - $ref: '#/components/schemas/AttributeTypesSelector'
          description: Configures information about the `AttributeTypesSelector` where
            the rule-based identity resolution uses to match profiles.
        ConflictResolution:
          $ref: '#/components/schemas/ConflictResolution'
        ExportingConfig:
          $ref: '#/components/schemas/ExportingConfig'
      description: The response of the Rule-based matching request.
    RuleBasedMatchingStatus:
      type: string
      enum:
      - PENDING
      - IN_PROGRESS
      - ACTIVE
    RuleLevel:
      type: integer
      minimum: 1
      maximum: 15
    S3ConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - GREATER_THAN
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - NOT_EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    S3ExportingConfig:
      type: object
      properties:
        S3BucketName:
          allOf:
          - $ref: '#/components/schemas/s3BucketName'
          description: The name of the S3 bucket where Identity Resolution Jobs write
            result files.
        S3KeyName:
          allOf:
          - $ref: '#/components/schemas/s3KeyNameCustomerOutputConfig'
          description: The S3 key name of the location where Identity Resolution Jobs
            write result files.
      required:
      - S3BucketName
      description: Configuration information about the S3 bucket where Identity Resolution
        Jobs write result files.
    S3ExportingLocation:
      type: object
      properties:
        S3BucketName:
          allOf:
          - $ref: '#/components/schemas/s3BucketName'
          description: The name of the S3 bucket name where Identity Resolution Jobs
            write result files.
        S3KeyName:
          allOf:
          - $ref: '#/components/schemas/s3KeyName'
          description: The S3 key name of the location where Identity Resolution Jobs
            write result files.
      description: The S3 location where Identity Resolution Jobs write result files.
    S3SourceProperties:
      type: object
      properties:
        BucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          description: The Amazon S3 bucket name where the source files are stored.
        BucketPrefix:
          allOf:
          - $ref: '#/components/schemas/BucketPrefix'
          description: The object key for the Amazon S3 bucket in which the source
            files are stored.
      required:
      - BucketName
      description: The properties that are applied when Amazon S3 is being used as
        the flow source.
    SalesforceConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - CONTAINS
      - GREATER_THAN
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - NOT_EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    SalesforceSourceProperties:
      type: object
      properties:
        Object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Salesforce flow source.
        EnableDynamicFieldUpdate:
          allOf:
          - $ref: '#/components/schemas/boolean'
          description: The flag that enables dynamic fetching of new (recently added)
            fields in the Salesforce objects while running a flow.
        IncludeDeletedRecords:
          allOf:
          - $ref: '#/components/schemas/boolean'
          description: Indicates whether Amazon AppFlow includes deleted files in
            the flow run.
      required:
      - Object
      description: The properties that are applied when Salesforce is being used as
        a source.
    ScheduleExpression:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    ScheduleOffset:
      type: integer
      format: int64
      default: 0
      minimum: 0
      maximum: 36000
    ScheduledTriggerProperties:
      type: object
      properties:
        ScheduleExpression:
          allOf:
          - $ref: '#/components/schemas/ScheduleExpression'
          description: The scheduling expression that determines the rate at which
            the schedule will run, for example rate (5 minutes).
        DataPullMode:
          allOf:
          - $ref: '#/components/schemas/DataPullMode'
          description: Specifies whether a scheduled flow has an incremental data
            transfer or a complete data transfer for each flow run.
        ScheduleStartTime:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies the scheduled start time for a scheduled-trigger
            flow.
        ScheduleEndTime:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies the scheduled end time for a scheduled-trigger flow.
        Timezone:
          allOf:
          - $ref: '#/components/schemas/Timezone'
          description: Specifies the time zone used when referring to the date and
            time of a scheduled-triggered flow, such as America/New_York.
        ScheduleOffset:
          allOf:
          - $ref: '#/components/schemas/ScheduleOffset'
          description: Specifies the optional offset that is added to the time interval
            for a schedule-triggered flow.
        FirstExecutionFrom:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies the date range for the records to import from the
            connector in the first flow run.
      required:
      - ScheduleExpression
      description: Specifies the configuration details of a scheduled-trigger flow
        that you define. Currently, these settings only apply to the scheduled-trigger
        type.
    SearchProfilesRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous SearchProfiles API call.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/maxSize100'
          description: 'The maximum number of objects returned per page.


            The default is 20 if this parameter is not included in the request.'
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        KeyName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: 'A searchable identifier of a customer profile. The predefined
            keys you can use to search include: _account, _profileId, _assetId, _caseId,
            _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId,
            _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId,
            _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId,
            _shopifyCustomerId, _shopifyOrderId.'
        Values:
          allOf:
          - $ref: '#/components/schemas/requestValueList'
          description: A list of key values.
        AdditionalSearchKeys:
          allOf:
          - $ref: '#/components/schemas/additionalSearchKeysList'
          description: A list of `AdditionalSearchKey` objects that are each searchable
            identifiers of a profile. Each `AdditionalSearchKey` object contains a
            `KeyName` and a list of `Values` associated with that specific key (i.e.,
            a key-value(s) pair). These additional search keys will be used in conjunction
            with the `LogicalOperator` and the required `KeyName` and `Values` parameters
            to search for profiles that satisfy the search criteria.
        LogicalOperator:
          allOf:
          - $ref: '#/components/schemas/logicalOperator'
          description: "Relationship between all specified search keys that will be\
            \ used to search for profiles. This includes the required `KeyName` and\
            \ `Values` parameters as well as any key-value(s) pairs specified in the\
            \ `AdditionalSearchKeys` list.\n\nThis parameter influences which profiles\
            \ will be returned in the response in the following manner:\n\n  * `AND`\
            \ \\- The response only includes profiles that match all of the search\
            \ keys.\n\n  * `OR` \\- The response includes profiles that match at least\
            \ one of the search keys.\n\nThe `OR` relationship is the default behavior\
            \ if this parameter is not included in the request."
      required:
      - DomainName
      - KeyName
      - Values
    SearchProfilesResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/ProfileList'
          description: The list of Profiles matching the search criteria.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/token'
          description: The pagination token from the previous SearchProfiles API call.
    SegmentDefinitionArn:
      type: string
      minLength: 1
      maxLength: 255
    SegmentDefinitionItem:
      type: object
      properties:
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: Name of the segment definition.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: Display name of the segment definition.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the segment definition.
        SegmentDefinitionArn:
          allOf:
          - $ref: '#/components/schemas/SegmentDefinitionArn'
          description: The arn of the segment definition.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: When the segment definition was created.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags belonging to the segment definition.
      description: Object holding the segment definition fields.
    SegmentDefinitionsList:
      type: array
      items:
        $ref: '#/components/schemas/SegmentDefinitionItem'
    SegmentGroup:
      type: object
      properties:
        Groups:
          allOf:
          - $ref: '#/components/schemas/SegmentGroupList'
          description: Holds the list of groups within the segment definition.
        Include:
          allOf:
          - $ref: '#/components/schemas/IncludeOptions'
          description: Defines whether to include or exclude the profiles that fit
            the segment criteria.
      description: Contains all groups of the segment definition.
    SegmentGroupList:
      type: array
      items:
        $ref: '#/components/schemas/Group'
    SegmentGroupStructure:
      type: object
      properties:
        Groups:
          allOf:
          - $ref: '#/components/schemas/SegmentGroupList'
          description: Holds the list of groups within the segment definition.
        Include:
          allOf:
          - $ref: '#/components/schemas/IncludeOptions'
          description: Define whether to include or exclude the profiles that fit
            the segment criteria.
      description: Contains all groups of the segment definition.
    SegmentSnapshotStatus:
      type: string
      enum:
      - COMPLETED
      - IN_PROGRESS
      - FAILED
    ServiceNowConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - CONTAINS
      - LESS_THAN
      - GREATER_THAN
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - NOT_EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    ServiceNowSourceProperties:
      type: object
      properties:
        Object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the ServiceNow flow source.
      required:
      - Object
      description: The properties that are applied when ServiceNow is being used as
        a source.
    SourceConnectorProperties:
      type: object
      properties:
        Marketo:
          allOf:
          - $ref: '#/components/schemas/MarketoSourceProperties'
          description: The properties that are applied when Marketo is being used
            as a source.
        S3:
          allOf:
          - $ref: '#/components/schemas/S3SourceProperties'
          description: The properties that are applied when Amazon S3 is being used
            as the flow source.
        Salesforce:
          allOf:
          - $ref: '#/components/schemas/SalesforceSourceProperties'
          description: The properties that are applied when Salesforce is being used
            as a source.
        ServiceNow:
          allOf:
          - $ref: '#/components/schemas/ServiceNowSourceProperties'
          description: The properties that are applied when ServiceNow is being used
            as a source.
        Zendesk:
          allOf:
          - $ref: '#/components/schemas/ZendeskSourceProperties'
          description: The properties that are applied when using Zendesk as a flow
            source.
      description: Specifies the information that is required to query a particular
        Amazon AppFlow connector. Customer Profiles supports Salesforce, Zendesk,
        Marketo, ServiceNow and Amazon S3.
    SourceConnectorType:
      type: string
      enum:
      - Salesforce
      - Marketo
      - Zendesk
      - Servicenow
      - S3
    SourceFields:
      type: array
      items:
        $ref: '#/components/schemas/stringTo2048'
    SourceFlowConfig:
      type: object
      properties:
        ConnectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: The name of the AppFlow connector profile. This name must be
            unique for each connector profile in the AWS account.
        ConnectorType:
          allOf:
          - $ref: '#/components/schemas/SourceConnectorType'
          description: The type of connector, such as Salesforce, Marketo, and so
            on.
        IncrementalPullConfig:
          allOf:
          - $ref: '#/components/schemas/IncrementalPullConfig'
          description: Defines the configuration for a scheduled incremental data
            pull. If a valid configuration is provided, the fields specified in the
            configuration are used when querying for the incremental data pull.
        SourceConnectorProperties:
          allOf:
          - $ref: '#/components/schemas/SourceConnectorProperties'
          description: Specifies the information that is required to query a particular
            source connector.
      required:
      - ConnectorType
      - SourceConnectorProperties
      description: Contains information about the configuration of the source connector
        used in the flow.
    SourceSegment:
      type: object
      properties:
        SegmentDefinitionName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the segment definition.
      description: The source segments to build off of.
    SourceSegmentList:
      type: array
      items:
        $ref: '#/components/schemas/SourceSegment'
    StandardIdentifier:
      type: string
      enum:
      - PROFILE
      - ASSET
      - CASE
      - ORDER
      - COMMUNICATION_RECORD
      - UNIQUE
      - SECONDARY
      - LOOKUP_ONLY
      - NEW_ONLY
    StandardIdentifierList:
      type: array
      items:
        $ref: '#/components/schemas/StandardIdentifier'
    Start:
      type: integer
      minimum: 1
      maximum: 366
    Statistic:
      type: string
      enum:
      - FIRST_OCCURRENCE
      - LAST_OCCURRENCE
      - COUNT
      - SUM
      - MINIMUM
      - MAXIMUM
      - AVERAGE
      - MAX_OCCURRENCE
    Status:
      type: string
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - COMPLETE
      - FAILED
      - SPLIT
      - RETRY
      - CANCELLED
    StatusCode:
      type: integer
      default: 0
    StringDimensionType:
      type: string
      enum:
      - INCLUSIVE
      - EXCLUSIVE
      - CONTAINS
      - BEGINS_WITH
      - ENDS_WITH
    TagArn:
      type: string
      pattern: ^arn:[a-z0-9]{1,10}:profile$
      minLength: 0
      maxLength: 256
    TagKey:
      type: string
      pattern: ^(?!aws:)[a-zA-Z+-=._:/]+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TagArn'
          description: The ARN of the resource that you're adding tags to.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Task:
      type: object
      properties:
        ConnectorOperator:
          allOf:
          - $ref: '#/components/schemas/ConnectorOperator'
          description: The operation to be performed on the provided source fields.
        DestinationField:
          allOf:
          - $ref: '#/components/schemas/DestinationField'
          description: A field in a destination connector, or a field value against
            which Amazon AppFlow validates a source field.
        SourceFields:
          allOf:
          - $ref: '#/components/schemas/SourceFields'
          description: The source fields to which a particular task is applied.
        TaskProperties:
          allOf:
          - $ref: '#/components/schemas/TaskPropertiesMap'
          description: A map used to store task-related information. The service looks
            for particular information based on the TaskType.
        TaskType:
          allOf:
          - $ref: '#/components/schemas/TaskType'
          description: Specifies the particular task implementation that Amazon AppFlow
            performs.
      required:
      - SourceFields
      - TaskType
      description: A class for modeling different type of tasks. Task implementation
        varies based on the TaskType.
    TaskPropertiesMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Property'
    TaskType:
      type: string
      enum:
      - Arithmetic
      - Filter
      - Map
      - Mask
      - Merge
      - Truncate
      - Validate
    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    Threshold:
      type: object
      properties:
        Value:
          allOf:
          - $ref: '#/components/schemas/string1To255'
          description: The value of the threshold.
        Operator:
          allOf:
          - $ref: '#/components/schemas/Operator'
          description: The operator of the threshold.
      required:
      - Value
      - Operator
      description: The threshold for the calculated attribute.
    ThrottlingException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/message'
      description: You exceeded the maximum number of requests.
    Timezone:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    TriggerConfig:
      type: object
      properties:
        TriggerType:
          allOf:
          - $ref: '#/components/schemas/TriggerType'
          description: Specifies the type of flow trigger. It can be OnDemand, Scheduled,
            or Event.
        TriggerProperties:
          allOf:
          - $ref: '#/components/schemas/TriggerProperties'
          description: Specifies the configuration details of a schedule-triggered
            flow that you define. Currently, these settings only apply to the Scheduled
            trigger type.
      required:
      - TriggerType
      description: The trigger settings that determine how and when Amazon AppFlow
        runs the specified flow.
    TriggerProperties:
      type: object
      properties:
        Scheduled:
          allOf:
          - $ref: '#/components/schemas/ScheduledTriggerProperties'
          description: Specifies the configuration details of a schedule-triggered
            flow that you define.
      description: Specifies the configuration details that control the trigger for
        a flow. Currently, these settings only apply to the Scheduled trigger type.
    TriggerType:
      type: string
      enum:
      - Scheduled
      - Event
      - OnDemand
    Type:
      type: string
      enum:
      - ALL
      - ANY
      - NONE
    Unit:
      type: string
      enum:
      - DAYS
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TagArn'
          description: The ARN of the resource from which you are removing tags.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The list of tag keys to remove from the resource.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateAddress:
      type: object
      properties:
        Address1:
          allOf:
          - $ref: '#/components/schemas/string0To255'
          description: The first line of a customer address.
        Address2:
          allOf:
          - $ref: '#/components/schemas/string0To255'
          description: The second line of a customer address.
        Address3:
          allOf:
          - $ref: '#/components/schemas/string0To255'
          description: The third line of a customer address.
        Address4:
          allOf:
          - $ref: '#/components/schemas/string0To255'
          description: The fourth line of a customer address.
        City:
          allOf:
          - $ref: '#/components/schemas/string0To255'
          description: The city in which a customer lives.
        County:
          allOf:
          - $ref: '#/components/schemas/string0To255'
          description: The county in which a customer lives.
        State:
          allOf:
          - $ref: '#/components/schemas/string0To255'
          description: The state in which a customer lives.
        Province:
          allOf:
          - $ref: '#/components/schemas/string0To255'
          description: The province in which a customer lives.
        Country:
          allOf:
          - $ref: '#/components/schemas/string0To255'
          description: The country in which a customer lives.
        PostalCode:
          allOf:
          - $ref: '#/components/schemas/string0To255'
          description: The postal code of a customer address.
      description: Updates associated with the address properties of a customer profile.
    UpdateAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/string0To255'
    UpdateCalculatedAttributeDefinitionRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The display name of the calculated attribute.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the calculated attribute.
        Conditions:
          allOf:
          - $ref: '#/components/schemas/Conditions'
          description: The conditions including range, object count, and threshold
            for the calculated attribute.
      required:
      - DomainName
      - CalculatedAttributeName
    UpdateCalculatedAttributeDefinitionResponse:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The display name of the calculated attribute.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the calculated attribute.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the calculated attribute definition was
            created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the calculated attribute definition was
            most recently edited.
        Statistic:
          allOf:
          - $ref: '#/components/schemas/Statistic'
          description: The aggregation operation to perform for the calculated attribute.
        Conditions:
          allOf:
          - $ref: '#/components/schemas/Conditions'
          description: The conditions including range, object count, and threshold
            for the calculated attribute.
        AttributeDetails:
          allOf:
          - $ref: '#/components/schemas/AttributeDetails'
          description: The mathematical expression and a list of attribute items specified
            in that expression.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
    UpdateDomainRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        DefaultExpirationDays:
          allOf:
          - $ref: '#/components/schemas/expirationDaysInteger'
          description: The default number of days until the data within the domain
            expires.
        DefaultEncryptionKey:
          allOf:
          - $ref: '#/components/schemas/encryptionKey'
          description: The default encryption key, which is an AWS managed key, is
            used when no specific type of encryption key is specified. It is used
            to encrypt all data before it is placed in permanent or semi-permanent
            storage. If specified as an empty string, it will clear any existing value.
        DeadLetterQueueUrl:
          allOf:
          - $ref: '#/components/schemas/sqsQueueUrl'
          description: The URL of the SQS dead letter queue, which is used for reporting
            errors associated with ingesting data from third party applications. If
            specified as an empty string, it will clear any existing value. You must
            set up a policy on the DeadLetterQueue for the SendMessage operation to
            enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.
        Matching:
          allOf:
          - $ref: '#/components/schemas/MatchingRequest'
          description: 'The process of matching duplicate profiles. If `Matching`
            = `true`, Amazon Connect Customer Profiles starts a weekly batch process
            called Identity Resolution Job. If you do not specify a date and time
            for Identity Resolution Job to run, by default it runs every Saturday
            at 12AM UTC to detect duplicate profiles in your domains.


            After the Identity Resolution Job completes, use the [GetMatches](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html)
            API to return and review the results. Or, if you have configured `ExportingConfig`
            in the `MatchingRequest`, you can download the results from S3.'
        RuleBasedMatching:
          allOf:
          - $ref: '#/components/schemas/RuleBasedMatchingRequest'
          description: The process of matching duplicate profiles using the rule-Based
            matching. If `RuleBasedMatching` = true, Amazon Connect Customer Profiles
            will start to match and merge your profiles according to your configuration
            in the `RuleBasedMatchingRequest`. You can use the `ListRuleBasedMatches`
            and `GetSimilarProfiles` API to return and review the results. Also, if
            you have configured `ExportingConfig` in the `RuleBasedMatchingRequest`,
            you can download the results from S3.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
    UpdateDomainResponse:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        DefaultExpirationDays:
          allOf:
          - $ref: '#/components/schemas/expirationDaysInteger'
          description: The default number of days until the data within the domain
            expires.
        DefaultEncryptionKey:
          allOf:
          - $ref: '#/components/schemas/encryptionKey'
          description: The default encryption key, which is an AWS managed key, is
            used when no specific type of encryption key is specified. It is used
            to encrypt all data before it is placed in permanent or semi-permanent
            storage.
        DeadLetterQueueUrl:
          allOf:
          - $ref: '#/components/schemas/sqsQueueUrl'
          description: The URL of the SQS dead letter queue, which is used for reporting
            errors associated with ingesting data from third party applications.
        Matching:
          allOf:
          - $ref: '#/components/schemas/MatchingResponse'
          description: 'The process of matching duplicate profiles. If `Matching`
            = `true`, Amazon Connect Customer Profiles starts a weekly batch process
            called Identity Resolution Job. If you do not specify a date and time
            for Identity Resolution Job to run, by default it runs every Saturday
            at 12AM UTC to detect duplicate profiles in your domains.


            After the Identity Resolution Job completes, use the [GetMatches](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html)
            API to return and review the results. Or, if you have configured `ExportingConfig`
            in the `MatchingRequest`, you can download the results from S3.'
        RuleBasedMatching:
          allOf:
          - $ref: '#/components/schemas/RuleBasedMatchingResponse'
          description: The process of matching duplicate profiles using the rule-Based
            matching. If `RuleBasedMatching` = true, Amazon Connect Customer Profiles
            will start to match and merge your profiles according to your configuration
            in the `RuleBasedMatchingRequest`. You can use the `ListRuleBasedMatches`
            and `GetSimilarProfiles` API to return and review the results. Also, if
            you have configured `ExportingConfig` in the `RuleBasedMatchingRequest`,
            you can download the results from S3.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - DomainName
      - CreatedAt
      - LastUpdatedAt
    UpdateEventTriggerRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        EventTriggerName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the event trigger.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the object type.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the event trigger.
        EventTriggerConditions:
          allOf:
          - $ref: '#/components/schemas/EventTriggerConditions'
          description: A list of conditions that determine when an event should trigger
            the destination.
        SegmentFilter:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The destination is triggered only for profiles that meet the
            criteria of a segment definition.
        EventTriggerLimits:
          allOf:
          - $ref: '#/components/schemas/EventTriggerLimits'
          description: Defines limits controlling whether an event triggers the destination,
            based on ingestion latency and the number of invocations per profile over
            specific time periods.
      required:
      - DomainName
      - EventTriggerName
    UpdateEventTriggerResponse:
      type: object
      properties:
        EventTriggerName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the event trigger.
        ObjectTypeName:
          allOf:
          - $ref: '#/components/schemas/typeName'
          description: The unique name of the object type.
        Description:
          allOf:
          - $ref: '#/components/schemas/sensitiveText'
          description: The description of the event trigger.
        EventTriggerConditions:
          allOf:
          - $ref: '#/components/schemas/EventTriggerConditions'
          description: A list of conditions that determine when an event should trigger
            the destination.
        SegmentFilter:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The destination is triggered only for profiles that meet the
            criteria of a segment definition.
        EventTriggerLimits:
          allOf:
          - $ref: '#/components/schemas/EventTriggerLimits'
          description: Defines limits controlling whether an event triggers the destination,
            based on ingestion latency and the number of invocations per profile over
            specific time periods.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the event trigger was created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/timestamp'
          description: The timestamp of when the event trigger was most recently updated.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: An array of key-value pairs to apply to this resource.
    UpdateProfileRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/name'
          description: The unique name of the domain.
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
        AdditionalInformation:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To1000'
          description: Any additional information relevant to the customer’s profile.
        AccountNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: An account number that you have given to the customer.
        PartyType:
          allOf:
          - $ref: '#/components/schemas/PartyType'
          description: The type of profile used to describe the customer.
        BusinessName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The name of the customer’s business.
        FirstName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s first name.
        MiddleName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s middle name.
        LastName:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s last name.
        BirthDate:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s birth date.
        Gender:
          allOf:
          - $ref: '#/components/schemas/Gender'
          description: The gender with which the customer identifies.
        PhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s phone number, which has not been specified as
            a mobile, home, or business number.
        MobilePhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s mobile phone number.
        HomePhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s home phone number.
        BusinessPhoneNumber:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s business phone number.
        EmailAddress:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s email address, which has not been specified
            as a personal or business address.
        PersonalEmailAddress:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s personal email address.
        BusinessEmailAddress:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: The customer’s business email address.
        Address:
          allOf:
          - $ref: '#/components/schemas/UpdateAddress'
          description: A generic address associated with the customer that is not
            mailing, shipping, or billing.
        ShippingAddress:
          allOf:
          - $ref: '#/components/schemas/UpdateAddress'
          description: The customer’s shipping address.
        MailingAddress:
          allOf:
          - $ref: '#/components/schemas/UpdateAddress'
          description: The customer’s mailing address.
        BillingAddress:
          allOf:
          - $ref: '#/components/schemas/UpdateAddress'
          description: The customer’s billing address.
        Attributes:
          allOf:
          - $ref: '#/components/schemas/UpdateAttributes'
          description: A key value pair of attributes of a customer profile.
        PartyTypeString:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: An alternative to `PartyType` which accepts any string as input.
        GenderString:
          allOf:
          - $ref: '#/components/schemas/sensitiveString0To255'
          description: An alternative to `Gender` which accepts any string as input.
      required:
      - DomainName
      - ProfileId
    UpdateProfileResponse:
      type: object
      properties:
        ProfileId:
          allOf:
          - $ref: '#/components/schemas/uuid'
          description: The unique identifier of a customer profile.
      required:
      - ProfileId
    Value:
      type: integer
      minimum: 1
      maximum: 366
    ValueList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    Values:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    WorkflowAttributes:
      type: object
      properties:
        AppflowIntegration:
          allOf:
          - $ref: '#/components/schemas/AppflowIntegrationWorkflowAttributes'
          description: Workflow attributes specific to `APPFLOW_INTEGRATION` workflow.
      description: Structure to hold workflow attributes.
    WorkflowList:
      type: array
      items:
        $ref: '#/components/schemas/ListWorkflowsItem'
    WorkflowMetrics:
      type: object
      properties:
        AppflowIntegration:
          allOf:
          - $ref: '#/components/schemas/AppflowIntegrationWorkflowMetrics'
          description: Workflow execution metrics for `APPFLOW_INTEGRATION` workflow.
      description: Generic object containing workflow execution metrics.
    WorkflowStepItem:
      type: object
      properties:
        AppflowIntegration:
          allOf:
          - $ref: '#/components/schemas/AppflowIntegrationWorkflowStep'
          description: Workflow step information specific to `APPFLOW_INTEGRATION`
            workflow.
      description: List containing steps in workflow.
    WorkflowStepsList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowStepItem'
    WorkflowType:
      type: string
      enum:
      - APPFLOW_INTEGRATION
    ZendeskConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - GREATER_THAN
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    ZendeskSourceProperties:
      type: object
      properties:
        Object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Zendesk flow source.
      required:
      - Object
      description: The properties that are applied when using Zendesk as a flow source.
    additionalSearchKeysList:
      type: array
      items:
        $ref: '#/components/schemas/AdditionalSearchKey'
    attributeName:
      type: string
      pattern: ^[a-zA-Z0-9_.-]+$
      minLength: 1
      maxLength: 64
    boolean:
      type: boolean
      default: false
    displayName:
      type: string
      pattern: ^[a-zA-Z_][a-zA-Z_0-9-\s]*$
      minLength: 1
      maxLength: 255
    encryptionKey:
      type: string
      minLength: 0
      maxLength: 255
    expirationDaysInteger:
      type: integer
      minimum: 1
      maximum: 1098
    fieldName:
      type: string
      pattern: ^[a-zA-Z0-9_.-]+$
      minLength: 1
      maxLength: 64
    foundByList:
      type: array
      items:
        $ref: '#/components/schemas/FoundByKeyValue'
    logicalOperator:
      type: string
      enum:
      - AND
      - OR
    long:
      type: integer
      format: int64
      default: 0
    matchesNumber:
      type: integer
      minimum: 0
    maxSize100:
      type: integer
      minimum: 1
      maximum: 100
    maxSize1000:
      type: integer
      minimum: 1
      maximum: 1000
    maxSize24:
      type: integer
      minimum: 1
      maximum: 24
    message:
      type: string
    minSize0:
      type: integer
      minimum: 0
    minSize1:
      type: integer
      minimum: 1
    name:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 64
    optionalBoolean:
      type: boolean
    optionalLong:
      type: integer
      format: int64
    requestValueList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    s3BucketName:
      type: string
      pattern: ^[a-z0-9.-]+$
      minLength: 3
      maxLength: 63
    s3KeyName:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 1024
    s3KeyNameCustomerOutputConfig:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 800
    sensitiveString0To1000:
      type: string
      minLength: 0
      maxLength: 1000
    sensitiveString0To255:
      type: string
      minLength: 0
      maxLength: 255
    sensitiveString1To1000:
      type: string
      minLength: 1
      maxLength: 1000
    sensitiveString1To255:
      type: string
      minLength: 1
      maxLength: 255
    sensitiveText:
      type: string
      minLength: 1
      maxLength: 1000
    sqsQueueUrl:
      type: string
      minLength: 0
      maxLength: 255
    string0To255:
      type: string
      minLength: 0
      maxLength: 255
    string1To1000:
      type: string
      minLength: 1
      maxLength: 1000
    string1To255:
      type: string
      minLength: 1
      maxLength: 255
    stringTo2048:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 2048
    stringifiedJson:
      type: string
      minLength: 1
      maxLength: 256000
    text:
      type: string
      minLength: 1
      maxLength: 1000
    timestamp:
      type: string
      format: date-time
    token:
      type: string
      minLength: 1
      maxLength: 1024
    typeName:
      type: string
      pattern: ^[a-zA-Z_][a-zA-Z_0-9-]*$
      minLength: 1
      maxLength: 255
    uuid:
      type: string
      pattern: ^[a-f0-9]{32}$
