openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: iot_events_data
  x-aws-serviceName: ioteventsdata
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-10-23'
  title: AWS IoT Events Data
  description: |-
    IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.

    For more information, see [What is IoT Events?](https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html) in the _IoT Events Developer Guide_.
servers:
- description: The AWS IoT Events Data regional endpoint
  url: https://data.iotevents.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /alarms/acknowledge:
    post:
      operationId: BatchAcknowledgeAlarm
      description: |-
        Acknowledges one or more alarms. The alarms change to the `ACKNOWLEDGED` state after you acknowledge them.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                acknowledgeActionRequests:
                  $ref: '#/components/schemas/AcknowledgeAlarmActionRequests'
      responses:
        '202': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /detectors/delete:
    post:
      operationId: BatchDeleteDetector
      description: |-
        Deletes one or more detectors that were created. When a detector is deleted, its state will be cleared and the detector will be removed from the list of detectors. The deleted detector will no longer appear if referenced in the [ListDetectors](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_ListDetectors.html) API call.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                detectors:
                  $ref: '#/components/schemas/DeleteDetectorRequests'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /alarms/disable:
    post:
      operationId: BatchDisableAlarm
      description: |-
        Disables one or more alarms. The alarms change to the `DISABLED` state after you disable them.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                disableActionRequests:
                  $ref: '#/components/schemas/DisableAlarmActionRequests'
      responses:
        '202': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /alarms/enable:
    post:
      operationId: BatchEnableAlarm
      description: |-
        Enables one or more alarms. The alarms change to the `NORMAL` state after you enable them.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enableActionRequests:
                  $ref: '#/components/schemas/EnableAlarmActionRequests'
      responses:
        '202': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /inputs/messages:
    post:
      operationId: BatchPutMessage
      description: |-
        Sends a set of messages to the IoT Events system. Each message payload is transformed into the input you specify (`"inputName"`) and ingested into any detectors that monitor that input. If multiple messages are sent, the order in which the messages are processed isn't guaranteed. To guarantee ordering, you must send messages one at a time and wait for a successful response.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  $ref: '#/components/schemas/Messages'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /alarms/reset:
    post:
      operationId: BatchResetAlarm
      description: |-
        Resets one or more alarms. The alarms return to the `NORMAL` state after you reset them.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resetActionRequests:
                  $ref: '#/components/schemas/ResetAlarmActionRequests'
      responses:
        '202': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /alarms/snooze:
    post:
      operationId: BatchSnoozeAlarm
      description: |-
        Changes one or more alarms to the snooze mode. The alarms change to the `SNOOZE_DISABLED` state after you set them to the snooze mode.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                snoozeActionRequests:
                  $ref: '#/components/schemas/SnoozeAlarmActionRequests'
      responses:
        '202': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /detectors:
    post:
      operationId: BatchUpdateDetector
      description: |-
        Updates the state, variable values, and timer settings of one or more detectors (instances) of a specified detector model.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                detectors:
                  $ref: '#/components/schemas/UpdateDetectorRequests'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /alarms/{alarmModelName}/keyValues:
    get:
      operationId: DescribeAlarm
      description: |-
        Retrieves information about an alarm.
      parameters:
      - name: alarmModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AlarmModelName'
      - name: keyValue
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/KeyValue'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /detectors/{detectorModelName}/keyValues:
    get:
      operationId: DescribeDetector
      description: |-
        Returns information about the specified detector (instance).
      parameters:
      - name: detectorModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DetectorModelName'
      - name: keyValue
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/KeyValue'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /alarms/{alarmModelName}:
    get:
      operationId: ListAlarms
      description: |-
        Lists one or more alarms. The operation returns only the metadata associated with each alarm.
      parameters:
      - name: alarmModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AlarmModelName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /detectors/{detectorModelName}:
    get:
      operationId: ListDetectors
      description: |-
        Lists detectors (the instances of a detector model).
      parameters:
      - name: detectorModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DetectorModelName'
      - name: stateName
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/StateName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
components:
  schemas:
    AcknowledgeActionConfiguration:
      type: object
      properties:
        note:
          allOf:
          - $ref: '#/components/schemas/Note'
          description: The note that you can leave when you acknowledge the alarm.
      description: Contains the configuration information of an acknowledge action.
    AcknowledgeAlarmActionRequest:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/RequestId'
          description: The request ID. Each ID must be unique within each batch.
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the key used as a filter to select only the alarms
            associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        note:
          allOf:
          - $ref: '#/components/schemas/Note'
          description: The note that you can leave when you acknowledge the alarm.
      required:
      - requestId
      - alarmModelName
      description: Information needed to acknowledge the alarm.
    AcknowledgeAlarmActionRequests:
      type: array
      items:
        $ref: '#/components/schemas/AcknowledgeAlarmActionRequest'
    Alarm:
      type: object
      properties:
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        alarmModelVersion:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersion'
          description: The version of the alarm model.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the key used as a filter to select only the alarms
            associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        alarmState:
          allOf:
          - $ref: '#/components/schemas/AlarmState'
          description: Contains information about the current state of the alarm.
        severity:
          allOf:
          - $ref: '#/components/schemas/Severity'
          description: A non-negative integer that reflects the severity level of
            the alarm.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm was created, in the Unix epoch format.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm was last updated, in the Unix epoch format.
      description: Contains information about an alarm.
    AlarmModelName:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 128
    AlarmModelVersion:
      type: string
      minLength: 1
      maxLength: 128
    AlarmState:
      type: object
      properties:
        stateName:
          allOf:
          - $ref: '#/components/schemas/AlarmStateName'
          description: "The name of the alarm state. The state name can be one of\
            \ the following values:\n\n  * `DISABLED` \\- When the alarm is in the\
            \ `DISABLED` state, it isn't ready to evaluate data. To enable the alarm,\
            \ you must change the alarm to the `NORMAL` state.\n\n  * `NORMAL` \\\
            - When the alarm is in the `NORMAL` state, it's ready to evaluate data.\n\
            \n  * `ACTIVE` \\- If the alarm is in the `ACTIVE` state, the alarm is\
            \ invoked.\n\n  * `ACKNOWLEDGED` \\- When the alarm is in the `ACKNOWLEDGED`\
            \ state, the alarm was invoked and you acknowledged the alarm.\n\n  *\
            \ `SNOOZE_DISABLED` \\- When the alarm is in the `SNOOZE_DISABLED` state,\
            \ the alarm is disabled for a specified period of time. After the snooze\
            \ time, the alarm automatically changes to the `NORMAL` state. \n\n  *\
            \ `LATCHED` \\- When the alarm is in the `LATCHED` state, the alarm was\
            \ invoked. However, the data that the alarm is currently evaluating is\
            \ within the specified range. To change the alarm to the `NORMAL` state,\
            \ you must acknowledge the alarm."
        ruleEvaluation:
          allOf:
          - $ref: '#/components/schemas/RuleEvaluation'
          description: Information needed to evaluate data.
        customerAction:
          allOf:
          - $ref: '#/components/schemas/CustomerAction'
          description: Contains information about the action that you can take to
            respond to the alarm.
        systemEvent:
          allOf:
          - $ref: '#/components/schemas/SystemEvent'
          description: Contains information about alarm state changes.
      description: Contains information about the current state of the alarm.
    AlarmStateName:
      type: string
      enum:
      - DISABLED
      - NORMAL
      - ACTIVE
      - ACKNOWLEDGED
      - SNOOZE_DISABLED
      - LATCHED
    AlarmSummaries:
      type: array
      items:
        $ref: '#/components/schemas/AlarmSummary'
    AlarmSummary:
      type: object
      properties:
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        alarmModelVersion:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersion'
          description: The version of the alarm model.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the key used as a filter to select only the alarms
            associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        stateName:
          allOf:
          - $ref: '#/components/schemas/AlarmStateName'
          description: "The name of the alarm state. The state name can be one of\
            \ the following values:\n\n  * `DISABLED` \\- When the alarm is in the\
            \ `DISABLED` state, it isn't ready to evaluate data. To enable the alarm,\
            \ you must change the alarm to the `NORMAL` state.\n\n  * `NORMAL` \\\
            - When the alarm is in the `NORMAL` state, it's ready to evaluate data.\n\
            \n  * `ACTIVE` \\- If the alarm is in the `ACTIVE` state, the alarm is\
            \ invoked.\n\n  * `ACKNOWLEDGED` \\- When the alarm is in the `ACKNOWLEDGED`\
            \ state, the alarm was invoked and you acknowledged the alarm.\n\n  *\
            \ `SNOOZE_DISABLED` \\- When the alarm is in the `SNOOZE_DISABLED` state,\
            \ the alarm is disabled for a specified period of time. After the snooze\
            \ time, the alarm automatically changes to the `NORMAL` state. \n\n  *\
            \ `LATCHED` \\- When the alarm is in the `LATCHED` state, the alarm was\
            \ invoked. However, the data that the alarm is currently evaluating is\
            \ within the specified range. To change the alarm to the `NORMAL` state,\
            \ you must acknowledge the alarm."
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm was created, in the Unix epoch format.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm was last updated, in the Unix epoch format.
      description: Contains a summary of an alarm.
    BatchAcknowledgeAlarmRequest:
      type: object
      properties:
        acknowledgeActionRequests:
          allOf:
          - $ref: '#/components/schemas/AcknowledgeAlarmActionRequests'
          description: The list of acknowledge action requests. You can specify up
            to 10 requests per operation.
      required:
      - acknowledgeActionRequests
    BatchAcknowledgeAlarmResponse:
      type: object
      properties:
        errorEntries:
          allOf:
          - $ref: '#/components/schemas/BatchAlarmActionErrorEntries'
          description: A list of errors associated with the request, or `null` if
            there are no errors. Each error entry contains an entry ID that helps
            you identify the entry that failed.
    BatchAlarmActionErrorEntries:
      type: array
      items:
        $ref: '#/components/schemas/BatchAlarmActionErrorEntry'
    BatchAlarmActionErrorEntry:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/RequestId'
          description: The request ID. Each ID must be unique within each batch.
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: The error code.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A message that describes the error.
      description: "Contains error messages associated with one of the following requests:\n\
        \n  * [BatchAcknowledgeAlarm](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchAcknowledgeAlarm.html)\n\
        \n  * [BatchDisableAlarm](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchDisableAlarm.html)\n\
        \n  * [BatchEnableAlarm](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchEnableAlarm.html)\n\
        \n  * [BatchResetAlarm](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchResetAlarm.html)\n\
        \n  * [BatchSnoozeAlarm](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchSnoozeAlarm.html)"
    BatchDeleteDetectorErrorEntries:
      type: array
      items:
        $ref: '#/components/schemas/BatchDeleteDetectorErrorEntry'
    BatchDeleteDetectorErrorEntry:
      type: object
      properties:
        messageId:
          allOf:
          - $ref: '#/components/schemas/MessageId'
          description: The ID of the message that caused the error. (See the value
            of the `"messageId"` in the [detectors](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchDeleteDetector.html#iotevents-iotevents-data_BatchDeleteDetector-request-detectors)
            object of the `DeleteDetectorRequest`.)
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: The error code.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A message that describes the error.
      description: Contains error messages associated with the deletion request.
    BatchDeleteDetectorRequest:
      type: object
      properties:
        detectors:
          allOf:
          - $ref: '#/components/schemas/DeleteDetectorRequests'
          description: The list of one or more detectors to be deleted.
      required:
      - detectors
    BatchDeleteDetectorResponse:
      type: object
      properties:
        batchDeleteDetectorErrorEntries:
          allOf:
          - $ref: '#/components/schemas/BatchDeleteDetectorErrorEntries'
          description: A list of errors associated with the request, or an empty array
            (`[]`) if there are no errors. Each error entry contains a `messageId`
            that helps you identify the entry that failed.
    BatchDisableAlarmRequest:
      type: object
      properties:
        disableActionRequests:
          allOf:
          - $ref: '#/components/schemas/DisableAlarmActionRequests'
          description: The list of disable action requests. You can specify up to
            10 requests per operation.
      required:
      - disableActionRequests
    BatchDisableAlarmResponse:
      type: object
      properties:
        errorEntries:
          allOf:
          - $ref: '#/components/schemas/BatchAlarmActionErrorEntries'
          description: A list of errors associated with the request, or `null` if
            there are no errors. Each error entry contains an entry ID that helps
            you identify the entry that failed.
    BatchEnableAlarmRequest:
      type: object
      properties:
        enableActionRequests:
          allOf:
          - $ref: '#/components/schemas/EnableAlarmActionRequests'
          description: The list of enable action requests. You can specify up to 10
            requests per operation.
      required:
      - enableActionRequests
    BatchEnableAlarmResponse:
      type: object
      properties:
        errorEntries:
          allOf:
          - $ref: '#/components/schemas/BatchAlarmActionErrorEntries'
          description: A list of errors associated with the request, or `null` if
            there are no errors. Each error entry contains an entry ID that helps
            you identify the entry that failed.
    BatchPutMessageErrorEntries:
      type: array
      items:
        $ref: '#/components/schemas/BatchPutMessageErrorEntry'
    BatchPutMessageErrorEntry:
      type: object
      properties:
        messageId:
          allOf:
          - $ref: '#/components/schemas/MessageId'
          description: The ID of the message that caused the error. (See the value
            corresponding to the `"messageId"` key in the `"message"` object.)
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: The error code.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A message that describes the error.
      description: Contains information about the errors encountered.
    BatchPutMessageRequest:
      type: object
      properties:
        messages:
          allOf:
          - $ref: '#/components/schemas/Messages'
          description: 'The list of messages to send. Each message has the following
            format: `''{ "messageId": "string", "inputName": "string", "payload":
            "string"}''`'
      required:
      - messages
    BatchPutMessageResponse:
      type: object
      properties:
        BatchPutMessageErrorEntries:
          allOf:
          - $ref: '#/components/schemas/BatchPutMessageErrorEntries'
          description: A list of any errors encountered when sending the messages.
    BatchResetAlarmRequest:
      type: object
      properties:
        resetActionRequests:
          allOf:
          - $ref: '#/components/schemas/ResetAlarmActionRequests'
          description: The list of reset action requests. You can specify up to 10
            requests per operation.
      required:
      - resetActionRequests
    BatchResetAlarmResponse:
      type: object
      properties:
        errorEntries:
          allOf:
          - $ref: '#/components/schemas/BatchAlarmActionErrorEntries'
          description: A list of errors associated with the request, or `null` if
            there are no errors. Each error entry contains an entry ID that helps
            you identify the entry that failed.
    BatchSnoozeAlarmRequest:
      type: object
      properties:
        snoozeActionRequests:
          allOf:
          - $ref: '#/components/schemas/SnoozeAlarmActionRequests'
          description: The list of snooze action requests. You can specify up to 10
            requests per operation.
      required:
      - snoozeActionRequests
    BatchSnoozeAlarmResponse:
      type: object
      properties:
        errorEntries:
          allOf:
          - $ref: '#/components/schemas/BatchAlarmActionErrorEntries'
          description: A list of errors associated with the request, or `null` if
            there are no errors. Each error entry contains an entry ID that helps
            you identify the entry that failed.
    BatchUpdateDetectorErrorEntries:
      type: array
      items:
        $ref: '#/components/schemas/BatchUpdateDetectorErrorEntry'
    BatchUpdateDetectorErrorEntry:
      type: object
      properties:
        messageId:
          allOf:
          - $ref: '#/components/schemas/MessageId'
          description: The `"messageId"` of the update request that caused the error.
            (The value of the `"messageId"` in the update request `"Detector"` object.)
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: The error code.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A message that describes the error.
      description: Information about the error that occurred when attempting to update
        a detector.
    BatchUpdateDetectorRequest:
      type: object
      properties:
        detectors:
          allOf:
          - $ref: '#/components/schemas/UpdateDetectorRequests'
          description: The list of detectors (instances) to update, along with the
            values to update.
      required:
      - detectors
    BatchUpdateDetectorResponse:
      type: object
      properties:
        batchUpdateDetectorErrorEntries:
          allOf:
          - $ref: '#/components/schemas/BatchUpdateDetectorErrorEntries'
          description: A list of those detector updates that resulted in errors. (If
            an error is listed here, the specific update did not occur.)
    ComparisonOperator:
      type: string
      enum:
      - GREATER
      - GREATER_OR_EQUAL
      - LESS
      - LESS_OR_EQUAL
      - EQUAL
      - NOT_EQUAL
    CustomerAction:
      type: object
      properties:
        actionName:
          allOf:
          - $ref: '#/components/schemas/CustomerActionName'
          description: "The name of the action. The action name can be one of the\
            \ following values:\n\n  * `SNOOZE` \\- When you snooze the alarm, the\
            \ alarm state changes to `SNOOZE_DISABLED`.\n\n  * `ENABLE` \\- When you\
            \ enable the alarm, the alarm state changes to `NORMAL`.\n\n  * `DISABLE`\
            \ \\- When you disable the alarm, the alarm state changes to `DISABLED`.\n\
            \n  * `ACKNOWLEDGE` \\- When you acknowledge the alarm, the alarm state\
            \ changes to `ACKNOWLEDGED`.\n\n  * `RESET` \\- When you reset the alarm,\
            \ the alarm state changes to `NORMAL`.\n\nFor more information, see the\
            \ [AlarmState](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_AlarmState.html)\
            \ API."
        snoozeActionConfiguration:
          allOf:
          - $ref: '#/components/schemas/SnoozeActionConfiguration'
          description: Contains the configuration information of a snooze action.
        enableActionConfiguration:
          allOf:
          - $ref: '#/components/schemas/EnableActionConfiguration'
          description: Contains the configuration information of an enable action.
        disableActionConfiguration:
          allOf:
          - $ref: '#/components/schemas/DisableActionConfiguration'
          description: Contains the configuration information of a disable action.
        acknowledgeActionConfiguration:
          allOf:
          - $ref: '#/components/schemas/AcknowledgeActionConfiguration'
          description: Contains the configuration information of an acknowledge action.
        resetActionConfiguration:
          allOf:
          - $ref: '#/components/schemas/ResetActionConfiguration'
          description: Contains the configuration information of a reset action.
      description: Contains information about the action that you can take to respond
        to the alarm.
    CustomerActionName:
      type: string
      enum:
      - SNOOZE
      - ENABLE
      - DISABLE
      - ACKNOWLEDGE
      - RESET
    DeleteDetectorRequest:
      type: object
      properties:
        messageId:
          allOf:
          - $ref: '#/components/schemas/MessageId'
          description: The ID to assign to the `DeleteDetectorRequest`. Each `"messageId"`
            must be unique within each batch sent.
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model that was used to create the
            detector instance.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateDetectorModel.html#iotevents-CreateDetectorModel-request-key)
            used to identify the detector.
      required:
      - messageId
      - detectorModelName
      description: Information used to delete the detector model.
    DeleteDetectorRequests:
      type: array
      items:
        $ref: '#/components/schemas/DeleteDetectorRequest'
    DescribeAlarmRequest:
      type: object
      properties:
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the key used as a filter to select only the alarms
            associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
      required:
      - alarmModelName
    DescribeAlarmResponse:
      type: object
      properties:
        alarm:
          allOf:
          - $ref: '#/components/schemas/Alarm'
          description: Contains information about an alarm.
    DescribeDetectorRequest:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model whose detectors (instances)
            you want information about.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: A filter used to limit results to detectors (instances) created
            because of the given key ID.
      required:
      - detectorModelName
    DescribeDetectorResponse:
      type: object
      properties:
        detector:
          allOf:
          - $ref: '#/components/schemas/Detector'
          description: Information about the detector (instance).
    Detector:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model that created this detector (instance).
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the key (identifying the device or system) that
            caused the creation of this detector (instance).
        detectorModelVersion:
          allOf:
          - $ref: '#/components/schemas/DetectorModelVersion'
          description: The version of the detector model that created this detector
            (instance).
        state:
          allOf:
          - $ref: '#/components/schemas/DetectorState'
          description: The current state of the detector (instance).
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the detector (instance) was created.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the detector (instance) was last updated.
      description: Information about the detector (instance).
    DetectorModelName:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 128
    DetectorModelVersion:
      type: string
      minLength: 1
      maxLength: 128
    DetectorState:
      type: object
      properties:
        stateName:
          allOf:
          - $ref: '#/components/schemas/StateName'
          description: The name of the state.
        variables:
          allOf:
          - $ref: '#/components/schemas/Variables'
          description: The current values of the detector's variables.
        timers:
          allOf:
          - $ref: '#/components/schemas/Timers'
          description: The current state of the detector's timers.
      required:
      - stateName
      - variables
      - timers
      description: Information about the current state of the detector instance.
    DetectorStateDefinition:
      type: object
      properties:
        stateName:
          allOf:
          - $ref: '#/components/schemas/StateName'
          description: The name of the new state of the detector (instance).
        variables:
          allOf:
          - $ref: '#/components/schemas/VariableDefinitions'
          description: The new values of the detector's variables. Any variable whose
            value isn't specified is cleared.
        timers:
          allOf:
          - $ref: '#/components/schemas/TimerDefinitions'
          description: The new values of the detector's timers. Any timer whose value
            isn't specified is cleared, and its timeout event won't occur.
      required:
      - stateName
      - variables
      - timers
      description: The new state, variable values, and timer settings of the detector
        (instance).
    DetectorStateSummary:
      type: object
      properties:
        stateName:
          allOf:
          - $ref: '#/components/schemas/StateName'
          description: The name of the state.
      description: Information about the detector state.
    DetectorSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DetectorSummary'
    DetectorSummary:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model that created this detector (instance).
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the key (identifying the device or system) that
            caused the creation of this detector (instance).
        detectorModelVersion:
          allOf:
          - $ref: '#/components/schemas/DetectorModelVersion'
          description: The version of the detector model that created this detector
            (instance).
        state:
          allOf:
          - $ref: '#/components/schemas/DetectorStateSummary'
          description: The current state of the detector (instance).
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the detector (instance) was created.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the detector (instance) was last updated.
      description: Information about the detector (instance).
    DisableActionConfiguration:
      type: object
      properties:
        note:
          allOf:
          - $ref: '#/components/schemas/Note'
          description: The note that you can leave when you disable the alarm.
      description: Contains the configuration information of a disable action.
    DisableAlarmActionRequest:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/RequestId'
          description: The request ID. Each ID must be unique within each batch.
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the key used as a filter to select only the alarms
            associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        note:
          allOf:
          - $ref: '#/components/schemas/Note'
          description: The note that you can leave when you disable the alarm.
      required:
      - requestId
      - alarmModelName
      description: Information used to disable the alarm.
    DisableAlarmActionRequests:
      type: array
      items:
        $ref: '#/components/schemas/DisableAlarmActionRequest'
    EnableActionConfiguration:
      type: object
      properties:
        note:
          allOf:
          - $ref: '#/components/schemas/Note'
          description: The note that you can leave when you enable the alarm.
      description: Contains the configuration information of an enable action.
    EnableAlarmActionRequest:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/RequestId'
          description: The request ID. Each ID must be unique within each batch.
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the key used as a filter to select only the alarms
            associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        note:
          allOf:
          - $ref: '#/components/schemas/Note'
          description: The note that you can leave when you enable the alarm.
      required:
      - requestId
      - alarmModelName
      description: Information needed to enable the alarm.
    EnableAlarmActionRequests:
      type: array
      items:
        $ref: '#/components/schemas/EnableAlarmActionRequest'
    EphemeralInputName:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9_.-]*$
      minLength: 1
      maxLength: 128
    EpochMilliTimestamp:
      type: integer
      format: int64
      minimum: 1
      maximum: 9223372036854775807
    ErrorCode:
      type: string
      enum:
      - ResourceNotFoundException
      - InvalidRequestException
      - InternalFailureException
      - ServiceUnavailableException
      - ThrottlingException
    ErrorMessage:
      type: string
    EventType:
      type: string
      enum:
      - STATE_CHANGE
    InputPropertyValue:
      type: string
    InternalFailureException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The message for the exception.
      description: An internal failure occurred.
    InvalidRequestException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The message for the exception.
      description: The request was invalid.
    KeyValue:
      type: string
      pattern: ^[a-zA-Z0-9\-_:]+$
      minLength: 1
      maxLength: 128
    ListAlarmsRequest:
      type: object
      properties:
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to be returned per request.
      required:
      - alarmModelName
    ListAlarmsResponse:
      type: object
      properties:
        alarmSummaries:
          allOf:
          - $ref: '#/components/schemas/AlarmSummaries'
          description: A list that summarizes each alarm.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results,
            or `null` if there are no more results.
    ListDetectorsRequest:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model whose detectors (instances)
            are listed.
        stateName:
          allOf:
          - $ref: '#/components/schemas/StateName'
          description: A filter that limits results to those detectors (instances)
            in the given state.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to be returned per request.
      required:
      - detectorModelName
    ListDetectorsResponse:
      type: object
      properties:
        detectorSummaries:
          allOf:
          - $ref: '#/components/schemas/DetectorSummaries'
          description: A list of summary information about the detectors (instances).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results,
            or `null` if there are no more results.
    MaxResults:
      type: integer
      minimum: 1
      maximum: 250
    Message:
      type: object
      properties:
        messageId:
          allOf:
          - $ref: '#/components/schemas/MessageId'
          description: The ID to assign to the message. Within each batch sent, each
            `"messageId"` must be unique.
        inputName:
          allOf:
          - $ref: '#/components/schemas/EphemeralInputName'
          description: The name of the input into which the message payload is transformed.
        payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          description: The payload of the message. This can be a JSON string or a
            Base-64-encoded string representing binary data (in which case you must
            decode it).
        timestamp:
          allOf:
          - $ref: '#/components/schemas/TimestampValue'
          description: The timestamp associated with the message.
      required:
      - messageId
      - inputName
      - payload
      description: Information about a message.
    MessageId:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 64
    Messages:
      type: array
      items:
        $ref: '#/components/schemas/Message'
    NextToken:
      type: string
    Note:
      type: string
      minLength: 0
      maxLength: 256
    Payload:
      type: string
      format: byte
    RequestId:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 64
    ResetActionConfiguration:
      type: object
      properties:
        note:
          allOf:
          - $ref: '#/components/schemas/Note'
          description: The note that you can leave when you reset the alarm.
      description: Contains the configuration information of a reset action.
    ResetAlarmActionRequest:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/RequestId'
          description: The request ID. Each ID must be unique within each batch.
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the key used as a filter to select only the alarms
            associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        note:
          allOf:
          - $ref: '#/components/schemas/Note'
          description: The note that you can leave when you reset the alarm.
      required:
      - requestId
      - alarmModelName
      description: Information needed to reset the alarm.
    ResetAlarmActionRequests:
      type: array
      items:
        $ref: '#/components/schemas/ResetAlarmActionRequest'
    ResourceNotFoundException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The message for the exception.
      description: The resource was not found.
    RuleEvaluation:
      type: object
      properties:
        simpleRuleEvaluation:
          allOf:
          - $ref: '#/components/schemas/SimpleRuleEvaluation'
          description: Information needed to compare two values with a comparison
            operator.
      description: Information needed to evaluate data.
    Seconds:
      type: integer
    ServiceUnavailableException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The message for the exception.
      description: The service is currently unavailable.
    Severity:
      type: integer
      minimum: 0
      maximum: 2147483647
    SimpleRuleEvaluation:
      type: object
      properties:
        inputPropertyValue:
          allOf:
          - $ref: '#/components/schemas/InputPropertyValue'
          description: The value of the input property, on the left side of the comparison
            operator.
        operator:
          allOf:
          - $ref: '#/components/schemas/ComparisonOperator'
          description: The comparison operator.
        thresholdValue:
          allOf:
          - $ref: '#/components/schemas/ThresholdValue'
          description: The threshold value, on the right side of the comparison operator.
      description: Information needed to compare two values with a comparison operator.
    SnoozeActionConfiguration:
      type: object
      properties:
        snoozeDuration:
          allOf:
          - $ref: '#/components/schemas/SnoozeDuration'
          description: The snooze time in seconds. The alarm automatically changes
            to the `NORMAL` state after this duration.
        note:
          allOf:
          - $ref: '#/components/schemas/Note'
          description: The note that you can leave when you snooze the alarm.
      description: Contains the configuration information of a snooze action.
    SnoozeAlarmActionRequest:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/RequestId'
          description: The request ID. Each ID must be unique within each batch.
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the key used as a filter to select only the alarms
            associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        note:
          allOf:
          - $ref: '#/components/schemas/Note'
          description: The note that you can leave when you snooze the alarm.
        snoozeDuration:
          allOf:
          - $ref: '#/components/schemas/SnoozeDuration'
          description: The snooze time in seconds. The alarm automatically changes
            to the `NORMAL` state after this duration.
      required:
      - requestId
      - alarmModelName
      - snoozeDuration
      description: Information needed to snooze the alarm.
    SnoozeAlarmActionRequests:
      type: array
      items:
        $ref: '#/components/schemas/SnoozeAlarmActionRequest'
    SnoozeDuration:
      type: integer
    StateChangeConfiguration:
      type: object
      properties:
        triggerType:
          allOf:
          - $ref: '#/components/schemas/TriggerType'
          description: The trigger type. If the value is `SNOOZE_TIMEOUT`, the snooze
            duration ends and the alarm automatically changes to the `NORMAL` state.
      description: Contains the configuration information of alarm state changes.
    StateName:
      type: string
      minLength: 1
      maxLength: 128
    SystemEvent:
      type: object
      properties:
        eventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: The event type. If the value is `STATE_CHANGE`, the event contains
            information about alarm state changes.
        stateChangeConfiguration:
          allOf:
          - $ref: '#/components/schemas/StateChangeConfiguration'
          description: Contains the configuration information of alarm state changes.
      description: Contains information about alarm state changes.
    ThresholdValue:
      type: string
    ThrottlingException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The message for the exception.
      description: The request could not be completed due to throttling.
    Timer:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/TimerName'
          description: The name of the timer.
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The expiration time for the timer.
      required:
      - name
      - timestamp
      description: The current state of a timer.
    TimerDefinition:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/TimerName'
          description: The name of the timer.
        seconds:
          allOf:
          - $ref: '#/components/schemas/Seconds'
          description: The new setting of the timer (the number of seconds before
            the timer elapses).
      required:
      - name
      - seconds
      description: The new setting of a timer.
    TimerDefinitions:
      type: array
      items:
        $ref: '#/components/schemas/TimerDefinition'
    TimerName:
      type: string
      minLength: 1
      maxLength: 128
    Timers:
      type: array
      items:
        $ref: '#/components/schemas/Timer'
    Timestamp:
      type: string
      format: date-time
    TimestampValue:
      type: object
      properties:
        timeInMillis:
          allOf:
          - $ref: '#/components/schemas/EpochMilliTimestamp'
          description: The value of the timestamp, in the Unix epoch format.
      description: Contains information about a timestamp.
    TriggerType:
      type: string
      enum:
      - SNOOZE_TIMEOUT
    UpdateDetectorRequest:
      type: object
      properties:
        messageId:
          allOf:
          - $ref: '#/components/schemas/MessageId'
          description: The ID to assign to the detector update `"message"`. Each `"messageId"`
            must be unique within each batch sent.
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model that created the detectors (instances).
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the input key attribute (identifying the device
            or system) that caused the creation of this detector (instance).
        state:
          allOf:
          - $ref: '#/components/schemas/DetectorStateDefinition'
          description: The new state, variable values, and timer settings of the detector
            (instance).
      required:
      - messageId
      - detectorModelName
      - state
      description: Information used to update the detector (instance).
    UpdateDetectorRequests:
      type: array
      items:
        $ref: '#/components/schemas/UpdateDetectorRequest'
    Variable:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/VariableName'
          description: The name of the variable.
        value:
          allOf:
          - $ref: '#/components/schemas/VariableValue'
          description: The current value of the variable.
      required:
      - name
      - value
      description: The current state of the variable.
    VariableDefinition:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/VariableName'
          description: The name of the variable.
        value:
          allOf:
          - $ref: '#/components/schemas/VariableValue'
          description: The new value of the variable.
      required:
      - name
      - value
      description: The new value of the variable.
    VariableDefinitions:
      type: array
      items:
        $ref: '#/components/schemas/VariableDefinition'
    VariableName:
      type: string
      pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
      minLength: 1
      maxLength: 128
    VariableValue:
      type: string
      minLength: 1
      maxLength: 1024
    Variables:
      type: array
      items:
        $ref: '#/components/schemas/Variable'
