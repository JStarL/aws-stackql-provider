openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: lakeformation
  x-aws-serviceName: lakeformation
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2017-03-31'
  title: AWS Lake Formation
  description: |-
    Lake Formation

    Defines the public endpoint for the Lake Formation service.
servers:
- description: The AWS Lake Formation regional endpoint
  url: https://lakeformation.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /AddLFTagsToResource:
    post:
      operationId: AddLFTagsToResource
      description: |-
        Attaches one or more LF-tags to an existing resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Resource:
                  $ref: '#/components/schemas/Resource'
                LFTags:
                  $ref: '#/components/schemas/LFTagsList'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /AssumeDecoratedRoleWithSAML:
    post:
      operationId: AssumeDecoratedRoleWithSAML
      description: |-
        Allows a caller to assume an IAM role decorated as the SAML user specified in the SAML assertion included in the request. This decoration allows Lake Formation to enforce access policies against the SAML users and groups. This API operation requires SAML federation setup in the callerâ€™s account as it can only be called with valid SAML assertions. Lake Formation does not scope down the permission of the assumed role. All permissions attached to the role via the SAML federation setup will be included in the role session.

        This decorated role is expected to access data in Amazon S3 by getting temporary access from Lake Formation which is authorized via the virtual API `GetDataAccess`. Therefore, all SAML roles that can be assumed via `AssumeDecoratedRoleWithSAML` must at a minimum include `lakeformation:GetDataAccess` in their role policies. A typical IAM policy attached to such a role would look as follows:
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                SAMLAssertion:
                  $ref: '#/components/schemas/SAMLAssertionString'
                RoleArn:
                  $ref: '#/components/schemas/IAMRoleArn'
                PrincipalArn:
                  $ref: '#/components/schemas/IAMSAMLProviderArn'
                DurationSeconds:
                  $ref: '#/components/schemas/CredentialTimeoutDurationSecondInteger'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /BatchGrantPermissions:
    post:
      operationId: BatchGrantPermissions
      description: |-
        Batch operation to grant permissions to the principal.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Entries:
                  $ref: '#/components/schemas/BatchPermissionsRequestEntryList'
      responses:
        '200': {}
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
  /BatchRevokePermissions:
    post:
      operationId: BatchRevokePermissions
      description: |-
        Batch operation to revoke permissions from the principal.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Entries:
                  $ref: '#/components/schemas/BatchPermissionsRequestEntryList'
      responses:
        '200': {}
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
  /CancelTransaction:
    post:
      operationId: CancelTransaction
      description: |-
        Attempts to cancel the specified transaction. Returns an exception if the transaction was previously committed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TransactionId:
                  $ref: '#/components/schemas/TransactionIdString'
      responses:
        '200': {}
        '400':
          description: |-
            Contains details about an error where the specified transaction has already been committed and cannot be used for `UpdateTableObjects`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCommittedException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /CommitTransaction:
    post:
      operationId: CommitTransaction
      description: |-
        Attempts to commit the specified transaction. Returns an exception if the transaction was previously aborted. This API action is idempotent if called multiple times for the same transaction.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TransactionId:
                  $ref: '#/components/schemas/TransactionIdString'
      responses:
        '200': {}
        '400':
          description: |-
            Contains details about an error related to a transaction that was cancelled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCanceledException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /CreateDataCellsFilter:
    post:
      operationId: CreateDataCellsFilter
      description: |-
        Creates a data cell filter to allow one to grant access to certain columns on certain rows.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TableData:
                  $ref: '#/components/schemas/DataCellsFilter'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            A resource numerical limit was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNumberLimitExceededException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /CreateLFTag:
    post:
      operationId: CreateLFTag
      description: |-
        Creates an LF-tag with the specified name and values.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                TagKey:
                  $ref: '#/components/schemas/LFTagKey'
                TagValues:
                  $ref: '#/components/schemas/TagValueList'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            A resource numerical limit was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNumberLimitExceededException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /CreateLFTagExpression:
    post:
      operationId: CreateLFTagExpression
      description: |-
        Creates a new LF-Tag expression with the provided name, description, catalog ID, and expression body. This call fails if a LF-Tag expression with the same name already exists in the callerâ€™s account or if the underlying LF-Tags don't exist. To call this API operation, caller needs the following Lake Formation permissions:

        `CREATE_LF_TAG_EXPRESSION` on the root catalog resource.

        `GRANT_WITH_LF_TAG_EXPRESSION` on all underlying LF-Tag key:value pairs included in the expression.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/NameString'
                Description:
                  $ref: '#/components/schemas/DescriptionString'
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Expression:
                  $ref: '#/components/schemas/Expression'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            A resource numerical limit was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNumberLimitExceededException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /CreateLakeFormationIdentityCenterConfiguration:
    post:
      operationId: CreateLakeFormationIdentityCenterConfiguration
      description: |-
        Creates an IAM Identity Center connection with Lake Formation to allow IAM Identity Center users and groups to access Data Catalog resources.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                InstanceArn:
                  $ref: '#/components/schemas/IdentityCenterInstanceArn'
                ExternalFiltering:
                  $ref: '#/components/schemas/ExternalFilteringConfiguration'
                ShareRecipients:
                  $ref: '#/components/schemas/DataLakePrincipalList'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /CreateLakeFormationOptIn:
    post:
      operationId: CreateLakeFormationOptIn
      description: |-
        Enforce Lake Formation permissions for the given databases, tables, and principals.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Principal:
                  $ref: '#/components/schemas/DataLakePrincipal'
                Resource:
                  $ref: '#/components/schemas/Resource'
                Condition:
                  $ref: '#/components/schemas/Condition'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            A resource numerical limit was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNumberLimitExceededException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /DeleteDataCellsFilter:
    post:
      operationId: DeleteDataCellsFilter
      description: |-
        Deletes a data cell filter.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TableCatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                DatabaseName:
                  $ref: '#/components/schemas/NameString'
                TableName:
                  $ref: '#/components/schemas/NameString'
                Name:
                  $ref: '#/components/schemas/NameString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /DeleteLFTag:
    post:
      operationId: DeleteLFTag
      description: |-
        Deletes the specified LF-tag given a key name. If the input parameter tag key was not found, then the operation will throw an exception. When you delete an LF-tag, the `LFTagPolicy` attached to the LF-tag becomes invalid. If the deleted LF-tag was still assigned to any resource, the tag policy attach to the deleted LF-tag will no longer be applied to the resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                TagKey:
                  $ref: '#/components/schemas/LFTagKey'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /DeleteLFTagExpression:
    post:
      operationId: DeleteLFTagExpression
      description: |-
        Deletes the LF-Tag expression. The caller must be a data lake admin or have `DROP` permissions on the LF-Tag expression. Deleting a LF-Tag expression will also delete all `LFTagPolicy` permissions referencing the LF-Tag expression.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/NameString'
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /DeleteLakeFormationIdentityCenterConfiguration:
    post:
      operationId: DeleteLakeFormationIdentityCenterConfiguration
      description: |-
        Deletes an IAM Identity Center connection with Lake Formation.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /DeleteLakeFormationOptIn:
    post:
      operationId: DeleteLakeFormationOptIn
      description: |-
        Remove the Lake Formation permissions enforcement of the given databases, tables, and principals.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Principal:
                  $ref: '#/components/schemas/DataLakePrincipal'
                Resource:
                  $ref: '#/components/schemas/Resource'
                Condition:
                  $ref: '#/components/schemas/Condition'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /DeleteObjectsOnCancel:
    post:
      operationId: DeleteObjectsOnCancel
      description: |-
        For a specific governed table, provides a list of Amazon S3 objects that will be written during the current transaction and that can be automatically deleted if the transaction is canceled. Without this call, no Amazon S3 objects are automatically deleted when a transaction cancels.

        The Glue ETL library function `write_dynamic_frame.from_catalog()` includes an option to automatically call `DeleteObjectsOnCancel` before writes. For more information, see [Rolling Back Amazon S3 Writes](https://docs.aws.amazon.com/lake-formation/latest/dg/transactions-data-operations.html#rolling-back-writes).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                DatabaseName:
                  $ref: '#/components/schemas/NameString'
                TableName:
                  $ref: '#/components/schemas/NameString'
                TransactionId:
                  $ref: '#/components/schemas/TransactionIdString'
                Objects:
                  $ref: '#/components/schemas/VirtualObjectList'
      responses:
        '200': {}
        '400':
          description: |-
            Contains details about an error where the specified transaction has already been committed and cannot be used for `UpdateTableObjects`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCommittedException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /DeregisterResource:
    post:
      operationId: DeregisterResource
      description: |-
        Deregisters the resource as managed by the Data Catalog.

        When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ResourceArn:
                  $ref: '#/components/schemas/ResourceArnString'
      responses:
        '200': {}
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /DescribeLakeFormationIdentityCenterConfiguration:
    post:
      operationId: DescribeLakeFormationIdentityCenterConfiguration
      description: |-
        Retrieves the instance ARN and application ARN for the connection.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /DescribeResource:
    post:
      operationId: DescribeResource
      description: |-
        Retrieves the current data access role for the given resource registered in Lake Formation.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ResourceArn:
                  $ref: '#/components/schemas/ResourceArnString'
      responses:
        '200': {}
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /DescribeTransaction:
    post:
      operationId: DescribeTransaction
      description: |-
        Returns the details of a single transaction.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TransactionId:
                  $ref: '#/components/schemas/TransactionIdString'
      responses:
        '200': {}
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /ExtendTransaction:
    post:
      operationId: ExtendTransaction
      description: |-
        Indicates to the service that the specified transaction is still active and should not be treated as idle and aborted.

        Write transactions that remain idle for a long period are automatically aborted unless explicitly extended.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TransactionId:
                  $ref: '#/components/schemas/TransactionIdString'
      responses:
        '200': {}
        '400':
          description: |-
            Contains details about an error where the specified transaction has already been committed and cannot be used for `UpdateTableObjects`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCommittedException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /GetDataCellsFilter:
    post:
      operationId: GetDataCellsFilter
      description: |-
        Returns a data cells filter.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TableCatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                DatabaseName:
                  $ref: '#/components/schemas/NameString'
                TableName:
                  $ref: '#/components/schemas/NameString'
                Name:
                  $ref: '#/components/schemas/NameString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /GetDataLakePrincipal:
    post:
      operationId: GetDataLakePrincipal
      description: |-
        Returns the identity of the invoking principal.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
  /GetDataLakeSettings:
    post:
      operationId: GetDataLakeSettings
      description: |-
        Retrieves the list of the data lake administrators of a Lake Formation-managed data lake.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
      responses:
        '200': {}
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /GetEffectivePermissionsForPath:
    post:
      operationId: GetEffectivePermissionsForPath
      description: |-
        Returns the Lake Formation permissions for a specified table or database resource located at a path in Amazon S3. `GetEffectivePermissionsForPath` will not return databases and tables if the catalog is encrypted.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                ResourceArn:
                  $ref: '#/components/schemas/ResourceArnString'
                NextToken:
                  $ref: '#/components/schemas/Token'
                MaxResults:
                  $ref: '#/components/schemas/PageSize'
      responses:
        '200': {}
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /GetLFTag:
    post:
      operationId: GetLFTag
      description: |-
        Returns an LF-tag definition.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                TagKey:
                  $ref: '#/components/schemas/LFTagKey'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /GetLFTagExpression:
    post:
      operationId: GetLFTagExpression
      description: |-
        Returns the details about the LF-Tag expression. The caller must be a data lake admin or must have `DESCRIBE` permission on the LF-Tag expression resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/NameString'
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /GetQueryState:
    post:
      operationId: GetQueryState
      description: |-
        Returns the state of a query previously submitted. Clients are expected to poll `GetQueryState` to monitor the current state of the planning before retrieving the work units. A query state is only visible to the principal that made the initial call to `StartQueryPlanning`.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                QueryId:
                  $ref: '#/components/schemas/GetQueryStateRequestQueryIdString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
  /GetQueryStatistics:
    post:
      operationId: GetQueryStatistics
      description: |-
        Retrieves statistics on the planning and execution of a query.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                QueryId:
                  $ref: '#/components/schemas/GetQueryStatisticsRequestQueryIdString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '410':
          description: |-
            Contains details about an error where the query request expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '420':
          description: |-
            Contains details about an error related to statistics not being ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsNotReadyYetException'
        '429':
          description: |-
            Contains details about an error where the query request was throttled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottledException'
  /GetResourceLFTags:
    post:
      operationId: GetResourceLFTags
      description: |-
        Returns the LF-tags applied to a resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Resource:
                  $ref: '#/components/schemas/Resource'
                ShowAssignedLFTags:
                  $ref: '#/components/schemas/BooleanNullable'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /GetTableObjects:
    post:
      operationId: GetTableObjects
      description: |-
        Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                DatabaseName:
                  $ref: '#/components/schemas/NameString'
                TableName:
                  $ref: '#/components/schemas/NameString'
                TransactionId:
                  $ref: '#/components/schemas/TransactionIdString'
                QueryAsOfTime:
                  $ref: '#/components/schemas/Timestamp'
                PartitionPredicate:
                  $ref: '#/components/schemas/PredicateString'
                MaxResults:
                  $ref: '#/components/schemas/PageSize'
                NextToken:
                  $ref: '#/components/schemas/TokenString'
      responses:
        '200': {}
        '400':
          description: |-
            Contains details about an error where the specified transaction has already been committed and cannot be used for `UpdateTableObjects`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCommittedException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /GetTemporaryGluePartitionCredentials:
    post:
      operationId: GetTemporaryGluePartitionCredentials
      description: |-
        This API is identical to `GetTemporaryTableCredentials` except that this is used when the target Data Catalog resource is of type Partition. Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TableArn:
                  $ref: '#/components/schemas/ResourceArnString'
                Partition:
                  $ref: '#/components/schemas/PartitionValueList'
                Permissions:
                  $ref: '#/components/schemas/PermissionList'
                DurationSeconds:
                  $ref: '#/components/schemas/CredentialTimeoutDurationSecondInteger'
                AuditContext:
                  $ref: '#/components/schemas/AuditContext'
                SupportedPermissionTypes:
                  $ref: '#/components/schemas/PermissionTypeList'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The engine does not support filtering data based on the enforced permissions. For example, if you call the `GetTemporaryGlueTableCredentials` operation with `SupportedPermissionType` equal to `ColumnPermission`, but cell-level permissions exist on the table, this exception is thrown.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionTypeMismatchException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /GetTemporaryGlueTableCredentials:
    post:
      operationId: GetTemporaryGlueTableCredentials
      description: |-
        Allows a caller in a secure environment to assume a role with permission to access Amazon S3. In order to vend such credentials, Lake Formation assumes the role associated with a registered location, for example an Amazon S3 bucket, with a scope down policy which restricts the access to a single prefix.

        To call this API, the role that the service assumes must have `lakeformation:GetDataAccess` permission on the resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TableArn:
                  $ref: '#/components/schemas/ResourceArnString'
                Permissions:
                  $ref: '#/components/schemas/PermissionList'
                DurationSeconds:
                  $ref: '#/components/schemas/CredentialTimeoutDurationSecondInteger'
                AuditContext:
                  $ref: '#/components/schemas/AuditContext'
                SupportedPermissionTypes:
                  $ref: '#/components/schemas/PermissionTypeList'
                S3Path:
                  $ref: '#/components/schemas/PathString'
                QuerySessionContext:
                  $ref: '#/components/schemas/QuerySessionContext'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The engine does not support filtering data based on the enforced permissions. For example, if you call the `GetTemporaryGlueTableCredentials` operation with `SupportedPermissionType` equal to `ColumnPermission`, but cell-level permissions exist on the table, this exception is thrown.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionTypeMismatchException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /GetWorkUnitResults:
    post:
      operationId: GetWorkUnitResults
      description: |-
        Returns the work units resulting from the query. Work units can be executed in any order and in parallel.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                QueryId:
                  $ref: '#/components/schemas/GetWorkUnitResultsRequestQueryIdString'
                WorkUnitId:
                  $ref: '#/components/schemas/GetWorkUnitResultsRequestWorkUnitIdLong'
                WorkUnitToken:
                  $ref: '#/components/schemas/SyntheticGetWorkUnitResultsRequestWorkUnitTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '410':
          description: |-
            Contains details about an error where the query request expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '429':
          description: |-
            Contains details about an error where the query request was throttled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottledException'
  /GetWorkUnits:
    post:
      operationId: GetWorkUnits
      description: |-
        Retrieves the work units generated by the `StartQueryPlanning` operation.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                NextToken:
                  $ref: '#/components/schemas/Token'
                PageSize:
                  $ref: '#/components/schemas/Integer'
                QueryId:
                  $ref: '#/components/schemas/GetWorkUnitsRequestQueryIdString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '410':
          description: |-
            Contains details about an error where the query request expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '420':
          description: |-
            Contains details about an error related to work units not being ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkUnitsNotReadyYetException'
  /GrantPermissions:
    post:
      operationId: GrantPermissions
      description: |-
        Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.

        For information about permissions, see [Security and Access Control to Metadata and Data](https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Principal:
                  $ref: '#/components/schemas/DataLakePrincipal'
                Resource:
                  $ref: '#/components/schemas/Resource'
                Permissions:
                  $ref: '#/components/schemas/PermissionList'
                Condition:
                  $ref: '#/components/schemas/Condition'
                PermissionsWithGrantOption:
                  $ref: '#/components/schemas/PermissionList'
      responses:
        '200': {}
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
  /ListDataCellsFilter:
    post:
      operationId: ListDataCellsFilter
      description: |-
        Lists all the data cell filters on a table.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Table:
                  $ref: '#/components/schemas/TableResource'
                NextToken:
                  $ref: '#/components/schemas/Token'
                MaxResults:
                  $ref: '#/components/schemas/PageSize'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
  /ListLFTagExpressions:
    post:
      operationId: ListLFTagExpressions
      description: |-
        Returns the LF-Tag expressions in callerâ€™s account filtered based on caller's permissions. Data Lake and read only admins implicitly can see all tag expressions in their account, else caller needs DESCRIBE permissions on tag expression.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                MaxResults:
                  $ref: '#/components/schemas/PageSize'
                NextToken:
                  $ref: '#/components/schemas/Token'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /ListLFTags:
    post:
      operationId: ListLFTags
      description: |-
        Lists LF-tags that the requester has permission to view.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                ResourceShareType:
                  $ref: '#/components/schemas/ResourceShareType'
                MaxResults:
                  $ref: '#/components/schemas/PageSize'
                NextToken:
                  $ref: '#/components/schemas/Token'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /ListLakeFormationOptIns:
    post:
      operationId: ListLakeFormationOptIns
      description: |-
        Retrieve the current list of resources and principals that are opt in to enforce Lake Formation permissions.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Principal:
                  $ref: '#/components/schemas/DataLakePrincipal'
                Resource:
                  $ref: '#/components/schemas/Resource'
                MaxResults:
                  $ref: '#/components/schemas/PageSize'
                NextToken:
                  $ref: '#/components/schemas/Token'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
  /ListPermissions:
    post:
      operationId: ListPermissions
      description: |-
        Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER.

        This operation returns only those permissions that have been explicitly granted.

        For information about permissions, see [Security and Access Control to Metadata and Data](https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Principal:
                  $ref: '#/components/schemas/DataLakePrincipal'
                ResourceType:
                  $ref: '#/components/schemas/DataLakeResourceType'
                Resource:
                  $ref: '#/components/schemas/Resource'
                NextToken:
                  $ref: '#/components/schemas/Token'
                MaxResults:
                  $ref: '#/components/schemas/PageSize'
                IncludeRelated:
                  $ref: '#/components/schemas/TrueFalseString'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
  /ListResources:
    post:
      operationId: ListResources
      description: |-
        Lists the resources registered to be managed by the Data Catalog.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                FilterConditionList:
                  $ref: '#/components/schemas/FilterConditionList'
                MaxResults:
                  $ref: '#/components/schemas/PageSize'
                NextToken:
                  $ref: '#/components/schemas/Token'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
  /ListTableStorageOptimizers:
    post:
      operationId: ListTableStorageOptimizers
      description: |-
        Returns the configuration of all storage optimizers associated with a specified table.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                DatabaseName:
                  $ref: '#/components/schemas/NameString'
                TableName:
                  $ref: '#/components/schemas/NameString'
                StorageOptimizerType:
                  $ref: '#/components/schemas/OptimizerType'
                MaxResults:
                  $ref: '#/components/schemas/PageSize'
                NextToken:
                  $ref: '#/components/schemas/Token'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /ListTransactions:
    post:
      operationId: ListTransactions
      description: |-
        Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned.

        This operation can help you identify uncommitted transactions or to get information about transactions.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                StatusFilter:
                  $ref: '#/components/schemas/TransactionStatusFilter'
                MaxResults:
                  $ref: '#/components/schemas/PageSize'
                NextToken:
                  $ref: '#/components/schemas/TokenString'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
  /PutDataLakeSettings:
    post:
      operationId: PutDataLakeSettings
      description: |-
        Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see [Granting Lake Formation Permissions](https://docs.aws.amazon.com/lake-formation/latest/dg/lake-formation-permissions.html).

        This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                DataLakeSettings:
                  $ref: '#/components/schemas/DataLakeSettings'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
  /RegisterResource:
    post:
      operationId: RegisterResource
      description: |-
        Registers the resource as managed by the Data Catalog.

        To add or update data, Lake Formation needs read/write access to the chosen data location. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy.

        The following request registers a new location and gives Lake Formation permission to use the service-linked role to access that location.

        `ResourceArn = arn:aws:s3:::my-bucket/ UseServiceLinkedRole = true`

        If `UseServiceLinkedRole` is not set to true, you must provide or set the `RoleArn`:

        `arn:aws:iam::12345:role/my-data-access-role`
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ResourceArn:
                  $ref: '#/components/schemas/ResourceArnString'
                UseServiceLinkedRole:
                  $ref: '#/components/schemas/NullableBoolean'
                RoleArn:
                  $ref: '#/components/schemas/IAMRoleArn'
                WithFederation:
                  $ref: '#/components/schemas/NullableBoolean'
                HybridAccessEnabled:
                  $ref: '#/components/schemas/NullableBoolean'
                WithPrivilegedAccess:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            A resource numerical limit was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNumberLimitExceededException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /RemoveLFTagsFromResource:
    post:
      operationId: RemoveLFTagsFromResource
      description: |-
        Removes an LF-tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in `tableWithColumns` to specify column input.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Resource:
                  $ref: '#/components/schemas/Resource'
                LFTags:
                  $ref: '#/components/schemas/LFTagsList'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /RevokePermissions:
    post:
      operationId: RevokePermissions
      description: |-
        Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Principal:
                  $ref: '#/components/schemas/DataLakePrincipal'
                Resource:
                  $ref: '#/components/schemas/Resource'
                Permissions:
                  $ref: '#/components/schemas/PermissionList'
                Condition:
                  $ref: '#/components/schemas/Condition'
                PermissionsWithGrantOption:
                  $ref: '#/components/schemas/PermissionList'
      responses:
        '200': {}
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
  /SearchDatabasesByLFTags:
    post:
      operationId: SearchDatabasesByLFTags
      description: |-
        This operation allows a search on `DATABASE` resources by `TagCondition`. This operation is used by admins who want to grant user permissions on certain `TagConditions`. Before making a grant, the admin can use `SearchDatabasesByTags` to find all resources where the given `TagConditions` are valid to verify whether the returned resources can be shared.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                NextToken:
                  $ref: '#/components/schemas/Token'
                MaxResults:
                  $ref: '#/components/schemas/SearchPageSize'
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Expression:
                  $ref: '#/components/schemas/Expression'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /SearchTablesByLFTags:
    post:
      operationId: SearchTablesByLFTags
      description: |-
        This operation allows a search on `TABLE` resources by `LFTag`s. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use `SearchTablesByLFTags` to find all resources where the given `LFTag`s are valid to verify whether the returned resources can be shared.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                NextToken:
                  $ref: '#/components/schemas/Token'
                MaxResults:
                  $ref: '#/components/schemas/SearchPageSize'
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Expression:
                  $ref: '#/components/schemas/Expression'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /StartQueryPlanning:
    post:
      operationId: StartQueryPlanning
      description: |-
        Submits a request to process a query statement.

        This operation generates work units that can be retrieved with the `GetWorkUnits` operation as soon as the query state is WORKUNITS_AVAILABLE or FINISHED.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                QueryPlanningContext:
                  $ref: '#/components/schemas/QueryPlanningContext'
                QueryString:
                  $ref: '#/components/schemas/SyntheticStartQueryPlanningRequestQueryString'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '429':
          description: |-
            Contains details about an error where the query request was throttled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottledException'
  /StartTransaction:
    post:
      operationId: StartTransaction
      description: |-
        Starts a new transaction and returns its transaction ID. Transaction IDs are opaque objects that you can use to identify a transaction.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TransactionType:
                  $ref: '#/components/schemas/TransactionType'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
  /UpdateDataCellsFilter:
    post:
      operationId: UpdateDataCellsFilter
      description: |-
        Updates a data cell filter.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TableData:
                  $ref: '#/components/schemas/DataCellsFilter'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /UpdateLFTag:
    post:
      operationId: UpdateLFTag
      description: |-
        Updates the list of possible values for the specified LF-tag key. If the LF-tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - "Update not allowed". Untag the attribute before deleting the LF-tag key's value.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                TagKey:
                  $ref: '#/components/schemas/LFTagKey'
                TagValuesToDelete:
                  $ref: '#/components/schemas/TagValueList'
                TagValuesToAdd:
                  $ref: '#/components/schemas/TagValueList'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /UpdateLFTagExpression:
    post:
      operationId: UpdateLFTagExpression
      description: |-
        Updates the name of the LF-Tag expression to the new description and expression body provided. Updating a LF-Tag expression immediately changes the permission boundaries of all existing `LFTagPolicy` permission grants that reference the given LF-Tag expression.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/NameString'
                Description:
                  $ref: '#/components/schemas/DescriptionString'
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                Expression:
                  $ref: '#/components/schemas/Expression'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            A resource numerical limit was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNumberLimitExceededException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /UpdateLakeFormationIdentityCenterConfiguration:
    post:
      operationId: UpdateLakeFormationIdentityCenterConfiguration
      description: |-
        Updates the IAM Identity Center connection parameters.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                ShareRecipients:
                  $ref: '#/components/schemas/DataLakePrincipalList'
                ApplicationStatus:
                  $ref: '#/components/schemas/ApplicationStatus'
                ExternalFiltering:
                  $ref: '#/components/schemas/ExternalFilteringConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /UpdateResource:
    post:
      operationId: UpdateResource
      description: |-
        Updates the data access role used for vending access to the given (registered) resource in Lake Formation.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                RoleArn:
                  $ref: '#/components/schemas/IAMRoleArn'
                ResourceArn:
                  $ref: '#/components/schemas/ResourceArnString'
                WithFederation:
                  $ref: '#/components/schemas/NullableBoolean'
                HybridAccessEnabled:
                  $ref: '#/components/schemas/NullableBoolean'
      responses:
        '200': {}
        '400':
          description: |-
            The operation timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationTimeoutException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /UpdateTableObjects:
    post:
      operationId: UpdateTableObjects
      description: |-
        Updates the manifest of Amazon S3 objects that make up the specified governed table.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                DatabaseName:
                  $ref: '#/components/schemas/NameString'
                TableName:
                  $ref: '#/components/schemas/NameString'
                TransactionId:
                  $ref: '#/components/schemas/TransactionIdString'
                WriteOperations:
                  $ref: '#/components/schemas/WriteOperationList'
      responses:
        '200': {}
        '400':
          description: |-
            Contains details about an error where the specified transaction has already been committed and cannot be used for `UpdateTableObjects`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCommittedException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
  /UpdateTableStorageOptimizer:
    post:
      operationId: UpdateTableStorageOptimizer
      description: |-
        Updates the configuration of the storage optimizers for a table.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  $ref: '#/components/schemas/CatalogIdString'
                DatabaseName:
                  $ref: '#/components/schemas/NameString'
                TableName:
                  $ref: '#/components/schemas/NameString'
                StorageOptimizerConfig:
                  $ref: '#/components/schemas/StorageOptimizerConfigMap'
      responses:
        '200': {}
        '403':
          description: |-
            Access to a resource was denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input provided was not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '500':
          description: |-
            An internal service error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the problem.
      description: Access to a resource was denied.
    AccessKeyIdString:
      type: string
    AddLFTagsToResourceRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Resource:
          allOf:
          - $ref: '#/components/schemas/Resource'
          description: The database, table, or column resource to which to attach
            an LF-tag.
        LFTags:
          allOf:
          - $ref: '#/components/schemas/LFTagsList'
          description: The LF-tags to attach to the resource.
      required:
      - Resource
      - LFTags
    AddLFTagsToResourceResponse:
      type: object
      properties:
        Failures:
          allOf:
          - $ref: '#/components/schemas/LFTagErrors'
          description: A list of failures to tag the resource.
    AddObjectInput:
      type: object
      properties:
        Uri:
          allOf:
          - $ref: '#/components/schemas/URI'
          description: The Amazon S3 location of the object.
        ETag:
          allOf:
          - $ref: '#/components/schemas/ETagString'
          description: The Amazon S3 ETag of the object. Returned by `GetTableObjects`
            for validation and used to identify changes to the underlying data.
        Size:
          allOf:
          - $ref: '#/components/schemas/ObjectSize'
          description: The size of the Amazon S3 object in bytes.
        PartitionValues:
          allOf:
          - $ref: '#/components/schemas/PartitionValuesList'
          description: 'A list of partition values for the object. A value must be
            specified for each partition key associated with the table.


            The supported data types are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd
            HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.'
      required:
      - Uri
      - ETag
      - Size
      description: A new object to add to the governed table.
    AdditionalContextMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ContextValue'
    AllRowsWildcard:
      type: object
      properties: {}
      description: A structure that you pass to indicate you want all rows in a filter.
    AlreadyExistsException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the problem.
      description: A resource to be created or added already exists.
    ApplicationArn:
      type: string
    ApplicationStatus:
      type: string
      enum:
      - ENABLED
      - DISABLED
    AssumeDecoratedRoleWithSAMLRequest:
      type: object
      properties:
        SAMLAssertion:
          allOf:
          - $ref: '#/components/schemas/SAMLAssertionString'
          description: A SAML assertion consisting of an assertion statement for the
            user who needs temporary credentials. This must match the SAML assertion
            that was issued to IAM. This must be Base64 encoded.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/IAMRoleArn'
          description: The role that represents an IAM principal whose scope down
            policy allows it to call credential vending APIs such as `GetTemporaryTableCredentials`.
            The caller must also have iam:PassRole permission on this role.
        PrincipalArn:
          allOf:
          - $ref: '#/components/schemas/IAMSAMLProviderArn'
          description: The Amazon Resource Name (ARN) of the SAML provider in IAM
            that describes the IdP.
        DurationSeconds:
          allOf:
          - $ref: '#/components/schemas/CredentialTimeoutDurationSecondInteger'
          description: The time period, between 900 and 43,200 seconds, for the timeout
            of the temporary credentials.
      required:
      - SAMLAssertion
      - RoleArn
      - PrincipalArn
    AssumeDecoratedRoleWithSAMLResponse:
      type: object
      properties:
        AccessKeyId:
          allOf:
          - $ref: '#/components/schemas/AccessKeyIdString'
          description: The access key ID for the temporary credentials. (The access
            key consists of an access key ID and a secret key).
        SecretAccessKey:
          allOf:
          - $ref: '#/components/schemas/SecretAccessKeyString'
          description: The secret key for the temporary credentials. (The access key
            consists of an access key ID and a secret key).
        SessionToken:
          allOf:
          - $ref: '#/components/schemas/SessionTokenString'
          description: The session token for the temporary credentials.
        Expiration:
          allOf:
          - $ref: '#/components/schemas/ExpirationTimestamp'
          description: The date and time when the temporary credentials expire.
    AuditContext:
      type: object
      properties:
        AdditionalAuditContext:
          allOf:
          - $ref: '#/components/schemas/AuditContextString'
          description: The filter engine can populate the 'AdditionalAuditContext'
            information with the request ID for you to track. This information will
            be displayed in CloudTrail log in your account.
      description: A structure used to include auditing information on the privileged
        API.
    AuditContextString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*$
      minLength: 0
      maxLength: 2048
    AuthorizedSessionTagValueList:
      type: array
      items:
        $ref: '#/components/schemas/NameString'
    BatchGrantPermissionsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Entries:
          allOf:
          - $ref: '#/components/schemas/BatchPermissionsRequestEntryList'
          description: A list of up to 20 entries for resource permissions to be granted
            by batch operation to the principal.
      required:
      - Entries
    BatchGrantPermissionsResponse:
      type: object
      properties:
        Failures:
          allOf:
          - $ref: '#/components/schemas/BatchPermissionsFailureList'
          description: A list of failures to grant permissions to the resources.
    BatchPermissionsFailureEntry:
      type: object
      properties:
        RequestEntry:
          allOf:
          - $ref: '#/components/schemas/BatchPermissionsRequestEntry'
          description: An identifier for an entry of the batch request.
        Error:
          allOf:
          - $ref: '#/components/schemas/ErrorDetail'
          description: An error message that applies to the failure of the entry.
      description: A list of failures when performing a batch grant or batch revoke
        operation.
    BatchPermissionsFailureList:
      type: array
      items:
        $ref: '#/components/schemas/BatchPermissionsFailureEntry'
    BatchPermissionsRequestEntry:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/Identifier'
          description: A unique identifier for the batch permissions request entry.
        Principal:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipal'
          description: The principal to be granted a permission.
        Resource:
          allOf:
          - $ref: '#/components/schemas/Resource'
          description: The resource to which the principal is to be granted a permission.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: The permissions to be granted.
        Condition:
          $ref: '#/components/schemas/Condition'
        PermissionsWithGrantOption:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: Indicates if the option to pass permissions is granted.
      required:
      - Id
      description: A permission to a resource granted by batch operation to the principal.
    BatchPermissionsRequestEntryList:
      type: array
      items:
        $ref: '#/components/schemas/BatchPermissionsRequestEntry'
    BatchRevokePermissionsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Entries:
          allOf:
          - $ref: '#/components/schemas/BatchPermissionsRequestEntryList'
          description: A list of up to 20 entries for resource permissions to be revoked
            by batch operation to the principal.
      required:
      - Entries
    BatchRevokePermissionsResponse:
      type: object
      properties:
        Failures:
          allOf:
          - $ref: '#/components/schemas/BatchPermissionsFailureList'
          description: A list of failures to revoke permissions to the resources.
    Boolean:
      type: boolean
      default: false
    BooleanNullable:
      type: boolean
    CancelTransactionRequest:
      type: object
      properties:
        TransactionId:
          allOf:
          - $ref: '#/components/schemas/TransactionIdString'
          description: The transaction to cancel.
      required:
      - TransactionId
    CancelTransactionResponse:
      type: object
      properties: {}
    CatalogIdString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*$
      minLength: 1
      maxLength: 255
    CatalogResource:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: An identifier for the catalog resource.
      description: A structure for the catalog object.
    ColumnLFTag:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of a column resource.
        LFTags:
          allOf:
          - $ref: '#/components/schemas/LFTagsList'
          description: The LF-tags attached to a column resource.
      description: A structure containing the name of a column resource and the LF-tags
        attached to it.
    ColumnLFTagsList:
      type: array
      items:
        $ref: '#/components/schemas/ColumnLFTag'
    ColumnNames:
      type: array
      items:
        $ref: '#/components/schemas/NameString'
    ColumnWildcard:
      type: object
      properties:
        ExcludedColumnNames:
          allOf:
          - $ref: '#/components/schemas/ColumnNames'
          description: Excludes column names. Any column with this name will be excluded.
      description: A wildcard object, consisting of an optional list of excluded column
        names or indexes.
    CommitTransactionRequest:
      type: object
      properties:
        TransactionId:
          allOf:
          - $ref: '#/components/schemas/TransactionIdString'
          description: The transaction to commit.
      required:
      - TransactionId
    CommitTransactionResponse:
      type: object
      properties:
        TransactionStatus:
          allOf:
          - $ref: '#/components/schemas/TransactionStatus'
          description: The status of the transaction.
    ComparisonOperator:
      type: string
      enum:
      - EQ
      - NE
      - LE
      - LT
      - GE
      - GT
      - CONTAINS
      - NOT_CONTAINS
      - BEGINS_WITH
      - IN
      - BETWEEN
    ConcurrentModificationException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the problem.
      description: Two processes are trying to modify a resource simultaneously.
    Condition:
      type: object
      properties:
        Expression:
          allOf:
          - $ref: '#/components/schemas/ExpressionString'
          description: An expression written based on the Cedar Policy Language used
            to match the principal attributes.
      description: A Lake Formation condition, which applies to permissions and opt-ins
        that contain an expression.
    ContextKey:
      type: string
      minLength: 1
      maxLength: 128
    ContextValue:
      type: string
      minLength: 0
      maxLength: 256
    CreateDataCellsFilterRequest:
      type: object
      properties:
        TableData:
          allOf:
          - $ref: '#/components/schemas/DataCellsFilter'
          description: A `DataCellsFilter` structure containing information about
            the data cells filter.
      required:
      - TableData
    CreateDataCellsFilterResponse:
      type: object
      properties: {}
    CreateLFTagExpressionRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: A name for the expression.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: A description with information about the LF-Tag expression.
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Expression:
          allOf:
          - $ref: '#/components/schemas/Expression'
          description: A list of LF-Tag conditions (key-value pairs).
      required:
      - Name
      - Expression
    CreateLFTagExpressionResponse:
      type: object
      properties: {}
    CreateLFTagRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        TagKey:
          allOf:
          - $ref: '#/components/schemas/LFTagKey'
          description: The key-name for the LF-tag.
        TagValues:
          allOf:
          - $ref: '#/components/schemas/TagValueList'
          description: A list of possible values an attribute can take.
      required:
      - TagKey
      - TagValues
    CreateLFTagResponse:
      type: object
      properties: {}
    CreateLakeFormationIdentityCenterConfigurationRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, view definitions, and other control information
            to manage your Lake Formation environment.
        InstanceArn:
          allOf:
          - $ref: '#/components/schemas/IdentityCenterInstanceArn'
          description: The ARN of the IAM Identity Center instance for which the operation
            will be executed. For more information about ARNs, see Amazon Resource
            Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon
            Web Services General Reference.
        ExternalFiltering:
          allOf:
          - $ref: '#/components/schemas/ExternalFilteringConfiguration'
          description: A list of the account IDs of Amazon Web Services accounts of
            third-party applications that are allowed to access data managed by Lake
            Formation.
        ShareRecipients:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipalList'
          description: 'A list of Amazon Web Services account IDs and/or Amazon Web
            Services organization/organizational unit ARNs that are allowed to access
            data managed by Lake Formation.


            If the `ShareRecipients` list includes valid values, a resource share
            is created with the principals you want to have access to the resources.


            If the `ShareRecipients` value is null or the list is empty, no resource
            share is created.'
    CreateLakeFormationIdentityCenterConfigurationResponse:
      type: object
      properties:
        ApplicationArn:
          allOf:
          - $ref: '#/components/schemas/ApplicationArn'
          description: The Amazon Resource Name (ARN) of the Lake Formation application
            integrated with IAM Identity Center.
    CreateLakeFormationOptInRequest:
      type: object
      properties:
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
        Resource:
          $ref: '#/components/schemas/Resource'
        Condition:
          $ref: '#/components/schemas/Condition'
      required:
      - Principal
      - Resource
    CreateLakeFormationOptInResponse:
      type: object
      properties: {}
    CredentialTimeoutDurationSecondInteger:
      type: integer
      minimum: 900
      maximum: 43200
    DataCellsFilter:
      type: object
      properties:
        TableCatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The ID of the catalog to which the table belongs.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: A database in the Glue Data Catalog.
        TableName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: A table in the database.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name given by the user to the data filter cell.
        RowFilter:
          allOf:
          - $ref: '#/components/schemas/RowFilter'
          description: A PartiQL predicate.
        ColumnNames:
          allOf:
          - $ref: '#/components/schemas/ColumnNames'
          description: A list of column names and/or nested column attributes. When
            specifying nested attributes, use a qualified dot (.) delimited format
            such as "address"."zip". Nested attributes within this list may not exceed
            a depth of 5.
        ColumnWildcard:
          allOf:
          - $ref: '#/components/schemas/ColumnWildcard'
          description: 'A wildcard with exclusions.


            You must specify either a `ColumnNames` list or the `ColumnWildCard`.'
        VersionId:
          allOf:
          - $ref: '#/components/schemas/VersionString'
          description: The ID of the data cells filter version.
      required:
      - TableCatalogId
      - DatabaseName
      - TableName
      - Name
      description: A structure that describes certain columns on certain rows.
    DataCellsFilterList:
      type: array
      items:
        $ref: '#/components/schemas/DataCellsFilter'
    DataCellsFilterResource:
      type: object
      properties:
        TableCatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The ID of the catalog to which the table belongs.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: A database in the Glue Data Catalog.
        TableName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the table.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the data cells filter.
      description: A structure for a data cells filter resource.
    DataLakePrincipal:
      type: object
      properties:
        DataLakePrincipalIdentifier:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipalString'
          description: An identifier for the Lake Formation principal.
      description: The Lake Formation principal. Supported principals are IAM users
        or IAM roles.
    DataLakePrincipalList:
      type: array
      items:
        $ref: '#/components/schemas/DataLakePrincipal'
    DataLakePrincipalString:
      type: string
      minLength: 1
      maxLength: 255
    DataLakeResourceType:
      type: string
      enum:
      - CATALOG
      - DATABASE
      - TABLE
      - DATA_LOCATION
      - LF_TAG
      - LF_TAG_POLICY
      - LF_TAG_POLICY_DATABASE
      - LF_TAG_POLICY_TABLE
      - LF_NAMED_TAG_EXPRESSION
    DataLakeSettings:
      type: object
      properties:
        DataLakeAdmins:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipalList'
          description: A list of Lake Formation principals. Supported principals are
            IAM users or IAM roles.
        ReadOnlyAdmins:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipalList'
          description: A list of Lake Formation principals with only view access to
            the resources, without the ability to make changes. Supported principals
            are IAM users or IAM roles.
        CreateDatabaseDefaultPermissions:
          allOf:
          - $ref: '#/components/schemas/PrincipalPermissionsList'
          description: 'Specifies whether access control on newly created database
            is managed by Lake Formation permissions or exclusively by IAM permissions.


            A null value indicates access control by Lake Formation permissions. A
            value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control
            by IAM permissions. This is referred to as the setting "Use only IAM access
            control," and is for backward compatibility with the Glue permission model
            implemented by IAM permissions.


            The only permitted values are an empty array or an array that contains
            a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.


            For more information, see [Changing the Default Security Settings for
            Your Data Lake](https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html).'
        CreateTableDefaultPermissions:
          allOf:
          - $ref: '#/components/schemas/PrincipalPermissionsList'
          description: 'Specifies whether access control on newly created table is
            managed by Lake Formation permissions or exclusively by IAM permissions.


            A null value indicates access control by Lake Formation permissions. A
            value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control
            by IAM permissions. This is referred to as the setting "Use only IAM access
            control," and is for backward compatibility with the Glue permission model
            implemented by IAM permissions.


            The only permitted values are an empty array or an array that contains
            a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.


            For more information, see [Changing the Default Security Settings for
            Your Data Lake](https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html).'
        Parameters:
          allOf:
          - $ref: '#/components/schemas/ParametersMap'
          description: A key-value map that provides an additional configuration on
            your data lake. CROSS_ACCOUNT_VERSION is the key you can configure in
            the Parameters field. Accepted values for the CrossAccountVersion key
            are 1, 2, 3, and 4.
        TrustedResourceOwners:
          allOf:
          - $ref: '#/components/schemas/TrustedResourceOwners'
          description: 'A list of the resource-owning account IDs that the caller''s
            account can use to share their user access details (user ARNs). The user
            ARNs can be logged in the resource owner''s CloudTrail log.


            You may want to specify this property when you are in a high-trust boundary,
            such as the same team or company.'
        AllowExternalDataFiltering:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: 'Whether to allow Amazon EMR clusters to access data managed
            by Lake Formation.


            If true, you allow Amazon EMR clusters to access data in Amazon S3 locations
            that are registered with Lake Formation.


            If false or null, no Amazon EMR clusters will be able to access data in
            Amazon S3 locations that are registered with Lake Formation.


            For more information, see [(Optional) Allow external data filtering](https://docs.aws.amazon.com/lake-formation/latest/dg/initial-LF-setup.html#external-data-filter).'
        AllowFullTableExternalDataAccess:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Whether to allow a third-party query engine to get data access
            credentials without session tags when a caller has full data access permissions.
        ExternalDataFilteringAllowList:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipalList'
          description: A list of the account IDs of Amazon Web Services accounts with
            Amazon EMR clusters that are to perform data filtering.>
        AuthorizedSessionTagValueList:
          allOf:
          - $ref: '#/components/schemas/AuthorizedSessionTagValueList'
          description: Lake Formation relies on a privileged process secured by Amazon
            EMR or the third party integrator to tag the user's role while assuming
            it. Lake Formation will publish the acceptable key-value pair, for example
            key = "LakeFormationTrustedCaller" and value = "TRUE" and the third party
            integrator must properly tag the temporary security credentials that will
            be used to call Lake Formation's administrative APIs.
      description: A structure representing a list of Lake Formation principals designated
        as data lake administrators and lists of principal permission entries for
        default create database and default create table permissions.
    DataLocationResource:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog where the location is registered
            with Lake Formation. By default, it is the account ID of the caller.
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArnString'
          description: The Amazon Resource Name (ARN) that uniquely identifies the
            data location resource.
      required:
      - ResourceArn
      description: A structure for a data location object where permissions are granted
        or revoked.
    DatabaseLFTagsList:
      type: array
      items:
        $ref: '#/components/schemas/TaggedDatabase'
    DatabaseResource:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, it is the
            account ID of the caller.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the database resource. Unique to the Data Catalog.
      required:
      - Name
      description: A structure for the database object.
    DateTime:
      type: string
      format: date-time
    DeleteDataCellsFilterRequest:
      type: object
      properties:
        TableCatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The ID of the catalog to which the table belongs.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: A database in the Glue Data Catalog.
        TableName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: A table in the database.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name given by the user to the data filter cell.
    DeleteDataCellsFilterResponse:
      type: object
      properties: {}
    DeleteLFTagExpressionRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name for the LF-Tag expression.
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID in which the LF-Tag expression is saved.
      required:
      - Name
    DeleteLFTagExpressionResponse:
      type: object
      properties: {}
    DeleteLFTagRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        TagKey:
          allOf:
          - $ref: '#/components/schemas/LFTagKey'
          description: The key-name for the LF-tag to delete.
      required:
      - TagKey
    DeleteLFTagResponse:
      type: object
      properties: {}
    DeleteLakeFormationIdentityCenterConfigurationRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, view definition, and other control information
            to manage your Lake Formation environment.
    DeleteLakeFormationIdentityCenterConfigurationResponse:
      type: object
      properties: {}
    DeleteLakeFormationOptInRequest:
      type: object
      properties:
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
        Resource:
          $ref: '#/components/schemas/Resource'
        Condition:
          $ref: '#/components/schemas/Condition'
      required:
      - Principal
      - Resource
    DeleteLakeFormationOptInResponse:
      type: object
      properties: {}
    DeleteObjectInput:
      type: object
      properties:
        Uri:
          allOf:
          - $ref: '#/components/schemas/URI'
          description: The Amazon S3 location of the object to delete.
        ETag:
          allOf:
          - $ref: '#/components/schemas/ETagString'
          description: The Amazon S3 ETag of the object. Returned by `GetTableObjects`
            for validation and used to identify changes to the underlying data.
        PartitionValues:
          allOf:
          - $ref: '#/components/schemas/PartitionValuesList'
          description: A list of partition values for the object. A value must be
            specified for each partition key associated with the governed table.
      required:
      - Uri
      description: An object to delete from the governed table.
    DeleteObjectsOnCancelRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The Glue data catalog that contains the governed table. Defaults
            to the current account ID.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The database that contains the governed table.
        TableName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the governed table.
        TransactionId:
          allOf:
          - $ref: '#/components/schemas/TransactionIdString'
          description: ID of the transaction that the writes occur in.
        Objects:
          allOf:
          - $ref: '#/components/schemas/VirtualObjectList'
          description: A list of VirtualObject structures, which indicates the Amazon
            S3 objects to be deleted if the transaction cancels.
      required:
      - DatabaseName
      - TableName
      - TransactionId
      - Objects
    DeleteObjectsOnCancelResponse:
      type: object
      properties: {}
    DeregisterResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArnString'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to deregister.
      required:
      - ResourceArn
    DeregisterResourceResponse:
      type: object
      properties: {}
    DescribeLakeFormationIdentityCenterConfigurationRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
    DescribeLakeFormationIdentityCenterConfigurationResponse:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        InstanceArn:
          allOf:
          - $ref: '#/components/schemas/IdentityCenterInstanceArn'
          description: The Amazon Resource Name (ARN) of the connection.
        ApplicationArn:
          allOf:
          - $ref: '#/components/schemas/ApplicationArn'
          description: The Amazon Resource Name (ARN) of the Lake Formation application
            integrated with IAM Identity Center.
        ExternalFiltering:
          allOf:
          - $ref: '#/components/schemas/ExternalFilteringConfiguration'
          description: Indicates if external filtering is enabled.
        ShareRecipients:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipalList'
          description: 'A list of Amazon Web Services account IDs or Amazon Web Services
            organization/organizational unit ARNs that are allowed to access data
            managed by Lake Formation.


            If the `ShareRecipients` list includes valid values, a resource share
            is created with the principals you want to have access to the resources
            as the `ShareRecipients`.


            If the `ShareRecipients` value is null or the list is empty, no resource
            share is created.'
        ResourceShare:
          allOf:
          - $ref: '#/components/schemas/RAMResourceShareArn'
          description: The Amazon Resource Name (ARN) of the RAM share.
    DescribeResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArnString'
          description: The resource ARN.
      required:
      - ResourceArn
    DescribeResourceResponse:
      type: object
      properties:
        ResourceInfo:
          allOf:
          - $ref: '#/components/schemas/ResourceInfo'
          description: A structure containing information about an Lake Formation
            resource.
    DescribeTransactionRequest:
      type: object
      properties:
        TransactionId:
          allOf:
          - $ref: '#/components/schemas/TransactionIdString'
          description: The transaction for which to return status.
      required:
      - TransactionId
    DescribeTransactionResponse:
      type: object
      properties:
        TransactionDescription:
          allOf:
          - $ref: '#/components/schemas/TransactionDescription'
          description: Returns a `TransactionDescription` object containing information
            about the transaction.
    DescriptionString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*$
      minLength: 0
      maxLength: 2048
    DetailsMap:
      type: object
      properties:
        ResourceShare:
          allOf:
          - $ref: '#/components/schemas/ResourceShareList'
          description: A resource share ARN for a catalog resource shared through
            RAM.
      description: 'A structure containing the additional details to be returned in
        the `AdditionalDetails` attribute of `PrincipalResourcePermissions`.


        If a catalog resource is shared through Resource Access Manager (RAM), then
        there will exist a corresponding RAM resource share ARN.'
    ETagString:
      type: string
      pattern: ^[\p{L}\p{N}\p{P}]*$
      minLength: 1
      maxLength: 255
    EnableStatus:
      type: string
      enum:
      - ENABLED
      - DISABLED
    EntityNotFoundException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the problem.
      description: A specified entity does not exist.
    ErrorDetail:
      type: object
      properties:
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The code associated with this error.
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: A message describing the error.
      description: Contains details about an error.
    ErrorMessageString:
      type: string
    ExecutionStatistics:
      type: object
      properties:
        AverageExecutionTimeMillis:
          allOf:
          - $ref: '#/components/schemas/NumberOfMilliseconds'
          description: The average time the request took to be executed.
        DataScannedBytes:
          allOf:
          - $ref: '#/components/schemas/NumberOfBytes'
          description: The amount of data that was scanned in bytes.
        WorkUnitsExecutedCount:
          allOf:
          - $ref: '#/components/schemas/NumberOfItems'
          description: The number of work units executed.
      description: Statistics related to the processing of a query statement.
    ExpirationTimestamp:
      type: string
      format: date-time
    ExpiredException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the error.
      description: Contains details about an error where the query request expired.
    Expression:
      type: array
      items:
        $ref: '#/components/schemas/LFTag'
    ExpressionString:
      type: string
      minLength: 0
      maxLength: 3000
    ExtendTransactionRequest:
      type: object
      properties:
        TransactionId:
          allOf:
          - $ref: '#/components/schemas/TransactionIdString'
          description: The transaction to extend.
    ExtendTransactionResponse:
      type: object
      properties: {}
    ExternalFilteringConfiguration:
      type: object
      properties:
        Status:
          allOf:
          - $ref: '#/components/schemas/EnableStatus'
          description: Allows to enable or disable the third-party applications that
            are allowed to access data managed by Lake Formation.
        AuthorizedTargets:
          allOf:
          - $ref: '#/components/schemas/ScopeTargets'
          description: List of third-party application `ARNs` integrated with Lake
            Formation.
      required:
      - Status
      - AuthorizedTargets
      description: Configuration for enabling external data filtering for third-party
        applications to access data managed by Lake Formation .
    FieldNameString:
      type: string
      enum:
      - RESOURCE_ARN
      - ROLE_ARN
      - LAST_MODIFIED
    FilterCondition:
      type: object
      properties:
        Field:
          allOf:
          - $ref: '#/components/schemas/FieldNameString'
          description: The field to filter in the filter condition.
        ComparisonOperator:
          allOf:
          - $ref: '#/components/schemas/ComparisonOperator'
          description: The comparison operator used in the filter condition.
        StringValueList:
          allOf:
          - $ref: '#/components/schemas/StringValueList'
          description: A string with values used in evaluating the filter condition.
      description: This structure describes the filtering of columns in a table based
        on a filter condition.
    FilterConditionList:
      type: array
      items:
        $ref: '#/components/schemas/FilterCondition'
    GetDataCellsFilterRequest:
      type: object
      properties:
        TableCatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The ID of the catalog to which the table belongs.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: A database in the Glue Data Catalog.
        TableName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: A table in the database.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name given by the user to the data filter cell.
      required:
      - TableCatalogId
      - DatabaseName
      - TableName
      - Name
    GetDataCellsFilterResponse:
      type: object
      properties:
        DataCellsFilter:
          allOf:
          - $ref: '#/components/schemas/DataCellsFilter'
          description: A structure that describes certain columns on certain rows.
    GetDataLakePrincipalRequest:
      type: object
      properties: {}
    GetDataLakePrincipalResponse:
      type: object
      properties:
        Identity:
          allOf:
          - $ref: '#/components/schemas/IdentityString'
          description: A unique identifier of the invoking principal.
    GetDataLakeSettingsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
    GetDataLakeSettingsResponse:
      type: object
      properties:
        DataLakeSettings:
          allOf:
          - $ref: '#/components/schemas/DataLakeSettings'
          description: A structure representing a list of Lake Formation principals
            designated as data lake administrators.
    GetEffectivePermissionsForPathRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArnString'
          description: The Amazon Resource Name (ARN) of the resource for which you
            want to get permissions.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of results to return.
      required:
      - ResourceArn
    GetEffectivePermissionsForPathResponse:
      type: object
      properties:
        Permissions:
          allOf:
          - $ref: '#/components/schemas/PrincipalResourcePermissionsList'
          description: A list of the permissions for the specified table or database
            resource located at the path in Amazon S3.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
    GetLFTagExpressionRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name for the LF-Tag expression
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID.
      required:
      - Name
    GetLFTagExpressionResponse:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name for the LF-Tag expression.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: The description with information about the LF-Tag expression.
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID in which the LF-Tag expression is saved.
        Expression:
          allOf:
          - $ref: '#/components/schemas/Expression'
          description: The body of the LF-Tag expression. It is composed of one or
            more LF-Tag key-value pairs.
    GetLFTagRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        TagKey:
          allOf:
          - $ref: '#/components/schemas/LFTagKey'
          description: The key-name for the LF-tag.
      required:
      - TagKey
    GetLFTagResponse:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        TagKey:
          allOf:
          - $ref: '#/components/schemas/LFTagKey'
          description: The key-name for the LF-tag.
        TagValues:
          allOf:
          - $ref: '#/components/schemas/TagValueList'
          description: A list of possible values an attribute can take.
    GetQueryStateRequest:
      type: object
      properties:
        QueryId:
          allOf:
          - $ref: '#/components/schemas/GetQueryStateRequestQueryIdString'
          description: The ID of the plan query operation.
      required:
      - QueryId
    GetQueryStateRequestQueryIdString:
      type: string
      minLength: 36
      maxLength: 36
    GetQueryStateResponse:
      type: object
      properties:
        Error:
          allOf:
          - $ref: '#/components/schemas/ErrorMessageString'
          description: An error message when the operation fails.
        State:
          allOf:
          - $ref: '#/components/schemas/QueryStateString'
          description: "The state of a query previously submitted. The possible states\
            \ are:\n\n  * PENDING: the query is pending.\n\n  * WORKUNITS_AVAILABLE:\
            \ some work units are ready for retrieval and execution.\n\n  * FINISHED:\
            \ the query planning finished successfully, and all work units are ready\
            \ for retrieval and execution.\n\n  * ERROR: an error occurred with the\
            \ query, such as an invalid query ID or a backend error."
      required:
      - State
      description: A structure for the output.
    GetQueryStatisticsRequest:
      type: object
      properties:
        QueryId:
          allOf:
          - $ref: '#/components/schemas/GetQueryStatisticsRequestQueryIdString'
          description: The ID of the plan query operation.
      required:
      - QueryId
    GetQueryStatisticsRequestQueryIdString:
      type: string
      minLength: 36
      maxLength: 36
    GetQueryStatisticsResponse:
      type: object
      properties:
        ExecutionStatistics:
          allOf:
          - $ref: '#/components/schemas/ExecutionStatistics'
          description: An `ExecutionStatistics` structure containing execution statistics.
        PlanningStatistics:
          allOf:
          - $ref: '#/components/schemas/PlanningStatistics'
          description: A `PlanningStatistics` structure containing query planning
            statistics.
        QuerySubmissionTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The time that the query was submitted.
    GetResourceLFTagsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Resource:
          allOf:
          - $ref: '#/components/schemas/Resource'
          description: The database, table, or column resource for which you want
            to return LF-tags.
        ShowAssignedLFTags:
          allOf:
          - $ref: '#/components/schemas/BooleanNullable'
          description: Indicates whether to show the assigned LF-tags.
      required:
      - Resource
    GetResourceLFTagsResponse:
      type: object
      properties:
        LFTagOnDatabase:
          allOf:
          - $ref: '#/components/schemas/LFTagsList'
          description: A list of LF-tags applied to a database resource.
        LFTagsOnTable:
          allOf:
          - $ref: '#/components/schemas/LFTagsList'
          description: A list of LF-tags applied to a table resource.
        LFTagsOnColumns:
          allOf:
          - $ref: '#/components/schemas/ColumnLFTagsList'
          description: A list of LF-tags applied to a column resource.
    GetTableObjectsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The catalog containing the governed table. Defaults to the
            callerâ€™s account.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The database containing the governed table.
        TableName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The governed table for which to retrieve objects.
        TransactionId:
          allOf:
          - $ref: '#/components/schemas/TransactionIdString'
          description: The transaction ID at which to read the governed table contents.
            If this transaction has aborted, an error is returned. If not set, defaults
            to the most recent committed transaction. Cannot be specified along with
            `QueryAsOfTime`.
        QueryAsOfTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time as of when to read the governed table contents. If
            not set, the most recent transaction commit time is used. Cannot be specified
            along with `TransactionId`.
        PartitionPredicate:
          allOf:
          - $ref: '#/components/schemas/PredicateString'
          description: "A predicate to filter the objects returned based on the partition\
            \ keys defined in the governed table.\n\n  * The comparison operators\
            \ supported are: =, >, <, >=, <=\n\n  * The logical operators supported\
            \ are: AND\n\n  * The data types supported are integer, long, date(yyyy-MM-dd),\
            \ timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss\"), string and\
            \ decimal."
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: Specifies how many values to return in a page.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/TokenString'
          description: A continuation token if this is not the first call to retrieve
            these objects.
      required:
      - DatabaseName
      - TableName
    GetTableObjectsResponse:
      type: object
      properties:
        Objects:
          allOf:
          - $ref: '#/components/schemas/PartitionedTableObjectsList'
          description: A list of objects organized by partition keys.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/TokenString'
          description: A continuation token indicating whether additional data is
            available.
    GetTemporaryGluePartitionCredentialsRequest:
      type: object
      properties:
        TableArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArnString'
          description: The ARN of the partitions' table.
        Partition:
          allOf:
          - $ref: '#/components/schemas/PartitionValueList'
          description: A list of partition values identifying a single partition.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: Filters the request based on the user having been granted a
            list of specified permissions on the requested resource(s).
        DurationSeconds:
          allOf:
          - $ref: '#/components/schemas/CredentialTimeoutDurationSecondInteger'
          description: The time period, between 900 and 21,600 seconds, for the timeout
            of the temporary credentials.
        AuditContext:
          allOf:
          - $ref: '#/components/schemas/AuditContext'
          description: A structure representing context to access a resource (column
            names, query ID, etc).
        SupportedPermissionTypes:
          allOf:
          - $ref: '#/components/schemas/PermissionTypeList'
          description: A list of supported permission types for the partition. Valid
            values are `COLUMN_PERMISSION` and `CELL_FILTER_PERMISSION`.
      required:
      - TableArn
      - Partition
    GetTemporaryGluePartitionCredentialsResponse:
      type: object
      properties:
        AccessKeyId:
          allOf:
          - $ref: '#/components/schemas/AccessKeyIdString'
          description: The access key ID for the temporary credentials.
        SecretAccessKey:
          allOf:
          - $ref: '#/components/schemas/SecretAccessKeyString'
          description: The secret key for the temporary credentials.
        SessionToken:
          allOf:
          - $ref: '#/components/schemas/SessionTokenString'
          description: The session token for the temporary credentials.
        Expiration:
          allOf:
          - $ref: '#/components/schemas/ExpirationTimestamp'
          description: The date and time when the temporary credentials expire.
    GetTemporaryGlueTableCredentialsRequest:
      type: object
      properties:
        TableArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArnString'
          description: The ARN identifying a table in the Data Catalog for the temporary
            credentials request.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: Filters the request based on the user having been granted a
            list of specified permissions on the requested resource(s).
        DurationSeconds:
          allOf:
          - $ref: '#/components/schemas/CredentialTimeoutDurationSecondInteger'
          description: The time period, between 900 and 21,600 seconds, for the timeout
            of the temporary credentials.
        AuditContext:
          allOf:
          - $ref: '#/components/schemas/AuditContext'
          description: A structure representing context to access a resource (column
            names, query ID, etc).
        SupportedPermissionTypes:
          allOf:
          - $ref: '#/components/schemas/PermissionTypeList'
          description: A list of supported permission types for the table. Valid values
            are `COLUMN_PERMISSION` and `CELL_FILTER_PERMISSION`.
        S3Path:
          allOf:
          - $ref: '#/components/schemas/PathString'
          description: The Amazon S3 path for the table.
        QuerySessionContext:
          allOf:
          - $ref: '#/components/schemas/QuerySessionContext'
          description: A structure used as a protocol between query engines and Lake
            Formation or Glue. Contains both a Lake Formation generated authorization
            identifier and information from the request's authorization context.
      required:
      - TableArn
    GetTemporaryGlueTableCredentialsResponse:
      type: object
      properties:
        AccessKeyId:
          allOf:
          - $ref: '#/components/schemas/AccessKeyIdString'
          description: The access key ID for the temporary credentials.
        SecretAccessKey:
          allOf:
          - $ref: '#/components/schemas/SecretAccessKeyString'
          description: The secret key for the temporary credentials.
        SessionToken:
          allOf:
          - $ref: '#/components/schemas/SessionTokenString'
          description: The session token for the temporary credentials.
        Expiration:
          allOf:
          - $ref: '#/components/schemas/ExpirationTimestamp'
          description: The date and time when the temporary credentials expire.
        VendedS3Path:
          allOf:
          - $ref: '#/components/schemas/PathStringList'
          description: The Amazon S3 path for the temporary credentials.
    GetWorkUnitResultsRequest:
      type: object
      properties:
        QueryId:
          allOf:
          - $ref: '#/components/schemas/GetWorkUnitResultsRequestQueryIdString'
          description: The ID of the plan query operation for which to get results.
        WorkUnitId:
          allOf:
          - $ref: '#/components/schemas/GetWorkUnitResultsRequestWorkUnitIdLong'
          description: The work unit ID for which to get results. Value generated
            by enumerating `WorkUnitIdMin` to `WorkUnitIdMax` (inclusive) from the
            `WorkUnitRange` in the output of `GetWorkUnits`.
        WorkUnitToken:
          allOf:
          - $ref: '#/components/schemas/SyntheticGetWorkUnitResultsRequestWorkUnitTokenString'
          description: A work token used to query the execution service. Token output
            from `GetWorkUnits`.
      required:
      - QueryId
      - WorkUnitId
      - WorkUnitToken
    GetWorkUnitResultsRequestQueryIdString:
      type: string
      minLength: 36
      maxLength: 36
    GetWorkUnitResultsRequestWorkUnitIdLong:
      type: integer
      format: int64
      default: 0
      minimum: 0
    GetWorkUnitResultsResponse:
      type: object
      properties:
        ResultStream:
          allOf:
          - $ref: '#/components/schemas/ResultStream'
          description: Rows returned from the `GetWorkUnitResults` operation as a
            stream of Apache Arrow v1.0 messages.
      description: A structure for the output.
    GetWorkUnitsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is a continuation call.
        PageSize:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The size of each page to get in the Amazon Web Services service
            call. This does not affect the number of items returned in the command's
            output. Setting a smaller page size results in more calls to the Amazon
            Web Services service, retrieving fewer items in each call. This can help
            prevent the Amazon Web Services service calls from timing out.
        QueryId:
          allOf:
          - $ref: '#/components/schemas/GetWorkUnitsRequestQueryIdString'
          description: The ID of the plan query operation.
      required:
      - QueryId
    GetWorkUnitsRequestQueryIdString:
      type: string
      minLength: 36
      maxLength: 36
    GetWorkUnitsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token for paginating the returned list of tokens,
            returned if the current segment of the list is not the last.
        QueryId:
          allOf:
          - $ref: '#/components/schemas/QueryIdString'
          description: The ID of the plan query operation.
        WorkUnitRanges:
          allOf:
          - $ref: '#/components/schemas/WorkUnitRangeList'
          description: A `WorkUnitRangeList` object that specifies the valid range
            of work unit IDs for querying the execution service.
      required:
      - QueryId
      - WorkUnitRanges
      description: A structure for the output.
    GlueEncryptionException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the problem.
      description: An encryption operation failed.
    GrantPermissionsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Principal:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipal'
          description: 'The principal to be granted the permissions on the resource.
            Supported principals are IAM users or IAM roles, and they are defined
            by their principal type and their ARN.


            Note that if you define a resource with a particular ARN, then later delete,
            and recreate a resource with that same ARN, the resource maintains the
            permissions already granted.'
        Resource:
          allOf:
          - $ref: '#/components/schemas/Resource'
          description: The resource to which permissions are to be granted. Resources
            in Lake Formation are the Data Catalog, databases, and tables.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: The permissions granted to the principal on the resource. Lake
            Formation defines privileges to grant and revoke access to metadata in
            the Data Catalog and data organized in underlying data storage such as
            Amazon S3. Lake Formation requires that each principal be authorized to
            perform a specific task on Lake Formation resources.
        Condition:
          $ref: '#/components/schemas/Condition'
        PermissionsWithGrantOption:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: Indicates a list of the granted permissions that the principal
            may pass to other users. These permissions may only be a subset of the
            permissions granted in the `Privileges`.
      required:
      - Principal
      - Resource
      - Permissions
    GrantPermissionsResponse:
      type: object
      properties: {}
    HashString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*$
      minLength: 1
      maxLength: 255
    IAMRoleArn:
      type: string
      pattern: ^arn:aws:iam::[0-9]*:role/
    IAMSAMLProviderArn:
      type: string
      pattern: ^arn:aws:iam::[0-9]*:saml-provider/
    Identifier:
      type: string
      minLength: 1
      maxLength: 255
    IdentityCenterInstanceArn:
      type: string
    IdentityString:
      type: string
    InternalServiceException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the problem.
      description: An internal service error occurred.
    InvalidInputException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the problem.
      description: The input provided was not valid.
    KeyString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*$
      minLength: 1
      maxLength: 255
    LFTag:
      type: object
      properties:
        TagKey:
          allOf:
          - $ref: '#/components/schemas/LFTagKey'
          description: The key-name for the LF-tag.
        TagValues:
          allOf:
          - $ref: '#/components/schemas/TagValueList'
          description: 'A list of possible values an attribute can take.


            The maximum number of values that can be defined for a LF-Tag is 1000.
            A single API call supports 50 values. You can use multiple API calls to
            add more values.'
      required:
      - TagKey
      - TagValues
      description: A structure that allows an admin to grant user permissions on certain
        conditions. For example, granting a role access to all columns that do not
        have the LF-tag 'PII' in tables that have the LF-tag 'Prod'.
    LFTagError:
      type: object
      properties:
        LFTag:
          allOf:
          - $ref: '#/components/schemas/LFTagPair'
          description: The key-name of the LF-tag.
        Error:
          allOf:
          - $ref: '#/components/schemas/ErrorDetail'
          description: An error that occurred with the attachment or detachment of
            the LF-tag.
      description: A structure containing an error related to a `TagResource` or `UnTagResource`
        operation.
    LFTagErrors:
      type: array
      items:
        $ref: '#/components/schemas/LFTagError'
    LFTagExpression:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name for saved the LF-Tag expression.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: A structure that contains information about the LF-Tag expression.
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID.
        Expression:
          allOf:
          - $ref: '#/components/schemas/Expression'
          description: A logical expression composed of one or more LF-Tags.
      description: A structure consists LF-Tag expression name and catalog ID.
    LFTagExpressionResource:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the LF-Tag expression to grant permissions on.
      required:
      - Name
      description: A structure containing a LF-Tag expression (keys and values).
    LFTagExpressionsList:
      type: array
      items:
        $ref: '#/components/schemas/LFTagExpression'
    LFTagKey:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:\/=+\-@%]*)$
      minLength: 1
      maxLength: 128
    LFTagKeyResource:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        TagKey:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The key-name for the LF-tag.
        TagValues:
          allOf:
          - $ref: '#/components/schemas/TagValueList'
          description: A list of possible values an attribute can take.
      required:
      - TagKey
      - TagValues
      description: A structure containing an LF-tag key and values for a resource.
    LFTagPair:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        TagKey:
          allOf:
          - $ref: '#/components/schemas/LFTagKey'
          description: The key-name for the LF-tag.
        TagValues:
          allOf:
          - $ref: '#/components/schemas/TagValueList'
          description: A list of possible values an attribute can take.
      required:
      - TagKey
      - TagValues
      description: A structure containing an LF-tag key-value pair.
    LFTagPolicyResource:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The resource type for which the LF-tag policy applies.
        Expression:
          allOf:
          - $ref: '#/components/schemas/Expression'
          description: A list of LF-tag conditions or a saved expression that apply
            to the resource's LF-tag policy.
        ExpressionName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: If provided, permissions are granted to the Data Catalog resources
            whose assigned LF-Tags match the expression body of the saved expression
            under the provided `ExpressionName`.
      required:
      - ResourceType
      description: A structure containing a list of LF-tag conditions or saved LF-Tag
        expressions that apply to a resource's LF-tag policy.
    LFTagValue:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:\*\/=+\-@%]*)$
      minLength: 0
      maxLength: 256
    LFTagsList:
      type: array
      items:
        $ref: '#/components/schemas/LFTagPair'
    LakeFormationOptInsInfo:
      type: object
      properties:
        Resource:
          $ref: '#/components/schemas/Resource'
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
        Condition:
          allOf:
          - $ref: '#/components/schemas/Condition'
          description: A Lake Formation condition, which applies to permissions and
            opt-ins that contain an expression.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/LastModifiedTimestamp'
          description: The last modified date and time of the record.
        LastUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The user who updated the record.
      description: A single principal-resource pair that has Lake Formation permissins
        enforced.
    LakeFormationOptInsInfoList:
      type: array
      items:
        $ref: '#/components/schemas/LakeFormationOptInsInfo'
    LastModifiedTimestamp:
      type: string
      format: date-time
    ListDataCellsFilterRequest:
      type: object
      properties:
        Table:
          allOf:
          - $ref: '#/components/schemas/TableResource'
          description: A table in the Glue Data Catalog.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is a continuation call.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum size of the response.
    ListDataCellsFilterResponse:
      type: object
      properties:
        DataCellsFilters:
          allOf:
          - $ref: '#/components/schemas/DataCellsFilterList'
          description: A list of `DataCellFilter` structures.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if not all requested data cell filters
            have been returned.
    ListLFTagExpressionsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of results to return.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
    ListLFTagExpressionsResponse:
      type: object
      properties:
        LFTagExpressions:
          allOf:
          - $ref: '#/components/schemas/LFTagExpressionsList'
          description: Logical expressions composed of one more LF-Tag key-value pairs.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
    ListLFTagsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        ResourceShareType:
          allOf:
          - $ref: '#/components/schemas/ResourceShareType'
          description: If resource share type is `ALL`, returns both in-account LF-tags
            and shared LF-tags that the requester has permission to view. If resource
            share type is `FOREIGN`, returns all share LF-tags that the requester
            can view. If no resource share type is passed, lists LF-tags in the given
            catalog ID that the requester has permission to view.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of results to return.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
    ListLFTagsResponse:
      type: object
      properties:
        LFTags:
          allOf:
          - $ref: '#/components/schemas/LFTagsList'
          description: A list of LF-tags that the requested has permission to view.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, present if the current list segment is
            not the last.
    ListLakeFormationOptInsRequest:
      type: object
      properties:
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
        Resource:
          allOf:
          - $ref: '#/components/schemas/Resource'
          description: A structure for the resource.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of results to return.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
    ListLakeFormationOptInsResponse:
      type: object
      properties:
        LakeFormationOptInsInfoList:
          allOf:
          - $ref: '#/components/schemas/LakeFormationOptInsInfoList'
          description: A list of principal-resource pairs that have Lake Formation
            permissins enforced.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
    ListPermissionsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Principal:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipal'
          description: Specifies a principal to filter the permissions returned.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/DataLakeResourceType'
          description: Specifies a resource type to filter the permissions returned.
        Resource:
          allOf:
          - $ref: '#/components/schemas/Resource'
          description: 'A resource where you will get a list of the principal permissions.


            This operation does not support getting privileges on a table with columns.
            Instead, call this operation on the table, and the operation returns the
            table and the table w columns.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of results to return.
        IncludeRelated:
          allOf:
          - $ref: '#/components/schemas/TrueFalseString'
          description: Indicates that related permissions should be included in the
            results.
    ListPermissionsResponse:
      type: object
      properties:
        PrincipalResourcePermissions:
          allOf:
          - $ref: '#/components/schemas/PrincipalResourcePermissionsList'
          description: A list of principals and their permissions on the resource
            for the specified principal and resource types.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
    ListResourcesRequest:
      type: object
      properties:
        FilterConditionList:
          allOf:
          - $ref: '#/components/schemas/FilterConditionList'
          description: Any applicable row-level and/or column-level filtering conditions
            for the resources.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of resource results.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            these resources.
    ListResourcesResponse:
      type: object
      properties:
        ResourceInfoList:
          allOf:
          - $ref: '#/components/schemas/ResourceInfoList'
          description: A summary of the data lake resources.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            these resources.
    ListTableStorageOptimizersRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The Catalog ID of the table.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: Name of the database where the table is present.
        TableName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: Name of the table.
        StorageOptimizerType:
          allOf:
          - $ref: '#/components/schemas/OptimizerType'
          description: The specific type of storage optimizers to list. The supported
            value is `compaction`.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The number of storage optimizers to return on each call.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is a continuation call.
      required:
      - DatabaseName
      - TableName
    ListTableStorageOptimizersResponse:
      type: object
      properties:
        StorageOptimizerList:
          allOf:
          - $ref: '#/components/schemas/StorageOptimizerList'
          description: A list of the storage optimizers associated with a table.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token for paginating the returned list of tokens,
            returned if the current segment of the list is not the last.
    ListTransactionsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The catalog for which to list transactions. Defaults to the
            account ID of the caller.
        StatusFilter:
          allOf:
          - $ref: '#/components/schemas/TransactionStatusFilter'
          description: A filter indicating the status of transactions to return. Options
            are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is `ALL`.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of transactions to return in a single call.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/TokenString'
          description: A continuation token if this is not the first call to retrieve
            transactions.
    ListTransactionsResponse:
      type: object
      properties:
        Transactions:
          allOf:
          - $ref: '#/components/schemas/TransactionDescriptionList'
          description: A list of transactions. The record for each transaction is
            a `TransactionDescription` object.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/TokenString'
          description: A continuation token indicating whether additional data is
            available.
    MessageString:
      type: string
    NameString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*$
      minLength: 1
      maxLength: 255
    NullableBoolean:
      type: boolean
    NullableString:
      type: string
    NumberOfBytes:
      type: integer
      format: int64
      default: 0
    NumberOfItems:
      type: integer
      format: int64
      default: 0
    NumberOfMilliseconds:
      type: integer
      format: int64
      default: 0
    ObjectSize:
      type: integer
      format: int64
      default: 0
    OperationTimeoutException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the problem.
      description: The operation timed out.
    OptimizerType:
      type: string
      enum:
      - COMPACTION
      - GARBAGE_COLLECTION
      - ALL
    PageSize:
      type: integer
      minimum: 1
      maximum: 1000
    ParametersMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ParametersMapValue'
    ParametersMapValue:
      type: string
      minLength: 0
      maxLength: 512000
    PartitionObjects:
      type: object
      properties:
        PartitionValues:
          allOf:
          - $ref: '#/components/schemas/PartitionValuesList'
          description: A list of partition values.
        Objects:
          allOf:
          - $ref: '#/components/schemas/TableObjectList'
          description: A list of table objects
      description: A structure containing a list of partition values and table objects.
    PartitionValueList:
      type: object
      properties:
        Values:
          allOf:
          - $ref: '#/components/schemas/ValueStringList'
          description: The list of partition values.
      required:
      - Values
      description: Contains a list of values defining partitions.
    PartitionValueString:
      type: string
      minLength: 0
      maxLength: 1024
    PartitionValuesList:
      type: array
      items:
        $ref: '#/components/schemas/PartitionValueString'
    PartitionedTableObjectsList:
      type: array
      items:
        $ref: '#/components/schemas/PartitionObjects'
    PathString:
      type: string
    PathStringList:
      type: array
      items:
        $ref: '#/components/schemas/PathString'
    Permission:
      type: string
      enum:
      - ALL
      - SELECT
      - ALTER
      - DROP
      - DELETE
      - INSERT
      - DESCRIBE
      - CREATE_DATABASE
      - CREATE_TABLE
      - DATA_LOCATION_ACCESS
      - CREATE_LF_TAG
      - ASSOCIATE
      - GRANT_WITH_LF_TAG_EXPRESSION
      - CREATE_LF_TAG_EXPRESSION
      - CREATE_CATALOG
      - SUPER_USER
    PermissionList:
      type: array
      items:
        $ref: '#/components/schemas/Permission'
    PermissionType:
      type: string
      enum:
      - COLUMN_PERMISSION
      - CELL_FILTER_PERMISSION
      - NESTED_PERMISSION
      - NESTED_CELL_PERMISSION
    PermissionTypeList:
      type: array
      items:
        $ref: '#/components/schemas/PermissionType'
    PermissionTypeMismatchException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the problem.
      description: The engine does not support filtering data based on the enforced
        permissions. For example, if you call the `GetTemporaryGlueTableCredentials`
        operation with `SupportedPermissionType` equal to `ColumnPermission`, but
        cell-level permissions exist on the table, this exception is thrown.
    PlanningStatistics:
      type: object
      properties:
        EstimatedDataToScanBytes:
          allOf:
          - $ref: '#/components/schemas/NumberOfBytes'
          description: An estimate of the data that was scanned in bytes.
        PlanningTimeMillis:
          allOf:
          - $ref: '#/components/schemas/NumberOfMilliseconds'
          description: The time that it took to process the request.
        QueueTimeMillis:
          allOf:
          - $ref: '#/components/schemas/NumberOfMilliseconds'
          description: The time the request was in queue to be processed.
        WorkUnitsGeneratedCount:
          allOf:
          - $ref: '#/components/schemas/NumberOfItems'
          description: The number of work units generated.
      description: Statistics related to the processing of a query statement.
    PredicateString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*$
      minLength: 0
      maxLength: 2048
    PrincipalPermissions:
      type: object
      properties:
        Principal:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipal'
          description: The principal who is granted permissions.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: The permissions that are granted to the principal.
      description: Permissions granted to a principal.
    PrincipalPermissionsList:
      type: array
      items:
        $ref: '#/components/schemas/PrincipalPermissions'
    PrincipalResourcePermissions:
      type: object
      properties:
        Principal:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipal'
          description: The Data Lake principal to be granted or revoked permissions.
        Resource:
          allOf:
          - $ref: '#/components/schemas/Resource'
          description: The resource where permissions are to be granted or revoked.
        Condition:
          allOf:
          - $ref: '#/components/schemas/Condition'
          description: A Lake Formation condition, which applies to permissions and
            opt-ins that contain an expression.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: The permissions to be granted or revoked on the resource.
        PermissionsWithGrantOption:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: Indicates whether to grant the ability to grant permissions
            (as a subset of permissions granted).
        AdditionalDetails:
          allOf:
          - $ref: '#/components/schemas/DetailsMap'
          description: This attribute can be used to return any additional details
            of `PrincipalResourcePermissions`. Currently returns only as a RAM resource
            share ARN.
        LastUpdated:
          allOf:
          - $ref: '#/components/schemas/LastModifiedTimestamp'
          description: The date and time when the resource was last updated.
        LastUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The user who updated the record.
      description: The permissions granted or revoked on a resource.
    PrincipalResourcePermissionsList:
      type: array
      items:
        $ref: '#/components/schemas/PrincipalResourcePermissions'
    PutDataLakeSettingsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        DataLakeSettings:
          allOf:
          - $ref: '#/components/schemas/DataLakeSettings'
          description: A structure representing a list of Lake Formation principals
            designated as data lake administrators.
      required:
      - DataLakeSettings
    PutDataLakeSettingsResponse:
      type: object
      properties: {}
    QueryIdString:
      type: string
    QueryParameterMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    QueryPlanningContext:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The ID of the Data Catalog where the partition in question
            resides. If none is provided, the Amazon Web Services account ID is used
            by default.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/QueryPlanningContextDatabaseNameString'
          description: The database containing the table.
        QueryAsOfTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time as of when to read the table contents. If not set,
            the most recent transaction commit time will be used. Cannot be specified
            along with `TransactionId`.
        QueryParameters:
          allOf:
          - $ref: '#/components/schemas/QueryParameterMap'
          description: A map consisting of key-value pairs.
        TransactionId:
          allOf:
          - $ref: '#/components/schemas/TransactionIdString'
          description: The transaction ID at which to read the table contents. If
            this transaction is not committed, the read will be treated as part of
            that transaction and will see its writes. If this transaction has aborted,
            an error will be returned. If not set, defaults to the most recent committed
            transaction. Cannot be specified along with `QueryAsOfTime`.
      required:
      - DatabaseName
      description: A structure containing information about the query plan.
    QueryPlanningContextDatabaseNameString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*$
      minLength: 1
    QuerySessionContext:
      type: object
      properties:
        QueryId:
          allOf:
          - $ref: '#/components/schemas/HashString'
          description: A unique identifier generated by the query engine for the query.
        QueryStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp provided by the query engine for when the query
            started.
        ClusterId:
          allOf:
          - $ref: '#/components/schemas/NullableString'
          description: An identifier string for the consumer cluster.
        QueryAuthorizationId:
          allOf:
          - $ref: '#/components/schemas/HashString'
          description: A cryptographically generated query identifier generated by
            Glue or Lake Formation.
        AdditionalContext:
          allOf:
          - $ref: '#/components/schemas/AdditionalContextMap'
          description: An opaque string-string map passed by the query engine.
      description: A structure used as a protocol between query engines and Lake Formation
        or Glue. Contains both a Lake Formation generated authorization identifier
        and information from the request's authorization context.
    QueryStateString:
      type: string
      enum:
      - PENDING
      - WORKUNITS_AVAILABLE
      - ERROR
      - FINISHED
      - EXPIRED
    RAMResourceShareArn:
      type: string
    RegisterResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArnString'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to register.
        UseServiceLinkedRole:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: 'Designates an Identity and Access Management (IAM) service-linked
            role by registering this role with the Data Catalog. A service-linked
            role is a unique type of IAM role that is linked directly to Lake Formation.


            For more information, see [Using Service-Linked Roles for Lake Formation](https://docs.aws.amazon.com/lake-formation/latest/dg/service-linked-roles.html).'
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/IAMRoleArn'
          description: The identifier for the role that registers the resource.
        WithFederation:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Whether or not the resource is a federated resource.
        HybridAccessEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Specifies whether the data access of tables pointing to the
            location can be managed by both Lake Formation permissions as well as
            Amazon S3 bucket policies.
        WithPrivilegedAccess:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Grants the calling principal the permissions to perform all
            supported Lake Formation operations on the registered data location.
      required:
      - ResourceArn
    RegisterResourceResponse:
      type: object
      properties: {}
    RemoveLFTagsFromResourceRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Resource:
          allOf:
          - $ref: '#/components/schemas/Resource'
          description: The database, table, or column resource where you want to remove
            an LF-tag.
        LFTags:
          allOf:
          - $ref: '#/components/schemas/LFTagsList'
          description: The LF-tags to be removed from the resource.
      required:
      - Resource
      - LFTags
    RemoveLFTagsFromResourceResponse:
      type: object
      properties:
        Failures:
          allOf:
          - $ref: '#/components/schemas/LFTagErrors'
          description: A list of failures to untag a resource.
    Resource:
      type: object
      properties:
        Catalog:
          allOf:
          - $ref: '#/components/schemas/CatalogResource'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Database:
          allOf:
          - $ref: '#/components/schemas/DatabaseResource'
          description: The database for the resource. Unique to the Data Catalog.
            A database is a set of associated table definitions organized into a logical
            group. You can Grant and Revoke database permissions to a principal.
        Table:
          allOf:
          - $ref: '#/components/schemas/TableResource'
          description: The table for the resource. A table is a metadata definition
            that represents your data. You can Grant and Revoke table privileges to
            a principal.
        TableWithColumns:
          allOf:
          - $ref: '#/components/schemas/TableWithColumnsResource'
          description: The table with columns for the resource. A principal with permissions
            to this resource can select metadata from the columns of a table in the
            Data Catalog and the underlying data in Amazon S3.
        DataLocation:
          allOf:
          - $ref: '#/components/schemas/DataLocationResource'
          description: The location of an Amazon S3 path where permissions are granted
            or revoked.
        DataCellsFilter:
          allOf:
          - $ref: '#/components/schemas/DataCellsFilterResource'
          description: A data cell filter.
        LFTag:
          allOf:
          - $ref: '#/components/schemas/LFTagKeyResource'
          description: The LF-tag key and values attached to a resource.
        LFTagPolicy:
          allOf:
          - $ref: '#/components/schemas/LFTagPolicyResource'
          description: A list of LF-tag conditions or saved LF-Tag expressions that
            define a resource's LF-tag policy.
        LFTagExpression:
          allOf:
          - $ref: '#/components/schemas/LFTagExpressionResource'
          description: LF-Tag expression resource. A logical expression composed of
            one or more LF-Tag key:value pairs.
      description: A structure for the resource.
    ResourceArnString:
      type: string
    ResourceInfo:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArnString'
          description: The Amazon Resource Name (ARN) of the resource.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/IAMRoleArn'
          description: The IAM role that registered a resource.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/LastModifiedTimestamp'
          description: The date and time the resource was last modified.
        WithFederation:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Whether or not the resource is a federated resource.
        HybridAccessEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Indicates whether the data access of tables pointing to the
            location can be managed by both Lake Formation permissions as well as
            Amazon S3 bucket policies.
        WithPrivilegedAccess:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Grants the calling principal the permissions to perform all
            supported Lake Formation operations on the registered data location.
      description: A structure containing information about an Lake Formation resource.
    ResourceInfoList:
      type: array
      items:
        $ref: '#/components/schemas/ResourceInfo'
    ResourceNotReadyException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the error.
      description: Contains details about an error related to a resource which is
        not ready for a transaction.
    ResourceNumberLimitExceededException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the problem.
      description: A resource numerical limit was exceeded.
    ResourceShareList:
      type: array
      items:
        $ref: '#/components/schemas/RAMResourceShareArn'
    ResourceShareType:
      type: string
      enum:
      - FOREIGN
      - ALL
    ResourceType:
      type: string
      enum:
      - DATABASE
      - TABLE
    Result:
      type: string
    ResultStream:
      type: string
      format: byte
    RevokePermissionsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Principal:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipal'
          description: The principal to be revoked permissions on the resource.
        Resource:
          allOf:
          - $ref: '#/components/schemas/Resource'
          description: The resource to which permissions are to be revoked.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: The permissions revoked to the principal on the resource. For
            information about permissions, see [Security and Access Control to Metadata
            and Data](https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html).
        Condition:
          $ref: '#/components/schemas/Condition'
        PermissionsWithGrantOption:
          allOf:
          - $ref: '#/components/schemas/PermissionList'
          description: Indicates a list of permissions for which to revoke the grant
            option allowing the principal to pass permissions to other principals.
      required:
      - Principal
      - Resource
      - Permissions
    RevokePermissionsResponse:
      type: object
      properties: {}
    RowFilter:
      type: object
      properties:
        FilterExpression:
          allOf:
          - $ref: '#/components/schemas/PredicateString'
          description: A filter expression.
        AllRowsWildcard:
          allOf:
          - $ref: '#/components/schemas/AllRowsWildcard'
          description: A wildcard for all rows.
      description: A PartiQL predicate.
    SAMLAssertionString:
      type: string
      minLength: 4
      maxLength: 100000
    ScopeTarget:
      type: string
    ScopeTargets:
      type: array
      items:
        $ref: '#/components/schemas/ScopeTarget'
    SearchDatabasesByLFTagsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/SearchPageSize'
          description: The maximum number of results to return.
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Expression:
          allOf:
          - $ref: '#/components/schemas/Expression'
          description: A list of conditions (`LFTag` structures) to search for in
            database resources.
      required:
      - Expression
    SearchDatabasesByLFTagsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, present if the current list segment is
            not the last.
        DatabaseList:
          allOf:
          - $ref: '#/components/schemas/DatabaseLFTagsList'
          description: A list of databases that meet the LF-tag conditions.
    SearchPageSize:
      type: integer
      minimum: 1
      maximum: 100
    SearchTablesByLFTagsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, if this is not the first call to retrieve
            this list.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/SearchPageSize'
          description: The maximum number of results to return.
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        Expression:
          allOf:
          - $ref: '#/components/schemas/Expression'
          description: A list of conditions (`LFTag` structures) to search for in
            table resources.
      required:
      - Expression
    SearchTablesByLFTagsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/Token'
          description: A continuation token, present if the current list segment is
            not the last. On the first run, if you include a not null (a value) token
            you can get empty pages.
        TableList:
          allOf:
          - $ref: '#/components/schemas/TableLFTagsList'
          description: A list of tables that meet the LF-tag conditions.
    SecretAccessKeyString:
      type: string
    SessionTokenString:
      type: string
    StartQueryPlanningRequest:
      type: object
      properties:
        QueryPlanningContext:
          allOf:
          - $ref: '#/components/schemas/QueryPlanningContext'
          description: A structure containing information about the query plan.
        QueryString:
          allOf:
          - $ref: '#/components/schemas/SyntheticStartQueryPlanningRequestQueryString'
          description: A PartiQL query statement used as an input to the planner service.
      required:
      - QueryPlanningContext
      - QueryString
    StartQueryPlanningResponse:
      type: object
      properties:
        QueryId:
          allOf:
          - $ref: '#/components/schemas/QueryIdString'
          description: The ID of the plan query operation can be used to fetch the
            actual work unit descriptors that are produced as the result of the operation.
            The ID is also used to get the query state and as an input to the `Execute`
            operation.
      required:
      - QueryId
      description: A structure for the output.
    StartTransactionRequest:
      type: object
      properties:
        TransactionType:
          allOf:
          - $ref: '#/components/schemas/TransactionType'
          description: Indicates whether this transaction should be read only or read
            and write. Writes made using a read-only transaction ID will be rejected.
            Read-only transactions do not need to be committed.
    StartTransactionResponse:
      type: object
      properties:
        TransactionId:
          allOf:
          - $ref: '#/components/schemas/TransactionIdString'
          description: An opaque identifier for the transaction.
    StatisticsNotReadyYetException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the error.
      description: Contains details about an error related to statistics not being
        ready.
    StorageOptimizer:
      type: object
      properties:
        StorageOptimizerType:
          allOf:
          - $ref: '#/components/schemas/OptimizerType'
          description: The specific type of storage optimizer. The supported value
            is `compaction`.
        Config:
          allOf:
          - $ref: '#/components/schemas/StorageOptimizerConfig'
          description: 'A map of the storage optimizer configuration. Currently contains
            only one key-value pair: `is_enabled` indicates true or false for acceleration.'
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: 'A message that contains information about any error (if present).


            When an acceleration result has an enabled status, the error message is
            empty.


            When an acceleration result has a disabled status, the message describes
            an error or simply indicates "disabled by the user".'
        Warnings:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message that contains information about any warnings (if
            present).
        LastRunDetails:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: When an acceleration result has an enabled status, contains
            the details of the last job run.
      description: A structure describing the configuration and details of a storage
        optimizer.
    StorageOptimizerConfig:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StorageOptimizerConfigValue'
    StorageOptimizerConfigKey:
      type: string
    StorageOptimizerConfigMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StorageOptimizerConfig'
    StorageOptimizerConfigValue:
      type: string
    StorageOptimizerList:
      type: array
      items:
        $ref: '#/components/schemas/StorageOptimizer'
    StringValue:
      type: string
    StringValueList:
      type: array
      items:
        $ref: '#/components/schemas/StringValue'
    SyntheticGetWorkUnitResultsRequestWorkUnitTokenString:
      type: string
      minLength: 1
    SyntheticStartQueryPlanningRequestQueryString:
      type: string
      minLength: 1
    TableLFTagsList:
      type: array
      items:
        $ref: '#/components/schemas/TaggedTable'
    TableObject:
      type: object
      properties:
        Uri:
          allOf:
          - $ref: '#/components/schemas/URI'
          description: The Amazon S3 location of the object.
        ETag:
          allOf:
          - $ref: '#/components/schemas/ETagString'
          description: The Amazon S3 ETag of the object. Returned by `GetTableObjects`
            for validation and used to identify changes to the underlying data.
        Size:
          allOf:
          - $ref: '#/components/schemas/ObjectSize'
          description: The size of the Amazon S3 object in bytes.
      description: Specifies the details of a governed table.
    TableObjectList:
      type: array
      items:
        $ref: '#/components/schemas/TableObject'
    TableResource:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, it is the
            account ID of the caller.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the database for the table. Unique to a Data Catalog.
            A database is a set of associated table definitions organized into a logical
            group. You can Grant and Revoke database privileges to a principal.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the table.
        TableWildcard:
          allOf:
          - $ref: '#/components/schemas/TableWildcard'
          description: 'A wildcard object representing every table under a database.


            At least one of `TableResource$Name` or `TableResource$TableWildcard`
            is required.'
      required:
      - DatabaseName
      description: A structure for the table object. A table is a metadata definition
        that represents your data. You can Grant and Revoke table privileges to a
        principal.
    TableWildcard:
      type: object
      properties: {}
      description: A wildcard object representing every table under a database.
    TableWithColumnsResource:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, it is the
            account ID of the caller.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the database for the table with columns resource.
            Unique to the Data Catalog. A database is a set of associated table definitions
            organized into a logical group. You can Grant and Revoke database privileges
            to a principal.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the table resource. A table is a metadata definition
            that represents your data. You can Grant and Revoke table privileges to
            a principal.
        ColumnNames:
          allOf:
          - $ref: '#/components/schemas/ColumnNames'
          description: The list of column names for the table. At least one of `ColumnNames`
            or `ColumnWildcard` is required.
        ColumnWildcard:
          allOf:
          - $ref: '#/components/schemas/ColumnWildcard'
          description: A wildcard specified by a `ColumnWildcard` object. At least
            one of `ColumnNames` or `ColumnWildcard` is required.
      required:
      - DatabaseName
      - Name
      description: 'A structure for a table with columns object. This object is only
        used when granting a SELECT permission.


        This object must take a value for at least one of `ColumnsNames`, `ColumnsIndexes`,
        or `ColumnsWildcard`.'
    TagValueList:
      type: array
      items:
        $ref: '#/components/schemas/LFTagValue'
    TaggedDatabase:
      type: object
      properties:
        Database:
          allOf:
          - $ref: '#/components/schemas/DatabaseResource'
          description: A database that has LF-tags attached to it.
        LFTags:
          allOf:
          - $ref: '#/components/schemas/LFTagsList'
          description: A list of LF-tags attached to the database.
      description: A structure describing a database resource with LF-tags.
    TaggedTable:
      type: object
      properties:
        Table:
          allOf:
          - $ref: '#/components/schemas/TableResource'
          description: A table that has LF-tags attached to it.
        LFTagOnDatabase:
          allOf:
          - $ref: '#/components/schemas/LFTagsList'
          description: A list of LF-tags attached to the database where the table
            resides.
        LFTagsOnTable:
          allOf:
          - $ref: '#/components/schemas/LFTagsList'
          description: A list of LF-tags attached to the table.
        LFTagsOnColumns:
          allOf:
          - $ref: '#/components/schemas/ColumnLFTagsList'
          description: A list of LF-tags attached to columns in the table.
      description: A structure describing a table resource with LF-tags.
    ThrottledException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the error.
      description: Contains details about an error where the query request was throttled.
    Timestamp:
      type: string
      format: date-time
    Token:
      type: string
    TokenString:
      type: string
      minLength: 0
      maxLength: 4096
    TransactionCanceledException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the error.
      description: Contains details about an error related to a transaction that was
        cancelled.
    TransactionCommitInProgressException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the error.
      description: Contains details about an error related to a transaction commit
        that was in progress.
    TransactionCommittedException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the error.
      description: Contains details about an error where the specified transaction
        has already been committed and cannot be used for `UpdateTableObjects`.
    TransactionDescription:
      type: object
      properties:
        TransactionId:
          allOf:
          - $ref: '#/components/schemas/TransactionIdString'
          description: The ID of the transaction.
        TransactionStatus:
          allOf:
          - $ref: '#/components/schemas/TransactionStatus'
          description: A status of ACTIVE, COMMITTED, or ABORTED.
        TransactionStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the transaction started.
        TransactionEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the transaction committed or aborted, if it is
            not currently active.
      description: A structure that contains information about a transaction.
    TransactionDescriptionList:
      type: array
      items:
        $ref: '#/components/schemas/TransactionDescription'
    TransactionIdString:
      type: string
      pattern: ^[\p{L}\p{N}\p{P}]*$
      minLength: 1
      maxLength: 255
    TransactionStatus:
      type: string
      enum:
      - ACTIVE
      - COMMITTED
      - ABORTED
      - COMMIT_IN_PROGRESS
    TransactionStatusFilter:
      type: string
      enum:
      - ALL
      - COMPLETED
      - ACTIVE
      - COMMITTED
      - ABORTED
    TransactionType:
      type: string
      enum:
      - READ_AND_WRITE
      - READ_ONLY
    TrueFalseString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*$
      minLength: 1
      maxLength: 5
    TrustedResourceOwners:
      type: array
      items:
        $ref: '#/components/schemas/CatalogIdString'
    URI:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*$
      minLength: 1
      maxLength: 1024
    UpdateDataCellsFilterRequest:
      type: object
      properties:
        TableData:
          allOf:
          - $ref: '#/components/schemas/DataCellsFilter'
          description: A `DataCellsFilter` structure containing information about
            the data cells filter.
      required:
      - TableData
    UpdateDataCellsFilterResponse:
      type: object
      properties: {}
    UpdateLFTagExpressionRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name for the LF-Tag expression.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: The description with information about the saved LF-Tag expression.
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID.
        Expression:
          allOf:
          - $ref: '#/components/schemas/Expression'
          description: The LF-Tag expression body composed of one more LF-Tag key-value
            pairs.
      required:
      - Name
      - Expression
    UpdateLFTagExpressionResponse:
      type: object
      properties: {}
    UpdateLFTagRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, and other control information to manage
            your Lake Formation environment.
        TagKey:
          allOf:
          - $ref: '#/components/schemas/LFTagKey'
          description: The key-name for the LF-tag for which to add or delete values.
        TagValuesToDelete:
          allOf:
          - $ref: '#/components/schemas/TagValueList'
          description: A list of LF-tag values to delete from the LF-tag.
        TagValuesToAdd:
          allOf:
          - $ref: '#/components/schemas/TagValueList'
          description: A list of LF-tag values to add from the LF-tag.
      required:
      - TagKey
    UpdateLFTagResponse:
      type: object
      properties: {}
    UpdateLakeFormationIdentityCenterConfigurationRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the Data Catalog. By default, the account
            ID. The Data Catalog is the persistent metadata store. It contains database
            definitions, table definitions, view definitions, and other control information
            to manage your Lake Formation environment.
        ShareRecipients:
          allOf:
          - $ref: '#/components/schemas/DataLakePrincipalList'
          description: 'A list of Amazon Web Services account IDs or Amazon Web Services
            organization/organizational unit ARNs that are allowed to access to access
            data managed by Lake Formation.


            If the `ShareRecipients` list includes valid values, then the resource
            share is updated with the principals you want to have access to the resources.


            If the `ShareRecipients` value is null, both the list of share recipients
            and the resource share remain unchanged.


            If the `ShareRecipients` value is an empty list, then the existing share
            recipients list will be cleared, and the resource share will be deleted.'
        ApplicationStatus:
          allOf:
          - $ref: '#/components/schemas/ApplicationStatus'
          description: Allows to enable or disable the IAM Identity Center connection.
        ExternalFiltering:
          allOf:
          - $ref: '#/components/schemas/ExternalFilteringConfiguration'
          description: A list of the account IDs of Amazon Web Services accounts of
            third-party applications that are allowed to access data managed by Lake
            Formation.
    UpdateLakeFormationIdentityCenterConfigurationResponse:
      type: object
      properties: {}
    UpdateResourceRequest:
      type: object
      properties:
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/IAMRoleArn'
          description: The new role to use for the given resource registered in Lake
            Formation.
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArnString'
          description: The resource ARN.
        WithFederation:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Whether or not the resource is a federated resource.
        HybridAccessEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Specifies whether the data access of tables pointing to the
            location can be managed by both Lake Formation permissions as well as
            Amazon S3 bucket policies.
      required:
      - RoleArn
      - ResourceArn
    UpdateResourceResponse:
      type: object
      properties: {}
    UpdateTableObjectsRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The catalog containing the governed table to update. Defaults
            to the callerâ€™s account ID.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The database containing the governed table to update.
        TableName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The governed table to update.
        TransactionId:
          allOf:
          - $ref: '#/components/schemas/TransactionIdString'
          description: The transaction at which to do the write.
        WriteOperations:
          allOf:
          - $ref: '#/components/schemas/WriteOperationList'
          description: A list of `WriteOperation` objects that define an object to
            add to or delete from the manifest for a governed table.
      required:
      - DatabaseName
      - TableName
      - WriteOperations
    UpdateTableObjectsResponse:
      type: object
      properties: {}
    UpdateTableStorageOptimizerRequest:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/CatalogIdString'
          description: The Catalog ID of the table.
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: Name of the database where the table is present.
        TableName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: Name of the table for which to enable the storage optimizer.
        StorageOptimizerConfig:
          allOf:
          - $ref: '#/components/schemas/StorageOptimizerConfigMap'
          description: Name of the configuration for the storage optimizer.
      required:
      - DatabaseName
      - TableName
      - StorageOptimizerConfig
    UpdateTableStorageOptimizerResponse:
      type: object
      properties:
        Result:
          allOf:
          - $ref: '#/components/schemas/Result'
          description: A response indicating the success of failure of the operation.
    ValueString:
      type: string
    ValueStringList:
      type: array
      items:
        $ref: '#/components/schemas/ValueString'
    VersionString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*$
      minLength: 1
      maxLength: 255
    VirtualObject:
      type: object
      properties:
        Uri:
          allOf:
          - $ref: '#/components/schemas/URI'
          description: The path to the Amazon S3 object. Must start with s3://
        ETag:
          allOf:
          - $ref: '#/components/schemas/ETagString'
          description: The ETag of the Amazon S3 object.
      required:
      - Uri
      description: An object that defines an Amazon S3 object to be deleted if a transaction
        cancels, provided that `VirtualPut` was called before writing the object.
    VirtualObjectList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualObject'
    WorkUnitIdLong:
      type: integer
      format: int64
      default: 0
    WorkUnitRange:
      type: object
      properties:
        WorkUnitIdMax:
          allOf:
          - $ref: '#/components/schemas/WorkUnitIdLong'
          description: Defines the maximum work unit ID in the range. The maximum
            value is inclusive.
        WorkUnitIdMin:
          allOf:
          - $ref: '#/components/schemas/WorkUnitIdLong'
          description: Defines the minimum work unit ID in the range.
        WorkUnitToken:
          allOf:
          - $ref: '#/components/schemas/WorkUnitTokenString'
          description: A work token used to query the execution service.
      required:
      - WorkUnitIdMax
      - WorkUnitIdMin
      - WorkUnitToken
      description: Defines the valid range of work unit IDs for querying the execution
        service.
    WorkUnitRangeList:
      type: array
      items:
        $ref: '#/components/schemas/WorkUnitRange'
    WorkUnitTokenString:
      type: string
    WorkUnitsNotReadyYetException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/MessageString'
          description: A message describing the error.
      description: Contains details about an error related to work units not being
        ready.
    WriteOperation:
      type: object
      properties:
        AddObject:
          allOf:
          - $ref: '#/components/schemas/AddObjectInput'
          description: A new object to add to the governed table.
        DeleteObject:
          allOf:
          - $ref: '#/components/schemas/DeleteObjectInput'
          description: An object to delete from the governed table.
      description: Defines an object to add to or delete from a governed table.
    WriteOperationList:
      type: array
      items:
        $ref: '#/components/schemas/WriteOperation'
