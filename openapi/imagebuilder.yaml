openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: imagebuilder
  x-aws-serviceName: imagebuilder
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2019-12-02'
  title: EC2 Image Builder
  description: |-
    EC2 Image Builder is a fully managed Amazon Web Services service that makes it easier to automate the creation, management, and deployment of customized, secure, and up-to-date "golden" server images that are pre-installed and pre-configured with software and settings to meet specific IT standards.
servers:
- description: The EC2 Image Builder regional endpoint
  url: https://imagebuilder.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /CancelImageCreation:
    put:
      operationId: CancelImageCreation
      description: |-
        CancelImageCreation cancels the creation of Image. This operation can only be used on images in a non-terminal state.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageBuildVersionArn:
                  $ref: '#/components/schemas/ImageBuildVersionArn'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /CancelLifecycleExecution:
    put:
      operationId: CancelLifecycleExecution
      description: |-
        Cancel a specific image lifecycle policy runtime instance.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lifecycleExecutionId:
                  $ref: '#/components/schemas/LifecycleExecutionId'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /CreateComponent:
    put:
      operationId: CreateComponent
      description: |-
        Creates a new component that can be used to build, validate, test, and assess your image. The component is based on a YAML document that you specify using exactly one of the following methods:

          * Inline, using the `data` property in the request body.

          * A URL that points to a YAML document file stored in Amazon S3, using the `uri` property in the request body.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                semanticVersion:
                  $ref: '#/components/schemas/VersionNumber'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                changeDescription:
                  $ref: '#/components/schemas/NonEmptyString'
                platform:
                  $ref: '#/components/schemas/Platform'
                supportedOsVersions:
                  $ref: '#/components/schemas/OsVersionList'
                data:
                  $ref: '#/components/schemas/InlineComponentData'
                uri:
                  $ref: '#/components/schemas/Uri'
                kmsKeyId:
                  $ref: '#/components/schemas/NonEmptyString'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '402':
          description: |-
            You have exceeded the number of permitted resources or operations for this service. For service quotas, see [EC2 Image Builder endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /CreateContainerRecipe:
    put:
      operationId: CreateContainerRecipe
      description: |-
        Creates a new container recipe. Container recipes define how images are configured, tested, and assessed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                containerType:
                  $ref: '#/components/schemas/ContainerType'
                name:
                  $ref: '#/components/schemas/ResourceName'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                semanticVersion:
                  $ref: '#/components/schemas/VersionNumber'
                components:
                  $ref: '#/components/schemas/ComponentConfigurationList'
                instanceConfiguration:
                  $ref: '#/components/schemas/InstanceConfiguration'
                dockerfileTemplateData:
                  $ref: '#/components/schemas/InlineDockerFileTemplate'
                dockerfileTemplateUri:
                  $ref: '#/components/schemas/Uri'
                platformOverride:
                  $ref: '#/components/schemas/Platform'
                imageOsVersionOverride:
                  $ref: '#/components/schemas/NonEmptyString'
                parentImage:
                  $ref: '#/components/schemas/NonEmptyString'
                tags:
                  $ref: '#/components/schemas/TagMap'
                workingDirectory:
                  $ref: '#/components/schemas/NonEmptyString'
                targetRepository:
                  $ref: '#/components/schemas/TargetContainerRepository'
                kmsKeyId:
                  $ref: '#/components/schemas/NonEmptyString'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '402':
          description: |-
            You have exceeded the number of permitted resources or operations for this service. For service quotas, see [EC2 Image Builder endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /CreateDistributionConfiguration:
    put:
      operationId: CreateDistributionConfiguration
      description: |-
        Creates a new distribution configuration. Distribution configurations define and configure the outputs of your pipeline.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                distributions:
                  $ref: '#/components/schemas/DistributionList'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '402':
          description: |-
            You have exceeded the number of permitted resources or operations for this service. For service quotas, see [EC2 Image Builder endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /CreateImage:
    put:
      operationId: CreateImage
      description: |-
        Creates a new image. This request will create a new image along with all of the configured output resources defined in the distribution configuration. You must specify exactly one recipe for your image, using either a ContainerRecipeArn or an ImageRecipeArn.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageRecipeArn:
                  $ref: '#/components/schemas/ImageRecipeArn'
                containerRecipeArn:
                  $ref: '#/components/schemas/ContainerRecipeArn'
                distributionConfigurationArn:
                  $ref: '#/components/schemas/DistributionConfigurationArn'
                infrastructureConfigurationArn:
                  $ref: '#/components/schemas/InfrastructureConfigurationArn'
                imageTestsConfiguration:
                  $ref: '#/components/schemas/ImageTestsConfiguration'
                enhancedImageMetadataEnabled:
                  $ref: '#/components/schemas/NullableBoolean'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                imageScanningConfiguration:
                  $ref: '#/components/schemas/ImageScanningConfiguration'
                workflows:
                  $ref: '#/components/schemas/WorkflowConfigurationList'
                executionRole:
                  $ref: '#/components/schemas/RoleNameOrArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '402':
          description: |-
            You have exceeded the number of permitted resources or operations for this service. For service quotas, see [EC2 Image Builder endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /CreateImagePipeline:
    put:
      operationId: CreateImagePipeline
      description: |-
        Creates a new image pipeline. Image pipelines enable you to automate the creation and distribution of images.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                imageRecipeArn:
                  $ref: '#/components/schemas/ImageRecipeArn'
                containerRecipeArn:
                  $ref: '#/components/schemas/ContainerRecipeArn'
                infrastructureConfigurationArn:
                  $ref: '#/components/schemas/InfrastructureConfigurationArn'
                distributionConfigurationArn:
                  $ref: '#/components/schemas/DistributionConfigurationArn'
                imageTestsConfiguration:
                  $ref: '#/components/schemas/ImageTestsConfiguration'
                enhancedImageMetadataEnabled:
                  $ref: '#/components/schemas/NullableBoolean'
                schedule:
                  $ref: '#/components/schemas/Schedule'
                status:
                  $ref: '#/components/schemas/PipelineStatus'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                imageScanningConfiguration:
                  $ref: '#/components/schemas/ImageScanningConfiguration'
                workflows:
                  $ref: '#/components/schemas/WorkflowConfigurationList'
                executionRole:
                  $ref: '#/components/schemas/RoleNameOrArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '402':
          description: |-
            You have exceeded the number of permitted resources or operations for this service. For service quotas, see [EC2 Image Builder endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /CreateImageRecipe:
    put:
      operationId: CreateImageRecipe
      description: |-
        Creates a new image recipe. Image recipes define how images are configured, tested, and assessed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                semanticVersion:
                  $ref: '#/components/schemas/VersionNumber'
                components:
                  $ref: '#/components/schemas/ComponentConfigurationList'
                parentImage:
                  $ref: '#/components/schemas/NonEmptyString'
                blockDeviceMappings:
                  $ref: '#/components/schemas/InstanceBlockDeviceMappings'
                tags:
                  $ref: '#/components/schemas/TagMap'
                workingDirectory:
                  $ref: '#/components/schemas/NonEmptyString'
                additionalInstanceConfiguration:
                  $ref: '#/components/schemas/AdditionalInstanceConfiguration'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '402':
          description: |-
            You have exceeded the number of permitted resources or operations for this service. For service quotas, see [EC2 Image Builder endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /CreateInfrastructureConfiguration:
    put:
      operationId: CreateInfrastructureConfiguration
      description: |-
        Creates a new infrastructure configuration. An infrastructure configuration defines the environment in which your image will be built and tested.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                instanceTypes:
                  $ref: '#/components/schemas/InstanceTypeList'
                instanceProfileName:
                  $ref: '#/components/schemas/InstanceProfileNameType'
                securityGroupIds:
                  $ref: '#/components/schemas/SecurityGroupIds'
                subnetId:
                  $ref: '#/components/schemas/NonEmptyString'
                logging:
                  $ref: '#/components/schemas/Logging'
                keyPair:
                  $ref: '#/components/schemas/NonEmptyString'
                terminateInstanceOnFailure:
                  $ref: '#/components/schemas/NullableBoolean'
                snsTopicArn:
                  $ref: '#/components/schemas/SnsTopicArn'
                resourceTags:
                  $ref: '#/components/schemas/ResourceTagMap'
                instanceMetadataOptions:
                  $ref: '#/components/schemas/InstanceMetadataOptions'
                tags:
                  $ref: '#/components/schemas/TagMap'
                placement:
                  $ref: '#/components/schemas/Placement'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '402':
          description: |-
            You have exceeded the number of permitted resources or operations for this service. For service quotas, see [EC2 Image Builder endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /CreateLifecyclePolicy:
    put:
      operationId: CreateLifecyclePolicy
      description: |-
        Create a lifecycle policy resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                status:
                  $ref: '#/components/schemas/LifecyclePolicyStatus'
                executionRole:
                  $ref: '#/components/schemas/RoleNameOrArn'
                resourceType:
                  $ref: '#/components/schemas/LifecyclePolicyResourceType'
                policyDetails:
                  $ref: '#/components/schemas/LifecyclePolicyDetails'
                resourceSelection:
                  $ref: '#/components/schemas/LifecyclePolicyResourceSelection'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '402':
          description: |-
            You have exceeded the number of permitted resources or operations for this service. For service quotas, see [EC2 Image Builder endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /CreateWorkflow:
    put:
      operationId: CreateWorkflow
      description: |-
        Create a new workflow or a new version of an existing workflow.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                semanticVersion:
                  $ref: '#/components/schemas/VersionNumber'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                changeDescription:
                  $ref: '#/components/schemas/NonEmptyString'
                data:
                  $ref: '#/components/schemas/InlineWorkflowData'
                uri:
                  $ref: '#/components/schemas/Uri'
                kmsKeyId:
                  $ref: '#/components/schemas/NonEmptyString'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                type:
                  $ref: '#/components/schemas/WorkflowType'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '402':
          description: |-
            You have exceeded the number of permitted resources or operations for this service. For service quotas, see [EC2 Image Builder endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /DeleteComponent:
    delete:
      operationId: DeleteComponent
      description: |-
        Deletes a component build version.
      parameters:
      - name: componentBuildVersionArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ComponentBuildVersionArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDependencyException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /DeleteContainerRecipe:
    delete:
      operationId: DeleteContainerRecipe
      description: |-
        Deletes a container recipe.
      parameters:
      - name: containerRecipeArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ContainerRecipeArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDependencyException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /DeleteDistributionConfiguration:
    delete:
      operationId: DeleteDistributionConfiguration
      description: |-
        Deletes a distribution configuration.
      parameters:
      - name: distributionConfigurationArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DistributionConfigurationArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDependencyException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /DeleteImage:
    delete:
      operationId: DeleteImage
      description: |-
        Deletes an Image Builder image resource. This does not delete any EC2 AMIs or ECR container images that are created during the image build process. You must clean those up separately, using the appropriate Amazon EC2 or Amazon ECR console actions, or API or CLI commands.

          * To deregister an EC2 Linux AMI, see [Deregister your Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/deregister-ami.html) in the __Amazon EC2 User Guide_ _.

          * To deregister an EC2 Windows AMI, see [Deregister your Windows AMI](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/deregister-ami.html) in the __Amazon EC2 Windows Guide_ _.

          * To delete a container image from Amazon ECR, see [Deleting an image](https://docs.aws.amazon.com/AmazonECR/latest/userguide/delete_image.html) in the _Amazon ECR User Guide_.
      parameters:
      - name: imageBuildVersionArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ImageBuildVersionArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDependencyException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /DeleteImagePipeline:
    delete:
      operationId: DeleteImagePipeline
      description: |-
        Deletes an image pipeline.
      parameters:
      - name: imagePipelineArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ImagePipelineArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDependencyException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /DeleteImageRecipe:
    delete:
      operationId: DeleteImageRecipe
      description: |-
        Deletes an image recipe.
      parameters:
      - name: imageRecipeArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ImageRecipeArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDependencyException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /DeleteInfrastructureConfiguration:
    delete:
      operationId: DeleteInfrastructureConfiguration
      description: |-
        Deletes an infrastructure configuration.
      parameters:
      - name: infrastructureConfigurationArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/InfrastructureConfigurationArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDependencyException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /DeleteLifecyclePolicy:
    delete:
      operationId: DeleteLifecyclePolicy
      description: |-
        Delete the specified lifecycle policy resource.
      parameters:
      - name: lifecyclePolicyArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/LifecyclePolicyArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDependencyException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /DeleteWorkflow:
    delete:
      operationId: DeleteWorkflow
      description: |-
        Deletes a specific workflow resource.
      parameters:
      - name: workflowBuildVersionArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowBuildVersionArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDependencyException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetComponent:
    get:
      operationId: GetComponent
      description: |-
        Gets a component object.
      parameters:
      - name: componentBuildVersionArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ComponentVersionArnOrBuildVersionArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetComponentPolicy:
    get:
      operationId: GetComponentPolicy
      description: |-
        Gets a component policy.
      parameters:
      - name: componentArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ComponentBuildVersionArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetContainerRecipe:
    get:
      operationId: GetContainerRecipe
      description: |-
        Retrieves a container recipe.
      parameters:
      - name: containerRecipeArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ContainerRecipeArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetContainerRecipePolicy:
    get:
      operationId: GetContainerRecipePolicy
      description: |-
        Retrieves the policy for a container recipe.
      parameters:
      - name: containerRecipeArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ContainerRecipeArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetDistributionConfiguration:
    get:
      operationId: GetDistributionConfiguration
      description: |-
        Gets a distribution configuration.
      parameters:
      - name: distributionConfigurationArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DistributionConfigurationArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetImage:
    get:
      operationId: GetImage
      description: |-
        Gets an image.
      parameters:
      - name: imageBuildVersionArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ImageVersionArnOrBuildVersionArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetImagePipeline:
    get:
      operationId: GetImagePipeline
      description: |-
        Gets an image pipeline.
      parameters:
      - name: imagePipelineArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ImagePipelineArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetImagePolicy:
    get:
      operationId: GetImagePolicy
      description: |-
        Gets an image policy.
      parameters:
      - name: imageArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ImageBuildVersionArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetImageRecipe:
    get:
      operationId: GetImageRecipe
      description: |-
        Gets an image recipe.
      parameters:
      - name: imageRecipeArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ImageRecipeArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetImageRecipePolicy:
    get:
      operationId: GetImageRecipePolicy
      description: |-
        Gets an image recipe policy.
      parameters:
      - name: imageRecipeArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ImageRecipeArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetInfrastructureConfiguration:
    get:
      operationId: GetInfrastructureConfiguration
      description: |-
        Gets an infrastructure configuration.
      parameters:
      - name: infrastructureConfigurationArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/InfrastructureConfigurationArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetLifecycleExecution:
    get:
      operationId: GetLifecycleExecution
      description: |-
        Get the runtime information that was logged for a specific runtime instance of the lifecycle policy.
      parameters:
      - name: lifecycleExecutionId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/LifecycleExecutionId'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetLifecyclePolicy:
    get:
      operationId: GetLifecyclePolicy
      description: |-
        Get details for the specified image lifecycle policy.
      parameters:
      - name: lifecyclePolicyArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/LifecyclePolicyArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetMarketplaceResource:
    post:
      operationId: GetMarketplaceResource
      description: |-
        Verify the subscription and perform resource dependency checks on the requested Amazon Web Services Marketplace resource. For Amazon Web Services Marketplace components, the response contains fields to download the components and their artifacts.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceType:
                  $ref: '#/components/schemas/MarketplaceResourceType'
                resourceArn:
                  $ref: '#/components/schemas/ImageBuilderArn'
                resourceLocation:
                  $ref: '#/components/schemas/MarketplaceResourceLocation'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetWorkflow:
    get:
      operationId: GetWorkflow
      description: |-
        Get a workflow resource object.
      parameters:
      - name: workflowBuildVersionArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowVersionArnOrBuildVersionArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetWorkflowExecution:
    get:
      operationId: GetWorkflowExecution
      description: |-
        Get the runtime information that was logged for a specific runtime instance of the workflow.
      parameters:
      - name: workflowExecutionId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowExecutionId'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /GetWorkflowStepExecution:
    get:
      operationId: GetWorkflowStepExecution
      description: |-
        Get the runtime information that was logged for a specific runtime instance of the workflow step.
      parameters:
      - name: stepExecutionId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowStepExecutionId'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ImportComponent:
    put:
      operationId: ImportComponent
      description: |-
        Imports a component and transforms its data into a component document.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                semanticVersion:
                  $ref: '#/components/schemas/VersionNumber'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                changeDescription:
                  $ref: '#/components/schemas/NonEmptyString'
                type:
                  $ref: '#/components/schemas/ComponentType'
                format:
                  $ref: '#/components/schemas/ComponentFormat'
                platform:
                  $ref: '#/components/schemas/Platform'
                data:
                  $ref: '#/components/schemas/NonEmptyString'
                uri:
                  $ref: '#/components/schemas/Uri'
                kmsKeyId:
                  $ref: '#/components/schemas/NonEmptyString'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ImportDiskImage:
    put:
      operationId: ImportDiskImage
      description: |-
        Import a Windows operating system image from a verified Microsoft ISO disk file. The following disk images are supported:

          * Windows 11 Enterprise
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NonEmptyString'
                semanticVersion:
                  $ref: '#/components/schemas/VersionNumber'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                platform:
                  $ref: '#/components/schemas/NonEmptyString'
                osVersion:
                  $ref: '#/components/schemas/OsVersion'
                executionRole:
                  $ref: '#/components/schemas/RoleNameOrArn'
                infrastructureConfigurationArn:
                  $ref: '#/components/schemas/InfrastructureConfigurationArn'
                uri:
                  $ref: '#/components/schemas/Uri'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ImportVmImage:
    put:
      operationId: ImportVmImage
      description: |-
        When you export your virtual machine (VM) from its virtualization environment, that process creates a set of one or more disk container files that act as snapshots of your VM’s environment, settings, and data. The Amazon EC2 API [ImportImage](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportImage.html) action uses those files to import your VM and create an AMI. To import using the CLI command, see [import-image](https://docs.aws.amazon.com/cli/latest/reference/ec2/import-image.html)

        You can reference the task ID from the VM import to pull in the AMI that the import created as the base image for your Image Builder recipe.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NonEmptyString'
                semanticVersion:
                  $ref: '#/components/schemas/VersionNumber'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                platform:
                  $ref: '#/components/schemas/Platform'
                osVersion:
                  $ref: '#/components/schemas/OsVersion'
                vmImportTaskId:
                  $ref: '#/components/schemas/NonEmptyString'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListComponentBuildVersions:
    post:
      operationId: ListComponentBuildVersions
      description: |-
        Returns the list of component build versions for the specified component version Amazon Resource Name (ARN).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                componentVersionArn:
                  $ref: '#/components/schemas/ComponentVersionArn'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListComponents:
    post:
      operationId: ListComponents
      description: |-
        Returns the list of components that can be filtered by name, or by using the listed `filters` to streamline results. Newly created components can take up to two minutes to appear in the ListComponents API Results.

        The semantic version has four nodes: ../. You can assign values for the first three, and can filter on all of them.

        **Filtering:** With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  $ref: '#/components/schemas/Ownership'
                filters:
                  $ref: '#/components/schemas/FilterList'
                byName:
                  $ref: '#/components/schemas/Boolean'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListContainerRecipes:
    post:
      operationId: ListContainerRecipes
      description: |-
        Returns a list of container recipes.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  $ref: '#/components/schemas/Ownership'
                filters:
                  $ref: '#/components/schemas/FilterList'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/NonEmptyString'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListDistributionConfigurations:
    post:
      operationId: ListDistributionConfigurations
      description: |-
        Returns a list of distribution configurations.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/FilterList'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListImageBuildVersions:
    post:
      operationId: ListImageBuildVersions
      description: |-
        Returns a list of image build versions.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageVersionArn:
                  $ref: '#/components/schemas/ImageVersionArn'
                filters:
                  $ref: '#/components/schemas/FilterList'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListImagePackages:
    post:
      operationId: ListImagePackages
      description: |-
        List the Packages that are associated with an Image Build Version, as determined by Amazon Web Services Systems Manager Inventory at build time.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageBuildVersionArn:
                  $ref: '#/components/schemas/ImageBuildVersionArn'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListImagePipelineImages:
    post:
      operationId: ListImagePipelineImages
      description: |-
        Returns a list of images created by the specified pipeline.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imagePipelineArn:
                  $ref: '#/components/schemas/ImagePipelineArn'
                filters:
                  $ref: '#/components/schemas/FilterList'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListImagePipelines:
    post:
      operationId: ListImagePipelines
      description: |-
        Returns a list of image pipelines.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/FilterList'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListImageRecipes:
    post:
      operationId: ListImageRecipes
      description: |-
        Returns a list of image recipes.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  $ref: '#/components/schemas/Ownership'
                filters:
                  $ref: '#/components/schemas/FilterList'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListImageScanFindingAggregations:
    post:
      operationId: ListImageScanFindingAggregations
      description: |-
        Returns a list of image scan aggregations for your account. You can filter by the type of key that Image Builder uses to group results. For example, if you want to get a list of findings by severity level for one of your pipelines, you might specify your pipeline with the `imagePipelineArn` filter. If you don't specify a filter, Image Builder returns an aggregation for your account.

        To streamline results, you can use the following filters in your request:

          * `accountId`

          * `imageBuildVersionArn`

          * `imagePipelineArn`

          * `vulnerabilityId`
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/Filter'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListImageScanFindings:
    post:
      operationId: ListImageScanFindings
      description: |-
        Returns a list of image scan findings for your account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/ImageScanFindingsFilterList'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListImages:
    post:
      operationId: ListImages
      description: |-
        Returns the list of images that you have access to. Newly created images can take up to two minutes to appear in the ListImages API Results.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  $ref: '#/components/schemas/Ownership'
                filters:
                  $ref: '#/components/schemas/FilterList'
                byName:
                  $ref: '#/components/schemas/Boolean'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                includeDeprecated:
                  $ref: '#/components/schemas/NullableBoolean'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListInfrastructureConfigurations:
    post:
      operationId: ListInfrastructureConfigurations
      description: |-
        Returns a list of infrastructure configurations.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/FilterList'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListLifecycleExecutionResources:
    post:
      operationId: ListLifecycleExecutionResources
      description: |-
        List resources that the runtime instance of the image lifecycle identified for lifecycle actions.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lifecycleExecutionId:
                  $ref: '#/components/schemas/LifecycleExecutionId'
                parentResourceId:
                  $ref: '#/components/schemas/NonEmptyString'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListLifecycleExecutions:
    post:
      operationId: ListLifecycleExecutions
      description: |-
        Get the lifecycle runtime history for the specified resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                resourceArn:
                  $ref: '#/components/schemas/ImageBuilderArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListLifecyclePolicies:
    post:
      operationId: ListLifecyclePolicies
      description: |-
        Get a list of lifecycle policies in your Amazon Web Services account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/FilterList'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Returns the list of tags for the specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ImageBuilderArn'
      responses:
        '200': {}
        '400':
          description: |-
            The specified parameter is invalid. Review the available parameters for the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
    post:
      operationId: TagResource
      description: |-
        Adds a tag to a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ImageBuilderArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '400':
          description: |-
            The specified parameter is invalid. Review the available parameters for the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
    delete:
      operationId: UntagResource
      description: |-
        Removes a tag from a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ImageBuilderArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '400':
          description: |-
            The specified parameter is invalid. Review the available parameters for the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
  /ListWaitingWorkflowSteps:
    post:
      operationId: ListWaitingWorkflowSteps
      description: |-
        Get a list of workflow steps that are waiting for action for workflows in your Amazon Web Services account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListWorkflowBuildVersions:
    post:
      operationId: ListWorkflowBuildVersions
      description: |-
        Returns a list of build versions for a specific workflow resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workflowVersionArn:
                  $ref: '#/components/schemas/WorkflowWildcardVersionArn'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListWorkflowExecutions:
    post:
      operationId: ListWorkflowExecutions
      description: |-
        Returns a list of workflow runtime instance metadata objects for a specific image build version.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                imageBuildVersionArn:
                  $ref: '#/components/schemas/ImageBuildVersionArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListWorkflowStepExecutions:
    post:
      operationId: ListWorkflowStepExecutions
      description: |-
        Returns runtime data for each step in a runtime instance of the workflow that you specify in the request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                workflowExecutionId:
                  $ref: '#/components/schemas/WorkflowExecutionId'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /ListWorkflows:
    post:
      operationId: ListWorkflows
      description: |-
        Lists workflow build versions based on filtering parameters.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  $ref: '#/components/schemas/Ownership'
                filters:
                  $ref: '#/components/schemas/FilterList'
                byName:
                  $ref: '#/components/schemas/Boolean'
                maxResults:
                  $ref: '#/components/schemas/RestrictedInteger'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /PutComponentPolicy:
    put:
      operationId: PutComponentPolicy
      description: |-
        Applies a policy to a component. We recommend that you call the RAM API [CreateResourceShare](https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API `PutComponentPolicy`, you must also call the RAM API [PromoteResourceShareCreatedFromPolicy](https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                componentArn:
                  $ref: '#/components/schemas/ComponentBuildVersionArn'
                policy:
                  $ref: '#/components/schemas/ResourcePolicyDocument'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /PutContainerRecipePolicy:
    put:
      operationId: PutContainerRecipePolicy
      description: |-
        Applies a policy to a container image. We recommend that you call the RAM API CreateResourceShare (https://docs.aws.amazon.com//ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API `PutContainerImagePolicy`, you must also call the RAM API PromoteResourceShareCreatedFromPolicy (https://docs.aws.amazon.com//ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                containerRecipeArn:
                  $ref: '#/components/schemas/ContainerRecipeArn'
                policy:
                  $ref: '#/components/schemas/ResourcePolicyDocument'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /PutImagePolicy:
    put:
      operationId: PutImagePolicy
      description: |-
        Applies a policy to an image. We recommend that you call the RAM API [CreateResourceShare](https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API `PutImagePolicy`, you must also call the RAM API [PromoteResourceShareCreatedFromPolicy](https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageArn:
                  $ref: '#/components/schemas/ImageBuildVersionArn'
                policy:
                  $ref: '#/components/schemas/ResourcePolicyDocument'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /PutImageRecipePolicy:
    put:
      operationId: PutImageRecipePolicy
      description: |-
        Applies a policy to an image recipe. We recommend that you call the RAM API [CreateResourceShare](https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API `PutImageRecipePolicy`, you must also call the RAM API [PromoteResourceShareCreatedFromPolicy](https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageRecipeArn:
                  $ref: '#/components/schemas/ImageRecipeArn'
                policy:
                  $ref: '#/components/schemas/ResourcePolicyDocument'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            You have requested an action that that the service doesn't support.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /SendWorkflowStepAction:
    put:
      operationId: SendWorkflowStepAction
      description: |-
        Pauses or resumes image creation when the associated workflow runs a `WaitForAction` step.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stepExecutionId:
                  $ref: '#/components/schemas/WorkflowStepExecutionId'
                imageBuildVersionArn:
                  $ref: '#/components/schemas/ImageBuildVersionArn'
                action:
                  $ref: '#/components/schemas/WorkflowStepActionType'
                reason:
                  $ref: '#/components/schemas/NonEmptyString'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /StartImagePipelineExecution:
    put:
      operationId: StartImagePipelineExecution
      description: |-
        Manually triggers a pipeline to create an image.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imagePipelineArn:
                  $ref: '#/components/schemas/ImagePipelineArn'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /StartResourceStateUpdate:
    put:
      operationId: StartResourceStateUpdate
      description: |-
        Begin asynchronous resource state update for lifecycle changes to the specified image resources.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceArn:
                  $ref: '#/components/schemas/ImageBuildVersionArn'
                state:
                  $ref: '#/components/schemas/ResourceState'
                executionRole:
                  $ref: '#/components/schemas/RoleNameOrArn'
                includeResources:
                  $ref: '#/components/schemas/ResourceStateUpdateIncludeResources'
                exclusionRules:
                  $ref: '#/components/schemas/ResourceStateUpdateExclusionRules'
                updateAt:
                  $ref: '#/components/schemas/DateTimeTimestamp'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: |-
            At least one of the resources referenced by your request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /UpdateDistributionConfiguration:
    put:
      operationId: UpdateDistributionConfiguration
      description: |-
        Updates a new distribution configuration. Distribution configurations define and configure the outputs of your pipeline.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                distributionConfigurationArn:
                  $ref: '#/components/schemas/DistributionConfigurationArn'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                distributions:
                  $ref: '#/components/schemas/DistributionList'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /UpdateImagePipeline:
    put:
      operationId: UpdateImagePipeline
      description: |-
        Updates an image pipeline. Image pipelines enable you to automate the creation and distribution of images. You must specify exactly one recipe for your image, using either a `containerRecipeArn` or an `imageRecipeArn`.

        UpdateImagePipeline does not support selective updates for the pipeline. You must specify all of the required properties in the update request, not just the properties that have changed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imagePipelineArn:
                  $ref: '#/components/schemas/ImagePipelineArn'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                imageRecipeArn:
                  $ref: '#/components/schemas/ImageRecipeArn'
                containerRecipeArn:
                  $ref: '#/components/schemas/ContainerRecipeArn'
                infrastructureConfigurationArn:
                  $ref: '#/components/schemas/InfrastructureConfigurationArn'
                distributionConfigurationArn:
                  $ref: '#/components/schemas/DistributionConfigurationArn'
                imageTestsConfiguration:
                  $ref: '#/components/schemas/ImageTestsConfiguration'
                enhancedImageMetadataEnabled:
                  $ref: '#/components/schemas/NullableBoolean'
                schedule:
                  $ref: '#/components/schemas/Schedule'
                status:
                  $ref: '#/components/schemas/PipelineStatus'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                imageScanningConfiguration:
                  $ref: '#/components/schemas/ImageScanningConfiguration'
                workflows:
                  $ref: '#/components/schemas/WorkflowConfigurationList'
                executionRole:
                  $ref: '#/components/schemas/RoleNameOrArn'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /UpdateInfrastructureConfiguration:
    put:
      operationId: UpdateInfrastructureConfiguration
      description: |-
        Updates a new infrastructure configuration. An infrastructure configuration defines the environment in which your image will be built and tested.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                infrastructureConfigurationArn:
                  $ref: '#/components/schemas/InfrastructureConfigurationArn'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                instanceTypes:
                  $ref: '#/components/schemas/InstanceTypeList'
                instanceProfileName:
                  $ref: '#/components/schemas/InstanceProfileNameType'
                securityGroupIds:
                  $ref: '#/components/schemas/SecurityGroupIds'
                subnetId:
                  $ref: '#/components/schemas/NonEmptyString'
                logging:
                  $ref: '#/components/schemas/Logging'
                keyPair:
                  $ref: '#/components/schemas/NonEmptyString'
                terminateInstanceOnFailure:
                  $ref: '#/components/schemas/NullableBoolean'
                snsTopicArn:
                  $ref: '#/components/schemas/SnsTopicArn'
                resourceTags:
                  $ref: '#/components/schemas/ResourceTagMap'
                instanceMetadataOptions:
                  $ref: '#/components/schemas/InstanceMetadataOptions'
                placement:
                  $ref: '#/components/schemas/Placement'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /UpdateLifecyclePolicy:
    put:
      operationId: UpdateLifecyclePolicy
      description: |-
        Update the specified lifecycle policy.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lifecyclePolicyArn:
                  $ref: '#/components/schemas/LifecyclePolicyArn'
                description:
                  $ref: '#/components/schemas/NonEmptyString'
                status:
                  $ref: '#/components/schemas/LifecyclePolicyStatus'
                executionRole:
                  $ref: '#/components/schemas/RoleNameOrArn'
                resourceType:
                  $ref: '#/components/schemas/LifecyclePolicyResourceType'
                policyDetails:
                  $ref: '#/components/schemas/LifecyclePolicyDetails'
                resourceSelection:
                  $ref: '#/components/schemas/LifecyclePolicyResourceSelection'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '429':
          description: |-
            You have exceeded the permitted request rate for the specific operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallRateLimitExceededException'
        '400':
          description: |-
            The resource that you are trying to operate on is currently in use. Review the message details and retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '403':
          description: |-
            You are not authorized to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            This exception is thrown when the service encounters an unrecoverable exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '503':
          description: |-
            The service is unable to process your request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
components:
  schemas:
    AccountAggregation:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Identifies the account that owns the aggregated resource findings.
        severityCounts:
          allOf:
          - $ref: '#/components/schemas/SeverityCounts'
          description: Counts by severity level for medium severity and higher level
            findings, plus a total for all of the findings.
      description: Contains counts of vulnerability findings from image scans that
        run when you create new Image Builder images, or build new versions of existing
        images. The vulnerability counts are grouped by severity level. The counts
        are aggregated across resources to create the final tally for the account
        that owns them.
    AccountId:
      type: string
      pattern: ^[0-9]{12}$
    AccountList:
      type: array
      items:
        $ref: '#/components/schemas/AccountId'
    AdditionalInstanceConfiguration:
      type: object
      properties:
        systemsManagerAgent:
          allOf:
          - $ref: '#/components/schemas/SystemsManagerAgent'
          description: Contains settings for the Systems Manager agent on your build
            instance.
        userDataOverride:
          allOf:
          - $ref: '#/components/schemas/UserDataOverride'
          description: 'Use this property to provide commands or a command script
            to run when you launch your build instance.


            The userDataOverride property replaces any commands that Image Builder
            might have added to ensure that Systems Manager is installed on your Linux
            build instance. If you override the user data, make sure that you add
            commands to install Systems Manager, if it is not pre-installed on your
            base image.


            The user data is always base 64 encoded. For example, the following commands
            are encoded as `IyEvYmluL2Jhc2gKbWtkaXIgLXAgL3Zhci9iYi8KdG91Y2ggL3Zhci$`:


            _#!/bin/bash_


            mkdir -p /var/bb/


            touch /var'
      description: 'In addition to your infrastructure configuration, these settings
        provide an extra layer of control over your build instances. You can also
        specify commands to run on launch for all of your build instances.


        Image Builder does not automatically install the Systems Manager agent on
        Windows instances. If your base image includes the Systems Manager agent,
        then the AMI that you create will also include the agent. For Linux instances,
        if the base image does not already include the Systems Manager agent, Image
        Builder installs it. For Linux instances where Image Builder installs the
        Systems Manager agent, you can choose whether to keep it for the AMI that
        you create.'
    Ami:
      type: object
      properties:
        region:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The Amazon Web Services Region of the Amazon EC2 AMI.
        image:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The AMI ID of the Amazon EC2 AMI.
        name:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The name of the Amazon EC2 AMI.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the Amazon EC2 AMI. Minimum and maximum
            length are in characters.
        state:
          $ref: '#/components/schemas/ImageState'
        accountId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The account ID of the owner of the AMI.
      description: Details of an Amazon EC2 AMI.
    AmiDistributionConfiguration:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AmiNameString'
          description: The name of the output AMI.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the AMI distribution configuration. Minimum
            and maximum length are in characters.
        targetAccountIds:
          allOf:
          - $ref: '#/components/schemas/AccountList'
          description: The ID of an account to which you want to distribute an image.
        amiTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags to apply to AMIs distributed to this Region.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The KMS key identifier used to encrypt the distributed image.
        launchPermission:
          allOf:
          - $ref: '#/components/schemas/LaunchPermissionConfiguration'
          description: Launch permissions can be used to configure which Amazon Web
            Services accounts can use the AMI to launch instances.
      description: Define and configure the output AMIs of the pipeline.
    AmiList:
      type: array
      items:
        $ref: '#/components/schemas/Ami'
    AmiNameString:
      type: string
      pattern: ^[-_A-Za-z0-9{][-_A-Za-z0-9\s:{}\.]+[-_A-Za-z0-9}]$
      minLength: 1
      maxLength: 127
    Arn:
      type: string
    Boolean:
      type: boolean
      default: false
    BuildType:
      type: string
      enum:
      - USER_INITIATED
      - SCHEDULED
      - IMPORT
      - IMPORT_ISO
    CallRateLimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You have exceeded the permitted request rate for the specific operation.
    CancelImageCreationRequest:
      type: object
      properties:
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image that you want to
            cancel creation for.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - imageBuildVersionArn
      - clientToken
    CancelImageCreationResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The ARN of the image whose creation this request canceled.
    CancelLifecycleExecutionRequest:
      type: object
      properties:
        lifecycleExecutionId:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionId'
          description: Identifies the specific runtime instance of the image lifecycle
            to cancel.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - lifecycleExecutionId
      - clientToken
    CancelLifecycleExecutionResponse:
      type: object
      properties:
        lifecycleExecutionId:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionId'
          description: The unique identifier for the image lifecycle runtime instance
            that was canceled.
    ClientException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: These errors are usually caused by a client action, such as using
        an action or resource on behalf of a user that doesn't have permissions to
        use the action or resource, or specifying an invalid resource identifier.
    ClientToken:
      type: string
      minLength: 1
      maxLength: 36
    Component:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the component.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the component.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: The version of the component.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the component.
        changeDescription:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Describes what change has been made in this version of the
            component, or what makes this version different from other versions of
            the component.
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentType'
          description: The component type specifies whether Image Builder uses the
            component to build the image or only to test it.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The operating system platform of the component.
        supportedOsVersions:
          allOf:
          - $ref: '#/components/schemas/OsVersionList'
          description: The operating system (OS) version supported by the component.
            If the OS information is available, Image Builder performs a prefix match
            against the base image OS version during image recipe creation.
        state:
          allOf:
          - $ref: '#/components/schemas/ComponentState'
          description: Describes the current status of the component.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ComponentParameterDetailList'
          description: Contains parameter details for each of the parameters that
            the component document defined for the component.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the component.
        data:
          allOf:
          - $ref: '#/components/schemas/ComponentData'
          description: Component data contains the YAML document content for the component.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The KMS key identifier used to encrypt the component.
        encrypted:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: The encryption status of the component.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date that Image Builder created the component.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that apply to the component.
        publisher:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Contains the name of the publisher if this is a third-party
            component. Otherwise, this property is empty.
        obfuscate:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether component source is hidden from view in the
            console, and from component detail results for API, CLI, or SDK operations.
        productCodes:
          allOf:
          - $ref: '#/components/schemas/ProductCodeList'
          description: Contains product codes that are used for billing purposes for
            Amazon Web Services Marketplace components.
      description: A detailed view of a component.
    ComponentBuildVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
    ComponentConfiguration:
      type: object
      properties:
        componentArn:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionArnOrBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the component.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ComponentParameterList'
          description: A group of parameter settings that Image Builder uses to configure
            the component for a specific recipe.
      required:
      - componentArn
      description: Configuration details of the component.
    ComponentConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/ComponentConfiguration'
    ComponentData:
      type: string
    ComponentFormat:
      type: string
      enum:
      - SHELL
    ComponentParameter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ComponentParameterName'
          description: The name of the component parameter to set.
        value:
          allOf:
          - $ref: '#/components/schemas/ComponentParameterValueList'
          description: Sets the value for the named component parameter.
      required:
      - name
      - value
      description: Contains a key/value pair that sets the named component parameter.
    ComponentParameterDescription:
      type: string
      pattern: ^[^\x00]+$
      minLength: 1
      maxLength: 1024
    ComponentParameterDetail:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ComponentParameterName'
          description: The name of this input parameter.
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentParameterType'
          description: The type of input this parameter provides. The currently supported
            value is "string".
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/ComponentParameterValueList'
          description: The default value of this parameter if no input is provided.
        description:
          allOf:
          - $ref: '#/components/schemas/ComponentParameterDescription'
          description: Describes this parameter.
      required:
      - name
      - type
      description: Defines a parameter that is used to provide configuration details
        for the component.
    ComponentParameterDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ComponentParameterDetail'
    ComponentParameterList:
      type: array
      items:
        $ref: '#/components/schemas/ComponentParameter'
    ComponentParameterName:
      type: string
      pattern: ^[^\x00]+$
      minLength: 1
      maxLength: 256
    ComponentParameterType:
      type: string
      pattern: ^String|Integer|Boolean|StringList$
      minLength: 1
      maxLength: 20
    ComponentParameterValue:
      type: string
      pattern: ^[^\x00]*$
      minLength: 0
    ComponentParameterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ComponentParameterValue'
    ComponentState:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ComponentStatus'
          description: The current state of the component.
        reason:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Describes how or why the component changed state.
      description: A group of fields that describe the current status of components.
    ComponentStatus:
      type: string
      enum:
      - DEPRECATED
      - DISABLED
      - ACTIVE
    ComponentSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the component.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the component.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: The version of the component.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The operating system platform of the component.
        supportedOsVersions:
          allOf:
          - $ref: '#/components/schemas/OsVersionList'
          description: The operating system (OS) version that the component supports.
            If the OS information is available, Image Builder performs a prefix match
            against the base image OS version during image recipe creation.
        state:
          allOf:
          - $ref: '#/components/schemas/ComponentState'
          description: Describes the current status of the component.
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentType'
          description: The component type specifies whether Image Builder uses the
            component to build the image or only to test it.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the component.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the component.
        changeDescription:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The change description for the current version of the component.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The original creation date of the component.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that apply to the component.
        publisher:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Contains the name of the publisher if this is a third-party
            component. Otherwise, this property is empty.
        obfuscate:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether component source is hidden from view in the
            console, and from component detail results for API, CLI, or SDK operations.
      description: A high-level summary of a component.
    ComponentSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ComponentSummary'
    ComponentType:
      type: string
      enum:
      - BUILD
      - TEST
    ComponentVersion:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: "The Amazon Resource Name (ARN) of the component.\n\nSemantic\
            \ versioning is included in each object's Amazon Resource Name (ARN),\
            \ at the level that applies to that object as follows:\n\n  1. Versionless\
            \ ARNs and Name ARNs do not include specific values in any of the nodes.\
            \ The nodes are either left off entirely, or they are specified as wildcards,\
            \ for example: x.x.x.\n\n  2. Version ARNs have only the first three nodes:\
            \ ..\n\n  3. Build version ARNs have all four nodes, and point to a specific\
            \ build for a specific version of an object."
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the component.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'The semantic version of the component.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Assignment:** For the first three nodes you can assign any positive
            integer value, including zero, with an upper limit of 2^30-1, or 1073741823
            for each node. Image Builder automatically assigns the build number to
            the fourth node.


            **Patterns:** You can use any numeric pattern that adheres to the assignment
            requirements for the nodes that you can assign. For example, you might
            choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.


            **Filtering:** With semantic versioning, you have the flexibility to use
            wildcards (x) to specify the most recent versions or nodes when selecting
            the base image or components for your recipe. When you use a wildcard
            in any node, all nodes to the right of the first wildcard must also be
            wildcards.'
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the component.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The platform of the component.
        supportedOsVersions:
          allOf:
          - $ref: '#/components/schemas/OsVersionList'
          description: he operating system (OS) version supported by the component.
            If the OS information is available, a prefix match is performed against
            the base image OS version during image recipe creation.
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentType'
          description: The type of the component denotes whether the component is
            used to build the image or only to test it.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the component.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date that the component was created.
        status:
          allOf:
          - $ref: '#/components/schemas/ComponentStatus'
          description: Describes the current status of the component version.
        productCodes:
          allOf:
          - $ref: '#/components/schemas/ProductCodeList'
          description: Contains product codes that are used for billing purposes for
            Amazon Web Services Marketplace components.
      description: The defining characteristics of a specific version of an Amazon
        Web Services TOE component.
    ComponentVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    ComponentVersionArnOrBuildVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):component/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$
    ComponentVersionList:
      type: array
      items:
        $ref: '#/components/schemas/ComponentVersion'
    Container:
      type: object
      properties:
        region:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Containers and container images are Region-specific. This is
            the Region context for the container.
        imageUris:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: A list of URIs for containers created in the context Region.
      description: A container encapsulates the runtime environment for an application.
    ContainerDistributionConfiguration:
      type: object
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the container distribution configuration.
        containerTags:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: Tags that are attached to the container distribution configuration.
        targetRepository:
          allOf:
          - $ref: '#/components/schemas/TargetContainerRepository'
          description: The destination repository for the container distribution configuration.
      required:
      - targetRepository
      description: Container distribution settings for encryption, licensing, and
        sharing in a specific Region.
    ContainerList:
      type: array
      items:
        $ref: '#/components/schemas/Container'
    ContainerRecipe:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: "The Amazon Resource Name (ARN) of the container recipe.\n\n\
            Semantic versioning is included in each object's Amazon Resource Name\
            \ (ARN), at the level that applies to that object as follows:\n\n  1.\
            \ Versionless ARNs and Name ARNs do not include specific values in any\
            \ of the nodes. The nodes are either left off entirely, or they are specified\
            \ as wildcards, for example: x.x.x.\n\n  2. Version ARNs have only the\
            \ first three nodes: ..\n\n  3. Build version ARNs have all four nodes,\
            \ and point to a specific build for a specific version of an object."
        containerType:
          allOf:
          - $ref: '#/components/schemas/ContainerType'
          description: Specifies the type of container, such as Docker.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the container recipe.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the container recipe.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The system platform for the container, such as Windows or Linux.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the container recipe.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'The semantic version of the container recipe.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Assignment:** For the first three nodes you can assign any positive
            integer value, including zero, with an upper limit of 2^30-1, or 1073741823
            for each node. Image Builder automatically assigns the build number to
            the fourth node.


            **Patterns:** You can use any numeric pattern that adheres to the assignment
            requirements for the nodes that you can assign. For example, you might
            choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.


            **Filtering:** With semantic versioning, you have the flexibility to use
            wildcards (x) to specify the most recent versions or nodes when selecting
            the base image or components for your recipe. When you use a wildcard
            in any node, all nodes to the right of the first wildcard must also be
            wildcards.'
        components:
          allOf:
          - $ref: '#/components/schemas/ComponentConfigurationList'
          description: Build and test components that are included in the container
            recipe. Recipes require a minimum of one build component, and can have
            a maximum of 20 build and test components in any combination.
        instanceConfiguration:
          allOf:
          - $ref: '#/components/schemas/InstanceConfiguration'
          description: A group of options that can be used to configure an instance
            for building and testing container images.
        dockerfileTemplateData:
          allOf:
          - $ref: '#/components/schemas/DockerFileTemplate'
          description: Dockerfiles are text documents that are used to build Docker
            containers, and ensure that they contain all of the elements required
            by the application running inside. The template data consists of contextual
            variables where Image Builder places build information or scripts, based
            on your container image recipe.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Identifies which KMS key is used to encrypt the container image
            for distribution to the target Region.
        encrypted:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: A flag that indicates if the target container is encrypted.
        parentImage:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The base image for customizations specified in the container
            recipe. This can contain an Image Builder image resource ARN or a container
            image URI, for example `amazonlinux:latest`.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date when this container recipe was created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags that are attached to the container recipe.
        workingDirectory:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The working directory for use during build and test workflows.
        targetRepository:
          allOf:
          - $ref: '#/components/schemas/TargetContainerRepository'
          description: The destination repository for the container image.
      description: A container recipe.
    ContainerRecipeArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    ContainerRecipeSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the container recipe.
        containerType:
          allOf:
          - $ref: '#/components/schemas/ContainerType'
          description: Specifies the type of container, such as "Docker".
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the container recipe.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The system platform for the container, such as Windows or Linux.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the container recipe.
        parentImage:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The base image for the container recipe.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date when this container recipe was created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags that are attached to the container recipe.
      description: A summary of a container recipe
    ContainerRecipeSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ContainerRecipeSummary'
    ContainerRepositoryService:
      type: string
      enum:
      - ECR
    ContainerType:
      type: string
      enum:
      - DOCKER
    CreateComponentRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the component.
        semanticVersion:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'The semantic version of the component. This version follows
            the semantic version syntax.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Assignment:** For the first three nodes you can assign any positive
            integer value, including zero, with an upper limit of 2^30-1, or 1073741823
            for each node. Image Builder automatically assigns the build number to
            the fourth node.


            **Patterns:** You can use any numeric pattern that adheres to the assignment
            requirements for the nodes that you can assign. For example, you might
            choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.'
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Describes the contents of the component.
        changeDescription:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The change description of the component. Describes what change
            has been made in this version, or what makes this version different from
            other versions of the component.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The operating system platform of the component.
        supportedOsVersions:
          allOf:
          - $ref: '#/components/schemas/OsVersionList'
          description: The operating system (OS) version supported by the component.
            If the OS information is available, a prefix match is performed against
            the base image OS version during image recipe creation.
        data:
          allOf:
          - $ref: '#/components/schemas/InlineComponentData'
          description: Component `data` contains inline YAML document content for
            the component. Alternatively, you can specify the `uri` of a YAML document
            file stored in Amazon S3. However, you cannot specify both properties.
        uri:
          allOf:
          - $ref: '#/components/schemas/Uri'
          description: 'The `uri` of a YAML component document file. This must be
            an S3 URL (`s3://bucket/key`), and the requester must have permission
            to access the S3 bucket it points to. If you use Amazon S3, you can specify
            component content up to your service quota.


            Alternatively, you can specify the YAML document inline, using the component
            `data` property. You cannot specify both properties.'
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The ID of the KMS key that is used to encrypt this component.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that apply to the component.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - name
      - semanticVersion
      - platform
      - clientToken
    CreateComponentResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        componentBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ComponentBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the component that the request
            created.
    CreateContainerRecipeRequest:
      type: object
      properties:
        containerType:
          allOf:
          - $ref: '#/components/schemas/ContainerType'
          description: The type of container to create.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the container recipe.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the container recipe.
        semanticVersion:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'The semantic version of the container recipe. This version
            follows the semantic version syntax.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Assignment:** For the first three nodes you can assign any positive
            integer value, including zero, with an upper limit of 2^30-1, or 1073741823
            for each node. Image Builder automatically assigns the build number to
            the fourth node.


            **Patterns:** You can use any numeric pattern that adheres to the assignment
            requirements for the nodes that you can assign. For example, you might
            choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.'
        components:
          allOf:
          - $ref: '#/components/schemas/ComponentConfigurationList'
          description: Components for build and test that are included in the container
            recipe. Recipes require a minimum of one build component, and can have
            a maximum of 20 build and test components in any combination.
        instanceConfiguration:
          allOf:
          - $ref: '#/components/schemas/InstanceConfiguration'
          description: A group of options that can be used to configure an instance
            for building and testing container images.
        dockerfileTemplateData:
          allOf:
          - $ref: '#/components/schemas/InlineDockerFileTemplate'
          description: The Dockerfile template used to build your image as an inline
            data blob.
        dockerfileTemplateUri:
          allOf:
          - $ref: '#/components/schemas/Uri'
          description: The Amazon S3 URI for the Dockerfile that will be used to build
            your container image.
        platformOverride:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: Specifies the operating system platform when you use a custom
            base image.
        imageOsVersionOverride:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Specifies the operating system version for the base image.
        parentImage:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The base image for the container recipe.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags that are attached to the container recipe.
        workingDirectory:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The working directory for use during build and test workflows.
        targetRepository:
          allOf:
          - $ref: '#/components/schemas/TargetContainerRepository'
          description: The destination repository for the container image.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Identifies which KMS key is used to encrypt the Dockerfile
            template.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - containerType
      - name
      - semanticVersion
      - components
      - parentImage
      - targetRepository
      - clientToken
    CreateContainerRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeArn'
          description: Returns the Amazon Resource Name (ARN) of the container recipe
            that the request created.
    CreateDistributionConfigurationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the distribution configuration.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the distribution configuration.
        distributions:
          allOf:
          - $ref: '#/components/schemas/DistributionList'
          description: The distributions of the distribution configuration.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the distribution configuration.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - name
      - distributions
      - clientToken
    CreateDistributionConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        distributionConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/DistributionConfigurationArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration
            that was created by this request.
    CreateImagePipelineRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the image pipeline.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the image pipeline.
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeArn'
          description: The Amazon Resource Name (ARN) of the image recipe that will
            be used to configure images created by this image pipeline.
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeArn'
          description: The Amazon Resource Name (ARN) of the container recipe that
            is used to configure images created by this container pipeline.
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            that will be used to build images created by this image pipeline.
        distributionConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/DistributionConfigurationArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration
            that will be used to configure and distribute images created by this image
            pipeline.
        imageTestsConfiguration:
          allOf:
          - $ref: '#/components/schemas/ImageTestsConfiguration'
          description: The image test configuration of the image pipeline.
        enhancedImageMetadataEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Collects additional information about the image being created,
            including the operating system (OS) version and package list. This information
            is used to enhance the overall experience of using EC2 Image Builder.
            Enabled by default.
        schedule:
          allOf:
          - $ref: '#/components/schemas/Schedule'
          description: The schedule of the image pipeline.
        status:
          allOf:
          - $ref: '#/components/schemas/PipelineStatus'
          description: The status of the image pipeline.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the image pipeline.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
        imageScanningConfiguration:
          allOf:
          - $ref: '#/components/schemas/ImageScanningConfiguration'
          description: Contains settings for vulnerability scans.
        workflows:
          allOf:
          - $ref: '#/components/schemas/WorkflowConfigurationList'
          description: Contains an array of workflow configuration objects.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) for the IAM role you
            create that grants Image Builder access to perform workflow actions.
      required:
      - name
      - infrastructureConfigurationArn
      - clientToken
    CreateImagePipelineResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        imagePipelineArn:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineArn'
          description: The Amazon Resource Name (ARN) of the image pipeline that was
            created by this request.
    CreateImageRecipeRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the image recipe.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the image recipe.
        semanticVersion:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'The semantic version of the image recipe. This version follows
            the semantic version syntax.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Assignment:** For the first three nodes you can assign any positive
            integer value, including zero, with an upper limit of 2^30-1, or 1073741823
            for each node. Image Builder automatically assigns the build number to
            the fourth node.


            **Patterns:** You can use any numeric pattern that adheres to the assignment
            requirements for the nodes that you can assign. For example, you might
            choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.'
        components:
          allOf:
          - $ref: '#/components/schemas/ComponentConfigurationList'
          description: The components included in the image recipe.
        parentImage:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: 'The base image of the image recipe. The value of the string
            can be the ARN of the base image or an AMI ID. The format for the ARN
            follows this example: `arn:aws:imagebuilder:us-west-2:aws:image/windows-server-2016-english-full-base-x86/x.x.x`.
            You can provide the specific version that you want to use, or you can
            use a wildcard in all of the fields. If you enter an AMI ID for the string
            value, you must have access to the AMI, and the AMI must be in the same
            Region in which you are using Image Builder.'
        blockDeviceMappings:
          allOf:
          - $ref: '#/components/schemas/InstanceBlockDeviceMappings'
          description: The block device mappings of the image recipe.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the image recipe.
        workingDirectory:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The working directory used during build and test workflows.
        additionalInstanceConfiguration:
          allOf:
          - $ref: '#/components/schemas/AdditionalInstanceConfiguration'
          description: Specify additional settings and launch scripts for your build
            instances.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - name
      - semanticVersion
      - components
      - parentImage
      - clientToken
    CreateImageRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeArn'
          description: The Amazon Resource Name (ARN) of the image recipe that was
            created by this request.
    CreateImageRequest:
      type: object
      properties:
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeArn'
          description: The Amazon Resource Name (ARN) of the image recipe that defines
            how images are configured, tested, and assessed.
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeArn'
          description: The Amazon Resource Name (ARN) of the container recipe that
            defines how images are configured and tested.
        distributionConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/DistributionConfigurationArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration
            that defines and configures the outputs of your pipeline.
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            that defines the environment in which your image will be built and tested.
        imageTestsConfiguration:
          allOf:
          - $ref: '#/components/schemas/ImageTestsConfiguration'
          description: The image tests configuration of the image.
        enhancedImageMetadataEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Collects additional information about the image being created,
            including the operating system (OS) version and package list. This information
            is used to enhance the overall experience of using EC2 Image Builder.
            Enabled by default.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the image.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
        imageScanningConfiguration:
          allOf:
          - $ref: '#/components/schemas/ImageScanningConfiguration'
          description: Contains settings for vulnerability scans.
        workflows:
          allOf:
          - $ref: '#/components/schemas/WorkflowConfigurationList'
          description: Contains an array of workflow configuration objects.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) for the IAM role you
            create that grants Image Builder access to perform workflow actions.
      required:
      - infrastructureConfigurationArn
      - clientToken
    CreateImageResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image that the request
            created.
    CreateInfrastructureConfigurationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the infrastructure configuration.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the infrastructure configuration.
        instanceTypes:
          allOf:
          - $ref: '#/components/schemas/InstanceTypeList'
          description: The instance types of the infrastructure configuration. You
            can specify one or more instance types to use for this build. The service
            will pick one of these instance types based on availability.
        instanceProfileName:
          allOf:
          - $ref: '#/components/schemas/InstanceProfileNameType'
          description: The instance profile to associate with the instance used to
            customize your Amazon EC2 AMI.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIds'
          description: The security group IDs to associate with the instance used
            to customize your Amazon EC2 AMI.
        subnetId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The subnet ID in which to place the instance used to customize
            your Amazon EC2 AMI.
        logging:
          allOf:
          - $ref: '#/components/schemas/Logging'
          description: The logging configuration of the infrastructure configuration.
        keyPair:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The key pair of the infrastructure configuration. You can use
            this to log on to and debug the instance used to create your image.
        terminateInstanceOnFailure:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: The terminate instance on failure setting of the infrastructure
            configuration. Set to false if you want Image Builder to retain the instance
            used to configure your AMI if the build or test phase of your workflow
            fails.
        snsTopicArn:
          allOf:
          - $ref: '#/components/schemas/SnsTopicArn'
          description: 'The Amazon Resource Name (ARN) for the SNS topic to which
            we send image build event notifications.


            EC2 Image Builder is unable to send notifications to SNS topics that are
            encrypted using keys from other accounts. The key that is used to encrypt
            the SNS topic must reside in the account that the Image Builder service
            runs under.'
        resourceTags:
          allOf:
          - $ref: '#/components/schemas/ResourceTagMap'
          description: The metadata tags to assign to the Amazon EC2 instance that
            Image Builder launches during the build process. Tags are formatted as
            key value pairs.
        instanceMetadataOptions:
          allOf:
          - $ref: '#/components/schemas/InstanceMetadataOptions'
          description: The instance metadata options that you can set for the HTTP
            requests that pipeline builds use to launch EC2 build and test instances.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The metadata tags to assign to the infrastructure configuration
            resource that Image Builder creates as output. Tags are formatted as key
            value pairs.
        placement:
          allOf:
          - $ref: '#/components/schemas/Placement'
          description: The instance placement settings that define where the instances
            that are launched from your image will run.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - name
      - instanceProfileName
      - clientToken
    CreateInfrastructureConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            that was created by this request.
    CreateLifecyclePolicyRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the lifecycle policy to create.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Optional description for the lifecycle policy.
        status:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyStatus'
          description: Indicates whether the lifecycle policy resource is enabled.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) for the IAM role you
            create that grants Image Builder access to run lifecycle actions.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyResourceType'
          description: The type of Image Builder resource that the lifecycle policy
            applies to.
        policyDetails:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetails'
          description: Configuration details for the lifecycle policy rules.
        resourceSelection:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyResourceSelection'
          description: Selection criteria for the resources that the lifecycle policy
            applies to.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags to apply to the lifecycle policy resource.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - name
      - executionRole
      - resourceType
      - policyDetails
      - resourceSelection
      - clientToken
    CreateLifecyclePolicyResponse:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        lifecyclePolicyArn:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyArn'
          description: The Amazon Resource Name (ARN) of the lifecycle policy that
            the request created.
    CreateWorkflowRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the workflow to create.
        semanticVersion:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'The semantic version of this workflow resource. The semantic
            version syntax adheres to the following rules.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Assignment:** For the first three nodes you can assign any positive
            integer value, including zero, with an upper limit of 2^30-1, or 1073741823
            for each node. Image Builder automatically assigns the build number to
            the fourth node.


            **Patterns:** You can use any numeric pattern that adheres to the assignment
            requirements for the nodes that you can assign. For example, you might
            choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.'
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Describes the workflow.
        changeDescription:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Describes what change has been made in this version of the
            workflow, or what makes this version different from other versions of
            the workflow.
        data:
          allOf:
          - $ref: '#/components/schemas/InlineWorkflowData'
          description: Contains the UTF-8 encoded YAML document content for the workflow.
            Alternatively, you can specify the `uri` of a YAML document file stored
            in Amazon S3. However, you cannot specify both properties.
        uri:
          allOf:
          - $ref: '#/components/schemas/Uri'
          description: 'The `uri` of a YAML component document file. This must be
            an S3 URL (`s3://bucket/key`), and the requester must have permission
            to access the S3 bucket it points to. If you use Amazon S3, you can specify
            component content up to your service quota.


            Alternatively, you can specify the YAML document inline, using the component
            `data` property. You cannot specify both properties.'
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The ID of the KMS key that is used to encrypt this workflow
            resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags that apply to the workflow resource.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The phase in the image build process for which the workflow
            resource is responsible.
      required:
      - name
      - semanticVersion
      - clientToken
      - type
    CreateWorkflowResponse:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        workflowBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the workflow resource that
            the request created.
    CvssScore:
      type: object
      properties:
        baseScore:
          allOf:
          - $ref: '#/components/schemas/NonNegativeDouble'
          description: The CVSS base score.
        scoringVector:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The vector string of the CVSS score.
        version:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The CVSS version that generated the score.
        source:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The source of the CVSS score.
      description: Amazon Inspector generates a risk score for each finding. This
        score helps you to prioritize findings, to focus on the most critical findings
        and the most vulnerable resources. The score uses the Common Vulnerability
        Scoring System (CVSS) format. This format is a modification of the base CVSS
        score that the National Vulnerability Database (NVD) provides. For more information
        about severity levels, see [Severity levels for Amazon Inspector findings](https://docs.aws.amazon.com/inspector/latest/user/findings-understanding-severity.html)
        in the _Amazon Inspector User Guide_.
    CvssScoreAdjustment:
      type: object
      properties:
        metric:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The metric that Amazon Inspector used to adjust the CVSS score.
        reason:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The reason for the CVSS score adjustment.
      description: Details about an adjustment that Amazon Inspector made to the CVSS
        score for a finding.
    CvssScoreAdjustmentList:
      type: array
      items:
        $ref: '#/components/schemas/CvssScoreAdjustment'
    CvssScoreDetails:
      type: object
      properties:
        scoreSource:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The source for the CVSS score.
        cvssSource:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The source of the finding.
        version:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The CVSS version that generated the score.
        score:
          allOf:
          - $ref: '#/components/schemas/NonNegativeDouble'
          description: The CVSS score.
        scoringVector:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: A vector that measures the severity of the vulnerability.
        adjustments:
          allOf:
          - $ref: '#/components/schemas/CvssScoreAdjustmentList'
          description: An object that contains details about an adjustment that Amazon
            Inspector made to the CVSS score for the finding.
      description: Details about the source of the score, and the factors that determined
        the adjustments to create the final score.
    CvssScoreList:
      type: array
      items:
        $ref: '#/components/schemas/CvssScore'
    DateTime:
      type: string
    DateTimeTimestamp:
      type: string
      format: date-time
    DeleteComponentRequest:
      type: object
      properties:
        componentBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ComponentBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the component build version
            to delete.
      required:
      - componentBuildVersionArn
    DeleteComponentResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        componentBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ComponentBuildVersionArn'
          description: The ARN of the component build version that this request deleted.
    DeleteContainerRecipeRequest:
      type: object
      properties:
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeArn'
          description: The Amazon Resource Name (ARN) of the container recipe to delete.
      required:
      - containerRecipeArn
    DeleteContainerRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeArn'
          description: The Amazon Resource Name (ARN) of the container recipe that
            was deleted.
    DeleteDistributionConfigurationRequest:
      type: object
      properties:
        distributionConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/DistributionConfigurationArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration
            to delete.
      required:
      - distributionConfigurationArn
    DeleteDistributionConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        distributionConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/DistributionConfigurationArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration
            that was deleted.
    DeleteImagePipelineRequest:
      type: object
      properties:
        imagePipelineArn:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineArn'
          description: The Amazon Resource Name (ARN) of the image pipeline to delete.
      required:
      - imagePipelineArn
    DeleteImagePipelineResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imagePipelineArn:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineArn'
          description: The Amazon Resource Name (ARN) of the image pipeline that was
            deleted.
    DeleteImageRecipeRequest:
      type: object
      properties:
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeArn'
          description: The Amazon Resource Name (ARN) of the image recipe to delete.
      required:
      - imageRecipeArn
    DeleteImageRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeArn'
          description: The Amazon Resource Name (ARN) of the image recipe that was
            deleted.
    DeleteImageRequest:
      type: object
      properties:
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the Image Builder image resource
            to delete.
      required:
      - imageBuildVersionArn
    DeleteImageResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The ARN of the Image Builder image resource that this request
            deleted.
    DeleteInfrastructureConfigurationRequest:
      type: object
      properties:
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            to delete.
      required:
      - infrastructureConfigurationArn
    DeleteInfrastructureConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            that was deleted.
    DeleteLifecyclePolicyRequest:
      type: object
      properties:
        lifecyclePolicyArn:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyArn'
          description: The Amazon Resource Name (ARN) of the lifecycle policy resource
            to delete.
      required:
      - lifecyclePolicyArn
    DeleteLifecyclePolicyResponse:
      type: object
      properties:
        lifecyclePolicyArn:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyArn'
          description: The ARN of the lifecycle policy that was deleted.
    DeleteWorkflowRequest:
      type: object
      properties:
        workflowBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the workflow resource to
            delete.
      required:
      - workflowBuildVersionArn
    DeleteWorkflowResponse:
      type: object
      properties:
        workflowBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowBuildVersionArn'
          description: The ARN of the workflow resource that this request deleted.
    DiskImageFormat:
      type: string
      enum:
      - VMDK
      - RAW
      - VHD
    Distribution:
      type: object
      properties:
        region:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The target Region.
        amiDistributionConfiguration:
          allOf:
          - $ref: '#/components/schemas/AmiDistributionConfiguration'
          description: The specific AMI settings; for example, launch permissions
            or AMI tags.
        containerDistributionConfiguration:
          allOf:
          - $ref: '#/components/schemas/ContainerDistributionConfiguration'
          description: Container distribution settings for encryption, licensing,
            and sharing in a specific Region.
        licenseConfigurationArns:
          allOf:
          - $ref: '#/components/schemas/LicenseConfigurationArnList'
          description: The License Manager Configuration to associate with the AMI
            in the specified Region.
        launchTemplateConfigurations:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateConfigurationList'
          description: A group of launchTemplateConfiguration settings that apply
            to image distribution for specified accounts.
        s3ExportConfiguration:
          allOf:
          - $ref: '#/components/schemas/S3ExportConfiguration'
          description: Configure export settings to deliver disk images created from
            your image build, using a file format that is compatible with your VMs
            in that Region.
        fastLaunchConfigurations:
          allOf:
          - $ref: '#/components/schemas/FastLaunchConfigurationList'
          description: The Windows faster-launching configurations to use for AMI
            distribution.
        ssmParameterConfigurations:
          allOf:
          - $ref: '#/components/schemas/SsmParameterConfigurationList'
          description: Contains settings to update Amazon Web Services Systems Manager
            (SSM) Parameter Store Parameters with output AMI IDs from the build by
            target Region.
      required:
      - region
      description: Defines the settings for a specific Region.
    DistributionConfiguration:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the distribution configuration.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the distribution configuration.
        distributions:
          allOf:
          - $ref: '#/components/schemas/DistributionList'
          description: The distribution objects that apply Region-specific settings
            for the deployment of the image to targeted Regions.
        timeoutMinutes:
          allOf:
          - $ref: '#/components/schemas/DistributionTimeoutMinutes'
          description: The maximum duration in minutes for this distribution configuration.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which this distribution configuration was created.
        dateUpdated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which this distribution configuration was last
            updated.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the distribution configuration.
      required:
      - timeoutMinutes
      description: A distribution configuration.
    DistributionConfigurationArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
    DistributionConfigurationSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the distribution configuration.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the distribution configuration.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which the distribution configuration was created.
        dateUpdated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which the distribution configuration was updated.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags associated with the distribution configuration.
        regions:
          allOf:
          - $ref: '#/components/schemas/RegionList'
          description: A list of Regions where the container image is distributed
            to.
      description: A high-level overview of a distribution configuration.
    DistributionConfigurationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/DistributionConfigurationSummary'
    DistributionList:
      type: array
      items:
        $ref: '#/components/schemas/Distribution'
    DistributionTimeoutMinutes:
      type: integer
      minimum: 30
      maximum: 720
    DockerFileTemplate:
      type: string
    EbsInstanceBlockDeviceSpecification:
      type: object
      properties:
        encrypted:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Use to configure device encryption.
        deleteOnTermination:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Use to configure delete on termination of the associated device.
        iops:
          allOf:
          - $ref: '#/components/schemas/EbsIopsInteger'
          description: Use to configure device IOPS.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Use to configure the KMS key to use when encrypting the device.
        snapshotId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The snapshot that defines the device contents.
        volumeSize:
          allOf:
          - $ref: '#/components/schemas/EbsVolumeSizeInteger'
          description: Use to override the device's volume size.
        volumeType:
          allOf:
          - $ref: '#/components/schemas/EbsVolumeType'
          description: Use to override the device's volume type.
        throughput:
          allOf:
          - $ref: '#/components/schemas/EbsVolumeThroughput'
          description: '**For GP3 volumes only** – The throughput in MiB/s that the
            volume supports.'
      description: Amazon EBS-specific block device mapping specifications.
    EbsIopsInteger:
      type: integer
      minimum: 100
      maximum: 64000
    EbsVolumeSizeInteger:
      type: integer
      minimum: 1
      maximum: 16000
    EbsVolumeThroughput:
      type: integer
      minimum: 125
      maximum: 1000
    EbsVolumeType:
      type: string
      enum:
      - standard
      - io1
      - io2
      - gp2
      - gp3
      - sc1
      - st1
    EcrConfiguration:
      type: object
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The name of the container repository that Amazon Inspector
            scans to identify findings for your container images. The name includes
            the path for the repository location. If you don’t provide this information,
            Image Builder creates a repository in your account named `image-builder-image-scanning-repository`
            for vulnerability scans of your output container images.
        containerTags:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: Tags for Image Builder to apply to the output container image
            that Amazon Inspector scans. Tags can help you identify and manage your
            scanned images.
      description: Settings that Image Builder uses to configure the ECR repository
        and the output container images that Amazon Inspector scans.
    EmptyString:
      type: string
      minLength: 0
      maxLength: 0
    ErrorMessage:
      type: string
    FastLaunchConfiguration:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean that represents the current state of faster launching
            for the Windows AMI. Set to `true` to start using Windows faster launching,
            or `false` to stop using it.
        snapshotConfiguration:
          allOf:
          - $ref: '#/components/schemas/FastLaunchSnapshotConfiguration'
          description: Configuration settings for managing the number of snapshots
            that are created from pre-provisioned instances for the Windows AMI when
            faster launching is enabled.
        maxParallelLaunches:
          allOf:
          - $ref: '#/components/schemas/MaxParallelLaunches'
          description: The maximum number of parallel instances that are launched
            for creating resources.
        launchTemplate:
          allOf:
          - $ref: '#/components/schemas/FastLaunchLaunchTemplateSpecification'
          description: The launch template that the fast-launch enabled Windows AMI
            uses when it launches Windows instances to create pre-provisioned snapshots.
        accountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The owner account ID for the fast-launch enabled Windows AMI.
      required:
      - enabled
      description: Define and configure faster launching for output Windows AMIs.
    FastLaunchConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/FastLaunchConfiguration'
    FastLaunchLaunchTemplateSpecification:
      type: object
      properties:
        launchTemplateId:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateId'
          description: The ID of the launch template to use for faster launching for
            a Windows AMI.
        launchTemplateName:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The name of the launch template to use for faster launching
            for a Windows AMI.
        launchTemplateVersion:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The version of the launch template to use for faster launching
            for a Windows AMI.
      description: 'Identifies the launch template that the associated Windows AMI
        uses for launching an instance when faster launching is enabled.


        You can specify either the `launchTemplateName` or the `launchTemplateId`,
        but not both.'
    FastLaunchSnapshotConfiguration:
      type: object
      properties:
        targetResourceCount:
          allOf:
          - $ref: '#/components/schemas/TargetResourceCount'
          description: The number of pre-provisioned snapshots to keep on hand for
            a fast-launch enabled Windows AMI.
      description: Configuration settings for creating and managing pre-provisioned
        snapshots for a fast-launch enabled Windows AMI.
    Filter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          description: The name of the filter. Filter names are case-sensitive.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: The filter values. Filter values are case-sensitive.
      description: A filter name and value pair that is used to return a more specific
        list of results from a list operation. Filters can be used to match a set
        of resources by specific criteria, such as tags, attributes, or IDs.
    FilterList:
      type: array
      items:
        $ref: '#/components/schemas/Filter'
    FilterName:
      type: string
      pattern: ^[a-zA-Z]{1,1024}$
    FilterValue:
      type: string
      pattern: ^[0-9a-zA-Z./_ :,{}"-]{1,1024}$
    FilterValues:
      type: array
      items:
        $ref: '#/components/schemas/FilterValue'
    ForbiddenException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You are not authorized to perform the requested operation.
    GetComponentPolicyRequest:
      type: object
      properties:
        componentArn:
          allOf:
          - $ref: '#/components/schemas/ComponentBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the component whose policy
            you want to retrieve.
      required:
      - componentArn
    GetComponentPolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicyDocument'
          description: The component policy.
    GetComponentRequest:
      type: object
      properties:
        componentBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionArnOrBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the component that you want
            to get. Regex requires the suffix `/\d+$`.
      required:
      - componentBuildVersionArn
    GetComponentResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        component:
          allOf:
          - $ref: '#/components/schemas/Component'
          description: The component object specified in the request.
    GetContainerRecipePolicyRequest:
      type: object
      properties:
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeArn'
          description: The Amazon Resource Name (ARN) of the container recipe for
            the policy being requested.
      required:
      - containerRecipeArn
    GetContainerRecipePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicyDocument'
          description: The container recipe policy object that is returned.
    GetContainerRecipeRequest:
      type: object
      properties:
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeArn'
          description: The Amazon Resource Name (ARN) of the container recipe to retrieve.
      required:
      - containerRecipeArn
    GetContainerRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        containerRecipe:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipe'
          description: The container recipe object that is returned.
    GetDistributionConfigurationRequest:
      type: object
      properties:
        distributionConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/DistributionConfigurationArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration
            that you want to retrieve.
      required:
      - distributionConfigurationArn
    GetDistributionConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        distributionConfiguration:
          allOf:
          - $ref: '#/components/schemas/DistributionConfiguration'
          description: The distribution configuration object.
    GetImagePipelineRequest:
      type: object
      properties:
        imagePipelineArn:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineArn'
          description: The Amazon Resource Name (ARN) of the image pipeline that you
            want to retrieve.
      required:
      - imagePipelineArn
    GetImagePipelineResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imagePipeline:
          allOf:
          - $ref: '#/components/schemas/ImagePipeline'
          description: The image pipeline object.
    GetImagePolicyRequest:
      type: object
      properties:
        imageArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image whose policy you
            want to retrieve.
      required:
      - imageArn
    GetImagePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicyDocument'
          description: The image policy object.
    GetImageRecipePolicyRequest:
      type: object
      properties:
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeArn'
          description: The Amazon Resource Name (ARN) of the image recipe whose policy
            you want to retrieve.
      required:
      - imageRecipeArn
    GetImageRecipePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicyDocument'
          description: The image recipe policy object.
    GetImageRecipeRequest:
      type: object
      properties:
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeArn'
          description: The Amazon Resource Name (ARN) of the image recipe that you
            want to retrieve.
      required:
      - imageRecipeArn
    GetImageRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imageRecipe:
          allOf:
          - $ref: '#/components/schemas/ImageRecipe'
          description: The image recipe object.
    GetImageRequest:
      type: object
      properties:
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageVersionArnOrBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image that you want to
            get.
      required:
      - imageBuildVersionArn
    GetImageResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        image:
          allOf:
          - $ref: '#/components/schemas/Image'
          description: The image object.
    GetInfrastructureConfigurationRequest:
      type: object
      properties:
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            that you want to retrieve.
      required:
      - infrastructureConfigurationArn
      description: GetInfrastructureConfiguration request object.
    GetInfrastructureConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        infrastructureConfiguration:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfiguration'
          description: The infrastructure configuration object.
      description: GetInfrastructureConfiguration response object.
    GetLifecycleExecutionRequest:
      type: object
      properties:
        lifecycleExecutionId:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionId'
          description: Use the unique identifier for a runtime instance of the lifecycle
            policy to get runtime details.
      required:
      - lifecycleExecutionId
    GetLifecycleExecutionResponse:
      type: object
      properties:
        lifecycleExecution:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecution'
          description: Runtime details for the specified runtime instance of the lifecycle
            policy.
    GetLifecyclePolicyRequest:
      type: object
      properties:
        lifecyclePolicyArn:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyArn'
          description: Specifies the Amazon Resource Name (ARN) of the image lifecycle
            policy resource to get.
      required:
      - lifecyclePolicyArn
    GetLifecyclePolicyResponse:
      type: object
      properties:
        lifecyclePolicy:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicy'
          description: The ARN of the image lifecycle policy resource that was returned.
    GetMarketplaceResourceRequest:
      type: object
      properties:
        resourceType:
          allOf:
          - $ref: '#/components/schemas/MarketplaceResourceType'
          description: Specifies which type of Amazon Web Services Marketplace resource
            Image Builder retrieves.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) that uniquely identifies an
            Amazon Web Services Marketplace resource.
        resourceLocation:
          allOf:
          - $ref: '#/components/schemas/MarketplaceResourceLocation'
          description: The bucket path that you can specify to download the resource
            from Amazon S3.
      required:
      - resourceType
      - resourceArn
    GetMarketplaceResourceResponse:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) for the Amazon Web Services
            Marketplace resource that was requested.
        url:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The obfuscated S3 URL to download the component artifact from.
        data:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Returns obfuscated data that contains the YAML content of the
            component.
    GetWorkflowExecutionRequest:
      type: object
      properties:
        workflowExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionId'
          description: Use the unique identifier for a runtime instance of the workflow
            to get runtime details.
      required:
      - workflowExecutionId
    GetWorkflowExecutionResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        workflowBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the build version for the
            Image Builder workflow resource that defines the specified runtime instance
            of the workflow.
        workflowExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionId'
          description: The unique identifier that Image Builder assigned to keep track
            of runtime details when it ran the workflow.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image resource build
            version that the specified runtime instance of the workflow created.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The type of workflow that Image Builder ran for the specified
            runtime instance of the workflow.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionStatus'
          description: The current runtime status for the specified runtime instance
            of the workflow.
        message:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionMessage'
          description: The output message from the specified runtime instance of the
            workflow, if applicable.
        totalStepCount:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepCount'
          description: The total number of steps in the specified runtime instance
            of the workflow that ran. This number should equal the sum of the step
            counts for steps that succeeded, were skipped, and failed.
        totalStepsSucceeded:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepCount'
          description: A runtime count for the number of steps that ran successfully
            in the specified runtime instance of the workflow.
        totalStepsFailed:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepCount'
          description: A runtime count for the number of steps that failed in the
            specified runtime instance of the workflow.
        totalStepsSkipped:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepCount'
          description: A runtime count for the number of steps that were skipped in
            the specified runtime instance of the workflow.
        startTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when the specified runtime instance of the workflow
            started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when the specified runtime instance of the workflow
            finished.
        parallelGroup:
          allOf:
          - $ref: '#/components/schemas/ParallelGroup'
          description: Test workflows are defined within named runtime groups. The
            parallel group is a named group that contains one or more test workflows.
    GetWorkflowRequest:
      type: object
      properties:
        workflowBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionArnOrBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the workflow resource that
            you want to get.
      required:
      - workflowBuildVersionArn
    GetWorkflowResponse:
      type: object
      properties:
        workflow:
          allOf:
          - $ref: '#/components/schemas/Workflow'
          description: The workflow resource specified in the request.
    GetWorkflowStepExecutionRequest:
      type: object
      properties:
        stepExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionId'
          description: Use the unique identifier for a specific runtime instance of
            the workflow step to get runtime details for that step.
      required:
      - stepExecutionId
    GetWorkflowStepExecutionResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        stepExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionId'
          description: The unique identifier for the runtime version of the workflow
            step that you specified in the request.
        workflowBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the build version for the
            Image Builder workflow resource that defines this workflow step.
        workflowExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionId'
          description: The unique identifier that Image Builder assigned to keep track
            of runtime details when it ran the workflow.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image resource build
            version that the specified runtime instance of the workflow step creates.
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepName'
          description: The name of the specified runtime instance of the workflow
            step.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepDescription'
          description: Describes the specified workflow step.
        action:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepAction'
          description: The name of the action that the specified step performs.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionStatus'
          description: The current status for the specified runtime version of the
            workflow step.
        rollbackStatus:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionRollbackStatus'
          description: Reports on the rollback status of the specified runtime version
            of the workflow step, if applicable.
        message:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepMessage'
          description: The output message from the specified runtime instance of the
            workflow step, if applicable.
        inputs:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepInputs'
          description: Input parameters that Image Builder provided for the specified
            runtime instance of the workflow step.
        outputs:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepOutputs'
          description: The file names that the specified runtime version of the workflow
            step created as output.
        startTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when the specified runtime version of the workflow
            step started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when the specified runtime instance of the workflow
            step finished.
        onFailure:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The action to perform if the workflow step fails.
        timeoutSeconds:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepTimeoutSecondsInteger'
          description: The maximum duration in seconds for this step to complete its
            action.
    HttpPutResponseHopLimit:
      type: integer
      minimum: 1
      maximum: 64
    HttpTokens:
      type: string
      pattern: ^optional|required$
    IdempotentParameterMismatchException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You have specified a client token for an operation using parameter
        values that differ from a previous request that used the same client token.
    Image:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: "The Amazon Resource Name (ARN) of the image.\n\nSemantic versioning\
            \ is included in each object's Amazon Resource Name (ARN), at the level\
            \ that applies to that object as follows:\n\n  1. Versionless ARNs and\
            \ Name ARNs do not include specific values in any of the nodes. The nodes\
            \ are either left off entirely, or they are specified as wildcards, for\
            \ example: x.x.x.\n\n  2. Version ARNs have only the first three nodes:\
            \ ..\n\n  3. Build version ARNs have all four nodes, and point to a specific\
            \ build for a specific version of an object."
        type:
          allOf:
          - $ref: '#/components/schemas/ImageType'
          description: Specifies whether this image produces an AMI or a container
            image.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the image.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'The semantic version of the image.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Assignment:** For the first three nodes you can assign any positive
            integer value, including zero, with an upper limit of 2^30-1, or 1073741823
            for each node. Image Builder automatically assigns the build number to
            the fourth node.


            **Patterns:** You can use any numeric pattern that adheres to the assignment
            requirements for the nodes that you can assign. For example, you might
            choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.


            **Filtering:** With semantic versioning, you have the flexibility to use
            wildcards (x) to specify the most recent versions or nodes when selecting
            the base image or components for your recipe. When you use a wildcard
            in any node, all nodes to the right of the first wildcard must also be
            wildcards.'
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The image operating system platform, such as Linux or Windows.
        enhancedImageMetadataEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Indicates whether Image Builder collects additional information
            about the image, such as the operating system (OS) version and package
            list.
        osVersion:
          allOf:
          - $ref: '#/components/schemas/OsVersion'
          description: The operating system version for instances that launch from
            this image. For example, Amazon Linux 2, Ubuntu 18, or Microsoft Windows
            Server 2019.
        state:
          allOf:
          - $ref: '#/components/schemas/ImageState'
          description: The state of the image.
        imageRecipe:
          allOf:
          - $ref: '#/components/schemas/ImageRecipe'
          description: For images that distribute an AMI, this is the image recipe
            that Image Builder used to create the image. For container images, this
            is empty.
        containerRecipe:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipe'
          description: For container images, this is the container recipe that Image
            Builder used to create the image. For images that distribute an AMI, this
            is empty.
        sourcePipelineName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the image pipeline that created this image.
        sourcePipelineArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the image pipeline that created
            this image.
        infrastructureConfiguration:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfiguration'
          description: The infrastructure that Image Builder used to create this image.
        distributionConfiguration:
          allOf:
          - $ref: '#/components/schemas/DistributionConfiguration'
          description: The distribution configuration that Image Builder used to create
            this image.
        imageTestsConfiguration:
          allOf:
          - $ref: '#/components/schemas/ImageTestsConfiguration'
          description: The image tests that ran when that Image Builder created this
            image.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which Image Builder created this image.
        outputResources:
          allOf:
          - $ref: '#/components/schemas/OutputResources'
          description: The output resources that Image Builder produces for this image.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that apply to this image.
        buildType:
          allOf:
          - $ref: '#/components/schemas/BuildType'
          description: "Indicates the type of build that created this image. The build\
            \ can be initiated in the following ways:\n\n  * **USER_INITIATED** –\
            \ A manual pipeline build request.\n\n  * **SCHEDULED** – A pipeline build\
            \ initiated by a cron expression in the Image Builder pipeline, or from\
            \ EventBridge.\n\n  * **IMPORT** – A VM import created the image to use\
            \ as the base image for the recipe.\n\n  * **IMPORT_ISO** – An ISO disk\
            \ import created the image."
        imageSource:
          allOf:
          - $ref: '#/components/schemas/ImageSource'
          description: The origin of the base image that Image Builder used to build
            this image.
        scanState:
          allOf:
          - $ref: '#/components/schemas/ImageScanState'
          description: Contains information about the current state of scans for this
            image.
        imageScanningConfiguration:
          allOf:
          - $ref: '#/components/schemas/ImageScanningConfiguration'
          description: Contains settings for vulnerability scans.
        deprecationTime:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The time when deprecation occurs for an image resource. This
            can be a past or future date.
        lifecycleExecutionId:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionId'
          description: Identifies the last runtime instance of the lifecycle policy
            to take action on the image.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) for the IAM role you
            create that grants Image Builder access to perform workflow actions.
        workflows:
          allOf:
          - $ref: '#/components/schemas/WorkflowConfigurationList'
          description: Contains the build and test workflows that are associated with
            the image.
      description: An Image Builder image. You must specify exactly one recipe for
        the image – either a container recipe (`containerRecipe`), which creates a
        container image, or an image recipe (`imageRecipe`), which creates an AMI.
    ImageAggregation:
      type: object
      properties:
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) that identifies the image for
            this aggregation.
        severityCounts:
          allOf:
          - $ref: '#/components/schemas/SeverityCounts'
          description: Counts by severity level for medium severity and higher level
            findings, plus a total for all of the findings for the specified image.
      description: Contains vulnerability counts for a specific image.
    ImageBuildMessage:
      type: string
      minLength: 0
      maxLength: 500
    ImageBuildVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
    ImageBuilderArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):(?:image-recipe|container-recipe|infrastructure-configuration|distribution-configuration|component|image|image-pipeline|lifecycle-policy|workflow\/(?:build|test|distribution))/[a-z0-9-_]+(?:/(?:(?:x|[0-9]+)\.(?:x|[0-9]+)\.(?:x|[0-9]+))(?:/[0-9]+)?)?$
    ImagePackage:
      type: object
      properties:
        packageName:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The name of the package that's reported to the operating system
            package manager.
        packageVersion:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The version of the package that's reported to the operating
            system package manager.
      description: A software package that's installed on top of the base image to
        create a customized image.
    ImagePackageList:
      type: array
      items:
        $ref: '#/components/schemas/ImagePackage'
    ImagePipeline:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the image pipeline.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the image pipeline.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the image pipeline.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The platform of the image pipeline.
        enhancedImageMetadataEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Collects additional information about the image being created,
            including the operating system (OS) version and package list. This information
            is used to enhance the overall experience of using EC2 Image Builder.
            Enabled by default.
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the image recipe associated
            with this image pipeline.
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the container recipe that
            is used for this pipeline.
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            associated with this image pipeline.
        distributionConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the distribution configuration
            associated with this image pipeline.
        imageTestsConfiguration:
          allOf:
          - $ref: '#/components/schemas/ImageTestsConfiguration'
          description: The image tests configuration of the image pipeline.
        schedule:
          allOf:
          - $ref: '#/components/schemas/Schedule'
          description: The schedule of the image pipeline.
        status:
          allOf:
          - $ref: '#/components/schemas/PipelineStatus'
          description: The status of the image pipeline.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which this image pipeline was created.
        dateUpdated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which this image pipeline was last updated.
        dateLastRun:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: This is no longer supported, and does not return a value.
        dateNextRun:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The next date when the pipeline is scheduled to run.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of this image pipeline.
        imageScanningConfiguration:
          allOf:
          - $ref: '#/components/schemas/ImageScanningConfiguration'
          description: Contains settings for vulnerability scans.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) for the IAM role you
            create that grants Image Builder access to perform workflow actions.
        workflows:
          allOf:
          - $ref: '#/components/schemas/WorkflowConfigurationList'
          description: Contains the workflows that run for the image pipeline.
      description: Details of an image pipeline.
    ImagePipelineAggregation:
      type: object
      properties:
        imagePipelineArn:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineArn'
          description: The Amazon Resource Name (ARN) that identifies the image pipeline
            for this aggregation.
        severityCounts:
          allOf:
          - $ref: '#/components/schemas/SeverityCounts'
          description: Counts by severity level for medium severity and higher level
            findings, plus a total for all of the findings for the specified image
            pipeline.
      description: Contains vulnerability counts for a specific image pipeline.
    ImagePipelineArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$
    ImagePipelineList:
      type: array
      items:
        $ref: '#/components/schemas/ImagePipeline'
    ImageRecipe:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the image recipe.
        type:
          allOf:
          - $ref: '#/components/schemas/ImageType'
          description: Specifies which type of image is created by the recipe - an
            AMI or a container image.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the image recipe.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the image recipe.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The platform of the image recipe.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the image recipe.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: The version of the image recipe.
        components:
          allOf:
          - $ref: '#/components/schemas/ComponentConfigurationList'
          description: The components that are included in the image recipe. Recipes
            require a minimum of one build component, and can have a maximum of 20
            build and test components in any combination.
        parentImage:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: "The base image for customizations specified in the image recipe.\
            \ You can specify the parent image using one of the following options:\n\
            \n  * AMI ID\n\n  * Image Builder image Amazon Resource Name (ARN)\n\n\
            \  * Amazon Web Services Systems Manager (SSM) Parameter Store Parameter,\
            \ prefixed by `ssm:`, followed by the parameter name or ARN.\n\n  * Amazon\
            \ Web Services Marketplace product ID"
        blockDeviceMappings:
          allOf:
          - $ref: '#/components/schemas/InstanceBlockDeviceMappings'
          description: The block device mappings to apply when creating images from
            this recipe.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which this image recipe was created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the image recipe.
        workingDirectory:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The working directory to be used during build and test workflows.
        additionalInstanceConfiguration:
          allOf:
          - $ref: '#/components/schemas/AdditionalInstanceConfiguration'
          description: Before you create a new AMI, Image Builder launches temporary
            Amazon EC2 instances to build and test your image configuration. Instance
            configuration adds a layer of control over those instances. You can define
            settings and add scripts to run when an instance is launched from your
            AMI.
      description: An image recipe.
    ImageRecipeArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    ImageRecipeSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the image recipe.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the image recipe.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The platform of the image recipe.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the image recipe.
        parentImage:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The base image of the image recipe.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which this image recipe was created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the image recipe.
      description: A summary of an image recipe.
    ImageRecipeSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ImageRecipeSummary'
    ImageScanFinding:
      type: object
      properties:
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The Amazon Web Services account ID that's associated with the
            finding.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image build version that's
            associated with the finding.
        imagePipelineArn:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineArn'
          description: The Amazon Resource Name (ARN) of the image pipeline that's
            associated with the finding.
        type:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The type of the finding. Image Builder looks for findings of
            the type `PACKAGE_VULNERABILITY` that apply to output images, and excludes
            other types.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the finding.
        title:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The title of the finding.
        remediation:
          allOf:
          - $ref: '#/components/schemas/Remediation'
          description: An object that contains the details about how to remediate
            the finding.
        severity:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The severity of the finding.
        firstObservedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The date and time when the finding was first observed.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The timestamp when the finding was last updated.
        inspectorScore:
          allOf:
          - $ref: '#/components/schemas/NonNegativeDouble'
          description: The score that Amazon Inspector assigned for the finding.
        inspectorScoreDetails:
          allOf:
          - $ref: '#/components/schemas/InspectorScoreDetails'
          description: An object that contains details of the Amazon Inspector score.
        packageVulnerabilityDetails:
          allOf:
          - $ref: '#/components/schemas/PackageVulnerabilityDetails'
          description: An object that contains the details of a package vulnerability
            finding.
        fixAvailable:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Details about whether a fix is available for any of the packages
            that are identified in the finding through a version update.
      description: Contains details about a vulnerability scan finding.
    ImageScanFindingAggregation:
      type: object
      properties:
        accountAggregation:
          allOf:
          - $ref: '#/components/schemas/AccountAggregation'
          description: Returns an object that contains severity counts based on an
            account ID.
        imageAggregation:
          allOf:
          - $ref: '#/components/schemas/ImageAggregation'
          description: Returns an object that contains severity counts based on the
            Amazon Resource Name (ARN) for a specific image.
        imagePipelineAggregation:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineAggregation'
          description: Returns an object that contains severity counts based on an
            image pipeline ARN.
        vulnerabilityIdAggregation:
          allOf:
          - $ref: '#/components/schemas/VulnerabilityIdAggregation'
          description: Returns an object that contains severity counts based on vulnerability
            ID.
      description: This returns exactly one type of aggregation, based on the filter
        that Image Builder applies in its API action.
    ImageScanFindingAggregationsList:
      type: array
      items:
        $ref: '#/components/schemas/ImageScanFindingAggregation'
    ImageScanFindingsFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          description: The name of the image scan finding filter. Filter names are
            case-sensitive.
        values:
          allOf:
          - $ref: '#/components/schemas/ImageScanFindingsFilterValues'
          description: The filter values. Filter values are case-sensitive.
      description: A name value pair that Image Builder applies to streamline results
        from the vulnerability scan findings list action.
    ImageScanFindingsFilterList:
      type: array
      items:
        $ref: '#/components/schemas/ImageScanFindingsFilter'
    ImageScanFindingsFilterValues:
      type: array
      items:
        $ref: '#/components/schemas/FilterValue'
    ImageScanFindingsList:
      type: array
      items:
        $ref: '#/components/schemas/ImageScanFinding'
    ImageScanState:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ImageScanStatus'
          description: The current state of vulnerability scans for the image.
        reason:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The reason for the scan status for the image.
      description: Shows the vulnerability scan status for a specific image, and the
        reason for that status.
    ImageScanStatus:
      type: string
      enum:
      - PENDING
      - SCANNING
      - COLLECTING
      - COMPLETED
      - ABANDONED
      - FAILED
      - TIMED_OUT
    ImageScanningConfiguration:
      type: object
      properties:
        imageScanningEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: A setting that indicates whether Image Builder keeps a snapshot
            of the vulnerability scans that Amazon Inspector runs against the build
            instance when you create a new image.
        ecrConfiguration:
          allOf:
          - $ref: '#/components/schemas/EcrConfiguration'
          description: Contains Amazon ECR settings for vulnerability scans.
      description: Contains settings for Image Builder image resource and container
        image scans.
    ImageSource:
      type: string
      enum:
      - AMAZON_MANAGED
      - AWS_MARKETPLACE
      - IMPORTED
      - CUSTOM
    ImageState:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ImageStatus'
          description: The status of the image.
        reason:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The reason for the status of the image.
      description: Image status and the reason for that status.
    ImageStatus:
      type: string
      enum:
      - PENDING
      - CREATING
      - BUILDING
      - TESTING
      - DISTRIBUTING
      - INTEGRATING
      - AVAILABLE
      - CANCELLED
      - FAILED
      - DEPRECATED
      - DELETED
      - DISABLED
    ImageSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the image.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the image.
        type:
          allOf:
          - $ref: '#/components/schemas/ImageType'
          description: Specifies whether this image produces an AMI or a container
            image.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: The version of the image.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The image operating system platform, such as Linux or Windows.
        osVersion:
          allOf:
          - $ref: '#/components/schemas/OsVersion'
          description: The operating system version of the instances that launch from
            this image. For example, Amazon Linux 2, Ubuntu 18, or Microsoft Windows
            Server 2019.
        state:
          allOf:
          - $ref: '#/components/schemas/ImageState'
          description: The state of the image.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the image.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which Image Builder created this image.
        outputResources:
          allOf:
          - $ref: '#/components/schemas/OutputResources'
          description: The output resources that Image Builder produced when it created
            this image.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that apply to this image.
        buildType:
          allOf:
          - $ref: '#/components/schemas/BuildType'
          description: "Indicates the type of build that created this image. The build\
            \ can be initiated in the following ways:\n\n  * **USER_INITIATED** –\
            \ A manual pipeline build request.\n\n  * **SCHEDULED** – A pipeline build\
            \ initiated by a cron expression in the Image Builder pipeline, or from\
            \ EventBridge.\n\n  * **IMPORT** – A VM import created the image to use\
            \ as the base image for the recipe.\n\n  * **IMPORT_ISO** – An ISO disk\
            \ import created the image."
        imageSource:
          allOf:
          - $ref: '#/components/schemas/ImageSource'
          description: The origin of the base image that Image Builder used to build
            this image.
        deprecationTime:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The time when deprecation occurs for an image resource. This
            can be a past or future date.
        lifecycleExecutionId:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionId'
          description: Identifies the last runtime instance of the lifecycle policy
            to take action on the image.
      description: An image summary.
    ImageSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ImageSummary'
    ImageTestsConfiguration:
      type: object
      properties:
        imageTestsEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Determines if tests should run after building the image. Image
            Builder defaults to enable tests to run following the image build, before
            image distribution.
        timeoutMinutes:
          allOf:
          - $ref: '#/components/schemas/ImageTestsTimeoutMinutes'
          description: 'The maximum time in minutes that tests are permitted to run.


            The timeout property is not currently active. This value is ignored.'
      description: Configure image tests for your pipeline build. Tests run after
        building the image, to verify that the AMI or container image is valid before
        distributing it.
    ImageTestsTimeoutMinutes:
      type: integer
      minimum: 60
      maximum: 1440
    ImageType:
      type: string
      enum:
      - AMI
      - DOCKER
    ImageVersion:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: "The Amazon Resource Name (ARN) of a specific version of an\
            \ Image Builder image.\n\nSemantic versioning is included in each object's\
            \ Amazon Resource Name (ARN), at the level that applies to that object\
            \ as follows:\n\n  1. Versionless ARNs and Name ARNs do not include specific\
            \ values in any of the nodes. The nodes are either left off entirely,\
            \ or they are specified as wildcards, for example: x.x.x.\n\n  2. Version\
            \ ARNs have only the first three nodes: ..\n\n  3. Build version ARNs\
            \ have all four nodes, and point to a specific build for a specific version\
            \ of an object."
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of this specific version of an Image Builder image.
        type:
          allOf:
          - $ref: '#/components/schemas/ImageType'
          description: Specifies whether this image produces an AMI or a container
            image.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'Details for a specific version of an Image Builder image.
            This version follows the semantic version syntax.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Assignment:** For the first three nodes you can assign any positive
            integer value, including zero, with an upper limit of 2^30-1, or 1073741823
            for each node. Image Builder automatically assigns the build number to
            the fourth node.


            **Patterns:** You can use any numeric pattern that adheres to the assignment
            requirements for the nodes that you can assign. For example, you might
            choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.


            **Filtering:** With semantic versioning, you have the flexibility to use
            wildcards (x) to specify the most recent versions or nodes when selecting
            the base image or components for your recipe. When you use a wildcard
            in any node, all nodes to the right of the first wildcard must also be
            wildcards.'
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The operating system platform of the image version, for example
            "Windows" or "Linux".
        osVersion:
          allOf:
          - $ref: '#/components/schemas/OsVersion'
          description: The operating system version of the Amazon EC2 build instance.
            For example, Amazon Linux 2, Ubuntu 18, or Microsoft Windows Server 2019.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the image version.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which this specific version of the Image Builder
            image was created.
        buildType:
          allOf:
          - $ref: '#/components/schemas/BuildType'
          description: "Indicates the type of build that created this image. The build\
            \ can be initiated in the following ways:\n\n  * **USER_INITIATED** –\
            \ A manual pipeline build request.\n\n  * **SCHEDULED** – A pipeline build\
            \ initiated by a cron expression in the Image Builder pipeline, or from\
            \ EventBridge.\n\n  * **IMPORT** – A VM import created the image to use\
            \ as the base image for the recipe.\n\n  * **IMPORT_ISO** – An ISO disk\
            \ import created the image."
        imageSource:
          allOf:
          - $ref: '#/components/schemas/ImageSource'
          description: The origin of the base image that Image Builder used to build
            this image.
      description: The defining characteristics of a specific version of an Image
        Builder image.
    ImageVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    ImageVersionArnOrBuildVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):image/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$
    ImageVersionList:
      type: array
      items:
        $ref: '#/components/schemas/ImageVersion'
    ImportComponentRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the component.
        semanticVersion:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'The semantic version of the component. This version follows
            the semantic version syntax.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Filtering:** With semantic versioning, you have the flexibility to use
            wildcards (x) to specify the most recent versions or nodes when selecting
            the base image or components for your recipe. When you use a wildcard
            in any node, all nodes to the right of the first wildcard must also be
            wildcards.'
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the component. Describes the contents of
            the component.
        changeDescription:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The change description of the component. This description indicates
            the change that has been made in this version, or what makes this version
            different from other versions of the component.
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentType'
          description: The type of the component denotes whether the component is
            used to build the image, or only to test it.
        format:
          allOf:
          - $ref: '#/components/schemas/ComponentFormat'
          description: The format of the resource that you want to import as a component.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The platform of the component.
        data:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The data of the component. Used to specify the data inline.
            Either `data` or `uri` can be used to specify the data within the component.
        uri:
          allOf:
          - $ref: '#/components/schemas/Uri'
          description: The uri of the component. Must be an Amazon S3 URL and the
            requester must have permission to access the Amazon S3 bucket. If you
            use Amazon S3, you can specify component content up to your service quota.
            Either `data` or `uri` can be used to specify the data within the component.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The ID of the KMS key that should be used to encrypt this component.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the component.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - name
      - semanticVersion
      - type
      - format
      - platform
      - clientToken
    ImportComponentResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        componentBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ComponentBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the imported component.
    ImportDiskImageRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The name of the image resource that's created from the import.
        semanticVersion:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: The semantic version to attach to the image that's created
            during the import process. This version follows the semantic version syntax.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description for your disk image import.
        platform:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: 'The operating system platform for the imported image. Allowed
            values include the following: `Windows`.'
        osVersion:
          allOf:
          - $ref: '#/components/schemas/OsVersion'
          description: 'The operating system version for the imported image. Allowed
            values include the following: `Microsoft Windows 11`.'
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) for the IAM role you
            create that grants Image Builder access to perform workflow actions to
            import an image from a Microsoft ISO file.
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            resource that's used for launching the EC2 instance on which the ISO image
            is built.
        uri:
          allOf:
          - $ref: '#/components/schemas/Uri'
          description: The `uri` of the ISO disk file that's stored in Amazon S3.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags that are attached to image resources created from the
            import.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - name
      - semanticVersion
      - platform
      - osVersion
      - infrastructureConfigurationArn
      - uri
      - clientToken
    ImportDiskImageResponse:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the output AMI that was created
            from the ISO disk file.
    ImportVmImageRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The name of the base image that is created by the import process.
        semanticVersion:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'The semantic version to attach to the base image that was
            created during the import process. This version follows the semantic version
            syntax.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Assignment:** For the first three nodes you can assign any positive
            integer value, including zero, with an upper limit of 2^30-1, or 1073741823
            for each node. Image Builder automatically assigns the build number to
            the fourth node.


            **Patterns:** You can use any numeric pattern that adheres to the assignment
            requirements for the nodes that you can assign. For example, you might
            choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.'
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description for the base image that is created by the import
            process.
        platform:
          allOf:
          - $ref: '#/components/schemas/Platform'
          description: The operating system platform for the imported VM.
        osVersion:
          allOf:
          - $ref: '#/components/schemas/OsVersion'
          description: The operating system version for the imported VM.
        vmImportTaskId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The `importTaskId` (API) or `ImportTaskId` (CLI) from the Amazon
            EC2 VM import process. Image Builder retrieves information from the import
            process to pull in the AMI that is created from the VM source as the base
            image for your recipe.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags that are attached to the import resources.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - name
      - semanticVersion
      - platform
      - vmImportTaskId
      - clientToken
    ImportVmImageResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imageArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the AMI that was created
            during the VM import process. This AMI is used as the base image for the
            recipe that imported the VM.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
    InfrastructureConfiguration:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the infrastructure configuration.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the infrastructure configuration.
        instanceTypes:
          allOf:
          - $ref: '#/components/schemas/InstanceTypeList'
          description: The instance types of the infrastructure configuration.
        instanceProfileName:
          allOf:
          - $ref: '#/components/schemas/InstanceProfileNameType'
          description: The instance profile of the infrastructure configuration.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIds'
          description: The security group IDs of the infrastructure configuration.
        subnetId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The subnet ID of the infrastructure configuration.
        logging:
          allOf:
          - $ref: '#/components/schemas/Logging'
          description: The logging configuration of the infrastructure configuration.
        keyPair:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The Amazon EC2 key pair of the infrastructure configuration.
        terminateInstanceOnFailure:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: The terminate instance on failure configuration of the infrastructure
            configuration.
        snsTopicArn:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: 'The Amazon Resource Name (ARN) for the SNS topic to which
            we send image build event notifications.


            EC2 Image Builder is unable to send notifications to SNS topics that are
            encrypted using keys from other accounts. The key that is used to encrypt
            the SNS topic must reside in the account that the Image Builder service
            runs under.'
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which the infrastructure configuration was created.
        dateUpdated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which the infrastructure configuration was last
            updated.
        resourceTags:
          allOf:
          - $ref: '#/components/schemas/ResourceTagMap'
          description: The tags attached to the resource created by Image Builder.
        instanceMetadataOptions:
          allOf:
          - $ref: '#/components/schemas/InstanceMetadataOptions'
          description: The instance metadata option settings for the infrastructure
            configuration.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the infrastructure configuration.
        placement:
          allOf:
          - $ref: '#/components/schemas/Placement'
          description: The instance placement settings that define where the instances
            that are launched from your image will run.
      description: Details of the infrastructure configuration.
    InfrastructureConfigurationArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
    InfrastructureConfigurationSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the infrastructure configuration.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the infrastructure configuration.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which the infrastructure configuration was created.
        dateUpdated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The date on which the infrastructure configuration was last
            updated.
        resourceTags:
          allOf:
          - $ref: '#/components/schemas/ResourceTagMap'
          description: The tags attached to the image created by Image Builder.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the infrastructure configuration.
        instanceTypes:
          allOf:
          - $ref: '#/components/schemas/InstanceTypeList'
          description: The instance types of the infrastructure configuration.
        instanceProfileName:
          allOf:
          - $ref: '#/components/schemas/InstanceProfileNameType'
          description: The instance profile of the infrastructure configuration.
        placement:
          allOf:
          - $ref: '#/components/schemas/Placement'
          description: The instance placement settings that define where the instances
            that are launched from your image will run.
      description: The infrastructure used when building Amazon EC2 AMIs.
    InfrastructureConfigurationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/InfrastructureConfigurationSummary'
    InlineComponentData:
      type: string
      pattern: ^[^\x00]+$
      minLength: 1
      maxLength: 16000
    InlineDockerFileTemplate:
      type: string
      pattern: ^[^\x00]+$
      minLength: 1
      maxLength: 16000
    InlineWorkflowData:
      type: string
      pattern: ^[^\x00]+$
      minLength: 1
      maxLength: 16000
    InspectorScoreDetails:
      type: object
      properties:
        adjustedCvss:
          allOf:
          - $ref: '#/components/schemas/CvssScoreDetails'
          description: An object that contains details about an adjustment that Amazon
            Inspector made to the CVSS score for the finding.
      description: Information about the factors that influenced the score that Amazon
        Inspector assigned for a finding.
    InstanceBlockDeviceMapping:
      type: object
      properties:
        deviceName:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The device to which these mappings apply.
        ebs:
          allOf:
          - $ref: '#/components/schemas/EbsInstanceBlockDeviceSpecification'
          description: Use to manage Amazon EBS-specific configuration for this mapping.
        virtualName:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Use to manage instance ephemeral devices.
        noDevice:
          allOf:
          - $ref: '#/components/schemas/EmptyString'
          description: Use to remove a mapping from the base image.
      description: Defines block device mappings for the instance used to configure
        your image.
    InstanceBlockDeviceMappings:
      type: array
      items:
        $ref: '#/components/schemas/InstanceBlockDeviceMapping'
    InstanceConfiguration:
      type: object
      properties:
        image:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: 'The base image for a container build and test instance. This
            can contain an AMI ID or it can specify an Amazon Web Services Systems
            Manager (SSM) Parameter Store Parameter, prefixed by `ssm:`, followed
            by the parameter name or ARN.


            If not specified, Image Builder uses the appropriate ECS-optimized AMI
            as a base image.'
        blockDeviceMappings:
          allOf:
          - $ref: '#/components/schemas/InstanceBlockDeviceMappings'
          description: Defines the block devices to attach for building an instance
            from this Image Builder AMI.
      description: Defines a custom base AMI and block device mapping configurations
        of an instance used for building and testing container images.
    InstanceMetadataOptions:
      type: object
      properties:
        httpTokens:
          allOf:
          - $ref: '#/components/schemas/HttpTokens'
          description: "Indicates whether a signed token header is required for instance\
            \ metadata retrieval requests. The values affect the response as follows:\n\
            \n  * **required** – When you retrieve the IAM role credentials, version\
            \ 2.0 credentials are returned in all cases.\n\n  * **optional** – You\
            \ can include a signed token header in your request to retrieve instance\
            \ metadata, or you can leave it out. If you include it, version 2.0 credentials\
            \ are returned for the IAM role. Otherwise, version 1.0 credentials are\
            \ returned.\n\nThe default setting is **optional**."
        httpPutResponseHopLimit:
          allOf:
          - $ref: '#/components/schemas/HttpPutResponseHopLimit'
          description: Limit the number of hops that an instance metadata request
            can traverse to reach its destination. The default is one hop. However,
            if HTTP tokens are required, container image builds need a minimum of
            two hops.
      description: The instance metadata options that apply to the HTTP requests that
        pipeline builds use to launch EC2 build and test instances. For more information
        about instance metadata options, see [Configure the instance metadata options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html)
        in the __Amazon EC2 User Guide_ _ for Linux instances, or [Configure the instance
        metadata options](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html)
        in the __Amazon EC2 Windows Guide_ _ for Windows instances.
    InstanceProfileNameType:
      type: string
      pattern: ^[\w+=,.@-]+$
      minLength: 1
      maxLength: 256
    InstanceType:
      type: string
    InstanceTypeList:
      type: array
      items:
        $ref: '#/components/schemas/InstanceType'
    InvalidPaginationTokenException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You have provided an invalid pagination token in your request.
    InvalidParameterCombinationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You have specified two or more mutually exclusive parameters. Review
        the error message for details.
    InvalidParameterException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The specified parameter is invalid. Review the available parameters
        for the API request.
    InvalidParameterValueException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The value that you provided for the specified parameter is invalid.
    InvalidRequestException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You have requested an action that that the service doesn't support.
    InvalidVersionNumberException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: Your version number is out of bounds or does not follow the required
        syntax.
    LaunchPermissionConfiguration:
      type: object
      properties:
        userIds:
          allOf:
          - $ref: '#/components/schemas/AccountList'
          description: The Amazon Web Services account ID.
        userGroups:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The name of the group.
        organizationArns:
          allOf:
          - $ref: '#/components/schemas/OrganizationArnList'
          description: The ARN for an Amazon Web Services Organization that you want
            to share your AMI with. For more information, see [What is Organizations?](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html).
        organizationalUnitArns:
          allOf:
          - $ref: '#/components/schemas/OrganizationalUnitArnList'
          description: The ARN for an Organizations organizational unit (OU) that
            you want to share your AMI with. For more information about key concepts
            for Organizations, see [Organizations terminology and concepts](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html).
      description: Describes the configuration for a launch permission. The launch
        permission modification request is sent to the [Amazon EC2 ModifyImageAttribute](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyImageAttribute.html)
        API on behalf of the user for each Region they have selected to distribute
        the AMI. To make an AMI public, set the launch permission authorized accounts
        to `all`. See the examples for making an AMI public at [Amazon EC2 ModifyImageAttribute](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyImageAttribute.html).
    LaunchTemplateConfiguration:
      type: object
      properties:
        launchTemplateId:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateId'
          description: Identifies the Amazon EC2 launch template to use.
        accountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID that this configuration applies to.
        setDefaultVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Set the specified Amazon EC2 launch template as the default
            launch template for the specified account.
      required:
      - launchTemplateId
      description: Identifies an Amazon EC2 launch template to use for a specific
        account.
    LaunchTemplateConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/LaunchTemplateConfiguration'
    LaunchTemplateId:
      type: string
      pattern: ^lt-[a-z0-9-_]{17}$
    LicenseConfigurationArn:
      type: string
      pattern: ^arn:aws[^:]*:license-manager:[^:]+:[0-9]{12}:license-configuration:lic-[a-z0-9-_]{32}$
    LicenseConfigurationArnList:
      type: array
      items:
        $ref: '#/components/schemas/LicenseConfigurationArn'
    LifecycleExecution:
      type: object
      properties:
        lifecycleExecutionId:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionId'
          description: Identifies the lifecycle policy runtime instance.
        lifecyclePolicyArn:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyArn'
          description: The Amazon Resource Name (ARN) of the lifecycle policy that
            ran.
        resourcesImpactedSummary:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionResourcesImpactedSummary'
          description: Contains information about associated resources that are identified
            for action by the runtime instance of the lifecycle policy.
        state:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionState'
          description: Runtime state that reports if the policy action ran successfully,
            failed, or was skipped.
        startTime:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The timestamp when the lifecycle runtime instance started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The timestamp when the lifecycle runtime instance completed.
      description: Contains metadata from a runtime instance of a lifecycle policy.
    LifecycleExecutionId:
      type: string
      pattern: ^lce-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    LifecycleExecutionResource:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The account that owns the impacted resource.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: "Identifies the impacted resource. The resource ID depends\
            \ on the type of resource, as follows.\n\n  * Image Builder image resources:\
            \ Amazon Resource Name (ARN)\n\n  * Distributed AMIs: AMI ID\n\n  * Container\
            \ images distributed to an ECR repository: image URI or SHA Digest"
        state:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionResourceState'
          description: The runtime state for the lifecycle execution.
        action:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionResourceAction'
          description: The action to take for the identified resource.
        region:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The Amazon Web Services Region where the lifecycle execution
            resource is stored.
        snapshots:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionSnapshotResourceList'
          description: A list of associated resource snapshots for the impacted resource
            if it’s an AMI.
        imageUris:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: For an impacted container image, this identifies a list of
            URIs for associated container images distributed to ECR repositories.
        startTime:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The starting timestamp from the lifecycle action that was applied
            to the resource.
        endTime:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The ending timestamp from the lifecycle action that was applied
            to the resource.
      description: Contains details for a resource that the runtime instance of the
        lifecycle policy identified for action.
    LifecycleExecutionResourceAction:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionResourceActionName'
          description: The name of the resource that was identified for a lifecycle
            policy action.
        reason:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The reason why the lifecycle policy action is taken.
      description: The lifecycle policy action that was identified for the impacted
        resource.
    LifecycleExecutionResourceActionName:
      type: string
      enum:
      - AVAILABLE
      - DELETE
      - DEPRECATE
      - DISABLE
    LifecycleExecutionResourceList:
      type: array
      items:
        $ref: '#/components/schemas/LifecycleExecutionResource'
    LifecycleExecutionResourceState:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionResourceStatus'
          description: The runtime status of the lifecycle action taken for the impacted
            resource.
        reason:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Messaging that clarifies the reason for the assigned status.
      description: Contains the state of an impacted resource that the runtime instance
        of the lifecycle policy identified for action.
    LifecycleExecutionResourceStatus:
      type: string
      enum:
      - FAILED
      - IN_PROGRESS
      - SKIPPED
      - SUCCESS
    LifecycleExecutionResourcesImpactedSummary:
      type: object
      properties:
        hasImpactedResources:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether an image resource that was identified for
            a lifecycle action has associated resources that are also impacted.
      description: Contains details for an image resource that was identified for
        a lifecycle action.
    LifecycleExecutionSnapshotResource:
      type: object
      properties:
        snapshotId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Identifies the impacted snapshot resource.
        state:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionResourceState'
          description: The runtime status of the lifecycle action taken for the snapshot.
      description: Contains the state of an impacted snapshot resource that the runtime
        instance of the lifecycle policy identified for action.
    LifecycleExecutionSnapshotResourceList:
      type: array
      items:
        $ref: '#/components/schemas/LifecycleExecutionSnapshotResource'
    LifecycleExecutionState:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionStatus'
          description: The runtime status of the lifecycle execution.
        reason:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The reason for the current status.
      description: The current state of the runtime instance of the lifecycle policy.
    LifecycleExecutionStatus:
      type: string
      enum:
      - IN_PROGRESS
      - CANCELLED
      - CANCELLING
      - FAILED
      - SUCCESS
      - PENDING
    LifecycleExecutionsList:
      type: array
      items:
        $ref: '#/components/schemas/LifecycleExecution'
    LifecyclePolicy:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyArn'
          description: The Amazon Resource Name (ARN) of the lifecycle policy resource.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the lifecycle policy.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Optional description for the lifecycle policy.
        status:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyStatus'
          description: Indicates whether the lifecycle policy resource is enabled.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) of the IAM role that
            Image Builder uses to run the lifecycle policy. This is a custom role
            that you create.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyResourceType'
          description: The type of resources the lifecycle policy targets.
        policyDetails:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetails'
          description: The configuration details for a lifecycle policy resource.
        resourceSelection:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyResourceSelection'
          description: Resource selection criteria used to run the lifecycle policy.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The timestamp when Image Builder created the lifecycle policy
            resource.
        dateUpdated:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The timestamp when Image Builder updated the lifecycle policy
            resource.
        dateLastRun:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The timestamp for the last time Image Builder ran the lifecycle
            policy.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: To help manage your lifecycle policy resources, you can assign
            your own metadata to each resource in the form of tags. Each tag consists
            of a key and an optional value, both of which you define.
      description: The configuration details for a lifecycle policy resource.
    LifecyclePolicyArn:
      type: string
      pattern: ^arn:aws(?:-[a-z]+)*:imagebuilder:[a-z]{2,}(?:-[a-z]+)+-[0-9]+:(?:[0-9]{12}|aws):lifecycle-policy/[a-z0-9-_]+$
      minLength: 0
      maxLength: 1024
    LifecyclePolicyDetail:
      type: object
      properties:
        action:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailAction'
          description: Configuration details for the policy action.
        filter:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailFilter'
          description: Specifies the resources that the lifecycle policy applies to.
        exclusionRules:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailExclusionRules'
          description: Additional rules to specify resources that should be exempt
            from policy actions.
      required:
      - action
      - filter
      description: The configuration details for a lifecycle policy resource.
    LifecyclePolicyDetailAction:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailActionType'
          description: Specifies the lifecycle action to take.
        includeResources:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailActionIncludeResources'
          description: Specifies the resources that the lifecycle policy applies to.
      required:
      - type
      description: Contains selection criteria for the lifecycle policy.
    LifecyclePolicyDetailActionIncludeResources:
      type: object
      properties:
        amis:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the lifecycle action should apply to distributed
            AMIs.
        snapshots:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the lifecycle action should apply to snapshots
            associated with distributed AMIs.
        containers:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the lifecycle action should apply to distributed
            containers.
      description: Specifies how the lifecycle policy should apply actions to selected
        resources.
    LifecyclePolicyDetailActionType:
      type: string
      enum:
      - DELETE
      - DEPRECATE
      - DISABLE
    LifecyclePolicyDetailExclusionRules:
      type: object
      properties:
        tagMap:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Contains a list of tags that Image Builder uses to skip lifecycle
            actions for Image Builder image resources that have them.
        amis:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailExclusionRulesAmis'
          description: Lists configuration values that apply to AMIs that Image Builder
            should exclude from the lifecycle action.
      description: Specifies resources that lifecycle policy actions should not apply
        to.
    LifecyclePolicyDetailExclusionRulesAmis:
      type: object
      properties:
        isPublic:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Configures whether public AMIs are excluded from the lifecycle
            action.
        regions:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: Configures Amazon Web Services Regions that are excluded from
            the lifecycle action.
        sharedAccounts:
          allOf:
          - $ref: '#/components/schemas/AccountList'
          description: Specifies Amazon Web Services accounts whose resources are
            excluded from the lifecycle action.
        lastLaunched:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailExclusionRulesAmisLastLaunched'
          description: Specifies configuration details for Image Builder to exclude
            the most recent resources from lifecycle actions.
        tagMap:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Lists tags that should be excluded from lifecycle actions for
            the AMIs that have them.
      description: Defines criteria for AMIs that are excluded from lifecycle actions.
    LifecyclePolicyDetailExclusionRulesAmisLastLaunched:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailExclusionRulesAmisLastLaunchedValue'
          description: The integer number of units for the time period. For example
            `6` (months).
        unit:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyTimeUnit'
          description: 'Defines the unit of time that the lifecycle policy uses to
            calculate elapsed time since the last instance launched from the AMI.
            For example: days, weeks, months, or years.'
      required:
      - value
      - unit
      description: Defines criteria to exclude AMIs from lifecycle actions based on
        the last time they were used to launch an instance.
    LifecyclePolicyDetailExclusionRulesAmisLastLaunchedValue:
      type: integer
      minimum: 1
      maximum: 365
    LifecyclePolicyDetailFilter:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailFilterType'
          description: Filter resources based on either `age` or `count`.
        value:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailFilterValue'
          description: 'The number of units for the time period or for the count.
            For example, a value of `6` might refer to six months or six AMIs.


            For count-based filters, this value represents the minimum number of resources
            to keep on hand. If you have fewer resources than this number, the resource
            is excluded from lifecycle actions.'
        unit:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyTimeUnit'
          description: Defines the unit of time that the lifecycle policy uses to
            determine impacted resources. This is required for age-based rules.
        retainAtLeast:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetailFilterRetainAtLeast'
          description: For age-based filters, this is the number of resources to keep
            on hand after the lifecycle `DELETE` action is applied. Impacted resources
            are only deleted if you have more than this number of resources. If you
            have fewer resources than this number, the impacted resource is not deleted.
      required:
      - type
      - value
      description: Defines filters that the lifecycle policy uses to determine impacted
        resource.
    LifecyclePolicyDetailFilterRetainAtLeast:
      type: integer
      minimum: 1
      maximum: 10
    LifecyclePolicyDetailFilterType:
      type: string
      enum:
      - AGE
      - COUNT
    LifecyclePolicyDetailFilterValue:
      type: integer
      minimum: 1
      maximum: 1000
    LifecyclePolicyDetails:
      type: array
      items:
        $ref: '#/components/schemas/LifecyclePolicyDetail'
    LifecyclePolicyResourceSelection:
      type: object
      properties:
        recipes:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyResourceSelectionRecipes'
          description: A list of recipes that are used as selection criteria for the
            output images that the lifecycle policy applies to.
        tagMap:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags that are used as selection criteria for the
            Image Builder image resources that the lifecycle policy applies to.
      description: Resource selection criteria for the lifecycle policy.
    LifecyclePolicyResourceSelectionRecipe:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of an Image Builder recipe that the lifecycle policy
            uses for resource selection.
        semanticVersion:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: The version of the Image Builder recipe specified by the `name`
            field.
      required:
      - name
      - semanticVersion
      description: Specifies an Image Builder recipe that the lifecycle policy uses
        for resource selection.
    LifecyclePolicyResourceSelectionRecipes:
      type: array
      items:
        $ref: '#/components/schemas/LifecyclePolicyResourceSelectionRecipe'
    LifecyclePolicyResourceType:
      type: string
      enum:
      - AMI_IMAGE
      - CONTAINER_IMAGE
    LifecyclePolicyStatus:
      type: string
      enum:
      - DISABLED
      - ENABLED
    LifecyclePolicySummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyArn'
          description: The Amazon Resource Name (ARN) of the lifecycle policy summary
            resource.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the lifecycle policy.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Optional description for the lifecycle policy.
        status:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyStatus'
          description: The lifecycle policy resource status.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) of the IAM role that
            Image Builder uses to run the lifecycle policy.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyResourceType'
          description: The type of resources the lifecycle policy targets.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The timestamp when Image Builder created the lifecycle policy
            resource.
        dateUpdated:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The timestamp when Image Builder updated the lifecycle policy
            resource.
        dateLastRun:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The timestamp for the last time Image Builder ran the lifecycle
            policy.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: To help manage your lifecycle policy resources, you can assign
            your own metadata to each resource in the form of tags. Each tag consists
            of a key and an optional value, both of which you define.
      description: Contains a summary of lifecycle policy resources.
    LifecyclePolicySummaryList:
      type: array
      items:
        $ref: '#/components/schemas/LifecyclePolicySummary'
    LifecyclePolicyTimeUnit:
      type: string
      enum:
      - DAYS
      - WEEKS
      - MONTHS
      - YEARS
    ListComponentBuildVersionsRequest:
      type: object
      properties:
        componentVersionArn:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionArn'
          description: The component version Amazon Resource Name (ARN) whose versions
            you want to list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
      required:
      - componentVersionArn
    ListComponentBuildVersionsResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        componentSummaryList:
          allOf:
          - $ref: '#/components/schemas/ComponentSummaryList'
          description: The list of component summaries for the specified semantic
            version.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListComponentsRequest:
      type: object
      properties:
        owner:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Filters results based on the type of owner for the component.
            By default, this request returns a list of components that your account
            owns. To see results for other types of owners, you can specify components
            that Amazon manages, third party components, or components that other
            accounts have shared with you.
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: "Use the following filters to streamline results:\n\n  * `description`\n\
            \n  * `name`\n\n  * `platform`\n\n  * `supportedOsVersion`\n\n  * `type`\n\
            \n  * `version`"
        byName:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Returns the list of components for the specified name.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListComponentsResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        componentVersionList:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionList'
          description: 'The list of component semantic versions.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListContainerRecipesRequest:
      type: object
      properties:
        owner:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Returns container recipes belonging to the specified owner,
            that have been shared with you. You can omit this field to return container
            recipes belonging to your account.
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: "Use the following filters to streamline results:\n\n  * `containerType`\n\
            \n  * `name`\n\n  * `parentImage`\n\n  * `platform`"
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListContainerRecipesResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        containerRecipeSummaryList:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeSummaryList'
          description: The list of container recipes returned for the request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListDistributionConfigurationsRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: You can filter on `name` to streamline results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListDistributionConfigurationsResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        distributionConfigurationSummaryList:
          allOf:
          - $ref: '#/components/schemas/DistributionConfigurationSummaryList'
          description: The list of distributions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListImageBuildVersionsRequest:
      type: object
      properties:
        imageVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageVersionArn'
          description: The Amazon Resource Name (ARN) of the image whose build versions
            you want to retrieve.
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: "Use the following filters to streamline results:\n\n  * `name`\n\
            \n  * `osVersion`\n\n  * `platform`\n\n  * `type`\n\n  * `version`"
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
      required:
      - imageVersionArn
    ListImageBuildVersionsResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imageSummaryList:
          allOf:
          - $ref: '#/components/schemas/ImageSummaryList'
          description: The list of image build versions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListImagePackagesRequest:
      type: object
      properties:
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: Filter results for the ListImagePackages request by the Image
            Build Version ARN
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
      required:
      - imageBuildVersionArn
    ListImagePackagesResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imagePackageList:
          allOf:
          - $ref: '#/components/schemas/ImagePackageList'
          description: The list of Image Packages returned in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListImagePipelineImagesRequest:
      type: object
      properties:
        imagePipelineArn:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineArn'
          description: The Amazon Resource Name (ARN) of the image pipeline whose
            images you want to view.
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: "Use the following filters to streamline results:\n\n  * `name`\n\
            \n  * `version`"
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
      required:
      - imagePipelineArn
    ListImagePipelineImagesResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imageSummaryList:
          allOf:
          - $ref: '#/components/schemas/ImageSummaryList'
          description: The list of images built by this pipeline.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListImagePipelinesRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: "Use the following filters to streamline results:\n\n  * `description`\n\
            \n  * `distributionConfigurationArn`\n\n  * `imageRecipeArn`\n\n  * `infrastructureConfigurationArn`\n\
            \n  * `name`\n\n  * `status`"
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListImagePipelinesResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imagePipelineList:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineList'
          description: The list of image pipelines.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListImageRecipesRequest:
      type: object
      properties:
        owner:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: The owner defines which image recipes you want to list. By
            default, this request will only show image recipes owned by your account.
            You can use this field to specify if you want to view image recipes owned
            by yourself, by Amazon, or those image recipes that have been shared with
            you by other customers.
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: "Use the following filters to streamline results:\n\n  * `name`\n\
            \n  * `parentImage`\n\n  * `platform`"
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListImageRecipesResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imageRecipeSummaryList:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeSummaryList'
          description: The list of image pipelines.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListImageScanFindingAggregationsRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/Filter'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListImageScanFindingAggregationsResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        aggregationType:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: "The aggregation type specifies what type of key is used to\
            \ group the image scan findings. Image Builder returns results based on\
            \ the request filter. If you didn't specify a filter in the request, the\
            \ type defaults to `accountId`.\n\n**Aggregation types**\n\n  * accountId\n\
            \n  * imageBuildVersionArn\n\n  * imagePipelineArn\n\n  * vulnerabilityId\n\
            \nEach aggregation includes counts by severity level for medium severity\
            \ and higher level findings, plus a total for all of the findings for\
            \ each key value."
        responses:
          allOf:
          - $ref: '#/components/schemas/ImageScanFindingAggregationsList'
          description: An array of image scan finding aggregations that match the
            filter criteria.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListImageScanFindingsRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/ImageScanFindingsFilterList'
          description: "An array of name value pairs that you can use to filter your\
            \ results. You can use the following filters to streamline results:\n\n\
            \  * `imageBuildVersionArn`\n\n  * `imagePipelineArn`\n\n  * `vulnerabilityId`\n\
            \n  * `severity`\n\nIf you don't request a filter, then all findings in\
            \ your account are listed."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListImageScanFindingsResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        findings:
          allOf:
          - $ref: '#/components/schemas/ImageScanFindingsList'
          description: The image scan findings for your account that meet your request
            filter criteria.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListImagesRequest:
      type: object
      properties:
        owner:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: The owner defines which images you want to list. By default,
            this request will only show images owned by your account. You can use
            this field to specify if you want to view images owned by yourself, by
            Amazon, or those images that have been shared with you by other customers.
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: "Use the following filters to streamline results:\n\n  * `name`\n\
            \n  * `osVersion`\n\n  * `platform`\n\n  * `type`\n\n  * `version`"
        byName:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Requests a list of images with a specific recipe name.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
        includeDeprecated:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Includes deprecated images in the response list.
    ListImagesResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imageVersionList:
          allOf:
          - $ref: '#/components/schemas/ImageVersionList'
          description: 'The list of image semantic versions.


            The semantic version has four nodes: ../. You can assign values for the
            first three, and can filter on all of them.


            **Filtering:** With semantic versioning, you have the flexibility to use
            wildcards (x) to specify the most recent versions or nodes when selecting
            the base image or components for your recipe. When you use a wildcard
            in any node, all nodes to the right of the first wildcard must also be
            wildcards.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListInfrastructureConfigurationsRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: You can filter on `name` to streamline results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListInfrastructureConfigurationsResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        infrastructureConfigurationSummaryList:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationSummaryList'
          description: The list of infrastructure configurations.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListLifecycleExecutionResourcesRequest:
      type: object
      properties:
        lifecycleExecutionId:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionId'
          description: Use the unique identifier for a runtime instance of the lifecycle
            policy to get runtime details.
        parentResourceId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: 'You can leave this empty to get a list of Image Builder resources
            that were identified for lifecycle actions.


            To get a list of associated resources that are impacted for an individual
            resource (the parent), specify its Amazon Resource Name (ARN). Associated
            resources are produced from your image and distributed when you run a
            build, such as AMIs or container images stored in ECR repositories.'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
      required:
      - lifecycleExecutionId
    ListLifecycleExecutionResourcesResponse:
      type: object
      properties:
        lifecycleExecutionId:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionId'
          description: Runtime details for the specified runtime instance of the lifecycle
            policy.
        lifecycleExecutionState:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionState'
          description: The current state of the lifecycle runtime instance.
        resources:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionResourceList'
          description: A list of resources that were identified for lifecycle actions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListLifecycleExecutionsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the resource for which to
            get a list of lifecycle runtime instances.
      required:
      - resourceArn
    ListLifecycleExecutionsResponse:
      type: object
      properties:
        lifecycleExecutions:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionsList'
          description: A list of lifecycle runtime instances for the specified resource.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListLifecyclePoliciesRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: 'Streamline results based on one of the following values: `Name`,
            `Status`.'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListLifecyclePoliciesResponse:
      type: object
      properties:
        lifecyclePolicySummaryList:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicySummaryList'
          description: A list of lifecycle policies in your Amazon Web Services account
            that meet the criteria specified in the request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the resource whose tags you
            want to retrieve.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the specified resource.
    ListWaitingWorkflowStepsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListWaitingWorkflowStepsResponse:
      type: object
      properties:
        steps:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionList'
          description: An array of the workflow steps that are waiting for action
            in your Amazon Web Services account.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListWorkflowBuildVersionsRequest:
      type: object
      properties:
        workflowVersionArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowWildcardVersionArn'
          description: The Amazon Resource Name (ARN) of the workflow resource for
            which to get a list of build versions.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
      required:
      - workflowVersionArn
    ListWorkflowBuildVersionsResponse:
      type: object
      properties:
        workflowSummaryList:
          allOf:
          - $ref: '#/components/schemas/WorkflowSummaryList'
          description: A list that contains metadata for the workflow builds that
            have run for the workflow resource specified in the request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListWorkflowExecutionsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: List all workflow runtime instances for the specified image
            build version resource ARN.
      required:
      - imageBuildVersionArn
    ListWorkflowExecutionsResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        workflowExecutions:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionsList'
          description: Contains an array of runtime details that represents each time
            a workflow ran for the requested image build version.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The resource ARN of the image build version for which you requested
            a list of workflow runtime details.
        message:
          allOf:
          - $ref: '#/components/schemas/ImageBuildMessage'
          description: The output message from the list action, if applicable.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListWorkflowStepExecutionsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
        workflowExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionId'
          description: The unique identifier that Image Builder assigned to keep track
            of runtime details when it ran the workflow.
      required:
      - workflowExecutionId
    ListWorkflowStepExecutionsResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        steps:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionsList'
          description: Contains an array of runtime details that represents each step
            in this runtime instance of the workflow.
        workflowBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowBuildVersionArn'
          description: The build version ARN for the Image Builder workflow resource
            that defines the steps for this runtime instance of the workflow.
        workflowExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionId'
          description: The unique identifier that Image Builder assigned to keep track
            of runtime details when it ran the workflow.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The image build version resource ARN that's associated with
            the specified runtime instance of the workflow.
        message:
          allOf:
          - $ref: '#/components/schemas/ImageBuildMessage'
          description: The output message from the list action, if applicable.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    ListWorkflowsRequest:
      type: object
      properties:
        owner:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: Used to get a list of workflow build version filtered by the
            identity of the creator.
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: Used to streamline search results.
        byName:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specify all or part of the workflow name to streamline results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/RestrictedInteger'
          description: The maximum items to return in a request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token to specify where to start paginating. This is the nextToken
            from a previously truncated response.
    ListWorkflowsResponse:
      type: object
      properties:
        workflowVersionList:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionList'
          description: A list of workflow build versions that match the request criteria.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The next token used for paginated responses. When this field
            isn't empty, there are additional elements that the service hasn't included
            in this request. Use this token with the next request to retrieve additional
            objects.
    Logging:
      type: object
      properties:
        s3Logs:
          allOf:
          - $ref: '#/components/schemas/S3Logs'
          description: The Amazon S3 logging configuration.
      description: Logging configuration defines where Image Builder uploads your
        logs.
    MarketplaceResourceLocation:
      type: string
      pattern: ^s3://[^/]+/.+[^/]$
      minLength: 0
      maxLength: 1024
    MarketplaceResourceType:
      type: string
      enum:
      - COMPONENT_DATA
      - COMPONENT_ARTIFACT
    MaxParallelLaunches:
      type: integer
      minimum: 1
    NonEmptyString:
      type: string
      minLength: 1
      maxLength: 1024
    NonEmptyStringList:
      type: array
      items:
        $ref: '#/components/schemas/NonEmptyString'
    NonNegativeDouble:
      type: number
      format: double
      minimum: 0
    NullableBoolean:
      type: boolean
    OnWorkflowFailure:
      type: string
      enum:
      - CONTINUE
      - ABORT
    OrganizationArn:
      type: string
      pattern: ^arn:aws[^:]*:organizations::[0-9]{12}:organization/o-[a-z0-9]{10,32}$
    OrganizationArnList:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationArn'
    OrganizationalUnitArn:
      type: string
      pattern: ^arn:aws[^:]*:organizations::[0-9]{12}:ou/o-[a-z0-9]{10,32}/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}$
    OrganizationalUnitArnList:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationalUnitArn'
    OsVersion:
      type: string
      minLength: 1
    OsVersionList:
      type: array
      items:
        $ref: '#/components/schemas/OsVersion'
    OutputResources:
      type: object
      properties:
        amis:
          allOf:
          - $ref: '#/components/schemas/AmiList'
          description: The Amazon EC2 AMIs created by this image.
        containers:
          allOf:
          - $ref: '#/components/schemas/ContainerList'
          description: Container images that the pipeline has generated and stored
            in the output repository.
      description: The resources produced by this image.
    Ownership:
      type: string
      enum:
      - Self
      - Shared
      - Amazon
      - ThirdParty
      - AWSMarketplace
    PackageArchitecture:
      type: string
    PackageEpoch:
      type: integer
    PackageVulnerabilityDetails:
      type: object
      properties:
        vulnerabilityId:
          allOf:
          - $ref: '#/components/schemas/VulnerabilityId'
          description: A unique identifier for this vulnerability.
        vulnerablePackages:
          allOf:
          - $ref: '#/components/schemas/VulnerablePackageList'
          description: The packages that this vulnerability impacts.
        source:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The source of the vulnerability information.
        cvss:
          allOf:
          - $ref: '#/components/schemas/CvssScoreList'
          description: CVSS scores for one or more vulnerabilities that Amazon Inspector
            identified for a package.
        relatedVulnerabilities:
          allOf:
          - $ref: '#/components/schemas/VulnerabilityIdList'
          description: Vulnerabilities that are often related to the findings for
            the package.
        sourceUrl:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: A link to the source of the vulnerability information.
        vendorSeverity:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The severity that the vendor assigned to this vulnerability
            type.
        vendorCreatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The date and time when this vulnerability was first added to
            the vendor's database.
        vendorUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The date and time when the vendor last updated this vulnerability
            in their database.
        referenceUrls:
          allOf:
          - $ref: '#/components/schemas/NonEmptyStringList'
          description: Links to web pages that contain details about the vulnerabilities
            that Amazon Inspector identified for the package.
      required:
      - vulnerabilityId
      description: Information about package vulnerability findings.
    PaginationToken:
      type: string
      minLength: 1
      maxLength: 65535
    ParallelGroup:
      type: string
      pattern: ^[A-Za-z0-9][A-Za-z0-9-_+#]{0,99}$
      minLength: 1
      maxLength: 100
    PipelineExecutionStartCondition:
      type: string
      enum:
      - EXPRESSION_MATCH_ONLY
      - EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE
    PipelineStatus:
      type: string
      enum:
      - DISABLED
      - ENABLED
    Placement:
      type: object
      properties:
        availabilityZone:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The Availability Zone where your build and test instances will
            launch.
        tenancy:
          allOf:
          - $ref: '#/components/schemas/TenancyType'
          description: 'The tenancy of the instance. An instance with a tenancy of
            `dedicated` runs on single-tenant hardware. An instance with a tenancy
            of `host` runs on a Dedicated Host.


            If tenancy is set to `host`, then you can optionally specify one target
            for placement – either host ID or host resource group ARN. If automatic
            placement is enabled for your host, and you don''t specify any placement
            target, Amazon EC2 will try to find an available host for your build and
            test instances.'
        hostId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The ID of the Dedicated Host on which build and test instances
            run. This only applies if `tenancy` is `host`. If you specify the host
            ID, you must not specify the resource group ARN. If you specify both,
            Image Builder returns an error.
        hostResourceGroupArn:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The Amazon Resource Name (ARN) of the host resource group in
            which to launch build and test instances. This only applies if `tenancy`
            is `host`. If you specify the resource group ARN, you must not specify
            the host ID. If you specify both, Image Builder returns an error.
      description: By default, EC2 instances run on shared tenancy hardware. This
        means that multiple Amazon Web Services accounts might share the same physical
        hardware. When you use dedicated hardware, the physical server that hosts
        your instances is dedicated to your Amazon Web Services account. Instance
        placement settings contain the details for the physical hardware where instances
        that Image Builder launches during image creation will run.
    Platform:
      type: string
      enum:
      - Windows
      - Linux
      - macOS
    ProductCodeId:
      type: string
      pattern: ^[A-Za-z0-9]{1,25}$
    ProductCodeList:
      type: array
      items:
        $ref: '#/components/schemas/ProductCodeListItem'
    ProductCodeListItem:
      type: object
      properties:
        productCodeId:
          allOf:
          - $ref: '#/components/schemas/ProductCodeId'
          description: For Amazon Web Services Marketplace components, this contains
            the product code ID that can be stamped onto an EC2 AMI to ensure that
            components are billed correctly. If this property is empty, it might mean
            that the component is not published.
        productCodeType:
          allOf:
          - $ref: '#/components/schemas/ProductCodeType'
          description: The owner of the product code that's billed. If this property
            is empty, it might mean that the component is not published.
      required:
      - productCodeId
      - productCodeType
      description: Information about a single product code.
    ProductCodeType:
      type: string
      enum:
      - marketplace
    PutComponentPolicyRequest:
      type: object
      properties:
        componentArn:
          allOf:
          - $ref: '#/components/schemas/ComponentBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the component that this policy
            should be applied to.
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicyDocument'
          description: The policy to apply.
      required:
      - componentArn
      - policy
    PutComponentPolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        componentArn:
          allOf:
          - $ref: '#/components/schemas/ComponentBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the component that this policy
            was applied to.
    PutContainerRecipePolicyRequest:
      type: object
      properties:
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeArn'
          description: The Amazon Resource Name (ARN) of the container recipe that
            this policy should be applied to.
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicyDocument'
          description: The policy to apply to the container recipe.
      required:
      - containerRecipeArn
      - policy
    PutContainerRecipePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeArn'
          description: The Amazon Resource Name (ARN) of the container recipe that
            this policy was applied to.
    PutImagePolicyRequest:
      type: object
      properties:
        imageArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image that this policy
            should be applied to.
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicyDocument'
          description: The policy to apply.
      required:
      - imageArn
      - policy
    PutImagePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imageArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image that this policy
            was applied to.
    PutImageRecipePolicyRequest:
      type: object
      properties:
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeArn'
          description: The Amazon Resource Name (ARN) of the image recipe that this
            policy should be applied to.
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicyDocument'
          description: The policy to apply.
      required:
      - imageRecipeArn
      - policy
    PutImageRecipePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeArn'
          description: The Amazon Resource Name (ARN) of the image recipe that this
            policy was applied to.
    RegionList:
      type: array
      items:
        $ref: '#/components/schemas/NonEmptyString'
    Remediation:
      type: object
      properties:
        recommendation:
          allOf:
          - $ref: '#/components/schemas/RemediationRecommendation'
          description: An object that contains information about the recommended course
            of action to remediate the finding.
      description: Information about how to remediate a finding.
    RemediationRecommendation:
      type: object
      properties:
        text:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The recommended course of action to remediate the finding.
        url:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: A link to more information about the recommended remediation
            for this vulnerability.
      description: Details about the recommended course of action to remediate the
        finding.
    ResourceAlreadyExistsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The resource that you are trying to create already exists.
    ResourceDependencyException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You have attempted to mutate or delete a resource with a dependency
        that prohibits this action. See the error message for more details.
    ResourceInUseException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The resource that you are trying to operate on is currently in
        use. Review the message details and retry later.
    ResourceName:
      type: string
      pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: At least one of the resources referenced by your request does not
        exist.
    ResourcePolicyDocument:
      type: string
      minLength: 1
      maxLength: 30000
    ResourceState:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ResourceStatus'
          description: Shows the current lifecycle policy action that was applied
            to an impacted resource.
      description: The current state of an impacted resource.
    ResourceStateUpdateExclusionRules:
      type: object
      properties:
        amis:
          $ref: '#/components/schemas/LifecyclePolicyDetailExclusionRulesAmis'
      description: Additional rules to specify resources that should be exempt from
        ad-hoc lifecycle actions.
    ResourceStateUpdateIncludeResources:
      type: object
      properties:
        amis:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the lifecycle action should apply to distributed
            AMIs
        snapshots:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the lifecycle action should apply to snapshots
            associated with distributed AMIs.
        containers:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the lifecycle action should apply to distributed
            containers.
      description: Specifies if the lifecycle policy should apply actions to selected
        resources.
    ResourceStatus:
      type: string
      enum:
      - AVAILABLE
      - DELETED
      - DEPRECATED
      - DISABLED
    ResourceTagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    RestrictedInteger:
      type: integer
      minimum: 1
      maximum: 25
    RoleNameOrArn:
      type: string
      pattern: ^(?:arn:aws(?:-[a-z]+)*:iam::[0-9]{12}:role/)?[a-zA-Z_0-9+=,.@\-_/]+$
      minLength: 1
      maxLength: 2048
    S3ExportConfiguration:
      type: object
      properties:
        roleName:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The name of the role that grants VM Import/Export permission
            to export images to your S3 bucket.
        diskImageFormat:
          allOf:
          - $ref: '#/components/schemas/DiskImageFormat'
          description: "Export the updated image to one of the following supported\
            \ disk image formats:\n\n  * **Virtual Hard Disk (VHD)** – Compatible\
            \ with Citrix Xen and Microsoft Hyper-V virtualization products.\n\n \
            \ * **Stream-optimized ESX Virtual Machine Disk (VMDK)** – Compatible\
            \ with VMware ESX and VMware vSphere versions 4, 5, and 6.\n\n  * **Raw**\
            \ – Raw format."
        s3Bucket:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The S3 bucket in which to store the output disk images for
            your VM.
        s3Prefix:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The Amazon S3 path for the bucket where the output disk images
            for your VM are stored.
      required:
      - roleName
      - diskImageFormat
      - s3Bucket
      description: Properties that configure export from your build instance to a
        compatible file format for your VM.
    S3Logs:
      type: object
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The S3 bucket in which to store the logs.
        s3KeyPrefix:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The Amazon S3 path to the bucket where the logs are stored.
      description: Amazon S3 logging configuration.
    Schedule:
      type: object
      properties:
        scheduleExpression:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: 'The cron expression determines how often EC2 Image Builder
            evaluates your `pipelineExecutionStartCondition`.


            For information on how to format a cron expression in Image Builder, see
            [Use cron expressions in EC2 Image Builder](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-builder-cron.html).'
        timezone:
          allOf:
          - $ref: '#/components/schemas/Timezone'
          description: The timezone that applies to the scheduling expression. For
            example, "Etc/UTC", "America/Los_Angeles" in the [IANA timezone format](https://www.joda.org/joda-time/timezones.html).
            If not specified this defaults to UTC.
        pipelineExecutionStartCondition:
          allOf:
          - $ref: '#/components/schemas/PipelineExecutionStartCondition'
          description: "The start condition configures when the pipeline should trigger\
            \ a new image build, as follows. If no value is set Image Builder defaults\
            \ to `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE`.\n\n  * `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE`\
            \ (default) – When you use semantic version filters on the base image\
            \ or components in your image recipe, EC2 Image Builder builds a new image\
            \ only when there are new versions of the base image or components in\
            \ your recipe that match the filter.\n\nFor semantic version syntax, see\
            \ [CreateComponent](https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_CreateComponent.html).\n\
            \n  * `EXPRESSION_MATCH_ONLY` – This condition builds a new image every\
            \ time the CRON expression matches the current time."
      description: A schedule configures when and how often a pipeline will automatically
        create a new image.
    SecurityGroupIds:
      type: array
      items:
        $ref: '#/components/schemas/NonEmptyString'
    SendWorkflowStepActionRequest:
      type: object
      properties:
        stepExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionId'
          description: Uniquely identifies the workflow step that sent the step action.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image build version to
            send action for.
        action:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepActionType'
          description: The action for the image creation process to take while a workflow
            `WaitForAction` step waits for an asynchronous action to complete.
        reason:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The reason why this action is sent.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - stepExecutionId
      - imageBuildVersionArn
      - action
      - clientToken
    SendWorkflowStepActionResponse:
      type: object
      properties:
        stepExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionId'
          description: The workflow step that sent the step action.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image build version that
            received the action request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
    ServiceException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: This exception is thrown when the service encounters an unrecoverable
        exception.
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You have exceeded the number of permitted resources or operations
        for this service. For service quotas, see [EC2 Image Builder endpoints and
        quotas](https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder).
    ServiceUnavailableException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The service is unable to process your request at this time.
    SeverityCountNumber:
      type: integer
      format: int64
    SeverityCounts:
      type: object
      properties:
        all:
          allOf:
          - $ref: '#/components/schemas/SeverityCountNumber'
          description: The total number of findings across all severity levels for
            the specified filter.
        critical:
          allOf:
          - $ref: '#/components/schemas/SeverityCountNumber'
          description: The number of critical severity findings for the specified
            filter.
        high:
          allOf:
          - $ref: '#/components/schemas/SeverityCountNumber'
          description: The number of high severity findings for the specified filter.
        medium:
          allOf:
          - $ref: '#/components/schemas/SeverityCountNumber'
          description: The number of medium severity findings for the specified filter.
      description: Includes counts by severity level for medium severity and higher
        level findings, plus a total for all of the findings for the specified filter.
    SnsTopicArn:
      type: string
      pattern: ^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$
    SourceLayerHash:
      type: string
    SsmParameterConfiguration:
      type: object
      properties:
        amiAccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: Specify the account that will own the Parameter in a given
            Region. During distribution, this account must be specified in distribution
            settings as a target account for the Region.
        parameterName:
          allOf:
          - $ref: '#/components/schemas/SsmParameterName'
          description: This is the name of the Parameter in the target Region or account.
            The image distribution creates the Parameter if it doesn't already exist.
            Otherwise, it updates the parameter.
        dataType:
          allOf:
          - $ref: '#/components/schemas/SsmParameterDataType'
          description: The data type specifies what type of value the Parameter contains.
            We recommend that you use data type `aws:ec2:image`.
      required:
      - parameterName
      description: Configuration for a single Parameter in the Amazon Web Services
        Systems Manager (SSM) Parameter Store in a given Region.
    SsmParameterConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/SsmParameterConfiguration'
    SsmParameterDataType:
      type: string
      enum:
      - text
      - aws:ec2:image
    SsmParameterName:
      type: string
      pattern: ^[a-zA-Z0-9_.\-\/]+$
      minLength: 1
      maxLength: 1011
    StartImagePipelineExecutionRequest:
      type: object
      properties:
        imagePipelineArn:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineArn'
          description: The Amazon Resource Name (ARN) of the image pipeline that you
            want to manually invoke.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - imagePipelineArn
      - clientToken
    StartImagePipelineExecutionResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image that the request
            created.
    StartResourceStateUpdateRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The ARN of the Image Builder resource that is updated. The
            state update might also impact associated resources.
        state:
          allOf:
          - $ref: '#/components/schemas/ResourceState'
          description: Indicates the lifecycle action to take for this request.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) of the IAM role that’s
            used to update image state.
        includeResources:
          allOf:
          - $ref: '#/components/schemas/ResourceStateUpdateIncludeResources'
          description: A list of image resources to update state for.
        exclusionRules:
          allOf:
          - $ref: '#/components/schemas/ResourceStateUpdateExclusionRules'
          description: Skip action on the image resource and associated resources
            if specified exclusion rules are met.
        updateAt:
          allOf:
          - $ref: '#/components/schemas/DateTimeTimestamp'
          description: The timestamp that indicates when resources are updated by
            a lifecycle action.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - resourceArn
      - state
      - clientToken
    StartResourceStateUpdateResponse:
      type: object
      properties:
        lifecycleExecutionId:
          allOf:
          - $ref: '#/components/schemas/LifecycleExecutionId'
          description: Identifies the lifecycle runtime instance that started the
            resource state update.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The requested ARN of the Image Builder resource for the asynchronous
            update.
    StringList:
      type: array
      items:
        $ref: '#/components/schemas/NonEmptyString'
    SystemsManagerAgent:
      type: object
      properties:
        uninstallAfterBuild:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Controls whether the Systems Manager agent is removed from
            your final build image, prior to creating the new AMI. If this is set
            to true, then the agent is removed from the final image. If it's set to
            false, then the agent is left in, so that it is included in the new AMI.
            The default value is false.
      description: Contains settings for the Systems Manager agent on your build instance.
    TagKey:
      type: string
      pattern: ^(?!aws:)[a-zA-Z+-=._:/]+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to tag.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags to apply to the resource.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TargetContainerRepository:
      type: object
      properties:
        service:
          allOf:
          - $ref: '#/components/schemas/ContainerRepositoryService'
          description: Specifies the service in which this image was registered.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The name of the container repository where the output container
            image is stored. This name is prefixed by the repository location. For
            example, `/repository_name`.
      required:
      - service
      - repositoryName
      description: The container repository where the output container image is stored.
    TargetResourceCount:
      type: integer
      minimum: 1
      maximum: 10000
    TenancyType:
      type: string
      enum:
      - default
      - dedicated
      - host
    Timezone:
      type: string
      pattern: ^[a-zA-Z0-9]{2,}(?:\/[a-zA-Z0-9-_+]+)*$
      minLength: 3
      maxLength: 100
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuilderArn'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to untag.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The tag keys to remove from the resource.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateDistributionConfigurationRequest:
      type: object
      properties:
        distributionConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/DistributionConfigurationArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration
            that you want to update.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the distribution configuration.
        distributions:
          allOf:
          - $ref: '#/components/schemas/DistributionList'
          description: The distributions of the distribution configuration.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - distributionConfigurationArn
      - distributions
      - clientToken
    UpdateDistributionConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        distributionConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/DistributionConfigurationArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration
            that was updated by this request.
    UpdateImagePipelineRequest:
      type: object
      properties:
        imagePipelineArn:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineArn'
          description: The Amazon Resource Name (ARN) of the image pipeline that you
            want to update.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the image pipeline.
        imageRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ImageRecipeArn'
          description: The Amazon Resource Name (ARN) of the image recipe that will
            be used to configure images updated by this image pipeline.
        containerRecipeArn:
          allOf:
          - $ref: '#/components/schemas/ContainerRecipeArn'
          description: The Amazon Resource Name (ARN) of the container pipeline to
            update.
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            that Image Builder uses to build images that this image pipeline has updated.
        distributionConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/DistributionConfigurationArn'
          description: The Amazon Resource Name (ARN) of the distribution configuration
            that Image Builder uses to configure and distribute images that this image
            pipeline has updated.
        imageTestsConfiguration:
          allOf:
          - $ref: '#/components/schemas/ImageTestsConfiguration'
          description: The image test configuration of the image pipeline.
        enhancedImageMetadataEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Collects additional information about the image being created,
            including the operating system (OS) version and package list. This information
            is used to enhance the overall experience of using EC2 Image Builder.
            Enabled by default.
        schedule:
          allOf:
          - $ref: '#/components/schemas/Schedule'
          description: The schedule of the image pipeline.
        status:
          allOf:
          - $ref: '#/components/schemas/PipelineStatus'
          description: The status of the image pipeline.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
        imageScanningConfiguration:
          allOf:
          - $ref: '#/components/schemas/ImageScanningConfiguration'
          description: Contains settings for vulnerability scans.
        workflows:
          allOf:
          - $ref: '#/components/schemas/WorkflowConfigurationList'
          description: Contains the workflows to run for the pipeline.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) for the IAM role you
            create that grants Image Builder access to perform workflow actions.
      required:
      - imagePipelineArn
      - infrastructureConfigurationArn
      - clientToken
    UpdateImagePipelineResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        imagePipelineArn:
          allOf:
          - $ref: '#/components/schemas/ImagePipelineArn'
          description: The Amazon Resource Name (ARN) of the image pipeline that was
            updated by this request.
    UpdateInfrastructureConfigurationRequest:
      type: object
      properties:
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            that you want to update.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the infrastructure configuration.
        instanceTypes:
          allOf:
          - $ref: '#/components/schemas/InstanceTypeList'
          description: The instance types of the infrastructure configuration. You
            can specify one or more instance types to use for this build. The service
            will pick one of these instance types based on availability.
        instanceProfileName:
          allOf:
          - $ref: '#/components/schemas/InstanceProfileNameType'
          description: The instance profile to associate with the instance used to
            customize your Amazon EC2 AMI.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIds'
          description: The security group IDs to associate with the instance used
            to customize your Amazon EC2 AMI.
        subnetId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The subnet ID to place the instance used to customize your
            Amazon EC2 AMI in.
        logging:
          allOf:
          - $ref: '#/components/schemas/Logging'
          description: The logging configuration of the infrastructure configuration.
        keyPair:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The key pair of the infrastructure configuration. You can use
            this to log on to and debug the instance used to create your image.
        terminateInstanceOnFailure:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: The terminate instance on failure setting of the infrastructure
            configuration. Set to false if you want Image Builder to retain the instance
            used to configure your AMI if the build or test phase of your workflow
            fails.
        snsTopicArn:
          allOf:
          - $ref: '#/components/schemas/SnsTopicArn'
          description: 'The Amazon Resource Name (ARN) for the SNS topic to which
            we send image build event notifications.


            EC2 Image Builder is unable to send notifications to SNS topics that are
            encrypted using keys from other accounts. The key that is used to encrypt
            the SNS topic must reside in the account that the Image Builder service
            runs under.'
        resourceTags:
          allOf:
          - $ref: '#/components/schemas/ResourceTagMap'
          description: The tags attached to the resource created by Image Builder.
        instanceMetadataOptions:
          allOf:
          - $ref: '#/components/schemas/InstanceMetadataOptions'
          description: "The instance metadata options that you can set for the HTTP\
            \ requests that pipeline builds use to launch EC2 build and test instances.\
            \ For more information about instance metadata options, see one of the\
            \ following links:\n\n  * [Configure the instance metadata options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html)\
            \ in the __Amazon EC2 User Guide_ _ for Linux instances.\n\n  * [Configure\
            \ the instance metadata options](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html)\
            \ in the __Amazon EC2 Windows Guide_ _ for Windows instances."
        placement:
          allOf:
          - $ref: '#/components/schemas/Placement'
          description: The instance placement settings that define where the instances
            that are launched from your image will run.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - infrastructureConfigurationArn
      - instanceProfileName
      - clientToken
    UpdateInfrastructureConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token that uniquely identifies the request.
        infrastructureConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/InfrastructureConfigurationArn'
          description: The Amazon Resource Name (ARN) of the infrastructure configuration
            that was updated by this request.
    UpdateLifecyclePolicyRequest:
      type: object
      properties:
        lifecyclePolicyArn:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyArn'
          description: The Amazon Resource Name (ARN) of the lifecycle policy resource.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Optional description for the lifecycle policy.
        status:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyStatus'
          description: Indicates whether the lifecycle policy resource is enabled.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/RoleNameOrArn'
          description: The name or Amazon Resource Name (ARN) of the IAM role that
            Image Builder uses to update the lifecycle policy.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyResourceType'
          description: The type of image resource that the lifecycle policy applies
            to.
        policyDetails:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyDetails'
          description: The configuration details for a lifecycle policy resource.
        resourceSelection:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyResourceSelection'
          description: Selection criteria for resources that the lifecycle policy
            applies to.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier you provide to ensure idempotency
            of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
            in the _Amazon EC2 API Reference_.
      required:
      - lifecyclePolicyArn
      - executionRole
      - resourceType
      - policyDetails
      - resourceSelection
      - clientToken
    UpdateLifecyclePolicyResponse:
      type: object
      properties:
        lifecyclePolicyArn:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicyArn'
          description: The ARN of the image lifecycle policy resource that was updated.
    Uri:
      type: string
    UserDataOverride:
      type: string
      pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
      minLength: 1
      maxLength: 21847
    VersionNumber:
      type: string
      pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
    VulnerabilityId:
      type: string
    VulnerabilityIdAggregation:
      type: object
      properties:
        vulnerabilityId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The vulnerability Id for this set of counts.
        severityCounts:
          allOf:
          - $ref: '#/components/schemas/SeverityCounts'
          description: Counts by severity level for medium severity and higher level
            findings, plus a total for all of the findings for the specified vulnerability.
      description: Includes counts of image and pipeline resource findings by vulnerability.
    VulnerabilityIdList:
      type: array
      items:
        $ref: '#/components/schemas/VulnerabilityId'
    VulnerablePackage:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The name of the vulnerable package.
        version:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The version of the vulnerable package.
        sourceLayerHash:
          allOf:
          - $ref: '#/components/schemas/SourceLayerHash'
          description: The source layer hash of the vulnerable package.
        epoch:
          allOf:
          - $ref: '#/components/schemas/PackageEpoch'
          description: The epoch of the vulnerable package.
        release:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The release of the vulnerable package.
        arch:
          allOf:
          - $ref: '#/components/schemas/PackageArchitecture'
          description: The architecture of the vulnerable package.
        packageManager:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The package manager of the vulnerable package.
        filePath:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The file path of the vulnerable package.
        fixedInVersion:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The version of the package that contains the vulnerability
            fix.
        remediation:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The code to run in your environment to update packages with
            a fix available.
      description: Information about a vulnerable package that Amazon Inspector identifies
        in a finding.
    VulnerablePackageList:
      type: array
      items:
        $ref: '#/components/schemas/VulnerablePackage'
    Workflow:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the workflow resource.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the workflow resource.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: The workflow resource version. Workflow resources are immutable.
            To make a change, you can clone a workflow or create a new version.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the workflow.
        changeDescription:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Describes what change has been made in this version of the
            workflow, or what makes this version different from other versions of
            the workflow.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: Specifies the image creation stage that the workflow applies
            to. Image Builder currently supports build and test workflows.
        state:
          allOf:
          - $ref: '#/components/schemas/WorkflowState'
          description: Describes the current status of the workflow and the reason
            for that status.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the workflow resource.
        data:
          allOf:
          - $ref: '#/components/schemas/WorkflowData'
          description: Contains the YAML document content for the workflow.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The KMS key identifier used to encrypt the workflow resource.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when Image Builder created the workflow resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that apply to the workflow resource
        parameters:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterDetailList'
          description: An array of input parameters that that the image workflow uses
            to control actions or configure settings.
      description: Defines a process that Image Builder uses to build and test images
        during the image creation process.
    WorkflowBuildVersionArn:
      type: string
      pattern: ^arn:aws(?:-[a-z]+)*:imagebuilder:[a-z]{2,}(?:-[a-z]+)+-[0-9]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):workflow/(build|test|distribution)/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
      minLength: 0
      maxLength: 1024
    WorkflowConfiguration:
      type: object
      properties:
        workflowArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionArnOrBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the workflow resource.
        parameters:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterList'
          description: Contains parameter values for each of the parameters that the
            workflow document defined for the workflow resource.
        parallelGroup:
          allOf:
          - $ref: '#/components/schemas/ParallelGroup'
          description: Test workflows are defined within named runtime groups called
            parallel groups. The parallel group is the named group that contains this
            test workflow. Test workflows within a parallel group can run at the same
            time. Image Builder starts up to five test workflows in the group at the
            same time, and starts additional workflows as others complete, until all
            workflows in the group have completed. This field only applies for test
            workflows.
        onFailure:
          allOf:
          - $ref: '#/components/schemas/OnWorkflowFailure'
          description: The action to take if the workflow fails.
      required:
      - workflowArn
      description: Contains control settings and configurable inputs for a workflow
        resource.
    WorkflowConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowConfiguration'
    WorkflowData:
      type: string
    WorkflowExecutionId:
      type: string
      pattern: ^wf-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    WorkflowExecutionMessage:
      type: string
      minLength: 0
      maxLength: 500
    WorkflowExecutionMetadata:
      type: object
      properties:
        workflowBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the workflow resource build
            version that ran.
        workflowExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionId'
          description: Unique identifier that Image Builder assigns to keep track
            of runtime resources each time it runs a workflow.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: Indicates what type of workflow that Image Builder ran for
            this runtime instance of the workflow.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionStatus'
          description: The current runtime status for this workflow.
        message:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionMessage'
          description: The runtime output message from the workflow, if applicable.
        totalStepCount:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepCount'
          description: The total number of steps in the workflow. This should equal
            the sum of the step counts for steps that succeeded, were skipped, and
            failed.
        totalStepsSucceeded:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepCount'
          description: A runtime count for the number of steps in the workflow that
            ran successfully.
        totalStepsFailed:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepCount'
          description: A runtime count for the number of steps in the workflow that
            failed.
        totalStepsSkipped:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepCount'
          description: A runtime count for the number of steps in the workflow that
            were skipped.
        startTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when the runtime instance of this workflow started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when this runtime instance of the workflow finished.
        parallelGroup:
          allOf:
          - $ref: '#/components/schemas/ParallelGroup'
          description: The name of the test group that included the test workflow
            resource at runtime.
      description: Metadata that includes details and status from this runtime instance
        of the workflow.
    WorkflowExecutionStatus:
      type: string
      enum:
      - PENDING
      - SKIPPED
      - RUNNING
      - COMPLETED
      - FAILED
      - ROLLBACK_IN_PROGRESS
      - ROLLBACK_COMPLETED
      - CANCELLED
    WorkflowExecutionsList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowExecutionMetadata'
    WorkflowNameArn:
      type: string
      pattern: ^arn:aws(?:-[a-z]+)*:imagebuilder:[a-z]{2,}(?:-[a-z]+)+-[0-9]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):workflow/(build|test|distribution)/[a-z0-9-_]+/x\.x\.x$
    WorkflowParameter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterName'
          description: The name of the workflow parameter to set.
        value:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterValueList'
          description: Sets the value for the named workflow parameter.
      required:
      - name
      - value
      description: Contains a key/value pair that sets the named workflow parameter.
    WorkflowParameterDescription:
      type: string
      pattern: ^[^\x00]+$
      minLength: 0
      maxLength: 1024
    WorkflowParameterDetail:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterName'
          description: The name of this input parameter.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterType'
          description: The type of input this parameter provides. The currently supported
            value is "string".
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterValueList'
          description: The default value of this parameter if no input is provided.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterDescription'
          description: Describes this parameter.
      required:
      - name
      - type
      description: Defines a parameter that's used to provide configuration details
        for the workflow.
    WorkflowParameterDetailList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowParameterDetail'
    WorkflowParameterList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowParameter'
    WorkflowParameterName:
      type: string
      pattern: ^[^\x00]+$
      minLength: 1
      maxLength: 128
    WorkflowParameterType:
      type: string
      pattern: ^string|integer|boolean|stringList$
      minLength: 1
      maxLength: 20
    WorkflowParameterValue:
      type: string
      pattern: ^[^\x00]*$
      minLength: 0
    WorkflowParameterValueList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowParameterValue'
    WorkflowState:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatus'
          description: The current state of the workflow.
        reason:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Describes how or why the workflow changed state.
      description: A group of fields that describe the current status of workflow.
    WorkflowStatus:
      type: string
      enum:
      - DEPRECATED
    WorkflowStepAction:
      type: string
      pattern: ^[A-Za-z][A-Za-z0-9-_]{1,99}$
    WorkflowStepActionType:
      type: string
      enum:
      - RESUME
      - STOP
    WorkflowStepCount:
      type: integer
      default: 0
    WorkflowStepDescription:
      type: string
      minLength: 0
      maxLength: 500
    WorkflowStepExecution:
      type: object
      properties:
        stepExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionId'
          description: Uniquely identifies the workflow step that ran for the associated
            image build version.
        imageBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/ImageBuildVersionArn'
          description: The Amazon Resource Name (ARN) of the image build version that
            ran the workflow.
        workflowExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowExecutionId'
          description: Uniquely identifies the runtime instance of the workflow that
            contains the workflow step that ran for the associated image build version.
        workflowBuildVersionArn:
          allOf:
          - $ref: '#/components/schemas/WorkflowBuildVersionArn'
          description: The ARN of the workflow resource that ran.
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepName'
          description: The name of the workflow step.
        action:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepAction'
          description: The name of the step action.
        startTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when the workflow step started.
      description: Contains runtime details for an instance of a workflow that ran
        for the associated image build version.
    WorkflowStepExecutionId:
      type: string
      pattern: ^step-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    WorkflowStepExecutionList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowStepExecution'
    WorkflowStepExecutionRollbackStatus:
      type: string
      enum:
      - RUNNING
      - COMPLETED
      - SKIPPED
      - FAILED
    WorkflowStepExecutionStatus:
      type: string
      enum:
      - PENDING
      - SKIPPED
      - RUNNING
      - COMPLETED
      - FAILED
      - CANCELLED
    WorkflowStepExecutionsList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowStepMetadata'
    WorkflowStepInputs:
      type: string
    WorkflowStepMessage:
      type: string
      minLength: 0
      maxLength: 500
    WorkflowStepMetadata:
      type: object
      properties:
        stepExecutionId:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionId'
          description: A unique identifier for the workflow step, assigned at runtime.
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepName'
          description: The name of the workflow step.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepDescription'
          description: Description of the workflow step.
        action:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepAction'
          description: The step action name.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionStatus'
          description: Runtime status for the workflow step.
        rollbackStatus:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepExecutionRollbackStatus'
          description: Reports on the rollback status of the step, if applicable.
        message:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepMessage'
          description: Detailed output message that the workflow step provides at
            runtime.
        inputs:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepInputs'
          description: Input parameters that Image Builder provides for the workflow
            step.
        outputs:
          allOf:
          - $ref: '#/components/schemas/WorkflowStepOutputs'
          description: The file names that the workflow step created as output for
            this runtime instance of the workflow.
        startTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when the workflow step started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when the workflow step finished.
      description: Runtime details and status for the workflow step.
    WorkflowStepName:
      type: string
      pattern: ^[A-Za-z][A-Za-z0-9-_]{1,99}$
    WorkflowStepOutputs:
      type: string
    WorkflowStepTimeoutSecondsInteger:
      type: integer
      minimum: 0
      maximum: 43200
    WorkflowSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowNameArn'
          description: The Amazon Resource Name (ARN) of the workflow resource.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the workflow.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: The version of the workflow.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Describes the workflow.
        changeDescription:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The change description for the current version of the workflow
            resource.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The image creation stage that this workflow applies to. Image
            Builder currently supports build and test stage workflows.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the workflow resource.
        state:
          allOf:
          - $ref: '#/components/schemas/WorkflowState'
          description: Describes the current state of the workflow resource.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The original creation date of the workflow resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Contains a list of tags that are defined for the workflow.
      description: Contains metadata about the workflow resource.
    WorkflowSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowSummary'
    WorkflowType:
      type: string
      enum:
      - BUILD
      - TEST
      - DISTRIBUTION
    WorkflowVersion:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionArn'
          description: The Amazon Resource Name (ARN) of the workflow resource.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the workflow.
        version:
          allOf:
          - $ref: '#/components/schemas/VersionNumber'
          description: 'The semantic version of the workflow resource. The format
            includes three nodes: ...'
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Describes the workflow.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The image creation stage that this workflow applies to. Image
            Builder currently supports build and test stage workflows.
        owner:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The owner of the workflow resource.
        dateCreated:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp when Image Builder created the workflow version.
      description: Contains details about this version of the workflow.
    WorkflowVersionArn:
      type: string
      pattern: ^arn:aws(?:-[a-z]+)*:imagebuilder:[a-z]{2,}(?:-[a-z]+)+-[0-9]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):workflow/(build|test|distribution)/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    WorkflowVersionArnOrBuildVersionArn:
      type: string
      pattern: ^arn:aws(?:-[a-z]+)*:imagebuilder:[a-z]{2,}(?:-[a-z]+)+-[0-9]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):workflow/(build|test|distribution)/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$
    WorkflowVersionList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowVersion'
    WorkflowWildcardVersionArn:
      type: string
      pattern: ^arn:aws(?:-[a-z]+)*:imagebuilder:[a-z]{2,}(?:-[a-z]+)+-[0-9]+:(?:[0-9]{12}|aws(?:-[a-z-]+)?):workflow/(build|test|distribution)/[a-z0-9-_]+/(?:[0-9]+|x)\.(?:[0-9]+|x)\.(?:[0-9]+|x)$
