openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: managedblockchain
  x-aws-serviceName: managedblockchain
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-09-24'
  title: Amazon Managed Blockchain
  description: |-
    Amazon Managed Blockchain is a fully managed service for creating and managing blockchain networks using open-source frameworks. Blockchain allows you to build applications where multiple parties can securely and transparently run transactions and share data without the need for a trusted, central authority.

    Managed Blockchain supports the Hyperledger Fabric and Ethereum open-source frameworks. Because of fundamental differences between the frameworks, some API actions or data types may only apply in the context of one framework and not the other. For example, actions related to Hyperledger Fabric network members such as `CreateMember` and `DeleteMember` don't apply to Ethereum.

    The description for each action indicates the framework or frameworks to which it applies. Data types and properties that apply only in the context of a particular framework are similarly indicated.
servers:
- description: The Amazon Managed Blockchain regional endpoint
  url: https://managedblockchain.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /accessors:
    post:
      operationId: CreateAccessor
      description: |-
        Creates a new accessor for use with Amazon Managed Blockchain service that supports token based access. The accessor contains information required for token based access.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ClientRequestToken:
                  $ref: '#/components/schemas/ClientRequestTokenString'
                AccessorType:
                  $ref: '#/components/schemas/AccessorType'
                Tags:
                  $ref: '#/components/schemas/InputTagMap'
                NetworkType:
                  $ref: '#/components/schemas/AccessorNetworkType'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '409':
          description: |-
            A resource request is issued for a resource that already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListAccessors
      description: |-
        Returns a list of the accessors and their properties. Accessor objects are containers that have the information required for token based access to your Ethereum nodes.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccessorListMaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: networkType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccessorNetworkType'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /networks/{NetworkId}/members:
    post:
      operationId: CreateMember
      description: |-
        Creates a member within a Managed Blockchain network.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ClientRequestToken:
                  $ref: '#/components/schemas/ClientRequestTokenString'
                InvitationId:
                  $ref: '#/components/schemas/ResourceIdString'
                MemberConfiguration:
                  $ref: '#/components/schemas/MemberConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '409':
          description: |-
            The requested resource exists but isn't in a status that can complete the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotReadyException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
    get:
      operationId: ListMembers
      description: |-
        Returns a list of the members in a network and properties of their configurations.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MemberStatus'
      - name: isOwned
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IsOwned'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MemberListMaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /networks:
    post:
      operationId: CreateNetwork
      description: |-
        Creates a new blockchain network using Amazon Managed Blockchain.

        Applies only to Hyperledger Fabric.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ClientRequestToken:
                  $ref: '#/components/schemas/ClientRequestTokenString'
                Name:
                  $ref: '#/components/schemas/NameString'
                Description:
                  $ref: '#/components/schemas/DescriptionString'
                Framework:
                  $ref: '#/components/schemas/Framework'
                FrameworkVersion:
                  $ref: '#/components/schemas/FrameworkVersionString'
                FrameworkConfiguration:
                  $ref: '#/components/schemas/NetworkFrameworkConfiguration'
                VotingPolicy:
                  $ref: '#/components/schemas/VotingPolicy'
                MemberConfiguration:
                  $ref: '#/components/schemas/MemberConfiguration'
                Tags:
                  $ref: '#/components/schemas/InputTagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '409':
          description: |-
            A resource request is issued for a resource that already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListNetworks
      description: |-
        Returns information about the networks in which the current Amazon Web Services account participates.

        Applies to Hyperledger Fabric and Ethereum.
      parameters:
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: framework
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Framework'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NetworkStatus'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NetworkListMaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /networks/{NetworkId}/nodes:
    post:
      operationId: CreateNode
      description: |-
        Creates a node on the specified blockchain network.

        Applies to Hyperledger Fabric and Ethereum.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ClientRequestToken:
                  $ref: '#/components/schemas/ClientRequestTokenString'
                MemberId:
                  $ref: '#/components/schemas/ResourceIdString'
                NodeConfiguration:
                  $ref: '#/components/schemas/NodeConfiguration'
                Tags:
                  $ref: '#/components/schemas/InputTagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '409':
          description: |-
            The requested resource exists but isn't in a status that can complete the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotReadyException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
    get:
      operationId: ListNodes
      description: |-
        Returns information about the nodes within a network.

        Applies to Hyperledger Fabric and Ethereum.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: memberId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NodeStatus'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NodeListMaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /networks/{NetworkId}/proposals:
    post:
      operationId: CreateProposal
      description: |-
        Creates a proposal for a change to the network that other members of the network can vote on, for example, a proposal to add a new member to the network. Any member can create a proposal.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ClientRequestToken:
                  $ref: '#/components/schemas/ClientRequestTokenString'
                MemberId:
                  $ref: '#/components/schemas/ResourceIdString'
                Actions:
                  $ref: '#/components/schemas/ProposalActions'
                Description:
                  $ref: '#/components/schemas/DescriptionString'
                Tags:
                  $ref: '#/components/schemas/InputTagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '409':
          description: |-
            The requested resource exists but isn't in a status that can complete the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotReadyException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListProposals
      description: |-
        Returns a list of proposals for the network.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProposalListMaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /accessors/{AccessorId}:
    delete:
      operationId: DeleteAccessor
      description: |-
        Deletes an accessor that your Amazon Web Services account owns. An accessor object is a container that has the information required for token based access to your Ethereum nodes including, the `BILLING_TOKEN`. After an accessor is deleted, the status of the accessor changes from `AVAILABLE` to `PENDING_DELETION`. An accessor in the `PENDING_DELETION` state can’t be used for new WebSocket requests or HTTP requests. However, WebSocket connections that were initiated while the accessor was in the `AVAILABLE` state remain open until they expire (up to 2 hours).
      parameters:
      - name: AccessorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetAccessor
      description: |-
        Returns detailed information about an accessor. An accessor object is a container that has the information required for token based access to your Ethereum nodes.
      parameters:
      - name: AccessorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /networks/{NetworkId}/members/{MemberId}:
    delete:
      operationId: DeleteMember
      description: |-
        Deletes a member. Deleting a member removes the member and all associated resources from the network. `DeleteMember` can only be called for a specified `MemberId` if the principal performing the action is associated with the Amazon Web Services account that owns the member. In all other cases, the `DeleteMember` action is carried out as the result of an approved proposal to remove a member. If `MemberId` is the last member in a network specified by the last Amazon Web Services account, the network is deleted also.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: MemberId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '409':
          description: |-
            The requested resource exists but isn't in a status that can complete the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotReadyException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetMember
      description: |-
        Returns detailed information about a member.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: MemberId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    patch:
      operationId: UpdateMember
      description: |-
        Updates a member configuration with new parameters.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: MemberId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                LogPublishingConfiguration:
                  $ref: '#/components/schemas/MemberLogPublishingConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /networks/{NetworkId}/nodes/{NodeId}:
    delete:
      operationId: DeleteNode
      description: |-
        Deletes a node that your Amazon Web Services account owns. All data on the node is lost and cannot be recovered.

        Applies to Hyperledger Fabric and Ethereum.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: memberId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: NodeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '409':
          description: |-
            The requested resource exists but isn't in a status that can complete the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotReadyException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetNode
      description: |-
        Returns detailed information about a node.

        Applies to Hyperledger Fabric and Ethereum.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: memberId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: NodeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    patch:
      operationId: UpdateNode
      description: |-
        Updates a node configuration with new parameters.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: NodeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                MemberId:
                  $ref: '#/components/schemas/ResourceIdString'
                LogPublishingConfiguration:
                  $ref: '#/components/schemas/NodeLogPublishingConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /networks/{NetworkId}:
    get:
      operationId: GetNetwork
      description: |-
        Returns detailed information about a network.

        Applies to Hyperledger Fabric and Ethereum.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /networks/{NetworkId}/proposals/{ProposalId}:
    get:
      operationId: GetProposal
      description: |-
        Returns detailed information about a proposal.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: ProposalId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /invitations:
    get:
      operationId: ListInvitations
      description: |-
        Returns a list of all invitations for the current Amazon Web Services account.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProposalListMaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /networks/{NetworkId}/proposals/{ProposalId}/votes:
    get:
      operationId: ListProposalVotes
      description: |-
        Returns the list of votes for a specified proposal, including the value of each vote and the unique identifier of the member that cast the vote.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: ProposalId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProposalListMaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    post:
      operationId: VoteOnProposal
      description: |-
        Casts a vote for a specified `ProposalId` on behalf of a member. The member to vote as, specified by `VoterMemberId`, must be in the same Amazon Web Services account as the principal that calls the action.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: NetworkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: ProposalId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                VoterMemberId:
                  $ref: '#/components/schemas/ResourceIdString'
                Vote:
                  $ref: '#/components/schemas/VoteValue'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /tags/{ResourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Returns a list of tags for the specified resource. Each tag consists of a key and optional value.

        For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ArnString'
      responses:
        '200': {}
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '409':
          description: |-
            The requested resource exists but isn't in a status that can complete the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotReadyException'
    post:
      operationId: TagResource
      description: |-
        Adds or overwrites the specified tags for the specified Amazon Managed Blockchain resource. Each tag consists of a key and optional value.

        When you specify a tag key that already exists, the tag value is overwritten with the new value. Use `UntagResource` to remove tag keys.

        A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, your request fails and returns an error.

        For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ArnString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Tags:
                  $ref: '#/components/schemas/InputTagMap'
      responses:
        '200': {}
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '409':
          description: |-
            The requested resource exists but isn't in a status that can complete the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotReadyException'
    delete:
      operationId: UntagResource
      description: |-
        Removes the specified tags from the Amazon Managed Blockchain resource.

        For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ArnString'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '409':
          description: |-
            The requested resource exists but isn't in a status that can complete the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotReadyException'
  /invitations/{InvitationId}:
    delete:
      operationId: RejectInvitation
      description: |-
        Rejects an invitation to join a network. This action can be called by a principal in an Amazon Web Services account that has received an invitation to create a member and join a network.

        Applies only to Hyperledger Fabric.
      parameters:
      - name: InvitationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The action or operation requested is invalid. Verify that the action is typed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '404':
          description: |-
            A requested resource doesn't exist. It may have been deleted or referenced incorrectly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is creating resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      description: You don't have sufficient access to perform this action.
    Accessor:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the accessor.
        Type:
          allOf:
          - $ref: '#/components/schemas/AccessorType'
          description: 'The type of the accessor.


            Currently, accessor type is restricted to `BILLING_TOKEN`.'
        BillingToken:
          allOf:
          - $ref: '#/components/schemas/AccessorBillingTokenString'
          description: The billing token is a property of the Accessor. Use this token
            to when making calls to the blockchain network. The billing token is used
            to track your accessor token for billing requests.
        Status:
          allOf:
          - $ref: '#/components/schemas/AccessorStatus'
          description: The current status of the accessor.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time of the accessor.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the accessor. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
        Tags:
          allOf:
          - $ref: '#/components/schemas/OutputTagMap'
          description: 'The tags assigned to the Accessor.


            For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging
            Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
        NetworkType:
          allOf:
          - $ref: '#/components/schemas/AccessorNetworkType'
          description: The blockchain network that the Accessor token is created for.
      description: The properties of the Accessor.
    AccessorBillingTokenString:
      type: string
      minLength: 42
      maxLength: 42
    AccessorListMaxResults:
      type: integer
      minimum: 1
      maximum: 50
    AccessorNetworkType:
      type: string
      enum:
      - ETHEREUM_GOERLI
      - ETHEREUM_MAINNET
      - ETHEREUM_MAINNET_AND_GOERLI
      - POLYGON_MAINNET
      - POLYGON_MUMBAI
    AccessorStatus:
      type: string
      enum:
      - AVAILABLE
      - PENDING_DELETION
      - DELETED
    AccessorSummary:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the accessor.
        Type:
          allOf:
          - $ref: '#/components/schemas/AccessorType'
          description: 'The type of the accessor.


            Currently accessor type is restricted to `BILLING_TOKEN`.'
        Status:
          allOf:
          - $ref: '#/components/schemas/AccessorStatus'
          description: The current status of the accessor.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time of the accessor.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the accessor. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
        NetworkType:
          allOf:
          - $ref: '#/components/schemas/AccessorNetworkType'
          description: The blockchain network that the Accessor token is created for.
      description: A summary of accessor properties.
    AccessorSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/AccessorSummary'
    AccessorType:
      type: string
      enum:
      - BILLING_TOKEN
    ApprovalThresholdPolicy:
      type: object
      properties:
        ThresholdPercentage:
          allOf:
          - $ref: '#/components/schemas/ThresholdPercentageInt'
          description: The percentage of votes among all members that must be `YES`
            for a proposal to be approved. For example, a `ThresholdPercentage` value
            of `50` indicates 50%. The `ThresholdComparator` determines the precise
            comparison. If a `ThresholdPercentage` value of `50` is specified on a
            network with 10 members, along with a `ThresholdComparator` value of `GREATER_THAN`,
            this indicates that 6 `YES` votes are required for the proposal to be
            approved.
        ProposalDurationInHours:
          allOf:
          - $ref: '#/components/schemas/ProposalDurationInt'
          description: The duration from the time that a proposal is created until
            it expires. If members cast neither the required number of `YES` votes
            to approve the proposal nor the number of `NO` votes required to reject
            it before the duration expires, the proposal is `EXPIRED` and `ProposalActions`
            aren't carried out.
        ThresholdComparator:
          allOf:
          - $ref: '#/components/schemas/ThresholdComparator'
          description: Determines whether the vote percentage must be greater than
            the `ThresholdPercentage` or must be greater than or equal to the `ThresholdPercentage`
            to be approved.
      description: 'A policy type that defines the voting rules for the network. The
        rules decide if a proposal is approved. Approval may be based on criteria
        such as the percentage of `YES` votes and the duration of the proposal. The
        policy applies to all proposals and is specified when the network is created.


        Applies only to Hyperledger Fabric.'
    ArnString:
      type: string
      pattern: ^arn:.+:.+:.+:.+:.+$
      minLength: 1
      maxLength: 1011
    AvailabilityZoneString:
      type: string
    ClientRequestTokenString:
      type: string
      minLength: 1
      maxLength: 64
    CreateAccessorInput:
      type: object
      properties:
        ClientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestTokenString'
          description: This is a unique, case-sensitive identifier that you provide
            to ensure the idempotency of the operation. An idempotent operation completes
            no more than once. This identifier is required only if you make a service
            request directly using an HTTP client. It is generated automatically if
            you use an Amazon Web Services SDK or the Amazon Web Services CLI.
        AccessorType:
          allOf:
          - $ref: '#/components/schemas/AccessorType'
          description: 'The type of accessor.


            Currently, accessor type is restricted to `BILLING_TOKEN`.'
        Tags:
          allOf:
          - $ref: '#/components/schemas/InputTagMap'
          description: 'Tags to assign to the Accessor.


            Each tag consists of a key and an optional value. You can specify multiple
            key-value pairs in a single request with an overall maximum of 50 tags
            allowed per resource.


            For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging
            Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
        NetworkType:
          allOf:
          - $ref: '#/components/schemas/AccessorNetworkType'
          description: "The blockchain network that the `Accessor` token is created\
            \ for.\n\n  * Use the actual `networkType` value for the blockchain network\
            \ that you are creating the `Accessor` token for.\n\n  * With the shut\
            \ down of the _Ethereum Goerli_ and _Polygon Mumbai Testnet_ networks\
            \ the following `networkType` values are no longer available for selection\
            \ and use.\n\n    * `ETHEREUM_MAINNET_AND_GOERLI`\n\n    * `ETHEREUM_GOERLI`\n\
            \n    * `POLYGON_MUMBAI`\n\nHowever, your existing `Accessor` tokens with\
            \ these `networkType` values will remain unchanged."
      required:
      - ClientRequestToken
      - AccessorType
    CreateAccessorOutput:
      type: object
      properties:
        AccessorId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the accessor.
        BillingToken:
          allOf:
          - $ref: '#/components/schemas/AccessorBillingTokenString'
          description: The billing token is a property of the Accessor. Use this token
            to when making calls to the blockchain network. The billing token is used
            to track your accessor token for billing requests.
        NetworkType:
          allOf:
          - $ref: '#/components/schemas/AccessorNetworkType'
          description: The blockchain network that the accessor token is created for.
    CreateMemberInput:
      type: object
      properties:
        ClientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestTokenString'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the operation. An idempotent operation completes no
            more than one time. This identifier is required only if you make a service
            request directly using an HTTP client. It is generated automatically if
            you use an Amazon Web Services SDK or the CLI.
        InvitationId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the invitation that is sent to the
            member to join the network.
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network in which the member is
            created.
        MemberConfiguration:
          allOf:
          - $ref: '#/components/schemas/MemberConfiguration'
          description: Member configuration parameters.
      required:
      - ClientRequestToken
      - InvitationId
      - NetworkId
      - MemberConfiguration
    CreateMemberOutput:
      type: object
      properties:
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member.
    CreateNetworkInput:
      type: object
      properties:
        ClientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestTokenString'
          description: This is a unique, case-sensitive identifier that you provide
            to ensure the idempotency of the operation. An idempotent operation completes
            no more than once. This identifier is required only if you make a service
            request directly using an HTTP client. It is generated automatically if
            you use an Amazon Web Services SDK or the Amazon Web Services CLI.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the network.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: An optional description for the network.
        Framework:
          allOf:
          - $ref: '#/components/schemas/Framework'
          description: The blockchain framework that the network uses.
        FrameworkVersion:
          allOf:
          - $ref: '#/components/schemas/FrameworkVersionString'
          description: The version of the blockchain framework that the network uses.
        FrameworkConfiguration:
          allOf:
          - $ref: '#/components/schemas/NetworkFrameworkConfiguration'
          description: Configuration properties of the blockchain framework relevant
            to the network configuration.
        VotingPolicy:
          allOf:
          - $ref: '#/components/schemas/VotingPolicy'
          description: The voting rules used by the network to determine if a proposal
            is approved.
        MemberConfiguration:
          allOf:
          - $ref: '#/components/schemas/MemberConfiguration'
          description: Configuration properties for the first member within the network.
        Tags:
          allOf:
          - $ref: '#/components/schemas/InputTagMap'
          description: 'Tags to assign to the network.


            Each tag consists of a key and an optional value. You can specify multiple
            key-value pairs in a single request with an overall maximum of 50 tags
            allowed per resource.


            For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging
            Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
      required:
      - ClientRequestToken
      - Name
      - Framework
      - FrameworkVersion
      - VotingPolicy
      - MemberConfiguration
    CreateNetworkOutput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier for the network.
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier for the first member within the network.
    CreateNodeInput:
      type: object
      properties:
        ClientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestTokenString'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the operation. An idempotent operation completes no
            more than one time. This identifier is required only if you make a service
            request directly using an HTTP client. It is generated automatically if
            you use an Amazon Web Services SDK or the CLI.
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: "The unique identifier of the network for the node.\n\nEthereum\
            \ public networks have the following `NetworkId`s:\n\n  * `n-ethereum-mainnet`"
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: 'The unique identifier of the member that owns this node.


            Applies only to Hyperledger Fabric.'
        NodeConfiguration:
          allOf:
          - $ref: '#/components/schemas/NodeConfiguration'
          description: The properties of a node configuration.
        Tags:
          allOf:
          - $ref: '#/components/schemas/InputTagMap'
          description: 'Tags to assign to the node.


            Each tag consists of a key and an optional value. You can specify multiple
            key-value pairs in a single request with an overall maximum of 50 tags
            allowed per resource.


            For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging
            Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
      required:
      - ClientRequestToken
      - NetworkId
      - NodeConfiguration
    CreateNodeOutput:
      type: object
      properties:
        NodeId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the node.
    CreateProposalInput:
      type: object
      properties:
        ClientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestTokenString'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the operation. An idempotent operation completes no
            more than one time. This identifier is required only if you make a service
            request directly using an HTTP client. It is generated automatically if
            you use an Amazon Web Services SDK or the CLI.
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network for which the proposal
            is made.
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member that is creating the proposal.
            This identifier is especially useful for identifying the member making
            the proposal when multiple members exist in a single Amazon Web Services
            account.
        Actions:
          allOf:
          - $ref: '#/components/schemas/ProposalActions'
          description: The type of actions proposed, such as inviting a member or
            removing a member. The types of `Actions` in a proposal are mutually exclusive.
            For example, a proposal with `Invitations` actions cannot also contain
            `Removals` actions.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: A description for the proposal that is visible to voting members,
            for example, "Proposal to add Example Corp. as member."
        Tags:
          allOf:
          - $ref: '#/components/schemas/InputTagMap'
          description: 'Tags to assign to the proposal.


            Each tag consists of a key and an optional value. You can specify multiple
            key-value pairs in a single request with an overall maximum of 50 tags
            allowed per resource.


            For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging
            Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
      required:
      - ClientRequestToken
      - NetworkId
      - MemberId
      - Actions
    CreateProposalOutput:
      type: object
      properties:
        ProposalId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the proposal.
    DeleteAccessorInput:
      type: object
      properties:
        AccessorId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the accessor.
      required:
      - AccessorId
    DeleteAccessorOutput:
      type: object
      properties: {}
    DeleteMemberInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network from which the member
            is removed.
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member to remove.
      required:
      - NetworkId
      - MemberId
    DeleteMemberOutput:
      type: object
      properties: {}
    DeleteNodeInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: "The unique identifier of the network that the node is on.\n\
            \nEthereum public networks have the following `NetworkId`s:\n\n  * `n-ethereum-mainnet`"
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: 'The unique identifier of the member that owns this node.


            Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.'
        NodeId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the node.
      required:
      - NetworkId
      - NodeId
    DeleteNodeOutput:
      type: object
      properties: {}
    DescriptionString:
      type: string
      minLength: 0
      maxLength: 128
    Edition:
      type: string
      enum:
      - STARTER
      - STANDARD
    Enabled:
      type: boolean
    ExceptionMessage:
      type: string
    Framework:
      type: string
      enum:
      - HYPERLEDGER_FABRIC
      - ETHEREUM
    FrameworkVersionString:
      type: string
      minLength: 1
      maxLength: 8
    GetAccessorInput:
      type: object
      properties:
        AccessorId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the accessor.
      required:
      - AccessorId
    GetAccessorOutput:
      type: object
      properties:
        Accessor:
          allOf:
          - $ref: '#/components/schemas/Accessor'
          description: The properties of the accessor.
    GetMemberInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network to which the member belongs.
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member.
      required:
      - NetworkId
      - MemberId
    GetMemberOutput:
      type: object
      properties:
        Member:
          allOf:
          - $ref: '#/components/schemas/Member'
          description: The properties of a member.
    GetNetworkInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network to get information about.
      required:
      - NetworkId
    GetNetworkOutput:
      type: object
      properties:
        Network:
          allOf:
          - $ref: '#/components/schemas/Network'
          description: An object containing network configuration parameters.
    GetNodeInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network that the node is on.
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: 'The unique identifier of the member that owns the node.


            Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.'
        NodeId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the node.
      required:
      - NetworkId
      - NodeId
    GetNodeOutput:
      type: object
      properties:
        Node:
          allOf:
          - $ref: '#/components/schemas/Node'
          description: Properties of the node configuration.
    GetProposalInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network for which the proposal
            is made.
        ProposalId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the proposal.
      required:
      - NetworkId
      - ProposalId
    GetProposalOutput:
      type: object
      properties:
        Proposal:
          allOf:
          - $ref: '#/components/schemas/Proposal'
          description: Information about a proposal.
    IllegalActionException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      description: ''
    InputTagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    InstanceTypeString:
      type: string
    InternalServiceErrorException:
      type: object
      properties: {}
      description: The request processing has failed because of an unknown error,
        exception or failure.
    InvalidRequestException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      description: The action or operation requested is invalid. Verify that the action
        is typed correctly.
    Invitation:
      type: object
      properties:
        InvitationId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier for the invitation.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the invitation was created.
        ExpirationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the invitation expires. This is the
            `CreationDate` plus the `ProposalDurationInHours` that is specified in
            the `ProposalThresholdPolicy`. After this date and time, the invitee can
            no longer create a member and join the network using this `InvitationId`.
        Status:
          allOf:
          - $ref: '#/components/schemas/InvitationStatus'
          description: "The status of the invitation:\n\n  * `PENDING` \\- The invitee\
            \ hasn't created a member to join the network, and the invitation hasn't\
            \ yet expired.\n\n  * `ACCEPTING` \\- The invitee has begun creating a\
            \ member, and creation hasn't yet completed.\n\n  * `ACCEPTED` \\- The\
            \ invitee created a member and joined the network using the `InvitationID`.\n\
            \n  * `REJECTED` \\- The invitee rejected the invitation.\n\n  * `EXPIRED`\
            \ \\- The invitee neither created a member nor rejected the invitation\
            \ before the `ExpirationDate`."
        NetworkSummary:
          $ref: '#/components/schemas/NetworkSummary'
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the invitation. For more
            information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
      description: 'An invitation to an Amazon Web Services account to create a member
        and join the network.


        Applies only to Hyperledger Fabric.'
    InvitationList:
      type: array
      items:
        $ref: '#/components/schemas/Invitation'
    InvitationStatus:
      type: string
      enum:
      - PENDING
      - ACCEPTED
      - ACCEPTING
      - REJECTED
      - EXPIRED
    InviteAction:
      type: object
      properties:
        Principal:
          allOf:
          - $ref: '#/components/schemas/PrincipalString'
          description: The Amazon Web Services account ID to invite.
      required:
      - Principal
      description: 'An action to invite a specific Amazon Web Services account to
        create a member and join the network. The `InviteAction` is carried out when
        a `Proposal` is `APPROVED`.


        Applies only to Hyperledger Fabric.'
    InviteActionList:
      type: array
      items:
        $ref: '#/components/schemas/InviteAction'
    IsOwned:
      type: boolean
    ListAccessorsInput:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/AccessorListMaxResults'
          description: The maximum number of accessors to list.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
        NetworkType:
          allOf:
          - $ref: '#/components/schemas/AccessorNetworkType'
          description: 'The blockchain network that the `Accessor` token is created
            for.


            Use the value `ETHEREUM_MAINNET_AND_GOERLI` for all existing `Accessors`
            tokens that were created before the `networkType` property was introduced.'
    ListAccessorsOutput:
      type: object
      properties:
        Accessors:
          allOf:
          - $ref: '#/components/schemas/AccessorSummaryList'
          description: An array of AccessorSummary objects that contain configuration
            properties for each accessor.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
    ListInvitationsInput:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ProposalListMaxResults'
          description: The maximum number of invitations to return.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
    ListInvitationsOutput:
      type: object
      properties:
        Invitations:
          allOf:
          - $ref: '#/components/schemas/InvitationList'
          description: The invitations for the network.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
    ListMembersInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network for which to list members.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The optional name of the member to list.
        Status:
          allOf:
          - $ref: '#/components/schemas/MemberStatus'
          description: An optional status specifier. If provided, only members currently
            in this status are listed.
        IsOwned:
          allOf:
          - $ref: '#/components/schemas/IsOwned'
          description: An optional Boolean value. If provided, the request is limited
            either to members that the current Amazon Web Services account owns (`true`)
            or that other Amazon Web Services accountsn own (`false`). If omitted,
            all members are listed.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MemberListMaxResults'
          description: The maximum number of members to return in the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
      required:
      - NetworkId
    ListMembersOutput:
      type: object
      properties:
        Members:
          allOf:
          - $ref: '#/components/schemas/MemberSummaryList'
          description: An array of `MemberSummary` objects. Each object contains details
            about a network member.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
    ListNetworksInput:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the network.
        Framework:
          allOf:
          - $ref: '#/components/schemas/Framework'
          description: An optional framework specifier. If provided, only networks
            of this framework type are listed.
        Status:
          allOf:
          - $ref: '#/components/schemas/NetworkStatus'
          description: 'An optional status specifier. If provided, only networks currently
            in this status are listed.


            Applies only to Hyperledger Fabric.'
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/NetworkListMaxResults'
          description: The maximum number of networks to list.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
    ListNetworksOutput:
      type: object
      properties:
        Networks:
          allOf:
          - $ref: '#/components/schemas/NetworkSummaryList'
          description: An array of `NetworkSummary` objects that contain configuration
            properties for each network.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
    ListNodesInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network for which to list nodes.
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: 'The unique identifier of the member who owns the nodes to
            list.


            Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.'
        Status:
          allOf:
          - $ref: '#/components/schemas/NodeStatus'
          description: An optional status specifier. If provided, only nodes currently
            in this status are listed.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/NodeListMaxResults'
          description: The maximum number of nodes to list.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
      required:
      - NetworkId
    ListNodesOutput:
      type: object
      properties:
        Nodes:
          allOf:
          - $ref: '#/components/schemas/NodeSummaryList'
          description: An array of `NodeSummary` objects that contain configuration
            properties for each node.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
    ListProposalVotesInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network.
        ProposalId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the proposal.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ProposalListMaxResults'
          description: The maximum number of votes to return.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
      required:
      - NetworkId
      - ProposalId
    ListProposalVotesOutput:
      type: object
      properties:
        ProposalVotes:
          allOf:
          - $ref: '#/components/schemas/ProposalVoteList'
          description: The list of votes.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
    ListProposalsInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ProposalListMaxResults'
          description: The maximum number of proposals to return.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
      required:
      - NetworkId
    ListProposalsOutput:
      type: object
      properties:
        Proposals:
          allOf:
          - $ref: '#/components/schemas/ProposalSummaryList'
          description: The summary of each proposal made on the network.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
    ListTagsForResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the resource. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
      required:
      - ResourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/OutputTagMap'
          description: The tags assigned to the resource.
    LogConfiguration:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Enabled'
          description: Indicates whether logging is enabled.
      description: A configuration for logging events.
    LogConfigurations:
      type: object
      properties:
        Cloudwatch:
          allOf:
          - $ref: '#/components/schemas/LogConfiguration'
          description: Parameters for publishing logs to Amazon CloudWatch Logs.
      description: A collection of log configurations.
    Member:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network to which the member belongs.
        Id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member.
        Name:
          allOf:
          - $ref: '#/components/schemas/NetworkMemberNameString'
          description: The name of the member.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: An optional description for the member.
        FrameworkAttributes:
          allOf:
          - $ref: '#/components/schemas/MemberFrameworkAttributes'
          description: Attributes relevant to a member for the blockchain framework
            that the Managed Blockchain network uses.
        LogPublishingConfiguration:
          allOf:
          - $ref: '#/components/schemas/MemberLogPublishingConfiguration'
          description: Configuration properties for logging events associated with
            a member.
        Status:
          allOf:
          - $ref: '#/components/schemas/MemberStatus'
          description: "The status of a member.\n\n  * `CREATING` \\- The Amazon Web\
            \ Services account is in the process of creating a member.\n\n  * `AVAILABLE`\
            \ \\- The member has been created and can participate in the network.\n\
            \n  * `CREATE_FAILED` \\- The Amazon Web Services account attempted to\
            \ create a member and creation failed.\n\n  * `UPDATING` \\- The member\
            \ is in the process of being updated.\n\n  * `DELETING` \\- The member\
            \ and all associated resources are in the process of being deleted. Either\
            \ the Amazon Web Services account that owns the member deleted it, or\
            \ the member is being deleted as the result of an `APPROVED` `PROPOSAL`\
            \ to remove the member.\n\n  * `DELETED` \\- The member can no longer\
            \ participate on the network and all associated resources are deleted.\
            \ Either the Amazon Web Services account that owns the member deleted\
            \ it, or the member is being deleted as the result of an `APPROVED` `PROPOSAL`\
            \ to remove the member.\n\n  * `INACCESSIBLE_ENCRYPTION_KEY` \\- The member\
            \ is impaired and might not function as expected because it cannot access\
            \ the specified customer managed key in KMS for encryption at rest. Either\
            \ the KMS key was disabled or deleted, or the grants on the key were revoked.\n\
            \nThe effect of disabling or deleting a key or of revoking a grant isn't\
            \ immediate. It might take some time for the member resource to discover\
            \ that the key is inaccessible. When a resource is in this state, we recommend\
            \ deleting and recreating the resource."
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the member was created.
        Tags:
          allOf:
          - $ref: '#/components/schemas/OutputTagMap'
          description: 'Tags assigned to the member. Tags consist of a key and optional
            value.


            For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging
            Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the member. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
        KmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon Resource Name (ARN) of the customer managed key
            in Key Management Service (KMS) that the member uses for encryption at
            rest. If the value of this parameter is `"AWS Owned KMS Key"`, the member
            uses an Amazon Web Services owned KMS key for encryption. This parameter
            is inherited by the nodes that this member owns.


            For more information, see [Encryption at Rest](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/managed-blockchain-encryption-at-rest.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
      description: 'Member configuration properties.


        Applies only to Hyperledger Fabric.'
    MemberConfiguration:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/NetworkMemberNameString'
          description: The name of the member.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: An optional description of the member.
        FrameworkConfiguration:
          allOf:
          - $ref: '#/components/schemas/MemberFrameworkConfiguration'
          description: Configuration properties of the blockchain framework relevant
            to the member.
        LogPublishingConfiguration:
          allOf:
          - $ref: '#/components/schemas/MemberLogPublishingConfiguration'
          description: Configuration properties for logging events associated with
            a member of a Managed Blockchain network.
        Tags:
          allOf:
          - $ref: '#/components/schemas/InputTagMap'
          description: 'Tags assigned to the member. Tags consist of a key and optional
            value.


            When specifying tags during creation, you can specify multiple key-value
            pairs in a single request, with an overall maximum of 50 tags added to
            each resource.


            For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging
            Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
        KmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: "The Amazon Resource Name (ARN) of the customer managed key\
            \ in Key Management Service (KMS) to use for encryption at rest in the\
            \ member. This parameter is inherited by any nodes that this member creates.\
            \ For more information, see [Encryption at Rest](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/managed-blockchain-encryption-at-rest.html)\
            \ in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.\n\
            \nUse one of the following options to specify this parameter:\n\n  * **Undefined\
            \ or empty string** \\- By default, use an KMS key that is owned and managed\
            \ by Amazon Web Services on your behalf.\n\n  * **A valid symmetric customer\
            \ managed KMS key** \\- Use the specified KMS key in your account that\
            \ you create, own, and manage.\n\nAmazon Managed Blockchain doesn't support\
            \ asymmetric keys. For more information, see [Using symmetric and asymmetric\
            \ keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html)\
            \ in the _Key Management Service Developer Guide_.\n\nThe following is\
            \ an example of a KMS key ARN: `arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`"
      required:
      - Name
      - FrameworkConfiguration
      description: 'Configuration properties of the member.


        Applies only to Hyperledger Fabric.'
    MemberFabricAttributes:
      type: object
      properties:
        AdminUsername:
          allOf:
          - $ref: '#/components/schemas/UsernameString'
          description: The user name for the initial administrator user for the member.
        CaEndpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The endpoint used to access the member's certificate authority.
      description: Attributes of Hyperledger Fabric for a member in a Managed Blockchain
        network using the Hyperledger Fabric framework.
    MemberFabricConfiguration:
      type: object
      properties:
        AdminUsername:
          allOf:
          - $ref: '#/components/schemas/UsernameString'
          description: The user name for the member's initial administrative user.
        AdminPassword:
          allOf:
          - $ref: '#/components/schemas/PasswordString'
          description: The password for the member's initial administrative user.
            The `AdminPassword` must be at least 8 characters long and no more than
            32 characters. It must contain at least one uppercase letter, one lowercase
            letter, and one digit. It cannot have a single quotation mark (‘), a double
            quotation marks (“), a forward slash(/), a backward slash(\\), @, or a
            space.
      required:
      - AdminUsername
      - AdminPassword
      description: Configuration properties for Hyperledger Fabric for a member in
        a Managed Blockchain network that is using the Hyperledger Fabric framework.
    MemberFabricLogPublishingConfiguration:
      type: object
      properties:
        CaLogs:
          allOf:
          - $ref: '#/components/schemas/LogConfigurations'
          description: Configuration properties for logging events associated with
            a member's Certificate Authority (CA). CA logs help you determine when
            a member in your account joins the network, or when new peers register
            with a member CA.
      description: Configuration properties for logging events associated with a member
        of a Managed Blockchain network using the Hyperledger Fabric framework.
    MemberFrameworkAttributes:
      type: object
      properties:
        Fabric:
          allOf:
          - $ref: '#/components/schemas/MemberFabricAttributes'
          description: Attributes of Hyperledger Fabric relevant to a member on a
            Managed Blockchain network that uses Hyperledger Fabric.
      description: Attributes relevant to a member for the blockchain framework that
        the Managed Blockchain network uses.
    MemberFrameworkConfiguration:
      type: object
      properties:
        Fabric:
          allOf:
          - $ref: '#/components/schemas/MemberFabricConfiguration'
          description: Attributes of Hyperledger Fabric for a member on a Managed
            Blockchain network that uses Hyperledger Fabric.
      description: Configuration properties relevant to a member for the blockchain
        framework that the Managed Blockchain network uses.
    MemberListMaxResults:
      type: integer
      minimum: 1
      maximum: 20
    MemberLogPublishingConfiguration:
      type: object
      properties:
        Fabric:
          allOf:
          - $ref: '#/components/schemas/MemberFabricLogPublishingConfiguration'
          description: Configuration properties for logging events associated with
            a member of a Managed Blockchain network using the Hyperledger Fabric
            framework.
      description: Configuration properties for logging events associated with a member
        of a Managed Blockchain network.
    MemberStatus:
      type: string
      enum:
      - CREATING
      - AVAILABLE
      - CREATE_FAILED
      - UPDATING
      - DELETING
      - DELETED
      - INACCESSIBLE_ENCRYPTION_KEY
    MemberSummary:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member.
        Name:
          allOf:
          - $ref: '#/components/schemas/NetworkMemberNameString'
          description: The name of the member.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: An optional description of the member.
        Status:
          allOf:
          - $ref: '#/components/schemas/MemberStatus'
          description: "The status of the member.\n\n  * `CREATING` \\- The Amazon\
            \ Web Services account is in the process of creating a member.\n\n  *\
            \ `AVAILABLE` \\- The member has been created and can participate in the\
            \ network.\n\n  * `CREATE_FAILED` \\- The Amazon Web Services account\
            \ attempted to create a member and creation failed.\n\n  * `UPDATING`\
            \ \\- The member is in the process of being updated.\n\n  * `DELETING`\
            \ \\- The member and all associated resources are in the process of being\
            \ deleted. Either the Amazon Web Services account that owns the member\
            \ deleted it, or the member is being deleted as the result of an `APPROVED`\
            \ `PROPOSAL` to remove the member.\n\n  * `DELETED` \\- The member can\
            \ no longer participate on the network and all associated resources are\
            \ deleted. Either the Amazon Web Services account that owns the member\
            \ deleted it, or the member is being deleted as the result of an `APPROVED`\
            \ `PROPOSAL` to remove the member.\n\n  * `INACCESSIBLE_ENCRYPTION_KEY`\
            \ \\- The member is impaired and might not function as expected because\
            \ it cannot access the specified customer managed key in Key Management\
            \ Service (KMS) for encryption at rest. Either the KMS key was disabled\
            \ or deleted, or the grants on the key were revoked.\n\nThe effect of\
            \ disabling or deleting a key or of revoking a grant isn't immediate.\
            \ It might take some time for the member resource to discover that the\
            \ key is inaccessible. When a resource is in this state, we recommend\
            \ deleting and recreating the resource."
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the member was created.
        IsOwned:
          allOf:
          - $ref: '#/components/schemas/IsOwned'
          description: An indicator of whether the member is owned by your Amazon
            Web Services account or a different Amazon Web Services account.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the member. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
      description: 'A summary of configuration properties for a member.


        Applies only to Hyperledger Fabric.'
    MemberSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/MemberSummary'
    NameString:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 64
    Network:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the network.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: Attributes of the blockchain framework for the network.
        Framework:
          allOf:
          - $ref: '#/components/schemas/Framework'
          description: The blockchain framework that the network uses.
        FrameworkVersion:
          allOf:
          - $ref: '#/components/schemas/FrameworkVersionString'
          description: The version of the blockchain framework that the network uses.
        FrameworkAttributes:
          allOf:
          - $ref: '#/components/schemas/NetworkFrameworkAttributes'
          description: Attributes of the blockchain framework that the network uses.
        VpcEndpointServiceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The VPC endpoint service name of the VPC endpoint service of
            the network. Members use the VPC endpoint service name to create a VPC
            endpoint to access network resources.
        VotingPolicy:
          allOf:
          - $ref: '#/components/schemas/VotingPolicy'
          description: The voting rules that the network uses to decide if a proposal
            is accepted.
        Status:
          allOf:
          - $ref: '#/components/schemas/NetworkStatus'
          description: The current status of the network.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the network was created.
        Tags:
          allOf:
          - $ref: '#/components/schemas/OutputTagMap'
          description: 'Tags assigned to the network. Each tag consists of a key and
            optional value.


            For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging
            Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the network. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
      description: Network configuration properties.
    NetworkEthereumAttributes:
      type: object
      properties:
        ChainId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The Ethereum `CHAIN_ID` associated with the Ethereum network.\
            \ Chain IDs are as follows:\n\n  * mainnet = `1`"
      description: Attributes of Ethereum for a network.
    NetworkFabricAttributes:
      type: object
      properties:
        OrderingServiceEndpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The endpoint of the ordering service for the network.
        Edition:
          allOf:
          - $ref: '#/components/schemas/Edition'
          description: The edition of Amazon Managed Blockchain that Hyperledger Fabric
            uses. For more information, see [Amazon Managed Blockchain Pricing](http://aws.amazon.com/managed-blockchain/pricing/).
      description: Attributes of Hyperledger Fabric for a network.
    NetworkFabricConfiguration:
      type: object
      properties:
        Edition:
          allOf:
          - $ref: '#/components/schemas/Edition'
          description: The edition of Amazon Managed Blockchain that the network uses.
            For more information, see [Amazon Managed Blockchain Pricing](http://aws.amazon.com/managed-blockchain/pricing/).
      required:
      - Edition
      description: Hyperledger Fabric configuration properties for the network.
    NetworkFrameworkAttributes:
      type: object
      properties:
        Fabric:
          allOf:
          - $ref: '#/components/schemas/NetworkFabricAttributes'
          description: Attributes of Hyperledger Fabric for a Managed Blockchain network
            that uses Hyperledger Fabric.
        Ethereum:
          allOf:
          - $ref: '#/components/schemas/NetworkEthereumAttributes'
          description: Attributes of an Ethereum network for Managed Blockchain resources
            participating in an Ethereum network.
      description: Attributes relevant to the network for the blockchain framework
        that the network uses.
    NetworkFrameworkConfiguration:
      type: object
      properties:
        Fabric:
          allOf:
          - $ref: '#/components/schemas/NetworkFabricConfiguration'
          description: Hyperledger Fabric configuration properties for a Managed Blockchain
            network that uses Hyperledger Fabric.
      description: Configuration properties relevant to the network for the blockchain
        framework that the network uses.
    NetworkListMaxResults:
      type: integer
      minimum: 1
      maximum: 10
    NetworkMemberNameString:
      type: string
      pattern: ^(?!-|[0-9])(?!.*-$)(?!.*?--)[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 64
    NetworkStatus:
      type: string
      enum:
      - CREATING
      - AVAILABLE
      - CREATE_FAILED
      - DELETING
      - DELETED
    NetworkSummary:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network.
        Name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the network.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: An optional description of the network.
        Framework:
          allOf:
          - $ref: '#/components/schemas/Framework'
          description: The blockchain framework that the network uses.
        FrameworkVersion:
          allOf:
          - $ref: '#/components/schemas/FrameworkVersionString'
          description: The version of the blockchain framework that the network uses.
        Status:
          allOf:
          - $ref: '#/components/schemas/NetworkStatus'
          description: The current status of the network.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the network was created.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the network. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
      description: A summary of network configuration properties.
    NetworkSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/NetworkSummary'
    Node:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network that the node is on.
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: 'The unique identifier of the member to which the node belongs.


            Applies only to Hyperledger Fabric.'
        Id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the node.
        InstanceType:
          allOf:
          - $ref: '#/components/schemas/InstanceTypeString'
          description: The instance type of the node.
        AvailabilityZone:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneString'
          description: The Availability Zone in which the node exists. Required for
            Ethereum nodes.
        FrameworkAttributes:
          allOf:
          - $ref: '#/components/schemas/NodeFrameworkAttributes'
          description: Attributes of the blockchain framework being used.
        LogPublishingConfiguration:
          allOf:
          - $ref: '#/components/schemas/NodeLogPublishingConfiguration'
          description: Configuration properties for logging events associated with
            a peer node on a Hyperledger Fabric network on Managed Blockchain.
        StateDB:
          allOf:
          - $ref: '#/components/schemas/StateDBType'
          description: 'The state database that the node uses. Values are `LevelDB`
            or `CouchDB`.


            Applies only to Hyperledger Fabric.'
        Status:
          allOf:
          - $ref: '#/components/schemas/NodeStatus'
          description: "The status of the node.\n\n  * `CREATING` \\- The Amazon Web\
            \ Services account is in the process of creating a node.\n\n  * `AVAILABLE`\
            \ \\- The node has been created and can participate in the network.\n\n\
            \  * `UNHEALTHY` \\- The node is impaired and might not function as expected.\
            \ Amazon Managed Blockchain automatically finds nodes in this state and\
            \ tries to recover them. If a node is recoverable, it returns to `AVAILABLE`.\
            \ Otherwise, it moves to `FAILED` status.\n\n  * `CREATE_FAILED` \\- The\
            \ Amazon Web Services account attempted to create a node and creation\
            \ failed.\n\n  * `UPDATING` \\- The node is in the process of being updated.\n\
            \n  * `DELETING` \\- The node is in the process of being deleted.\n\n\
            \  * `DELETED` \\- The node can no longer participate on the network.\n\
            \n  * `FAILED` \\- The node is no longer functional, cannot be recovered,\
            \ and must be deleted.\n\n  * `INACCESSIBLE_ENCRYPTION_KEY` \\- The node\
            \ is impaired and might not function as expected because it cannot access\
            \ the specified customer managed key in KMS for encryption at rest. Either\
            \ the KMS key was disabled or deleted, or the grants on the key were revoked.\n\
            \nThe effect of disabling or deleting a key or of revoking a grant isn't\
            \ immediate. It might take some time for the node resource to discover\
            \ that the key is inaccessible. When a resource is in this state, we recommend\
            \ deleting and recreating the resource."
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the node was created.
        Tags:
          allOf:
          - $ref: '#/components/schemas/OutputTagMap'
          description: 'Tags assigned to the node. Each tag consists of a key and
            optional value.


            For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging
            Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the node. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
        KmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon Resource Name (ARN) of the customer managed key
            in Key Management Service (KMS) that the node uses for encryption at rest.
            If the value of this parameter is `"AWS Owned KMS Key"`, the node uses
            an Amazon Web Services owned KMS key for encryption. The node inherits
            this parameter from the member that it belongs to.


            For more information, see [Encryption at Rest](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/managed-blockchain-encryption-at-rest.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.


            Applies only to Hyperledger Fabric.'
      description: Configuration properties of a node.
    NodeConfiguration:
      type: object
      properties:
        InstanceType:
          allOf:
          - $ref: '#/components/schemas/InstanceTypeString'
          description: The Amazon Managed Blockchain instance type for the node.
        AvailabilityZone:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneString'
          description: The Availability Zone in which the node exists. Required for
            Ethereum nodes.
        LogPublishingConfiguration:
          allOf:
          - $ref: '#/components/schemas/NodeLogPublishingConfiguration'
          description: Configuration properties for logging events associated with
            a peer node on a Hyperledger Fabric network on Managed Blockchain.
        StateDB:
          allOf:
          - $ref: '#/components/schemas/StateDBType'
          description: 'The state database that the node uses. Values are `LevelDB`
            or `CouchDB`. When using an Amazon Managed Blockchain network with Hyperledger
            Fabric version 1.4 or later, the default is `CouchDB`.


            Applies only to Hyperledger Fabric.'
      required:
      - InstanceType
      description: Configuration properties of a node.
    NodeEthereumAttributes:
      type: object
      properties:
        HttpEndpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The endpoint on which the Ethereum node listens to run Ethereum
            API methods over HTTP connections from a client. Use this endpoint in
            client code for smart contracts when using an HTTP connection. Connections
            to this endpoint are authenticated using [Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).
        WebSocketEndpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The endpoint on which the Ethereum node listens to run Ethereum
            JSON-RPC methods over WebSocket connections from a client. Use this endpoint
            in client code for smart contracts when using a WebSocket connection.
            Connections to this endpoint are authenticated using [Signature Version
            4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).
      description: Attributes of an Ethereum node.
    NodeFabricAttributes:
      type: object
      properties:
        PeerEndpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The endpoint that identifies the peer node for all services
            except peer channel-based event services.
        PeerEventEndpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The endpoint that identifies the peer node for peer channel-based
            event services.
      description: Attributes of Hyperledger Fabric for a peer node on a Hyperledger
        Fabric network on Managed Blockchain.
    NodeFabricLogPublishingConfiguration:
      type: object
      properties:
        ChaincodeLogs:
          allOf:
          - $ref: '#/components/schemas/LogConfigurations'
          description: Configuration properties for logging events associated with
            chaincode execution on a peer node. Chaincode logs contain the results
            of instantiating, invoking, and querying the chaincode. A peer can run
            multiple instances of chaincode. When enabled, a log stream is created
            for all chaincodes, with an individual log stream for each chaincode.
        PeerLogs:
          allOf:
          - $ref: '#/components/schemas/LogConfigurations'
          description: Configuration properties for a peer node log. Peer node logs
            contain messages generated when your client submits transaction proposals
            to peer nodes, requests to join channels, enrolls an admin peer, and lists
            the chaincode instances on a peer node.
      description: Configuration properties for logging events associated with a peer
        node owned by a member in a Managed Blockchain network.
    NodeFrameworkAttributes:
      type: object
      properties:
        Fabric:
          allOf:
          - $ref: '#/components/schemas/NodeFabricAttributes'
          description: Attributes of Hyperledger Fabric for a peer node on a Managed
            Blockchain network that uses Hyperledger Fabric.
        Ethereum:
          allOf:
          - $ref: '#/components/schemas/NodeEthereumAttributes'
          description: Attributes of Ethereum for a node on a Managed Blockchain network
            that uses Ethereum.
      description: Attributes relevant to a node on a Managed Blockchain network for
        the blockchain framework that the network uses.
    NodeListMaxResults:
      type: integer
      minimum: 1
      maximum: 20
    NodeLogPublishingConfiguration:
      type: object
      properties:
        Fabric:
          allOf:
          - $ref: '#/components/schemas/NodeFabricLogPublishingConfiguration'
          description: Configuration properties for logging events associated with
            a node that is owned by a member of a Managed Blockchain network using
            the Hyperledger Fabric framework.
      description: Configuration properties for logging events associated with a peer
        node on a Hyperledger Fabric network on Managed Blockchain.
    NodeStatus:
      type: string
      enum:
      - CREATING
      - AVAILABLE
      - UNHEALTHY
      - CREATE_FAILED
      - UPDATING
      - DELETING
      - DELETED
      - FAILED
      - INACCESSIBLE_ENCRYPTION_KEY
    NodeSummary:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the node.
        Status:
          allOf:
          - $ref: '#/components/schemas/NodeStatus'
          description: The status of the node.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the node was created.
        AvailabilityZone:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneString'
          description: The Availability Zone in which the node exists.
        InstanceType:
          allOf:
          - $ref: '#/components/schemas/InstanceTypeString'
          description: The EC2 instance type for the node.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the node. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
      description: A summary of configuration properties for a node.
    NodeSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/NodeSummary'
    OutputTagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    PaginationToken:
      type: string
      minLength: 0
      maxLength: 128
    PasswordString:
      type: string
      pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?!.*[@'\\"/])[a-zA-Z0-9\S]*$
      minLength: 8
      maxLength: 32
    PrincipalString:
      type: string
    Proposal:
      type: object
      properties:
        ProposalId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the proposal.
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network for which the proposal
            is made.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: The description of the proposal.
        Actions:
          allOf:
          - $ref: '#/components/schemas/ProposalActions'
          description: The actions to perform on the network if the proposal is `APPROVED`.
        ProposedByMemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member that created the proposal.
        ProposedByMemberName:
          allOf:
          - $ref: '#/components/schemas/NetworkMemberNameString'
          description: The name of the member that created the proposal.
        Status:
          allOf:
          - $ref: '#/components/schemas/ProposalStatus'
          description: "The status of the proposal. Values are as follows:\n\n  *\
            \ `IN_PROGRESS` \\- The proposal is active and open for member voting.\n\
            \n  * `APPROVED` \\- The proposal was approved with sufficient `YES` votes\
            \ among members according to the `VotingPolicy` specified for the `Network`.\
            \ The specified proposal actions are carried out.\n\n  * `REJECTED` \\\
            - The proposal was rejected with insufficient `YES` votes among members\
            \ according to the `VotingPolicy` specified for the `Network`. The specified\
            \ `ProposalActions` aren't carried out.\n\n  * `EXPIRED` \\- Members didn't\
            \ cast the number of votes required to determine the proposal outcome\
            \ before the proposal expired. The specified `ProposalActions` aren't\
            \ carried out.\n\n  * `ACTION_FAILED` \\- One or more of the specified\
            \ `ProposalActions` in a proposal that was approved couldn't be completed\
            \ because of an error. The `ACTION_FAILED` status occurs even if only\
            \ one ProposalAction fails and other actions are successful."
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the proposal was created.
        ExpirationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the proposal expires. This is the `CreationDate`
            plus the `ProposalDurationInHours` that is specified in the `ProposalThresholdPolicy`.
            After this date and time, if members haven't cast enough votes to determine
            the outcome according to the voting policy, the proposal is `EXPIRED`
            and `Actions` aren't carried out.
        YesVoteCount:
          allOf:
          - $ref: '#/components/schemas/VoteCount'
          description: The current total of `YES` votes cast on the proposal by members.
        NoVoteCount:
          allOf:
          - $ref: '#/components/schemas/VoteCount'
          description: The current total of `NO` votes cast on the proposal by members.
        OutstandingVoteCount:
          allOf:
          - $ref: '#/components/schemas/VoteCount'
          description: The number of votes remaining to be cast on the proposal by
            members. In other words, the number of members minus the sum of `YES`
            votes and `NO` votes.
        Tags:
          allOf:
          - $ref: '#/components/schemas/OutputTagMap'
          description: 'Tags assigned to the proposal. Each tag consists of a key
            and optional value.


            For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Ethereum Developer Guide_ , or [Tagging
            Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html)
            in the _Amazon Managed Blockchain Hyperledger Fabric Developer Guide_.'
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the proposal. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
      description: 'Properties of a proposal on a Managed Blockchain network.


        Applies only to Hyperledger Fabric.'
    ProposalActions:
      type: object
      properties:
        Invitations:
          allOf:
          - $ref: '#/components/schemas/InviteActionList'
          description: The actions to perform for an `APPROVED` proposal to invite
            an Amazon Web Services account to create a member and join the network.
        Removals:
          allOf:
          - $ref: '#/components/schemas/RemoveActionList'
          description: The actions to perform for an `APPROVED` proposal to remove
            a member from the network, which deletes the member and all associated
            member resources from the network.
      description: 'The actions to carry out if a proposal is `APPROVED`.


        Applies only to Hyperledger Fabric.'
    ProposalDurationInt:
      type: integer
      minimum: 1
      maximum: 168
    ProposalListMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    ProposalStatus:
      type: string
      enum:
      - IN_PROGRESS
      - APPROVED
      - REJECTED
      - EXPIRED
      - ACTION_FAILED
    ProposalSummary:
      type: object
      properties:
        ProposalId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the proposal.
        Description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: The description of the proposal.
        ProposedByMemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member that created the proposal.
        ProposedByMemberName:
          allOf:
          - $ref: '#/components/schemas/NetworkMemberNameString'
          description: The name of the member that created the proposal.
        Status:
          allOf:
          - $ref: '#/components/schemas/ProposalStatus'
          description: "The status of the proposal. Values are as follows:\n\n  *\
            \ `IN_PROGRESS` \\- The proposal is active and open for member voting.\n\
            \n  * `APPROVED` \\- The proposal was approved with sufficient `YES` votes\
            \ among members according to the `VotingPolicy` specified for the `Network`.\
            \ The specified proposal actions are carried out.\n\n  * `REJECTED` \\\
            - The proposal was rejected with insufficient `YES` votes among members\
            \ according to the `VotingPolicy` specified for the `Network`. The specified\
            \ `ProposalActions` aren't carried out.\n\n  * `EXPIRED` \\- Members didn't\
            \ cast the number of votes required to determine the proposal outcome\
            \ before the proposal expired. The specified `ProposalActions` aren't\
            \ carried out.\n\n  * `ACTION_FAILED` \\- One or more of the specified\
            \ `ProposalActions` in a proposal that was approved couldn't be completed\
            \ because of an error."
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the proposal was created.
        ExpirationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the proposal expires. This is the `CreationDate`
            plus the `ProposalDurationInHours` that is specified in the `ProposalThresholdPolicy`.
            After this date and time, if members haven't cast enough votes to determine
            the outcome according to the voting policy, the proposal is `EXPIRED`
            and `Actions` aren't carried out.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the proposal. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
      description: 'Properties of a proposal.


        Applies only to Hyperledger Fabric.'
    ProposalSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ProposalSummary'
    ProposalVoteList:
      type: array
      items:
        $ref: '#/components/schemas/VoteSummary'
    RejectInvitationInput:
      type: object
      properties:
        InvitationId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the invitation to reject.
      required:
      - InvitationId
    RejectInvitationOutput:
      type: object
      properties: {}
    RemoveAction:
      type: object
      properties:
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member to remove.
      required:
      - MemberId
      description: 'An action to remove a member from a Managed Blockchain network
        as the result of a removal proposal that is `APPROVED`. The member and all
        associated resources are deleted from the network.


        Applies only to Hyperledger Fabric.'
    RemoveActionList:
      type: array
      items:
        $ref: '#/components/schemas/RemoveAction'
    ResourceAlreadyExistsException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      description: A resource request is issued for a resource that already exists.
    ResourceIdString:
      type: string
      minLength: 1
      maxLength: 32
    ResourceLimitExceededException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      description: The maximum number of resources of that type already exist. Ensure
        the resources requested are within the boundaries of the service edition and
        your account limits.
    ResourceNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
        ResourceName:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: A requested resource doesn't exist. It may have been deleted
            or referenced inaccurately.
      description: A requested resource doesn't exist. It may have been deleted or
        referenced incorrectly.
    ResourceNotReadyException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      description: The requested resource exists but isn't in a status that can complete
        the operation.
    StateDBType:
      type: string
      enum:
      - LevelDB
      - CouchDB
    String:
      type: string
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the resource. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
        Tags:
          allOf:
          - $ref: '#/components/schemas/InputTagMap'
          description: 'The tags to assign to the specified resource. Tag values can
            be empty, for example, `"MyTagKey" : ""`. You can specify multiple key-value
            pairs in a single request, with an overall maximum of 50 tags added to
            each resource.'
      required:
      - ResourceArn
      - Tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    ThresholdComparator:
      type: string
      enum:
      - GREATER_THAN
      - GREATER_THAN_OR_EQUAL_TO
    ThresholdPercentageInt:
      type: integer
      minimum: 0
      maximum: 100
    ThrottlingException:
      type: object
      properties: {}
      description: The request or operation couldn't be performed because a service
        is throttling requests. The most common source of throttling errors is creating
        resources that exceed your service limit for this resource type. Request a
        limit increase or delete unused resources if possible.
    Timestamp:
      type: string
      format: date-time
    TooManyTagsException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionMessage'
        ResourceName:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: ''
      description: ''
    UntagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ArnString'
          description: The Amazon Resource Name (ARN) of the resource. For more information
            about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _Amazon Web Services General Reference_.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The tag keys.
      required:
      - ResourceArn
      - TagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateMemberInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the Managed Blockchain network to
            which the member belongs.
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member.
        LogPublishingConfiguration:
          allOf:
          - $ref: '#/components/schemas/MemberLogPublishingConfiguration'
          description: Configuration properties for publishing to Amazon CloudWatch
            Logs.
      required:
      - NetworkId
      - MemberId
    UpdateMemberOutput:
      type: object
      properties: {}
    UpdateNodeInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network that the node is on.
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: 'The unique identifier of the member that owns the node.


            Applies only to Hyperledger Fabric.'
        NodeId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the node.
        LogPublishingConfiguration:
          allOf:
          - $ref: '#/components/schemas/NodeLogPublishingConfiguration'
          description: Configuration properties for publishing to Amazon CloudWatch
            Logs.
      required:
      - NetworkId
      - NodeId
    UpdateNodeOutput:
      type: object
      properties: {}
    UsernameString:
      type: string
      pattern: ^[a-zA-Z][a-zA-Z0-9]*$
      minLength: 1
      maxLength: 16
    VoteCount:
      type: integer
    VoteOnProposalInput:
      type: object
      properties:
        NetworkId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the network.
        ProposalId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the proposal.
        VoterMemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member casting the vote.
        Vote:
          allOf:
          - $ref: '#/components/schemas/VoteValue'
          description: The value of the vote.
      required:
      - NetworkId
      - ProposalId
      - VoterMemberId
      - Vote
    VoteOnProposalOutput:
      type: object
      properties: {}
    VoteSummary:
      type: object
      properties:
        Vote:
          allOf:
          - $ref: '#/components/schemas/VoteValue'
          description: The vote value, either `YES` or `NO`.
        MemberName:
          allOf:
          - $ref: '#/components/schemas/NetworkMemberNameString'
          description: The name of the member that cast the vote.
        MemberId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The unique identifier of the member that cast the vote.
      description: 'Properties of an individual vote that a member cast for a proposal.


        Applies only to Hyperledger Fabric.'
    VoteValue:
      type: string
      enum:
      - 'YES'
      - 'NO'
    VotingPolicy:
      type: object
      properties:
        ApprovalThresholdPolicy:
          allOf:
          - $ref: '#/components/schemas/ApprovalThresholdPolicy'
          description: Defines the rules for the network for voting on proposals,
            such as the percentage of `YES` votes required for the proposal to be
            approved and the duration of the proposal. The policy applies to all proposals
            and is specified when the network is created.
      description: 'The voting rules for the network to decide if a proposal is accepted


        Applies only to Hyperledger Fabric.'
