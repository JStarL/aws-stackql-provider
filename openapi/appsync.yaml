openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: appsync
  x-aws-serviceName: appsync
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2017-07-25'
  title: AWS AppSync
  description: |-
    AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
servers:
- description: The AWS AppSync regional endpoint
  url: https://appsync.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /v1/domainnames/{domainName}/apiassociation:
    post:
      operationId: AssociateApi
      description: |-
        Maps an endpoint to your custom domain.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiId:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    delete:
      operationId: DisassociateApi
      description: |-
        Removes an `ApiAssociation` object from a custom domain.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    get:
      operationId: GetApiAssociation
      description: |-
        Retrieves an `ApiAssociation` object.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations:
    post:
      operationId: AssociateMergedGraphqlApi
      description: |-
        Creates an association between a Merged API and source API using the source API's identifier.
      parameters:
      - name: sourceApiIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mergedApiIdentifier:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                sourceApiAssociationConfig:
                  $ref: '#/components/schemas/SourceApiAssociationConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations:
    post:
      operationId: AssociateSourceGraphqlApi
      description: |-
        Creates an association between a Merged API and source API using the Merged API's identifier.
      parameters:
      - name: mergedApiIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceApiIdentifier:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                sourceApiAssociationConfig:
                  $ref: '#/components/schemas/SourceApiAssociationConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v2/apis:
    post:
      operationId: CreateApi
      description: |-
        Creates an `Api` object. Use this operation to create an AppSync API with your preferred configuration, such as an Event API that provides real-time message publishing and message subscriptions over WebSockets.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ApiName'
                ownerContact:
                  $ref: '#/components/schemas/String'
                tags:
                  $ref: '#/components/schemas/TagMap'
                eventConfig:
                  $ref: '#/components/schemas/EventConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '402':
          description: |-
            The operation exceeded the service quota for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: ListApis
      description: |-
        Lists the APIs in your AppSync account.

        `ListApis` returns only the high level API details. For more detailed information about an API, use `GetApi`.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/ApiCaches:
    post:
      operationId: CreateApiCache
      description: |-
        Creates a cache for the GraphQL API.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ttl:
                  $ref: '#/components/schemas/Long'
                transitEncryptionEnabled:
                  $ref: '#/components/schemas/Boolean'
                atRestEncryptionEnabled:
                  $ref: '#/components/schemas/Boolean'
                apiCachingBehavior:
                  $ref: '#/components/schemas/ApiCachingBehavior'
                type:
                  $ref: '#/components/schemas/ApiCacheType'
                healthMetricsConfig:
                  $ref: '#/components/schemas/CacheHealthMetricsConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    delete:
      operationId: DeleteApiCache
      description: |-
        Deletes an `ApiCache` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetApiCache
      description: |-
        Retrieves an `ApiCache` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/apikeys:
    post:
      operationId: CreateApiKey
      description: |-
        Creates a unique key that you can distribute to clients who invoke your API.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/String'
                expires:
                  $ref: '#/components/schemas/Long'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: ListApiKeys
      description: |-
        Lists the API keys for a given API.

        API keys are deleted automatically 60 days after they expire. However, they may still be included in the response until they have actually been deleted. You can safely call `DeleteApiKey` to manually delete a key before it's automatically deleted.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v2/apis/{apiId}/channelNamespaces:
    post:
      operationId: CreateChannelNamespace
      description: |-
        Creates a `ChannelNamespace` for an `Api`.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Namespace'
                subscribeAuthModes:
                  $ref: '#/components/schemas/AuthModes'
                publishAuthModes:
                  $ref: '#/components/schemas/AuthModes'
                codeHandlers:
                  $ref: '#/components/schemas/Code'
                tags:
                  $ref: '#/components/schemas/TagMap'
                handlerConfigs:
                  $ref: '#/components/schemas/HandlerConfigs'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            A conflict with a previous successful update is detected. This typically occurs when the previous update did not have time to propagate before the next update was made. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '402':
          description: |-
            The operation exceeded the service quota for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: ListChannelNamespaces
      description: |-
        Lists the channel namespaces for a specified `Api`.

        `ListChannelNamespaces` returns only high level details for the channel namespace. To retrieve code handlers, use `GetChannelNamespace`.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/datasources:
    post:
      operationId: CreateDataSource
      description: |-
        Creates a `DataSource` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                description:
                  $ref: '#/components/schemas/String'
                type:
                  $ref: '#/components/schemas/DataSourceType'
                serviceRoleArn:
                  $ref: '#/components/schemas/String'
                dynamodbConfig:
                  $ref: '#/components/schemas/DynamodbDataSourceConfig'
                lambdaConfig:
                  $ref: '#/components/schemas/LambdaDataSourceConfig'
                elasticsearchConfig:
                  $ref: '#/components/schemas/ElasticsearchDataSourceConfig'
                openSearchServiceConfig:
                  $ref: '#/components/schemas/OpenSearchServiceDataSourceConfig'
                httpConfig:
                  $ref: '#/components/schemas/HttpDataSourceConfig'
                relationalDatabaseConfig:
                  $ref: '#/components/schemas/RelationalDatabaseDataSourceConfig'
                eventBridgeConfig:
                  $ref: '#/components/schemas/EventBridgeDataSourceConfig'
                metricsConfig:
                  $ref: '#/components/schemas/DataSourceLevelMetricsConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: ListDataSources
      description: |-
        Lists the data sources for a given API.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/domainnames:
    post:
      operationId: CreateDomainName
      description: |-
        Creates a custom `DomainName` object.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domainName:
                  $ref: '#/components/schemas/DomainName'
                certificateArn:
                  $ref: '#/components/schemas/CertificateArn'
                description:
                  $ref: '#/components/schemas/Description'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
    get:
      operationId: ListDomainNames
      description: |-
        Lists multiple custom domain names.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
  /v1/apis/{apiId}/functions:
    post:
      operationId: CreateFunction
      description: |-
        Creates a `Function` object.

        A function is a reusable entity. You can use multiple functions to compose the resolver logic.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                description:
                  $ref: '#/components/schemas/String'
                dataSourceName:
                  $ref: '#/components/schemas/ResourceName'
                requestMappingTemplate:
                  $ref: '#/components/schemas/MappingTemplate'
                responseMappingTemplate:
                  $ref: '#/components/schemas/MappingTemplate'
                functionVersion:
                  $ref: '#/components/schemas/String'
                syncConfig:
                  $ref: '#/components/schemas/SyncConfig'
                maxBatchSize:
                  $ref: '#/components/schemas/MaxBatchSize'
                runtime:
                  $ref: '#/components/schemas/AppSyncRuntime'
                code:
                  $ref: '#/components/schemas/Code'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: ListFunctions
      description: |-
        List multiple functions.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis:
    post:
      operationId: CreateGraphqlApi
      description: |-
        Creates a `GraphqlApi` object.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                logConfig:
                  $ref: '#/components/schemas/LogConfig'
                authenticationType:
                  $ref: '#/components/schemas/AuthenticationType'
                userPoolConfig:
                  $ref: '#/components/schemas/UserPoolConfig'
                openIDConnectConfig:
                  $ref: '#/components/schemas/OpenIDConnectConfig'
                tags:
                  $ref: '#/components/schemas/TagMap'
                additionalAuthenticationProviders:
                  $ref: '#/components/schemas/AdditionalAuthenticationProviders'
                xrayEnabled:
                  $ref: '#/components/schemas/Boolean'
                lambdaAuthorizerConfig:
                  $ref: '#/components/schemas/LambdaAuthorizerConfig'
                apiType:
                  $ref: '#/components/schemas/GraphQLApiType'
                mergedApiExecutionRoleArn:
                  $ref: '#/components/schemas/String'
                visibility:
                  $ref: '#/components/schemas/GraphQLApiVisibility'
                ownerContact:
                  $ref: '#/components/schemas/String'
                introspectionConfig:
                  $ref: '#/components/schemas/GraphQLApiIntrospectionConfig'
                queryDepthLimit:
                  $ref: '#/components/schemas/QueryDepthLimit'
                resolverCountLimit:
                  $ref: '#/components/schemas/ResolverCountLimit'
                enhancedMetricsConfig:
                  $ref: '#/components/schemas/EnhancedMetricsConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: ListGraphqlApis
      description: |-
        Lists your GraphQL APIs.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: apiType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GraphQLApiType'
      - name: owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Ownership'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/types/{typeName}/resolvers:
    post:
      operationId: CreateResolver
      description: |-
        Creates a `Resolver` object.

        A resolver converts incoming requests into a format that a data source can understand, and converts the data source's responses into GraphQL.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: typeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fieldName:
                  $ref: '#/components/schemas/ResourceName'
                dataSourceName:
                  $ref: '#/components/schemas/ResourceName'
                requestMappingTemplate:
                  $ref: '#/components/schemas/MappingTemplate'
                responseMappingTemplate:
                  $ref: '#/components/schemas/MappingTemplate'
                kind:
                  $ref: '#/components/schemas/ResolverKind'
                pipelineConfig:
                  $ref: '#/components/schemas/PipelineConfig'
                syncConfig:
                  $ref: '#/components/schemas/SyncConfig'
                cachingConfig:
                  $ref: '#/components/schemas/CachingConfig'
                maxBatchSize:
                  $ref: '#/components/schemas/MaxBatchSize'
                runtime:
                  $ref: '#/components/schemas/AppSyncRuntime'
                code:
                  $ref: '#/components/schemas/Code'
                metricsConfig:
                  $ref: '#/components/schemas/ResolverLevelMetricsConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: ListResolvers
      description: |-
        Lists the resolvers for a given API and type.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: typeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/types:
    post:
      operationId: CreateType
      description: |-
        Creates a `Type` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                definition:
                  $ref: '#/components/schemas/String'
                format:
                  $ref: '#/components/schemas/TypeDefinitionFormat'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: ListTypes
      description: |-
        Lists the types for a given API.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TypeDefinitionFormat'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v2/apis/{apiId}:
    delete:
      operationId: DeleteApi
      description: |-
        Deletes an `Api` object
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetApi
      description: |-
        Retrieves an `Api` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: UpdateApi
      description: |-
        Updates an `Api`.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ApiName'
                ownerContact:
                  $ref: '#/components/schemas/String'
                eventConfig:
                  $ref: '#/components/schemas/EventConfig'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/apikeys/{id}:
    delete:
      operationId: DeleteApiKey
      description: |-
        Deletes an API key.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: UpdateApiKey
      description: |-
        Updates an API key. You can update the key as long as it's not deleted.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/String'
                expires:
                  $ref: '#/components/schemas/Long'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v2/apis/{apiId}/channelNamespaces/{name}:
    delete:
      operationId: DeleteChannelNamespace
      description: |-
        Deletes a `ChannelNamespace`.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Namespace'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetChannelNamespace
      description: |-
        Retrieves the channel namespace for a specified `Api`.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Namespace'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: UpdateChannelNamespace
      description: |-
        Updates a `ChannelNamespace` associated with an `Api`.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Namespace'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscribeAuthModes:
                  $ref: '#/components/schemas/AuthModes'
                publishAuthModes:
                  $ref: '#/components/schemas/AuthModes'
                codeHandlers:
                  $ref: '#/components/schemas/Code'
                handlerConfigs:
                  $ref: '#/components/schemas/HandlerConfigs'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/datasources/{name}:
    delete:
      operationId: DeleteDataSource
      description: |-
        Deletes a `DataSource` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetDataSource
      description: |-
        Retrieves a `DataSource` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: UpdateDataSource
      description: |-
        Updates a `DataSource` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/String'
                type:
                  $ref: '#/components/schemas/DataSourceType'
                serviceRoleArn:
                  $ref: '#/components/schemas/String'
                dynamodbConfig:
                  $ref: '#/components/schemas/DynamodbDataSourceConfig'
                lambdaConfig:
                  $ref: '#/components/schemas/LambdaDataSourceConfig'
                elasticsearchConfig:
                  $ref: '#/components/schemas/ElasticsearchDataSourceConfig'
                openSearchServiceConfig:
                  $ref: '#/components/schemas/OpenSearchServiceDataSourceConfig'
                httpConfig:
                  $ref: '#/components/schemas/HttpDataSourceConfig'
                relationalDatabaseConfig:
                  $ref: '#/components/schemas/RelationalDatabaseDataSourceConfig'
                eventBridgeConfig:
                  $ref: '#/components/schemas/EventBridgeDataSourceConfig'
                metricsConfig:
                  $ref: '#/components/schemas/DataSourceLevelMetricsConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/domainnames/{domainName}:
    delete:
      operationId: DeleteDomainName
      description: |-
        Deletes a custom `DomainName` object.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    get:
      operationId: GetDomainName
      description: |-
        Retrieves a custom `DomainName` object.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      operationId: UpdateDomainName
      description: |-
        Updates a custom `DomainName` object.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /v1/apis/{apiId}/functions/{functionId}:
    delete:
      operationId: DeleteFunction
      description: |-
        Deletes a `Function`.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: functionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetFunction
      description: |-
        Get a `Function`.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: functionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      responses:
        '200': {}
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: UpdateFunction
      description: |-
        Updates a `Function` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: functionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceName'
                description:
                  $ref: '#/components/schemas/String'
                dataSourceName:
                  $ref: '#/components/schemas/ResourceName'
                requestMappingTemplate:
                  $ref: '#/components/schemas/MappingTemplate'
                responseMappingTemplate:
                  $ref: '#/components/schemas/MappingTemplate'
                functionVersion:
                  $ref: '#/components/schemas/String'
                syncConfig:
                  $ref: '#/components/schemas/SyncConfig'
                maxBatchSize:
                  $ref: '#/components/schemas/MaxBatchSize'
                runtime:
                  $ref: '#/components/schemas/AppSyncRuntime'
                code:
                  $ref: '#/components/schemas/Code'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}:
    delete:
      operationId: DeleteGraphqlApi
      description: |-
        Deletes a `GraphqlApi` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetGraphqlApi
      description: |-
        Retrieves a `GraphqlApi` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: UpdateGraphqlApi
      description: |-
        Updates a `GraphqlApi` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                logConfig:
                  $ref: '#/components/schemas/LogConfig'
                authenticationType:
                  $ref: '#/components/schemas/AuthenticationType'
                userPoolConfig:
                  $ref: '#/components/schemas/UserPoolConfig'
                openIDConnectConfig:
                  $ref: '#/components/schemas/OpenIDConnectConfig'
                additionalAuthenticationProviders:
                  $ref: '#/components/schemas/AdditionalAuthenticationProviders'
                xrayEnabled:
                  $ref: '#/components/schemas/Boolean'
                lambdaAuthorizerConfig:
                  $ref: '#/components/schemas/LambdaAuthorizerConfig'
                mergedApiExecutionRoleArn:
                  $ref: '#/components/schemas/String'
                ownerContact:
                  $ref: '#/components/schemas/String'
                introspectionConfig:
                  $ref: '#/components/schemas/GraphQLApiIntrospectionConfig'
                queryDepthLimit:
                  $ref: '#/components/schemas/QueryDepthLimit'
                resolverCountLimit:
                  $ref: '#/components/schemas/ResolverCountLimit'
                enhancedMetricsConfig:
                  $ref: '#/components/schemas/EnhancedMetricsConfig'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}:
    delete:
      operationId: DeleteResolver
      description: |-
        Deletes a `Resolver` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: typeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: fieldName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetResolver
      description: |-
        Retrieves a `Resolver` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: typeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: fieldName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      responses:
        '200': {}
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: UpdateResolver
      description: |-
        Updates a `Resolver` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: typeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: fieldName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dataSourceName:
                  $ref: '#/components/schemas/ResourceName'
                requestMappingTemplate:
                  $ref: '#/components/schemas/MappingTemplate'
                responseMappingTemplate:
                  $ref: '#/components/schemas/MappingTemplate'
                kind:
                  $ref: '#/components/schemas/ResolverKind'
                pipelineConfig:
                  $ref: '#/components/schemas/PipelineConfig'
                syncConfig:
                  $ref: '#/components/schemas/SyncConfig'
                cachingConfig:
                  $ref: '#/components/schemas/CachingConfig'
                maxBatchSize:
                  $ref: '#/components/schemas/MaxBatchSize'
                runtime:
                  $ref: '#/components/schemas/AppSyncRuntime'
                code:
                  $ref: '#/components/schemas/Code'
                metricsConfig:
                  $ref: '#/components/schemas/ResolverLevelMetricsConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/types/{typeName}:
    delete:
      operationId: DeleteType
      description: |-
        Deletes a `Type` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: typeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetType
      description: |-
        Retrieves a `Type` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: typeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TypeDefinitionFormat'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: UpdateType
      description: |-
        Updates a `Type` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: typeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                definition:
                  $ref: '#/components/schemas/String'
                format:
                  $ref: '#/components/schemas/TypeDefinitionFormat'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations/{associationId}:
    delete:
      operationId: DisassociateMergedGraphqlApi
      description: |-
        Deletes an association between a Merged API and source API using the source API's identifier and the association ID.
      parameters:
      - name: sourceApiIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: associationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}:
    delete:
      operationId: DisassociateSourceGraphqlApi
      description: |-
        Deletes an association between a Merged API and source API using the Merged API's identifier and the association ID.
      parameters:
      - name: mergedApiIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: associationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetSourceApiAssociation
      description: |-
        Retrieves a `SourceApiAssociation` object.
      parameters:
      - name: mergedApiIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: associationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: UpdateSourceApiAssociation
      description: |-
        Updates some of the configuration choices of a particular source API association.
      parameters:
      - name: associationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: mergedApiIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/String'
                sourceApiAssociationConfig:
                  $ref: '#/components/schemas/SourceApiAssociationConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/dataplane-evaluatecode:
    post:
      operationId: EvaluateCode
      description: |-
        Evaluates the given code and returns the response. The code definition requirements depend on the specified runtime. For `APPSYNC_JS` runtimes, the code defines the request and response functions. The request function takes the incoming request after a GraphQL operation is parsed and converts it into a request configuration for the selected data source operation. The response function interprets responses from the data source and maps it to the shape of the GraphQL field output type.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                runtime:
                  $ref: '#/components/schemas/AppSyncRuntime'
                code:
                  $ref: '#/components/schemas/Code'
                context:
                  $ref: '#/components/schemas/Context'
                function:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
  /v1/dataplane-evaluatetemplate:
    post:
      operationId: EvaluateMappingTemplate
      description: |-
        Evaluates a given template and returns the response. The mapping template can be a request or response template.

        Request templates take the incoming request after a GraphQL operation is parsed and convert it into a request configuration for the selected data source operation. Response templates interpret responses from the data source and map it to the shape of the GraphQL field output type.

        Mapping templates are written in the Apache Velocity Template Language (VTL).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                template:
                  $ref: '#/components/schemas/Template'
                context:
                  $ref: '#/components/schemas/Context'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
  /v1/apis/{apiId}/FlushCache:
    delete:
      operationId: FlushApiCache
      description: |-
        Flushes an `ApiCache` object.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/datasources/introspections/{introspectionId}:
    get:
      operationId: GetDataSourceIntrospection
      description: |-
        Retrieves the record of an existing introspection. If the retrieval is successful, the result of the instrospection will also be returned. If the retrieval fails the operation, an error message will be returned instead.
      parameters:
      - name: introspectionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: includeModelsSDL
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /v1/apis/{apiId}/environmentVariables:
    get:
      operationId: GetGraphqlApiEnvironmentVariables
      description: |-
        Retrieves the list of environmental variable key-value pairs associated with an API by its ID value.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    put:
      operationId: PutGraphqlApiEnvironmentVariables
      description: |-
        Creates a list of environmental variables in an API by its ID value.

        When creating an environmental variable, it must follow the constraints below:

          * Both JavaScript and VTL templates support environmental variables.

          * Environmental variables are not evaluated before function invocation.

          * Environmental variables only support string values.

          * Any defined value in an environmental variable is considered a string literal and not expanded.

          * Variable evaluations should ideally be performed in the function code.

        When creating an environmental variable key-value pair, it must follow the additional constraints below:

          * Keys must begin with a letter.

          * Keys must be at least two characters long.

          * Keys can only contain letters, numbers, and the underscore character (_).

          * Values can be up to 512 characters long.

          * You can configure up to 50 key-value pairs in a GraphQL API.

        You can create a list of environmental variables by adding it to the `environmentVariables` payload as a list in the format `{"key1":"value1","key2":"value2", …}`. Note that each call of the `PutGraphqlApiEnvironmentVariables` action will result in the overwriting of the existing environmental variable list of that API. This means the existing environmental variables will be lost. To avoid this, you must include all existing and new environmental variables in the list each time you call this action.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                environmentVariables:
                  $ref: '#/components/schemas/EnvironmentVariableMap'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/schema:
    get:
      operationId: GetIntrospectionSchema
      description: |-
        Retrieves the introspection schema for a GraphQL API.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/OutputType'
      - name: includeDirectives
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/BooleanValue'
      responses:
        '200': {}
        '400':
          description: |-
            The GraphQL schema is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphQLSchemaException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/schemacreation:
    get:
      operationId: GetSchemaCreationStatus
      description: |-
        Retrieves the current status of a schema creation operation.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: StartSchemaCreation
      description: |-
        Adds a new schema to your GraphQL API.

        This operation is asynchronous. Use to determine when it has completed.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                definition:
                  $ref: '#/components/schemas/Blob'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/functions/{functionId}/resolvers:
    get:
      operationId: ListResolversByFunction
      description: |-
        List the resolvers that are associated with a specific function.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: functionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/sourceApiAssociations:
    get:
      operationId: ListSourceApiAssociations
      description: |-
        Lists the `SourceApiAssociationSummary` data.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Lists the tags for a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: TagResource
      description: |-
        Tags a resource with user-supplied tags.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    delete:
      operationId: UntagResource
      description: |-
        Untags a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have access to perform this operation on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/types:
    get:
      operationId: ListTypesByAssociation
      description: |-
        Lists `Type` objects by the source API association ID.
      parameters:
      - name: mergedApiIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: associationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TypeDefinitionFormat'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/datasources/introspections:
    post:
      operationId: StartDataSourceIntrospection
      description: |-
        Creates a new introspection. Returns the `introspectionId` of the new introspection after its creation.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rdsDataApiConfig:
                  $ref: '#/components/schemas/RdsDataApiConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/merge:
    post:
      operationId: StartSchemaMerge
      description: |-
        Initiates a merge operation. Returns a status that shows the result of the merge operation.
      parameters:
      - name: associationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: mergedApiIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /v1/apis/{apiId}/ApiCaches/update:
    post:
      operationId: UpdateApiCache
      description: |-
        Updates the cache for the GraphQL API.
      parameters:
      - name: apiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ttl:
                  $ref: '#/components/schemas/Long'
                apiCachingBehavior:
                  $ref: '#/components/schemas/ApiCachingBehavior'
                type:
                  $ref: '#/components/schemas/ApiCacheType'
                healthMetricsConfig:
                  $ref: '#/components/schemas/CacheHealthMetricsConfig'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Another modification is in progress at this time and it must complete before you can make your change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '500':
          description: |-
            An internal AppSync error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource, and then try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            You aren't authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: You don't have access to perform this operation on this resource.
    AdditionalAuthenticationProvider:
      type: object
      properties:
        authenticationType:
          allOf:
          - $ref: '#/components/schemas/AuthenticationType'
          description: 'The authentication type: API key, Identity and Access Management
            (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.'
        openIDConnectConfig:
          allOf:
          - $ref: '#/components/schemas/OpenIDConnectConfig'
          description: The OIDC configuration.
        userPoolConfig:
          allOf:
          - $ref: '#/components/schemas/CognitoUserPoolConfig'
          description: The Amazon Cognito user pool configuration.
        lambdaAuthorizerConfig:
          allOf:
          - $ref: '#/components/schemas/LambdaAuthorizerConfig'
          description: Configuration for Lambda function authorization.
      description: Describes an additional authentication provider.
    AdditionalAuthenticationProviders:
      type: array
      items:
        $ref: '#/components/schemas/AdditionalAuthenticationProvider'
    Api:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Api` ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ApiName'
          description: The name of the `Api`.
        ownerContact:
          allOf:
          - $ref: '#/components/schemas/OwnerContact'
          description: The owner contact information for the `Api`
        tags:
          $ref: '#/components/schemas/TagMap'
        dns:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The DNS records for the API. This will include an HTTP and
            a real-time endpoint.
        apiArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) for the `Api`.
        created:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the `Api` was created.
        xrayEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A flag indicating whether to use X-Ray tracing for this `Api`.
        wafWebAclArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the WAF web access control
            list (web ACL) associated with this `Api`, if one exists.
        eventConfig:
          allOf:
          - $ref: '#/components/schemas/EventConfig'
          description: The Event API configuration. This includes the default authorization
            configuration for connecting, publishing, and subscribing to an Event
            API.
      description: Describes an AppSync API. You can use `Api` for an AppSync API
        with your preferred configuration, such as an Event API that provides real-time
        message publishing and message subscriptions over WebSockets.
    ApiAssociation:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain name.
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        associationStatus:
          allOf:
          - $ref: '#/components/schemas/AssociationStatus'
          description: "Identifies the status of an association.\n\n  * **PROCESSING**\
            \ : The API association is being created. You cannot modify association\
            \ requests during processing.\n\n  * **SUCCESS** : The API association\
            \ was successful. You can modify associations after success.\n\n  * **FAILED**\
            \ : The API association has failed. You can modify associations after\
            \ failure."
        deploymentDetail:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the last deployment status.
      description: Describes an `ApiAssociation` object.
    ApiCache:
      type: object
      properties:
        ttl:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: 'TTL in seconds for cache entries.


            Valid values are 1–3,600 seconds.'
        apiCachingBehavior:
          allOf:
          - $ref: '#/components/schemas/ApiCachingBehavior'
          description: "Caching behavior.\n\n  * **FULL_REQUEST_CACHING** : All requests\
            \ from the same user are cached. Individual resolvers are automatically\
            \ cached. All API calls will try to return responses from the cache.\n\
            \n  * **PER_RESOLVER_CACHING** : Individual resolvers that you specify\
            \ are cached.\n\n  * **OPERATION_LEVEL_CACHING** : Full requests are cached\
            \ together and returned without executing resolvers."
        transitEncryptionEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Transit encryption flag when connecting to cache. You cannot
            update this setting after creation.
        atRestEncryptionEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: At-rest encryption flag for cache. You cannot update this setting
            after creation.
        type:
          allOf:
          - $ref: '#/components/schemas/ApiCacheType'
          description: "The cache instance type. Valid values are\n\n  * `SMALL`\n\
            \n  * `MEDIUM`\n\n  * `LARGE`\n\n  * `XLARGE`\n\n  * `LARGE_2X`\n\n  *\
            \ `LARGE_4X`\n\n  * `LARGE_8X` (not available in all regions)\n\n  * `LARGE_12X`\n\
            \nHistorically, instance types were identified by an EC2-style value.\
            \ As of July 2020, this is deprecated, and the generic identifiers above\
            \ should be used.\n\nThe following legacy instance types are available,\
            \ but their use is discouraged:\n\n  * **T2_SMALL** : A t2.small instance\
            \ type.\n\n  * **T2_MEDIUM** : A t2.medium instance type.\n\n  * **R4_LARGE**\
            \ : A r4.large instance type.\n\n  * **R4_XLARGE** : A r4.xlarge instance\
            \ type.\n\n  * **R4_2XLARGE** : A r4.2xlarge instance type.\n\n  * **R4_4XLARGE**\
            \ : A r4.4xlarge instance type.\n\n  * **R4_8XLARGE** : A r4.8xlarge instance\
            \ type."
        status:
          allOf:
          - $ref: '#/components/schemas/ApiCacheStatus'
          description: "The cache instance status.\n\n  * **AVAILABLE** : The instance\
            \ is available for use.\n\n  * **CREATING** : The instance is currently\
            \ creating.\n\n  * **DELETING** : The instance is currently deleting.\n\
            \n  * **MODIFYING** : The instance is currently modifying.\n\n  * **FAILED**\
            \ : The instance has failed creation."
        healthMetricsConfig:
          allOf:
          - $ref: '#/components/schemas/CacheHealthMetricsConfig'
          description: "Controls how cache health metrics will be emitted to CloudWatch.\
            \ Cache health metrics include:\n\n  * NetworkBandwidthOutAllowanceExceeded:\
            \ The network packets dropped because the throughput exceeded the aggregated\
            \ bandwidth limit. This is useful for diagnosing bottlenecks in a cache\
            \ configuration.\n\n  * EngineCPUUtilization: The CPU utilization (percentage)\
            \ allocated to the Redis process. This is useful for diagnosing bottlenecks\
            \ in a cache configuration.\n\nMetrics will be recorded by API ID. You\
            \ can set the value to `ENABLED` or `DISABLED`."
      description: The `ApiCache` object.
    ApiCacheStatus:
      type: string
      enum:
      - AVAILABLE
      - CREATING
      - DELETING
      - MODIFYING
      - FAILED
    ApiCacheType:
      type: string
      enum:
      - T2_SMALL
      - T2_MEDIUM
      - R4_LARGE
      - R4_XLARGE
      - R4_2XLARGE
      - R4_4XLARGE
      - R4_8XLARGE
      - SMALL
      - MEDIUM
      - LARGE
      - XLARGE
      - LARGE_2X
      - LARGE_4X
      - LARGE_8X
      - LARGE_12X
    ApiCachingBehavior:
      type: string
      enum:
      - FULL_REQUEST_CACHING
      - PER_RESOLVER_CACHING
      - OPERATION_LEVEL_CACHING
    ApiKey:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API key ID.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the purpose of the API key.
        expires:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The time after which the API key expires. The date is represented
            as seconds since the epoch, rounded down to the nearest hour.
        deletes:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The time after which the API key is deleted. The date is represented
            as seconds since the epoch, rounded down to the nearest hour.
      description: "Describes an API key.\n\nCustomers invoke AppSync GraphQL API\
        \ operations with API keys as an identity mechanism. There are two key versions:\n\
        \n**da1** : We introduced this version at launch in November 2017\\. These\
        \ keys always expire after 7 days. Amazon DynamoDB TTL manages key expiration.\
        \ These keys ceased to be valid after February 21, 2018, and they should no\
        \ longer be used.\n\n  * `ListApiKeys` returns the expiration time in milliseconds.\n\
        \n  * `CreateApiKey` returns the expiration time in milliseconds.\n\n  * `UpdateApiKey`\
        \ is not available for this key version.\n\n  * `DeleteApiKey` deletes the\
        \ item from the table.\n\n  * Expiration is stored in DynamoDB as milliseconds.\
        \ This results in a bug where keys are not automatically deleted because DynamoDB\
        \ expects the TTL to be stored in seconds. As a one-time action, we deleted\
        \ these keys from the table on February 21, 2018.\n\n**da2** : We introduced\
        \ this version in February 2018 when AppSync added support to extend key expiration.\n\
        \n  * `ListApiKeys` returns the expiration time and deletion time in seconds.\n\
        \n  * `CreateApiKey` returns the expiration time and deletion time in seconds\
        \ and accepts a user-provided expiration time in seconds.\n\n  * `UpdateApiKey`\
        \ returns the expiration time and and deletion time in seconds and accepts\
        \ a user-provided expiration time in seconds. Expired API keys are kept for\
        \ 60 days after the expiration time. You can update the key expiration time\
        \ as long as the key isn't deleted.\n\n  * `DeleteApiKey` deletes the item\
        \ from the table.\n\n  * Expiration is stored in DynamoDB as seconds. After\
        \ the expiration time, using the key to authenticate will fail. However, you\
        \ can reinstate the key before deletion.\n\n  * Deletion is stored in DynamoDB\
        \ as seconds. The key is deleted after deletion time."
    ApiKeyLimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The API key exceeded a limit. Try your request again.
    ApiKeyValidityOutOfBoundsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The API key expiration must be set to a value between 1 and 365
        days from creation (for `CreateApiKey`) or from update (for `UpdateApiKey`).
    ApiKeys:
      type: array
      items:
        $ref: '#/components/schemas/ApiKey'
    ApiLimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The GraphQL API exceeded a limit. Try your request again.
    ApiName:
      type: string
      pattern: ^[A-Za-z0-9_\-\ ]+$
      minLength: 1
      maxLength: 50
    Apis:
      type: array
      items:
        $ref: '#/components/schemas/Api'
    AppSyncRuntime:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RuntimeName'
          description: The `name` of the runtime to use. Currently, the only allowed
            value is `APPSYNC_JS`.
        runtimeVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `version` of the runtime to use. Currently, the only allowed
            version is `1.0.0`.
      required:
      - name
      - runtimeVersion
      description: Describes a runtime used by an Amazon Web Services AppSync pipeline
        resolver or Amazon Web Services AppSync function. Specifies the name and version
        of the runtime to use. Note that if a runtime is specified, code must also
        be specified.
    AssociateApiRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain name.
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID. Private APIs can not be associated with custom
            domains.
      required:
      - domainName
      - apiId
    AssociateApiResponse:
      type: object
      properties:
        apiAssociation:
          allOf:
          - $ref: '#/components/schemas/ApiAssociation'
          description: The `ApiAssociation` object.
    AssociateMergedGraphqlApiRequest:
      type: object
      properties:
        sourceApiIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the AppSync Source API. This is generated
            by the AppSync service. In most cases, source APIs (especially in your
            account) only require the API ID value or ARN of the source API. However,
            source APIs from other accounts (cross-account use cases) strictly require
            the full resource ARN of the source API.
        mergedApiIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the AppSync Merged API. This is generated
            by the AppSync service. In most cases, Merged APIs (especially in your
            account) only require the API ID value or ARN of the merged API. However,
            Merged APIs in other accounts (cross-account use cases) strictly require
            the full resource ARN of the merged API.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description field.
        sourceApiAssociationConfig:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociationConfig'
          description: The `SourceApiAssociationConfig` object data.
      required:
      - sourceApiIdentifier
      - mergedApiIdentifier
    AssociateMergedGraphqlApiResponse:
      type: object
      properties:
        sourceApiAssociation:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociation'
          description: The `SourceApiAssociation` object data.
    AssociateSourceGraphqlApiRequest:
      type: object
      properties:
        mergedApiIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the AppSync Merged API. This is generated
            by the AppSync service. In most cases, Merged APIs (especially in your
            account) only require the API ID value or ARN of the merged API. However,
            Merged APIs in other accounts (cross-account use cases) strictly require
            the full resource ARN of the merged API.
        sourceApiIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the AppSync Source API. This is generated
            by the AppSync service. In most cases, source APIs (especially in your
            account) only require the API ID value or ARN of the source API. However,
            source APIs from other accounts (cross-account use cases) strictly require
            the full resource ARN of the source API.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description field.
        sourceApiAssociationConfig:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociationConfig'
          description: The `SourceApiAssociationConfig` object data.
      required:
      - mergedApiIdentifier
      - sourceApiIdentifier
    AssociateSourceGraphqlApiResponse:
      type: object
      properties:
        sourceApiAssociation:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociation'
          description: The `SourceApiAssociation` object data.
    AssociationStatus:
      type: string
      enum:
      - PROCESSING
      - FAILED
      - SUCCESS
    AuthMode:
      type: object
      properties:
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthenticationType'
          description: The authorization type.
      required:
      - authType
      description: Describes an authorization configuration. Use `AuthMode` to specify
        the publishing and subscription authorization configuration for an Event API.
    AuthModes:
      type: array
      items:
        $ref: '#/components/schemas/AuthMode'
    AuthProvider:
      type: object
      properties:
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthenticationType'
          description: The authorization type.
        cognitoConfig:
          allOf:
          - $ref: '#/components/schemas/CognitoConfig'
          description: Describes an Amazon Cognito user pool configuration.
        openIDConnectConfig:
          $ref: '#/components/schemas/OpenIDConnectConfig'
        lambdaAuthorizerConfig:
          $ref: '#/components/schemas/LambdaAuthorizerConfig'
      required:
      - authType
      description: Describes an authorization provider.
    AuthProviders:
      type: array
      items:
        $ref: '#/components/schemas/AuthProvider'
    AuthenticationType:
      type: string
      enum:
      - API_KEY
      - AWS_IAM
      - AMAZON_COGNITO_USER_POOLS
      - OPENID_CONNECT
      - AWS_LAMBDA
    AuthorizationConfig:
      type: object
      properties:
        authorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          description: "The authorization type that the HTTP endpoint requires.\n\n\
            \  * **AWS_IAM** : The authorization type is Signature Version 4 (SigV4)."
        awsIamConfig:
          allOf:
          - $ref: '#/components/schemas/AwsIamConfig'
          description: The Identity and Access Management (IAM) settings.
      required:
      - authorizationType
      description: The authorization configuration in case the HTTP endpoint requires
        authorization.
    AuthorizationType:
      type: string
      enum:
      - AWS_IAM
    AwsIamConfig:
      type: object
      properties:
        signingRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The signing Amazon Web Services Region for IAM authorization.
        signingServiceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The signing service name for IAM authorization.
      description: The Identity and Access Management (IAM) configuration.
    BadRequestDetail:
      type: object
      properties:
        codeErrors:
          allOf:
          - $ref: '#/components/schemas/CodeErrors'
          description: Contains the list of errors in the request.
      description: Provides further details for the reason behind the bad request.
        For reason type `CODE_ERROR`, the detail will contain a list of code errors.
    BadRequestException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        reason:
          $ref: '#/components/schemas/BadRequestReason'
        detail:
          $ref: '#/components/schemas/BadRequestDetail'
      description: The request is not well formed. For example, a value is invalid
        or a required field is missing. Check the field values, and then try again.
    BadRequestReason:
      type: string
      enum:
      - CODE_ERROR
      description: "<p>Provides context for the cause of the bad request. The only\
        \ supported value is\n            <code>CODE_ERROR</code>.</p>"
    Blob:
      type: string
      format: byte
    Boolean:
      type: boolean
      default: false
    BooleanValue:
      type: boolean
    CacheHealthMetricsConfig:
      type: string
      enum:
      - ENABLED
      - DISABLED
    CachingConfig:
      type: object
      properties:
        ttl:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: 'The TTL in seconds for a resolver that has caching activated.


            Valid values are 1–3,600 seconds.'
        cachingKeys:
          allOf:
          - $ref: '#/components/schemas/CachingKeys'
          description: 'The caching keys for a resolver that has caching activated.


            Valid values are entries from the `$context.arguments`, `$context.source`,
            and `$context.identity` maps.'
      required:
      - ttl
      description: The caching configuration for a resolver that has caching activated.
    CachingKeys:
      type: array
      items:
        $ref: '#/components/schemas/String'
    CertificateArn:
      type: string
      pattern: ^arn:[a-z-]*:(acm|iam):[a-z0-9-]*:\d{12}:(certificate|server-certificate)/[0-9A-Za-z_/-]*$
      minLength: 20
      maxLength: 2048
    ChannelNamespace:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Api` ID.
        name:
          allOf:
          - $ref: '#/components/schemas/Namespace'
          description: The name of the channel namespace. This name must be unique
            within the `Api`.
        subscribeAuthModes:
          allOf:
          - $ref: '#/components/schemas/AuthModes'
          description: The authorization mode to use for subscribing to messages on
            the channel namespace. This configuration overrides the default `Api`authorization
            configuration.
        publishAuthModes:
          allOf:
          - $ref: '#/components/schemas/AuthModes'
          description: The authorization mode to use for publishing messages on the
            channel namespace. This configuration overrides the default `Api`authorization
            configuration.
        codeHandlers:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The event handler functions that run custom business logic
            to process published events and subscribe requests.
        tags:
          $ref: '#/components/schemas/TagMap'
        channelNamespaceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) for the `ChannelNamespace`.
        created:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the `ChannelNamespace` was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the `ChannelNamespace` was last changed.
        handlerConfigs:
          allOf:
          - $ref: '#/components/schemas/HandlerConfigs'
          description: The configuration for the `OnPublish` and `OnSubscribe` handlers.
      description: Describes a channel namespace associated with an `Api`. The `ChannelNamespace`
        contains the definitions for code handlers for the `Api`.
    ChannelNamespaces:
      type: array
      items:
        $ref: '#/components/schemas/ChannelNamespace'
    Code:
      type: string
      minLength: 1
      maxLength: 32768
    CodeError:
      type: object
      properties:
        errorType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The type of code error.


            Examples include, but aren''t limited to: `LINT_ERROR`, `PARSER_ERROR`.'
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'A user presentable error.


            Examples include, but aren''t limited to: `Parsing error: Unterminated
            string literal`.'
        location:
          allOf:
          - $ref: '#/components/schemas/CodeErrorLocation'
          description: The line, column, and span location of the error in the code.
      description: Describes an AppSync error.
    CodeErrorColumn:
      type: integer
      default: 0
    CodeErrorLine:
      type: integer
      default: 0
    CodeErrorLocation:
      type: object
      properties:
        line:
          allOf:
          - $ref: '#/components/schemas/CodeErrorLine'
          description: The line number in the code. Defaults to `0` if unknown.
        column:
          allOf:
          - $ref: '#/components/schemas/CodeErrorColumn'
          description: The column number in the code. Defaults to `0` if unknown.
        span:
          allOf:
          - $ref: '#/components/schemas/CodeErrorSpan'
          description: The span/length of the error. Defaults to `-1` if unknown.
      description: Describes the location of the error in a code sample.
    CodeErrorSpan:
      type: integer
      default: 0
    CodeErrors:
      type: array
      items:
        $ref: '#/components/schemas/CodeError'
    CognitoConfig:
      type: object
      properties:
        userPoolId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user pool ID.
        awsRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Region in which the user pool was created.
        appIdClientRegex:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A regular expression for validating the incoming Amazon Cognito
            user pool app client ID. If this value isn't set, no filtering is applied.
      required:
      - userPoolId
      - awsRegion
      description: Describes an Amazon Cognito configuration.
    CognitoUserPoolConfig:
      type: object
      properties:
        userPoolId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user pool ID.
        awsRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Region in which the user pool was created.
        appIdClientRegex:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A regular expression for validating the incoming Amazon Cognito
            user pool app client ID. If this value isn't set, no filtering is applied.
      required:
      - userPoolId
      - awsRegion
      description: Describes an Amazon Cognito user pool configuration.
    ConcurrentModificationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: Another modification is in progress at this time and it must complete
        before you can make your change.
    ConflictDetectionType:
      type: string
      enum:
      - VERSION
      - NONE
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: A conflict with a previous successful update is detected. This
        typically occurs when the previous update did not have time to propagate before
        the next update was made. A retry (with appropriate backoff logic) is the
        recommended response to this exception.
    ConflictHandlerType:
      type: string
      enum:
      - OPTIMISTIC_CONCURRENCY
      - LAMBDA
      - AUTOMERGE
      - NONE
    Context:
      type: string
      pattern: ^[\s\S]*$
      minLength: 2
      maxLength: 28000
    CreateApiCacheRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The GraphQL API ID.
        ttl:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: 'TTL in seconds for cache entries.


            Valid values are 1–3,600 seconds.'
        transitEncryptionEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Transit encryption flag when connecting to cache. You cannot
            update this setting after creation.
        atRestEncryptionEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: At-rest encryption flag for cache. You cannot update this setting
            after creation.
        apiCachingBehavior:
          allOf:
          - $ref: '#/components/schemas/ApiCachingBehavior'
          description: "Caching behavior.\n\n  * **FULL_REQUEST_CACHING** : All requests\
            \ from the same user are cached. Individual resolvers are automatically\
            \ cached. All API calls will try to return responses from the cache.\n\
            \n  * **PER_RESOLVER_CACHING** : Individual resolvers that you specify\
            \ are cached.\n\n  * **OPERATION_LEVEL_CACHING** : Full requests are cached\
            \ together and returned without executing resolvers."
        type:
          allOf:
          - $ref: '#/components/schemas/ApiCacheType'
          description: "The cache instance type. Valid values are\n\n  * `SMALL`\n\
            \n  * `MEDIUM`\n\n  * `LARGE`\n\n  * `XLARGE`\n\n  * `LARGE_2X`\n\n  *\
            \ `LARGE_4X`\n\n  * `LARGE_8X` (not available in all regions)\n\n  * `LARGE_12X`\n\
            \nHistorically, instance types were identified by an EC2-style value.\
            \ As of July 2020, this is deprecated, and the generic identifiers above\
            \ should be used.\n\nThe following legacy instance types are available,\
            \ but their use is discouraged:\n\n  * **T2_SMALL** : A t2.small instance\
            \ type.\n\n  * **T2_MEDIUM** : A t2.medium instance type.\n\n  * **R4_LARGE**\
            \ : A r4.large instance type.\n\n  * **R4_XLARGE** : A r4.xlarge instance\
            \ type.\n\n  * **R4_2XLARGE** : A r4.2xlarge instance type.\n\n  * **R4_4XLARGE**\
            \ : A r4.4xlarge instance type.\n\n  * **R4_8XLARGE** : A r4.8xlarge instance\
            \ type."
        healthMetricsConfig:
          allOf:
          - $ref: '#/components/schemas/CacheHealthMetricsConfig'
          description: "Controls how cache health metrics will be emitted to CloudWatch.\
            \ Cache health metrics include:\n\n  * NetworkBandwidthOutAllowanceExceeded:\
            \ The network packets dropped because the throughput exceeded the aggregated\
            \ bandwidth limit. This is useful for diagnosing bottlenecks in a cache\
            \ configuration.\n\n  * EngineCPUUtilization: The CPU utilization (percentage)\
            \ allocated to the Redis process. This is useful for diagnosing bottlenecks\
            \ in a cache configuration.\n\nMetrics will be recorded by API ID. You\
            \ can set the value to `ENABLED` or `DISABLED`."
      required:
      - apiId
      - ttl
      - apiCachingBehavior
      - type
      description: Represents the input of a `CreateApiCache` operation.
    CreateApiCacheResponse:
      type: object
      properties:
        apiCache:
          allOf:
          - $ref: '#/components/schemas/ApiCache'
          description: The `ApiCache` object.
      description: Represents the output of a `CreateApiCache` operation.
    CreateApiKeyRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID for your GraphQL API.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the purpose of the API key.
        expires:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: From the creation time, the time after which the API key expires.
            The date is represented as seconds since the epoch, rounded down to the
            nearest hour. The default value for this parameter is 7 days from creation
            time. For more information, see .
      required:
      - apiId
    CreateApiKeyResponse:
      type: object
      properties:
        apiKey:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: The API key.
    CreateApiRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ApiName'
          description: The name for the `Api`.
        ownerContact:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The owner contact information for the `Api`.
        tags:
          $ref: '#/components/schemas/TagMap'
        eventConfig:
          allOf:
          - $ref: '#/components/schemas/EventConfig'
          description: The Event API configuration. This includes the default authorization
            configuration for connecting, publishing, and subscribing to an Event
            API.
      required:
      - name
    CreateApiResponse:
      type: object
      properties:
        api:
          allOf:
          - $ref: '#/components/schemas/Api'
          description: The `Api` object.
    CreateChannelNamespaceRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Api` ID.
        name:
          allOf:
          - $ref: '#/components/schemas/Namespace'
          description: The name of the `ChannelNamespace`. This name must be unique
            within the `Api`
        subscribeAuthModes:
          allOf:
          - $ref: '#/components/schemas/AuthModes'
          description: The authorization mode to use for subscribing to messages on
            the channel namespace. This configuration overrides the default `Api`
            authorization configuration.
        publishAuthModes:
          allOf:
          - $ref: '#/components/schemas/AuthModes'
          description: The authorization mode to use for publishing messages on the
            channel namespace. This configuration overrides the default `Api` authorization
            configuration.
        codeHandlers:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The event handler functions that run custom business logic
            to process published events and subscribe requests.
        tags:
          $ref: '#/components/schemas/TagMap'
        handlerConfigs:
          allOf:
          - $ref: '#/components/schemas/HandlerConfigs'
          description: The configuration for the `OnPublish` and `OnSubscribe` handlers.
      required:
      - apiId
      - name
    CreateChannelNamespaceResponse:
      type: object
      properties:
        channelNamespace:
          allOf:
          - $ref: '#/components/schemas/ChannelNamespace'
          description: The `ChannelNamespace` object.
    CreateDataSourceRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID for the GraphQL API for the `DataSource`.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: A user-supplied name for the `DataSource`.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the `DataSource`.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceType'
          description: The type of the `DataSource`.
        serviceRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Identity and Access Management (IAM) service role Amazon
            Resource Name (ARN) for the data source. The system assumes this role
            when accessing the data source.
        dynamodbConfig:
          allOf:
          - $ref: '#/components/schemas/DynamodbDataSourceConfig'
          description: Amazon DynamoDB settings.
        lambdaConfig:
          allOf:
          - $ref: '#/components/schemas/LambdaDataSourceConfig'
          description: Lambda settings.
        elasticsearchConfig:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchDataSourceConfig'
          description: 'Amazon OpenSearch Service settings.


            As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch
            Service. This configuration is deprecated. For new data sources, use CreateDataSourceRequest$openSearchServiceConfig
            to create an OpenSearch data source.'
        openSearchServiceConfig:
          allOf:
          - $ref: '#/components/schemas/OpenSearchServiceDataSourceConfig'
          description: Amazon OpenSearch Service settings.
        httpConfig:
          allOf:
          - $ref: '#/components/schemas/HttpDataSourceConfig'
          description: HTTP endpoint settings.
        relationalDatabaseConfig:
          allOf:
          - $ref: '#/components/schemas/RelationalDatabaseDataSourceConfig'
          description: Relational database settings.
        eventBridgeConfig:
          allOf:
          - $ref: '#/components/schemas/EventBridgeDataSourceConfig'
          description: Amazon EventBridge settings.
        metricsConfig:
          allOf:
          - $ref: '#/components/schemas/DataSourceLevelMetricsConfig'
          description: 'Enables or disables enhanced data source metrics for specified
            data sources. Note that `metricsConfig` won''t be used unless the `dataSourceLevelMetricsBehavior`
            value is set to `PER_DATA_SOURCE_METRICS`. If the `dataSourceLevelMetricsBehavior`
            is set to `FULL_REQUEST_DATA_SOURCE_METRICS` instead, `metricsConfig`
            will be ignored. However, you can still set its value.


            `metricsConfig` can be `ENABLED` or `DISABLED`.'
      required:
      - apiId
      - name
      - type
    CreateDataSourceResponse:
      type: object
      properties:
        dataSource:
          allOf:
          - $ref: '#/components/schemas/DataSource'
          description: The `DataSource` object.
    CreateDomainNameRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain name.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/CertificateArn'
          description: The Amazon Resource Name (ARN) of the certificate. This can
            be an Certificate Manager (ACM) certificate or an Identity and Access
            Management (IAM) server certificate.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the `DomainName`.
        tags:
          $ref: '#/components/schemas/TagMap'
      required:
      - domainName
      - certificateArn
    CreateDomainNameResponse:
      type: object
      properties:
        domainNameConfig:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfig'
          description: The configuration for the `DomainName`.
    CreateFunctionRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The GraphQL API ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The `Function` name. The function name does not have to be
            unique.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Function` description.
        dataSourceName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The `Function` `DataSource` name.
        requestMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: The `Function` request mapping template. Functions support
            only the 2018-05-29 version of the request mapping template.
        responseMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: The `Function` response mapping template.
        functionVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `version` of the request mapping template. Currently, the
            supported value is 2018-05-29. Note that when using VTL and mapping templates,
            the `functionVersion` is required.
        syncConfig:
          $ref: '#/components/schemas/SyncConfig'
        maxBatchSize:
          allOf:
          - $ref: '#/components/schemas/MaxBatchSize'
          description: The maximum batching size for a resolver.
        runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
        code:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The `function` code that contains the request and response
            functions. When code is used, the `runtime` is required. The `runtime`
            value must be `APPSYNC_JS`.
      required:
      - apiId
      - name
      - dataSourceName
    CreateFunctionResponse:
      type: object
      properties:
        functionConfiguration:
          allOf:
          - $ref: '#/components/schemas/FunctionConfiguration'
          description: The `Function` object.
    CreateGraphqlApiRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A user-supplied name for the `GraphqlApi`.
        logConfig:
          allOf:
          - $ref: '#/components/schemas/LogConfig'
          description: The Amazon CloudWatch Logs configuration.
        authenticationType:
          allOf:
          - $ref: '#/components/schemas/AuthenticationType'
          description: 'The authentication type: API key, Identity and Access Management
            (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.'
        userPoolConfig:
          allOf:
          - $ref: '#/components/schemas/UserPoolConfig'
          description: The Amazon Cognito user pool configuration.
        openIDConnectConfig:
          allOf:
          - $ref: '#/components/schemas/OpenIDConnectConfig'
          description: The OIDC configuration.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A `TagMap` object.
        additionalAuthenticationProviders:
          allOf:
          - $ref: '#/components/schemas/AdditionalAuthenticationProviders'
          description: A list of additional authentication providers for the `GraphqlApi`
            API.
        xrayEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A flag indicating whether to use X-Ray tracing for the `GraphqlApi`.
        lambdaAuthorizerConfig:
          allOf:
          - $ref: '#/components/schemas/LambdaAuthorizerConfig'
          description: Configuration for Lambda function authorization.
        apiType:
          allOf:
          - $ref: '#/components/schemas/GraphQLApiType'
          description: The value that indicates whether the GraphQL API is a standard
            API (`GRAPHQL`) or merged API (`MERGED`).
        mergedApiExecutionRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Identity and Access Management service role ARN for a merged
            API. The AppSync service assumes this role on behalf of the Merged API
            to validate access to source APIs at runtime and to prompt the `AUTO_MERGE`
            to update the merged API endpoint with the source API changes automatically.
        visibility:
          allOf:
          - $ref: '#/components/schemas/GraphQLApiVisibility'
          description: Sets the value of the GraphQL API to public (`GLOBAL`) or private
            (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL`
            by default. This value cannot be changed once the API has been created.
        ownerContact:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The owner contact information for an API resource.


            This field accepts any string input with a length of 0 - 256 characters.'
        introspectionConfig:
          allOf:
          - $ref: '#/components/schemas/GraphQLApiIntrospectionConfig'
          description: 'Sets the value of the GraphQL API to enable (`ENABLED`) or
            disable (`DISABLED`) introspection. If no value is provided, the introspection
            configuration will be set to `ENABLED` by default. This field will produce
            an error if the operation attempts to use the introspection feature while
            this field is disabled.


            For more information about introspection, see [GraphQL introspection](https://graphql.org/learn/introspection/).'
        queryDepthLimit:
          allOf:
          - $ref: '#/components/schemas/QueryDepthLimit'
          description: 'The maximum depth a query can have in a single request. Depth
            refers to the amount of nested levels allowed in the body of query. The
            default value is `0` (or unspecified), which indicates there''s no depth
            limit. If you set a limit, it can be between `1` and `75` nested levels.
            This field will produce a limit error if the operation falls out of bounds.


            Note that fields can still be set to nullable or non-nullable. If a non-nullable
            field produces an error, the error will be thrown upwards to the first
            nullable field available.'
        resolverCountLimit:
          allOf:
          - $ref: '#/components/schemas/ResolverCountLimit'
          description: The maximum number of resolvers that can be invoked in a single
            request. The default value is `0` (or unspecified), which will set the
            limit to `10000`. When specified, the limit value can be between `1` and
            `10000`. This field will produce a limit error if the operation falls
            out of bounds.
        enhancedMetricsConfig:
          allOf:
          - $ref: '#/components/schemas/EnhancedMetricsConfig'
          description: The `enhancedMetricsConfig` object.
      required:
      - name
      - authenticationType
    CreateGraphqlApiResponse:
      type: object
      properties:
        graphqlApi:
          allOf:
          - $ref: '#/components/schemas/GraphqlApi'
          description: The `GraphqlApi`.
    CreateResolverRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID for the GraphQL API for which the resolver is being
            created.
        typeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the `Type`.
        fieldName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the field to attach the resolver to.
        dataSourceName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the data source for which the resolver is being
            created.
        requestMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: 'The mapping template to use for requests.


            A resolver uses a request mapping template to convert a GraphQL expression
            into a format that a data source can understand. Mapping templates are
            written in Apache Velocity Template Language (VTL).


            VTL request mapping templates are optional when using an Lambda data source.
            For all other data sources, VTL request and response mapping templates
            are required.'
        responseMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: The mapping template to use for responses from the data source.
        kind:
          allOf:
          - $ref: '#/components/schemas/ResolverKind'
          description: "The resolver type.\n\n  * **UNIT** : A UNIT resolver type.\
            \ A UNIT resolver is the default resolver type. You can use a UNIT resolver\
            \ to run a GraphQL query against a single data source.\n\n  * **PIPELINE**\
            \ : A PIPELINE resolver type. You can use a PIPELINE resolver to invoke\
            \ a series of `Function` objects in a serial manner. You can use a pipeline\
            \ resolver to run a GraphQL query against multiple data sources."
        pipelineConfig:
          allOf:
          - $ref: '#/components/schemas/PipelineConfig'
          description: The `PipelineConfig`.
        syncConfig:
          allOf:
          - $ref: '#/components/schemas/SyncConfig'
          description: The `SyncConfig` for a resolver attached to a versioned data
            source.
        cachingConfig:
          allOf:
          - $ref: '#/components/schemas/CachingConfig'
          description: The caching configuration for the resolver.
        maxBatchSize:
          allOf:
          - $ref: '#/components/schemas/MaxBatchSize'
          description: The maximum batching size for a resolver.
        runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
        code:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The `resolver` code that contains the request and response
            functions. When code is used, the `runtime` is required. The `runtime`
            value must be `APPSYNC_JS`.
        metricsConfig:
          allOf:
          - $ref: '#/components/schemas/ResolverLevelMetricsConfig'
          description: 'Enables or disables enhanced resolver metrics for specified
            resolvers. Note that `metricsConfig` won''t be used unless the `resolverLevelMetricsBehavior`
            value is set to `PER_RESOLVER_METRICS`. If the `resolverLevelMetricsBehavior`
            is set to `FULL_REQUEST_RESOLVER_METRICS` instead, `metricsConfig` will
            be ignored. However, you can still set its value.


            `metricsConfig` can be `ENABLED` or `DISABLED`.'
      required:
      - apiId
      - typeName
      - fieldName
    CreateResolverResponse:
      type: object
      properties:
        resolver:
          allOf:
          - $ref: '#/components/schemas/Resolver'
          description: The `Resolver` object.
    CreateTypeRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        definition:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The type definition, in GraphQL Schema Definition Language
            (SDL) format.


            For more information, see the [GraphQL SDL documentation](http://graphql.org/learn/schema/).'
        format:
          allOf:
          - $ref: '#/components/schemas/TypeDefinitionFormat'
          description: 'The type format: SDL or JSON.'
      required:
      - apiId
      - definition
      - format
    CreateTypeResponse:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The `Type` object.
    DataSource:
      type: object
      properties:
        dataSourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The data source Amazon Resource Name (ARN).
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the data source.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the data source.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceType'
          description: "The type of the data source.\n\n  * **AWS_LAMBDA** : The data\
            \ source is an Lambda function.\n\n  * **AMAZON_DYNAMODB** : The data\
            \ source is an Amazon DynamoDB table.\n\n  * **AMAZON_ELASTICSEARCH**\
            \ : The data source is an Amazon OpenSearch Service domain.\n\n  * **AMAZON_OPENSEARCH_SERVICE**\
            \ : The data source is an Amazon OpenSearch Service domain.\n\n  * **AMAZON_EVENTBRIDGE**\
            \ : The data source is an Amazon EventBridge configuration.\n\n  * **AMAZON_BEDROCK_RUNTIME**\
            \ : The data source is the Amazon Bedrock runtime.\n\n  * **NONE** : There\
            \ is no data source. Use this type when you want to invoke a GraphQL operation\
            \ without connecting to a data source, such as when you're performing\
            \ data transformation with resolvers or invoking a subscription from a\
            \ mutation.\n\n  * **HTTP** : The data source is an HTTP endpoint.\n\n\
            \  * **RELATIONAL_DATABASE** : The data source is a relational database."
        serviceRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Identity and Access Management (IAM) service role Amazon
            Resource Name (ARN) for the data source. The system assumes this role
            when accessing the data source.
        dynamodbConfig:
          allOf:
          - $ref: '#/components/schemas/DynamodbDataSourceConfig'
          description: DynamoDB settings.
        lambdaConfig:
          allOf:
          - $ref: '#/components/schemas/LambdaDataSourceConfig'
          description: Lambda settings.
        elasticsearchConfig:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchDataSourceConfig'
          description: Amazon OpenSearch Service settings.
        openSearchServiceConfig:
          allOf:
          - $ref: '#/components/schemas/OpenSearchServiceDataSourceConfig'
          description: Amazon OpenSearch Service settings.
        httpConfig:
          allOf:
          - $ref: '#/components/schemas/HttpDataSourceConfig'
          description: HTTP endpoint settings.
        relationalDatabaseConfig:
          allOf:
          - $ref: '#/components/schemas/RelationalDatabaseDataSourceConfig'
          description: Relational database settings.
        eventBridgeConfig:
          allOf:
          - $ref: '#/components/schemas/EventBridgeDataSourceConfig'
          description: Amazon EventBridge settings.
        metricsConfig:
          allOf:
          - $ref: '#/components/schemas/DataSourceLevelMetricsConfig'
          description: 'Enables or disables enhanced data source metrics for specified
            data sources. Note that `metricsConfig` won''t be used unless the `dataSourceLevelMetricsBehavior`
            value is set to `PER_DATA_SOURCE_METRICS`. If the `dataSourceLevelMetricsBehavior`
            is set to `FULL_REQUEST_DATA_SOURCE_METRICS` instead, `metricsConfig`
            will be ignored. However, you can still set its value.


            `metricsConfig` can be `ENABLED` or `DISABLED`.'
      description: Describes a data source.
    DataSourceIntrospectionModel:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the model. For example, this could be the name
            of a single table in a database.
        fields:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionModelFields'
          description: The `DataSourceIntrospectionModelField` object data.
        primaryKey:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionModelIndex'
          description: The primary key stored as a `DataSourceIntrospectionModelIndex`
            object.
        indexes:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionModelIndexes'
          description: The array of `DataSourceIntrospectionModelIndex` objects.
        sdl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Contains the output of the SDL that was generated from the
            introspected types. This is controlled by the `includeModelsSDL` parameter
            of the `GetDataSourceIntrospection` operation.
      description: Contains the introspected data that was retrieved from the data
        source.
    DataSourceIntrospectionModelField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the field that was retrieved from the introspected
            data.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionModelFieldType'
          description: The `DataSourceIntrospectionModelFieldType` object data.
        length:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The length value of the introspected field.
      description: Represents the fields that were retrieved from the introspected
        data.
    DataSourceIntrospectionModelFieldType:
      type: object
      properties:
        kind:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "Specifies the classification of data. For example, this could\
            \ be set to values like `Scalar` or `NonNull` to indicate a fundamental\
            \ property of the field.\n\nValid values include:\n\n  * `Scalar`: Indicates\
            \ the value is a primitive type (scalar).\n\n  * `NonNull`: Indicates\
            \ the field cannot be `null`.\n\n  * `List`: Indicates the field contains\
            \ a list."
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the data type that represents the field. For example,
            `String` is a valid `name` value.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionModelFieldType'
          description: 'The `DataSourceIntrospectionModelFieldType` object data. The
            `type` is only present if `DataSourceIntrospectionModelFieldType.kind`
            is set to `NonNull` or `List`.


            The `type` typically contains its own `kind` and `name` fields to represent
            the actual type data. For instance, `type` could contain a `kind` value
            of `Scalar` with a `name` value of `String`. The values `Scalar` and `String`
            will be collectively stored in the `values` field.'
        values:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionModelFieldTypeValues'
          description: The values of the `type` field. This field represents the AppSync
            data type equivalent of the introspected field.
      description: Represents the type data for each field retrieved from the introspection.
    DataSourceIntrospectionModelFieldTypeValues:
      type: array
      items:
        $ref: '#/components/schemas/String'
    DataSourceIntrospectionModelFields:
      type: array
      items:
        $ref: '#/components/schemas/DataSourceIntrospectionModelField'
    DataSourceIntrospectionModelIndex:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the index.
        fields:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionModelIndexFields'
          description: The fields of the index.
      description: The index that was retrieved from the introspected data.
    DataSourceIntrospectionModelIndexFields:
      type: array
      items:
        $ref: '#/components/schemas/String'
    DataSourceIntrospectionModelIndexes:
      type: array
      items:
        $ref: '#/components/schemas/DataSourceIntrospectionModelIndex'
    DataSourceIntrospectionModels:
      type: array
      items:
        $ref: '#/components/schemas/DataSourceIntrospectionModel'
    DataSourceIntrospectionResult:
      type: object
      properties:
        models:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionModels'
          description: The array of `DataSourceIntrospectionModel` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Determines the number of types to be returned in a single response
            before paginating. This value is typically taken from `nextToken` value
            from the previous response.
      description: Represents the output of a `DataSourceIntrospectionResult`. This
        is the populated result of a `GetDataSourceIntrospection` operation.
    DataSourceIntrospectionStatus:
      type: string
      enum:
      - PROCESSING
      - FAILED
      - SUCCESS
    DataSourceLevelMetricsBehavior:
      type: string
      enum:
      - FULL_REQUEST_DATA_SOURCE_METRICS
      - PER_DATA_SOURCE_METRICS
    DataSourceLevelMetricsConfig:
      type: string
      enum:
      - ENABLED
      - DISABLED
    DataSourceType:
      type: string
      enum:
      - AWS_LAMBDA
      - AMAZON_DYNAMODB
      - AMAZON_ELASTICSEARCH
      - NONE
      - HTTP
      - RELATIONAL_DATABASE
      - AMAZON_OPENSEARCH_SERVICE
      - AMAZON_EVENTBRIDGE
      - AMAZON_BEDROCK_RUNTIME
    DataSources:
      type: array
      items:
        $ref: '#/components/schemas/DataSource'
    Date:
      type: string
      format: date-time
    DefaultAction:
      type: string
      enum:
      - ALLOW
      - DENY
    DeleteApiCacheRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
      required:
      - apiId
      description: Represents the input of a `DeleteApiCache` operation.
    DeleteApiCacheResponse:
      type: object
      properties: {}
      description: Represents the output of a `DeleteApiCache` operation.
    DeleteApiKeyRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID for the API key.
      required:
      - apiId
      - id
    DeleteApiKeyResponse:
      type: object
      properties: {}
    DeleteApiRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Api` ID.
      required:
      - apiId
    DeleteApiResponse:
      type: object
      properties: {}
    DeleteChannelNamespaceRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the `Api` associated with the `ChannelNamespace`.
        name:
          allOf:
          - $ref: '#/components/schemas/Namespace'
          description: The name of the `ChannelNamespace`.
      required:
      - apiId
      - name
    DeleteChannelNamespaceResponse:
      type: object
      properties: {}
    DeleteDataSourceRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the data source.
      required:
      - apiId
      - name
    DeleteDataSourceResponse:
      type: object
      properties: {}
    DeleteDomainNameRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain name.
      required:
      - domainName
    DeleteDomainNameResponse:
      type: object
      properties: {}
    DeleteFunctionRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The GraphQL API ID.
        functionId:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The `Function` ID.
      required:
      - apiId
      - functionId
    DeleteFunctionResponse:
      type: object
      properties: {}
    DeleteGraphqlApiRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
      required:
      - apiId
    DeleteGraphqlApiResponse:
      type: object
      properties: {}
    DeleteResolverRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        typeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the resolver type.
        fieldName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The resolver field name.
      required:
      - apiId
      - typeName
      - fieldName
    DeleteResolverResponse:
      type: object
      properties: {}
    DeleteTypeRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        typeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The type name.
      required:
      - apiId
      - typeName
    DeleteTypeResponse:
      type: object
      properties: {}
    DeltaSyncConfig:
      type: object
      properties:
        baseTableTTL:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of minutes that an Item is stored in the data source.
        deltaSyncTableName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Delta Sync table name.
        deltaSyncTableTTL:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of minutes that a Delta Sync log entry is stored
            in the Delta Sync table.
      description: Describes a Delta Sync configuration.
    Description:
      type: string
      pattern: ^.*$
      minLength: 0
      maxLength: 255
    DisassociateApiRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain name.
      required:
      - domainName
    DisassociateApiResponse:
      type: object
      properties: {}
    DisassociateMergedGraphqlApiRequest:
      type: object
      properties:
        sourceApiIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the AppSync Source API. This is generated
            by the AppSync service. In most cases, source APIs (especially in your
            account) only require the API ID value or ARN of the source API. However,
            source APIs from other accounts (cross-account use cases) strictly require
            the full resource ARN of the source API.
        associationId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID generated by the AppSync service for the source API
            association.
      required:
      - sourceApiIdentifier
      - associationId
    DisassociateMergedGraphqlApiResponse:
      type: object
      properties:
        sourceApiAssociationStatus:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociationStatus'
          description: The state of the source API association.
    DisassociateSourceGraphqlApiRequest:
      type: object
      properties:
        mergedApiIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the AppSync Merged API. This is generated
            by the AppSync service. In most cases, Merged APIs (especially in your
            account) only require the API ID value or ARN of the merged API. However,
            Merged APIs in other accounts (cross-account use cases) strictly require
            the full resource ARN of the merged API.
        associationId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID generated by the AppSync service for the source API
            association.
      required:
      - mergedApiIdentifier
      - associationId
    DisassociateSourceGraphqlApiResponse:
      type: object
      properties:
        sourceApiAssociationStatus:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociationStatus'
          description: The state of the source API association.
    DomainName:
      type: string
      pattern: ^(\*[\w\d-]*\.)?([\w\d-]+\.)+[\w\d-]+$
      minLength: 1
      maxLength: 253
    DomainNameConfig:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the `DomainName` configuration.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/CertificateArn'
          description: The Amazon Resource Name (ARN) of the certificate. This can
            be an Certificate Manager (ACM) certificate or an Identity and Access
            Management (IAM) server certificate.
        appsyncDomainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The domain name that AppSync provides.
        hostedZoneId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of your Amazon Route 53 hosted zone.
        tags:
          $ref: '#/components/schemas/TagMap'
        domainNameArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the domain name.
      description: Describes a configuration for a custom domain.
    DomainNameConfigs:
      type: array
      items:
        $ref: '#/components/schemas/DomainNameConfig'
    DynamodbDataSourceConfig:
      type: object
      properties:
        tableName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The table name.
        awsRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Region.
        useCallerCredentials:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Set to TRUE to use Amazon Cognito credentials with this data
            source.
        deltaSyncConfig:
          allOf:
          - $ref: '#/components/schemas/DeltaSyncConfig'
          description: The `DeltaSyncConfig` for a versioned data source.
        versioned:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Set to TRUE to use Conflict Detection and Resolution with this
            data source.
      required:
      - tableName
      - awsRegion
      description: Describes an Amazon DynamoDB data source configuration.
    ElasticsearchDataSourceConfig:
      type: object
      properties:
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The endpoint.
        awsRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Region.
      required:
      - endpoint
      - awsRegion
      description: 'Describes an OpenSearch data source configuration.


        As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service.
        This configuration is deprecated. For new data sources, use OpenSearchServiceDataSourceConfig
        to specify an OpenSearch data source.'
    EnhancedMetricsConfig:
      type: object
      properties:
        resolverLevelMetricsBehavior:
          allOf:
          - $ref: '#/components/schemas/ResolverLevelMetricsBehavior'
          description: "Controls how resolver metrics will be emitted to CloudWatch.\
            \ Resolver metrics include:\n\n  * GraphQL errors: The number of GraphQL\
            \ errors that occurred.\n\n  * Requests: The number of invocations that\
            \ occurred during a request. \n\n  * Latency: The time to complete a resolver\
            \ invocation.\n\n  * Cache hits: The number of cache hits during a request.\n\
            \n  * Cache misses: The number of cache misses during a request.\n\nThese\
            \ metrics can be emitted to CloudWatch per resolver or for all resolvers\
            \ in the request. Metrics will be recorded by API ID and resolver name.\
            \ `resolverLevelMetricsBehavior` accepts one of these values at a time:\n\
            \n  * `FULL_REQUEST_RESOLVER_METRICS`: Records and emits metric data for\
            \ all resolvers in the request.\n\n  * `PER_RESOLVER_METRICS`: Records\
            \ and emits metric data for resolvers that have the `metricsConfig` value\
            \ set to `ENABLED`."
        dataSourceLevelMetricsBehavior:
          allOf:
          - $ref: '#/components/schemas/DataSourceLevelMetricsBehavior'
          description: "Controls how data source metrics will be emitted to CloudWatch.\
            \ Data source metrics include:\n\n  * Requests: The number of invocations\
            \ that occured during a request.\n\n  * Latency: The time to complete\
            \ a data source invocation.\n\n  * Errors: The number of errors that occurred\
            \ during a data source invocation.\n\nThese metrics can be emitted to\
            \ CloudWatch per data source or for all data sources in the request. Metrics\
            \ will be recorded by API ID and data source name. `dataSourceLevelMetricsBehavior`\
            \ accepts one of these values at a time:\n\n  * `FULL_REQUEST_DATA_SOURCE_METRICS`:\
            \ Records and emits metric data for all data sources in the request.\n\
            \n  * `PER_DATA_SOURCE_METRICS`: Records and emits metric data for data\
            \ sources that have the `metricsConfig` value set to `ENABLED`."
        operationLevelMetricsConfig:
          allOf:
          - $ref: '#/components/schemas/OperationLevelMetricsConfig'
          description: "Controls how operation metrics will be emitted to CloudWatch.\
            \ Operation metrics include:\n\n  * Requests: The number of times a specified\
            \ GraphQL operation was called.\n\n  * GraphQL errors: The number of GraphQL\
            \ errors that occurred during a specified GraphQL operation.\n\nMetrics\
            \ will be recorded by API ID and operation name. You can set the value\
            \ to `ENABLED` or `DISABLED`."
      required:
      - resolverLevelMetricsBehavior
      - dataSourceLevelMetricsBehavior
      - operationLevelMetricsConfig
      description: "Enables and controls the enhanced metrics feature. Enhanced metrics\
        \ emit granular data on API usage and performance such as AppSync request\
        \ and error counts, latency, and cache hits/misses. All enhanced metric data\
        \ is sent to your CloudWatch account, and you can configure the types of data\
        \ that will be sent.\n\nEnhanced metrics can be configured at the resolver,\
        \ data source, and operation levels. `EnhancedMetricsConfig` contains three\
        \ required parameters, each controlling one of these categories:\n\n  1. `resolverLevelMetricsBehavior`:\
        \ Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics\
        \ include:\n\n     * GraphQL errors: The number of GraphQL errors that occurred.\n\
        \n     * Requests: The number of invocations that occurred during a request.\
        \ \n\n     * Latency: The time to complete a resolver invocation.\n\n    \
        \ * Cache hits: The number of cache hits during a request.\n\n     * Cache\
        \ misses: The number of cache misses during a request.\n\nThese metrics can\
        \ be emitted to CloudWatch per resolver or for all resolvers in the request.\
        \ Metrics will be recorded by API ID and resolver name. `resolverLevelMetricsBehavior`\
        \ accepts one of these values at a time:\n\n     * `FULL_REQUEST_RESOLVER_METRICS`:\
        \ Records and emits metric data for all resolvers in the request.\n\n    \
        \ * `PER_RESOLVER_METRICS`: Records and emits metric data for resolvers that\
        \ have the `metricsConfig` value set to `ENABLED`.\n\n  2. `dataSourceLevelMetricsBehavior`:\
        \ Controls how data source metrics will be emitted to CloudWatch. Data source\
        \ metrics include:\n\n     * Requests: The number of invocations that occured\
        \ during a request.\n\n     * Latency: The time to complete a data source\
        \ invocation.\n\n     * Errors: The number of errors that occurred during\
        \ a data source invocation.\n\nThese metrics can be emitted to CloudWatch\
        \ per data source or for all data sources in the request. Metrics will be\
        \ recorded by API ID and data source name. `dataSourceLevelMetricsBehavior`\
        \ accepts one of these values at a time:\n\n     * `FULL_REQUEST_DATA_SOURCE_METRICS`:\
        \ Records and emits metric data for all data sources in the request.\n\n \
        \    * `PER_DATA_SOURCE_METRICS`: Records and emits metric data for data sources\
        \ that have the `metricsConfig` value set to `ENABLED`.\n\n  3. `operationLevelMetricsConfig`:\
        \ Controls how operation metrics will be emitted to CloudWatch. Operation\
        \ metrics include:\n\n     * Requests: The number of times a specified GraphQL\
        \ operation was called.\n\n     * GraphQL errors: The number of GraphQL errors\
        \ that occurred during a specified GraphQL operation.\n\nMetrics will be recorded\
        \ by API ID and operation name. You can set the value to `ENABLED` or `DISABLED`."
    EnvironmentVariableKey:
      type: string
      pattern: ^[A-Za-z]+\w*$
      minLength: 2
      maxLength: 64
    EnvironmentVariableMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/EnvironmentVariableValue'
    EnvironmentVariableValue:
      type: string
      minLength: 0
      maxLength: 512
    ErrorDetail:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The error payload.
      description: Contains the list of errors generated. When using JavaScript, this
        will apply to the request or response function evaluation.
    ErrorMessage:
      type: string
    EvaluateCodeErrorDetail:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The error payload.
        codeErrors:
          allOf:
          - $ref: '#/components/schemas/CodeErrors'
          description: Contains the list of `CodeError` objects.
      description: Contains the list of errors from a code evaluation response.
    EvaluateCodeRequest:
      type: object
      properties:
        runtime:
          allOf:
          - $ref: '#/components/schemas/AppSyncRuntime'
          description: The runtime to be used when evaluating the code. Currently,
            only the `APPSYNC_JS` runtime is supported.
        code:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The code definition to be evaluated. Note that `code` and `runtime`
            are both required for this action. The `runtime` value must be `APPSYNC_JS`.
        context:
          allOf:
          - $ref: '#/components/schemas/Context'
          description: The map that holds all of the contextual information for your
            resolver invocation. A `context` is required for this action.
        function:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The function within the code to be evaluated. If provided,
            the valid values are `request` and `response`.
      required:
      - runtime
      - code
      - context
    EvaluateCodeResponse:
      type: object
      properties:
        evaluationResult:
          allOf:
          - $ref: '#/components/schemas/EvaluationResult'
          description: The result of the evaluation operation.
        error:
          allOf:
          - $ref: '#/components/schemas/EvaluateCodeErrorDetail'
          description: Contains the payload of the response error.
        logs:
          allOf:
          - $ref: '#/components/schemas/Logs'
          description: A list of logs that were generated by calls to `util.log.info`
            and `util.log.error` in the evaluated code.
        stash:
          allOf:
          - $ref: '#/components/schemas/Stash'
          description: An object available inside each resolver and function handler.
            A single `stash` object lives through a single resolver run. Therefore,
            you can use the stash to pass arbitrary data across request and response
            handlers and across functions in a pipeline resolver.
        outErrors:
          allOf:
          - $ref: '#/components/schemas/OutErrors'
          description: The list of runtime errors that are added to the GraphQL operation
            response.
    EvaluateMappingTemplateRequest:
      type: object
      properties:
        template:
          allOf:
          - $ref: '#/components/schemas/Template'
          description: The mapping template; this can be a request or response template.
            A `template` is required for this action.
        context:
          allOf:
          - $ref: '#/components/schemas/Context'
          description: The map that holds all of the contextual information for your
            resolver invocation. A `context` is required for this action.
      required:
      - template
      - context
    EvaluateMappingTemplateResponse:
      type: object
      properties:
        evaluationResult:
          allOf:
          - $ref: '#/components/schemas/EvaluationResult'
          description: The mapping template; this can be a request or response template.
        error:
          allOf:
          - $ref: '#/components/schemas/ErrorDetail'
          description: The `ErrorDetail` object.
        logs:
          allOf:
          - $ref: '#/components/schemas/Logs'
          description: A list of logs that were generated by calls to `util.log.info`
            and `util.log.error` in the evaluated code.
        stash:
          allOf:
          - $ref: '#/components/schemas/Stash'
          description: An object available inside each resolver and function handler.
            A single `stash` object lives through a single resolver run. Therefore,
            you can use the stash to pass arbitrary data across request and response
            handlers and across functions in a pipeline resolver.
        outErrors:
          allOf:
          - $ref: '#/components/schemas/OutErrors'
          description: The list of runtime errors that are added to the GraphQL operation
            response.
    EvaluationResult:
      type: string
      pattern: ^[\s\S]*$
      minLength: 0
      maxLength: 65536
    EventBridgeDataSourceConfig:
      type: object
      properties:
        eventBusArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the event bus. For more information about event
            buses, see [Amazon EventBridge event buses](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus.html).
      required:
      - eventBusArn
      description: Describes an Amazon EventBridge bus data source configuration.
    EventConfig:
      type: object
      properties:
        authProviders:
          allOf:
          - $ref: '#/components/schemas/AuthProviders'
          description: A list of authorization providers.
        connectionAuthModes:
          allOf:
          - $ref: '#/components/schemas/AuthModes'
          description: A list of valid authorization modes for the Event API connections.
        defaultPublishAuthModes:
          allOf:
          - $ref: '#/components/schemas/AuthModes'
          description: A list of valid authorization modes for the Event API publishing.
        defaultSubscribeAuthModes:
          allOf:
          - $ref: '#/components/schemas/AuthModes'
          description: A list of valid authorization modes for the Event API subscriptions.
        logConfig:
          allOf:
          - $ref: '#/components/schemas/EventLogConfig'
          description: The CloudWatch Logs configuration for the Event API.
      required:
      - authProviders
      - connectionAuthModes
      - defaultPublishAuthModes
      - defaultSubscribeAuthModes
      description: Describes the authorization configuration for connections, message
        publishing, message subscriptions, and logging for an Event API.
    EventLogConfig:
      type: object
      properties:
        logLevel:
          allOf:
          - $ref: '#/components/schemas/EventLogLevel'
          description: The type of information to log for the Event API.
        cloudWatchLogsRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IAM service role that AppSync assumes to publish CloudWatch
            Logs in your account.
      required:
      - logLevel
      - cloudWatchLogsRoleArn
      description: Describes the CloudWatch Logs configuration for the Event API.
    EventLogLevel:
      type: string
      enum:
      - NONE
      - ERROR
      - ALL
      - INFO
      - DEBUG
    FieldLogLevel:
      type: string
      enum:
      - NONE
      - ERROR
      - ALL
      - INFO
      - DEBUG
    FlushApiCacheRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
      required:
      - apiId
      description: Represents the input of a `FlushApiCache` operation.
    FlushApiCacheResponse:
      type: object
      properties: {}
      description: Represents the output of a `FlushApiCache` operation.
    FunctionConfiguration:
      type: object
      properties:
        functionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique ID representing the `Function` object.
        functionArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the `Function` object.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the `Function` object.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Function` description.
        dataSourceName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the `DataSource`.
        requestMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: The `Function` request mapping template. Functions support
            only the 2018-05-29 version of the request mapping template.
        responseMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: The `Function` response mapping template.
        functionVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the request mapping template. Currently, only
            the 2018-05-29 version of the template is supported.
        syncConfig:
          $ref: '#/components/schemas/SyncConfig'
        maxBatchSize:
          allOf:
          - $ref: '#/components/schemas/MaxBatchSize'
          description: The maximum batching size for a resolver.
        runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
        code:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The `function` code that contains the request and response
            functions. When code is used, the `runtime` is required. The `runtime`
            value must be `APPSYNC_JS`.
      description: A function is a reusable entity. You can use multiple functions
        to compose the resolver logic.
    Functions:
      type: array
      items:
        $ref: '#/components/schemas/FunctionConfiguration'
    FunctionsIds:
      type: array
      items:
        $ref: '#/components/schemas/String'
    GetApiAssociationRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain name.
      required:
      - domainName
    GetApiAssociationResponse:
      type: object
      properties:
        apiAssociation:
          allOf:
          - $ref: '#/components/schemas/ApiAssociation'
          description: The `ApiAssociation` object.
    GetApiCacheRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
      required:
      - apiId
      description: Represents the input of a `GetApiCache` operation.
    GetApiCacheResponse:
      type: object
      properties:
        apiCache:
          allOf:
          - $ref: '#/components/schemas/ApiCache'
          description: The `ApiCache` object.
      description: Represents the output of a `GetApiCache` operation.
    GetApiRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Api` ID.
      required:
      - apiId
    GetApiResponse:
      type: object
      properties:
        api:
          allOf:
          - $ref: '#/components/schemas/Api'
          description: The `Api` object.
    GetChannelNamespaceRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Api` ID.
        name:
          allOf:
          - $ref: '#/components/schemas/Namespace'
          description: The name of the `ChannelNamespace`.
      required:
      - apiId
      - name
    GetChannelNamespaceResponse:
      type: object
      properties:
        channelNamespace:
          allOf:
          - $ref: '#/components/schemas/ChannelNamespace'
          description: The `ChannelNamespace` object.
    GetDataSourceIntrospectionRequest:
      type: object
      properties:
        introspectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The introspection ID. Each introspection contains a unique
            ID that can be used to reference the instrospection record.
        includeModelsSDL:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A boolean flag that determines whether SDL should be generated
            for introspected types. If set to `true`, each model will contain an `sdl`
            property that contains the SDL for that type. The SDL only contains the
            type data and no additional metadata or directives.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Determines the number of types to be returned in a single response
            before paginating. This value is typically taken from `nextToken` value
            from the previous response.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of introspected types that will be returned
            in a single response.
      required:
      - introspectionId
    GetDataSourceIntrospectionResponse:
      type: object
      properties:
        introspectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The introspection ID. Each introspection contains a unique
            ID that can be used to reference the instrospection record.
        introspectionStatus:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionStatus'
          description: The status of the introspection during retrieval. By default,
            when a new instrospection is being retrieved, the status will be set to
            `PROCESSING`. Once the operation has been completed, the status will change
            to `SUCCESS` or `FAILED` depending on how the data was parsed. A `FAILED`
            operation will return an error and its details as an `introspectionStatusDetail`.
        introspectionStatusDetail:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error detail field. When a `FAILED` `introspectionStatus`
            is returned, the `introspectionStatusDetail` will also return the exact
            error that was generated during the operation.
        introspectionResult:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionResult'
          description: The `DataSourceIntrospectionResult` object data.
    GetDataSourceRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the data source.
      required:
      - apiId
      - name
    GetDataSourceResponse:
      type: object
      properties:
        dataSource:
          allOf:
          - $ref: '#/components/schemas/DataSource'
          description: The `DataSource` object.
    GetDomainNameRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain name.
      required:
      - domainName
    GetDomainNameResponse:
      type: object
      properties:
        domainNameConfig:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfig'
          description: The configuration for the `DomainName`.
    GetFunctionRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The GraphQL API ID.
        functionId:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The `Function` ID.
      required:
      - apiId
      - functionId
    GetFunctionResponse:
      type: object
      properties:
        functionConfiguration:
          allOf:
          - $ref: '#/components/schemas/FunctionConfiguration'
          description: The `Function` object.
    GetGraphqlApiEnvironmentVariablesRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the API from which the environmental variable list
            will be retrieved.
      required:
      - apiId
    GetGraphqlApiEnvironmentVariablesResponse:
      type: object
      properties:
        environmentVariables:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariableMap'
          description: 'The payload containing each environmental variable in the
            `"key" : "value"` format.'
    GetGraphqlApiRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID for the GraphQL API.
      required:
      - apiId
    GetGraphqlApiResponse:
      type: object
      properties:
        graphqlApi:
          allOf:
          - $ref: '#/components/schemas/GraphqlApi'
          description: The `GraphqlApi` object.
    GetIntrospectionSchemaRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        format:
          allOf:
          - $ref: '#/components/schemas/OutputType'
          description: 'The schema format: SDL or JSON.'
        includeDirectives:
          allOf:
          - $ref: '#/components/schemas/BooleanValue'
          description: A flag that specifies whether the schema introspection should
            contain directives.
      required:
      - apiId
      - format
    GetIntrospectionSchemaResponse:
      type: object
      properties:
        schema:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: 'The schema, in GraphQL Schema Definition Language (SDL) format.


            For more information, see the [GraphQL SDL documentation](http://graphql.org/learn/schema/).'
    GetResolverRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        typeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The resolver type name.
        fieldName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The resolver field name.
      required:
      - apiId
      - typeName
      - fieldName
    GetResolverResponse:
      type: object
      properties:
        resolver:
          allOf:
          - $ref: '#/components/schemas/Resolver'
          description: The `Resolver` object.
    GetSchemaCreationStatusRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
      required:
      - apiId
    GetSchemaCreationStatusResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/SchemaStatus'
          description: The current state of the schema (PROCESSING, FAILED, SUCCESS,
            or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add
            data.
        details:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Detailed information about the status of the schema creation
            operation.
    GetSourceApiAssociationRequest:
      type: object
      properties:
        mergedApiIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the AppSync Merged API. This is generated
            by the AppSync service. In most cases, Merged APIs (especially in your
            account) only require the API ID value or ARN of the merged API. However,
            Merged APIs in other accounts (cross-account use cases) strictly require
            the full resource ARN of the merged API.
        associationId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID generated by the AppSync service for the source API
            association.
      required:
      - mergedApiIdentifier
      - associationId
    GetSourceApiAssociationResponse:
      type: object
      properties:
        sourceApiAssociation:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociation'
          description: The `SourceApiAssociation` object data.
    GetTypeRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        typeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The type name.
        format:
          allOf:
          - $ref: '#/components/schemas/TypeDefinitionFormat'
          description: 'The type format: SDL or JSON.'
      required:
      - apiId
      - typeName
      - format
    GetTypeResponse:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The `Type` object.
    GraphQLApiIntrospectionConfig:
      type: string
      enum:
      - ENABLED
      - DISABLED
    GraphQLApiType:
      type: string
      enum:
      - GRAPHQL
      - MERGED
    GraphQLApiVisibility:
      type: string
      enum:
      - GLOBAL
      - PRIVATE
    GraphQLSchemaException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The GraphQL schema is not valid.
    GraphqlApi:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The API name.
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        authenticationType:
          allOf:
          - $ref: '#/components/schemas/AuthenticationType'
          description: The authentication type.
        logConfig:
          allOf:
          - $ref: '#/components/schemas/LogConfig'
          description: The Amazon CloudWatch Logs configuration.
        userPoolConfig:
          allOf:
          - $ref: '#/components/schemas/UserPoolConfig'
          description: The Amazon Cognito user pool configuration.
        openIDConnectConfig:
          allOf:
          - $ref: '#/components/schemas/OpenIDConnectConfig'
          description: The OpenID Connect configuration.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN).
        uris:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The URIs.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags.
        additionalAuthenticationProviders:
          allOf:
          - $ref: '#/components/schemas/AdditionalAuthenticationProviders'
          description: A list of additional authentication providers for the `GraphqlApi`
            API.
        xrayEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A flag indicating whether to use X-Ray tracing for this `GraphqlApi`.
        wafWebAclArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the WAF access control list (ACL) associated with
            this `GraphqlApi`, if one exists.
        lambdaAuthorizerConfig:
          allOf:
          - $ref: '#/components/schemas/LambdaAuthorizerConfig'
          description: Configuration for Lambda function authorization.
        dns:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The DNS records for the API.
        visibility:
          allOf:
          - $ref: '#/components/schemas/GraphQLApiVisibility'
          description: Sets the value of the GraphQL API to public (`GLOBAL`) or private
            (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL`
            by default. This value cannot be changed once the API has been created.
        apiType:
          allOf:
          - $ref: '#/components/schemas/GraphQLApiType'
          description: The value that indicates whether the GraphQL API is a standard
            API (`GRAPHQL`) or merged API (`MERGED`).
        mergedApiExecutionRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Identity and Access Management service role ARN for a merged
            API. The AppSync service assumes this role on behalf of the Merged API
            to validate access to source APIs at runtime and to prompt the `AUTO_MERGE`
            to update the merged API endpoint with the source API changes automatically.
        owner:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The account owner of the GraphQL API.
        ownerContact:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The owner contact information for an API resource.


            This field accepts any string input with a length of 0 - 256 characters.'
        introspectionConfig:
          allOf:
          - $ref: '#/components/schemas/GraphQLApiIntrospectionConfig'
          description: 'Sets the value of the GraphQL API to enable (`ENABLED`) or
            disable (`DISABLED`) introspection. If no value is provided, the introspection
            configuration will be set to `ENABLED` by default. This field will produce
            an error if the operation attempts to use the introspection feature while
            this field is disabled.


            For more information about introspection, see [GraphQL introspection](https://graphql.org/learn/introspection/).'
        queryDepthLimit:
          allOf:
          - $ref: '#/components/schemas/QueryDepthLimit'
          description: 'The maximum depth a query can have in a single request. Depth
            refers to the amount of nested levels allowed in the body of query. The
            default value is `0` (or unspecified), which indicates there''s no depth
            limit. If you set a limit, it can be between `1` and `75` nested levels.
            This field will produce a limit error if the operation falls out of bounds.


            Note that fields can still be set to nullable or non-nullable. If a non-nullable
            field produces an error, the error will be thrown upwards to the first
            nullable field available.'
        resolverCountLimit:
          allOf:
          - $ref: '#/components/schemas/ResolverCountLimit'
          description: The maximum number of resolvers that can be invoked in a single
            request. The default value is `0` (or unspecified), which will set the
            limit to `10000`. When specified, the limit value can be between `1` and
            `10000`. This field will produce a limit error if the operation falls
            out of bounds.
        enhancedMetricsConfig:
          allOf:
          - $ref: '#/components/schemas/EnhancedMetricsConfig'
          description: The `enhancedMetricsConfig` object.
      description: Describes a GraphQL API.
    GraphqlApis:
      type: array
      items:
        $ref: '#/components/schemas/GraphqlApi'
    HandlerBehavior:
      type: string
      enum:
      - CODE
      - DIRECT
    HandlerConfig:
      type: object
      properties:
        behavior:
          allOf:
          - $ref: '#/components/schemas/HandlerBehavior'
          description: The behavior for the handler.
        integration:
          allOf:
          - $ref: '#/components/schemas/Integration'
          description: The integration data source configuration for the handler.
      required:
      - behavior
      - integration
      description: The configuration for a handler.
    HandlerConfigs:
      type: object
      properties:
        onPublish:
          allOf:
          - $ref: '#/components/schemas/HandlerConfig'
          description: The configuration for the `OnPublish` handler.
        onSubscribe:
          allOf:
          - $ref: '#/components/schemas/HandlerConfig'
          description: The configuration for the `OnSubscribe` handler.
      description: The configuration for the `OnPublish` and `OnSubscribe` handlers.
    HttpDataSourceConfig:
      type: object
      properties:
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The HTTP URL endpoint. You can specify either the domain name
            or IP, and port combination, and the URL scheme must be HTTP or HTTPS.
            If you don't specify the port, AppSync uses the default port 80 for the
            HTTP endpoint and port 443 for HTTPS endpoints.
        authorizationConfig:
          allOf:
          - $ref: '#/components/schemas/AuthorizationConfig'
          description: The authorization configuration in case the HTTP endpoint requires
            authorization.
      description: Describes an HTTP data source configuration.
    Integration:
      type: object
      properties:
        dataSourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique name of the data source that has been configured
            on the API.
        lambdaConfig:
          allOf:
          - $ref: '#/components/schemas/LambdaConfig'
          description: The configuration for a Lambda data source.
      required:
      - dataSourceName
      description: The integration data source configuration for the handler.
    InternalFailureException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: An internal AppSync error occurred. Try your request again.
    InvokeType:
      type: string
      enum:
      - REQUEST_RESPONSE
      - EVENT
    LambdaAuthorizerConfig:
      type: object
      properties:
        authorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/TTL'
          description: The number of seconds a response should be cached for. The
            default is 0 seconds, which disables caching. If you don't specify a value
            for `authorizerResultTtlInSeconds`, the default value is used. The maximum
            value is one hour (3600 seconds). The Lambda function can override this
            by returning a `ttlOverride` key in its response.
        authorizerUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon Resource Name (ARN) of the Lambda function to be
            called for authorization. This can be a standard Lambda ARN, a version
            ARN (`.../v3`), or an alias ARN.


            **Note** : This Lambda function must have the following resource-based
            policy assigned to it. When configuring Lambda authorizers in the console,
            this is done for you. To use the Command Line Interface (CLI), run the
            following:


            `aws lambda add-permission --function-name "arn:aws:lambda:us-east-2:111122223333:function:my-function"
            --statement-id "appsync" --principal appsync.amazonaws.com --action lambda:InvokeFunction`'
        identityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A regular expression for validation of tokens before the Lambda
            function is called.
      required:
      - authorizerUri
      description: A `LambdaAuthorizerConfig` specifies how to authorize AppSync API
        access when using the `AWS_LAMBDA` authorizer mode. Be aware that an AppSync
        API can have only one Lambda authorizer configured at a time.
    LambdaConfig:
      type: object
      properties:
        invokeType:
          allOf:
          - $ref: '#/components/schemas/InvokeType'
          description: The invocation type for a Lambda data source.
      description: The configuration for a Lambda data source.
    LambdaConflictHandlerConfig:
      type: object
      properties:
        lambdaConflictHandlerArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) for the Lambda function to use
            as the Conflict Handler.
      description: The `LambdaConflictHandlerConfig` object when configuring `LAMBDA`
        as the Conflict Handler.
    LambdaDataSourceConfig:
      type: object
      properties:
        lambdaFunctionArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) for the Lambda function.
      required:
      - lambdaFunctionArn
      description: Describes an Lambda data source configuration.
    LimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request exceeded a limit. Try your request again.
    ListApiKeysRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
      required:
      - apiId
    ListApiKeysResponse:
      type: object
      properties:
        apiKeys:
          allOf:
          - $ref: '#/components/schemas/ApiKeys'
          description: The `ApiKey` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier to pass in the next request to this operation
            to return the next set of items in the list.
    ListApisRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
    ListApisResponse:
      type: object
      properties:
        apis:
          allOf:
          - $ref: '#/components/schemas/Apis'
          description: The `Api` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
    ListChannelNamespacesRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Api` ID.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
      required:
      - apiId
    ListChannelNamespacesResponse:
      type: object
      properties:
        channelNamespaces:
          allOf:
          - $ref: '#/components/schemas/ChannelNamespaces'
          description: The `ChannelNamespace` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
    ListDataSourcesRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
      required:
      - apiId
    ListDataSourcesResponse:
      type: object
      properties:
        dataSources:
          allOf:
          - $ref: '#/components/schemas/DataSources'
          description: The `DataSource` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier to pass in the next request to this operation
            to return the next set of items in the list.
    ListDomainNamesRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
    ListDomainNamesResponse:
      type: object
      properties:
        domainNameConfigs:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigs'
          description: Lists configurations for multiple domain names.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
    ListFunctionsRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The GraphQL API ID.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
      required:
      - apiId
    ListFunctionsResponse:
      type: object
      properties:
        functions:
          allOf:
          - $ref: '#/components/schemas/Functions'
          description: A list of `Function` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
    ListGraphqlApisRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
        apiType:
          allOf:
          - $ref: '#/components/schemas/GraphQLApiType'
          description: The value that indicates whether the GraphQL API is a standard
            API (`GRAPHQL`) or merged API (`MERGED`).
        owner:
          allOf:
          - $ref: '#/components/schemas/Ownership'
          description: The account owner of the GraphQL API.
    ListGraphqlApisResponse:
      type: object
      properties:
        graphqlApis:
          allOf:
          - $ref: '#/components/schemas/GraphqlApis'
          description: The `GraphqlApi` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier to pass in the next request to this operation
            to return the next set of items in the list.
    ListResolversByFunctionRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        functionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The function ID.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
      required:
      - apiId
      - functionId
    ListResolversByFunctionResponse:
      type: object
      properties:
        resolvers:
          allOf:
          - $ref: '#/components/schemas/Resolvers'
          description: The list of resolvers.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that you can use to return the next set of items
            in the list.
    ListResolversRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        typeName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type name.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
      required:
      - apiId
      - typeName
    ListResolversResponse:
      type: object
      properties:
        resolvers:
          allOf:
          - $ref: '#/components/schemas/Resolvers'
          description: The `Resolver` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier to pass in the next request to this operation
            to return the next set of items in the list.
    ListSourceApiAssociationsRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
      required:
      - apiId
    ListSourceApiAssociationsResponse:
      type: object
      properties:
        sourceApiAssociationSummaries:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociationSummaryList'
          description: The `SourceApiAssociationSummary` object data.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The `GraphqlApi` Amazon Resource Name (ARN).
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A `TagMap` object.
    ListTypesByAssociationRequest:
      type: object
      properties:
        mergedApiIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the AppSync Merged API. This is generated
            by the AppSync service. In most cases, Merged APIs (especially in your
            account) only require the API ID value or ARN of the merged API. However,
            Merged APIs in other accounts (cross-account use cases) strictly require
            the full resource ARN of the merged API.
        associationId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID generated by the AppSync service for the source API
            association.
        format:
          allOf:
          - $ref: '#/components/schemas/TypeDefinitionFormat'
          description: The format type.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
      required:
      - mergedApiIdentifier
      - associationId
      - format
    ListTypesByAssociationResponse:
      type: object
      properties:
        types:
          allOf:
          - $ref: '#/components/schemas/TypeList'
          description: The `Type` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
    ListTypesRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        format:
          allOf:
          - $ref: '#/components/schemas/TypeDefinitionFormat'
          description: 'The type format: SDL or JSON.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier that was returned from the previous call to this
            operation, which you can use to return the next set of items in the list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that you want the request to
            return.
      required:
      - apiId
      - format
    ListTypesResponse:
      type: object
      properties:
        types:
          allOf:
          - $ref: '#/components/schemas/TypeList'
          description: The `Type` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: An identifier to pass in the next request to this operation
            to return the next set of items in the list.
    LogConfig:
      type: object
      properties:
        fieldLogLevel:
          allOf:
          - $ref: '#/components/schemas/FieldLogLevel'
          description: "The field logging level. Values can be NONE, ERROR, or ALL.\n\
            \n  * **NONE** : No field-level logs are captured.\n\n  * **ERROR** :\
            \ Logs the following information only for the fields that are in error:\n\
            \n    * The error section in the server response.\n\n    * Field-level\
            \ errors.\n\n    * The generated request/response functions that got resolved\
            \ for error fields.\n\n  * **ALL** : The following information is logged\
            \ for all fields in the query:\n\n    * Field-level tracing information.\n\
            \n    * The generated request/response functions that got resolved for\
            \ each field."
        cloudWatchLogsRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The service role that AppSync assumes to publish to CloudWatch
            logs in your account.
        excludeVerboseContent:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Set to TRUE to exclude sections that contain information such
            as headers, context, and evaluated mapping templates, regardless of logging
            level.
      required:
      - fieldLogLevel
      - cloudWatchLogsRoleArn
      description: The Amazon CloudWatch Logs configuration.
    Logs:
      type: array
      items:
        $ref: '#/components/schemas/String'
    Long:
      type: integer
      format: int64
      default: 0
    MapOfStringToString:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    MappingTemplate:
      type: string
      pattern: ^.*$
      minLength: 1
      maxLength: 65536
    MaxBatchSize:
      type: integer
      default: 0
      minimum: 0
      maximum: 2000
    MaxResults:
      type: integer
      default: 0
      minimum: 0
      maximum: 25
    MergeType:
      type: string
      enum:
      - MANUAL_MERGE
      - AUTO_MERGE
    Namespace:
      type: string
      pattern: ^([A-Za-z0-9](?:[A-Za-z0-9\-]{0,48}[A-Za-z0-9])?)$
      minLength: 1
      maxLength: 50
    NotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The resource specified in the request was not found. Check the
        resource, and then try again.
    OpenIDConnectConfig:
      type: object
      properties:
        issuer:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The issuer for the OIDC configuration. The issuer returned
            by discovery must exactly match the value of `iss` in the ID token.
        clientId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The client identifier of the relying party at the OpenID identity
            provider. This identifier is typically obtained when the relying party
            is registered with the OpenID identity provider. You can specify a regular
            expression so that AppSync can validate against multiple client identifiers
            at a time.
        iatTTL:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of milliseconds that a token is valid after it's
            issued to a user.
        authTTL:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of milliseconds that a token is valid after being
            authenticated.
      required:
      - issuer
      description: Describes an OpenID Connect (OIDC) configuration.
    OpenSearchServiceDataSourceConfig:
      type: object
      properties:
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The endpoint.
        awsRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Region.
      required:
      - endpoint
      - awsRegion
      description: Describes an OpenSearch data source configuration.
    OperationLevelMetricsConfig:
      type: string
      enum:
      - ENABLED
      - DISABLED
    OutErrors:
      type: string
      pattern: ^[\s\S]*$
    OutputType:
      type: string
      enum:
      - SDL
      - JSON
    OwnerContact:
      type: string
      pattern: ^[A-Za-z0-9_\-\ \.]+$
      minLength: 0
      maxLength: 250
    Ownership:
      type: string
      enum:
      - CURRENT_ACCOUNT
      - OTHER_ACCOUNTS
    PaginationToken:
      type: string
      pattern: ^[\S]+$
      minLength: 1
      maxLength: 65536
    PipelineConfig:
      type: object
      properties:
        functions:
          allOf:
          - $ref: '#/components/schemas/FunctionsIds'
          description: A list of `Function` objects.
      description: The pipeline configuration for a resolver of kind `PIPELINE`.
    PutGraphqlApiEnvironmentVariablesRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the API to which the environmental variable list
            will be written.
        environmentVariables:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariableMap'
          description: "The list of environmental variables to add to the API.\n\n\
            When creating an environmental variable key-value pair, it must follow\
            \ the additional constraints below:\n\n  * Keys must begin with a letter.\n\
            \n  * Keys must be at least two characters long.\n\n  * Keys can only\
            \ contain letters, numbers, and the underscore character (_).\n\n  * Values\
            \ can be up to 512 characters long.\n\n  * You can configure up to 50\
            \ key-value pairs in a GraphQL API.\n\nYou can create a list of environmental\
            \ variables by adding it to the `environmentVariables` payload as a list\
            \ in the format `{\"key1\":\"value1\",\"key2\":\"value2\", …}`. Note that\
            \ each call of the `PutGraphqlApiEnvironmentVariables` action will result\
            \ in the overwriting of the existing environmental variable list of that\
            \ API. This means the existing environmental variables will be lost. To\
            \ avoid this, you must include all existing and new environmental variables\
            \ in the list each time you call this action."
      required:
      - apiId
      - environmentVariables
    PutGraphqlApiEnvironmentVariablesResponse:
      type: object
      properties:
        environmentVariables:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariableMap'
          description: 'The payload containing each environmental variable in the
            `"key" : "value"` format.'
    QueryDepthLimit:
      type: integer
      default: 0
      minimum: 0
      maximum: 75
    RdsDataApiConfig:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/RdsDataApiConfigResourceArn'
          description: The resource ARN of the RDS cluster.
        secretArn:
          allOf:
          - $ref: '#/components/schemas/RdsDataApiConfigSecretArn'
          description: The secret's ARN that was obtained from Secrets Manager. A
            secret consists of secret information, the secret value, plus metadata
            about the secret. A secret value can be a string or binary. It typically
            includes the ARN, secret name and description, policies, tags, encryption
            key from the Key Management Service, and key rotation data.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/RdsDataApiConfigDatabaseName'
          description: The name of the database in the cluster.
      required:
      - resourceArn
      - secretArn
      - databaseName
      description: Contains the metadata required to introspect the RDS cluster.
    RdsDataApiConfigDatabaseName:
      type: string
      minLength: 1
      maxLength: 128
    RdsDataApiConfigResourceArn:
      type: string
      pattern: ^arn:[a-z-]*:rds:[a-z0-9-]*:\d{12}:cluster:[0-9A-Za-z_/-]*$
      minLength: 20
      maxLength: 2048
    RdsDataApiConfigSecretArn:
      type: string
      pattern: ^arn:[a-z-]*:secretsmanager:[a-z0-9-]*:\d{12}:secret:[0-9A-Za-z_/+=.@!-]*$
      minLength: 20
      maxLength: 2048
    RdsHttpEndpointConfig:
      type: object
      properties:
        awsRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Amazon Web Services Region for Amazon RDS HTTP endpoint.
        dbClusterIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Amazon RDS cluster Amazon Resource Name (ARN).
        databaseName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Logical database name.
        schema:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Logical schema name.
        awsSecretStoreArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Amazon Web Services secret store Amazon Resource Name (ARN)
            for database credentials.
      description: The Amazon Relational Database Service (Amazon RDS) HTTP endpoint
        configuration.
    RelationalDatabaseDataSourceConfig:
      type: object
      properties:
        relationalDatabaseSourceType:
          allOf:
          - $ref: '#/components/schemas/RelationalDatabaseSourceType'
          description: "Source type for the relational database.\n\n  * **RDS_HTTP_ENDPOINT**\
            \ : The relational database source type is an Amazon Relational Database\
            \ Service (Amazon RDS) HTTP endpoint."
        rdsHttpEndpointConfig:
          allOf:
          - $ref: '#/components/schemas/RdsHttpEndpointConfig'
          description: Amazon RDS HTTP endpoint settings.
      description: Describes a relational database data source configuration.
    RelationalDatabaseSourceType:
      type: string
      enum:
      - RDS_HTTP_ENDPOINT
    Resolver:
      type: object
      properties:
        typeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The resolver type name.
        fieldName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The resolver field name.
        dataSourceName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The resolver data source name.
        resolverArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resolver Amazon Resource Name (ARN).
        requestMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: The request mapping template.
        responseMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: The response mapping template.
        kind:
          allOf:
          - $ref: '#/components/schemas/ResolverKind'
          description: "The resolver type.\n\n  * **UNIT** : A UNIT resolver type.\
            \ A UNIT resolver is the default resolver type. You can use a UNIT resolver\
            \ to run a GraphQL query against a single data source.\n\n  * **PIPELINE**\
            \ : A PIPELINE resolver type. You can use a PIPELINE resolver to invoke\
            \ a series of `Function` objects in a serial manner. You can use a pipeline\
            \ resolver to run a GraphQL query against multiple data sources."
        pipelineConfig:
          allOf:
          - $ref: '#/components/schemas/PipelineConfig'
          description: The `PipelineConfig`.
        syncConfig:
          allOf:
          - $ref: '#/components/schemas/SyncConfig'
          description: The `SyncConfig` for a resolver attached to a versioned data
            source.
        cachingConfig:
          allOf:
          - $ref: '#/components/schemas/CachingConfig'
          description: The caching configuration for the resolver.
        maxBatchSize:
          allOf:
          - $ref: '#/components/schemas/MaxBatchSize'
          description: The maximum batching size for a resolver.
        runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
        code:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The `resolver` code that contains the request and response
            functions. When code is used, the `runtime` is required. The `runtime`
            value must be `APPSYNC_JS`.
        metricsConfig:
          allOf:
          - $ref: '#/components/schemas/ResolverLevelMetricsConfig'
          description: 'Enables or disables enhanced resolver metrics for specified
            resolvers. Note that `metricsConfig` won''t be used unless the `resolverLevelMetricsBehavior`
            value is set to `PER_RESOLVER_METRICS`. If the `resolverLevelMetricsBehavior`
            is set to `FULL_REQUEST_RESOLVER_METRICS` instead, `metricsConfig` will
            be ignored. However, you can still set its value.


            `metricsConfig` can be `ENABLED` or `DISABLED`.'
      description: Describes a resolver.
    ResolverCountLimit:
      type: integer
      default: 0
      minimum: 0
      maximum: 10000
    ResolverKind:
      type: string
      enum:
      - UNIT
      - PIPELINE
    ResolverLevelMetricsBehavior:
      type: string
      enum:
      - FULL_REQUEST_RESOLVER_METRICS
      - PER_RESOLVER_METRICS
    ResolverLevelMetricsConfig:
      type: string
      enum:
      - ENABLED
      - DISABLED
    Resolvers:
      type: array
      items:
        $ref: '#/components/schemas/Resolver'
    ResourceArn:
      type: string
      pattern: ^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$
      minLength: 70
      maxLength: 75
    ResourceName:
      type: string
      pattern: ^[_A-Za-z][_0-9A-Za-z]*$
      minLength: 1
      maxLength: 65536
    RuntimeName:
      type: string
      enum:
      - APPSYNC_JS
    SchemaStatus:
      type: string
      enum:
      - PROCESSING
      - ACTIVE
      - DELETING
      - FAILED
      - SUCCESS
      - NOT_APPLICABLE
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The operation exceeded the service quota for this resource.
    SourceApiAssociation:
      type: object
      properties:
        associationId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID generated by the AppSync service for the source API
            association.
        associationArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the source API association.
        sourceApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the AppSync source API.
        sourceApiArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the AppSync source API.
        mergedApiArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the AppSync Merged API.
        mergedApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the AppSync Merged API.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description field.
        sourceApiAssociationConfig:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociationConfig'
          description: The `SourceApiAssociationConfig` object data.
        sourceApiAssociationStatus:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociationStatus'
          description: The state of the source API association.
        sourceApiAssociationStatusDetail:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The detailed message related to the current state of the source
            API association.
        lastSuccessfulMergeDate:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The datetime value of the last successful merge of the source
            API association. The result will be in UTC format and your local time
            zone.
      description: 'Describes the configuration of a source API. A source API is a
        GraphQL API that is linked to a merged API. There can be multiple source APIs
        attached to each merged API. When linked to a merged API, the source API''s
        schema, data sources, and resolvers will be combined with other linked source
        API data to form a new, singular API.


        Source APIs can originate from your account or from other accounts via Amazon
        Web Services Resource Access Manager. For more information about sharing resources
        from other accounts, see [What is Amazon Web Services Resource Access Manager?](https://docs.aws.amazon.com/ram/latest/userguide/what-is.html)
        in the _Amazon Web Services Resource Access Manager_ guide.'
    SourceApiAssociationConfig:
      type: object
      properties:
        mergeType:
          allOf:
          - $ref: '#/components/schemas/MergeType'
          description: 'The property that indicates which merging option is enabled
            in the source API association.


            Valid merge types are `MANUAL_MERGE` (default) and `AUTO_MERGE`. Manual
            merges are the default behavior and require the user to trigger any changes
            from the source APIs to the merged API manually. Auto merges subscribe
            the merged API to the changes performed on the source APIs so that any
            change in the source APIs are also made to the merged API. Auto merges
            use `MergedApiExecutionRoleArn` to perform merge operations.'
      description: Describes properties used to specify configurations related to
        a source API.
    SourceApiAssociationStatus:
      type: string
      enum:
      - MERGE_SCHEDULED
      - MERGE_FAILED
      - MERGE_SUCCESS
      - MERGE_IN_PROGRESS
      - AUTO_MERGE_SCHEDULE_FAILED
      - DELETION_SCHEDULED
      - DELETION_IN_PROGRESS
      - DELETION_FAILED
    SourceApiAssociationSummary:
      type: object
      properties:
        associationId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID generated by the AppSync service for the source API
            association.
        associationArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the source API association.
        sourceApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the AppSync source API.
        sourceApiArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the AppSync Source API.
        mergedApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the AppSync Merged API.
        mergedApiArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the AppSync Merged API.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description field.
      description: Describes the ARNs and IDs of associations, Merged APIs, and source
        APIs.
    SourceApiAssociationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/SourceApiAssociationSummary'
    StartDataSourceIntrospectionRequest:
      type: object
      properties:
        rdsDataApiConfig:
          allOf:
          - $ref: '#/components/schemas/RdsDataApiConfig'
          description: The `rdsDataApiConfig` object data.
    StartDataSourceIntrospectionResponse:
      type: object
      properties:
        introspectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The introspection ID. Each introspection contains a unique
            ID that can be used to reference the instrospection record.
        introspectionStatus:
          allOf:
          - $ref: '#/components/schemas/DataSourceIntrospectionStatus'
          description: The status of the introspection during creation. By default,
            when a new instrospection has been created, the status will be set to
            `PROCESSING`. Once the operation has been completed, the status will change
            to `SUCCESS` or `FAILED` depending on how the data was parsed. A `FAILED`
            operation will return an error and its details as an `introspectionStatusDetail`.
        introspectionStatusDetail:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error detail field. When a `FAILED` `introspectionStatus`
            is returned, the `introspectionStatusDetail` will also return the exact
            error that was generated during the operation.
    StartSchemaCreationRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        definition:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The schema definition, in GraphQL schema language format.
      required:
      - apiId
      - definition
    StartSchemaCreationResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/SchemaStatus'
          description: The current state of the schema (PROCESSING, FAILED, SUCCESS,
            or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add
            data.
    StartSchemaMergeRequest:
      type: object
      properties:
        associationId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID generated by the AppSync service for the source API
            association.
        mergedApiIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the AppSync Merged API. This is generated
            by the AppSync service. In most cases, Merged APIs (especially in your
            account) only require the API ID value or ARN of the merged API. However,
            Merged APIs in other accounts (cross-account use cases) strictly require
            the full resource ARN of the merged API.
      required:
      - associationId
      - mergedApiIdentifier
    StartSchemaMergeResponse:
      type: object
      properties:
        sourceApiAssociationStatus:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociationStatus'
          description: The state of the source API association.
    Stash:
      type: string
      pattern: ^[\s\S]*$
    String:
      type: string
    SyncConfig:
      type: object
      properties:
        conflictHandler:
          allOf:
          - $ref: '#/components/schemas/ConflictHandlerType'
          description: "The Conflict Resolution strategy to perform in the event of\
            \ a conflict.\n\n  * **OPTIMISTIC_CONCURRENCY** : Resolve conflicts by\
            \ rejecting mutations when versions don't match the latest version at\
            \ the server.\n\n  * **AUTOMERGE** : Resolve conflicts with the Automerge\
            \ conflict resolution strategy.\n\n  * **LAMBDA** : Resolve conflicts\
            \ with an Lambda function supplied in the `LambdaConflictHandlerConfig`."
        conflictDetection:
          allOf:
          - $ref: '#/components/schemas/ConflictDetectionType'
          description: "The Conflict Detection strategy to use.\n\n  * **VERSION**\
            \ : Detect conflicts based on object versions for this resolver.\n\n \
            \ * **NONE** : Do not detect conflicts when invoking this resolver."
        lambdaConflictHandlerConfig:
          allOf:
          - $ref: '#/components/schemas/LambdaConflictHandlerConfig'
          description: The `LambdaConflictHandlerConfig` when configuring `LAMBDA`
            as the Conflict Handler.
      description: 'Describes a Sync configuration for a resolver.


        Specifies which Conflict Detection strategy and Resolution strategy to use
        when the resolver is invoked.'
    TTL:
      type: integer
      default: 0
      minimum: 0
      maximum: 3600
    TagKey:
      type: string
      pattern: ^(?!aws:)[ a-zA-Z+-=._:/]+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      description: "<p>A map with keys of <code>TagKey</code> objects and values of\
        \ <code>TagValue</code>\n         objects.</p>"
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The `GraphqlApi` Amazon Resource Name (ARN).
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A `TagMap` object.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      pattern: ^[\s\w+-=\.:/@]*$
      minLength: 0
      maxLength: 256
    Template:
      type: string
      pattern: ^[\s\S]*$
      minLength: 2
      maxLength: 65536
    Timestamp:
      type: string
      format: date-time
    Type:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The type name.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type description.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type Amazon Resource Name (ARN).
        definition:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type definition.
        format:
          allOf:
          - $ref: '#/components/schemas/TypeDefinitionFormat'
          description: 'The type format: SDL or JSON.'
      description: Describes a type.
    TypeDefinitionFormat:
      type: string
      enum:
      - SDL
      - JSON
    TypeList:
      type: array
      items:
        $ref: '#/components/schemas/Type'
    UnauthorizedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: You aren't authorized to perform this operation.
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The `GraphqlApi` Amazon Resource Name (ARN).
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of `TagKey` objects.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateApiCacheRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The GraphQL API ID.
        ttl:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: 'TTL in seconds for cache entries.


            Valid values are 1–3,600 seconds.'
        apiCachingBehavior:
          allOf:
          - $ref: '#/components/schemas/ApiCachingBehavior'
          description: "Caching behavior.\n\n  * **FULL_REQUEST_CACHING** : All requests\
            \ from the same user are cached. Individual resolvers are automatically\
            \ cached. All API calls will try to return responses from the cache.\n\
            \n  * **PER_RESOLVER_CACHING** : Individual resolvers that you specify\
            \ are cached.\n\n  * **OPERATION_LEVEL_CACHING** : Full requests are cached\
            \ together and returned without executing resolvers."
        type:
          allOf:
          - $ref: '#/components/schemas/ApiCacheType'
          description: "The cache instance type. Valid values are\n\n  * `SMALL`\n\
            \n  * `MEDIUM`\n\n  * `LARGE`\n\n  * `XLARGE`\n\n  * `LARGE_2X`\n\n  *\
            \ `LARGE_4X`\n\n  * `LARGE_8X` (not available in all regions)\n\n  * `LARGE_12X`\n\
            \nHistorically, instance types were identified by an EC2-style value.\
            \ As of July 2020, this is deprecated, and the generic identifiers above\
            \ should be used.\n\nThe following legacy instance types are available,\
            \ but their use is discouraged:\n\n  * **T2_SMALL** : A t2.small instance\
            \ type.\n\n  * **T2_MEDIUM** : A t2.medium instance type.\n\n  * **R4_LARGE**\
            \ : A r4.large instance type.\n\n  * **R4_XLARGE** : A r4.xlarge instance\
            \ type.\n\n  * **R4_2XLARGE** : A r4.2xlarge instance type.\n\n  * **R4_4XLARGE**\
            \ : A r4.4xlarge instance type.\n\n  * **R4_8XLARGE** : A r4.8xlarge instance\
            \ type."
        healthMetricsConfig:
          allOf:
          - $ref: '#/components/schemas/CacheHealthMetricsConfig'
          description: "Controls how cache health metrics will be emitted to CloudWatch.\
            \ Cache health metrics include:\n\n  * NetworkBandwidthOutAllowanceExceeded:\
            \ The network packets dropped because the throughput exceeded the aggregated\
            \ bandwidth limit. This is useful for diagnosing bottlenecks in a cache\
            \ configuration.\n\n  * EngineCPUUtilization: The CPU utilization (percentage)\
            \ allocated to the Redis process. This is useful for diagnosing bottlenecks\
            \ in a cache configuration.\n\nMetrics will be recorded by API ID. You\
            \ can set the value to `ENABLED` or `DISABLED`."
      required:
      - apiId
      - ttl
      - apiCachingBehavior
      - type
      description: Represents the input of a `UpdateApiCache` operation.
    UpdateApiCacheResponse:
      type: object
      properties:
        apiCache:
          allOf:
          - $ref: '#/components/schemas/ApiCache'
          description: The `ApiCache` object.
      description: Represents the output of a `UpdateApiCache` operation.
    UpdateApiKeyRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID for the GraphQL API.
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API key ID.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the purpose of the API key.
        expires:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: From the update time, the time after which the API key expires.
            The date is represented as seconds since the epoch. For more information,
            see .
      required:
      - apiId
      - id
    UpdateApiKeyResponse:
      type: object
      properties:
        apiKey:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: The API key.
    UpdateApiRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Api` ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ApiName'
          description: The name of the Api.
        ownerContact:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The owner contact information for the `Api`.
        eventConfig:
          allOf:
          - $ref: '#/components/schemas/EventConfig'
          description: The new event configuration. This includes the default authorization
            configuration for connecting, publishing, and subscribing to an Event
            API.
      required:
      - apiId
      - name
    UpdateApiResponse:
      type: object
      properties:
        api:
          allOf:
          - $ref: '#/components/schemas/Api'
          description: The `Api` object.
    UpdateChannelNamespaceRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Api` ID.
        name:
          allOf:
          - $ref: '#/components/schemas/Namespace'
          description: The name of the `ChannelNamespace`.
        subscribeAuthModes:
          allOf:
          - $ref: '#/components/schemas/AuthModes'
          description: The authorization mode to use for subscribing to messages on
            the channel namespace. This configuration overrides the default `Api`
            authorization configuration.
        publishAuthModes:
          allOf:
          - $ref: '#/components/schemas/AuthModes'
          description: The authorization mode to use for publishing messages on the
            channel namespace. This configuration overrides the default `Api` authorization
            configuration.
        codeHandlers:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The event handler functions that run custom business logic
            to process published events and subscribe requests.
        handlerConfigs:
          allOf:
          - $ref: '#/components/schemas/HandlerConfigs'
          description: The configuration for the `OnPublish` and `OnSubscribe` handlers.
      required:
      - apiId
      - name
    UpdateChannelNamespaceResponse:
      type: object
      properties:
        channelNamespace:
          allOf:
          - $ref: '#/components/schemas/ChannelNamespace'
          description: The `ChannelNamespace` object.
    UpdateDataSourceRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The new name for the data source.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The new description for the data source.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceType'
          description: The new data source type.
        serviceRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The new service role Amazon Resource Name (ARN) for the data
            source.
        dynamodbConfig:
          allOf:
          - $ref: '#/components/schemas/DynamodbDataSourceConfig'
          description: The new Amazon DynamoDB configuration.
        lambdaConfig:
          allOf:
          - $ref: '#/components/schemas/LambdaDataSourceConfig'
          description: The new Lambda configuration.
        elasticsearchConfig:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchDataSourceConfig'
          description: 'The new OpenSearch configuration.


            As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch
            Service. This configuration is deprecated. Instead, use UpdateDataSourceRequest$openSearchServiceConfig
            to update an OpenSearch data source.'
        openSearchServiceConfig:
          allOf:
          - $ref: '#/components/schemas/OpenSearchServiceDataSourceConfig'
          description: The new OpenSearch configuration.
        httpConfig:
          allOf:
          - $ref: '#/components/schemas/HttpDataSourceConfig'
          description: The new HTTP endpoint configuration.
        relationalDatabaseConfig:
          allOf:
          - $ref: '#/components/schemas/RelationalDatabaseDataSourceConfig'
          description: The new relational database configuration.
        eventBridgeConfig:
          allOf:
          - $ref: '#/components/schemas/EventBridgeDataSourceConfig'
          description: The new Amazon EventBridge settings.
        metricsConfig:
          allOf:
          - $ref: '#/components/schemas/DataSourceLevelMetricsConfig'
          description: 'Enables or disables enhanced data source metrics for specified
            data sources. Note that `metricsConfig` won''t be used unless the `dataSourceLevelMetricsBehavior`
            value is set to `PER_DATA_SOURCE_METRICS`. If the `dataSourceLevelMetricsBehavior`
            is set to `FULL_REQUEST_DATA_SOURCE_METRICS` instead, `metricsConfig`
            will be ignored. However, you can still set its value.


            `metricsConfig` can be `ENABLED` or `DISABLED`.'
      required:
      - apiId
      - name
      - type
    UpdateDataSourceResponse:
      type: object
      properties:
        dataSource:
          allOf:
          - $ref: '#/components/schemas/DataSource'
          description: The updated `DataSource` object.
    UpdateDomainNameRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the `DomainName`.
      required:
      - domainName
    UpdateDomainNameResponse:
      type: object
      properties:
        domainNameConfig:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfig'
          description: The configuration for the `DomainName`.
    UpdateFunctionRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The GraphQL API ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The `Function` name.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `Function` description.
        functionId:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The function ID.
        dataSourceName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The `Function` `DataSource` name.
        requestMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: The `Function` request mapping template. Functions support
            only the 2018-05-29 version of the request mapping template.
        responseMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: The `Function` request mapping template.
        functionVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `version` of the request mapping template. Currently, the
            supported value is 2018-05-29. Note that when using VTL and mapping templates,
            the `functionVersion` is required.
        syncConfig:
          $ref: '#/components/schemas/SyncConfig'
        maxBatchSize:
          allOf:
          - $ref: '#/components/schemas/MaxBatchSize'
          description: The maximum batching size for a resolver.
        runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
        code:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The `function` code that contains the request and response
            functions. When code is used, the `runtime` is required. The `runtime`
            value must be `APPSYNC_JS`.
      required:
      - apiId
      - name
      - functionId
      - dataSourceName
    UpdateFunctionResponse:
      type: object
      properties:
        functionConfiguration:
          allOf:
          - $ref: '#/components/schemas/FunctionConfiguration'
          description: The `Function` object.
    UpdateGraphqlApiRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The new name for the `GraphqlApi` object.
        logConfig:
          allOf:
          - $ref: '#/components/schemas/LogConfig'
          description: The Amazon CloudWatch Logs configuration for the `GraphqlApi`
            object.
        authenticationType:
          allOf:
          - $ref: '#/components/schemas/AuthenticationType'
          description: The new authentication type for the `GraphqlApi` object.
        userPoolConfig:
          allOf:
          - $ref: '#/components/schemas/UserPoolConfig'
          description: The new Amazon Cognito user pool configuration for the `~GraphqlApi`
            object.
        openIDConnectConfig:
          allOf:
          - $ref: '#/components/schemas/OpenIDConnectConfig'
          description: The OpenID Connect configuration for the `GraphqlApi` object.
        additionalAuthenticationProviders:
          allOf:
          - $ref: '#/components/schemas/AdditionalAuthenticationProviders'
          description: A list of additional authentication providers for the `GraphqlApi`
            API.
        xrayEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A flag indicating whether to use X-Ray tracing for the `GraphqlApi`.
        lambdaAuthorizerConfig:
          allOf:
          - $ref: '#/components/schemas/LambdaAuthorizerConfig'
          description: Configuration for Lambda function authorization.
        mergedApiExecutionRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Identity and Access Management service role ARN for a merged
            API. The AppSync service assumes this role on behalf of the Merged API
            to validate access to source APIs at runtime and to prompt the `AUTO_MERGE`
            to update the merged API endpoint with the source API changes automatically.
        ownerContact:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The owner contact information for an API resource.


            This field accepts any string input with a length of 0 - 256 characters.'
        introspectionConfig:
          allOf:
          - $ref: '#/components/schemas/GraphQLApiIntrospectionConfig'
          description: 'Sets the value of the GraphQL API to enable (`ENABLED`) or
            disable (`DISABLED`) introspection. If no value is provided, the introspection
            configuration will be set to `ENABLED` by default. This field will produce
            an error if the operation attempts to use the introspection feature while
            this field is disabled.


            For more information about introspection, see [GraphQL introspection](https://graphql.org/learn/introspection/).'
        queryDepthLimit:
          allOf:
          - $ref: '#/components/schemas/QueryDepthLimit'
          description: 'The maximum depth a query can have in a single request. Depth
            refers to the amount of nested levels allowed in the body of query. The
            default value is `0` (or unspecified), which indicates there''s no depth
            limit. If you set a limit, it can be between `1` and `75` nested levels.
            This field will produce a limit error if the operation falls out of bounds.


            Note that fields can still be set to nullable or non-nullable. If a non-nullable
            field produces an error, the error will be thrown upwards to the first
            nullable field available.'
        resolverCountLimit:
          allOf:
          - $ref: '#/components/schemas/ResolverCountLimit'
          description: The maximum number of resolvers that can be invoked in a single
            request. The default value is `0` (or unspecified), which will set the
            limit to `10000`. When specified, the limit value can be between `1` and
            `10000`. This field will produce a limit error if the operation falls
            out of bounds.
        enhancedMetricsConfig:
          allOf:
          - $ref: '#/components/schemas/EnhancedMetricsConfig'
          description: The `enhancedMetricsConfig` object.
      required:
      - apiId
      - name
      - authenticationType
    UpdateGraphqlApiResponse:
      type: object
      properties:
        graphqlApi:
          allOf:
          - $ref: '#/components/schemas/GraphqlApi'
          description: The updated `GraphqlApi` object.
    UpdateResolverRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        typeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The new type name.
        fieldName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The new field name.
        dataSourceName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The new data source name.
        requestMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: 'The new request mapping template.


            A resolver uses a request mapping template to convert a GraphQL expression
            into a format that a data source can understand. Mapping templates are
            written in Apache Velocity Template Language (VTL).


            VTL request mapping templates are optional when using an Lambda data source.
            For all other data sources, VTL request and response mapping templates
            are required.'
        responseMappingTemplate:
          allOf:
          - $ref: '#/components/schemas/MappingTemplate'
          description: The new response mapping template.
        kind:
          allOf:
          - $ref: '#/components/schemas/ResolverKind'
          description: "The resolver type.\n\n  * **UNIT** : A UNIT resolver type.\
            \ A UNIT resolver is the default resolver type. You can use a UNIT resolver\
            \ to run a GraphQL query against a single data source.\n\n  * **PIPELINE**\
            \ : A PIPELINE resolver type. You can use a PIPELINE resolver to invoke\
            \ a series of `Function` objects in a serial manner. You can use a pipeline\
            \ resolver to run a GraphQL query against multiple data sources."
        pipelineConfig:
          allOf:
          - $ref: '#/components/schemas/PipelineConfig'
          description: The `PipelineConfig`.
        syncConfig:
          allOf:
          - $ref: '#/components/schemas/SyncConfig'
          description: The `SyncConfig` for a resolver attached to a versioned data
            source.
        cachingConfig:
          allOf:
          - $ref: '#/components/schemas/CachingConfig'
          description: The caching configuration for the resolver.
        maxBatchSize:
          allOf:
          - $ref: '#/components/schemas/MaxBatchSize'
          description: The maximum batching size for a resolver.
        runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
        code:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The `resolver` code that contains the request and response
            functions. When code is used, the `runtime` is required. The `runtime`
            value must be `APPSYNC_JS`.
        metricsConfig:
          allOf:
          - $ref: '#/components/schemas/ResolverLevelMetricsConfig'
          description: 'Enables or disables enhanced resolver metrics for specified
            resolvers. Note that `metricsConfig` won''t be used unless the `resolverLevelMetricsBehavior`
            value is set to `PER_RESOLVER_METRICS`. If the `resolverLevelMetricsBehavior`
            is set to `FULL_REQUEST_RESOLVER_METRICS` instead, `metricsConfig` will
            be ignored. However, you can still set its value.


            `metricsConfig` can be `ENABLED` or `DISABLED`.'
      required:
      - apiId
      - typeName
      - fieldName
    UpdateResolverResponse:
      type: object
      properties:
        resolver:
          allOf:
          - $ref: '#/components/schemas/Resolver'
          description: The updated `Resolver` object.
    UpdateSourceApiAssociationRequest:
      type: object
      properties:
        associationId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID generated by the AppSync service for the source API
            association.
        mergedApiIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the AppSync Merged API. This is generated
            by the AppSync service. In most cases, Merged APIs (especially in your
            account) only require the API ID value or ARN of the merged API. However,
            Merged APIs in other accounts (cross-account use cases) strictly require
            the full resource ARN of the merged API.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description field.
        sourceApiAssociationConfig:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociationConfig'
          description: The `SourceApiAssociationConfig` object data.
      required:
      - associationId
      - mergedApiIdentifier
    UpdateSourceApiAssociationResponse:
      type: object
      properties:
        sourceApiAssociation:
          allOf:
          - $ref: '#/components/schemas/SourceApiAssociation'
          description: The `SourceApiAssociation` object data.
    UpdateTypeRequest:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API ID.
        typeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The new type name.
        definition:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The new definition.
        format:
          allOf:
          - $ref: '#/components/schemas/TypeDefinitionFormat'
          description: 'The new type format: SDL or JSON.'
      required:
      - apiId
      - typeName
      - format
    UpdateTypeResponse:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The updated `Type` object.
    UserPoolConfig:
      type: object
      properties:
        userPoolId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user pool ID.
        awsRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Region in which the user pool was created.
        defaultAction:
          allOf:
          - $ref: '#/components/schemas/DefaultAction'
          description: The action that you want your GraphQL API to take when a request
            that uses Amazon Cognito user pool authentication doesn't match the Amazon
            Cognito user pool configuration.
        appIdClientRegex:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A regular expression for validating the incoming Amazon Cognito
            user pool app client ID. If this value isn't set, no filtering is applied.
      required:
      - userPoolId
      - awsRegion
      - defaultAction
      description: Describes an Amazon Cognito user pool configuration.
