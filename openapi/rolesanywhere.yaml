openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: rolesanywhere
  x-aws-serviceName: rolesanywhere
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-05'
  version: '2018-05-10'
  title: IAM Roles Anywhere
  description: |-
    Identity and Access Management Roles Anywhere provides a secure way for your workloads such as servers, containers, and applications that run outside of Amazon Web Services to obtain temporary Amazon Web Services credentials. Your workloads can use the same IAM policies and roles you have for native Amazon Web Services applications to access Amazon Web Services resources. Using IAM Roles Anywhere eliminates the need to manage long-term credentials for workloads running outside of Amazon Web Services.

    To use IAM Roles Anywhere, your workloads must use X.509 certificates issued by their certificate authority (CA). You register the CA with IAM Roles Anywhere as a trust anchor to establish trust between your public key infrastructure (PKI) and IAM Roles Anywhere. If you don't manage your own PKI system, you can use Private Certificate Authority to create a CA and then use that to establish trust with IAM Roles Anywhere.

    This guide describes the IAM Roles Anywhere operations that you can call programmatically. For more information about IAM Roles Anywhere, see the [IAM Roles Anywhere User Guide](https://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html).
servers:
- description: The IAM Roles Anywhere regional endpoint
  url: https://rolesanywhere.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths: {}
components:
  schemas:
    AmazonResourceName:
      type: string
      minLength: 1
      maxLength: 1011
    AttributeMappings:
      type: array
      items:
        $ref: '#/components/schemas/AttributeMapping'
    CertificateField:
      type: string
      enum:
      - x509Subject
      - x509Issuer
      - x509SAN
    CredentialSummaries:
      type: array
      items:
        $ref: '#/components/schemas/CredentialSummary'
    CrlDetails:
      type: array
      items:
        $ref: '#/components/schemas/CrlDetail'
    InstanceProperties:
      type: array
      items:
        $ref: '#/components/schemas/InstanceProperty'
    InstancePropertyMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    ManagedPolicyList:
      type: array
      items:
        type: string
    MappingRules:
      type: array
      items:
        $ref: '#/components/schemas/MappingRule'
    NotificationChannel:
      type: string
      enum:
      - ALL
    NotificationEvent:
      type: string
      enum:
      - CA_CERTIFICATE_EXPIRY
      - END_ENTITY_CERTIFICATE_EXPIRY
    NotificationSettingDetails:
      type: array
      items:
        $ref: '#/components/schemas/NotificationSettingDetail'
    NotificationSettingKeys:
      type: array
      items:
        $ref: '#/components/schemas/NotificationSettingKey'
    NotificationSettings:
      type: array
      items:
        $ref: '#/components/schemas/NotificationSetting'
    ProfileArn:
      type: string
      pattern: ^arn:aws(-[^:]+)?:rolesanywhere(:.*){2}(:profile.*)$
      minLength: 1
      maxLength: 1011
    ProfileDetails:
      type: array
      items:
        $ref: '#/components/schemas/ProfileDetail'
    ResourceName:
      type: string
      pattern: ^[ a-zA-Z0-9-_]*$
      minLength: 1
      maxLength: 255
    RoleArn:
      type: string
      pattern: ^arn:aws(-[^:]+)?:iam(:.*){2}(:role.*)$
      minLength: 1
      maxLength: 1011
    RoleArnList:
      type: array
      items:
        $ref: '#/components/schemas/RoleArn'
    SourceData:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The PEM-encoded data for the certificate anchor. Included for trust anchors of type `CERTIFICATE_BUNDLE`.
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The root certificate of the Private Certificate Authority specified by this ARN is used in trust validation for temporary credential requests. Included for trust anchors of type `AWS_ACM_PCA`.
      description: |-
        The data field of the trust anchor depending on its type.
    SpecifierList:
      type: array
      items:
        type: string
    SubjectSummaries:
      type: array
      items:
        $ref: '#/components/schemas/SubjectSummary'
    TagKey:
      type: string
      pattern: ^[ a-zA-Z0-9_.:/=+@-]*$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    TagValue:
      type: string
      pattern: ^[ a-zA-Z0-9_.:/=+@-]*$
      minLength: 0
      maxLength: 256
    TrustAnchorArn:
      type: string
      pattern: ^arn:aws(-[^:]+)?:rolesanywhere(:.*){2}(:trust-anchor.*)$
      minLength: 1
      maxLength: 1011
    TrustAnchorDetails:
      type: array
      items:
        $ref: '#/components/schemas/TrustAnchorDetail'
    TrustAnchorType:
      type: string
      enum:
      - AWS_ACM_PCA
      - CERTIFICATE_BUNDLE
      - SELF_SIGNED_REPOSITORY
    Uuid:
      type: string
      pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
      minLength: 36
      maxLength: 36
