openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: dataexchange
  x-aws-serviceName: dataexchange
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2017-07-25'
  title: AWS Data Exchange
  description: |-
    AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.

    As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.

    As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the _AWS Data Exchange User Guide_.

    A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.
servers:
- description: The AWS Data Exchange regional endpoint
  url: https://dataexchange.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /v1/data-grants/{DataGrantArn}/accept:
    post:
      operationId: AcceptDataGrant
      description: |-
        This operation accepts a data grant.
      parameters:
      - name: DataGrantArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataGrantArn'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/jobs/{JobId}:
    delete:
      operationId: CancelJob
      description: |-
        This operation cancels a job. Jobs can be cancelled only when they are in the WAITING state.
      parameters:
      - name: JobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetJob
      description: |-
        This operation returns information about a job.
      parameters:
      - name: JobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: StartJob
      description: |-
        This operation starts a job.
      parameters:
      - name: JobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '202': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/data-grants:
    post:
      operationId: CreateDataGrant
      description: |-
        This operation creates a data grant.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/DataGrantName'
                GrantDistributionScope:
                  $ref: '#/components/schemas/GrantDistributionScope'
                ReceiverPrincipal:
                  $ref: '#/components/schemas/ReceiverPrincipal'
                SourceDataSetId:
                  $ref: '#/components/schemas/Id'
                EndsAt:
                  $ref: '#/components/schemas/Timestamp'
                Description:
                  $ref: '#/components/schemas/Description'
                Tags:
                  $ref: '#/components/schemas/MapOf__string'
      responses:
        '201': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the quotas imposed by the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLimitExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListDataGrants
      description: |-
        This operation returns information about all data grants.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/data-sets:
    post:
      operationId: CreateDataSet
      description: |-
        This operation creates a data set.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AssetType:
                  $ref: '#/components/schemas/AssetType'
                Description:
                  $ref: '#/components/schemas/Description'
                Name:
                  $ref: '#/components/schemas/Name'
                Tags:
                  $ref: '#/components/schemas/MapOf__string'
      responses:
        '201': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The request has exceeded the quotas imposed by the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLimitExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListDataSets
      description: |-
        This operation lists your data sets. When listing by origin OWNED, results are sorted by CreatedAt in descending order. When listing by origin ENTITLED, there is no order.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: origin
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/event-actions:
    post:
      operationId: CreateEventAction
      description: |-
        This operation creates an event action.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Action:
                  $ref: '#/components/schemas/Action'
                Event:
                  $ref: '#/components/schemas/Event'
      responses:
        '201': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The request has exceeded the quotas imposed by the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLimitExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListEventActions
      description: |-
        This operation lists your event actions.
      parameters:
      - name: eventSourceId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/jobs:
    post:
      operationId: CreateJob
      description: |-
        This operation creates a job.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Details:
                  $ref: '#/components/schemas/RequestDetails'
                Type:
                  $ref: '#/components/schemas/Type'
      responses:
        '201': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListJobs
      description: |-
        This operation lists your jobs sorted by CreatedAt in descending order.
      parameters:
      - name: dataSetId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: revisionId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/data-sets/{DataSetId}/revisions:
    post:
      operationId: CreateRevision
      description: |-
        This operation creates a revision for a data set.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Comment:
                  $ref: '#/components/schemas/__stringMin0Max16384'
                Tags:
                  $ref: '#/components/schemas/MapOf__string'
      responses:
        '201': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListDataSetRevisions
      description: |-
        This operation lists a data set's revisions sorted by CreatedAt in descending order.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}:
    delete:
      operationId: DeleteAsset
      description: |-
        This operation deletes an asset.
      parameters:
      - name: AssetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RevisionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAsset
      description: |-
        This operation returns information about an asset.
      parameters:
      - name: AssetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RevisionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateAsset
      description: |-
        This operation updates an asset.
      parameters:
      - name: AssetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RevisionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/AssetName'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/data-grants/{DataGrantId}:
    delete:
      operationId: DeleteDataGrant
      description: |-
        This operation deletes a data grant.
      parameters:
      - name: DataGrantId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataGrantId'
      responses:
        '204': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetDataGrant
      description: |-
        This operation returns information about a data grant.
      parameters:
      - name: DataGrantId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataGrantId'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/data-sets/{DataSetId}:
    delete:
      operationId: DeleteDataSet
      description: |-
        This operation deletes a data set.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetDataSet
      description: |-
        This operation returns information about a data set.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateDataSet
      description: |-
        This operation updates a data set.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/Description'
                Name:
                  $ref: '#/components/schemas/Name'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/event-actions/{EventActionId}:
    delete:
      operationId: DeleteEventAction
      description: |-
        This operation deletes the event action.
      parameters:
      - name: EventActionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetEventAction
      description: |-
        This operation retrieves information about an event action.
      parameters:
      - name: EventActionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateEventAction
      description: |-
        This operation updates the event action.
      parameters:
      - name: EventActionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Action:
                  $ref: '#/components/schemas/Action'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/data-sets/{DataSetId}/revisions/{RevisionId}:
    delete:
      operationId: DeleteRevision
      description: |-
        This operation deletes a revision.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RevisionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetRevision
      description: |-
        This operation returns information about a revision.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RevisionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateRevision
      description: |-
        This operation updates a revision.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RevisionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Comment:
                  $ref: '#/components/schemas/__stringMin0Max16384'
                Finalized:
                  $ref: '#/components/schemas/__boolean'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/received-data-grants/{DataGrantArn}:
    get:
      operationId: GetReceivedDataGrant
      description: |-
        This operation returns information about a received data grant.
      parameters:
      - name: DataGrantArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataGrantArn'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/received-data-grants:
    get:
      operationId: ListReceivedDataGrants
      description: |-
        This operation returns information about all received data grants.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: acceptanceState
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AcceptanceStateFilterValues'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets:
    get:
      operationId: ListRevisionAssets
      description: |-
        This operation lists a revision's assets sorted alphabetically in descending order.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: RevisionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{ResourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        This operation lists the tags on the resource.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
    post:
      operationId: TagResource
      description: |-
        This operation tags a resource.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Tags:
                  $ref: '#/components/schemas/MapOf__string'
      responses:
        '204': {}
    delete:
      operationId: UntagResource
      description: |-
        This operation removes one or more tags from a resource.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ListOf__string'
      responses:
        '204': {}
  /v1/data-sets/{DataSetId}/revisions/{RevisionId}/revoke:
    post:
      operationId: RevokeRevision
      description: |-
        This operation revokes subscribers' access to a revision.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RevisionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                RevocationComment:
                  $ref: '#/components/schemas/__stringMin10Max512'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1:
    post:
      operationId: SendApiAsset
      description: |-
        This operation invokes an API Gateway API asset. The request is proxied to the provider’s API Gateway API.
      parameters:
      - name: x-amzn-dataexchange-asset-id
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: x-amzn-dataexchange-data-set-id
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: x-amzn-dataexchange-http-method
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: x-amzn-dataexchange-path
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: x-amzn-dataexchange-revision-id
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Body:
                  $ref: '#/components/schemas/__string'
                QueryStringParameters:
                  $ref: '#/components/schemas/MapOf__string'
                RequestHeaders:
                  $ref: '#/components/schemas/MapOf__string'
      responses:
        '200': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/data-sets/{DataSetId}/notification:
    post:
      operationId: SendDataSetNotification
      description: |-
        The type of event associated with the data set.
      parameters:
      - name: DataSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Scope:
                  $ref: '#/components/schemas/ScopeDetails'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
                Comment:
                  $ref: '#/components/schemas/__stringMin0Max4096'
                Details:
                  $ref: '#/components/schemas/NotificationDetails'
                Type:
                  $ref: '#/components/schemas/NotificationType'
      responses:
        '202': {}
        '403':
          description: |-
            Access to the resource is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request couldn't be completed because it conflicted with the current state of the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An exception occurred with the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource couldn't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AcceptDataGrantRequest:
      type: object
      properties:
        DataGrantArn:
          allOf:
          - $ref: '#/components/schemas/DataGrantArn'
          description: The Amazon Resource Name (ARN) of the data grant to accept.
      required:
      - DataGrantArn
    AcceptDataGrantResponse:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DataGrantName'
          description: The name of the accepted data grant.
        SenderPrincipal:
          allOf:
          - $ref: '#/components/schemas/SenderPrincipal'
          description: The Amazon Web Services account ID of the data grant sender.
        ReceiverPrincipal:
          allOf:
          - $ref: '#/components/schemas/ReceiverPrincipal'
          description: The Amazon Web Services account ID of the data grant receiver.
        Description:
          allOf:
          - $ref: '#/components/schemas/DataGrantDescription'
          description: The description of the accepted data grant.
        AcceptanceState:
          allOf:
          - $ref: '#/components/schemas/DataGrantAcceptanceState'
          description: The acceptance state of the data grant.
        AcceptedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was accepted.
        EndsAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when access to the associated data set ends.
        GrantDistributionScope:
          allOf:
          - $ref: '#/components/schemas/GrantDistributionScope'
          description: The distribution scope for the data grant.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data set associated to the data grant.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data grant.
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the accepted data grant.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was created.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was last updated.
      required:
      - Name
      - ReceiverPrincipal
      - AcceptanceState
      - GrantDistributionScope
      - DataSetId
      - Id
      - Arn
      - CreatedAt
      - UpdatedAt
    AcceptanceStateFilterValue:
      type: string
      enum:
      - PENDING_RECEIVER_ACCEPTANCE
      - ACCEPTED
    AcceptanceStateFilterValues:
      type: array
      items:
        $ref: '#/components/schemas/AcceptanceStateFilterValue'
    AccessDeniedException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Access to the resource is denied.
      required:
      - Message
      description: Access to the resource is denied.
    Action:
      type: object
      properties:
        ExportRevisionToS3:
          allOf:
          - $ref: '#/components/schemas/AutoExportRevisionToS3RequestDetails'
          description: Details for the export revision to Amazon S3 action.
      description: What occurs after a certain event.
    ApiDescription:
      type: string
    ApiGatewayApiAsset:
      type: object
      properties:
        ApiDescription:
          allOf:
          - $ref: '#/components/schemas/ApiDescription'
          description: The API description of the API asset.
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API endpoint of the API asset.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier of the API asset.
        ApiKey:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API key of the API asset.
        ApiName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API name of the API asset.
        ApiSpecificationDownloadUrl:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The download URL of the API specification of the API asset.
        ApiSpecificationDownloadUrlExpiresAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the upload URL expires, in ISO 8601
            format.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The protocol type of the API asset.
        Stage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The stage of the API asset.
      description: The API Gateway API that is the asset.
    Arn:
      type: string
    AssetDestinationEntry:
      type: object
      properties:
        AssetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the asset.
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon S3 bucket that is the destination for the asset.
        Key:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the object in Amazon S3 for the asset.
      required:
      - AssetId
      - Bucket
      description: The destination for the asset.
    AssetDetails:
      type: object
      properties:
        S3SnapshotAsset:
          allOf:
          - $ref: '#/components/schemas/S3SnapshotAsset'
          description: The Amazon S3 object that is the asset.
        RedshiftDataShareAsset:
          allOf:
          - $ref: '#/components/schemas/RedshiftDataShareAsset'
          description: The Amazon Redshift datashare that is the asset.
        ApiGatewayApiAsset:
          allOf:
          - $ref: '#/components/schemas/ApiGatewayApiAsset'
          description: Information about the API Gateway API asset.
        S3DataAccessAsset:
          allOf:
          - $ref: '#/components/schemas/S3DataAccessAsset'
          description: The Amazon S3 data access that is the asset.
        LakeFormationDataPermissionAsset:
          allOf:
          - $ref: '#/components/schemas/LakeFormationDataPermissionAsset'
          description: The AWS Lake Formation data permission that is the asset.
      description: Details about the asset.
    AssetEntry:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the asset.
        AssetDetails:
          allOf:
          - $ref: '#/components/schemas/AssetDetails'
          description: Details about the asset.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the asset was created, in ISO 8601 format.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            asset.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the asset.
        Name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the asset. When importing from Amazon S3, the Amazon
            S3 object key is used as the asset name. When exporting to Amazon S3,
            the asset name is used as default target Amazon S3 object key. When importing
            from Amazon API Gateway API, the API name is used as the asset name. When
            importing from Amazon Redshift, the datashare name is used as the asset
            name. When importing from AWS Lake Formation, the static values of "Database(s)
            included in LF-tag policy" or "Table(s) included in LF-tag policy" are
            used as the asset name.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            asset.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The asset ID of the owned asset corresponding to the entitled
            asset being viewed. This parameter is returned when an asset owner is
            viewing the entitled copy of its owned asset.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the asset was last updated, in ISO 8601
            format.
      required:
      - Arn
      - AssetDetails
      - AssetType
      - CreatedAt
      - DataSetId
      - Id
      - Name
      - RevisionId
      - UpdatedAt
      description: An asset in AWS Data Exchange is a piece of data (Amazon S3 object)
        or a means of fulfilling data (Amazon Redshift datashare or Amazon API Gateway
        API, AWS Lake Formation data permission, or Amazon S3 data access). The asset
        can be a structured data file, an image file, or some other data file that
        can be stored as an Amazon S3 object, an Amazon API Gateway API, or an Amazon
        Redshift datashare, an AWS Lake Formation data permission, or an Amazon S3
        data access. When you create an import job for your files, API Gateway APIs,
        Amazon Redshift datashares, AWS Lake Formation data permission, or Amazon
        S3 data access, you create an asset in AWS Data Exchange.
    AssetName:
      type: string
    AssetSourceEntry:
      type: object
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon S3 bucket that's part of the source of the asset.
        Key:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the object in Amazon S3 for the asset.
      required:
      - Bucket
      - Key
      description: The source of the assets.
    AssetType:
      type: string
      enum:
      - S3_SNAPSHOT
      - REDSHIFT_DATA_SHARE
      - API_GATEWAY_API
      - S3_DATA_ACCESS
      - LAKE_FORMATION_DATA_PERMISSION
    AutoExportRevisionDestinationEntry:
      type: object
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon S3 bucket that is the destination for the event
            action.
        KeyPattern:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A string representing the pattern for generated names of the
            individual assets in the revision. For more information about key patterns,
            see [Key patterns when exporting revisions](https://docs.aws.amazon.com/data-exchange/latest/userguide/jobs.html#revision-export-keypatterns).
      required:
      - Bucket
      description: A revision destination is the Amazon S3 bucket folder destination
        to where the export will be sent.
    AutoExportRevisionToS3RequestDetails:
      type: object
      properties:
        Encryption:
          allOf:
          - $ref: '#/components/schemas/ExportServerSideEncryption'
          description: Encryption configuration for the auto export job.
        RevisionDestination:
          allOf:
          - $ref: '#/components/schemas/AutoExportRevisionDestinationEntry'
          description: A revision destination is the Amazon S3 bucket folder destination
            to where the export will be sent.
      required:
      - RevisionDestination
      description: Details of the operation to be performed by the job.
    AwsAccountId:
      type: string
      pattern: /^[\d]{12}$/
      minLength: 12
      maxLength: 12
    CancelJobRequest:
      type: object
      properties:
        JobId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a job.
      required:
      - JobId
    ClientToken:
      type: string
      pattern: ^[\x21-\x7E]{1,64}$
      minLength: 1
      maxLength: 64
    Code:
      type: string
      enum:
      - ACCESS_DENIED_EXCEPTION
      - INTERNAL_SERVER_EXCEPTION
      - MALWARE_DETECTED
      - RESOURCE_NOT_FOUND_EXCEPTION
      - SERVICE_QUOTA_EXCEEDED_EXCEPTION
      - VALIDATION_EXCEPTION
      - MALWARE_SCAN_ENCRYPTED_FILE
    ConflictException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The request couldn't be completed because it conflicted with
            the current state of the resource.
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for the resource with the conflict.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of the resource with the conflict.
      required:
      - Message
      description: The request couldn't be completed because it conflicted with the
        current state of the resource.
    CreateDataGrantRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DataGrantName'
          description: The name of the data grant.
        GrantDistributionScope:
          allOf:
          - $ref: '#/components/schemas/GrantDistributionScope'
          description: The distribution scope of the data grant.
        ReceiverPrincipal:
          allOf:
          - $ref: '#/components/schemas/ReceiverPrincipal'
          description: The Amazon Web Services account ID of the data grant receiver.
        SourceDataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data set used to create the data grant.
        EndsAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when access to the associated data set ends.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the data grant.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: The tags to add to the data grant. A tag is a key-value pair.
      required:
      - Name
      - GrantDistributionScope
      - ReceiverPrincipal
      - SourceDataSetId
    CreateDataGrantResponse:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DataGrantName'
          description: The name of the data grant.
        SenderPrincipal:
          allOf:
          - $ref: '#/components/schemas/SenderPrincipal'
          description: The Amazon Web Services account ID of the data grant sender.
        ReceiverPrincipal:
          allOf:
          - $ref: '#/components/schemas/ReceiverPrincipal'
          description: The Amazon Web Services account ID of the data grant receiver.
        Description:
          allOf:
          - $ref: '#/components/schemas/DataGrantDescription'
          description: The description of the data grant.
        AcceptanceState:
          allOf:
          - $ref: '#/components/schemas/DataGrantAcceptanceState'
          description: The acceptance state of the data grant.
        AcceptedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was accepted.
        EndsAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when access to the associated data set ends.
        GrantDistributionScope:
          allOf:
          - $ref: '#/components/schemas/GrantDistributionScope'
          description: The distribution scope for the data grant.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data set associated to the data grant.
        SourceDataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data set used to create the data grant.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data grant.
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the data grant.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was created.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was last updated.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: The tags associated to the data grant. A tag is a key-value
            pair.
      required:
      - Name
      - SenderPrincipal
      - ReceiverPrincipal
      - AcceptanceState
      - GrantDistributionScope
      - DataSetId
      - SourceDataSetId
      - Id
      - Arn
      - CreatedAt
      - UpdatedAt
    CreateDataSetRequest:
      type: object
      properties:
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          description: The type of asset that is added to a data set.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the data set. This value can be up to 16,348
            characters long.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data set.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: A data set tag is an optional label that you can assign to
            a data set when you create it. Each tag consists of a key and an optional
            value, both of which you define. When you use tagging, you can also use
            tag-based access control in IAM policies to control access to these data
            sets and revisions.
      required:
      - AssetType
      - Description
      - Name
    CreateDataSetResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the data set.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the data set was created, in ISO 8601
            format.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description for the data set.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data set.
        Origin:
          allOf:
          - $ref: '#/components/schemas/Origin'
          description: A property that defines the data set as OWNED by the account
            (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          allOf:
          - $ref: '#/components/schemas/OriginDetails'
          description: If the origin of this data set is ENTITLED, includes the details
            for the product on AWS Marketplace.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The data set ID of the owned data set corresponding to the
            entitled data set being viewed. This parameter is returned when a data
            set owner is viewing the entitled copy of its owned data set.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: The tags for the data set.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the data set was last updated, in ISO
            8601 format.
    CreateEventActionRequest:
      type: object
      properties:
        Action:
          allOf:
          - $ref: '#/components/schemas/Action'
          description: What occurs after a certain event.
        Event:
          allOf:
          - $ref: '#/components/schemas/Event'
          description: What occurs to start an action.
      required:
      - Action
      - Event
    CreateEventActionResponse:
      type: object
      properties:
        Action:
          allOf:
          - $ref: '#/components/schemas/Action'
          description: What occurs after a certain event.
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the event action.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event action was created, in ISO
            8601 format.
        Event:
          allOf:
          - $ref: '#/components/schemas/Event'
          description: What occurs to start an action.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event action was last updated, in
            ISO 8601 format.
    CreateJobRequest:
      type: object
      properties:
        Details:
          allOf:
          - $ref: '#/components/schemas/RequestDetails'
          description: The details for the CreateJob request.
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The type of job to be created.
      required:
      - Details
      - Type
    CreateJobResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the job.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the job was created, in ISO 8601 format.
        Details:
          allOf:
          - $ref: '#/components/schemas/ResponseDetails'
          description: Details about the job.
        Errors:
          allOf:
          - $ref: '#/components/schemas/ListOfJobError'
          description: The errors associated with jobs.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the job.
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The state of the job.
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The job type.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the job was last updated, in ISO 8601
            format.
    CreateRevisionRequest:
      type: object
      properties:
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          description: An optional comment about the revision.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: A revision tag is an optional label that you can assign to
            a revision when you create it. Each tag consists of a key and an optional
            value, both of which you define. When you use tagging, you can also use
            tag-based access control in IAM policies to control access to these data
            sets and revisions.
      required:
      - DataSetId
    CreateRevisionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the revision.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          description: An optional comment about the revision.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was created, in ISO 8601
            format.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with the
            data set revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: To publish a revision to a data set in a product, the revision
            must first be finalized. Finalizing a revision tells AWS Data Exchange
            that your changes to the assets in the revision are complete. After it's
            in this read-only state, you can publish the revision to your products.
            Finalized revisions can be published through the AWS Data Exchange console
            or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace
            Catalog API action. When using the API, revisions are uniquely identified
            by their ARN.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The revision ID of the owned revision corresponding to the
            entitled revision being viewed. This parameter is returned when a revision
            owner is viewing the entitled copy of its owned revision.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: The tags for the revision.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was last updated, in ISO
            8601 format.
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          description: A required comment to inform subscribers of the reason their
            access to the revision was revoked.
        Revoked:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: A status indicating that subscribers' access to the revision
            was revoked.
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was revoked, in ISO 8601
            format.
    CreateS3DataAccessFromS3BucketRequestDetails:
      type: object
      properties:
        AssetSource:
          allOf:
          - $ref: '#/components/schemas/S3DataAccessAssetSourceEntry'
          description: Details about the S3 data access source asset.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with the
            creation of this Amazon S3 data access.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for a revision.
      required:
      - AssetSource
      - DataSetId
      - RevisionId
      description: Details of the operation to create an Amazon S3 data access from
        an S3 bucket.
    CreateS3DataAccessFromS3BucketResponseDetails:
      type: object
      properties:
        AssetSource:
          allOf:
          - $ref: '#/components/schemas/S3DataAccessAssetSourceEntry'
          description: Details about the asset source from an Amazon S3 bucket.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for this data set.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision.
      required:
      - AssetSource
      - DataSetId
      - RevisionId
      description: Details about the response of the operation to create an S3 data
        access from an S3 bucket.
    DataGrantAcceptanceState:
      type: string
      enum:
      - PENDING_RECEIVER_ACCEPTANCE
      - ACCEPTED
    DataGrantArn:
      type: string
      pattern: ^arn:aws:dataexchange:[\-a-z0-9]*:(\d{12}):data-grants\/[a-zA-Z0-9]{30,40}$
    DataGrantDescription:
      type: string
      minLength: 1
      maxLength: 16384
    DataGrantId:
      type: string
      pattern: ^[a-zA-Z0-9]{30,40}$|^arn:aws:dataexchange:[\-a-z0-9]*:(\d{12}):data-grants\/[a-zA-Z0-9]{30,40}$
    DataGrantName:
      type: string
      minLength: 1
      maxLength: 256
    DataGrantSummaryEntry:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DataGrantName'
          description: The name of the data grant.
        SenderPrincipal:
          allOf:
          - $ref: '#/components/schemas/SenderPrincipal'
          description: The Amazon Web Services account ID of the data grant sender.
        ReceiverPrincipal:
          allOf:
          - $ref: '#/components/schemas/ReceiverPrincipal'
          description: The Amazon Web Services account ID of the data grant receiver.
        AcceptanceState:
          allOf:
          - $ref: '#/components/schemas/DataGrantAcceptanceState'
          description: The acceptance state of the data grant.
        AcceptedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was accepted.
        EndsAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when access to the associated data set ends.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data set associated to the data grant.
        SourceDataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data set used to create the data grant.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data grant.
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the data grant.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was created.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was last updated.
      required:
      - Name
      - SenderPrincipal
      - ReceiverPrincipal
      - AcceptanceState
      - DataSetId
      - SourceDataSetId
      - Id
      - Arn
      - CreatedAt
      - UpdatedAt
      description: Information about a data grant.
    DataSetEntry:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the data set.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the data set was created, in ISO 8601
            format.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description for the data set.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data set.
        Origin:
          allOf:
          - $ref: '#/components/schemas/Origin'
          description: A property that defines the data set as OWNED by the account
            (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          allOf:
          - $ref: '#/components/schemas/OriginDetails'
          description: If the origin of this data set is ENTITLED, includes the details
            for the product on AWS Marketplace.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The data set ID of the owned data set corresponding to the
            entitled data set being viewed. This parameter is returned when a data
            set owner is viewing the entitled copy of its owned data set.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the data set was last updated, in ISO
            8601 format.
      required:
      - Arn
      - AssetType
      - CreatedAt
      - Description
      - Id
      - Name
      - Origin
      - UpdatedAt
      description: A data set is an AWS resource with one or more revisions.
    DataUpdateRequestDetails:
      type: object
      properties:
        DataUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A datetime in the past when the data was updated. This typically
            means that the underlying resource supporting the data set was updated.
      description: Extra details specific to a data update type notification.
    DatabaseLFTagPolicy:
      type: object
      properties:
        Expression:
          allOf:
          - $ref: '#/components/schemas/ListOfLFTags'
          description: A list of LF-tag conditions that apply to database resources.
      required:
      - Expression
      description: The LF-tag policy for database resources.
    DatabaseLFTagPolicyAndPermissions:
      type: object
      properties:
        Expression:
          allOf:
          - $ref: '#/components/schemas/ListOfLFTags'
          description: A list of LF-tag conditions that apply to database resources.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/ListOfDatabaseLFTagPolicyPermissions'
          description: The permissions granted to subscribers on database resources.
      required:
      - Expression
      - Permissions
      description: The LF-tag policy and permissions for database resources.
    DatabaseLFTagPolicyPermission:
      type: string
      enum:
      - DESCRIBE
    DeleteAssetRequest:
      type: object
      properties:
        AssetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for an asset.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a revision.
      required:
      - AssetId
      - DataSetId
      - RevisionId
    DeleteDataGrantRequest:
      type: object
      properties:
        DataGrantId:
          allOf:
          - $ref: '#/components/schemas/DataGrantId'
          description: The ID of the data grant to delete.
      required:
      - DataGrantId
    DeleteDataSetRequest:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
      required:
      - DataSetId
    DeleteEventActionRequest:
      type: object
      properties:
        EventActionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for the event action.
      required:
      - EventActionId
    DeleteRevisionRequest:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a revision.
      required:
      - DataSetId
      - RevisionId
    DeprecationRequestDetails:
      type: object
      properties:
        DeprecationAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A datetime in the future when the data set will be deprecated.
      required:
      - DeprecationAt
      description: Extra details specific to a deprecation type notification.
    Description:
      type: string
    Details:
      type: object
      properties:
        ImportAssetFromSignedUrlJobErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ImportAssetFromSignedUrlJobErrorDetails'
          description: Information about the job error.
        ImportAssetsFromS3JobErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetSourceEntry'
          description: Details about the job error.
      description: Information about the job error.
    Event:
      type: object
      properties:
        RevisionPublished:
          allOf:
          - $ref: '#/components/schemas/RevisionPublished'
          description: What occurs to start the revision publish action.
      description: What occurs to start an action.
    EventActionEntry:
      type: object
      properties:
        Action:
          allOf:
          - $ref: '#/components/schemas/Action'
          description: What occurs after a certain event.
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) for the event action.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event action was created, in ISO
            8601 format.
        Event:
          allOf:
          - $ref: '#/components/schemas/Event'
          description: What occurs to start an action.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event action was last updated, in
            ISO 8601 format.
      required:
      - Action
      - Arn
      - CreatedAt
      - Event
      - Id
      - UpdatedAt
      description: An event action is an object that defines the relationship between
        a specific event and an automated action that will be taken on behalf of the
        customer.
    ExceptionCause:
      type: string
      enum:
      - InsufficientS3BucketPolicy
      - S3AccessDenied
    ExportAssetToSignedUrlRequestDetails:
      type: object
      properties:
        AssetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the asset that is exported to a signed
            URL.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            export job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            export request.
      required:
      - AssetId
      - DataSetId
      - RevisionId
      description: Details of the operation to be performed by the job.
    ExportAssetToSignedUrlResponseDetails:
      type: object
      properties:
        AssetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the asset associated with this export
            job.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            export job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            export response.
        SignedUrl:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The signed URL for the export request.
        SignedUrlExpiresAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the signed URL expires, in ISO 8601
            format.
      required:
      - AssetId
      - DataSetId
      - RevisionId
      description: The details of the export to signed URL response.
    ExportAssetsToS3RequestDetails:
      type: object
      properties:
        AssetDestinations:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetDestinationEntry'
          description: The destination for the asset.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            export job.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/ExportServerSideEncryption'
          description: Encryption configuration for the export job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            export request.
      required:
      - AssetDestinations
      - DataSetId
      - RevisionId
      description: Details of the operation to be performed by the job.
    ExportAssetsToS3ResponseDetails:
      type: object
      properties:
        AssetDestinations:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetDestinationEntry'
          description: The destination in Amazon S3 where the asset is exported.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            export job.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/ExportServerSideEncryption'
          description: Encryption configuration of the export job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            export response.
      required:
      - AssetDestinations
      - DataSetId
      - RevisionId
      description: Details about the export to Amazon S3 response.
    ExportRevisionsToS3RequestDetails:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            export job.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/ExportServerSideEncryption'
          description: Encryption configuration for the export job.
        RevisionDestinations:
          allOf:
          - $ref: '#/components/schemas/ListOfRevisionDestinationEntry'
          description: The destination for the revision.
      required:
      - DataSetId
      - RevisionDestinations
      description: Details of the operation to be performed by the job.
    ExportRevisionsToS3ResponseDetails:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            export job.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/ExportServerSideEncryption'
          description: Encryption configuration of the export job.
        RevisionDestinations:
          allOf:
          - $ref: '#/components/schemas/ListOfRevisionDestinationEntry'
          description: The destination in Amazon S3 where the revision is exported.
        EventActionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon Resource Name (ARN) of the event action.
      required:
      - DataSetId
      - RevisionDestinations
      description: Details about the export revisions to Amazon S3 response.
    ExportServerSideEncryption:
      type: object
      properties:
        KmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon Resource Name (ARN) of the AWS KMS key you want
            to use to encrypt the Amazon S3 objects. This parameter is required if
            you choose aws:kms as an encryption type.
        Type:
          allOf:
          - $ref: '#/components/schemas/ServerSideEncryptionTypes'
          description: The type of server side encryption used for encrypting the
            objects in Amazon S3.
      required:
      - Type
      description: Encryption configuration of the export job. Includes the encryption
        type in addition to the AWS KMS key. The KMS key is only necessary if you
        chose the KMS encryption type.
    GetAssetRequest:
      type: object
      properties:
        AssetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for an asset.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a revision.
      required:
      - AssetId
      - DataSetId
      - RevisionId
    GetAssetResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the asset.
        AssetDetails:
          allOf:
          - $ref: '#/components/schemas/AssetDetails'
          description: Details about the asset.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the asset was created, in ISO 8601 format.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            asset.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the asset.
        Name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the asset. When importing from Amazon S3, the Amazon
            S3 object key is used as the asset name. When exporting to Amazon S3,
            the asset name is used as default target Amazon S3 object key. When importing
            from Amazon API Gateway API, the API name is used as the asset name. When
            importing from Amazon Redshift, the datashare name is used as the asset
            name. When importing from AWS Lake Formation, the static values of "Database(s)
            included in the LF-tag policy" or "Table(s) included in the LF-tag policy"
            are used as the asset name.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            asset.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The asset ID of the owned asset corresponding to the entitled
            asset being viewed. This parameter is returned when an asset owner is
            viewing the entitled copy of its owned asset.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the asset was last updated, in ISO 8601
            format.
    GetDataGrantRequest:
      type: object
      properties:
        DataGrantId:
          allOf:
          - $ref: '#/components/schemas/DataGrantId'
          description: The ID of the data grant.
      required:
      - DataGrantId
    GetDataGrantResponse:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DataGrantName'
          description: The name of the data grant.
        SenderPrincipal:
          allOf:
          - $ref: '#/components/schemas/SenderPrincipal'
          description: The Amazon Web Services account ID of the data grant sender.
        ReceiverPrincipal:
          allOf:
          - $ref: '#/components/schemas/ReceiverPrincipal'
          description: The Amazon Web Services account ID of the data grant receiver.
        Description:
          allOf:
          - $ref: '#/components/schemas/DataGrantDescription'
          description: The description of the data grant.
        AcceptanceState:
          allOf:
          - $ref: '#/components/schemas/DataGrantAcceptanceState'
          description: The acceptance state of the data grant.
        AcceptedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was accepted.
        EndsAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when access to the associated data set ends.
        GrantDistributionScope:
          allOf:
          - $ref: '#/components/schemas/GrantDistributionScope'
          description: The distribution scope for the data grant.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data set associated to the data grant.
        SourceDataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data set used to create the data grant.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data grant.
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the data grant.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was created.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was last updated.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: The tags associated to the data grant. A tag is a key-value
            pair.
      required:
      - Name
      - SenderPrincipal
      - ReceiverPrincipal
      - AcceptanceState
      - GrantDistributionScope
      - DataSetId
      - SourceDataSetId
      - Id
      - Arn
      - CreatedAt
      - UpdatedAt
    GetDataSetRequest:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
      required:
      - DataSetId
    GetDataSetResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the data set.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the data set was created, in ISO 8601
            format.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description for the data set.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data set.
        Origin:
          allOf:
          - $ref: '#/components/schemas/Origin'
          description: A property that defines the data set as OWNED by the account
            (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          allOf:
          - $ref: '#/components/schemas/OriginDetails'
          description: If the origin of this data set is ENTITLED, includes the details
            for the product on AWS Marketplace.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The data set ID of the owned data set corresponding to the
            entitled data set being viewed. This parameter is returned when a data
            set owner is viewing the entitled copy of its owned data set.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: The tags for the data set.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the data set was last updated, in ISO
            8601 format.
    GetEventActionRequest:
      type: object
      properties:
        EventActionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for the event action.
      required:
      - EventActionId
    GetEventActionResponse:
      type: object
      properties:
        Action:
          allOf:
          - $ref: '#/components/schemas/Action'
          description: What occurs after a certain event.
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the event action.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event action was created, in ISO
            8601 format.
        Event:
          allOf:
          - $ref: '#/components/schemas/Event'
          description: What occurs to start an action.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event action was last updated, in
            ISO 8601 format.
    GetJobRequest:
      type: object
      properties:
        JobId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a job.
      required:
      - JobId
    GetJobResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the job.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the job was created, in ISO 8601 format.
        Details:
          allOf:
          - $ref: '#/components/schemas/ResponseDetails'
          description: Details about the job.
        Errors:
          allOf:
          - $ref: '#/components/schemas/ListOfJobError'
          description: The errors associated with jobs.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the job.
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The state of the job.
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The job type.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the job was last updated, in ISO 8601
            format.
    GetReceivedDataGrantRequest:
      type: object
      properties:
        DataGrantArn:
          allOf:
          - $ref: '#/components/schemas/DataGrantArn'
          description: The Amazon Resource Name (ARN) of the data grant.
      required:
      - DataGrantArn
    GetReceivedDataGrantResponse:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DataGrantName'
          description: The name of the data grant.
        SenderPrincipal:
          allOf:
          - $ref: '#/components/schemas/SenderPrincipal'
          description: The Amazon Web Services account ID of the data grant sender.
        ReceiverPrincipal:
          allOf:
          - $ref: '#/components/schemas/ReceiverPrincipal'
          description: The Amazon Web Services account ID of the data grant receiver.
        Description:
          allOf:
          - $ref: '#/components/schemas/DataGrantDescription'
          description: The description of the data grant.
        AcceptanceState:
          allOf:
          - $ref: '#/components/schemas/DataGrantAcceptanceState'
          description: The acceptance state of the data grant.
        AcceptedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was accepted.
        EndsAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when access to the associated data set ends.
        GrantDistributionScope:
          allOf:
          - $ref: '#/components/schemas/GrantDistributionScope'
          description: The distribution scope for the data grant.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data set associated to the data grant.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data grant.
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the data grant.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was created.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was last updated.
      required:
      - Name
      - ReceiverPrincipal
      - AcceptanceState
      - GrantDistributionScope
      - DataSetId
      - Id
      - Arn
      - CreatedAt
      - UpdatedAt
    GetRevisionRequest:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a revision.
      required:
      - DataSetId
      - RevisionId
    GetRevisionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the revision.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          description: An optional comment about the revision.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was created, in ISO 8601
            format.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with the
            data set revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: To publish a revision to a data set in a product, the revision
            must first be finalized. Finalizing a revision tells AWS Data Exchange
            that your changes to the assets in the revision are complete. After it's
            in this read-only state, you can publish the revision to your products.
            Finalized revisions can be published through the AWS Data Exchange console
            or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace
            Catalog API action. When using the API, revisions are uniquely identified
            by their ARN.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The revision ID of the owned revision corresponding to the
            entitled revision being viewed. This parameter is returned when a revision
            owner is viewing the entitled copy of its owned revision.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: The tags for the revision.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was last updated, in ISO
            8601 format.
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          description: A required comment to inform subscribers of the reason their
            access to the revision was revoked.
        Revoked:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: A status indicating that subscribers' access to the revision
            was revoked.
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was revoked, in ISO 8601
            format.
    GrantDistributionScope:
      type: string
      enum:
      - AWS_ORGANIZATION
      - NONE
    Id:
      type: string
    ImportAssetFromApiGatewayApiRequestDetails:
      type: object
      properties:
        ApiDescription:
          allOf:
          - $ref: '#/components/schemas/ApiDescription'
          description: The API description. Markdown supported.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API Gateway API ID.
        ApiKey:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API Gateway API key.
        ApiName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API name.
        ApiSpecificationMd5Hash:
          allOf:
          - $ref: '#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093'
          description: The Base64-encoded MD5 hash of the OpenAPI 3.0 JSON API specification
            file. It is used to ensure the integrity of the file.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The data set ID.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The protocol type.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The revision ID.
        Stage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API stage.
      required:
      - ApiId
      - ApiName
      - ApiSpecificationMd5Hash
      - DataSetId
      - ProtocolType
      - RevisionId
      - Stage
      description: The request details.
    ImportAssetFromApiGatewayApiResponseDetails:
      type: object
      properties:
        ApiDescription:
          allOf:
          - $ref: '#/components/schemas/ApiDescription'
          description: The API description.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API ID.
        ApiKey:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API key.
        ApiName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API name.
        ApiSpecificationMd5Hash:
          allOf:
          - $ref: '#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093'
          description: The Base64-encoded Md5 hash for the API asset, used to ensure
            the integrity of the API at that location.
        ApiSpecificationUploadUrl:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The upload URL of the API specification.
        ApiSpecificationUploadUrlExpiresAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the upload URL expires, in ISO 8601
            format.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The data set ID.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The protocol type.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The revision ID.
        Stage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API stage.
      required:
      - ApiId
      - ApiName
      - ApiSpecificationMd5Hash
      - ApiSpecificationUploadUrl
      - ApiSpecificationUploadUrlExpiresAt
      - DataSetId
      - ProtocolType
      - RevisionId
      - Stage
      description: The response details.
    ImportAssetFromSignedUrlJobErrorDetails:
      type: object
      properties:
        AssetName:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: Details about the job error.
      required:
      - AssetName
      description: Details about the job error.
    ImportAssetFromSignedUrlRequestDetails:
      type: object
      properties:
        AssetName:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the asset. When importing from Amazon S3, the Amazon
            S3 object key is used as the asset name.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            import job.
        Md5Hash:
          allOf:
          - $ref: '#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093'
          description: The Base64-encoded Md5 hash for the asset, used to ensure the
            integrity of the file at that location.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            import request.
      required:
      - AssetName
      - DataSetId
      - Md5Hash
      - RevisionId
      description: Details of the operation to be performed by the job.
    ImportAssetFromSignedUrlResponseDetails:
      type: object
      properties:
        AssetName:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name for the asset associated with this import job.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            import job.
        Md5Hash:
          allOf:
          - $ref: '#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093'
          description: The Base64-encoded Md5 hash for the asset, used to ensure the
            integrity of the file at that location.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            import response.
        SignedUrl:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The signed URL.
        SignedUrlExpiresAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time and date at which the signed URL expires, in ISO 8601
            format.
      required:
      - AssetName
      - DataSetId
      - RevisionId
      description: The details in the response for an import request, including the
        signed URL and other information.
    ImportAssetsFromLakeFormationTagPolicyRequestDetails:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The identifier for the AWS Glue Data Catalog.
        Database:
          allOf:
          - $ref: '#/components/schemas/DatabaseLFTagPolicyAndPermissions'
          description: A structure for the database object.
        Table:
          allOf:
          - $ref: '#/components/schemas/TableLFTagPolicyAndPermissions'
          description: A structure for the table object.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM role's ARN that allows AWS Data Exchange to assume
            the role and grant and revoke permissions of subscribers to AWS Lake Formation
            data permissions.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            import job.
      required:
      - CatalogId
      - RoleArn
      - DataSetId
      - RevisionId
      description: Details about the assets imported from an AWS Lake Formation tag
        policy request.
    ImportAssetsFromLakeFormationTagPolicyResponseDetails:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The identifier for the AWS Glue Data Catalog.
        Database:
          allOf:
          - $ref: '#/components/schemas/DatabaseLFTagPolicyAndPermissions'
          description: A structure for the database object.
        Table:
          allOf:
          - $ref: '#/components/schemas/TableLFTagPolicyAndPermissions'
          description: A structure for the table object.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM role's ARN that allows AWS Data Exchange to assume
            the role and grant and revoke permissions to AWS Lake Formation data permissions.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            import job.
      required:
      - CatalogId
      - RoleArn
      - DataSetId
      - RevisionId
      description: Details from an import AWS Lake Formation tag policy job response.
    ImportAssetsFromRedshiftDataSharesRequestDetails:
      type: object
      properties:
        AssetSources:
          allOf:
          - $ref: '#/components/schemas/ListOfRedshiftDataShareAssetSourceEntry'
          description: A list of Amazon Redshift datashare assets.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            import job.
      required:
      - AssetSources
      - DataSetId
      - RevisionId
      description: Details from an import from Amazon Redshift datashare request.
    ImportAssetsFromRedshiftDataSharesResponseDetails:
      type: object
      properties:
        AssetSources:
          allOf:
          - $ref: '#/components/schemas/ListOfRedshiftDataShareAssetSourceEntry'
          description: A list of Amazon Redshift datashare asset sources.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            import job.
      required:
      - AssetSources
      - DataSetId
      - RevisionId
      description: Details from an import from Amazon Redshift datashare response.
    ImportAssetsFromS3RequestDetails:
      type: object
      properties:
        AssetSources:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetSourceEntry'
          description: Is a list of Amazon S3 bucket and object key pairs.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            import request.
      required:
      - AssetSources
      - DataSetId
      - RevisionId
      description: Details of the operation to be performed by the job.
    ImportAssetsFromS3ResponseDetails:
      type: object
      properties:
        AssetSources:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetSourceEntry'
          description: Is a list of Amazon S3 bucket and object key pairs.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            import response.
      required:
      - AssetSources
      - DataSetId
      - RevisionId
      description: Details from an import from Amazon S3 response.
    InternalServerException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The message identifying the service exception that occurred.
      required:
      - Message
      description: An exception occurred with the service.
    JobEntry:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the job.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the job was created, in ISO 8601 format.
        Details:
          allOf:
          - $ref: '#/components/schemas/ResponseDetails'
          description: Details of the operation to be performed by the job, such as
            export destination details or import source details.
        Errors:
          allOf:
          - $ref: '#/components/schemas/ListOfJobError'
          description: Errors for jobs.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the job.
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The state of the job.
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The job type.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the job was last updated, in ISO 8601
            format.
      required:
      - Arn
      - CreatedAt
      - Details
      - Id
      - State
      - Type
      - UpdatedAt
      description: AWS Data Exchange Jobs are asynchronous import or export operations
        used to create or copy assets. A data set owner can both import and export
        as they see fit. Someone with an entitlement to a data set can only export.
        Jobs are deleted 90 days after they are created.
    JobError:
      type: object
      properties:
        Code:
          allOf:
          - $ref: '#/components/schemas/Code'
          description: The code for the job error.
        Details:
          allOf:
          - $ref: '#/components/schemas/Details'
          description: The details about the job error.
        LimitName:
          allOf:
          - $ref: '#/components/schemas/JobErrorLimitName'
          description: The name of the limit that was reached.
        LimitValue:
          allOf:
          - $ref: '#/components/schemas/__double'
          description: The value of the exceeded limit.
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The message related to the job error.
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for the resource related to the error.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/JobErrorResourceTypes'
          description: The type of resource related to the error.
      required:
      - Code
      - Message
      description: An error that occurred with the job request.
    JobErrorLimitName:
      type: string
      enum:
      - Assets per revision
      - Asset size in GB
      - Amazon Redshift datashare assets per revision
      - AWS Lake Formation data permission assets per revision
      - Amazon S3 data access assets per revision
    JobErrorResourceTypes:
      type: string
      enum:
      - REVISION
      - ASSET
      - DATA_SET
    KmsKeyArn:
      type: string
      minLength: 1
      maxLength: 2048
    KmsKeyToGrant:
      type: object
      properties:
        KmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The AWS KMS CMK (Key Management System Customer Managed Key)
            used to encrypt S3 objects in the shared S3 Bucket. AWS Data exchange
            will create a KMS grant for each subscriber to allow them to access and
            decrypt their entitled data that is encrypted using this KMS key specified.
      required:
      - KmsKeyArn
      description: The Amazon Resource Name (ARN) of the AWS KMS key used to encrypt
        the shared S3 objects.
    LFPermission:
      type: string
      enum:
      - DESCRIBE
      - SELECT
    LFResourceDetails:
      type: object
      properties:
        Database:
          allOf:
          - $ref: '#/components/schemas/DatabaseLFTagPolicy'
          description: Details about the database resource included in the AWS Lake
            Formation data permission.
        Table:
          allOf:
          - $ref: '#/components/schemas/TableLFTagPolicy'
          description: Details about the table resource included in the AWS Lake Formation
            data permission.
      description: Details about the AWS Lake Formation resource (Table or Database)
        included in the AWS Lake Formation data permission.
    LFResourceType:
      type: string
      enum:
      - TABLE
      - DATABASE
    LFTag:
      type: object
      properties:
        TagKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key name for the LF-tag.
        TagValues:
          allOf:
          - $ref: '#/components/schemas/ListOfLFTagValues'
          description: A list of LF-tag values.
      required:
      - TagKey
      - TagValues
      description: A structure that allows an LF-admin to grant permissions on certain
        conditions.
    LFTagPolicyDetails:
      type: object
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The identifier for the AWS Glue Data Catalog.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/LFResourceType'
          description: The resource type for which the LF-tag policy applies.
        ResourceDetails:
          allOf:
          - $ref: '#/components/schemas/LFResourceDetails'
          description: Details for the Lake Formation Resources included in the LF-tag
            policy.
      required:
      - CatalogId
      - ResourceType
      - ResourceDetails
      description: Details about the LF-tag policy.
    LakeFormationDataPermissionAsset:
      type: object
      properties:
        LakeFormationDataPermissionDetails:
          allOf:
          - $ref: '#/components/schemas/LakeFormationDataPermissionDetails'
          description: Details about the AWS Lake Formation data permission.
        LakeFormationDataPermissionType:
          allOf:
          - $ref: '#/components/schemas/LakeFormationDataPermissionType'
          description: The data permission type.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/ListOfLFPermissions'
          description: The permissions granted to the subscribers on the resource.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM role's ARN that allows AWS Data Exchange to assume
            the role and grant and revoke permissions to AWS Lake Formation data permissions.
      required:
      - LakeFormationDataPermissionDetails
      - LakeFormationDataPermissionType
      - Permissions
      description: The AWS Lake Formation data permission asset.
    LakeFormationDataPermissionDetails:
      type: object
      properties:
        LFTagPolicy:
          allOf:
          - $ref: '#/components/schemas/LFTagPolicyDetails'
          description: Details about the LF-tag policy.
      description: Details about the AWS Lake Formation data permission.
    LakeFormationDataPermissionType:
      type: string
      enum:
      - LFTagPolicy
    LakeFormationTagPolicyDetails:
      type: object
      properties:
        Database:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The underlying Glue database that the notification is referring
            to.
        Table:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The underlying Glue table that the notification is referring
            to.
      description: Extra details specific to the affected scope in this LF data set.
    LimitName:
      type: string
      enum:
      - Products per account
      - Data sets per account
      - Data sets per product
      - Revisions per data set
      - Assets per revision
      - Assets per import job from Amazon S3
      - Asset per export job from Amazon S3
      - Asset size in GB
      - Concurrent in progress jobs to export assets to Amazon S3
      - Concurrent in progress jobs to export assets to a signed URL
      - Concurrent in progress jobs to import assets from Amazon S3
      - Concurrent in progress jobs to import assets from a signed URL
      - Concurrent in progress jobs to export revisions to Amazon S3
      - Event actions per account
      - Auto export event actions per data set
      - Amazon Redshift datashare assets per import job from Redshift
      - Concurrent in progress jobs to import assets from Amazon Redshift datashares
      - Revisions per Amazon Redshift datashare data set
      - Amazon Redshift datashare assets per revision
      - Concurrent in progress jobs to import assets from an API Gateway API
      - Amazon API Gateway API assets per revision
      - Revisions per Amazon API Gateway API data set
      - Concurrent in progress jobs to import assets from an AWS Lake Formation tag
        policy
      - AWS Lake Formation data permission assets per revision
      - Revisions per AWS Lake Formation data permission data set
      - Revisions per Amazon S3 data access data set
      - Amazon S3 data access assets per revision
      - Concurrent in progress jobs to create Amazon S3 data access assets from S3
        buckets
      - Active and pending data grants
      - Pending data grants per consumer
    ListDataGrantsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to be included in the next page.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The pagination token used to retrieve the next page of results
            for this operation.
    ListDataGrantsResponse:
      type: object
      properties:
        DataGrantSummaries:
          allOf:
          - $ref: '#/components/schemas/ListOfDataGrantSummaryEntry'
          description: An object that contains a list of data grant information.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token used to retrieve the next page of results
            for this operation.
    ListDataSetRevisionsRequest:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results returned by a single call.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token value retrieved from a previous call to access the
            next page of results.
      required:
      - DataSetId
    ListDataSetRevisionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        Revisions:
          allOf:
          - $ref: '#/components/schemas/ListOfRevisionEntry'
          description: The asset objects listed by the request.
    ListDataSetsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results returned by a single call.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token value retrieved from a previous call to access the
            next page of results.
        Origin:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A property that defines the data set as OWNED by the account
            (for providers) or ENTITLED to the account (for subscribers).
    ListDataSetsResponse:
      type: object
      properties:
        DataSets:
          allOf:
          - $ref: '#/components/schemas/ListOfDataSetEntry'
          description: The data set objects listed by the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
    ListEventActionsRequest:
      type: object
      properties:
        EventSourceId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for the event source.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results returned by a single call.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token value retrieved from a previous call to access the
            next page of results.
    ListEventActionsResponse:
      type: object
      properties:
        EventActions:
          allOf:
          - $ref: '#/components/schemas/ListOfEventActionEntry'
          description: The event action objects listed by the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
    ListJobsRequest:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results returned by a single call.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token value retrieved from a previous call to access the
            next page of results.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a revision.
    ListJobsResponse:
      type: object
      properties:
        Jobs:
          allOf:
          - $ref: '#/components/schemas/ListOfJobEntry'
          description: The jobs listed by the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
    ListOfAssetDestinationEntry:
      type: array
      items:
        $ref: '#/components/schemas/AssetDestinationEntry'
    ListOfAssetEntry:
      type: array
      items:
        $ref: '#/components/schemas/AssetEntry'
    ListOfAssetSourceEntry:
      type: array
      items:
        $ref: '#/components/schemas/AssetSourceEntry'
    ListOfDataGrantSummaryEntry:
      type: array
      items:
        $ref: '#/components/schemas/DataGrantSummaryEntry'
    ListOfDataSetEntry:
      type: array
      items:
        $ref: '#/components/schemas/DataSetEntry'
    ListOfDatabaseLFTagPolicyPermissions:
      type: array
      items:
        $ref: '#/components/schemas/DatabaseLFTagPolicyPermission'
    ListOfEventActionEntry:
      type: array
      items:
        $ref: '#/components/schemas/EventActionEntry'
    ListOfJobEntry:
      type: array
      items:
        $ref: '#/components/schemas/JobEntry'
    ListOfJobError:
      type: array
      items:
        $ref: '#/components/schemas/JobError'
    ListOfKmsKeysToGrant:
      type: array
      items:
        $ref: '#/components/schemas/KmsKeyToGrant'
    ListOfLFPermissions:
      type: array
      items:
        $ref: '#/components/schemas/LFPermission'
    ListOfLFTagValues:
      type: array
      items:
        type: string
    ListOfLFTags:
      type: array
      items:
        $ref: '#/components/schemas/LFTag'
    ListOfLakeFormationTagPolicies:
      type: array
      items:
        $ref: '#/components/schemas/LakeFormationTagPolicyDetails'
    ListOfReceivedDataGrantSummariesEntry:
      type: array
      items:
        $ref: '#/components/schemas/ReceivedDataGrantSummariesEntry'
    ListOfRedshiftDataShareAssetSourceEntry:
      type: array
      items:
        $ref: '#/components/schemas/RedshiftDataShareAssetSourceEntry'
    ListOfRedshiftDataShares:
      type: array
      items:
        $ref: '#/components/schemas/RedshiftDataShareDetails'
    ListOfRevisionDestinationEntry:
      type: array
      items:
        $ref: '#/components/schemas/RevisionDestinationEntry'
    ListOfRevisionEntry:
      type: array
      items:
        $ref: '#/components/schemas/RevisionEntry'
    ListOfS3DataAccesses:
      type: array
      items:
        $ref: '#/components/schemas/S3DataAccessDetails'
    ListOfSchemaChangeDetails:
      type: array
      items:
        $ref: '#/components/schemas/SchemaChangeDetails'
    ListOfTableTagPolicyLFPermissions:
      type: array
      items:
        $ref: '#/components/schemas/TableTagPolicyLFPermission'
    ListOf__string:
      type: array
      items:
        $ref: '#/components/schemas/__string'
    ListReceivedDataGrantsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to be included in the next page.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The pagination token used to retrieve the next page of results
            for this operation.
        AcceptanceState:
          allOf:
          - $ref: '#/components/schemas/AcceptanceStateFilterValues'
          description: The acceptance state of the data grants to list.
    ListReceivedDataGrantsResponse:
      type: object
      properties:
        DataGrantSummaries:
          allOf:
          - $ref: '#/components/schemas/ListOfReceivedDataGrantSummariesEntry'
          description: An object that contains a list of received data grant information.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token used to retrieve the next page of results
            for this operation.
    ListRevisionAssetsRequest:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results returned by a single call.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token value retrieved from a previous call to access the
            next page of results.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a revision.
      required:
      - DataSetId
      - RevisionId
    ListRevisionAssetsResponse:
      type: object
      properties:
        Assets:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetEntry'
          description: The asset objects listed by the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
    ListTagsForResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: An Amazon Resource Name (ARN) that uniquely identifies an AWS
            resource.
      required:
      - ResourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: A label that consists of a customer-defined key and an optional
            value.
    MapOf__string:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/__string'
    MaxResults:
      type: integer
      default: 0
      minimum: 1
      maximum: 200
    Name:
      type: string
    NextToken:
      type: string
    NotificationDetails:
      type: object
      properties:
        DataUpdate:
          allOf:
          - $ref: '#/components/schemas/DataUpdateRequestDetails'
          description: Extra details specific to a data update type notification.
        Deprecation:
          allOf:
          - $ref: '#/components/schemas/DeprecationRequestDetails'
          description: Extra details specific to a deprecation type notification.
        SchemaChange:
          allOf:
          - $ref: '#/components/schemas/SchemaChangeRequestDetails'
          description: Extra details specific to a schema change type notification.
      description: Extra details specific to this notification.
    NotificationType:
      type: string
      enum:
      - DATA_DELAY
      - DATA_UPDATE
      - DEPRECATION
      - SCHEMA_CHANGE
    Origin:
      type: string
      enum:
      - OWNED
      - ENTITLED
    OriginDetails:
      type: object
      properties:
        ProductId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The product ID of the origin of the data set.
        DataGrantId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the data grant.
      description: Details about the origin of the data set.
    ProtocolType:
      type: string
      enum:
      - REST
    ReceivedDataGrantSummariesEntry:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DataGrantName'
          description: The name of the data grant.
        SenderPrincipal:
          allOf:
          - $ref: '#/components/schemas/SenderPrincipal'
          description: The Amazon Web Services account ID of the data grant sender.
        ReceiverPrincipal:
          allOf:
          - $ref: '#/components/schemas/ReceiverPrincipal'
          description: The Amazon Web Services account ID of the data grant receiver.
        AcceptanceState:
          allOf:
          - $ref: '#/components/schemas/DataGrantAcceptanceState'
          description: The acceptance state of the data grant.
        AcceptedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was accepted.
        EndsAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when access to the associated data set ends.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data set associated to the data grant.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the data grant.
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the data grant.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was created.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the data grant was last updated.
      required:
      - Name
      - SenderPrincipal
      - ReceiverPrincipal
      - AcceptanceState
      - DataSetId
      - Id
      - Arn
      - CreatedAt
      - UpdatedAt
      description: Information about a received data grant.
    ReceiverPrincipal:
      type: string
      pattern: ^\d{12}$
    RedshiftDataShareAsset:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon Resource Name (ARN) of the datashare asset.
      required:
      - Arn
      description: The Amazon Redshift datashare asset.
    RedshiftDataShareAssetSourceEntry:
      type: object
      properties:
        DataShareArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon Resource Name (ARN) of the datashare asset.
      required:
      - DataShareArn
      description: The source of the Amazon Redshift datashare asset.
    RedshiftDataShareDetails:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the underlying Redshift data share that is being
            affected by this notification.
        Database:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The database name in the Redshift data share that is being
            affected by this notification.
        Function:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A function name in the Redshift database that is being affected
            by this notification.
        Table:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A table name in the Redshift database that is being affected
            by this notification.
        Schema:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A schema name in the Redshift database that is being affected
            by this notification.
        View:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A view name in the Redshift database that is being affected
            by this notification.
      required:
      - Arn
      - Database
      description: Extra details specific to the affected scope in this Redshift data
        set.
    RequestDetails:
      type: object
      properties:
        ExportAssetToSignedUrl:
          allOf:
          - $ref: '#/components/schemas/ExportAssetToSignedUrlRequestDetails'
          description: Details about the export to signed URL request.
        ExportAssetsToS3:
          allOf:
          - $ref: '#/components/schemas/ExportAssetsToS3RequestDetails'
          description: Details about the export to Amazon S3 request.
        ExportRevisionsToS3:
          allOf:
          - $ref: '#/components/schemas/ExportRevisionsToS3RequestDetails'
          description: Details about the export to Amazon S3 request.
        ImportAssetFromSignedUrl:
          allOf:
          - $ref: '#/components/schemas/ImportAssetFromSignedUrlRequestDetails'
          description: Details about the import from Amazon S3 request.
        ImportAssetsFromS3:
          allOf:
          - $ref: '#/components/schemas/ImportAssetsFromS3RequestDetails'
          description: Details about the import asset from API Gateway API request.
        ImportAssetsFromRedshiftDataShares:
          allOf:
          - $ref: '#/components/schemas/ImportAssetsFromRedshiftDataSharesRequestDetails'
          description: Details from an import from Amazon Redshift datashare request.
        ImportAssetFromApiGatewayApi:
          allOf:
          - $ref: '#/components/schemas/ImportAssetFromApiGatewayApiRequestDetails'
          description: Details about the import from signed URL request.
        CreateS3DataAccessFromS3Bucket:
          allOf:
          - $ref: '#/components/schemas/CreateS3DataAccessFromS3BucketRequestDetails'
          description: Details of the request to create S3 data access from the Amazon
            S3 bucket.
        ImportAssetsFromLakeFormationTagPolicy:
          allOf:
          - $ref: '#/components/schemas/ImportAssetsFromLakeFormationTagPolicyRequestDetails'
          description: Request details for the ImportAssetsFromLakeFormationTagPolicy
            job.
      description: The details for the request.
    ResourceNotFoundException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The resource couldn't be found.
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for the resource that couldn't be found.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of resource that couldn't be found.
      required:
      - Message
      description: The resource couldn't be found.
    ResourceType:
      type: string
      enum:
      - DATA_SET
      - REVISION
      - ASSET
      - JOB
      - EVENT_ACTION
      - DATA_GRANT
    ResponseDetails:
      type: object
      properties:
        ExportAssetToSignedUrl:
          allOf:
          - $ref: '#/components/schemas/ExportAssetToSignedUrlResponseDetails'
          description: Details for the export to signed URL response.
        ExportAssetsToS3:
          allOf:
          - $ref: '#/components/schemas/ExportAssetsToS3ResponseDetails'
          description: Details for the export to Amazon S3 response.
        ExportRevisionsToS3:
          allOf:
          - $ref: '#/components/schemas/ExportRevisionsToS3ResponseDetails'
          description: Details for the export revisions to Amazon S3 response.
        ImportAssetFromSignedUrl:
          allOf:
          - $ref: '#/components/schemas/ImportAssetFromSignedUrlResponseDetails'
          description: Details for the import from signed URL response.
        ImportAssetsFromS3:
          allOf:
          - $ref: '#/components/schemas/ImportAssetsFromS3ResponseDetails'
          description: Details for the import from Amazon S3 response.
        ImportAssetsFromRedshiftDataShares:
          allOf:
          - $ref: '#/components/schemas/ImportAssetsFromRedshiftDataSharesResponseDetails'
          description: Details from an import from Amazon Redshift datashare response.
        ImportAssetFromApiGatewayApi:
          allOf:
          - $ref: '#/components/schemas/ImportAssetFromApiGatewayApiResponseDetails'
          description: The response details.
        CreateS3DataAccessFromS3Bucket:
          allOf:
          - $ref: '#/components/schemas/CreateS3DataAccessFromS3BucketResponseDetails'
          description: Response details from the CreateS3DataAccessFromS3Bucket job.
        ImportAssetsFromLakeFormationTagPolicy:
          allOf:
          - $ref: '#/components/schemas/ImportAssetsFromLakeFormationTagPolicyResponseDetails'
          description: Response details from the ImportAssetsFromLakeFormationTagPolicy
            job.
      description: Details for the response.
    RevisionDestinationEntry:
      type: object
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon S3 bucket that is the destination for the assets
            in the revision.
        KeyPattern:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A string representing the pattern for generated names of the
            individual assets in the revision. For more information about key patterns,
            see [Key patterns when exporting revisions](https://docs.aws.amazon.com/data-exchange/latest/userguide/jobs.html#revision-export-keypatterns).
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision.
      required:
      - Bucket
      - RevisionId
      description: The destination where the assets in the revision will be exported.
    RevisionEntry:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the revision.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          description: An optional comment about the revision.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was created, in ISO 8601
            format.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with the
            data set revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: To publish a revision to a data set in a product, the revision
            must first be finalized. Finalizing a revision tells AWS Data Exchange
            that your changes to the assets in the revision are complete. After it's
            in this read-only state, you can publish the revision to your products.
            Finalized revisions can be published through the AWS Data Exchange console
            or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace
            Catalog API action. When using the API, revisions are uniquely identified
            by their ARN.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The revision ID of the owned revision corresponding to the
            entitled revision being viewed. This parameter is returned when a revision
            owner is viewing the entitled copy of its owned revision.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was last updated, in ISO
            8601 format.
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          description: A required comment to inform subscribers of the reason their
            access to the revision was revoked.
        Revoked:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: A status indicating that subscribers' access to the revision
            was revoked.
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was revoked, in ISO 8601
            format.
      required:
      - Arn
      - CreatedAt
      - DataSetId
      - Id
      - UpdatedAt
      description: A revision is a container for one or more assets.
    RevisionPublished:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The data set ID of the published revision.
      required:
      - DataSetId
      description: Information about the published revision.
    RevokeRevisionRequest:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a revision.
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          description: A required comment to inform subscribers of the reason their
            access to the revision was revoked.
      required:
      - DataSetId
      - RevisionId
      - RevocationComment
    RevokeRevisionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the revision.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          description: An optional comment about the revision.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was created, in ISO 8601
            format.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with the
            data set revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: To publish a revision to a data set in a product, the revision
            must first be finalized. Finalizing a revision tells AWS Data Exchange
            that changes to the assets in the revision are complete. After it's in
            this read-only state, you can publish the revision to your products. Finalized
            revisions can be published through the AWS Data Exchange console or the
            AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace
            Catalog API action. When using the API, revisions are uniquely identified
            by their ARN.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The revision ID of the owned revision corresponding to the
            entitled revision being viewed. This parameter is returned when a revision
            owner is viewing the entitled copy of its owned revision.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was last updated, in ISO
            8601 format.
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          description: A required comment to inform subscribers of the reason their
            access to the revision was revoked.
        Revoked:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: A status indicating that subscribers' access to the revision
            was revoked.
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was revoked, in ISO 8601
            format.
    RoleArn:
      type: string
      pattern: ^arn:aws:iam::(\d{12}):role\/.+$
    S3DataAccessAsset:
      type: object
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon S3 bucket hosting data to be shared in the S3 data
            access.
        KeyPrefixes:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          description: The Amazon S3 bucket used for hosting shared data in the Amazon
            S3 data access.
        Keys:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          description: S3 keys made available using this asset.
        S3AccessPointAlias:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The automatically-generated bucket-style alias for your Amazon
            S3 Access Point. Customers can access their entitled data using the S3
            Access Point alias.
        S3AccessPointArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN for your Amazon S3 Access Point. Customers can also
            access their entitled data using the S3 Access Point ARN.
        KmsKeysToGrant:
          allOf:
          - $ref: '#/components/schemas/ListOfKmsKeysToGrant'
          description: List of AWS KMS CMKs (Key Management System Customer Managed
            Keys) and ARNs used to encrypt S3 objects being shared in this S3 Data
            Access asset. Providers must include all AWS KMS keys used to encrypt
            these shared S3 objects.
      required:
      - Bucket
      description: The Amazon S3 data access that is the asset.
    S3DataAccessAssetSourceEntry:
      type: object
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon S3 bucket used for hosting shared data in the Amazon
            S3 data access.
        KeyPrefixes:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          description: Organizes Amazon S3 asset key prefixes stored in an Amazon
            S3 bucket.
        Keys:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          description: The keys used to create the Amazon S3 data access.
        KmsKeysToGrant:
          allOf:
          - $ref: '#/components/schemas/ListOfKmsKeysToGrant'
          description: List of AWS KMS CMKs (Key Management System Customer Managed
            Keys) and ARNs used to encrypt S3 objects being shared in this S3 Data
            Access asset.
      required:
      - Bucket
      description: Source details for an Amazon S3 data access asset.
    S3DataAccessDetails:
      type: object
      properties:
        KeyPrefixes:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          description: A list of the key prefixes affected by this notification. This
            can have up to 50 entries.
        Keys:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          description: A list of the keys affected by this notification. This can
            have up to 50 entries.
      description: Extra details specific to the affected scope in this S3 Data Access
        data set.
    S3SnapshotAsset:
      type: object
      properties:
        Size:
          allOf:
          - $ref: '#/components/schemas/__doubleMin0'
          description: The size of the Amazon S3 object that is the object.
      required:
      - Size
      description: The Amazon S3 object that is the asset.
    SchemaChangeDetails:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Name of the changing field. This value can be up to 255 characters
            long.
        Type:
          allOf:
          - $ref: '#/components/schemas/SchemaChangeType'
          description: Is the field being added, removed, or modified?
        Description:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Description of what's changing about this field. This value
            can be up to 512 characters long.
      required:
      - Name
      - Type
      description: Object encompassing information about a schema change to a single,
        particular field, a notification can have up to 100 of these.
    SchemaChangeRequestDetails:
      type: object
      properties:
        Changes:
          allOf:
          - $ref: '#/components/schemas/ListOfSchemaChangeDetails'
          description: List of schema changes happening in the scope of this notification.
            This can have up to 100 entries.
        SchemaChangeAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A date in the future when the schema change is taking effect.
      required:
      - SchemaChangeAt
      description: Extra details specific to this schema change type notification.
    SchemaChangeType:
      type: string
      enum:
      - ADD
      - REMOVE
      - MODIFY
    ScopeDetails:
      type: object
      properties:
        LakeFormationTagPolicies:
          allOf:
          - $ref: '#/components/schemas/ListOfLakeFormationTagPolicies'
          description: Underlying LF resources that will be affected by this notification.
        RedshiftDataShares:
          allOf:
          - $ref: '#/components/schemas/ListOfRedshiftDataShares'
          description: Underlying Redshift resources that will be affected by this
            notification.
        S3DataAccesses:
          allOf:
          - $ref: '#/components/schemas/ListOfS3DataAccesses'
          description: Underlying S3 resources that will be affected by this notification.
      description: Details about the scope of the notifications such as the affected
        resources.
    SendApiAssetRequest:
      type: object
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The request body.
        QueryStringParameters:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: Attach query string parameters to the end of the URI (for example,
            /v1/examplePath?exampleParam=exampleValue).
        AssetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Asset ID value for the API request.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Data set ID value for the API request.
        RequestHeaders:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: Any header value prefixed with x-amzn-dataexchange-header-
            will have that stripped before sending the Asset API request. Use this
            when you want to override a header that AWS Data Exchange uses. Alternatively,
            you can use the header without a prefix to the HTTP request.
        Method:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: HTTP method value for the API request. Alternatively, you can
            use the appropriate verb in your request.
        Path:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: URI path value for the API request. Alternatively, you can
            set the URI path directly by invoking /v1/{pathValue}.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Revision ID value for the API request.
      required:
      - AssetId
      - DataSetId
      - RevisionId
    SendApiAssetResponse:
      type: object
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The response body from the underlying API tracked by the API
            asset.
        ResponseHeaders:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: The response headers from the underlying API tracked by the
            API asset.
    SendDataSetNotificationRequest:
      type: object
      properties:
        Scope:
          allOf:
          - $ref: '#/components/schemas/ScopeDetails'
          description: Affected scope of this notification such as the underlying
            resources affected by the notification event.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Idempotency key for the notification, this key allows us to
            deduplicate notifications that are sent in quick succession erroneously.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max4096'
          description: Free-form text field for providers to add information about
            their notifications.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Affected data set of the notification.
        Details:
          allOf:
          - $ref: '#/components/schemas/NotificationDetails'
          description: Extra details specific to this notification type.
        Type:
          allOf:
          - $ref: '#/components/schemas/NotificationType'
          description: The type of the notification. Describing the kind of event
            the notification is alerting you to.
      required:
      - DataSetId
      - Type
    SendDataSetNotificationResponse:
      type: object
      properties: {}
    SenderPrincipal:
      type: string
      pattern: ^\d{12}$
    ServerSideEncryptionTypes:
      type: string
      enum:
      - aws:kms
      - AES256
    ServiceLimitExceededException:
      type: object
      properties:
        LimitName:
          allOf:
          - $ref: '#/components/schemas/LimitName'
          description: The name of the limit that was reached.
        LimitValue:
          allOf:
          - $ref: '#/components/schemas/__double'
          description: The value of the exceeded limit.
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The request has exceeded the quotas imposed by the service.
      required:
      - Message
      description: The request has exceeded the quotas imposed by the service.
    StartJobRequest:
      type: object
      properties:
        JobId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a job.
      required:
      - JobId
    StartJobResponse:
      type: object
      properties: {}
    State:
      type: string
      enum:
      - WAITING
      - IN_PROGRESS
      - ERROR
      - COMPLETED
      - CANCELLED
      - TIMED_OUT
    TableLFTagPolicy:
      type: object
      properties:
        Expression:
          allOf:
          - $ref: '#/components/schemas/ListOfLFTags'
          description: A list of LF-tag conditions that apply to table resources.
      required:
      - Expression
      description: The LF-tag policy for a table resource.
    TableLFTagPolicyAndPermissions:
      type: object
      properties:
        Expression:
          allOf:
          - $ref: '#/components/schemas/ListOfLFTags'
          description: A list of LF-tag conditions that apply to table resources.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/ListOfTableTagPolicyLFPermissions'
          description: The permissions granted to subscribers on table resources.
      required:
      - Expression
      - Permissions
      description: The LF-tag policy and permissions that apply to table resources.
    TableTagPolicyLFPermission:
      type: string
      enum:
      - DESCRIBE
      - SELECT
    TagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: An Amazon Resource Name (ARN) that uniquely identifies an AWS
            resource.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          description: A label that consists of a customer-defined key and an optional
            value.
      required:
      - ResourceArn
      - Tags
    ThrottlingException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The limit on the number of requests per second was exceeded.
      required:
      - Message
      description: The limit on the number of requests per second was exceeded.
    Timestamp:
      type: string
      format: date-time
    Type:
      type: string
      enum:
      - IMPORT_ASSETS_FROM_S3
      - IMPORT_ASSET_FROM_SIGNED_URL
      - EXPORT_ASSETS_TO_S3
      - EXPORT_ASSET_TO_SIGNED_URL
      - EXPORT_REVISIONS_TO_S3
      - IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES
      - IMPORT_ASSET_FROM_API_GATEWAY_API
      - CREATE_S3_DATA_ACCESS_FROM_S3_BUCKET
      - IMPORT_ASSETS_FROM_LAKE_FORMATION_TAG_POLICY
    UntagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: An Amazon Resource Name (ARN) that uniquely identifies an AWS
            resource.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          description: The key tags.
      required:
      - ResourceArn
      - TagKeys
    UpdateAssetRequest:
      type: object
      properties:
        AssetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for an asset.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the asset. When importing from Amazon S3, the Amazon
            S3 object key is used as the asset name. When exporting to Amazon S3,
            the asset name is used as default target Amazon S3 object key. When importing
            from Amazon API Gateway API, the API name is used as the asset name. When
            importing from Amazon Redshift, the datashare name is used as the asset
            name. When importing from AWS Lake Formation, the static values of "Database(s)
            included in the LF-tag policy" or "Table(s) included in LF-tag policy"
            are used as the name.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a revision.
      required:
      - AssetId
      - DataSetId
      - Name
      - RevisionId
    UpdateAssetResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the asset.
        AssetDetails:
          allOf:
          - $ref: '#/components/schemas/AssetDetails'
          description: Details about the asset.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the asset was created, in ISO 8601 format.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with this
            asset.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the asset.
        Name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the asset. When importing from Amazon S3, the Amazon
            S3 object key is used as the asset name. When exporting to Amazon S3,
            the asset name is used as default target Amazon S3 object key. When importing
            from Amazon API Gateway API, the API name is used as the asset name. When
            importing from Amazon Redshift, the datashare name is used as the asset
            name. When importing from AWS Lake Formation, the static values of "Database(s)
            included in the LF-tag policy"- or "Table(s) included in LF-tag policy"
            are used as the asset name.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision associated with this
            asset.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The asset ID of the owned asset corresponding to the entitled
            asset being viewed. This parameter is returned when an asset owner is
            viewing the entitled copy of its owned asset.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the asset was last updated, in ISO 8601
            format.
    UpdateDataSetRequest:
      type: object
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description for the data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data set.
      required:
      - DataSetId
    UpdateDataSetResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the data set.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the data set was created, in ISO 8601
            format.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description for the data set.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data set.
        Origin:
          allOf:
          - $ref: '#/components/schemas/Origin'
          description: A property that defines the data set as OWNED by the account
            (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          allOf:
          - $ref: '#/components/schemas/OriginDetails'
          description: If the origin of this data set is ENTITLED, includes the details
            for the product on AWS Marketplace.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The data set ID of the owned data set corresponding to the
            entitled data set being viewed. This parameter is returned when a data
            set owner is viewing the entitled copy of its owned data set.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the data set was last updated, in ISO
            8601 format.
    UpdateEventActionRequest:
      type: object
      properties:
        Action:
          allOf:
          - $ref: '#/components/schemas/Action'
          description: What occurs after a certain event.
        EventActionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for the event action.
      required:
      - EventActionId
    UpdateEventActionResponse:
      type: object
      properties:
        Action:
          allOf:
          - $ref: '#/components/schemas/Action'
          description: What occurs after a certain event.
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the event action.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event action was created, in ISO
            8601 format.
        Event:
          allOf:
          - $ref: '#/components/schemas/Event'
          description: What occurs to start an action.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event action was last updated, in
            ISO 8601 format.
    UpdateRevisionRequest:
      type: object
      properties:
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          description: An optional comment about the revision.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a data set.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Finalizing a revision tells AWS Data Exchange that your changes
            to the assets in the revision are complete. After it's in this read-only
            state, you can publish the revision to your products.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The unique identifier for a revision.
      required:
      - DataSetId
      - RevisionId
    UpdateRevisionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN for the revision.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          description: An optional comment about the revision.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was created, in ISO 8601
            format.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the data set associated with the
            data set revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: To publish a revision to a data set in a product, the revision
            must first be finalized. Finalizing a revision tells AWS Data Exchange
            that changes to the assets in the revision are complete. After it's in
            this read-only state, you can publish the revision to your products. Finalized
            revisions can be published through the AWS Data Exchange console or the
            AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace
            Catalog API action. When using the API, revisions are uniquely identified
            by their ARN.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the revision.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The revision ID of the owned revision corresponding to the
            entitled revision being viewed. This parameter is returned when a revision
            owner is viewing the entitled copy of its owned revision.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was last updated, in ISO
            8601 format.
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          description: A required comment to inform subscribers of the reason their
            access to the revision was revoked.
        Revoked:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: A status indicating that subscribers' access to the revision
            was revoked.
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the revision was revoked, in ISO 8601
            format.
    ValidationException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The message that informs you about what was invalid about the
            request.
        ExceptionCause:
          allOf:
          - $ref: '#/components/schemas/ExceptionCause'
          description: The unique identifier for the resource that couldn't be found.
      required:
      - Message
      description: The request was invalid.
    __boolean:
      type: boolean
      default: false
    __double:
      type: number
      format: double
      default: 0
    __doubleMin0:
      type: number
      format: double
      default: 0
    __string:
      type: string
    __stringMin0Max16384:
      type: string
      minLength: 0
      maxLength: 16384
    __stringMin0Max4096:
      type: string
      minLength: 0
      maxLength: 4096
    __stringMin10Max512:
      type: string
      minLength: 10
      maxLength: 512
    __stringMin24Max24PatternAZaZ094AZaZ092AZaZ093:
      type: string
      pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
      minLength: 24
      maxLength: 24
