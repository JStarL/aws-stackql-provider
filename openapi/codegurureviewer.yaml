openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: codeguru_reviewer
  x-aws-serviceName: codegurureviewer
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2019-09-19'
  title: Amazon CodeGuru Reviewer
  description: |-
    This section provides documentation for the Amazon CodeGuru Reviewer API operations. CodeGuru Reviewer is a service that uses program analysis and machine learning to detect potential defects that are difficult for developers to find and recommends fixes in your Java and Python code.

    By proactively detecting and providing recommendations for addressing code defects and implementing best practices, CodeGuru Reviewer improves the overall quality and maintainability of your code base during the code review stage. For more information about CodeGuru Reviewer, see the _[Amazon CodeGuru Reviewer User Guide](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html)._

    To improve the security of your CodeGuru Reviewer API calls, you can establish a private connection between your VPC and CodeGuru Reviewer by creating an _interface VPC endpoint_. For more information, see [CodeGuru Reviewer and interface VPC endpoints (Amazon Web Services PrivateLink)](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/vpc-interface-endpoints.html) in the _Amazon CodeGuru Reviewer User Guide_.
servers:
- description: The Amazon CodeGuru Reviewer regional endpoint
  url: https://codeguru-reviewer.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /associations:
    post:
      operationId: AssociateRepository
      description: |-
        Use to associate an Amazon Web Services CodeCommit repository or a repository managed by Amazon Web Services CodeStar Connections with Amazon CodeGuru Reviewer. When you associate a repository, CodeGuru Reviewer reviews source code changes in the repository's pull requests and provides automatic recommendations. You can view recommendations using the CodeGuru Reviewer console. For more information, see [Recommendations in Amazon CodeGuru Reviewer](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/recommendations.html) in the _Amazon CodeGuru Reviewer User Guide._

        If you associate a CodeCommit or S3 repository, it must be in the same Amazon Web Services Region and Amazon Web Services account where its CodeGuru Reviewer code reviews are configured.

        Bitbucket and GitHub Enterprise Server repositories are managed by Amazon Web Services CodeStar Connections to connect to CodeGuru Reviewer. For more information, see [Associate a repository](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/getting-started-associate-repository.html) in the _Amazon CodeGuru Reviewer User Guide._

        You cannot use the CodeGuru Reviewer SDK or the Amazon Web Services CLI to associate a GitHub repository with Amazon CodeGuru Reviewer. To associate a GitHub repository, use the console. For more information, see [Getting started with CodeGuru Reviewer](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/getting-started-with-guru.html) in the _CodeGuru Reviewer User Guide._
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Repository:
                  $ref: '#/components/schemas/Repository'
                ClientRequestToken:
                  $ref: '#/components/schemas/ClientRequestToken'
                Tags:
                  $ref: '#/components/schemas/TagMap'
                KMSKeyDetails:
                  $ref: '#/components/schemas/KMSKeyDetails'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListRepositoryAssociations
      description: |-
        Returns a list of [RepositoryAssociationSummary](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociationSummary.html) objects that contain summary information about a repository association. You can filter the returned list by [ProviderType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociationSummary.html#reviewer-Type-RepositoryAssociationSummary-ProviderType), [Name](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociationSummary.html#reviewer-Type-RepositoryAssociationSummary-Name), [State](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociationSummary.html#reviewer-Type-RepositoryAssociationSummary-State), and [Owner](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociationSummary.html#reviewer-Type-RepositoryAssociationSummary-Owner).
      parameters:
      - name: ProviderType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProviderTypes'
      - name: State
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RepositoryAssociationStates'
      - name: Name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Names'
      - name: Owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Owners'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /codereviews:
    post:
      operationId: CreateCodeReview
      description: |-
        Use to create a code review with a [CodeReviewType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReviewType.html) of `RepositoryAnalysis`. This type of code review analyzes all code under a specified branch in an associated repository. `PullRequest` code reviews are automatically triggered by a pull request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/CodeReviewName'
                RepositoryAssociationArn:
                  $ref: '#/components/schemas/AssociationArn'
                Type:
                  $ref: '#/components/schemas/CodeReviewType'
                ClientRequestToken:
                  $ref: '#/components/schemas/ClientRequestToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListCodeReviews
      description: |-
        Lists all the code reviews that the customer has created in the past 90 days.
      parameters:
      - name: ProviderTypes
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProviderTypes'
      - name: States
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/JobStates'
      - name: RepositoryNames
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RepositoryNames'
      - name: Type
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Type'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListCodeReviewsMaxResults'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /codereviews/{CodeReviewArn}:
    get:
      operationId: DescribeCodeReview
      description: |-
        Returns the metadata associated with the code review along with its status.
      parameters:
      - name: CodeReviewArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /feedback/{CodeReviewArn}:
    get:
      operationId: DescribeRecommendationFeedback
      description: |-
        Describes the customer feedback for a CodeGuru Reviewer recommendation.
      parameters:
      - name: CodeReviewArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      - name: RecommendationId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RecommendationId'
      - name: UserId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/UserId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /associations/{AssociationArn}:
    get:
      operationId: DescribeRepositoryAssociation
      description: |-
        Returns a [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html) object that contains information about the requested repository association.
      parameters:
      - name: AssociationArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssociationArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DisassociateRepository
      description: |-
        Removes the association between Amazon CodeGuru Reviewer and a repository.
      parameters:
      - name: AssociationArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssociationArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /feedback/{CodeReviewArn}/RecommendationFeedback:
    get:
      operationId: ListRecommendationFeedback
      description: |-
        Returns a list of [RecommendationFeedbackSummary](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RecommendationFeedbackSummary.html) objects that contain customer recommendation feedback for all CodeGuru Reviewer users.
      parameters:
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: CodeReviewArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      - name: UserIds
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/UserIds'
      - name: RecommendationIds
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RecommendationIds'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /codereviews/{CodeReviewArn}/Recommendations:
    get:
      operationId: ListRecommendations
      description: |-
        Returns the list of all recommendations for a completed code review.
      parameters:
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListRecommendationsMaxResults'
      - name: CodeReviewArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Returns the list of tags associated with an associated repository resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssociationArn'
      responses:
        '200': {}
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Adds one or more tags to an associated repository.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssociationArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes a tag from an associated repository.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssociationArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /feedback:
    put:
      operationId: PutRecommendationFeedback
      description: |-
        Stores customer feedback for a CodeGuru Reviewer recommendation. When this API is called again with different reactions the previous feedback is overwritten.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CodeReviewArn:
                  $ref: '#/components/schemas/Arn'
                RecommendationId:
                  $ref: '#/components/schemas/RecommendationId'
                Reactions:
                  $ref: '#/components/schemas/Reactions'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You do not have sufficient access to perform this action.
    AnalysisType:
      type: string
      enum:
      - Security
      - CodeQuality
    AnalysisTypes:
      type: array
      items:
        $ref: '#/components/schemas/AnalysisType'
    Arn:
      type: string
      pattern: ^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$
      minLength: 1
      maxLength: 1600
    AssociateRepositoryRequest:
      type: object
      properties:
        Repository:
          allOf:
          - $ref: '#/components/schemas/Repository'
          description: The repository to associate.
        ClientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          description: Amazon CodeGuru Reviewer uses this value to prevent the accidental
            creation of duplicate repository associations if there are failures and
            retries.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "An array of key-value pairs used to tag an associated repository.\
            \ A tag is a custom attribute label with two parts:\n\n  * A _tag key_\
            \ (for example, `CostCenter`, `Environment`, `Project`, or `Secret`).\
            \ Tag keys are case sensitive.\n\n  * An optional field known as a _tag\
            \ value_ (for example, `111122223333`, `Production`, or a team name).\
            \ Omitting the tag value is the same as using an empty string. Like tag\
            \ keys, tag values are case sensitive."
        KMSKeyDetails:
          allOf:
          - $ref: '#/components/schemas/KMSKeyDetails'
          description: "A `KMSKeyDetails` object that contains:\n\n  * The encryption\
            \ option for this repository association. It is either owned by Amazon\
            \ Web Services Key Management Service (KMS) (`AWS_OWNED_CMK`) or customer\
            \ managed (`CUSTOMER_MANAGED_CMK`).\n\n  * The ID of the Amazon Web Services\
            \ KMS key that is associated with this repository association."
      required:
      - Repository
    AssociateRepositoryResponse:
      type: object
      properties:
        RepositoryAssociation:
          allOf:
          - $ref: '#/components/schemas/RepositoryAssociation'
          description: Information about the repository association.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "An array of key-value pairs used to tag an associated repository.\
            \ A tag is a custom attribute label with two parts:\n\n  * A _tag key_\
            \ (for example, `CostCenter`, `Environment`, `Project`, or `Secret`).\
            \ Tag keys are case sensitive.\n\n  * An optional field known as a _tag\
            \ value_ (for example, `111122223333`, `Production`, or a team name).\
            \ Omitting the tag value is the same as using an empty string. Like tag\
            \ keys, tag values are case sensitive."
    AssociationArn:
      type: string
      pattern: ^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:association:[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
      minLength: 1
      maxLength: 1600
    AssociationId:
      type: string
      minLength: 1
      maxLength: 64
    BranchDiffSourceCodeType:
      type: object
      properties:
        SourceBranchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          description: The source branch for a diff in an associated repository.
        DestinationBranchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          description: The destination branch for a diff in an associated repository.
      required:
      - SourceBranchName
      - DestinationBranchName
      description: A type of [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType)
        that specifies a code diff between a source and destination branch in an associated
        repository.
    BranchName:
      type: string
      minLength: 1
      maxLength: 256
    BuildArtifactsObjectKey:
      type: string
      pattern: ^\S(.*\S)?$
      minLength: 1
      maxLength: 1024
    ClientRequestToken:
      type: string
      pattern: ^[\w-]+$
      minLength: 1
      maxLength: 64
    CodeArtifacts:
      type: object
      properties:
        SourceCodeArtifactsObjectKey:
          allOf:
          - $ref: '#/components/schemas/SourceCodeArtifactsObjectKey'
          description: The S3 object key for a source code .zip file. This is required
            for all code reviews.
        BuildArtifactsObjectKey:
          allOf:
          - $ref: '#/components/schemas/BuildArtifactsObjectKey'
          description: The S3 object key for a build artifacts .zip file that contains
            .jar or .class files. This is required for a code review with security
            analysis. For more information, see [Create code reviews with GitHub Actions](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/working-with-cicd.html)
            in the _Amazon CodeGuru Reviewer User Guide_.
      required:
      - SourceCodeArtifactsObjectKey
      description: "Code artifacts are source code artifacts and build artifacts used\
        \ in a repository analysis or a pull request review.\n\n  * Source code artifacts\
        \ are source code files in a Git repository that are compressed into a .zip\
        \ file.\n\n  * Build artifacts are .jar or .class files that are compressed\
        \ in a .zip file."
    CodeCommitRepository:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the Amazon Web Services CodeCommit repository.
            For more information, see [repositoryName](https://docs.aws.amazon.com/codecommit/latest/APIReference/API_GetRepository.html#CodeCommit-GetRepository-request-repositoryName)
            in the _Amazon Web Services CodeCommit API Reference_.
      required:
      - Name
      description: Information about an Amazon Web Services CodeCommit repository.
        The CodeCommit repository must be in the same Amazon Web Services Region and
        Amazon Web Services account where its CodeGuru Reviewer code reviews are configured.
    CodeReview:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the code review.
        CodeReviewArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
            object.
        RepositoryName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the repository.
        Owner:
          allOf:
          - $ref: '#/components/schemas/Owner'
          description: The owner of the repository. For an Amazon Web Services CodeCommit
            repository, this is the Amazon Web Services account ID of the account
            that owns the repository. For a GitHub, GitHub Enterprise Server, or Bitbucket
            repository, this is the username for the account that owns the repository.
            For an S3 repository, it can be the username or Amazon Web Services account
            ID.
        ProviderType:
          allOf:
          - $ref: '#/components/schemas/ProviderType'
          description: The type of repository that contains the reviewed code (for
            example, GitHub or Bitbucket).
        State:
          allOf:
          - $ref: '#/components/schemas/JobState'
          description: "The valid code review states are:\n\n  * `Completed`: The\
            \ code review is complete.\n\n  * `Pending`: The code review started and\
            \ has not completed or failed.\n\n  * `Failed`: The code review failed.\n\
            \n  * `Deleting`: The code review is being deleted."
        StateReason:
          allOf:
          - $ref: '#/components/schemas/StateReason'
          description: The reason for the state of the code review.
        CreatedTimeStamp:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time, in milliseconds since the epoch, when the code review
            was created.
        LastUpdatedTimeStamp:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time, in milliseconds since the epoch, when the code review
            was last updated.
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The type of code review.
        PullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          description: The pull request ID for the code review.
        SourceCodeType:
          allOf:
          - $ref: '#/components/schemas/SourceCodeType'
          description: The type of the source code for the code review.
        AssociationArn:
          allOf:
          - $ref: '#/components/schemas/AssociationArn'
          description: The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html)
            that contains the reviewed source code. You can retrieve associated repository
            ARNs by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
        Metrics:
          allOf:
          - $ref: '#/components/schemas/Metrics'
          description: The statistics from the code review.
        AnalysisTypes:
          allOf:
          - $ref: '#/components/schemas/AnalysisTypes'
          description: The types of analysis performed during a repository analysis
            or a pull request review. You can specify either `Security`, `CodeQuality`,
            or both.
        ConfigFileState:
          allOf:
          - $ref: '#/components/schemas/ConfigFileState'
          description: The state of the `aws-codeguru-reviewer.yml` configuration
            file that allows the configuration of the CodeGuru Reviewer analysis.
            The file either exists, doesn't exist, or exists with errors at the root
            directory of your repository.
      description: Information about a code review. A code review belongs to the associated
        repository that contains the reviewed code.
    CodeReviewName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      minLength: 1
      maxLength: 100
    CodeReviewSummaries:
      type: array
      items:
        $ref: '#/components/schemas/CodeReviewSummary'
    CodeReviewSummary:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the code review.
        CodeReviewArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
            object.
        RepositoryName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the repository.
        Owner:
          allOf:
          - $ref: '#/components/schemas/Owner'
          description: The owner of the repository. For an Amazon Web Services CodeCommit
            repository, this is the Amazon Web Services account ID of the account
            that owns the repository. For a GitHub, GitHub Enterprise Server, or Bitbucket
            repository, this is the username for the account that owns the repository.
            For an S3 repository, it can be the username or Amazon Web Services account
            ID.
        ProviderType:
          allOf:
          - $ref: '#/components/schemas/ProviderType'
          description: The provider type of the repository association.
        State:
          allOf:
          - $ref: '#/components/schemas/JobState'
          description: "The state of the code review.\n\nThe valid code review states\
            \ are:\n\n  * `Completed`: The code review is complete.\n\n  * `Pending`:\
            \ The code review started and has not completed or failed.\n\n  * `Failed`:\
            \ The code review failed.\n\n  * `Deleting`: The code review is being\
            \ deleted."
        CreatedTimeStamp:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time, in milliseconds since the epoch, when the code review
            was created.
        LastUpdatedTimeStamp:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time, in milliseconds since the epoch, when the code review
            was last updated.
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The type of the code review.
        PullRequestId:
          allOf:
          - $ref: '#/components/schemas/PullRequestId'
          description: The pull request ID for the code review.
        MetricsSummary:
          allOf:
          - $ref: '#/components/schemas/MetricsSummary'
          description: The statistics from the code review.
        SourceCodeType:
          $ref: '#/components/schemas/SourceCodeType'
      description: Information about the summary of the code review.
    CodeReviewType:
      type: object
      properties:
        RepositoryAnalysis:
          allOf:
          - $ref: '#/components/schemas/RepositoryAnalysis'
          description: A code review that analyzes all code under a specified branch
            in an associated repository. The associated repository is specified using
            its ARN in [CreateCodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview).
        AnalysisTypes:
          allOf:
          - $ref: '#/components/schemas/AnalysisTypes'
          description: They types of analysis performed during a repository analysis
            or a pull request review. You can specify either `Security`, `CodeQuality`,
            or both.
      required:
      - RepositoryAnalysis
      description: "The type of a code review. There are two code review types:\n\n\
        \  * `PullRequest` \\- A code review that is automatically triggered by a\
        \ pull request on an associated repository.\n\n  * `RepositoryAnalysis` \\\
        - A code review that analyzes all code under a specified branch in an associated\
        \ repository. The associated repository is specified using its ARN in [CreateCodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview)."
    CommitDiffSourceCodeType:
      type: object
      properties:
        SourceCommit:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          description: The SHA of the source commit used to generate a commit diff.
            This field is required for a pull request code review.
        DestinationCommit:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          description: The SHA of the destination commit used to generate a commit
            diff. This field is required for a pull request code review.
        MergeBaseCommit:
          allOf:
          - $ref: '#/components/schemas/CommitId'
          description: The SHA of the merge base of a commit.
      description: A type of [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType)
        that specifies the commit diff for a pull request on an associated repository.
        The `SourceCommit` and `DestinationCommit` fields are required to do a pull
        request code review.
    CommitId:
      type: string
      minLength: 6
      maxLength: 64
    ConfigFileState:
      type: string
      enum:
      - Present
      - Absent
      - PresentWithErrors
    ConflictException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The requested operation would cause a conflict with the current
        state of a service resource associated with the request. Resolve the conflict
        before retrying this request.
    ConnectionArn:
      type: string
      pattern: ^arn:aws(-[\w]+)*:.+:.+:[0-9]{12}:.+$
      minLength: 0
      maxLength: 256
    CreateCodeReviewRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/CodeReviewName'
          description: The name of the code review. The name of each code review in
            your Amazon Web Services account must be unique.
        RepositoryAssociationArn:
          allOf:
          - $ref: '#/components/schemas/AssociationArn'
          description: 'The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html)
            object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).


            A code review can only be created on an associated repository. This is
            the ARN of the associated repository.'
        Type:
          allOf:
          - $ref: '#/components/schemas/CodeReviewType'
          description: The type of code review to create. This is specified using
            a [CodeReviewType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReviewType.html)
            object. You can create a code review only of type `RepositoryAnalysis`.
        ClientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          description: Amazon CodeGuru Reviewer uses this value to prevent the accidental
            creation of duplicate code reviews if there are failures and retries.
      required:
      - Name
      - RepositoryAssociationArn
      - Type
    CreateCodeReviewResponse:
      type: object
      properties:
        CodeReview:
          $ref: '#/components/schemas/CodeReview'
    DescribeCodeReviewRequest:
      type: object
      properties:
        CodeReviewArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
            object.
      required:
      - CodeReviewArn
    DescribeCodeReviewResponse:
      type: object
      properties:
        CodeReview:
          allOf:
          - $ref: '#/components/schemas/CodeReview'
          description: Information about the code review.
    DescribeRecommendationFeedbackRequest:
      type: object
      properties:
        CodeReviewArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
            object.
        RecommendationId:
          allOf:
          - $ref: '#/components/schemas/RecommendationId'
          description: The recommendation ID that can be used to track the provided
            recommendations and then to collect the feedback.
        UserId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: 'Optional parameter to describe the feedback for a given user.
            If this is not supplied, it defaults to the user making the request.


            The `UserId` is an IAM principal that can be specified as an Amazon Web
            Services account ID or an Amazon Resource Name (ARN). For more information,
            see [ Specifying a Principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying)
            in the _Amazon Web Services Identity and Access Management User Guide_.'
      required:
      - CodeReviewArn
      - RecommendationId
    DescribeRecommendationFeedbackResponse:
      type: object
      properties:
        RecommendationFeedback:
          allOf:
          - $ref: '#/components/schemas/RecommendationFeedback'
          description: The recommendation feedback given by the user.
    DescribeRepositoryAssociationRequest:
      type: object
      properties:
        AssociationArn:
          allOf:
          - $ref: '#/components/schemas/AssociationArn'
          description: The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html)
            object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
      required:
      - AssociationArn
    DescribeRepositoryAssociationResponse:
      type: object
      properties:
        RepositoryAssociation:
          allOf:
          - $ref: '#/components/schemas/RepositoryAssociation'
          description: Information about the repository association.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "An array of key-value pairs used to tag an associated repository.\
            \ A tag is a custom attribute label with two parts:\n\n  * A _tag key_\
            \ (for example, `CostCenter`, `Environment`, `Project`, or `Secret`).\
            \ Tag keys are case sensitive.\n\n  * An optional field known as a _tag\
            \ value_ (for example, `111122223333`, `Production`, or a team name).\
            \ Omitting the tag value is the same as using an empty string. Like tag\
            \ keys, tag values are case sensitive."
    DisassociateRepositoryRequest:
      type: object
      properties:
        AssociationArn:
          allOf:
          - $ref: '#/components/schemas/AssociationArn'
          description: The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html)
            object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
      required:
      - AssociationArn
    DisassociateRepositoryResponse:
      type: object
      properties:
        RepositoryAssociation:
          allOf:
          - $ref: '#/components/schemas/RepositoryAssociation'
          description: Information about the disassociated repository.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "An array of key-value pairs used to tag an associated repository.\
            \ A tag is a custom attribute label with two parts:\n\n  * A _tag key_\
            \ (for example, `CostCenter`, `Environment`, `Project`, or `Secret`).\
            \ Tag keys are case sensitive.\n\n  * An optional field known as a _tag\
            \ value_ (for example, `111122223333`, `Production`, or a team name).\
            \ Omitting the tag value is the same as using an empty string. Like tag\
            \ keys, tag values are case sensitive."
    EncryptionOption:
      type: string
      enum:
      - AWS_OWNED_CMK
      - CUSTOMER_MANAGED_CMK
    ErrorMessage:
      type: string
    EventInfo:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/EventName'
          description: The name of the event. The possible names are `pull_request`,
            `workflow_dispatch`, `schedule`, and `push`
        State:
          allOf:
          - $ref: '#/components/schemas/EventState'
          description: The state of an event. The state might be open, closed, or
            another state.
      description: Information about an event. The event might be a push, pull request,
        scheduled request, or another type of event.
    EventName:
      type: string
      pattern: ^[ \-A-Z_a-z]+$
      minLength: 1
      maxLength: 32
    EventState:
      type: string
      pattern: ^[ \-A-Z_a-z]+$
      minLength: 1
      maxLength: 32
    FilePath:
      type: string
      minLength: 1
      maxLength: 1024
    FindingsCount:
      type: integer
      format: int64
    InternalServerException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The server encountered an internal error and is unable to complete
        the request.
    JobState:
      type: string
      enum:
      - Completed
      - Pending
      - Failed
      - Deleting
    JobStates:
      type: array
      items:
        $ref: '#/components/schemas/JobState'
    KMSKeyDetails:
      type: object
      properties:
        KMSKeyId:
          allOf:
          - $ref: '#/components/schemas/KMSKeyId'
          description: The ID of the Amazon Web Services KMS key that is associated
            with a repository association.
        EncryptionOption:
          allOf:
          - $ref: '#/components/schemas/EncryptionOption'
          description: The encryption option for a repository association. It is either
            owned by Amazon Web Services Key Management Service (KMS) (`AWS_OWNED_CMK`)
            or customer managed (`CUSTOMER_MANAGED_CMK`).
      description: "An object that contains:\n\n  * The encryption option for a repository\
        \ association. It is either owned by Amazon Web Services Key Management Service\
        \ (KMS) (`AWS_OWNED_CMK`) or customer managed (`CUSTOMER_MANAGED_CMK`).\n\n\
        \  * The ID of the Amazon Web Services KMS key that is associated with a repository\
        \ association."
    KMSKeyId:
      type: string
      pattern: ^[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 2048
    LineNumber:
      type: integer
    LinesOfCodeCount:
      type: integer
      format: int64
    ListCodeReviewsMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    ListCodeReviewsRequest:
      type: object
      properties:
        ProviderTypes:
          allOf:
          - $ref: '#/components/schemas/ProviderTypes'
          description: List of provider types for filtering that needs to be applied
            before displaying the result. For example, `providerTypes=[GitHub]` lists
            code reviews from GitHub.
        States:
          allOf:
          - $ref: '#/components/schemas/JobStates'
          description: "List of states for filtering that needs to be applied before\
            \ displaying the result. For example, `states=[Pending]` lists code reviews\
            \ in the Pending state.\n\nThe valid code review states are:\n\n  * `Completed`:\
            \ The code review is complete.\n\n  * `Pending`: The code review started\
            \ and has not completed or failed.\n\n  * `Failed`: The code review failed.\n\
            \n  * `Deleting`: The code review is being deleted."
        RepositoryNames:
          allOf:
          - $ref: '#/components/schemas/RepositoryNames'
          description: List of repository names for filtering that needs to be applied
            before displaying the result.
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The type of code reviews to list in the response.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListCodeReviewsMaxResults'
          description: The maximum number of results that are returned per call. The
            default is 100.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If `nextToken` is returned, there are more results available.
            The value of `nextToken` is a unique pagination token for each page. Make
            the call again using the returned token to retrieve the next page. Keep
            all other arguments unchanged.
      required:
      - Type
    ListCodeReviewsResponse:
      type: object
      properties:
        CodeReviewSummaries:
          allOf:
          - $ref: '#/components/schemas/CodeReviewSummaries'
          description: A list of code reviews that meet the criteria of the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Pagination token.
    ListRecommendationFeedbackRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If `nextToken` is returned, there are more results available.
            The value of `nextToken` is a unique pagination token for each page. Make
            the call again using the returned token to retrieve the next page. Keep
            all other arguments unchanged.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results that are returned per call. The
            default is 100.
        CodeReviewArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
            object.
        UserIds:
          allOf:
          - $ref: '#/components/schemas/UserIds'
          description: 'An Amazon Web Services user''s account ID or Amazon Resource
            Name (ARN). Use this ID to query the recommendation feedback for a code
            review from that user.


            The `UserId` is an IAM principal that can be specified as an Amazon Web
            Services account ID or an Amazon Resource Name (ARN). For more information,
            see [ Specifying a Principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying)
            in the _Amazon Web Services Identity and Access Management User Guide_.'
        RecommendationIds:
          allOf:
          - $ref: '#/components/schemas/RecommendationIds'
          description: Used to query the recommendation feedback for a given recommendation.
      required:
      - CodeReviewArn
    ListRecommendationFeedbackResponse:
      type: object
      properties:
        RecommendationFeedbackSummaries:
          allOf:
          - $ref: '#/components/schemas/RecommendationFeedbackSummaries'
          description: Recommendation feedback summaries corresponding to the code
            review ARN.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If `nextToken` is returned, there are more results available.
            The value of `nextToken` is a unique pagination token for each page. Make
            the call again using the returned token to retrieve the next page. Keep
            all other arguments unchanged.
    ListRecommendationsMaxResults:
      type: integer
      minimum: 1
      maximum: 300
    ListRecommendationsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Pagination token.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListRecommendationsMaxResults'
          description: The maximum number of results that are returned per call. The
            default is 100.
        CodeReviewArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
            object.
      required:
      - CodeReviewArn
    ListRecommendationsResponse:
      type: object
      properties:
        RecommendationSummaries:
          allOf:
          - $ref: '#/components/schemas/RecommendationSummaries'
          description: List of recommendations for the requested code review.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Pagination token.
    ListRepositoryAssociationsRequest:
      type: object
      properties:
        ProviderTypes:
          allOf:
          - $ref: '#/components/schemas/ProviderTypes'
          description: List of provider types to use as a filter.
        States:
          allOf:
          - $ref: '#/components/schemas/RepositoryAssociationStates'
          description: "List of repository association states to use as a filter.\n\
            \nThe valid repository association states are:\n\n  * **Associated** :\
            \ The repository association is complete.\n\n  * **Associating** : CodeGuru\
            \ Reviewer is:\n\n    * Setting up pull request notifications. This is\
            \ required for pull requests to trigger a CodeGuru Reviewer review.\n\n\
            If your repository `ProviderType` is `GitHub`, `GitHub Enterprise Server`,\
            \ or `Bitbucket`, CodeGuru Reviewer creates webhooks in your repository\
            \ to trigger CodeGuru Reviewer reviews. If you delete these webhooks,\
            \ reviews of code in your repository cannot be triggered.\n\n    * Setting\
            \ up source code access. This is required for CodeGuru Reviewer to securely\
            \ clone code in your repository.\n\n  * **Failed** : The repository failed\
            \ to associate or disassociate.\n\n  * **Disassociating** : CodeGuru Reviewer\
            \ is removing the repository's pull request notifications and source code\
            \ access.\n\n  * **Disassociated** : CodeGuru Reviewer successfully disassociated\
            \ the repository. You can create a new association with this repository\
            \ if you want to review source code in it later. You can control access\
            \ to code reviews created in anassociated repository with tags after it\
            \ has been disassociated. For more information, see [Using tags to control\
            \ access to associated repositories](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/auth-and-access-control-using-tags.html)\
            \ in the _Amazon CodeGuru Reviewer User Guide_."
        Names:
          allOf:
          - $ref: '#/components/schemas/Names'
          description: List of repository names to use as a filter.
        Owners:
          allOf:
          - $ref: '#/components/schemas/Owners'
          description: List of owners to use as a filter. For Amazon Web Services
            CodeCommit, it is the name of the CodeCommit account that was used to
            associate the repository. For other repository source providers, such
            as Bitbucket and GitHub Enterprise Server, this is name of the account
            that was used to associate the repository.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of repository association results returned
            by `ListRepositoryAssociations` in paginated output. When this parameter
            is used, `ListRepositoryAssociations` only returns `maxResults` results
            in a single page with a `nextToken` response element. The remaining results
            of the initial request can be seen by sending another `ListRepositoryAssociations`
            request with the returned `nextToken` value. This value can be between
            1 and 100\. If this parameter is not used, `ListRepositoryAssociations`
            returns up to 100 results and a `nextToken` value if applicable.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'The `nextToken` value returned from a previous paginated `ListRepositoryAssociations`
            request where `maxResults` was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results
            that returned the `nextToken` value.


            Treat this token as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.'
    ListRepositoryAssociationsResponse:
      type: object
      properties:
        RepositoryAssociationSummaries:
          allOf:
          - $ref: '#/components/schemas/RepositoryAssociationSummaries'
          description: A list of repository associations that meet the criteria of
            the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The `nextToken` value to include in a future `ListRecommendations`
            request. When the results of a `ListRecommendations` request exceed `maxResults`,
            this value can be used to retrieve the next page of results. This value
            is `null` when there are no more results to return.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AssociationArn'
          description: The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html)
            object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "An array of key-value pairs used to tag an associated repository.\
            \ A tag is a custom attribute label with two parts:\n\n  * A _tag key_\
            \ (for example, `CostCenter`, `Environment`, `Project`, or `Secret`).\
            \ Tag keys are case sensitive.\n\n  * An optional field known as a _tag\
            \ value_ (for example, `111122223333`, `Production`, or a team name).\
            \ Omitting the tag value is the same as using an empty string. Like tag\
            \ keys, tag values are case sensitive."
    LongDescription:
      type: string
      pattern: ^\S(.*\S)?$
      minLength: 1
      maxLength: 1000
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    Metrics:
      type: object
      properties:
        MeteredLinesOfCodeCount:
          allOf:
          - $ref: '#/components/schemas/LinesOfCodeCount'
          description: '`MeteredLinesOfCodeCount` is the number of lines of code in
            the repository where the code review happened. This does not include non-code
            lines such as comments and blank lines.'
        SuppressedLinesOfCodeCount:
          allOf:
          - $ref: '#/components/schemas/LinesOfCodeCount'
          description: '`SuppressedLinesOfCodeCount` is the number of lines of code
            in the repository where the code review happened that CodeGuru Reviewer
            did not analyze. The lines suppressed in the analysis is based on the
            `excludeFiles` variable in the `aws-codeguru-reviewer.yml` file. This
            number does not include non-code lines such as comments and blank lines.'
        FindingsCount:
          allOf:
          - $ref: '#/components/schemas/FindingsCount'
          description: Total number of recommendations found in the code review.
      description: Information about the statistics from the code review.
    MetricsSummary:
      type: object
      properties:
        MeteredLinesOfCodeCount:
          allOf:
          - $ref: '#/components/schemas/LinesOfCodeCount'
          description: Lines of code metered in the code review. For the initial code
            review pull request and all subsequent revisions, this includes all lines
            of code in the files added to the pull request. In subsequent revisions,
            for files that already existed in the pull request, this includes only
            the changed lines of code. In both cases, this does not include non-code
            lines such as comments and import statements. For example, if you submit
            a pull request containing 5 files, each with 500 lines of code, and in
            a subsequent revision you added a new file with 200 lines of code, and
            also modified a total of 25 lines across the initial 5 files, `MeteredLinesOfCodeCount`
            includes the first 5 files (5 * 500 = 2,500 lines), the new file (200
            lines) and the 25 changed lines of code for a total of 2,725 lines of
            code.
        SuppressedLinesOfCodeCount:
          allOf:
          - $ref: '#/components/schemas/LinesOfCodeCount'
          description: Lines of code suppressed in the code review based on the `excludeFiles`
            element in the `aws-codeguru-reviewer.yml` file. For full repository analyses,
            this number includes all lines of code in the files that are suppressed.
            For pull requests, this number only includes the _changed_ lines of code
            that are suppressed. In both cases, this number does not include non-code
            lines such as comments and import statements. For example, if you initiate
            a full repository analysis on a repository containing 5 files, each file
            with 100 lines of code, and 2 files are listed as excluded in the `aws-codeguru-reviewer.yml`
            file, then `SuppressedLinesOfCodeCount` returns 200 (2 * 100) as the total
            number of lines of code suppressed. However, if you submit a pull request
            for the same repository, then `SuppressedLinesOfCodeCount` only includes
            the lines in the 2 files that changed. If only 1 of the 2 files changed
            in the pull request, then `SuppressedLinesOfCodeCount` returns 100 (1
            * 100) as the total number of lines of code suppressed.
        FindingsCount:
          allOf:
          - $ref: '#/components/schemas/FindingsCount'
          description: Total number of recommendations found in the code review.
      description: Information about metrics summaries.
    Name:
      type: string
      pattern: ^\S[\w.-]*$
      minLength: 1
      maxLength: 100
    Names:
      type: array
      items:
        $ref: '#/components/schemas/Name'
    NextToken:
      type: string
      minLength: 1
      maxLength: 2048
    NotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The resource specified in the request was not found.
    Owner:
      type: string
      pattern: ^\S(.*\S)?$
      minLength: 1
      maxLength: 100
    Owners:
      type: array
      items:
        $ref: '#/components/schemas/Owner'
    ProviderType:
      type: string
      enum:
      - CodeCommit
      - GitHub
      - Bitbucket
      - GitHubEnterpriseServer
      - S3Bucket
    ProviderTypes:
      type: array
      items:
        $ref: '#/components/schemas/ProviderType'
    PullRequestId:
      type: string
      minLength: 1
      maxLength: 64
    PutRecommendationFeedbackRequest:
      type: object
      properties:
        CodeReviewArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
            object.
        RecommendationId:
          allOf:
          - $ref: '#/components/schemas/RecommendationId'
          description: The recommendation ID that can be used to track the provided
            recommendations and then to collect the feedback.
        Reactions:
          allOf:
          - $ref: '#/components/schemas/Reactions'
          description: List for storing reactions. Reactions are utf-8 text code for
            emojis. If you send an empty list it clears all your feedback.
      required:
      - CodeReviewArn
      - RecommendationId
      - Reactions
    PutRecommendationFeedbackResponse:
      type: object
      properties: {}
    Reaction:
      type: string
      enum:
      - ThumbsUp
      - ThumbsDown
    Reactions:
      type: array
      items:
        $ref: '#/components/schemas/Reaction'
    RecommendationCategory:
      type: string
      enum:
      - AWSBestPractices
      - AWSCloudFormationIssues
      - DuplicateCode
      - CodeMaintenanceIssues
      - ConcurrencyIssues
      - InputValidations
      - PythonBestPractices
      - JavaBestPractices
      - ResourceLeaks
      - SecurityIssues
      - CodeInconsistencies
    RecommendationFeedback:
      type: object
      properties:
        CodeReviewArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the [CodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html)
            object.
        RecommendationId:
          allOf:
          - $ref: '#/components/schemas/RecommendationId'
          description: The recommendation ID that can be used to track the provided
            recommendations. Later on it can be used to collect the feedback.
        Reactions:
          allOf:
          - $ref: '#/components/schemas/Reactions'
          description: List for storing reactions. Reactions are utf-8 text code for
            emojis. You can send an empty list to clear off all your feedback.
        UserId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: 'The ID of the user that made the API call.


            The `UserId` is an IAM principal that can be specified as an Amazon Web
            Services account ID or an Amazon Resource Name (ARN). For more information,
            see [ Specifying a Principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying)
            in the _Amazon Web Services Identity and Access Management User Guide_.'
        CreatedTimeStamp:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time at which the feedback was created.
        LastUpdatedTimeStamp:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time at which the feedback was last updated.
      description: Information about the recommendation feedback.
    RecommendationFeedbackSummaries:
      type: array
      items:
        $ref: '#/components/schemas/RecommendationFeedbackSummary'
    RecommendationFeedbackSummary:
      type: object
      properties:
        RecommendationId:
          allOf:
          - $ref: '#/components/schemas/RecommendationId'
          description: The recommendation ID that can be used to track the provided
            recommendations. Later on it can be used to collect the feedback.
        Reactions:
          allOf:
          - $ref: '#/components/schemas/Reactions'
          description: List for storing reactions. Reactions are utf-8 text code for
            emojis.
        UserId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: 'The ID of the user that gave the feedback.


            The `UserId` is an IAM principal that can be specified as an Amazon Web
            Services account ID or an Amazon Resource Name (ARN). For more information,
            see [ Specifying a Principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying)
            in the _Amazon Web Services Identity and Access Management User Guide_.'
      description: Information about recommendation feedback summaries.
    RecommendationId:
      type: string
      minLength: 1
      maxLength: 64
    RecommendationIds:
      type: array
      items:
        $ref: '#/components/schemas/RecommendationId'
    RecommendationSummaries:
      type: array
      items:
        $ref: '#/components/schemas/RecommendationSummary'
    RecommendationSummary:
      type: object
      properties:
        FilePath:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          description: Name of the file on which a recommendation is provided.
        RecommendationId:
          allOf:
          - $ref: '#/components/schemas/RecommendationId'
          description: The recommendation ID that can be used to track the provided
            recommendations. Later on it can be used to collect the feedback.
        StartLine:
          allOf:
          - $ref: '#/components/schemas/LineNumber'
          description: Start line from where the recommendation is applicable in the
            source commit or source branch.
        EndLine:
          allOf:
          - $ref: '#/components/schemas/LineNumber'
          description: Last line where the recommendation is applicable in the source
            commit or source branch. For a single line comment the start line and
            end line values are the same.
        Description:
          allOf:
          - $ref: '#/components/schemas/Text'
          description: A description of the recommendation generated by CodeGuru Reviewer
            for the lines of code between the start line and the end line.
        RecommendationCategory:
          allOf:
          - $ref: '#/components/schemas/RecommendationCategory'
          description: The type of a recommendation.
        RuleMetadata:
          allOf:
          - $ref: '#/components/schemas/RuleMetadata'
          description: Metadata about a rule. Rule metadata includes an ID, a name,
            a list of tags, and a short and long description. CodeGuru Reviewer uses
            rules to analyze code. A rule's recommendation is included in analysis
            results if code is detected that violates the rule.
        Severity:
          allOf:
          - $ref: '#/components/schemas/Severity'
          description: The severity of the issue in the code that generated this recommendation.
      description: Information about recommendations.
    Repository:
      type: object
      properties:
        CodeCommit:
          allOf:
          - $ref: '#/components/schemas/CodeCommitRepository'
          description: Information about an Amazon Web Services CodeCommit repository.
        Bitbucket:
          allOf:
          - $ref: '#/components/schemas/ThirdPartySourceRepository'
          description: Information about a Bitbucket repository.
        GitHubEnterpriseServer:
          allOf:
          - $ref: '#/components/schemas/ThirdPartySourceRepository'
          description: Information about a GitHub Enterprise Server repository.
        S3Bucket:
          $ref: '#/components/schemas/S3Repository'
      description: Information about an associated Amazon Web Services CodeCommit
        repository or an associated repository that is managed by Amazon Web Services
        CodeStar Connections (for example, Bitbucket). This `Repository` object is
        not used if your source code is in an associated GitHub repository.
    RepositoryAnalysis:
      type: object
      properties:
        RepositoryHead:
          allOf:
          - $ref: '#/components/schemas/RepositoryHeadSourceCodeType'
          description: A [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType)
            that specifies the tip of a branch in an associated repository.
        SourceCodeType:
          $ref: '#/components/schemas/SourceCodeType'
      description: A code review type that analyzes all code under a specified branch
        in an associated repository. The associated repository is specified using
        its ARN when you call [CreateCodeReview](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview).
    RepositoryAssociation:
      type: object
      properties:
        AssociationId:
          allOf:
          - $ref: '#/components/schemas/AssociationId'
          description: The ID of the repository association.
        AssociationArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) identifying the repository association.
        ConnectionArn:
          allOf:
          - $ref: '#/components/schemas/ConnectionArn'
          description: The Amazon Resource Name (ARN) of an Amazon Web Services CodeStar
            Connections connection. Its format is `arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id`.
            For more information, see [Connection](https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html)
            in the _Amazon Web Services CodeStar Connections API Reference_.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the repository.
        Owner:
          allOf:
          - $ref: '#/components/schemas/Owner'
          description: The owner of the repository. For an Amazon Web Services CodeCommit
            repository, this is the Amazon Web Services account ID of the account
            that owns the repository. For a GitHub, GitHub Enterprise Server, or Bitbucket
            repository, this is the username for the account that owns the repository.
            For an S3 repository, it can be the username or Amazon Web Services account
            ID.
        ProviderType:
          allOf:
          - $ref: '#/components/schemas/ProviderType'
          description: The provider type of the repository association.
        State:
          allOf:
          - $ref: '#/components/schemas/RepositoryAssociationState'
          description: "The state of the repository association.\n\nThe valid repository\
            \ association states are:\n\n  * **Associated** : The repository association\
            \ is complete.\n\n  * **Associating** : CodeGuru Reviewer is:\n\n    *\
            \ Setting up pull request notifications. This is required for pull requests\
            \ to trigger a CodeGuru Reviewer review.\n\nIf your repository `ProviderType`\
            \ is `GitHub`, `GitHub Enterprise Server`, or `Bitbucket`, CodeGuru Reviewer\
            \ creates webhooks in your repository to trigger CodeGuru Reviewer reviews.\
            \ If you delete these webhooks, reviews of code in your repository cannot\
            \ be triggered.\n\n    * Setting up source code access. This is required\
            \ for CodeGuru Reviewer to securely clone code in your repository.\n\n\
            \  * **Failed** : The repository failed to associate or disassociate.\n\
            \n  * **Disassociating** : CodeGuru Reviewer is removing the repository's\
            \ pull request notifications and source code access.\n\n  * **Disassociated**\
            \ : CodeGuru Reviewer successfully disassociated the repository. You can\
            \ create a new association with this repository if you want to review\
            \ source code in it later. You can control access to code reviews created\
            \ in anassociated repository with tags after it has been disassociated.\
            \ For more information, see [Using tags to control access to associated\
            \ repositories](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/auth-and-access-control-using-tags.html)\
            \ in the _Amazon CodeGuru Reviewer User Guide_."
        StateReason:
          allOf:
          - $ref: '#/components/schemas/StateReason'
          description: A description of why the repository association is in the current
            state.
        LastUpdatedTimeStamp:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time, in milliseconds since the epoch, when the repository
            association was last updated.
        CreatedTimeStamp:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time, in milliseconds since the epoch, when the repository
            association was created.
        KMSKeyDetails:
          allOf:
          - $ref: '#/components/schemas/KMSKeyDetails'
          description: "A `KMSKeyDetails` object that contains:\n\n  * The encryption\
            \ option for this repository association. It is either owned by Amazon\
            \ Web Services Key Management Service (KMS) (`AWS_OWNED_CMK`) or customer\
            \ managed (`CUSTOMER_MANAGED_CMK`).\n\n  * The ID of the Amazon Web Services\
            \ KMS key that is associated with this repository association."
        S3RepositoryDetails:
          $ref: '#/components/schemas/S3RepositoryDetails'
      description: Information about a repository association. The [DescribeRepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_DescribeRepositoryAssociation.html)
        operation returns a `RepositoryAssociation` object.
    RepositoryAssociationState:
      type: string
      enum:
      - Associated
      - Associating
      - Failed
      - Disassociating
      - Disassociated
    RepositoryAssociationStates:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryAssociationState'
    RepositoryAssociationSummaries:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryAssociationSummary'
    RepositoryAssociationSummary:
      type: object
      properties:
        AssociationArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html)
            object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
        ConnectionArn:
          allOf:
          - $ref: '#/components/schemas/ConnectionArn'
          description: The Amazon Resource Name (ARN) of an Amazon Web Services CodeStar
            Connections connection. Its format is `arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id`.
            For more information, see [Connection](https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html)
            in the _Amazon Web Services CodeStar Connections API Reference_.
        LastUpdatedTimeStamp:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time, in milliseconds since the epoch, since the repository
            association was last updated.
        AssociationId:
          allOf:
          - $ref: '#/components/schemas/AssociationId'
          description: The repository association ID.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the repository association.
        Owner:
          allOf:
          - $ref: '#/components/schemas/Owner'
          description: The owner of the repository. For an Amazon Web Services CodeCommit
            repository, this is the Amazon Web Services account ID of the account
            that owns the repository. For a GitHub, GitHub Enterprise Server, or Bitbucket
            repository, this is the username for the account that owns the repository.
            For an S3 repository, it can be the username or Amazon Web Services account
            ID.
        ProviderType:
          allOf:
          - $ref: '#/components/schemas/ProviderType'
          description: The provider type of the repository association.
        State:
          allOf:
          - $ref: '#/components/schemas/RepositoryAssociationState'
          description: "The state of the repository association.\n\nThe valid repository\
            \ association states are:\n\n  * **Associated** : The repository association\
            \ is complete.\n\n  * **Associating** : CodeGuru Reviewer is:\n\n    *\
            \ Setting up pull request notifications. This is required for pull requests\
            \ to trigger a CodeGuru Reviewer review.\n\nIf your repository `ProviderType`\
            \ is `GitHub`, `GitHub Enterprise Server`, or `Bitbucket`, CodeGuru Reviewer\
            \ creates webhooks in your repository to trigger CodeGuru Reviewer reviews.\
            \ If you delete these webhooks, reviews of code in your repository cannot\
            \ be triggered.\n\n    * Setting up source code access. This is required\
            \ for CodeGuru Reviewer to securely clone code in your repository.\n\n\
            \  * **Failed** : The repository failed to associate or disassociate.\n\
            \n  * **Disassociating** : CodeGuru Reviewer is removing the repository's\
            \ pull request notifications and source code access.\n\n  * **Disassociated**\
            \ : CodeGuru Reviewer successfully disassociated the repository. You can\
            \ create a new association with this repository if you want to review\
            \ source code in it later. You can control access to code reviews created\
            \ in anassociated repository with tags after it has been disassociated.\
            \ For more information, see [Using tags to control access to associated\
            \ repositories](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/auth-and-access-control-using-tags.html)\
            \ in the _Amazon CodeGuru Reviewer User Guide_."
      description: Summary information about a repository association. The [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html)
        operation returns a list of `RepositoryAssociationSummary` objects.
    RepositoryHeadSourceCodeType:
      type: object
      properties:
        BranchName:
          allOf:
          - $ref: '#/components/schemas/BranchName'
          description: The name of the branch in an associated repository. The `RepositoryHeadSourceCodeType`
            specifies the tip of this branch.
      required:
      - BranchName
      description: A [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType)
        that specifies the tip of a branch in an associated repository.
    RepositoryNames:
      type: array
      items:
        $ref: '#/components/schemas/Name'
    RequestId:
      type: string
      minLength: 1
      maxLength: 64
    RequestMetadata:
      type: object
      properties:
        RequestId:
          allOf:
          - $ref: '#/components/schemas/RequestId'
          description: The ID of the request. This is required for a pull request
            code review.
        Requester:
          allOf:
          - $ref: '#/components/schemas/Requester'
          description: An identifier, such as a name or account ID, that is associated
            with the requester. The `Requester` is used to capture the `author/actor`
            name of the event request.
        EventInfo:
          allOf:
          - $ref: '#/components/schemas/EventInfo'
          description: Information about the event associated with a code review.
        VendorName:
          allOf:
          - $ref: '#/components/schemas/VendorName'
          description: The name of the repository vendor used to upload code to an
            S3 bucket for a CI/CD code review. For example, if code and artifacts
            are uploaded to an S3 bucket for a CI/CD code review by GitHub scripts
            from a GitHub repository, then the repository association's `ProviderType`
            is `S3Bucket` and the CI/CD repository vendor name is GitHub. For more
            information, see the definition for `ProviderType` in [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html).
      description: Metadata that is associated with a code review. This applies to
        both pull request and repository analysis code reviews.
    Requester:
      type: string
      pattern: ^\S(.*\S)?$
      minLength: 1
      maxLength: 100
    ResourceNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The resource specified in the request was not found.
    RuleId:
      type: string
      pattern: ^\S+\/[a-zA-Z0-9-]+@v\d+\.\d+$
      minLength: 1
      maxLength: 64
    RuleMetadata:
      type: object
      properties:
        RuleId:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the rule.
        RuleName:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the rule.
        ShortDescription:
          allOf:
          - $ref: '#/components/schemas/ShortDescription'
          description: A short description of the rule.
        LongDescription:
          allOf:
          - $ref: '#/components/schemas/LongDescription'
          description: A long description of the rule.
        RuleTags:
          allOf:
          - $ref: '#/components/schemas/RuleTags'
          description: Tags that are associated with the rule.
      description: Metadata about a rule. Rule metadata includes an ID, a name, a
        list of tags, and a short and long description. CodeGuru Reviewer uses rules
        to analyze code. A rule's recommendation is included in analysis results if
        code is detected that violates the rule.
    RuleName:
      type: string
      pattern: ^\S(.*\S)?$
      minLength: 1
      maxLength: 100
    RuleTag:
      type: string
      pattern: ^\S(.*\S)?$
      minLength: 1
      maxLength: 50
    RuleTags:
      type: array
      items:
        $ref: '#/components/schemas/RuleTag'
    S3BucketName:
      type: string
      pattern: ^\S(.*\S)?$
      minLength: 3
      maxLength: 63
    S3BucketRepository:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the repository when the `ProviderType` is `S3Bucket`.
        Details:
          allOf:
          - $ref: '#/components/schemas/S3RepositoryDetails'
          description: An `S3RepositoryDetails` object that specifies the name of
            an S3 bucket and a `CodeArtifacts` object. The `CodeArtifacts` object
            includes the S3 object keys for a source code .zip file and for a build
            artifacts .zip file.
      required:
      - Name
      description: Information about an associated repository in an S3 bucket. The
        associated repository contains a source code .zip file and a build artifacts
        .zip file that contains .jar or .class files.
    S3Repository:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the repository in the S3 bucket.
        BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The name of the S3 bucket used for associating a new S3 repository.
            It must begin with `codeguru-reviewer-`.
      required:
      - Name
      - BucketName
      description: Information about a repository in an S3 bucket.
    S3RepositoryDetails:
      type: object
      properties:
        BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The name of the S3 bucket used for associating a new S3 repository.
            It must begin with `codeguru-reviewer-`.
        CodeArtifacts:
          allOf:
          - $ref: '#/components/schemas/CodeArtifacts'
          description: A `CodeArtifacts` object. The `CodeArtifacts` object includes
            the S3 object key for a source code .zip file and for a build artifacts
            .zip file that contains .jar or .class files.
      description: Specifies the name of an S3 bucket and a `CodeArtifacts` object
        that contains the S3 object keys for a source code .zip file and for a build
        artifacts .zip file that contains .jar or .class files.
    Severity:
      type: string
      enum:
      - Info
      - Low
      - Medium
      - High
      - Critical
    ShortDescription:
      type: string
      pattern: ^\S(.*\S)?$
      minLength: 1
      maxLength: 200
    SourceCodeArtifactsObjectKey:
      type: string
      pattern: ^\S(.*\S)?$
      minLength: 1
      maxLength: 1024
    SourceCodeType:
      type: object
      properties:
        CommitDiff:
          allOf:
          - $ref: '#/components/schemas/CommitDiffSourceCodeType'
          description: A [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType)
            that specifies a commit diff created by a pull request on an associated
            repository.
        RepositoryHead:
          $ref: '#/components/schemas/RepositoryHeadSourceCodeType'
        BranchDiff:
          allOf:
          - $ref: '#/components/schemas/BranchDiffSourceCodeType'
          description: A type of [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType)
            that specifies a source branch name and a destination branch name in an
            associated repository.
        S3BucketRepository:
          allOf:
          - $ref: '#/components/schemas/S3BucketRepository'
          description: Information about an associated repository in an S3 bucket
            that includes its name and an `S3RepositoryDetails` object. The `S3RepositoryDetails`
            object includes the name of an S3 bucket, an S3 key for a source code
            .zip file, and an S3 key for a build artifacts .zip file. `S3BucketRepository`
            is required in [SourceCodeType](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType)
            for `S3BucketRepository` based code reviews.
        RequestMetadata:
          allOf:
          - $ref: '#/components/schemas/RequestMetadata'
          description: Metadata that is associated with a code review. This applies
            to any type of code review supported by CodeGuru Reviewer. The `RequestMetadaa`
            field captures any event metadata. For example, it might capture metadata
            associated with an event trigger, such as a push or a pull request.
      description: Specifies the source code that is analyzed in a code review.
    StateReason:
      type: string
      minLength: 0
      maxLength: 256
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AssociationArn'
          description: The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html)
            object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "An array of key-value pairs used to tag an associated repository.\
            \ A tag is a custom attribute label with two parts:\n\n  * A _tag key_\
            \ (for example, `CostCenter`, `Environment`, `Project`, or `Secret`).\
            \ Tag keys are case sensitive.\n\n  * An optional field known as a _tag\
            \ value_ (for example, `111122223333`, `Production`, or a team name).\
            \ Omitting the tag value is the same as using an empty string. Like tag\
            \ keys, tag values are case sensitive."
      required:
      - resourceArn
      - Tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Text:
      type: string
      minLength: 1
      maxLength: 5000
    ThirdPartySourceRepository:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the third party source repository.
        ConnectionArn:
          allOf:
          - $ref: '#/components/schemas/ConnectionArn'
          description: The Amazon Resource Name (ARN) of an Amazon Web Services CodeStar
            Connections connection. Its format is `arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id`.
            For more information, see [Connection](https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html)
            in the _Amazon Web Services CodeStar Connections API Reference_.
        Owner:
          allOf:
          - $ref: '#/components/schemas/Owner'
          description: The owner of the repository. For a GitHub, GitHub Enterprise,
            or Bitbucket repository, this is the username for the account that owns
            the repository. For an S3 repository, this can be the username or Amazon
            Web Services account ID
      required:
      - Name
      - ConnectionArn
      - Owner
      description: Information about a third-party source repository connected to
        CodeGuru Reviewer.
    ThrottlingException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The request was denied due to request throttling.
    TimeStamp:
      type: string
      format: date-time
    Type:
      type: string
      enum:
      - PullRequest
      - RepositoryAnalysis
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AssociationArn'
          description: The Amazon Resource Name (ARN) of the [RepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html)
            object. You can retrieve this ARN by calling [ListRepositoryAssociations](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html).
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of the keys for each tag you want to remove from an
            associated repository.
      required:
      - resourceArn
      - TagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UserId:
      type: string
      minLength: 1
      maxLength: 256
    UserIds:
      type: array
      items:
        $ref: '#/components/schemas/UserId'
    ValidationException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The input fails to satisfy the specified constraints.
    VendorName:
      type: string
      enum:
      - GitHub
      - GitLab
      - NativeS3
