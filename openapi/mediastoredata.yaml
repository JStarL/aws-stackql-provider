openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: mediastore_data
  x-aws-serviceName: mediastoredata
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2017-09-01'
  title: AWS Elemental MediaStore Data Plane
  description: |-
    An AWS Elemental MediaStore asset is an object, similar to an object in the Amazon S3 service. Objects are the fundamental entities that are stored in AWS Elemental MediaStore.
servers:
- description: The AWS Elemental MediaStore Data Plane regional endpoint
  url: https://data.mediastore.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /{Path+}:
    delete:
      operationId: DeleteObject
      description: |-
        Deletes an object at the specified path.
      parameters:
      - name: Path
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PathNaming'
      responses:
        '200': {}
        '404':
          description: |-
            Could not perform an operation on an object that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundException'
        '400':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    head:
      operationId: DescribeObject
      description: |-
        Gets the headers for an object at the specified path.
      parameters:
      - name: Path
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PathNaming'
      responses:
        '200': {}
        '404':
          description: |-
            Could not perform an operation on an object that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundException'
        '400':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    get:
      operationId: GetObject
      description: |-
        Downloads the object at the specified path. If the object’s upload availability is set to `streaming`, AWS Elemental MediaStore downloads the object even if it’s still uploading the object.
      parameters:
      - name: Path
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PathNaming'
      - name: Range
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/RangePattern'
      responses:
        '200': {}
        '404':
          description: |-
            Could not perform an operation on an object that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectNotFoundException'
        '400':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '416':
          description: |-
            The requested content range is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestedRangeNotSatisfiableException'
    put:
      operationId: PutObject
      description: |-
        Uploads an object to the specified path. Object sizes are limited to 25 MB for standard upload availability and 10 MB for streaming upload availability.
      parameters:
      - name: Path
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PathNaming'
      - name: Content-Type
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ContentType'
      - name: Cache-Control
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/StringPrimitive'
      - name: x-amz-storage-class
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/StorageClass'
      - name: x-amz-upload-availability
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/UploadAvailability'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Body:
                  $ref: '#/components/schemas/PayloadBlob'
      responses:
        '200': {}
        '404':
          description: |-
            The specified container was not found for the specified account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '400':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /:
    get:
      operationId: ListItems
      description: |-
        Provides a list of metadata entries about folders and objects in the specified folder.
      parameters:
      - name: Path
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListPathNaming'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListLimit'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '404':
          description: |-
            The specified container was not found for the specified account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
        '400':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
components:
  schemas:
    ContainerNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The specified container was not found for the specified account.
    ContentRangePattern:
      type: string
      pattern: ^bytes=\d+\-\d+/\d+$
    ContentType:
      type: string
      pattern: ^[\w\-\/\.\+]{1,255}$
    DeleteObjectRequest:
      type: object
      properties:
        Path:
          allOf:
          - $ref: '#/components/schemas/PathNaming'
          description: 'The path (including the file name) where the object is stored
            in the container. Format: //'
      required:
      - Path
    DeleteObjectResponse:
      type: object
      properties: {}
    DescribeObjectRequest:
      type: object
      properties:
        Path:
          allOf:
          - $ref: '#/components/schemas/PathNaming'
          description: 'The path (including the file name) where the object is stored
            in the container. Format: //'
      required:
      - Path
    DescribeObjectResponse:
      type: object
      properties:
        ETag:
          allOf:
          - $ref: '#/components/schemas/ETag'
          description: The ETag that represents a unique instance of the object.
        ContentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          description: The content type of the object.
        ContentLength:
          allOf:
          - $ref: '#/components/schemas/NonNegativeLong'
          description: The length of the object in bytes.
        CacheControl:
          allOf:
          - $ref: '#/components/schemas/StringPrimitive'
          description: 'An optional `CacheControl` header that allows the caller to
            control the object''s cache behavior. Headers can be passed in as specified
            in the HTTP at <https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9>.


            Headers with a custom user-defined value are also accepted.'
        LastModified:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The date and time that the object was last modified.
    ETag:
      type: string
      pattern: ^[0-9A-Fa-f]+$
      minLength: 1
      maxLength: 64
    ErrorMessage:
      type: string
      pattern: ^[ \w:\.\?-]+$
      minLength: 1
      maxLength: 255
    GetObjectRequest:
      type: object
      properties:
        Path:
          allOf:
          - $ref: '#/components/schemas/PathNaming'
          description: 'The path (including the file name) where the object is stored
            in the container. Format: //


            For example, to upload the file `mlaw.avi` to the folder path `premium\canada`
            in the container `movies`, enter the path `premium/canada/mlaw.avi`.


            Do not include the container name in this path.


            If the path includes any folders that don''t exist yet, the service creates
            them. For example, suppose you have an existing `premium/usa` subfolder.
            If you specify `premium/canada`, the service creates a `canada` subfolder
            in the `premium` folder. You then have two subfolders, `usa` and `canada`,
            in the `premium` folder.


            There is no correlation between the path to the source and the path (folders)
            in the container in AWS Elemental MediaStore.


            For more information about folders and how they exist in a container,
            see the [AWS Elemental MediaStore User Guide](http://docs.aws.amazon.com/mediastore/latest/ug/).


            The file name is the name that is assigned to the file that you upload.
            The file can have the same name inside and outside of AWS Elemental MediaStore,
            or it can have the same name. The file name can include or omit an extension.'
        Range:
          allOf:
          - $ref: '#/components/schemas/RangePattern'
          description: The range bytes of an object to retrieve. For more information
            about the `Range` header, see <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35>.
            AWS Elemental MediaStore ignores this header for partially uploaded objects
            that have streaming upload availability.
      required:
      - Path
    GetObjectResponse:
      type: object
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/PayloadBlob'
          description: The bytes of the object.
        CacheControl:
          allOf:
          - $ref: '#/components/schemas/StringPrimitive'
          description: 'An optional `CacheControl` header that allows the caller to
            control the object''s cache behavior. Headers can be passed in as specified
            in the HTTP spec at <https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9>.


            Headers with a custom user-defined value are also accepted.'
        ContentRange:
          allOf:
          - $ref: '#/components/schemas/ContentRangePattern'
          description: The range of bytes to retrieve.
        ContentLength:
          allOf:
          - $ref: '#/components/schemas/NonNegativeLong'
          description: The length of the object in bytes.
        ContentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          description: The content type of the object.
        ETag:
          allOf:
          - $ref: '#/components/schemas/ETag'
          description: The ETag that represents a unique instance of the object.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The date and time that the object was last modified.
        StatusCode:
          allOf:
          - $ref: '#/components/schemas/statusCode'
          description: The HTML status code of the request. Status codes ranging from
            200 to 299 indicate success. All other status codes indicate the type
            of error that occurred.
      required:
      - StatusCode
    InternalServerError:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The service is temporarily unavailable.
    Item:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/ItemName'
          description: The name of the item.
        Type:
          allOf:
          - $ref: '#/components/schemas/ItemType'
          description: The item type (folder or object).
        ETag:
          allOf:
          - $ref: '#/components/schemas/ETag'
          description: The ETag that represents a unique instance of the item.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The date and time that the item was last modified.
        ContentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          description: The content type of the item.
        ContentLength:
          allOf:
          - $ref: '#/components/schemas/NonNegativeLong'
          description: The length of the item in bytes.
      description: A metadata entry for a folder or object.
    ItemList:
      type: array
      items:
        $ref: '#/components/schemas/Item'
    ItemName:
      type: string
      pattern: ^[A-Za-z0-9_\.\-\~]+$
    ItemType:
      type: string
      enum:
      - OBJECT
      - FOLDER
    ListItemsRequest:
      type: object
      properties:
        Path:
          allOf:
          - $ref: '#/components/schemas/ListPathNaming'
          description: 'The path in the container from which to retrieve items. Format:
            //'
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListLimit'
          description: 'The maximum number of results to return per API request. For
            example, you submit a `ListItems` request with `MaxResults` set at 500.
            Although 2,000 items match your request, the service returns no more than
            the first 500 items. (The service also returns a `NextToken` value that
            you can use to fetch the next batch of results.) The service might return
            fewer results than the `MaxResults` value.


            If `MaxResults` is not included in the request, the service defaults to
            pagination with a maximum of 1,000 results per page.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'The token that identifies which batch of results that you
            want to see. For example, you submit a `ListItems` request with `MaxResults`
            set at 500. The service returns the first batch of results (up to 500)
            and a `NextToken` value. To see the next batch of results, you can submit
            the `ListItems` request a second time and specify the `NextToken` value.


            Tokens expire after 15 minutes.'
    ListItemsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/ItemList'
          description: The metadata entries for the folders and objects at the requested
            path.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token that can be used in a request to view the next set
            of results. For example, you submit a `ListItems` request that matches
            2,000 items with `MaxResults` set at 500. The service returns the first
            batch of results (up to 500) and a `NextToken` value that can be used
            to fetch the next batch of results.
    ListLimit:
      type: integer
      minimum: 1
      maximum: 1000
    ListPathNaming:
      type: string
      pattern: ^/?(?:[A-Za-z0-9_\.\-\~]+/){0,10}(?:[A-Za-z0-9_\.\-\~]+)?/?$
      minLength: 0
      maxLength: 900
    NonNegativeLong:
      type: integer
      format: int64
      minimum: 0
    ObjectNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: Could not perform an operation on an object that does not exist.
    PaginationToken:
      type: string
    PathNaming:
      type: string
      pattern: ^(?:[A-Za-z0-9_\.\-\~]+/){0,10}[A-Za-z0-9_\.\-\~]+$
      minLength: 1
      maxLength: 900
    PayloadBlob:
      type: string
      format: byte
    PutObjectRequest:
      type: object
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/PayloadBlob'
          description: The bytes to be stored.
        Path:
          allOf:
          - $ref: '#/components/schemas/PathNaming'
          description: 'The path (including the file name) where the object is stored
            in the container. Format: //


            For example, to upload the file `mlaw.avi` to the folder path `premium\canada`
            in the container `movies`, enter the path `premium/canada/mlaw.avi`.


            Do not include the container name in this path.


            If the path includes any folders that don''t exist yet, the service creates
            them. For example, suppose you have an existing `premium/usa` subfolder.
            If you specify `premium/canada`, the service creates a `canada` subfolder
            in the `premium` folder. You then have two subfolders, `usa` and `canada`,
            in the `premium` folder.


            There is no correlation between the path to the source and the path (folders)
            in the container in AWS Elemental MediaStore.


            For more information about folders and how they exist in a container,
            see the [AWS Elemental MediaStore User Guide](http://docs.aws.amazon.com/mediastore/latest/ug/).


            The file name is the name that is assigned to the file that you upload.
            The file can have the same name inside and outside of AWS Elemental MediaStore,
            or it can have the same name. The file name can include or omit an extension.'
        ContentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          description: The content type of the object.
        CacheControl:
          allOf:
          - $ref: '#/components/schemas/StringPrimitive'
          description: 'An optional `CacheControl` header that allows the caller to
            control the object''s cache behavior. Headers can be passed in as specified
            in the HTTP at <https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9>.


            Headers with a custom user-defined value are also accepted.'
        StorageClass:
          allOf:
          - $ref: '#/components/schemas/StorageClass'
          description: Indicates the storage class of a `Put` request. Defaults to
            high-performance temporal storage class, and objects are persisted into
            durable storage shortly after being received.
        UploadAvailability:
          allOf:
          - $ref: '#/components/schemas/UploadAvailability'
          description: 'Indicates the availability of an object while it is still
            uploading. If the value is set to `streaming`, the object is available
            for downloading after some initial buffering but before the object is
            uploaded completely. If the value is set to `standard`, the object is
            available for downloading only when it is uploaded completely. The default
            value for this header is `standard`.


            To use this header, you must also set the HTTP `Transfer-Encoding` header
            to `chunked`.'
      required:
      - Body
      - Path
    PutObjectResponse:
      type: object
      properties:
        ContentSHA256:
          allOf:
          - $ref: '#/components/schemas/SHA256Hash'
          description: The SHA256 digest of the object that is persisted.
        ETag:
          allOf:
          - $ref: '#/components/schemas/ETag'
          description: Unique identifier of the object in the container.
        StorageClass:
          allOf:
          - $ref: '#/components/schemas/StorageClass'
          description: The storage class where the object was persisted. The class
            should be “Temporal”.
    RangePattern:
      type: string
      pattern: ^bytes=(?:\d+\-\d*|\d*\-\d+)$
    RequestedRangeNotSatisfiableException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The requested content range is not valid.
    SHA256Hash:
      type: string
      pattern: ^[0-9A-Fa-f]{64}$
      minLength: 64
      maxLength: 64
    StorageClass:
      type: string
      enum:
      - TEMPORAL
    StringPrimitive:
      type: string
    TimeStamp:
      type: string
      format: date-time
    UploadAvailability:
      type: string
      enum:
      - STANDARD
      - STREAMING
    statusCode:
      type: integer
      default: 0
