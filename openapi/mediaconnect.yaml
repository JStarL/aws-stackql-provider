openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: mediaconnect
  x-aws-serviceName: mediaconnect
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-11-14'
  title: AWS MediaConnect
  description: |-
    Welcome to the Elemental MediaConnect API reference.

    MediaConnect is a service that lets you ingest live video content into the cloud and distribute it to destinations all over the world, both inside and outside the Amazon Web Services cloud. This API reference provides descriptions, syntax, and usage examples for each of the actions and data types that are supported by MediaConnect.

    Use the following links to get started with the MediaConnect API:

      * [Actions](https://docs.aws.amazon.com/mediaconnect/latest/api/API_Operations.html): An alphabetical list of all MediaConnect API operations.

      * [Data types](https://docs.aws.amazon.com/mediaconnect/latest/api/API_Types.html): An alphabetical list of all MediaConnect data types.

      * [Common parameters](https://docs.aws.amazon.com/mediaconnect/latest/api/CommonParameters.html): Parameters that all operations can use.

      * [Common errors](https://docs.aws.amazon.com/mediaconnect/latest/api/CommonErrors.html): Client and server errors that all operations can return.
servers:
- description: The AWS MediaConnect regional endpoint
  url: https://mediaconnect.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /v1/bridges/{BridgeArn}/outputs:
    post:
      operationId: AddBridgeOutputs
      description: |-
        Adds outputs to an existing bridge.
      parameters:
      - name: BridgeArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BridgeArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Outputs:
                  $ref: '#/components/schemas/__listOfAddBridgeOutputRequest'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/bridges/{BridgeArn}/sources:
    post:
      operationId: AddBridgeSources
      description: |-
        Adds sources to an existing bridge.
      parameters:
      - name: BridgeArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BridgeArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Sources:
                  $ref: '#/components/schemas/__listOfAddBridgeSourceRequest'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/mediaStreams:
    post:
      operationId: AddFlowMediaStreams
      description: |-
        Adds media streams to an existing flow. After you add a media stream to a flow, you can associate it with a source and/or an output that uses the ST 2110 JPEG XS or CDI protocol.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                MediaStreams:
                  $ref: '#/components/schemas/__listOfAddMediaStreamRequest'
      responses:
        '201': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/outputs:
    post:
      operationId: AddFlowOutputs
      description: |-
        Adds outputs to an existing flow. You can create up to 50 outputs per flow.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Outputs:
                  $ref: '#/components/schemas/__listOfAddOutputRequest'
      responses:
        '201': {}
        '420':
          description: |-
            Exception raised by Elemental MediaConnect when adding the flow output. See the error message for the operation for more information on the cause of this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddFlowOutputs420Exception'
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/source:
    post:
      operationId: AddFlowSources
      description: |-
        Adds sources to a flow.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Sources:
                  $ref: '#/components/schemas/__listOfSetSourceRequest'
      responses:
        '201': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/vpcInterfaces:
    post:
      operationId: AddFlowVpcInterfaces
      description: |-
        Adds VPC interfaces to a flow.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                VpcInterfaces:
                  $ref: '#/components/schemas/__listOfVpcInterfaceRequest'
      responses:
        '201': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/bridges:
    post:
      operationId: CreateBridge
      description: |-
        Creates a new bridge. The request must include one source.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                EgressGatewayBridge:
                  $ref: '#/components/schemas/AddEgressGatewayBridgeRequest'
                IngressGatewayBridge:
                  $ref: '#/components/schemas/AddIngressGatewayBridgeRequest'
                Name:
                  $ref: '#/components/schemas/String'
                Outputs:
                  $ref: '#/components/schemas/__listOfAddBridgeOutputRequest'
                PlacementArn:
                  $ref: '#/components/schemas/String'
                SourceFailoverConfig:
                  $ref: '#/components/schemas/FailoverConfig'
                Sources:
                  $ref: '#/components/schemas/__listOfAddBridgeSourceRequest'
      responses:
        '201': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '420':
          description: |-
            Exception raised by Elemental MediaConnect when creating the bridge. See the error message for the operation for more information on the cause of this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBridge420Exception'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListBridges
      description: |-
        Displays a list of bridges that are associated with this account and an optionally specified Amazon Resource Name (ARN). This request returns a paginated result.
      parameters:
      - name: filterArn
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows:
    post:
      operationId: CreateFlow
      description: |-
        Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AvailabilityZone:
                  $ref: '#/components/schemas/String'
                Entitlements:
                  $ref: '#/components/schemas/__listOfGrantEntitlementRequest'
                MediaStreams:
                  $ref: '#/components/schemas/__listOfAddMediaStreamRequest'
                Name:
                  $ref: '#/components/schemas/String'
                Outputs:
                  $ref: '#/components/schemas/__listOfAddOutputRequest'
                Source:
                  $ref: '#/components/schemas/SetSourceRequest'
                SourceFailoverConfig:
                  $ref: '#/components/schemas/FailoverConfig'
                Sources:
                  $ref: '#/components/schemas/__listOfSetSourceRequest'
                VpcInterfaces:
                  $ref: '#/components/schemas/__listOfVpcInterfaceRequest'
                Maintenance:
                  $ref: '#/components/schemas/AddMaintenance'
                SourceMonitoringConfig:
                  $ref: '#/components/schemas/MonitoringConfig'
                FlowSize:
                  $ref: '#/components/schemas/FlowSize'
                NdiConfig:
                  $ref: '#/components/schemas/NdiConfig'
      responses:
        '201': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '420':
          description: |-
            Exception raised by Elemental MediaConnect when creating the flow. See the error message for the operation for more information on the cause of this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFlow420Exception'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListFlows
      description: |-
        Displays a list of flows that are associated with this account. This request returns a paginated result.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/gateways:
    post:
      operationId: CreateGateway
      description: |-
        Creates a new gateway. The request must include at least one network (up to four).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                EgressCidrBlocks:
                  $ref: '#/components/schemas/__listOfString'
                Name:
                  $ref: '#/components/schemas/String'
                Networks:
                  $ref: '#/components/schemas/__listOfGatewayNetwork'
      responses:
        '201': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '420':
          description: |-
            Exception raised by Elemental MediaConnect when creating the gateway. See the error message for the operation for more information on the cause of this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGateway420Exception'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListGateways
      description: |-
        Displays a list of gateways that are associated with this account. This request returns a paginated result.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/bridges/{BridgeArn}:
    delete:
      operationId: DeleteBridge
      description: |-
        Deletes a bridge. Before you can delete a bridge, you must stop the bridge.
      parameters:
      - name: BridgeArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BridgeArn'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeBridge
      description: |-
        Displays the details of a bridge.
      parameters:
      - name: BridgeArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BridgeArn'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateBridge
      description: |-
        Updates the bridge.
      parameters:
      - name: BridgeArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BridgeArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                EgressGatewayBridge:
                  $ref: '#/components/schemas/UpdateEgressGatewayBridgeRequest'
                IngressGatewayBridge:
                  $ref: '#/components/schemas/UpdateIngressGatewayBridgeRequest'
                SourceFailoverConfig:
                  $ref: '#/components/schemas/UpdateFailoverConfig'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}:
    delete:
      operationId: DeleteFlow
      description: |-
        Deletes a flow. Before you can delete a flow, you must stop the flow.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeFlow
      description: |-
        Displays the details of a flow. The response includes the flow Amazon Resource Name (ARN), name, and Availability Zone, as well as details about the source, outputs, and entitlements.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateFlow
      description: |-
        Updates an existing flow.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                SourceFailoverConfig:
                  $ref: '#/components/schemas/UpdateFailoverConfig'
                Maintenance:
                  $ref: '#/components/schemas/UpdateMaintenance'
                SourceMonitoringConfig:
                  $ref: '#/components/schemas/MonitoringConfig'
                NdiConfig:
                  $ref: '#/components/schemas/NdiConfig'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/gateways/{GatewayArn}:
    delete:
      operationId: DeleteGateway
      description: |-
        Deletes a gateway. Before you can delete a gateway, you must deregister its instances and delete its bridges.
      parameters:
      - name: GatewayArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GatewayArn'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeGateway
      description: |-
        Displays the details of a gateway. The response includes the gateway Amazon Resource Name (ARN), name, and CIDR blocks, as well as details about the networks.
      parameters:
      - name: GatewayArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GatewayArn'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/gateway-instances/{GatewayInstanceArn}:
    delete:
      operationId: DeregisterGatewayInstance
      description: |-
        Deregisters an instance. Before you deregister an instance, all bridges running on the instance must be stopped. If you want to deregister an instance without stopping the bridges, you must use the --force option.
      parameters:
      - name: force
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      - name: GatewayInstanceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GatewayInstanceArn'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeGatewayInstance
      description: |-
        Displays the details of an instance.
      parameters:
      - name: GatewayInstanceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GatewayInstanceArn'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateGatewayInstance
      description: |-
        Updates an existing gateway instance.
      parameters:
      - name: GatewayInstanceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GatewayInstanceArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                BridgePlacement:
                  $ref: '#/components/schemas/BridgePlacement'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/source-metadata:
    get:
      operationId: DescribeFlowSourceMetadata
      description: |-
        The `DescribeFlowSourceMetadata` API is used to view information about the flow's source transport stream and programs. This API displays status messages about the flow's source as well as details about the program's video, audio, and other data.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/source-thumbnail:
    get:
      operationId: DescribeFlowSourceThumbnail
      description: |-
        Describes the thumbnail for the flow source.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/offerings/{OfferingArn}:
    get:
      operationId: DescribeOffering
      description: |-
        Displays the details of an offering. The response includes the offering description, duration, outbound bandwidth, price, and Amazon Resource Name (ARN).
      parameters:
      - name: OfferingArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/OfferingArn'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    post:
      operationId: PurchaseOffering
      description: |-
        Submits a request to purchase an offering. If you already have an active reservation, you can't purchase another offering.
      parameters:
      - name: OfferingArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ReservationName:
                  $ref: '#/components/schemas/String'
                Start:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/reservations/{ReservationArn}:
    get:
      operationId: DescribeReservation
      description: |-
        Displays the details of a reservation. The response includes the reservation name, state, start date and time, and the details of the offering that make up the rest of the reservation (such as price, duration, and outbound bandwidth).
      parameters:
      - name: ReservationArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReservationArn'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/entitlements:
    post:
      operationId: GrantFlowEntitlements
      description: |-
        Grants entitlements to an existing flow.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Entitlements:
                  $ref: '#/components/schemas/__listOfGrantEntitlementRequest'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '420':
          description: |-
            Exception raised by Elemental MediaConnect when granting the entitlement. See the error message for the operation for more information on the cause of this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrantFlowEntitlements420Exception'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/entitlements:
    get:
      operationId: ListEntitlements
      description: |-
        Displays a list of all entitlements that have been granted to this account. This request returns 20 results per page.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/gateway-instances:
    get:
      operationId: ListGatewayInstances
      description: |-
        Displays a list of instances associated with the Amazon Web Services account. This request returns a paginated result. You can use the filterArn property to display only the instances associated with the selected Gateway Amazon Resource Name (ARN).
      parameters:
      - name: filterArn
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/offerings:
    get:
      operationId: ListOfferings
      description: |-
        Displays a list of all offerings that are available to this account in the current Amazon Web Services Region. If you have an active reservation (which means you've purchased an offering that has already started and hasn't expired yet), your account isn't eligible for other offerings.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/reservations:
    get:
      operationId: ListReservations
      description: |-
        Displays a list of all reservations that have been purchased by this account in the current Amazon Web Services Region. This list includes all reservations in all states (such as active and expired).
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /tags/{ResourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        List all tags on a MediaConnect resource.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      operationId: TagResource
      description: |-
        Associates the specified tags to a resource with the specified `resourceArn`. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Tags:
                  $ref: '#/components/schemas/__mapOfString'
      responses:
        '204': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    delete:
      operationId: UntagResource
      description: |-
        Deletes specified tags from a resource.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/__listOfString'
      responses:
        '204': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /v1/bridges/{BridgeArn}/outputs/{OutputName}:
    delete:
      operationId: RemoveBridgeOutput
      description: |-
        Removes an output from a bridge.
      parameters:
      - name: BridgeArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BridgeArn'
      - name: OutputName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateBridgeOutput
      description: |-
        Updates an existing bridge output.
      parameters:
      - name: BridgeArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BridgeArn'
      - name: OutputName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                NetworkOutput:
                  $ref: '#/components/schemas/UpdateBridgeNetworkOutputRequest'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/bridges/{BridgeArn}/sources/{SourceName}:
    delete:
      operationId: RemoveBridgeSource
      description: |-
        Removes a source from a bridge.
      parameters:
      - name: BridgeArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BridgeArn'
      - name: SourceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateBridgeSource
      description: |-
        Updates an existing bridge source.
      parameters:
      - name: BridgeArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BridgeArn'
      - name: SourceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                FlowSource:
                  $ref: '#/components/schemas/UpdateBridgeFlowSourceRequest'
                NetworkSource:
                  $ref: '#/components/schemas/UpdateBridgeNetworkSourceRequest'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/mediaStreams/{MediaStreamName}:
    delete:
      operationId: RemoveFlowMediaStream
      description: |-
        Removes a media stream from a flow. This action is only available if the media stream is not associated with a source or output.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      - name: MediaStreamName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateFlowMediaStream
      description: |-
        Updates an existing media stream.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      - name: MediaStreamName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Attributes:
                  $ref: '#/components/schemas/MediaStreamAttributesRequest'
                ClockRate:
                  $ref: '#/components/schemas/Integer'
                Description:
                  $ref: '#/components/schemas/String'
                MediaStreamType:
                  $ref: '#/components/schemas/MediaStreamType'
                VideoFormat:
                  $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/outputs/{OutputArn}:
    delete:
      operationId: RemoveFlowOutput
      description: |-
        Removes an output from an existing flow. This request can be made only on an output that does not have an entitlement associated with it. If the output has an entitlement, you must revoke the entitlement instead. When an entitlement is revoked from a flow, the service automatically removes the associated output.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      - name: OutputArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateFlowOutput
      description: |-
        Updates an existing flow output.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      - name: OutputArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CidrAllowList:
                  $ref: '#/components/schemas/__listOfString'
                Description:
                  $ref: '#/components/schemas/String'
                Destination:
                  $ref: '#/components/schemas/String'
                Encryption:
                  $ref: '#/components/schemas/UpdateEncryption'
                MaxLatency:
                  $ref: '#/components/schemas/Integer'
                MediaStreamOutputConfigurations:
                  $ref: '#/components/schemas/__listOfMediaStreamOutputConfigurationRequest'
                MinLatency:
                  $ref: '#/components/schemas/Integer'
                Port:
                  $ref: '#/components/schemas/Integer'
                Protocol:
                  $ref: '#/components/schemas/Protocol'
                RemoteId:
                  $ref: '#/components/schemas/String'
                SenderControlPort:
                  $ref: '#/components/schemas/Integer'
                SenderIpAddress:
                  $ref: '#/components/schemas/String'
                SmoothingLatency:
                  $ref: '#/components/schemas/Integer'
                StreamId:
                  $ref: '#/components/schemas/String'
                VpcInterfaceAttachment:
                  $ref: '#/components/schemas/VpcInterfaceAttachment'
                OutputStatus:
                  $ref: '#/components/schemas/OutputStatus'
                NdiProgramName:
                  $ref: '#/components/schemas/String'
                NdiSpeedHqQuality:
                  $ref: '#/components/schemas/Integer'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/source/{SourceArn}:
    delete:
      operationId: RemoveFlowSource
      description: |-
        Removes a source from an existing flow. This request can be made only if there is more than one source on the flow.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      - name: SourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateFlowSource
      description: |-
        Updates the source of a flow.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      - name: SourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Decryption:
                  $ref: '#/components/schemas/UpdateEncryption'
                Description:
                  $ref: '#/components/schemas/String'
                EntitlementArn:
                  $ref: '#/components/schemas/String'
                IngestPort:
                  $ref: '#/components/schemas/Integer'
                MaxBitrate:
                  $ref: '#/components/schemas/Integer'
                MaxLatency:
                  $ref: '#/components/schemas/Integer'
                MaxSyncBuffer:
                  $ref: '#/components/schemas/Integer'
                MediaStreamSourceConfigurations:
                  $ref: '#/components/schemas/__listOfMediaStreamSourceConfigurationRequest'
                MinLatency:
                  $ref: '#/components/schemas/Integer'
                Protocol:
                  $ref: '#/components/schemas/Protocol'
                SenderControlPort:
                  $ref: '#/components/schemas/Integer'
                SenderIpAddress:
                  $ref: '#/components/schemas/String'
                SourceListenerAddress:
                  $ref: '#/components/schemas/String'
                SourceListenerPort:
                  $ref: '#/components/schemas/Integer'
                StreamId:
                  $ref: '#/components/schemas/String'
                VpcInterfaceName:
                  $ref: '#/components/schemas/String'
                WhitelistCidr:
                  $ref: '#/components/schemas/String'
                GatewayBridgeSource:
                  $ref: '#/components/schemas/UpdateGatewayBridgeSourceRequest'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/vpcInterfaces/{VpcInterfaceName}:
    delete:
      operationId: RemoveFlowVpcInterface
      description: |-
        Removes a VPC Interface from an existing flow. This request can be made only on a VPC interface that does not have a Source or Output associated with it. If the VPC interface is referenced by a Source or Output, you must first delete or update the Source or Output to no longer reference the VPC interface.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      - name: VpcInterfaceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/{FlowArn}/entitlements/{EntitlementArn}:
    delete:
      operationId: RevokeFlowEntitlement
      description: |-
        Revokes an entitlement from a flow. Once an entitlement is revoked, the content becomes unavailable to the subscriber and the associated output is removed.
      parameters:
      - name: EntitlementArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateFlowEntitlement
      description: |-
        Updates an entitlement. You can change an entitlement's description, subscribers, and encryption. If you change the subscribers, the service will remove the outputs that are are used by the subscribers that are removed.
      parameters:
      - name: EntitlementArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/String'
                Encryption:
                  $ref: '#/components/schemas/UpdateEncryption'
                EntitlementStatus:
                  $ref: '#/components/schemas/EntitlementStatus'
                Subscribers:
                  $ref: '#/components/schemas/__listOfString'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/start/{FlowArn}:
    post:
      operationId: StartFlow
      description: |-
        Starts a flow.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/flows/stop/{FlowArn}:
    post:
      operationId: StopFlow
      description: |-
        Stops a flow.
      parameters:
      - name: FlowArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowArn'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v1/bridges/{BridgeArn}/state:
    put:
      operationId: UpdateBridgeState
      description: |-
        Updates the bridge state.
      parameters:
      - name: BridgeArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BridgeArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DesiredState:
                  $ref: '#/components/schemas/DesiredState'
      responses:
        '202': {}
        '400':
          description: |-
            This exception is thrown if the request contains a semantic error. The precise meaning depends on the API, and is documented in the error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            One or more of the resources in the request does not exist in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The service is currently unavailable or busy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
components:
  schemas:
    AddBridgeFlowSourceRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Number (ARN) of the flow to use as a source
            of this bridge.
        FlowVpcInterfaceAttachment:
          allOf:
          - $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this source.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the flow source. This name is used to reference
            the source and must be unique among sources in this bridge.
      required:
      - FlowArn
      - Name
      description: Add a flow source to an existing bridge.
    AddBridgeNetworkOutputRequest:
      type: object
      properties:
        IpAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network output IP Address.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network output name. This name is used to reference the
            output and must be unique among outputs in this bridge.
        NetworkName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network output's gateway network name.
        Port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The network output port.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The network output protocol.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
        Ttl:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The network output TTL.
      required:
      - IpAddress
      - Name
      - NetworkName
      - Port
      - Protocol
      - Ttl
      description: Add a network output to an existing bridge.
    AddBridgeNetworkSourceRequest:
      type: object
      properties:
        MulticastIp:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network source multicast IP.
        MulticastSourceSettings:
          allOf:
          - $ref: '#/components/schemas/MulticastSourceSettings'
          description: The settings related to the multicast source.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the network source. This name is used to reference
            the source and must be unique among sources in this bridge.
        NetworkName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network source's gateway network name.
        Port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The network source port.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The network source protocol.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
      required:
      - MulticastIp
      - Name
      - NetworkName
      - Port
      - Protocol
      description: Add a network source to an existing bridge.
    AddBridgeOutputRequest:
      type: object
      properties:
        NetworkOutput:
          allOf:
          - $ref: '#/components/schemas/AddBridgeNetworkOutputRequest'
          description: The network output of the bridge. A network output is delivered
            to your premises.
      description: Add outputs to the specified bridge.
    AddBridgeOutputsRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/BridgeArn'
          description: The Amazon Resource Name (ARN) of the bridge that you want
            to update.
        Outputs:
          allOf:
          - $ref: '#/components/schemas/__listOfAddBridgeOutputRequest'
          description: The outputs that you want to add to this bridge.
      required:
      - BridgeArn
      - Outputs
    AddBridgeOutputsResponse:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the bridge that you added outputs to.
        Outputs:
          allOf:
          - $ref: '#/components/schemas/__listOfBridgeOutput'
          description: The outputs that you added to this bridge.
    AddBridgeSourceRequest:
      type: object
      properties:
        FlowSource:
          allOf:
          - $ref: '#/components/schemas/AddBridgeFlowSourceRequest'
          description: The source of the flow.
        NetworkSource:
          allOf:
          - $ref: '#/components/schemas/AddBridgeNetworkSourceRequest'
          description: The source of the network.
      description: Add an output to a bridge.
    AddBridgeSourcesRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/BridgeArn'
          description: The Amazon Resource Name (ARN) of the bridge that you want
            to update.
        Sources:
          allOf:
          - $ref: '#/components/schemas/__listOfAddBridgeSourceRequest'
          description: The sources that you want to add to this bridge.
      required:
      - BridgeArn
      - Sources
    AddBridgeSourcesResponse:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the bridge that you added sources to.
        Sources:
          allOf:
          - $ref: '#/components/schemas/__listOfBridgeSource'
          description: The sources that you added to this bridge.
    AddEgressGatewayBridgeRequest:
      type: object
      properties:
        MaxBitrate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum expected bitrate (in bps) of the egress bridge.
      required:
      - MaxBitrate
      description: Create a bridge with the egress bridge type. An egress bridge is
        a cloud-to-ground bridge. The content comes from an existing MediaConnect
        flow and is delivered to your premises.
    AddFlowMediaStreamsRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow.
        MediaStreams:
          allOf:
          - $ref: '#/components/schemas/__listOfAddMediaStreamRequest'
          description: The media streams that you want to add to the flow.
      required:
      - FlowArn
      - MediaStreams
    AddFlowMediaStreamsResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that you added media streams to.
        MediaStreams:
          allOf:
          - $ref: '#/components/schemas/__listOfMediaStream'
          description: The media streams that you added to the flow.
    AddFlowOutputs420Exception:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: Exception raised by Elemental MediaConnect when adding the flow
        output. See the error message for the operation for more information on the
        cause of this exception.
    AddFlowOutputsRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            add outputs to.
        Outputs:
          allOf:
          - $ref: '#/components/schemas/__listOfAddOutputRequest'
          description: A list of outputs that you want to add to the flow.
      required:
      - FlowArn
      - Outputs
    AddFlowOutputsResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that these outputs were added to.
        Outputs:
          allOf:
          - $ref: '#/components/schemas/__listOfOutput'
          description: The details of the newly added outputs.
    AddFlowSourcesRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            update.
        Sources:
          allOf:
          - $ref: '#/components/schemas/__listOfSetSourceRequest'
          description: A list of sources that you want to add to the flow.
      required:
      - FlowArn
      - Sources
    AddFlowSourcesResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that these sources were added to.
        Sources:
          allOf:
          - $ref: '#/components/schemas/__listOfSource'
          description: The details of the newly added sources.
    AddFlowVpcInterfacesRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            update.
        VpcInterfaces:
          allOf:
          - $ref: '#/components/schemas/__listOfVpcInterfaceRequest'
          description: A list of VPC interfaces that you want to add to the flow.
      required:
      - FlowArn
      - VpcInterfaces
    AddFlowVpcInterfacesResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that these VPC interfaces were added to.
        VpcInterfaces:
          allOf:
          - $ref: '#/components/schemas/__listOfVpcInterface'
          description: The details of the newly added VPC interfaces.
    AddIngressGatewayBridgeRequest:
      type: object
      properties:
        MaxBitrate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum expected bitrate (in bps) of the ingress bridge.
        MaxOutputs:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of expected outputs on the ingress bridge.
      required:
      - MaxBitrate
      - MaxOutputs
      description: Create a bridge with the ingress bridge type. An ingress bridge
        is a ground-to-cloud bridge. The content originates at your premises and is
        delivered to the cloud.
    AddMaintenance:
      type: object
      properties:
        MaintenanceDay:
          allOf:
          - $ref: '#/components/schemas/MaintenanceDay'
          description: A day of a week when the maintenance will happen.
        MaintenanceStartHour:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'UTC time when the maintenance will happen.


            Use 24-hour HH:MM format.


            Minutes must be 00.


            Example: 13:00.


            The default value is 02:00.'
      required:
      - MaintenanceDay
      - MaintenanceStartHour
      description: Create a maintenance setting for a flow.
    AddMediaStreamRequest:
      type: object
      properties:
        Attributes:
          allOf:
          - $ref: '#/components/schemas/MediaStreamAttributesRequest'
          description: The attributes that you want to assign to the new media stream.
        ClockRate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The sample rate (in Hz) for the stream. If the media stream
            type is video or ancillary data, set this value to 90000. If the media
            stream type is audio, set this value to either 48000 or 96000.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description that can help you quickly identify what your
            media stream is used for.
        MediaStreamId:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: A unique identifier for the media stream.
        MediaStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A name that helps you distinguish one media stream from another.
        MediaStreamType:
          allOf:
          - $ref: '#/components/schemas/MediaStreamType'
          description: The type of media stream.
        VideoFormat:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resolution of the video.
      required:
      - MediaStreamId
      - MediaStreamName
      - MediaStreamType
      description: The media stream that you want to add to the flow.
    AddOutputRequest:
      type: object
      properties:
        CidrAllowList:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: The range of IP addresses that should be allowed to initiate
            output requests to this flow. These IP addresses should be in the form
            of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the output. This description appears only
            on the Audit Manager console and will not be seen by the end user.
        Destination:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address from which video will be sent to output destinations.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/Encryption'
          description: 'The type of key used for the encryption. If no keyType is
            provided, the service will use the default setting (static-key). Allowable
            encryption types: static-key.'
        MaxLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum latency in milliseconds. This parameter applies
            only to RIST-based and Zixi-based streams.
        MediaStreamOutputConfigurations:
          allOf:
          - $ref: '#/components/schemas/__listOfMediaStreamOutputConfigurationRequest'
          description: The media streams that are associated with the output, and
            the parameters for those associations.
        MinLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The minimum latency in milliseconds for SRT-based streams.
            In streams that use the SRT protocol, this value that you set on your
            MediaConnect source or output represents the minimal potential latency
            of that connection. The latency of the stream is set to the highest number
            between the sender’s minimum latency and the receiver’s minimum latency.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the output. This value must be unique within the
            current flow.
        Port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port to use when content is distributed to this output.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The protocol to use for the output.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
        RemoteId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The remote ID for the Zixi-pull output stream.
        SenderControlPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that the flow uses to send outbound requests to initiate
            connection with the sender.
        SmoothingLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC
            streams.
        StreamId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The stream ID that you want to use for this transport. This
            parameter applies only to Zixi and SRT caller-based streams.
        VpcInterfaceAttachment:
          allOf:
          - $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this output.
        OutputStatus:
          allOf:
          - $ref: '#/components/schemas/OutputStatus'
          description: An indication of whether the new output should be enabled or
            disabled as soon as it is created. If you don't specify the outputStatus
            field in your request, MediaConnect sets it to ENABLED.
        NdiSpeedHqQuality:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: A quality setting for the NDI Speed HQ encoder.
        NdiProgramName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A suffix for the names of the NDI sources that the flow creates.
            If a custom name isn't specified, MediaConnect uses the output name.
      required:
      - Protocol
      description: A request to add an output to a flow.
    Algorithm:
      type: string
      enum:
      - aes128
      - aes192
      - aes256
    AudioMonitoringSetting:
      type: object
      properties:
        SilentAudio:
          allOf:
          - $ref: '#/components/schemas/SilentAudio'
          description: Detects periods of silence.
      description: Specifies the configuration for audio stream metrics monitoring.
    BadRequestException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: This exception is thrown if the request contains a semantic error.
        The precise meaning depends on the API, and is documented in the error message.
    BlackFrames:
      type: object
      properties:
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          description: Indicates whether the `BlackFrames` metric is enabled or disabled..
        ThresholdSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies the number of consecutive seconds of black frames
            that triggers an event or alert.
      description: Configures settings for the `BlackFrames` metric.
    Bridge:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Number (ARN) of the bridge.
        BridgeMessages:
          allOf:
          - $ref: '#/components/schemas/__listOfMessageDetail'
          description: Messages with details about the bridge.
        BridgeState:
          allOf:
          - $ref: '#/components/schemas/BridgeState'
          description: The state of the bridge.
        EgressGatewayBridge:
          allOf:
          - $ref: '#/components/schemas/EgressGatewayBridge'
          description: An egress bridge is a cloud-to-ground bridge. The content comes
            from an existing MediaConnect flow and is delivered to your premises.
        IngressGatewayBridge:
          allOf:
          - $ref: '#/components/schemas/IngressGatewayBridge'
          description: An ingress bridge is a ground-to-cloud bridge. The content
            originates at your premises and is delivered to the cloud.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the bridge.
        Outputs:
          allOf:
          - $ref: '#/components/schemas/__listOfBridgeOutput'
          description: The outputs on this bridge.
        PlacementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The placement Amazon Resource Number (ARN) of the bridge.
        SourceFailoverConfig:
          allOf:
          - $ref: '#/components/schemas/FailoverConfig'
          description: The settings for source failover.
        Sources:
          allOf:
          - $ref: '#/components/schemas/__listOfBridgeSource'
          description: The sources on this bridge.
      required:
      - BridgeArn
      - BridgeState
      - Name
      - PlacementArn
      description: A Bridge is the connection between your data center's Instances
        and the Amazon Web Services cloud. A bridge can be used to send video from
        the Amazon Web Services cloud to your data center or from your data center
        to the Amazon Web Services cloud.
    BridgeArn:
      type: string
    BridgeFlowOutput:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Number (ARN) of the cloud flow.
        FlowSourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Number (ARN) of the flow source.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the bridge's output.
      required:
      - FlowArn
      - FlowSourceArn
      - Name
      description: The output of the bridge. A flow output is delivered to the Amazon
        Web Services cloud.
    BridgeFlowSource:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the cloud flow used as a source of this bridge.
        FlowVpcInterfaceAttachment:
          allOf:
          - $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this source.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the flow source.
        OutputArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Number (ARN) of the output.
      required:
      - FlowArn
      - Name
      description: The source of the bridge. A flow source originates in MediaConnect
        as an existing cloud flow.
    BridgeNetworkOutput:
      type: object
      properties:
        IpAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network output IP address.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network output name.
        NetworkName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network output's gateway network name.
        Port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The network output's port.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The network output protocol.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
        Ttl:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The network output TTL.
      required:
      - IpAddress
      - Name
      - NetworkName
      - Port
      - Protocol
      - Ttl
      description: The output of the bridge. A network output is delivered to your
        premises.
    BridgeNetworkSource:
      type: object
      properties:
        MulticastIp:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network source multicast IP.
        MulticastSourceSettings:
          allOf:
          - $ref: '#/components/schemas/MulticastSourceSettings'
          description: The settings related to the multicast source.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the network source.
        NetworkName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network source's gateway network name.
        Port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The network source port.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The network source protocol.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
      required:
      - MulticastIp
      - Name
      - NetworkName
      - Port
      - Protocol
      description: The source of the bridge. A network source originates at your premises.
    BridgeOutput:
      type: object
      properties:
        FlowOutput:
          allOf:
          - $ref: '#/components/schemas/BridgeFlowOutput'
          description: The output of the associated flow.
        NetworkOutput:
          allOf:
          - $ref: '#/components/schemas/BridgeNetworkOutput'
          description: The network output for the bridge.
      description: The output of the bridge.
    BridgePlacement:
      type: string
      enum:
      - AVAILABLE
      - LOCKED
    BridgeSource:
      type: object
      properties:
        FlowSource:
          allOf:
          - $ref: '#/components/schemas/BridgeFlowSource'
          description: The source of the associated flow.
        NetworkSource:
          allOf:
          - $ref: '#/components/schemas/BridgeNetworkSource'
          description: The network source for the bridge.
      description: The bridge's source.
    BridgeState:
      type: string
      enum:
      - CREATING
      - STANDBY
      - STARTING
      - DEPLOYING
      - ACTIVE
      - STOPPING
      - DELETING
      - DELETED
      - START_FAILED
      - START_PENDING
      - STOP_FAILED
      - UPDATING
    Colorimetry:
      type: string
      enum:
      - BT601
      - BT709
      - BT2020
      - BT2100
      - ST2065-1
      - ST2065-3
      - XYZ
    ConflictException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: The requested operation would cause a conflict with the current
        state of a service resource associated with the request. Resolve the conflict
        before retrying this request.
    ConnectionStatus:
      type: string
      enum:
      - CONNECTED
      - DISCONNECTED
    ContentQualityAnalysisState:
      type: string
      enum:
      - ENABLED
      - DISABLED
    CreateBridge420Exception:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: Exception raised by Elemental MediaConnect when creating the bridge.
        See the error message for the operation for more information on the cause
        of this exception.
    CreateBridgeRequest:
      type: object
      properties:
        EgressGatewayBridge:
          allOf:
          - $ref: '#/components/schemas/AddEgressGatewayBridgeRequest'
          description: An egress bridge is a cloud-to-ground bridge. The content comes
            from an existing MediaConnect flow and is delivered to your premises.
        IngressGatewayBridge:
          allOf:
          - $ref: '#/components/schemas/AddIngressGatewayBridgeRequest'
          description: An ingress bridge is a ground-to-cloud bridge. The content
            originates at your premises and is delivered to the cloud.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the bridge. This name can not be modified after
            the bridge is created.
        Outputs:
          allOf:
          - $ref: '#/components/schemas/__listOfAddBridgeOutputRequest'
          description: The outputs that you want to add to this bridge.
        PlacementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The bridge placement Amazon Resource Number (ARN).
        SourceFailoverConfig:
          allOf:
          - $ref: '#/components/schemas/FailoverConfig'
          description: The settings for source failover.
        Sources:
          allOf:
          - $ref: '#/components/schemas/__listOfAddBridgeSourceRequest'
          description: The sources that you want to add to this bridge.
      required:
      - Name
      - PlacementArn
      - Sources
    CreateBridgeResponse:
      type: object
      properties:
        Bridge:
          allOf:
          - $ref: '#/components/schemas/Bridge'
          description: The name of the bridge that was created.
    CreateFlow420Exception:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: Exception raised by Elemental MediaConnect when creating the flow.
        See the error message for the operation for more information on the cause
        of this exception.
    CreateFlowRequest:
      type: object
      properties:
        AvailabilityZone:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Availability Zone that you want to create the flow in.
            These options are limited to the Availability Zones within the current
            Amazon Web Services Region.
        Entitlements:
          allOf:
          - $ref: '#/components/schemas/__listOfGrantEntitlementRequest'
          description: The entitlements that you want to grant on a flow.
        MediaStreams:
          allOf:
          - $ref: '#/components/schemas/__listOfAddMediaStreamRequest'
          description: The media streams that you want to add to the flow. You can
            associate these media streams with sources and outputs on the flow.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the flow.
        Outputs:
          allOf:
          - $ref: '#/components/schemas/__listOfAddOutputRequest'
          description: The outputs that you want to add to this flow.
        Source:
          allOf:
          - $ref: '#/components/schemas/SetSourceRequest'
          description: The settings for the source that you want to use for the new
            flow.
        SourceFailoverConfig:
          allOf:
          - $ref: '#/components/schemas/FailoverConfig'
          description: The settings for source failover.
        Sources:
          allOf:
          - $ref: '#/components/schemas/__listOfSetSourceRequest'
          description: The sources that are assigned to the flow.
        VpcInterfaces:
          allOf:
          - $ref: '#/components/schemas/__listOfVpcInterfaceRequest'
          description: The VPC interfaces you want on the flow.
        Maintenance:
          allOf:
          - $ref: '#/components/schemas/AddMaintenance'
          description: The maintenance settings you want to use for the flow.
        SourceMonitoringConfig:
          allOf:
          - $ref: '#/components/schemas/MonitoringConfig'
          description: The settings for source monitoring.
        FlowSize:
          allOf:
          - $ref: '#/components/schemas/FlowSize'
          description: Determines the processing capacity and feature set of the flow.
            Set this optional parameter to `LARGE` if you want to enable NDI outputs
            on the flow.
        NdiConfig:
          allOf:
          - $ref: '#/components/schemas/NdiConfig'
          description: Specifies the configuration settings for NDI outputs. Required
            when the flow includes NDI outputs.
      required:
      - Name
    CreateFlowResponse:
      type: object
      properties:
        Flow:
          allOf:
          - $ref: '#/components/schemas/Flow'
          description: The flow that you created.
    CreateGateway420Exception:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: Exception raised by Elemental MediaConnect when creating the gateway.
        See the error message for the operation for more information on the cause
        of this exception.
    CreateGatewayRequest:
      type: object
      properties:
        EgressCidrBlocks:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: The range of IP addresses that are allowed to contribute content
            or initiate output requests for flows communicating with this gateway.
            These IP addresses should be in the form of a Classless Inter-Domain Routing
            (CIDR) block; for example, 10.0.0.0/16.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the gateway. This name can not be modified after
            the gateway is created.
        Networks:
          allOf:
          - $ref: '#/components/schemas/__listOfGatewayNetwork'
          description: The list of networks that you want to add to the gateway.
      required:
      - EgressCidrBlocks
      - Name
      - Networks
    CreateGatewayResponse:
      type: object
      properties:
        Gateway:
          allOf:
          - $ref: '#/components/schemas/Gateway'
          description: The gateway that you created.
    DeleteBridgeRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/BridgeArn'
          description: The Amazon Resource Name (ARN) of the bridge that you want
            to delete.
      required:
      - BridgeArn
    DeleteBridgeResponse:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the deleted bridge.
    DeleteFlowRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            delete.
      required:
      - FlowArn
    DeleteFlowResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that was deleted.
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the flow when the `DeleteFlow` process begins.
    DeleteGatewayRequest:
      type: object
      properties:
        GatewayArn:
          allOf:
          - $ref: '#/components/schemas/GatewayArn'
          description: The Amazon Resource Name (ARN) of the gateway that you want
            to delete.
      required:
      - GatewayArn
    DeleteGatewayResponse:
      type: object
      properties:
        GatewayArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the gateway that was deleted.
    DeregisterGatewayInstanceRequest:
      type: object
      properties:
        Force:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Force the deregistration of an instance. Force will deregister
            an instance, even if there are bridges running on it.
        GatewayInstanceArn:
          allOf:
          - $ref: '#/components/schemas/GatewayInstanceArn'
          description: The Amazon Resource Name (ARN) of the gateway that contains
            the instance that you want to deregister.
      required:
      - GatewayInstanceArn
    DeregisterGatewayInstanceResponse:
      type: object
      properties:
        GatewayInstanceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the instance.
        InstanceState:
          allOf:
          - $ref: '#/components/schemas/InstanceState'
          description: The status of the instance.
    DescribeBridgeRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/BridgeArn'
          description: The Amazon Resource Name (ARN) of the bridge that you want
            to describe.
      required:
      - BridgeArn
    DescribeBridgeResponse:
      type: object
      properties:
        Bridge:
          allOf:
          - $ref: '#/components/schemas/Bridge'
          description: The bridge that you requested a description of.
    DescribeFlowRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The ARN of the flow that you want to describe.
      required:
      - FlowArn
    DescribeFlowResponse:
      type: object
      properties:
        Flow:
          allOf:
          - $ref: '#/components/schemas/Flow'
          description: The flow that you requested a description of.
        Messages:
          allOf:
          - $ref: '#/components/schemas/Messages'
          description: Any errors that apply currently to the flow. If there are no
            errors, MediaConnect will not include this field in the response.
    DescribeFlowSourceMetadataRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow.
      required:
      - FlowArn
    DescribeFlowSourceMetadataResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that DescribeFlowSourceMetadata was performed
            on.
        Messages:
          allOf:
          - $ref: '#/components/schemas/__listOfMessageDetail'
          description: Provides a status code and message regarding issues found with
            the flow source metadata.
        Timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the most recent change in metadata for this
            flow’s source.
        TransportMediaInfo:
          allOf:
          - $ref: '#/components/schemas/TransportMediaInfo'
          description: Information about the flow's transport media.
    DescribeFlowSourceThumbnailRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow.
      required:
      - FlowArn
    DescribeFlowSourceThumbnailResponse:
      type: object
      properties:
        ThumbnailDetails:
          allOf:
          - $ref: '#/components/schemas/ThumbnailDetails'
          description: The details of the thumbnail, including thumbnail base64 string,
            timecode and the time when thumbnail was generated.
    DescribeGatewayInstanceRequest:
      type: object
      properties:
        GatewayInstanceArn:
          allOf:
          - $ref: '#/components/schemas/GatewayInstanceArn'
          description: The Amazon Resource Name (ARN) of the gateway instance that
            you want to describe.
      required:
      - GatewayInstanceArn
    DescribeGatewayInstanceResponse:
      type: object
      properties:
        GatewayInstance:
          allOf:
          - $ref: '#/components/schemas/GatewayInstance'
          description: The gateway instance that you requested a description of.
    DescribeGatewayRequest:
      type: object
      properties:
        GatewayArn:
          allOf:
          - $ref: '#/components/schemas/GatewayArn'
          description: The ARN of the gateway that you want to describe.
      required:
      - GatewayArn
    DescribeGatewayResponse:
      type: object
      properties:
        Gateway:
          allOf:
          - $ref: '#/components/schemas/Gateway'
          description: The gateway that you wanted to describe.
    DescribeOfferingRequest:
      type: object
      properties:
        OfferingArn:
          allOf:
          - $ref: '#/components/schemas/OfferingArn'
          description: The ARN of the offering.
      required:
      - OfferingArn
    DescribeOfferingResponse:
      type: object
      properties:
        Offering:
          allOf:
          - $ref: '#/components/schemas/Offering'
          description: The offering that you requested a description of.
    DescribeReservationRequest:
      type: object
      properties:
        ReservationArn:
          allOf:
          - $ref: '#/components/schemas/ReservationArn'
          description: The Amazon Resource Name (ARN) of the offering.
      required:
      - ReservationArn
    DescribeReservationResponse:
      type: object
      properties:
        Reservation:
          allOf:
          - $ref: '#/components/schemas/Reservation'
          description: A pricing agreement for a discounted rate for a specific outbound
            bandwidth that your MediaConnect account will use each month over a specific
            time period. The discounted rate in the reservation applies to outbound
            bandwidth for all flows from your account until your account reaches the
            amount of bandwidth in your reservation. If you use more outbound bandwidth
            than the agreed upon amount in a single month, the overage is charged
            at the on-demand rate.
    DesiredState:
      type: string
      enum:
      - ACTIVE
      - STANDBY
      - DELETED
    DestinationConfiguration:
      type: object
      properties:
        DestinationIp:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address where you want MediaConnect to send contents
            of the media stream.
        DestinationPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that you want MediaConnect to use when it distributes
            the media stream to the output.
        Interface:
          allOf:
          - $ref: '#/components/schemas/Interface'
          description: The VPC interface that you want to use for the media stream
            associated with the output.
        OutboundIp:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address that the receiver requires in order to establish
            a connection with the flow. This value is represented by the elastic network
            interface IP address of the VPC. This field applies only to outputs that
            use the CDI or ST 2110 JPEG XS or protocol.
      required:
      - DestinationIp
      - DestinationPort
      - Interface
      - OutboundIp
      description: The transport parameters that you want to associate with an outbound
        media stream.
    DestinationConfigurationRequest:
      type: object
      properties:
        DestinationIp:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address where you want MediaConnect to send contents
            of the media stream.
        DestinationPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that you want MediaConnect to use when it distributes
            the media stream to the output.
        Interface:
          allOf:
          - $ref: '#/components/schemas/InterfaceRequest'
          description: The VPC interface that you want to use for the media stream
            associated with the output.
      required:
      - DestinationIp
      - DestinationPort
      - Interface
      description: The definition of a media stream that you want to associate with
        the output.
    DurationUnits:
      type: string
      enum:
      - MONTHS
    EgressGatewayBridge:
      type: object
      properties:
        InstanceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the instance running this bridge.
        MaxBitrate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum expected bitrate (in bps) of the egress bridge.
      required:
      - MaxBitrate
      description: Create a bridge with the egress bridge type. An egress bridge is
        a cloud-to-ground bridge. The content comes from an existing MediaConnect
        flow and is delivered to your premises.
    EncoderProfile:
      type: string
      enum:
      - main
      - high
    EncodingName:
      type: string
      enum:
      - jxsv
      - raw
      - smpte291
      - pcm
    EncodingParameters:
      type: object
      properties:
        CompressionFactor:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: 'A value that is used to calculate compression for an output.
            The bitrate of the output is calculated as follows: Output bitrate = (1
            / compressionFactor) * (source bitrate) This property only applies to
            outputs that use the ST 2110 JPEG XS protocol, with a flow source that
            uses the CDI protocol. Valid values are floating point numbers in the
            range of 3.0 to 10.0, inclusive.'
        EncoderProfile:
          allOf:
          - $ref: '#/components/schemas/EncoderProfile'
          description: A setting on the encoder that drives compression settings.
            This property only applies to video media streams associated with outputs
            that use the ST 2110 JPEG XS protocol, with a flow source that uses the
            CDI protocol.
      required:
      - CompressionFactor
      - EncoderProfile
      description: A collection of parameters that determine how MediaConnect will
        convert the content. These fields only apply to outputs on flows that have
        a CDI source.
    EncodingParametersRequest:
      type: object
      properties:
        CompressionFactor:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: 'A value that is used to calculate compression for an output.
            The bitrate of the output is calculated as follows: Output bitrate = (1
            / compressionFactor) * (source bitrate) This property only applies to
            outputs that use the ST 2110 JPEG XS protocol, with a flow source that
            uses the CDI protocol. Valid values are floating point numbers in the
            range of 3.0 to 10.0, inclusive.'
        EncoderProfile:
          allOf:
          - $ref: '#/components/schemas/EncoderProfile'
          description: A setting on the encoder that drives compression settings.
            This property only applies to video media streams associated with outputs
            that use the ST 2110 JPEG XS protocol, if at least one source on the flow
            uses the CDI protocol.
      required:
      - CompressionFactor
      - EncoderProfile
      description: A collection of parameters that determine how MediaConnect will
        convert the content. These fields only apply to outputs on flows that have
        a CDI source.
    Encryption:
      type: object
      properties:
        Algorithm:
          allOf:
          - $ref: '#/components/schemas/Algorithm'
          description: The type of algorithm that is used for the encryption (such
            as aes128, aes192, or aes256).
        ConstantInitializationVector:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A 128-bit, 16-byte hex value represented by a 32-character
            string, to be used with the key for encrypting content. This parameter
            is not valid for static key encryption.
        DeviceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of one of the devices that you configured with your
            digital rights management (DRM) platform key provider. This parameter
            is required for SPEKE encryption and is not valid for static key encryption.
        KeyType:
          allOf:
          - $ref: '#/components/schemas/KeyType'
          description: The type of key that is used for the encryption. If no keyType
            is provided, the service will use the default setting (static-key).
        Region:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Region that the API Gateway proxy endpoint
            was created in. This parameter is required for SPEKE encryption and is
            not valid for static key encryption.
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An identifier for the content. The service sends this value
            to the key server to identify the current endpoint. The resource ID is
            also known as the content ID. This parameter is required for SPEKE encryption
            and is not valid for static key encryption.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the role that you created during setup (when you
            set up MediaConnect as a trusted entity).
        SecretArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the secret that you created in Secrets Manager to
            store the encryption key. This parameter is required for static key encryption
            and is not valid for SPEKE encryption.
        Url:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The URL from the API Gateway proxy that you set up to talk
            to your key server. This parameter is required for SPEKE encryption and
            is not valid for static key encryption.
      required:
      - RoleArn
      description: Information about the encryption of the flow.
    Entitlement:
      type: object
      properties:
        DataTransferSubscriberFeePercent:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Percentage from 0-100 of the data transfer cost to be billed
            to the subscriber.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the entitlement.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/Encryption'
          description: The type of encryption that will be used on the output that
            is associated with this entitlement.
        EntitlementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the entitlement.
        EntitlementStatus:
          allOf:
          - $ref: '#/components/schemas/EntitlementStatus'
          description: An indication of whether the entitlement is enabled.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the entitlement.
        Subscribers:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: The Amazon Web Services account IDs that you want to share
            your content with. The receiving accounts (subscribers) will be allowed
            to create their own flow using your content as the source.
      required:
      - EntitlementArn
      - Name
      - Subscribers
      description: The settings for a flow entitlement.
    EntitlementStatus:
      type: string
      enum:
      - ENABLED
      - DISABLED
    FailoverConfig:
      type: object
      properties:
        FailoverMode:
          allOf:
          - $ref: '#/components/schemas/FailoverMode'
          description: The type of failover you choose for this flow. MERGE combines
            the source streams into a single stream, allowing graceful recovery from
            any single-source loss. FAILOVER allows switching between different streams.
        RecoveryWindow:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Search window time to look for dash-7 packets.
        SourcePriority:
          allOf:
          - $ref: '#/components/schemas/SourcePriority'
          description: The priority you want to assign to a source. You can have a
            primary stream and a backup stream or two equally prioritized streams.
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The state of source failover on the flow. If the state is inactive,
            the flow can have only one source. If the state is active, the flow can
            have one or two sources.
      description: The settings for source failover.
    FailoverMode:
      type: string
      enum:
      - MERGE
      - FAILOVER
    Flow:
      type: object
      properties:
        AvailabilityZone:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Availability Zone that you want to create the flow in.
            These options are limited to the Availability Zones within the current
            Amazon Web Services Region.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the flow. This value is not used or seen outside
            of the current MediaConnect account.
        EgressIp:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address from which video will be sent to output destinations.
        Entitlements:
          allOf:
          - $ref: '#/components/schemas/__listOfEntitlement'
          description: The entitlements in this flow.
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the flow.
        MediaStreams:
          allOf:
          - $ref: '#/components/schemas/__listOfMediaStream'
          description: The media streams that are associated with the flow. After
            you associate a media stream with a source, you can also associate it
            with outputs on the flow.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the flow.
        Outputs:
          allOf:
          - $ref: '#/components/schemas/__listOfOutput'
          description: The outputs in this flow.
        Source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: The source for the flow.
        SourceFailoverConfig:
          allOf:
          - $ref: '#/components/schemas/FailoverConfig'
          description: The settings for the source failover.
        Sources:
          allOf:
          - $ref: '#/components/schemas/__listOfSource'
          description: The settings for the sources that are assigned to the flow.
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The current status of the flow.
        VpcInterfaces:
          allOf:
          - $ref: '#/components/schemas/__listOfVpcInterface'
          description: The VPC Interfaces for this flow.
        Maintenance:
          allOf:
          - $ref: '#/components/schemas/Maintenance'
          description: The maintenance settings for the flow.
        SourceMonitoringConfig:
          allOf:
          - $ref: '#/components/schemas/MonitoringConfig'
          description: The settings for source monitoring.
        FlowSize:
          allOf:
          - $ref: '#/components/schemas/FlowSize'
          description: Determines the processing capacity and feature set of the flow.
            Set this optional parameter to LARGE if you want to enable NDI outputs
            on the flow.
        NdiConfig:
          allOf:
          - $ref: '#/components/schemas/NdiConfig'
          description: Specifies the configuration settings for NDI outputs. Required
            when the flow includes NDI outputs.
      required:
      - AvailabilityZone
      - Entitlements
      - FlowArn
      - Name
      - Outputs
      - Source
      - Status
      description: The settings for a flow, including its source, outputs, and entitlements.
    FlowArn:
      type: string
    FlowSize:
      type: string
      enum:
      - MEDIUM
      - LARGE
    Fmtp:
      type: object
      properties:
        ChannelOrder:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The format of the audio channel.
        Colorimetry:
          allOf:
          - $ref: '#/components/schemas/Colorimetry'
          description: The format used for the representation of color.
        ExactFramerate:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The frame rate for the video stream, in frames/second. For
            example: 60000/1001.'
        Par:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pixel aspect ratio (PAR) of the video.
        Range:
          allOf:
          - $ref: '#/components/schemas/Range'
          description: The encoding range of the video.
        ScanMode:
          allOf:
          - $ref: '#/components/schemas/ScanMode'
          description: The type of compression that was used to smooth the video’s
            appearance.
        Tcs:
          allOf:
          - $ref: '#/components/schemas/Tcs'
          description: The transfer characteristic system (TCS) that is used in the
            video.
      description: A set of parameters that define the media stream.
    FmtpRequest:
      type: object
      properties:
        ChannelOrder:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The format of the audio channel.
        Colorimetry:
          allOf:
          - $ref: '#/components/schemas/Colorimetry'
          description: The format that is used for the representation of color.
        ExactFramerate:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The frame rate for the video stream, in frames/second. For
            example: 60000/1001. If you specify a whole number, MediaConnect uses
            a ratio of N/1. For example, if you specify 60, MediaConnect uses 60/1
            as the `exactFramerate`.'
        Par:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pixel aspect ratio (PAR) of the video.
        Range:
          allOf:
          - $ref: '#/components/schemas/Range'
          description: The encoding range of the video.
        ScanMode:
          allOf:
          - $ref: '#/components/schemas/ScanMode'
          description: The type of compression that was used to smooth the video’s
            appearance.
        Tcs:
          allOf:
          - $ref: '#/components/schemas/Tcs'
          description: The transfer characteristic system (TCS) that is used in the
            video.
      description: The settings that you want to use to define the media stream.
    ForbiddenException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: You do not have sufficient access to perform this action.
    FrameResolution:
      type: object
      properties:
        FrameHeight:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of pixels in the height of the video frame.
        FrameWidth:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of pixels in the width of the video frame.
      required:
      - FrameHeight
      - FrameWidth
      description: The frame resolution used by the video stream.
    FrozenFrames:
      type: object
      properties:
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          description: Indicates whether the `FrozenFrames` metric is enabled or disabled.
        ThresholdSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies the number of consecutive seconds of a static image
            that triggers an event or alert.
      description: Configures settings for the `FrozenFrames` metric.
    Gateway:
      type: object
      properties:
        EgressCidrBlocks:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: The range of IP addresses that contribute content or initiate
            output requests for flows communicating with this gateway. These IP addresses
            should be in the form of a Classless Inter-Domain Routing (CIDR) block;
            for example, 10.0.0.0/16.
        GatewayArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the gateway.
        GatewayMessages:
          allOf:
          - $ref: '#/components/schemas/__listOfMessageDetail'
          description: Messages with information about the gateway.
        GatewayState:
          allOf:
          - $ref: '#/components/schemas/GatewayState'
          description: The current status of the gateway.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the gateway. This name can not be modified after
            the gateway is created.
        Networks:
          allOf:
          - $ref: '#/components/schemas/__listOfGatewayNetwork'
          description: The list of networks in the gateway.
      required:
      - EgressCidrBlocks
      - GatewayArn
      - Name
      - Networks
      description: The settings for a gateway, including its networks.
    GatewayArn:
      type: string
    GatewayBridgeSource:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the bridge feeding this flow.
        VpcInterfaceAttachment:
          allOf:
          - $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this bridge
            source.
      required:
      - BridgeArn
      description: The source configuration for cloud flows receiving a stream from
        a bridge.
    GatewayInstance:
      type: object
      properties:
        BridgePlacement:
          allOf:
          - $ref: '#/components/schemas/BridgePlacement'
          description: The availability of the instance to host new bridges. The bridgePlacement
            property can be LOCKED or AVAILABLE. If it is LOCKED, no new bridges can
            be deployed to this instance. If it is AVAILABLE, new bridges can be deployed
            to this instance.
        ConnectionStatus:
          allOf:
          - $ref: '#/components/schemas/ConnectionStatus'
          description: The connection state of the instance.
        GatewayArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the instance.
        GatewayInstanceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the gateway.
        InstanceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The instance ID generated by the SSM install. This will begin
            with "mi-".
        InstanceMessages:
          allOf:
          - $ref: '#/components/schemas/__listOfMessageDetail'
          description: Messages with information about the gateway.
        InstanceState:
          allOf:
          - $ref: '#/components/schemas/InstanceState'
          description: The status of the instance.
        RunningBridgeCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The running bridge count.
      required:
      - BridgePlacement
      - ConnectionStatus
      - GatewayArn
      - GatewayInstanceArn
      - InstanceId
      - InstanceState
      - RunningBridgeCount
      description: The settings for an instance in a gateway.
    GatewayInstanceArn:
      type: string
    GatewayNetwork:
      type: object
      properties:
        CidrBlock:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique IP address range to use for this network. These IP
            addresses should be in the form of a Classless Inter-Domain Routing (CIDR)
            block; for example, 10.0.0.0/16.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the network. This name is used to reference the
            network and must be unique among networks in this gateway.
      required:
      - CidrBlock
      - Name
      description: The network settings for a gateway.
    GatewayState:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - UPDATING
      - ERROR
      - DELETING
      - DELETED
    GrantEntitlementRequest:
      type: object
      properties:
        DataTransferSubscriberFeePercent:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Percentage from 0-100 of the data transfer cost to be billed
            to the subscriber.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the entitlement. This description appears
            only on the MediaConnect console and will not be seen by the subscriber
            or end user.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/Encryption'
          description: 'The type of encryption that will be used on the output that
            is associated with this entitlement. Allowable encryption types: static-key,
            speke.'
        EntitlementStatus:
          allOf:
          - $ref: '#/components/schemas/EntitlementStatus'
          description: An indication of whether the new entitlement should be enabled
            or disabled as soon as it is created. If you don’t specify the entitlementStatus
            field in your request, MediaConnect sets it to ENABLED.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the entitlement. This value must be unique within
            the current flow.
        Subscribers:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: The Amazon Web Services account IDs that you want to share
            your content with. The receiving accounts (subscribers) will be allowed
            to create their own flows using your content as the source.
      required:
      - Subscribers
      description: The entitlements that you want to grant on a flow.
    GrantFlowEntitlements420Exception:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: Exception raised by Elemental MediaConnect when granting the entitlement.
        See the error message for the operation for more information on the cause
        of this exception.
    GrantFlowEntitlementsRequest:
      type: object
      properties:
        Entitlements:
          allOf:
          - $ref: '#/components/schemas/__listOfGrantEntitlementRequest'
          description: The list of entitlements that you want to grant.
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            grant entitlements on.
      required:
      - Entitlements
      - FlowArn
    GrantFlowEntitlementsResponse:
      type: object
      properties:
        Entitlements:
          allOf:
          - $ref: '#/components/schemas/__listOfEntitlement'
          description: The entitlements that were just granted.
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that these entitlements were granted to.
    IngressGatewayBridge:
      type: object
      properties:
        InstanceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the instance running this bridge.
        MaxBitrate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum expected bitrate (in bps) of the ingress bridge.
        MaxOutputs:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of outputs on the ingress bridge.
      required:
      - MaxBitrate
      - MaxOutputs
      description: Create a bridge with the ingress bridge type. An ingress bridge
        is a ground-to-cloud bridge. The content originates at your premises and is
        delivered to the cloud.
    InputConfiguration:
      type: object
      properties:
        InputIp:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address that the flow listens on for incoming content
            for a media stream.
        InputPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that the flow listens on for an incoming media stream.
        Interface:
          allOf:
          - $ref: '#/components/schemas/Interface'
          description: The VPC interface where the media stream comes in from.
      required:
      - InputIp
      - InputPort
      - Interface
      description: The transport parameters that are associated with an incoming media
        stream.
    InputConfigurationRequest:
      type: object
      properties:
        InputPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that you want the flow to listen on for an incoming
            media stream.
        Interface:
          allOf:
          - $ref: '#/components/schemas/InterfaceRequest'
          description: The VPC interface that you want to use for the incoming media
            stream.
      required:
      - InputPort
      - Interface
      description: The transport parameters that you want to associate with an incoming
        media stream.
    InstanceState:
      type: string
      enum:
      - REGISTERING
      - ACTIVE
      - DEREGISTERING
      - DEREGISTERED
      - REGISTRATION_ERROR
      - DEREGISTRATION_ERROR
    Interface:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the VPC interface.
      required:
      - Name
      description: The VPC interface that is used for the media stream associated
        with the source or output.
    InterfaceRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the VPC interface.
      required:
      - Name
      description: The VPC interface that you want to designate where the media stream
        is coming from or going to.
    InternalServerErrorException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: The server encountered an internal error and is unable to complete
        the request.
    KeyType:
      type: string
      enum:
      - speke
      - static-key
      - srt-password
    ListBridgesRequest:
      type: object
      properties:
        FilterArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Filter the list results to display only the bridges associated
            with the selected ARN.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return per API request.


            For example, you submit a `ListBridges` request with `MaxResults` set
            at 5. Although 20 items match your request, the service returns no more
            than the first 5 items. (The service also returns a `NextToken` value
            that you can use to fetch the next batch of results.)


            The service might return fewer results than the `MaxResults` value. If
            `MaxResults` is not included in the request, the service defaults to pagination
            with a maximum of 10 results per page.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListBridges` request with `MaxResults` set
            at 5. The service returns the first batch of results (up to 5) and a `NextToken`
            value. To see the next batch of results, you can submit the `ListBridges`
            request a second time and specify the `NextToken` value.'
    ListBridgesResponse:
      type: object
      properties:
        Bridges:
          allOf:
          - $ref: '#/components/schemas/__listOfListedBridge'
          description: A list of bridge summaries.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListBridges` request with `MaxResults` set
            at 5. The service returns the first batch of results (up to 5) and a `NextToken`
            value. To see the next batch of results, you can submit the `ListBridges`
            request a second time and specify the `NextToken` value.'
    ListEntitlementsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return per API request.


            For example, you submit a `ListEntitlements` request with set at 5. Although
            20 items match your request, the service returns no more than the first
            5 items. (The service also returns a NextToken value that you can use
            to fetch the next batch of results.)


            The service might return fewer results than the `MaxResults` value. If
            `MaxResults` is not included in the request, the service defaults to pagination
            with a maximum of 20 results per page.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListEntitlements` request with `MaxResults`
            set at 5. The service returns the first batch of results (up to 5) and
            a `NextToken` value. To see the next batch of results, you can submit
            the `ListEntitlements` request a second time and specify the `NextToken`
            value.'
    ListEntitlementsResponse:
      type: object
      properties:
        Entitlements:
          allOf:
          - $ref: '#/components/schemas/__listOfListedEntitlement'
          description: A list of entitlements that have been granted to you from other
            Amazon Web Services accounts.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a ListEntitlements request with `MaxResults` set
            at 5\. The service returns the first batch of results (up to 5) and a
            NextToken value. To see the next batch of results, you can submit the
            `ListEntitlements` request a second time and specify the `NextToken` value.'
    ListFlowsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return per API request.


            For example, you submit a `ListFlows` request with MaxResults set at 5.
            Although 20 items match your request, the service returns no more than
            the first 5 items. (The service also returns a `NextToken` value that
            you can use to fetch the next batch of results.)


            The service might return fewer results than the `MaxResults` value. If
            `MaxResults` is not included in the request, the service defaults to pagination
            with a maximum of 10 results per page.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListFlows` request with MaxResults set at 5.
            The service returns the first batch of results (up to 5) and a `NextToken`
            value. To see the next batch of results, you can submit the `ListFlows`
            request a second time and specify the `NextToken` value.'
    ListFlowsResponse:
      type: object
      properties:
        Flows:
          allOf:
          - $ref: '#/components/schemas/__listOfListedFlow'
          description: A list of flow summaries.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListFlows` request with MaxResults set at 5.
            The service returns the first batch of results (up to 5) and a `NextToken`
            value. To see the next batch of results, you can submit the `ListFlows`
            request a second time and specify the `NextToken` value.'
    ListGatewayInstancesRequest:
      type: object
      properties:
        FilterArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Filter the list results to display only the instances associated
            with the selected Gateway ARN.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return per API request.


            For example, you submit a ListInstances request with `MaxResults` set
            at 5. Although 20 items match your request, the service returns no more
            than the first 5 items. (The service also returns a `NextToken` value
            that you can use to fetch the next batch of results.)


            The service might return fewer results than the `MaxResults` value. If
            `MaxResults` is not included in the request, the service defaults to pagination
            with a maximum of 10 results per page.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListInstances` request with `MaxResults` set
            at 5. The service returns the first batch of results (up to 5) and a `NextToken`
            value. To see the next batch of results, you can submit the `ListInstances`
            request a second time and specify the `NextToken` value.'
    ListGatewayInstancesResponse:
      type: object
      properties:
        Instances:
          allOf:
          - $ref: '#/components/schemas/__listOfListedGatewayInstance'
          description: A list of instance summaries.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListInstances` request with MaxResults set
            at 5. The service returns the first batch of results (up to 5) and a `NextToken`
            value. To see the next batch of results, you can submit the `ListInstances`
            request a second time and specify the `NextToken` value.'
    ListGatewaysRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return per API request.


            For example, you submit a `ListGateways` request with `MaxResults` set
            at 5. Although 20 items match your request, the service returns no more
            than the first 5 items. (The service also returns a `NextToken` value
            that you can use to fetch the next batch of results.)


            The service might return fewer results than the `MaxResults` value. If
            `MaxResults` is not included in the request, the service defaults to pagination
            with a maximum of 10 results per page.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListGateways` request with `MaxResults` set
            at 5. The service returns the first batch of results (up to 5) and a `NextToken`
            value. To see the next batch of results, you can submit the `ListGateways`
            request a second time and specify the `NextToken` value.'
    ListGatewaysResponse:
      type: object
      properties:
        Gateways:
          allOf:
          - $ref: '#/components/schemas/__listOfListedGateway'
          description: A list of gateway summaries.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListGateways` request with `MaxResults` set
            at 5. The service returns the first batch of results (up to 5) and a `NextToken`
            value. To see the next batch of results, you can submit the `ListGateways`
            request a second time and specify the `NextToken` value.'
    ListOfferingsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return per API request.


            For example, you submit a `ListOfferings` request with `MaxResults` set
            at 5. Although 20 items match your request, the service returns no more
            than the first 5 items. (The service also returns a `NextToken` value
            that you can use to fetch the next batch of results.)


            The service might return fewer results than the `MaxResults` value. If
            `MaxResults` is not included in the request, the service defaults to pagination
            with a maximum of 10 results per page.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListOfferings` request with `MaxResults` set
            at 5. The service returns the first batch of results (up to 5) and a `NextToken`
            value. To see the next batch of results, you can submit the `ListOfferings`
            request a second time and specify the `NextToken` value.'
    ListOfferingsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListOfferings` request with `MaxResults` set
            at 5. The service returns the first batch of results (up to 5) and a `NextToken`
            value. To see the next batch of results, you can submit the `ListOfferings`
            request a second time and specify the `NextToken` value.'
        Offerings:
          allOf:
          - $ref: '#/components/schemas/__listOfOffering'
          description: A list of offerings that are available to this account in the
            current Amazon Web Services Region.
    ListReservationsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return per API request.


            For example, you submit a `ListReservations` request with `MaxResults`
            set at 5. Although 20 items match your request, the service returns no
            more than the first 5 items. (The service also returns a NextToken value
            that you can use to fetch the next batch of results.)


            The service might return fewer results than the `MaxResults` value. If
            `MaxResults` is not included in the request, the service defaults to pagination
            with a maximum of 10 results per page.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListReservations` request with `MaxResults`
            set at 5. The service returns the first batch of results (up to 5) and
            a `NextToken` value. To see the next batch of results, you can submit
            the `ListOfferings` request a second time and specify the `NextToken`
            value.'
    ListReservationsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The token that identifies the batch of results that you want
            to see.


            For example, you submit a `ListReservations` request with `MaxResults`
            set at 5. The service returns the first batch of results (up to 5) and
            a `NextToken` value. To see the next batch of results, you can submit
            the `ListReservations` request a second time and specify the `NextToken`
            value.'
        Reservations:
          allOf:
          - $ref: '#/components/schemas/__listOfReservation'
          description: A list of all reservations that have been purchased by this
            account in the current Amazon Web Services Region.
    ListTagsForResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) that identifies the MediaConnect
            resource for which to list the tags.
      required:
      - ResourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/__mapOfString'
          description: A map from tag keys to values. Tag keys can have a maximum
            character length of 128 characters, and tag values can have a maximum
            length of 256 characters.
    ListedBridge:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the bridge.
        BridgeState:
          allOf:
          - $ref: '#/components/schemas/BridgeState'
          description: The state of the bridge.
        BridgeType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the bridge.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the bridge.
        PlacementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the gateway associated with the bridge.
      required:
      - BridgeArn
      - BridgeState
      - BridgeType
      - Name
      - PlacementArn
      description: Displays details of the selected bridge.
    ListedEntitlement:
      type: object
      properties:
        DataTransferSubscriberFeePercent:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Percentage from 0-100 of the data transfer cost to be billed
            to the subscriber.
        EntitlementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the entitlement.
        EntitlementName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the entitlement.
      required:
      - EntitlementArn
      - EntitlementName
      description: An entitlement that has been granted to you from other Amazon Web
        Services accounts.
    ListedFlow:
      type: object
      properties:
        AvailabilityZone:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Availability Zone that the flow was created in.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the flow.
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the flow.
        SourceType:
          allOf:
          - $ref: '#/components/schemas/SourceType'
          description: The type of source. This value is either owned (originated
            somewhere other than an MediaConnect flow owned by another Amazon Web
            Services account) or entitled (originated at a MediaConnect flow owned
            by another Amazon Web Services account).
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The current status of the flow.
        Maintenance:
          allOf:
          - $ref: '#/components/schemas/Maintenance'
          description: The maintenance settings for the flow.
      required:
      - AvailabilityZone
      - Description
      - FlowArn
      - Name
      - SourceType
      - Status
      description: A summary of a flow, including its ARN, Availability Zone, and
        source type.
    ListedGateway:
      type: object
      properties:
        GatewayArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the gateway.
        GatewayState:
          allOf:
          - $ref: '#/components/schemas/GatewayState'
          description: The status of the gateway.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the gateway.
      required:
      - GatewayArn
      - GatewayState
      - Name
      description: A summary of a gateway, including its name, ARN, and status.
    ListedGatewayInstance:
      type: object
      properties:
        GatewayArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the gateway.
        GatewayInstanceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the instance.
        InstanceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The managed instance ID generated by the SSM install. This
            will begin with "mi-".
        InstanceState:
          allOf:
          - $ref: '#/components/schemas/InstanceState'
          description: The status of the instance.
      required:
      - GatewayArn
      - GatewayInstanceArn
      - InstanceId
      description: A summary of an instance.
    Maintenance:
      type: object
      properties:
        MaintenanceDay:
          allOf:
          - $ref: '#/components/schemas/MaintenanceDay'
          description: A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
        MaintenanceDeadline:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Maintenance has to be performed before this deadline in
            ISO UTC format. Example: 2021-01-30T08:30:00Z.'
        MaintenanceScheduledDate:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'A scheduled date in ISO UTC format when the maintenance will
            happen. Use YYYY-MM-DD format. Example: 2021-01-30.'
        MaintenanceStartHour:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'UTC time when the maintenance will happen. Use 24-hour HH:MM
            format. Minutes must be 00. Example: 13:00. The default value is 02:00.'
      description: The maintenance setting of a flow.
    MaintenanceDay:
      type: string
      enum:
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday
      - Saturday
      - Sunday
    MaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    MediaStream:
      type: object
      properties:
        Attributes:
          allOf:
          - $ref: '#/components/schemas/MediaStreamAttributes'
          description: Attributes that are related to the media stream.
        ClockRate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The sample rate for the stream. This value is measured in Hz.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description that can help you quickly identify what your
            media stream is used for.
        Fmt:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The format type number (sometimes referred to as RTP payload
            type) of the media stream. MediaConnect assigns this value to the media
            stream. For ST 2110 JPEG XS outputs, you need to provide this value to
            the receiver.
        MediaStreamId:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: A unique identifier for the media stream.
        MediaStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A name that helps you distinguish one media stream from another.
        MediaStreamType:
          allOf:
          - $ref: '#/components/schemas/MediaStreamType'
          description: The type of media stream.
        VideoFormat:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resolution of the video.
      required:
      - Fmt
      - MediaStreamId
      - MediaStreamName
      - MediaStreamType
      description: A media stream represents one component of your content, such as
        video, audio, or ancillary data. After you add a media stream to your flow,
        you can associate it with sources and outputs that use the ST 2110 JPEG XS
        or CDI protocol.
    MediaStreamAttributes:
      type: object
      properties:
        Fmtp:
          allOf:
          - $ref: '#/components/schemas/Fmtp'
          description: The settings that you want to use to define the media stream.
        Lang:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The audio language, in a format that is recognized by the receiver.
      required:
      - Fmtp
      description: Attributes that are related to the media stream.
    MediaStreamAttributesRequest:
      type: object
      properties:
        Fmtp:
          allOf:
          - $ref: '#/components/schemas/FmtpRequest'
          description: The settings that you want to use to define the media stream.
        Lang:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The audio language, in a format that is recognized by the receiver.
      description: Attributes that are related to the media stream.
    MediaStreamOutputConfiguration:
      type: object
      properties:
        DestinationConfigurations:
          allOf:
          - $ref: '#/components/schemas/__listOfDestinationConfiguration'
          description: The transport parameters that are associated with each outbound
            media stream.
        EncodingName:
          allOf:
          - $ref: '#/components/schemas/EncodingName'
          description: The format that was used to encode the data. For ancillary
            data streams, set the encoding name to smpte291. For audio streams, set
            the encoding name to pcm. For video, 2110 streams, set the encoding name
            to raw. For video, JPEG XS streams, set the encoding name to jxsv.
        EncodingParameters:
          allOf:
          - $ref: '#/components/schemas/EncodingParameters'
          description: A collection of parameters that determine how MediaConnect
            will convert the content. These fields only apply to outputs on flows
            that have a CDI source.
        MediaStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the media stream.
      required:
      - EncodingName
      - MediaStreamName
      description: The media stream that is associated with the output, and the parameters
        for that association.
    MediaStreamOutputConfigurationRequest:
      type: object
      properties:
        DestinationConfigurations:
          allOf:
          - $ref: '#/components/schemas/__listOfDestinationConfigurationRequest'
          description: The media streams that you want to associate with the output.
        EncodingName:
          allOf:
          - $ref: '#/components/schemas/EncodingName'
          description: The format that will be used to encode the data. For ancillary
            data streams, set the encoding name to smpte291. For audio streams, set
            the encoding name to pcm. For video, 2110 streams, set the encoding name
            to raw. For video, JPEG XS streams, set the encoding name to jxsv.
        EncodingParameters:
          allOf:
          - $ref: '#/components/schemas/EncodingParametersRequest'
          description: A collection of parameters that determine how MediaConnect
            will convert the content. These fields only apply to outputs on flows
            that have a CDI source.
        MediaStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the media stream that is associated with the output.
      required:
      - EncodingName
      - MediaStreamName
      description: The media stream that you want to associate with the output, and
        the parameters for that association.
    MediaStreamSourceConfiguration:
      type: object
      properties:
        EncodingName:
          allOf:
          - $ref: '#/components/schemas/EncodingName'
          description: The format that was used to encode the data. For ancillary
            data streams, set the encoding name to smpte291. For audio streams, set
            the encoding name to pcm. For video, 2110 streams, set the encoding name
            to raw. For video, JPEG XS streams, set the encoding name to jxsv.
        InputConfigurations:
          allOf:
          - $ref: '#/components/schemas/__listOfInputConfiguration'
          description: The media streams that you want to associate with the source.
        MediaStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A name that helps you distinguish one media stream from another.
      required:
      - EncodingName
      - MediaStreamName
      description: The media stream that is associated with the source, and the parameters
        for that association.
    MediaStreamSourceConfigurationRequest:
      type: object
      properties:
        EncodingName:
          allOf:
          - $ref: '#/components/schemas/EncodingName'
          description: The format that was used to encode the data. For ancillary
            data streams, set the encoding name to smpte291. For audio streams, set
            the encoding name to pcm. For video, 2110 streams, set the encoding name
            to raw. For video, JPEG XS streams, set the encoding name to jxsv.
        InputConfigurations:
          allOf:
          - $ref: '#/components/schemas/__listOfInputConfigurationRequest'
          description: The media streams that you want to associate with the source.
        MediaStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the media stream.
      required:
      - EncodingName
      - MediaStreamName
      description: The media stream that you want to associate with the source, and
        the parameters for that association.
    MediaStreamType:
      type: string
      enum:
      - video
      - audio
      - ancillary-data
    MessageDetail:
      type: object
      properties:
        Code:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error code.
        Message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The specific error message that MediaConnect returns to help
            you understand the reason that the request did not succeed.
        ResourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the resource.
      required:
      - Code
      - Message
      description: The details of an error message.
    Messages:
      type: object
      properties:
        Errors:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: A list of errors that might have been generated from processes
            on this flow.
      required:
      - Errors
      description: Messages that provide the state of the flow.
    MonitoringConfig:
      type: object
      properties:
        ThumbnailState:
          allOf:
          - $ref: '#/components/schemas/ThumbnailState'
          description: Indicates whether thumbnails are enabled or disabled.
        AudioMonitoringSettings:
          allOf:
          - $ref: '#/components/schemas/__listOfAudioMonitoringSetting'
          description: Contains the settings for audio stream metrics monitoring.
        ContentQualityAnalysisState:
          allOf:
          - $ref: '#/components/schemas/ContentQualityAnalysisState'
          description: Indicates whether content quality analysis is enabled or disabled.
        VideoMonitoringSettings:
          allOf:
          - $ref: '#/components/schemas/__listOfVideoMonitoringSetting'
          description: Contains the settings for video stream metrics monitoring.
      description: The settings for source monitoring.
    MulticastSourceSettings:
      type: object
      properties:
        MulticastSourceIp:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address of the source for source-specific multicast
            (SSM).
      description: The settings related to the multicast source.
    NdiConfig:
      type: object
      properties:
        NdiState:
          allOf:
          - $ref: '#/components/schemas/NdiState'
          description: A setting that controls whether NDI outputs can be used in
            the flow. Must be ENABLED to add NDI outputs. Default is DISABLED.
        MachineName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A prefix for the names of the NDI sources that the flow creates.
            If a custom name isn't specified, MediaConnect generates a unique 12-character
            ID as the prefix.
        NdiDiscoveryServers:
          allOf:
          - $ref: '#/components/schemas/__listOfNdiDiscoveryServerConfig'
          description: A list of up to three NDI discovery server configurations.
            While not required by the API, this configuration is necessary for NDI
            functionality to work properly.
      description: Specifies the configuration settings for NDI outputs. Required
        when the flow includes NDI outputs.
    NdiDiscoveryServerConfig:
      type: object
      properties:
        DiscoveryServerAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique network address of the NDI discovery server.
        DiscoveryServerPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port for the NDI discovery server. Defaults to 5959 if
            a custom port isn't specified.
        VpcInterfaceAdapter:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the Virtual Private Cloud (VPC) network
            interface used by the flow.
      required:
      - DiscoveryServerAddress
      - VpcInterfaceAdapter
      description: Specifies the configuration settings for individual NDI discovery
        servers. A maximum of 3 servers is allowed.
    NdiState:
      type: string
      enum:
      - ENABLED
      - DISABLED
    NetworkInterfaceType:
      type: string
      enum:
      - ena
      - efa
    NotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: One or more of the resources in the request does not exist in the
        system.
    Offering:
      type: object
      properties:
        CurrencyCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of currency that is used for billing. The currencyCode
            used for all reservations is US dollars.
        Duration:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The length of time that your reservation would be active.
        DurationUnits:
          allOf:
          - $ref: '#/components/schemas/DurationUnits'
          description: The unit of measurement for the duration of the offering.
        OfferingArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) that MediaConnect assigns to
            the offering.
        OfferingDescription:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the offering.
        PricePerUnit:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The cost of a single unit. This value, in combination with
            priceUnits, makes up the rate.
        PriceUnits:
          allOf:
          - $ref: '#/components/schemas/PriceUnits'
          description: The unit of measurement that is used for billing. This value,
            in combination with pricePerUnit, makes up the rate.
        ResourceSpecification:
          allOf:
          - $ref: '#/components/schemas/ResourceSpecification'
          description: A definition of the amount of outbound bandwidth that you would
            be reserving if you purchase the offering.
      required:
      - CurrencyCode
      - Duration
      - DurationUnits
      - OfferingArn
      - OfferingDescription
      - PricePerUnit
      - PriceUnits
      - ResourceSpecification
      description: A savings plan that reserves a certain amount of outbound bandwidth
        usage at a discounted rate each month over a period of time.
    OfferingArn:
      type: string
    Output:
      type: object
      properties:
        DataTransferSubscriberFeePercent:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Percentage from 0-100 of the data transfer cost to be billed
            to the subscriber.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the output.
        Destination:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The address where you want to send the output.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/Encryption'
          description: The type of key used for the encryption. If no keyType is provided,
            the service will use the default setting (static-key).
        EntitlementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the entitlement on the originator''s flow. This
            value is relevant only on entitled flows.
        ListenerAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address that the receiver requires in order to establish
            a connection with the flow. For public networking, the ListenerAddress
            is represented by the elastic IP address of the flow. For private networking,
            the ListenerAddress is represented by the elastic network interface IP
            address of the VPC. This field applies only to outputs that use the Zixi
            pull or SRT listener protocol.
        MediaLiveInputArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The input ARN of the MediaLive channel. This parameter is relevant
            only for outputs that were added by creating a MediaLive input.
        MediaStreamOutputConfigurations:
          allOf:
          - $ref: '#/components/schemas/__listOfMediaStreamOutputConfiguration'
          description: The configuration for each media stream that is associated
            with the output.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the output. This value must be unique within the
            current flow.
        OutputArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the output.
        Port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port to use when content is distributed to this output.
        Transport:
          allOf:
          - $ref: '#/components/schemas/Transport'
          description: Attributes related to the transport stream that are used in
            the output.
        VpcInterfaceAttachment:
          allOf:
          - $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this output.
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the bridge added to this output.
        BridgePorts:
          allOf:
          - $ref: '#/components/schemas/__listOfInteger'
          description: The bridge output ports currently in use.
        OutputStatus:
          allOf:
          - $ref: '#/components/schemas/OutputStatus'
          description: An indication of whether the output is transmitting data or
            not.
      required:
      - Name
      - OutputArn
      description: The settings for an output.
    OutputStatus:
      type: string
      enum:
      - ENABLED
      - DISABLED
    PriceUnits:
      type: string
      enum:
      - HOURLY
    Protocol:
      type: string
      enum:
      - zixi-push
      - rtp-fec
      - rtp
      - zixi-pull
      - rist
      - st2110-jpegxs
      - cdi
      - srt-listener
      - srt-caller
      - fujitsu-qos
      - udp
      - ndi-speed-hq
    PurchaseOfferingRequest:
      type: object
      properties:
        OfferingArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the offering.
        ReservationName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name that you want to use for the reservation.
        Start:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The date and time that you want the reservation to begin,
            in Coordinated Universal Time (UTC).


            You can specify any date and time between 12:00am on the first day of
            the current month to the current time on today''s date, inclusive. Specify
            the start in a 24-hour notation. Use the following format: `YYYY-MM-DDTHH:mm:SSZ`,
            where `T` and `Z` are literal characters. For example, to specify 11:30pm
            on March 5, 2020, enter `2020-03-05T23:30:00Z`.'
      required:
      - OfferingArn
      - ReservationName
      - Start
    PurchaseOfferingResponse:
      type: object
      properties:
        Reservation:
          allOf:
          - $ref: '#/components/schemas/Reservation'
          description: The details of the reservation that you just created when you
            purchased the offering.
    Range:
      type: string
      enum:
      - NARROW
      - FULL
      - FULLPROTECT
    RemoveBridgeOutputRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/BridgeArn'
          description: The Amazon Resource Name (ARN) of the bridge that you want
            to update.
        OutputName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the bridge output that you want to remove.
      required:
      - BridgeArn
      - OutputName
    RemoveBridgeOutputResponse:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the bridge from which the output was removed.
        OutputName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the bridge output that was removed.
    RemoveBridgeSourceRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/BridgeArn'
          description: The Amazon Resource Name (ARN) of the bridge that you want
            to update.
        SourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the bridge source that you want to remove.
      required:
      - BridgeArn
      - SourceName
    RemoveBridgeSourceResponse:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the bridge from which the source was removed.
        SourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the bridge source that was removed.
    RemoveFlowMediaStreamRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            update.
        MediaStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the media stream that you want to remove.
      required:
      - FlowArn
      - MediaStreamName
    RemoveFlowMediaStreamResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that was updated.
        MediaStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the media stream that was removed.
    RemoveFlowOutputRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            remove an output from.
        OutputArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the output that you want to remove.
      required:
      - FlowArn
      - OutputArn
    RemoveFlowOutputResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that the output was removed from.
        OutputArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the output that was removed.
    RemoveFlowSourceRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            remove a source from.
        SourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the source that you want to remove.
      required:
      - FlowArn
      - SourceArn
    RemoveFlowSourceResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that the source was removed from.
        SourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the source that was removed.
    RemoveFlowVpcInterfaceRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            remove a VPC interface from.
        VpcInterfaceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the VPC interface that you want to remove.
      required:
      - FlowArn
      - VpcInterfaceName
    RemoveFlowVpcInterfaceResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that is associated with the VPC interface
            you removed.
        NonDeletedNetworkInterfaceIds:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: IDs of network interfaces associated with the removed VPC interface
            that MediaConnect was unable to remove.
        VpcInterfaceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the VPC interface that was removed.
    Reservation:
      type: object
      properties:
        CurrencyCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of currency that is used for billing. The currencyCode
            used for your reservation is US dollars.
        Duration:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The length of time that this reservation is active. MediaConnect
            defines this value in the offering.
        DurationUnits:
          allOf:
          - $ref: '#/components/schemas/DurationUnits'
          description: The unit of measurement for the duration of the reservation.
            MediaConnect defines this value in the offering.
        End:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The day and time that this reservation expires. This value
            is calculated based on the start date and time that you set and the offering's
            duration.
        OfferingArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) that MediaConnect assigns to
            the offering.
        OfferingDescription:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the offering. MediaConnect defines this value
            in the offering.
        PricePerUnit:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The cost of a single unit. This value, in combination with
            priceUnits, makes up the rate. MediaConnect defines this value in the
            offering.
        PriceUnits:
          allOf:
          - $ref: '#/components/schemas/PriceUnits'
          description: The unit of measurement that is used for billing. This value,
            in combination with pricePerUnit, makes up the rate. MediaConnect defines
            this value in the offering.
        ReservationArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) that MediaConnect assigns to
            the reservation when you purchase an offering.
        ReservationName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name that you assigned to the reservation when you purchased
            the offering.
        ReservationState:
          allOf:
          - $ref: '#/components/schemas/ReservationState'
          description: The status of your reservation.
        ResourceSpecification:
          allOf:
          - $ref: '#/components/schemas/ResourceSpecification'
          description: A definition of the amount of outbound bandwidth that you would
            be reserving if you purchase the offering. MediaConnect defines the values
            that make up the resourceSpecification in the offering.
        Start:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The day and time that the reservation becomes active. You set
            this value when you purchase the offering.
      required:
      - CurrencyCode
      - Duration
      - DurationUnits
      - End
      - OfferingArn
      - OfferingDescription
      - PricePerUnit
      - PriceUnits
      - ReservationArn
      - ReservationName
      - ReservationState
      - ResourceSpecification
      - Start
      description: A pricing agreement for a discounted rate for a specific outbound
        bandwidth that your MediaConnect account will use each month over a specific
        time period. The discounted rate in the reservation applies to outbound bandwidth
        for all flows from your account until your account reaches the amount of bandwidth
        in your reservation. If you use more outbound bandwidth than the agreed upon
        amount in a single month, the overage is charged at the on-demand rate.
    ReservationArn:
      type: string
    ReservationState:
      type: string
      enum:
      - ACTIVE
      - EXPIRED
      - PROCESSING
      - CANCELED
    ResourceSpecification:
      type: object
      properties:
        ReservedBitrate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The amount of outbound bandwidth that is discounted in the
            offering.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of resource and the unit that is being billed for.
      required:
      - ResourceType
      description: A definition of what is being billed for, including the type and
        amount.
    ResourceType:
      type: string
      enum:
      - Mbps_Outbound_Bandwidth
    RevokeFlowEntitlementRequest:
      type: object
      properties:
        EntitlementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the entitlement that you
            want to revoke.
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The flow that you want to revoke an entitlement from.
      required:
      - EntitlementArn
      - FlowArn
    RevokeFlowEntitlementResponse:
      type: object
      properties:
        EntitlementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the entitlement that was revoked.
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that the entitlement was revoked from.
    ScanMode:
      type: string
      enum:
      - progressive
      - interlace
      - progressive-segmented-frame
    ServiceUnavailableException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: The service is currently unavailable or busy.
    SetGatewayBridgeSourceRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the bridge feeding this flow.
        VpcInterfaceAttachment:
          allOf:
          - $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this bridge
            source.
      required:
      - BridgeArn
      description: The source configuration for cloud flows receiving a stream from
        a bridge.
    SetSourceRequest:
      type: object
      properties:
        Decryption:
          allOf:
          - $ref: '#/components/schemas/Encryption'
          description: 'The type of encryption that is used on the content ingested
            from this source. Allowable encryption types: static-key.'
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description for the source. This value is not used or seen
            outside of the current MediaConnect account.
        EntitlementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the entitlement that allows you to subscribe to
            this flow. The entitlement is set by the flow originator, and the ARN
            is generated as part of the originator's flow.
        IngestPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that the flow will be listening on for incoming content.
        MaxBitrate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The smoothing max bitrate (in bps) for RIST, RTP, and RTP-FEC
            streams.
        MaxLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum latency in milliseconds. This parameter applies
            only to RIST-based and Zixi-based streams.
        MaxSyncBuffer:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The size of the buffer (in milliseconds) to use to sync incoming
            source data.
        MediaStreamSourceConfigurations:
          allOf:
          - $ref: '#/components/schemas/__listOfMediaStreamSourceConfigurationRequest'
          description: The media streams that are associated with the source, and
            the parameters for those associations.
        MinLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The minimum latency in milliseconds for SRT-based streams.
            In streams that use the SRT protocol, this value that you set on your
            MediaConnect source or output represents the minimal potential latency
            of that connection. The latency of the stream is set to the highest number
            between the sender’s minimum latency and the receiver’s minimum latency.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the source.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The protocol that is used by the source.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
        SenderControlPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that the flow uses to send outbound requests to initiate
            connection with the sender.
        SenderIpAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address that the flow communicates with to initiate
            connection with the sender.
        SourceListenerAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Source IP or domain name for SRT-caller protocol.
        SourceListenerPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Source port for SRT-caller protocol.
        StreamId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The stream ID that you want to use for this transport. This
            parameter applies only to Zixi and SRT caller-based streams.
        VpcInterfaceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the VPC interface to use for this source.
        WhitelistCidr:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The range of IP addresses that should be allowed to contribute
            content to your source. These IP addresses should be in the form of a
            Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        GatewayBridgeSource:
          allOf:
          - $ref: '#/components/schemas/SetGatewayBridgeSourceRequest'
          description: The source configuration for cloud flows receiving a stream
            from a bridge.
      description: The settings for the source of the flow.
    SilentAudio:
      type: object
      properties:
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          description: Indicates whether the `SilentAudio` metric is enabled or disabled.
        ThresholdSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies the number of consecutive seconds of silence that
            triggers an event or alert.
      description: Configures settings for the `SilentAudio` metric.
    Source:
      type: object
      properties:
        DataTransferSubscriberFeePercent:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Percentage from 0-100 of the data transfer cost to be billed
            to the subscriber.
        Decryption:
          allOf:
          - $ref: '#/components/schemas/Encryption'
          description: The type of encryption that is used on the content ingested
            from this source.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description for the source. This value is not used or seen
            outside of the current MediaConnect account.
        EntitlementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the entitlement that allows you to subscribe to
            content that comes from another Amazon Web Services account. The entitlement
            is set by the content originator and the ARN is generated as part of the
            originator's flow.
        IngestIp:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address that the flow will be listening on for incoming
            content.
        IngestPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that the flow will be listening on for incoming content.
        MediaStreamSourceConfigurations:
          allOf:
          - $ref: '#/components/schemas/__listOfMediaStreamSourceConfiguration'
          description: The media streams that are associated with the source, and
            the parameters for those associations.
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the source.
        SenderControlPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The IP address that the flow communicates with to initiate
            connection with the sender.
        SenderIpAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The port that the flow uses to send outbound requests to initiate
            connection with the sender.
        SourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the source.
        Transport:
          allOf:
          - $ref: '#/components/schemas/Transport'
          description: Attributes related to the transport stream that are used in
            the source.
        VpcInterfaceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the VPC interface that is used for this source.
        WhitelistCidr:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The range of IP addresses that should be allowed to contribute
            content to your source. These IP addresses should be in the form of a
            Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        GatewayBridgeSource:
          allOf:
          - $ref: '#/components/schemas/GatewayBridgeSource'
          description: The source configuration for cloud flows receiving a stream
            from a bridge.
      required:
      - Name
      - SourceArn
      description: The settings for the source of the flow.
    SourcePriority:
      type: object
      properties:
        PrimarySource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the source you choose as the primary source for
            this flow.
      description: The priority you want to assign to a source. You can have a primary
        stream and a backup stream or two equally prioritized streams.
    SourceType:
      type: string
      enum:
      - OWNED
      - ENTITLED
    StartFlowRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            start.
      required:
      - FlowArn
    StartFlowResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that you started.
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the flow when the `StartFlow` process begins.
    State:
      type: string
      enum:
      - ENABLED
      - DISABLED
    Status:
      type: string
      enum:
      - STANDBY
      - ACTIVE
      - UPDATING
      - DELETING
      - STARTING
      - STOPPING
      - ERROR
    StopFlowRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            stop.
      required:
      - FlowArn
    StopFlowResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that you stopped.
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the flow when the `StopFlow` process begins.
    TagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) that identifies the MediaConnect
            resource to which to add tags.
        Tags:
          allOf:
          - $ref: '#/components/schemas/__mapOfString'
          description: A map from tag keys to values. Tag keys can have a maximum
            character length of 128 characters, and tag values can have a maximum
            length of 256 characters.
      required:
      - ResourceArn
      - Tags
    Tcs:
      type: string
      enum:
      - SDR
      - PQ
      - HLG
      - LINEAR
      - BT2100LINPQ
      - BT2100LINHLG
      - ST2065-1
      - ST428-1
      - DENSITY
    ThumbnailDetails:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that DescribeFlowSourceThumbnail was performed
            on.
        Thumbnail:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Thumbnail Base64 string.
        ThumbnailMessages:
          allOf:
          - $ref: '#/components/schemas/__listOfMessageDetail'
          description: Status code and messages about the flow source thumbnail.
        Timecode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Timecode of thumbnail.
        Timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when thumbnail was generated.
      required:
      - FlowArn
      - ThumbnailMessages
      description: The details of the thumbnail, including thumbnail base64 string,
        timecode and the time when thumbnail was generated.
    ThumbnailState:
      type: string
      enum:
      - ENABLED
      - DISABLED
    TooManyRequestsException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: The request was denied due to request throttling.
    Transport:
      type: object
      properties:
        CidrAllowList:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: The range of IP addresses that should be allowed to initiate
            output requests to this flow. These IP addresses should be in the form
            of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16
        MaxBitrate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The smoothing max bitrate (in bps) for RIST, RTP, and RTP-FEC
            streams.
        MaxLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum latency in milliseconds. This parameter applies
            only to RIST-based and Zixi-based streams.
        MaxSyncBuffer:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The size of the buffer (in milliseconds) to use to sync incoming
            source data.
        MinLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The minimum latency in milliseconds for SRT-based streams.
            In streams that use the SRT protocol, this value that you set on your
            MediaConnect source or output represents the minimal potential latency
            of that connection. The latency of the stream is set to the highest number
            between the sender’s minimum latency and the receiver’s minimum latency.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The protocol that is used by the source or output.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
        RemoteId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The remote ID for the Zixi-pull stream.
        SenderControlPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that the flow uses to send outbound requests to initiate
            connection with the sender.
        SenderIpAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address that the flow communicates with to initiate
            connection with the sender.
        SmoothingLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC
            streams.
        SourceListenerAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Source IP or domain name for SRT-caller protocol.
        SourceListenerPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Source port for SRT-caller protocol.
        StreamId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The stream ID that you want to use for this transport. This
            parameter applies only to Zixi and SRT caller-based streams.
        NdiSpeedHqQuality:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: A quality setting for the NDI Speed HQ encoder.
        NdiProgramName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A suffix for the names of the NDI sources that the flow creates.
            If a custom name isn't specified, MediaConnect uses the output name.
      required:
      - Protocol
      description: Attributes related to the transport stream that are used in a source
        or output.
    TransportMediaInfo:
      type: object
      properties:
        Programs:
          allOf:
          - $ref: '#/components/schemas/__listOfTransportStreamProgram'
          description: The list of transport stream programs in the current flow's
            source.
      required:
      - Programs
      description: The metadata of the transport stream in the current flow's source.
    TransportStream:
      type: object
      properties:
        Channels:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of channels in the audio stream.
        Codec:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The codec used by the stream.
        FrameRate:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The frame rate used by the video stream.
        FrameResolution:
          allOf:
          - $ref: '#/components/schemas/FrameResolution'
          description: The frame resolution used by the video stream.
        Pid:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The Packet ID (PID) as it is reported in the Program Map Table.
        SampleRate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The sample rate used by the audio stream.
        SampleSize:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The sample bit size used by the audio stream.
        StreamType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Stream Type as it is reported in the Program Map Table.
      required:
      - Pid
      - StreamType
      description: The metadata of an elementary transport stream.
    TransportStreamProgram:
      type: object
      properties:
        PcrPid:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The Program Clock Reference (PCR) Packet ID (PID) as it is
            reported in the Program Association Table.
        ProgramName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The program name as it is reported in the Program Association
            Table.
        ProgramNumber:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The program number as it is reported in the Program Association
            Table.
        ProgramPid:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The program Packet ID (PID) as it is reported in the Program
            Association Table.
        Streams:
          allOf:
          - $ref: '#/components/schemas/__listOfTransportStream'
          description: The list of elementary transport streams in the program. The
            list includes video, audio, and data streams.
      required:
      - PcrPid
      - ProgramNumber
      - ProgramPid
      - Streams
      description: The metadata of a single transport stream program.
    UntagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to untag.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: The keys of the tags to be removed.
      required:
      - ResourceArn
      - TagKeys
    UpdateBridgeFlowSourceRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) that identifies the MediaConnect
            resource from which to delete tags.
        FlowVpcInterfaceAttachment:
          allOf:
          - $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this source.
      description: Update the flow source of the bridge.
    UpdateBridgeNetworkOutputRequest:
      type: object
      properties:
        IpAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network output IP Address.
        NetworkName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network output's gateway network name.
        Port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The network output port.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The network output protocol.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
        Ttl:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The network output TTL.
      description: Update an existing network output.
    UpdateBridgeNetworkSourceRequest:
      type: object
      properties:
        MulticastIp:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network source multicast IP.
        MulticastSourceSettings:
          allOf:
          - $ref: '#/components/schemas/MulticastSourceSettings'
          description: The settings related to the multicast source.
        NetworkName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The network source's gateway network name.
        Port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The network source port.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The network source protocol.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
      description: Update the network source of the bridge.
    UpdateBridgeOutputRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/BridgeArn'
          description: The Amazon Resource Name (ARN) of the bridge that you want
            to update.
        NetworkOutput:
          allOf:
          - $ref: '#/components/schemas/UpdateBridgeNetworkOutputRequest'
          description: The network of the bridge output.
        OutputName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Tname of the output that you want to update.
      required:
      - BridgeArn
      - OutputName
    UpdateBridgeOutputResponse:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the bridge that was updated.
        Output:
          allOf:
          - $ref: '#/components/schemas/BridgeOutput'
          description: The bridge output that was updated.
    UpdateBridgeRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/BridgeArn'
          description: TheAmazon Resource Name (ARN) of the bridge that you want to
            update.
        EgressGatewayBridge:
          allOf:
          - $ref: '#/components/schemas/UpdateEgressGatewayBridgeRequest'
          description: A cloud-to-ground bridge. The content comes from an existing
            MediaConnect flow and is delivered to your premises.
        IngressGatewayBridge:
          allOf:
          - $ref: '#/components/schemas/UpdateIngressGatewayBridgeRequest'
          description: A ground-to-cloud bridge. The content originates at your premises
            and is delivered to the cloud.
        SourceFailoverConfig:
          allOf:
          - $ref: '#/components/schemas/UpdateFailoverConfig'
          description: The settings for source failover.
      required:
      - BridgeArn
    UpdateBridgeResponse:
      type: object
      properties:
        Bridge:
          allOf:
          - $ref: '#/components/schemas/Bridge'
          description: The bridge that was updated.
    UpdateBridgeSourceRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/BridgeArn'
          description: The Amazon Resource Name (ARN) of the bridge that you want
            to update.
        FlowSource:
          allOf:
          - $ref: '#/components/schemas/UpdateBridgeFlowSourceRequest'
          description: The name of the flow that you want to update.
        NetworkSource:
          allOf:
          - $ref: '#/components/schemas/UpdateBridgeNetworkSourceRequest'
          description: The network for the bridge source.
        SourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the source that you want to update.
      required:
      - BridgeArn
      - SourceName
    UpdateBridgeSourceResponse:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the updated bridge source.
        Source:
          allOf:
          - $ref: '#/components/schemas/BridgeSource'
          description: The updated bridge source.
    UpdateBridgeStateRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/BridgeArn'
          description: The Amazon Resource Name (ARN) of the bridge that you want
            to update the state of.
        DesiredState:
          allOf:
          - $ref: '#/components/schemas/DesiredState'
          description: The desired state for the bridge.
      required:
      - BridgeArn
      - DesiredState
    UpdateBridgeStateResponse:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the updated bridge.
        DesiredState:
          allOf:
          - $ref: '#/components/schemas/DesiredState'
          description: The new state of the bridge.
    UpdateEgressGatewayBridgeRequest:
      type: object
      properties:
        MaxBitrate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum expected bitrate (in bps).
      description: Update an existing egress-type bridge.
    UpdateEncryption:
      type: object
      properties:
        Algorithm:
          allOf:
          - $ref: '#/components/schemas/Algorithm'
          description: The type of algorithm that is used for the encryption (such
            as aes128, aes192, or aes256).
        ConstantInitializationVector:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A 128-bit, 16-byte hex value represented by a 32-character
            string, to be used with the key for encrypting content. This parameter
            is not valid for static key encryption.
        DeviceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of one of the devices that you configured with your
            digital rights management (DRM) platform key provider. This parameter
            is required for SPEKE encryption and is not valid for static key encryption.
        KeyType:
          allOf:
          - $ref: '#/components/schemas/KeyType'
          description: The type of key that is used for the encryption. If no keyType
            is provided, the service will use the default setting (static-key).
        Region:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Region that the API Gateway proxy endpoint
            was created in. This parameter is required for SPEKE encryption and is
            not valid for static key encryption.
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An identifier for the content. The service sends this value
            to the key server to identify the current endpoint. The resource ID is
            also known as the content ID. This parameter is required for SPEKE encryption
            and is not valid for static key encryption.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the role that you created during setup (when you
            set up MediaConnect as a trusted entity).
        SecretArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the secret that you created in Secrets Manager to
            store the encryption key. This parameter is required for static key encryption
            and is not valid for SPEKE encryption.
        Url:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The URL from the API Gateway proxy that you set up to talk
            to your key server. This parameter is required for SPEKE encryption and
            is not valid for static key encryption.
      description: Information about the encryption of the flow.
    UpdateFailoverConfig:
      type: object
      properties:
        FailoverMode:
          allOf:
          - $ref: '#/components/schemas/FailoverMode'
          description: The type of failover you choose for this flow. MERGE combines
            the source streams into a single stream, allowing graceful recovery from
            any single-source loss. FAILOVER allows switching between different streams.
        RecoveryWindow:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Recovery window time to look for dash-7 packets.
        SourcePriority:
          allOf:
          - $ref: '#/components/schemas/SourcePriority'
          description: The priority you want to assign to a source. You can have a
            primary stream and a backup stream or two equally prioritized streams.
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The state of source failover on the flow. If the state is inactive,
            the flow can have only one source. If the state is active, the flow can
            have one or two sources.
      description: The settings for source failover.
    UpdateFlowEntitlementRequest:
      type: object
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the entitlement. This description appears
            only on the MediaConnect console and will not be seen by the subscriber
            or end user.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/UpdateEncryption'
          description: 'The type of encryption that will be used on the output associated
            with this entitlement. Allowable encryption types: static-key, speke.'
        EntitlementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the entitlement that you
            want to update.
        EntitlementStatus:
          allOf:
          - $ref: '#/components/schemas/EntitlementStatus'
          description: An indication of whether you want to enable the entitlement
            to allow access, or disable it to stop streaming content to the subscriber’s
            flow temporarily. If you don’t specify the `entitlementStatus` field in
            your request, MediaConnect leaves the value unchanged.
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The ARN of the flow that is associated with the entitlement
            that you want to update.
        Subscribers:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: The Amazon Web Services account IDs that you want to share
            your content with. The receiving accounts (subscribers) will be allowed
            to create their own flow using your content as the source.
      required:
      - EntitlementArn
      - FlowArn
    UpdateFlowEntitlementResponse:
      type: object
      properties:
        Entitlement:
          allOf:
          - $ref: '#/components/schemas/Entitlement'
          description: The new configuration of the entitlement that you updated.
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that this entitlement was granted on.
    UpdateFlowMediaStreamRequest:
      type: object
      properties:
        Attributes:
          allOf:
          - $ref: '#/components/schemas/MediaStreamAttributesRequest'
          description: The attributes that you want to assign to the media stream.
        ClockRate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The sample rate for the stream. This value in measured in kHz.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description that can help you quickly identify what your
            media stream is used for.
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that is associated
            with the media stream that you updated.
        MediaStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The media stream that you updated.
        MediaStreamType:
          allOf:
          - $ref: '#/components/schemas/MediaStreamType'
          description: The type of media stream.
        VideoFormat:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resolution of the video.
      required:
      - FlowArn
      - MediaStreamName
    UpdateFlowMediaStreamResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that is associated with the media stream
            that you updated.
        MediaStream:
          allOf:
          - $ref: '#/components/schemas/MediaStream'
          description: The media stream that you updated.
    UpdateFlowOutputRequest:
      type: object
      properties:
        CidrAllowList:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: The range of IP addresses that should be allowed to initiate
            output requests to this flow. These IP addresses should be in the form
            of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the output. This description appears only
            on the MediaConnect console and will not be seen by the end user.
        Destination:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address where you want to send the output.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/UpdateEncryption'
          description: 'The type of key used for the encryption. If no `keyType` is
            provided, the service will use the default setting (static-key). Allowable
            encryption types: static-key.'
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that is associated
            with the output that you want to update.
        MaxLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum latency in milliseconds. This parameter applies
            only to RIST-based and Zixi-based streams.
        MediaStreamOutputConfigurations:
          allOf:
          - $ref: '#/components/schemas/__listOfMediaStreamOutputConfigurationRequest'
          description: The media streams that are associated with the output, and
            the parameters for those associations.
        MinLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The minimum latency in milliseconds for SRT-based streams.
            In streams that use the SRT protocol, this value that you set on your
            MediaConnect source or output represents the minimal potential latency
            of that connection. The latency of the stream is set to the highest number
            between the sender’s minimum latency and the receiver’s minimum latency.
        OutputArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the output that you want to update.
        Port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port to use when content is distributed to this output.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The protocol to use for the output.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
        RemoteId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The remote ID for the Zixi-pull stream.
        SenderControlPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that the flow uses to send outbound requests to initiate
            connection with the sender.
        SenderIpAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address that the flow communicates with to initiate
            connection with the sender.
        SmoothingLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC
            streams.
        StreamId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The stream ID that you want to use for this transport. This
            parameter applies only to Zixi and SRT caller-based streams.
        VpcInterfaceAttachment:
          allOf:
          - $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this output.
        OutputStatus:
          allOf:
          - $ref: '#/components/schemas/OutputStatus'
          description: An indication of whether the output should transmit data or
            not. If you don't specify the `outputStatus` field in your request, MediaConnect
            leaves the value unchanged.
        NdiProgramName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A suffix for the names of the NDI sources that the flow creates.
            If a custom name isn't specified, MediaConnect uses the output name.
        NdiSpeedHqQuality:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: A quality setting for the NDI Speed HQ encoder.
      required:
      - FlowArn
      - OutputArn
    UpdateFlowOutputResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that is associated with the updated output.
        Output:
          allOf:
          - $ref: '#/components/schemas/Output'
          description: The new settings of the output that you updated.
    UpdateFlowRequest:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            update.
        SourceFailoverConfig:
          allOf:
          - $ref: '#/components/schemas/UpdateFailoverConfig'
          description: The settings for source failover.
        Maintenance:
          allOf:
          - $ref: '#/components/schemas/UpdateMaintenance'
          description: The maintenance setting of the flow.
        SourceMonitoringConfig:
          allOf:
          - $ref: '#/components/schemas/MonitoringConfig'
          description: The settings for source monitoring.
        NdiConfig:
          allOf:
          - $ref: '#/components/schemas/NdiConfig'
          description: Specifies the configuration settings for NDI outputs. Required
            when the flow includes NDI outputs.
      required:
      - FlowArn
    UpdateFlowResponse:
      type: object
      properties:
        Flow:
          allOf:
          - $ref: '#/components/schemas/Flow'
          description: The updated flow.
    UpdateFlowSourceRequest:
      type: object
      properties:
        Decryption:
          allOf:
          - $ref: '#/components/schemas/UpdateEncryption'
          description: The type of encryption that is used on the content ingested
            from the source.
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description of the source. This description is not visible
            outside of the current Amazon Web Services account.
        EntitlementArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the entitlement that allows
            you to subscribe to the flow. The entitlement is set by the content originator,
            and the ARN is generated as part of the originator's flow.
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The ARN of the flow that you want to update.
        IngestPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that the flow listens on for incoming content. If
            the protocol of the source is Zixi, the port must be set to 2088.
        MaxBitrate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum bitrate for RIST, RTP, and RTP-FEC streams.
        MaxLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum latency in milliseconds. This parameter applies
            only to RIST-based and Zixi-based streams.
        MaxSyncBuffer:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The size of the buffer (in milliseconds) to use to sync incoming
            source data.
        MediaStreamSourceConfigurations:
          allOf:
          - $ref: '#/components/schemas/__listOfMediaStreamSourceConfigurationRequest'
          description: The media stream that is associated with the source, and the
            parameters for that association.
        MinLatency:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The minimum latency in milliseconds for SRT-based streams.
            In streams that use the SRT protocol, this value that you set on your
            MediaConnect source or output represents the minimal potential latency
            of that connection. The latency of the stream is set to the highest number
            between the sender’s minimum latency and the receiver’s minimum latency.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: 'The protocol that the source uses to deliver the content to
            MediaConnect.


            Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This
            reference is maintained for legacy purposes only.'
        SenderControlPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port that the flow uses to send outbound requests to initiate
            connection with the sender.
        SenderIpAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IP address that the flow communicates with to initiate
            connection with the sender.
        SourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the source that you want to update.
        SourceListenerAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The source IP or domain name for SRT-caller protocol.
        SourceListenerPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Source port for SRT-caller protocol.
        StreamId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The stream ID that you want to use for this transport. This
            parameter applies only to Zixi and SRT caller-based streams.
        VpcInterfaceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the VPC interface that you want to send your output
            to.
        WhitelistCidr:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The range of IP addresses that are allowed to contribute content
            to your source. Format the IP addresses as a Classless Inter-Domain Routing
            (CIDR) block; for example, 10.0.0.0/16.
        GatewayBridgeSource:
          allOf:
          - $ref: '#/components/schemas/UpdateGatewayBridgeSourceRequest'
          description: The source configuration for cloud flows receiving a stream
            from a bridge.
      required:
      - FlowArn
      - SourceArn
    UpdateFlowSourceResponse:
      type: object
      properties:
        FlowArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the flow that you was updated.
        Source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: The details of the sources that are assigned to the flow.
    UpdateGatewayBridgeSourceRequest:
      type: object
      properties:
        BridgeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the bridge feeding this flow.
        VpcInterfaceAttachment:
          allOf:
          - $ref: '#/components/schemas/VpcInterfaceAttachment'
          description: The name of the VPC interface attachment to use for this bridge
            source.
      description: The source configuration for cloud flows receiving a stream from
        a bridge.
    UpdateGatewayInstanceRequest:
      type: object
      properties:
        BridgePlacement:
          allOf:
          - $ref: '#/components/schemas/BridgePlacement'
          description: The state of the instance. `ACTIVE` or `INACTIVE`.
        GatewayInstanceArn:
          allOf:
          - $ref: '#/components/schemas/GatewayInstanceArn'
          description: The Amazon Resource Name (ARN) of the gateway instance that
            you want to update.
      required:
      - GatewayInstanceArn
    UpdateGatewayInstanceResponse:
      type: object
      properties:
        BridgePlacement:
          allOf:
          - $ref: '#/components/schemas/BridgePlacement'
          description: The state of the instance. `ACTIVE` or `INACTIVE`.
        GatewayInstanceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the instance that was updated.
    UpdateIngressGatewayBridgeRequest:
      type: object
      properties:
        MaxBitrate:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum expected bitrate (in bps).
        MaxOutputs:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of expected outputs.
      description: Update an existing ingress-type bridge.
    UpdateMaintenance:
      type: object
      properties:
        MaintenanceDay:
          allOf:
          - $ref: '#/components/schemas/MaintenanceDay'
          description: A day of a week when the maintenance will happen.
        MaintenanceScheduledDate:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'A scheduled date in ISO UTC format when the maintenance will
            happen. Use YYYY-MM-DD format. Example: 2021-01-30.'
        MaintenanceStartHour:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'UTC time when the maintenance will happen. Use 24-hour HH:MM
            format. Minutes must be 00. Example: 13:00. The default value is 02:00.'
      description: Update maintenance setting for a flow.
    VideoMonitoringSetting:
      type: object
      properties:
        BlackFrames:
          allOf:
          - $ref: '#/components/schemas/BlackFrames'
          description: Detects video frames that are black.
        FrozenFrames:
          allOf:
          - $ref: '#/components/schemas/FrozenFrames'
          description: Detects video frames that have not changed.
      description: Specifies the configuration for video stream metrics monitoring.
    VpcInterface:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Immutable and has to be a unique against other VpcInterfaces
            in this Flow.
        NetworkInterfaceIds:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: IDs of the network interfaces created in customer's account
            by MediaConnect.
        NetworkInterfaceType:
          allOf:
          - $ref: '#/components/schemas/NetworkInterfaceType'
          description: The type of network interface.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A role Arn MediaConnect can assume to create ENIs in your account.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: Security Group IDs to be used on ENI.
        SubnetId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Subnet must be in the AZ of the Flow.
      required:
      - Name
      - NetworkInterfaceIds
      - NetworkInterfaceType
      - RoleArn
      - SecurityGroupIds
      - SubnetId
      description: The settings for a VPC source.
    VpcInterfaceAttachment:
      type: object
      properties:
        VpcInterfaceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the VPC interface to use for this resource.
      description: The settings for attaching a VPC interface to an resource.
    VpcInterfaceRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name for the VPC interface. This name must be unique within
            the flow.
        NetworkInterfaceType:
          allOf:
          - $ref: '#/components/schemas/NetworkInterfaceType'
          description: The type of network interface.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the role that you created
            when you set up MediaConnect as a trusted service.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/__listOfString'
          description: A virtual firewall to control inbound and outbound traffic.
        SubnetId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The subnet IDs that you want to use for your VPC interface.
            A range of IP addresses in your VPC. When you create your VPC, you specify
            a range of IPv4 addresses for the VPC in the form of a Classless Inter-Domain
            Routing (CIDR) block; for example, 10.0.0.0/16. This is the primary CIDR
            block for your VPC. When you create a subnet for your VPC, you specify
            the CIDR block for the subnet, which is a subset of the VPC CIDR block.
            The subnets that you use across all VPC interfaces on the flow must be
            in the same Availability Zone as the flow.
      required:
      - Name
      - RoleArn
      - SecurityGroupIds
      - SubnetId
      description: The details of the VPC interfaces that you want to add to the flow.
    __listOfAddBridgeOutputRequest:
      type: array
      items:
        $ref: '#/components/schemas/AddBridgeOutputRequest'
    __listOfAddBridgeSourceRequest:
      type: array
      items:
        $ref: '#/components/schemas/AddBridgeSourceRequest'
    __listOfAddMediaStreamRequest:
      type: array
      items:
        $ref: '#/components/schemas/AddMediaStreamRequest'
    __listOfAddOutputRequest:
      type: array
      items:
        $ref: '#/components/schemas/AddOutputRequest'
    __listOfAudioMonitoringSetting:
      type: array
      items:
        $ref: '#/components/schemas/AudioMonitoringSetting'
    __listOfBridgeOutput:
      type: array
      items:
        $ref: '#/components/schemas/BridgeOutput'
    __listOfBridgeSource:
      type: array
      items:
        $ref: '#/components/schemas/BridgeSource'
    __listOfDestinationConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/DestinationConfiguration'
    __listOfDestinationConfigurationRequest:
      type: array
      items:
        $ref: '#/components/schemas/DestinationConfigurationRequest'
    __listOfEntitlement:
      type: array
      items:
        $ref: '#/components/schemas/Entitlement'
    __listOfGatewayNetwork:
      type: array
      items:
        $ref: '#/components/schemas/GatewayNetwork'
    __listOfGrantEntitlementRequest:
      type: array
      items:
        $ref: '#/components/schemas/GrantEntitlementRequest'
    __listOfInputConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/InputConfiguration'
    __listOfInputConfigurationRequest:
      type: array
      items:
        $ref: '#/components/schemas/InputConfigurationRequest'
    __listOfInteger:
      type: array
      items:
        type: integer
    __listOfListedBridge:
      type: array
      items:
        $ref: '#/components/schemas/ListedBridge'
    __listOfListedEntitlement:
      type: array
      items:
        $ref: '#/components/schemas/ListedEntitlement'
    __listOfListedFlow:
      type: array
      items:
        $ref: '#/components/schemas/ListedFlow'
    __listOfListedGateway:
      type: array
      items:
        $ref: '#/components/schemas/ListedGateway'
    __listOfListedGatewayInstance:
      type: array
      items:
        $ref: '#/components/schemas/ListedGatewayInstance'
    __listOfMediaStream:
      type: array
      items:
        $ref: '#/components/schemas/MediaStream'
    __listOfMediaStreamOutputConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/MediaStreamOutputConfiguration'
    __listOfMediaStreamOutputConfigurationRequest:
      type: array
      items:
        $ref: '#/components/schemas/MediaStreamOutputConfigurationRequest'
    __listOfMediaStreamSourceConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/MediaStreamSourceConfiguration'
    __listOfMediaStreamSourceConfigurationRequest:
      type: array
      items:
        $ref: '#/components/schemas/MediaStreamSourceConfigurationRequest'
    __listOfMessageDetail:
      type: array
      items:
        $ref: '#/components/schemas/MessageDetail'
    __listOfNdiDiscoveryServerConfig:
      type: array
      items:
        $ref: '#/components/schemas/NdiDiscoveryServerConfig'
    __listOfOffering:
      type: array
      items:
        $ref: '#/components/schemas/Offering'
    __listOfOutput:
      type: array
      items:
        $ref: '#/components/schemas/Output'
    __listOfReservation:
      type: array
      items:
        $ref: '#/components/schemas/Reservation'
    __listOfSetSourceRequest:
      type: array
      items:
        $ref: '#/components/schemas/SetSourceRequest'
    __listOfSource:
      type: array
      items:
        $ref: '#/components/schemas/Source'
    __listOfString:
      type: array
      items:
        type: string
    __listOfTransportStream:
      type: array
      items:
        $ref: '#/components/schemas/TransportStream'
    __listOfTransportStreamProgram:
      type: array
      items:
        $ref: '#/components/schemas/TransportStreamProgram'
    __listOfVideoMonitoringSetting:
      type: array
      items:
        $ref: '#/components/schemas/VideoMonitoringSetting'
    __listOfVpcInterface:
      type: array
      items:
        $ref: '#/components/schemas/VpcInterface'
    __listOfVpcInterfaceRequest:
      type: array
      items:
        $ref: '#/components/schemas/VpcInterfaceRequest'
    __mapOfString:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
