openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: lex_models_v2
  x-aws-serviceName: lexmodelsv2
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-08-07'
  title: Amazon Lex Model Building V2
  description: ""
servers:
- description: The Amazon Lex Model Building V2 regional endpoint
  url: https://models-v2-lex.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchcreate:
    put:
      operationId: BatchCreateCustomVocabularyItem
      description: |-
        Create a batch of custom vocabulary items for a given bot locale's custom vocabulary.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customVocabularyItemList:
                  $ref: '#/components/schemas/CreateCustomVocabularyItemsList'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchdelete:
    post:
      operationId: BatchDeleteCustomVocabularyItem
      description: |-
        Delete a batch of custom vocabulary items for a given bot locale's custom vocabulary.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customVocabularyItemList:
                  $ref: '#/components/schemas/DeleteCustomVocabularyItemsList'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchupdate:
    put:
      operationId: BatchUpdateCustomVocabularyItem
      description: |-
        Update a batch of custom vocabulary items for a given bot locale's custom vocabulary.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customVocabularyItemList:
                  $ref: '#/components/schemas/UpdateCustomVocabularyItemsList'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}:
    post:
      operationId: BuildBotLocale
      description: |-
        Builds a bot, its intents, and its slot types into a specific locale. A bot can be built into multiple locales. At runtime the locale is used to choose a specific build of the bot.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteBotLocale
      description: |-
        Removes a locale from a bot.

        When you delete a locale, all intents, slots, and slot types defined for the locale are also deleted.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeBotLocale
      description: |-
        Describes the settings that a bot has for a specific locale.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateBotLocale
      description: |-
        Updates the settings that a bot has for a specific locale.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                nluIntentConfidenceThreshold:
                  $ref: '#/components/schemas/ConfidenceThreshold'
                voiceSettings:
                  $ref: '#/components/schemas/VoiceSettings'
                generativeAISettings:
                  $ref: '#/components/schemas/GenerativeAISettings'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots:
    put:
      operationId: CreateBot
      description: |-
        Creates an Amazon Lex conversational bot.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
                dataPrivacy:
                  $ref: '#/components/schemas/DataPrivacy'
                idleSessionTTLInSeconds:
                  $ref: '#/components/schemas/SessionTTL'
                botTags:
                  $ref: '#/components/schemas/TagMap'
                testBotAliasTags:
                  $ref: '#/components/schemas/TagMap'
                botType:
                  $ref: '#/components/schemas/BotType'
                botMembers:
                  $ref: '#/components/schemas/BotMembers'
                errorLogSettings:
                  $ref: '#/components/schemas/ErrorLogSettings'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListBots
      description: |-
        Gets a list of available bots.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/BotSortBy'
                filters:
                  $ref: '#/components/schemas/BotFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botaliases:
    put:
      operationId: CreateBotAlias
      description: |-
        Creates an alias for the specified version of a bot. Use an alias to enable you to change the version of a bot without updating applications that use the bot.

        For example, you can create an alias called "PROD" that your applications use to call the Amazon Lex bot.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botAliasName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                botVersion:
                  $ref: '#/components/schemas/NumericalBotVersion'
                botAliasLocaleSettings:
                  $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
                conversationLogSettings:
                  $ref: '#/components/schemas/ConversationLogSettings'
                sentimentAnalysisSettings:
                  $ref: '#/components/schemas/SentimentAnalysisSettings'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListBotAliases
      description: |-
        Gets a list of aliases for the specified bot.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales:
    put:
      operationId: CreateBotLocale
      description: |-
        Creates a locale in the bot. The locale contains the intents and slot types that the bot uses in conversations with users in the specified language and locale. You must add a locale to a bot before you can add intents and slot types to the bot.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                localeId:
                  $ref: '#/components/schemas/LocaleId'
                description:
                  $ref: '#/components/schemas/Description'
                nluIntentConfidenceThreshold:
                  $ref: '#/components/schemas/ConfidenceThreshold'
                voiceSettings:
                  $ref: '#/components/schemas/VoiceSettings'
                generativeAISettings:
                  $ref: '#/components/schemas/GenerativeAISettings'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListBotLocales
      description: |-
        Gets a list of locales for the specified bot.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/BotLocaleSortBy'
                filters:
                  $ref: '#/components/schemas/BotLocaleFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/replicas:
    put:
      operationId: CreateBotReplica
      description: |-
        Action to create a replication of the source bot in the secondary region.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                replicaRegion:
                  $ref: '#/components/schemas/ReplicaRegion'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListBotReplicas
      description: |-
        The action to list the replicated bots.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions:
    put:
      operationId: CreateBotVersion
      description: |-
        Creates an immutable version of the bot. When you create the first version of a bot, Amazon Lex sets the version number to 1. Subsequent bot versions increase in an increment of 1. The version number will always represent the total number of versions created of the bot, not the current number of versions. If a bot version is deleted, that bot version number will not be reused.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                botVersionLocaleSpecification:
                  $ref: '#/components/schemas/BotVersionLocaleSpecification'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListBotVersions
      description: |-
        Gets information about all of the versions of a bot.

        The `ListBotVersions` operation returns a summary of each version of a bot. For example, if a bot has three numbered versions, the `ListBotVersions` operation returns for summaries, one for each numbered version and one for the `DRAFT` version.

        The `ListBotVersions` operation always returns at least one version, the `DRAFT` version.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/BotVersionSortBy'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /exports:
    put:
      operationId: CreateExport
      description: |-
        Creates a zip archive containing the contents of a bot or a bot locale. The archive contains a directory structure that contains JSON files that define the bot.

        You can create an archive that contains the complete definition of a bot, or you can specify that the archive contain only the definition of a single bot locale.

        For more information about exporting bots, and about the structure of the export archive, see [ Importing and exporting bots ](https://docs.aws.amazon.com/lexv2/latest/dg/importing-exporting.html)
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceSpecification:
                  $ref: '#/components/schemas/ExportResourceSpecification'
                fileFormat:
                  $ref: '#/components/schemas/ImportExportFileFormat'
                filePassword:
                  $ref: '#/components/schemas/ImportExportFilePassword'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListExports
      description: |-
        Lists the exports for a bot, bot locale, or custom vocabulary. Exports are kept in the list for 7 days.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botId:
                  $ref: '#/components/schemas/Id'
                botVersion:
                  $ref: '#/components/schemas/BotVersion'
                sortBy:
                  $ref: '#/components/schemas/ExportSortBy'
                filters:
                  $ref: '#/components/schemas/ExportFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                localeId:
                  $ref: '#/components/schemas/LocaleId'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents:
    put:
      operationId: CreateIntent
      description: |-
        Creates an intent.

        To define the interaction between the user and your bot, you define one or more intents. For example, for a pizza ordering bot you would create an `OrderPizza` intent.

        When you create an intent, you must provide a name. You can optionally provide the following:

          * Sample utterances. For example, "I want to order a pizza" and "Can I order a pizza." You can't provide utterances for built-in intents.

          * Information to be gathered. You specify slots for the information that you bot requests from the user. You can specify standard slot types, such as date and time, or custom slot types for your application.

          * How the intent is fulfilled. You can provide a Lambda function or configure the intent to return the intent information to your client application. If you use a Lambda function, Amazon Lex invokes the function when all of the intent information is available.

          * A confirmation prompt to send to the user to confirm an intent. For example, "Shall I order your pizza?"

          * A conclusion statement to send to the user after the intent is fulfilled. For example, "I ordered your pizza."

          * A follow-up prompt that asks the user for additional activity. For example, "Do you want a drink with your pizza?"
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                intentName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                parentIntentSignature:
                  $ref: '#/components/schemas/IntentSignature'
                sampleUtterances:
                  $ref: '#/components/schemas/SampleUtterancesList'
                dialogCodeHook:
                  $ref: '#/components/schemas/DialogCodeHookSettings'
                fulfillmentCodeHook:
                  $ref: '#/components/schemas/FulfillmentCodeHookSettings'
                intentConfirmationSetting:
                  $ref: '#/components/schemas/IntentConfirmationSetting'
                intentClosingSetting:
                  $ref: '#/components/schemas/IntentClosingSetting'
                inputContexts:
                  $ref: '#/components/schemas/InputContextsList'
                outputContexts:
                  $ref: '#/components/schemas/OutputContextsList'
                kendraConfiguration:
                  $ref: '#/components/schemas/KendraConfiguration'
                initialResponseSetting:
                  $ref: '#/components/schemas/InitialResponseSetting'
                qnAIntentConfiguration:
                  $ref: '#/components/schemas/QnAIntentConfiguration'
                qInConnectIntentConfiguration:
                  $ref: '#/components/schemas/QInConnectIntentConfiguration'
      responses:
        '200': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListIntents
      description: |-
        Get a list of intents that meet the specified criteria.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/IntentSortBy'
                filters:
                  $ref: '#/components/schemas/IntentFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /policy/{resourceArn}:
    post:
      operationId: CreateResourcePolicy
      description: |-
        Creates a new resource policy with the specified policy statements.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policy:
                  $ref: '#/components/schemas/Policy'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteResourcePolicy
      description: |-
        Removes an existing policy from a bot or bot alias. If the resource doesn't have a policy attached, Amazon Lex returns an exception.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      - name: expectedRevisionId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RevisionId'
      responses:
        '204': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: DescribeResourcePolicy
      description: |-
        Gets the resource policy and policy revision for a bot or bot alias.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: UpdateResourcePolicy
      description: |-
        Replaces the existing resource policy for a bot or bot alias with a new one. If the policy doesn't exist, Amazon Lex returns an exception.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      - name: expectedRevisionId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RevisionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policy:
                  $ref: '#/components/schemas/Policy'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /policy/{resourceArn}/statements:
    post:
      operationId: CreateResourcePolicyStatement
      description: |-
        Adds a new resource policy statement to a bot or bot alias. If a resource policy exists, the statement is added to the current resource policy. If a policy doesn't exist, a new policy is created.

        You can't create a resource policy statement that allows cross-account access.

        You need to add the `CreateResourcePolicy` or `UpdateResourcePolicy` action to the bot role in order to call the API.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      - name: expectedRevisionId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RevisionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                statementId:
                  $ref: '#/components/schemas/Name'
                effect:
                  $ref: '#/components/schemas/Effect'
                principal:
                  $ref: '#/components/schemas/PrincipalList'
                action:
                  $ref: '#/components/schemas/OperationList'
                condition:
                  $ref: '#/components/schemas/ConditionMap'
      responses:
        '200': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots:
    put:
      operationId: CreateSlot
      description: |-
        Creates a slot in an intent. A slot is a variable needed to fulfill an intent. For example, an `OrderPizza` intent might need slots for size, crust, and number of pizzas. For each slot, you define one or more utterances that Amazon Lex uses to elicit a response from the user.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: intentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slotName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                slotTypeId:
                  $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
                valueElicitationSetting:
                  $ref: '#/components/schemas/SlotValueElicitationSetting'
                obfuscationSetting:
                  $ref: '#/components/schemas/ObfuscationSetting'
                multipleValuesSetting:
                  $ref: '#/components/schemas/MultipleValuesSetting'
                subSlotSetting:
                  $ref: '#/components/schemas/SubSlotSetting'
      responses:
        '200': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListSlots
      description: |-
        Gets a list of slots that match the specified criteria.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: intentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/SlotSortBy'
                filters:
                  $ref: '#/components/schemas/SlotFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes:
    put:
      operationId: CreateSlotType
      description: |-
        Creates a custom slot type

        To create a custom slot type, specify a name for the slot type and a set of enumeration values, the values that a slot of this type can assume.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slotTypeName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                slotTypeValues:
                  $ref: '#/components/schemas/SlotTypeValues'
                valueSelectionSetting:
                  $ref: '#/components/schemas/SlotValueSelectionSetting'
                parentSlotTypeSignature:
                  $ref: '#/components/schemas/SlotTypeSignature'
                externalSourceSetting:
                  $ref: '#/components/schemas/ExternalSourceSetting'
                compositeSlotTypeSetting:
                  $ref: '#/components/schemas/CompositeSlotTypeSetting'
      responses:
        '200': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListSlotTypes
      description: |-
        Gets a list of slot types that match the specified criteria.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/SlotTypeSortBy'
                filters:
                  $ref: '#/components/schemas/SlotTypeFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testsets/{testSetId}/testsetdiscrepancy:
    post:
      operationId: CreateTestSetDiscrepancyReport
      description: |-
        Create a report that describes the differences between the bot and the test set.
      parameters:
      - name: testSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                target:
                  $ref: '#/components/schemas/TestSetDiscrepancyReportResourceTarget'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /createuploadurl:
    post:
      operationId: CreateUploadUrl
      description: |-
        Gets a pre-signed S3 write URL that you use to upload the zip archive when importing a bot or a bot locale.
      parameters: []
      responses:
        '200': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}:
    delete:
      operationId: DeleteBot
      description: |-
        Deletes all versions of a bot, including the `Draft` version. To delete a specific version, use the `DeleteBotVersion` operation.

        When you delete a bot, all of the resources contained in the bot are also deleted. Deleting a bot removes all locales, intents, slot, and slot types defined for the bot.

        If a bot has an alias, the `DeleteBot` operation returns a `ResourceInUseException` exception. If you want to delete the bot and the alias, set the `skipResourceInUseCheck` parameter to `true`.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: skipResourceInUseCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SkipResourceInUseCheck'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeBot
      description: |-
        Provides metadata information about a bot.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateBot
      description: |-
        Updates the configuration of an existing bot.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
                dataPrivacy:
                  $ref: '#/components/schemas/DataPrivacy'
                idleSessionTTLInSeconds:
                  $ref: '#/components/schemas/SessionTTL'
                botType:
                  $ref: '#/components/schemas/BotType'
                botMembers:
                  $ref: '#/components/schemas/BotMembers'
                errorLogSettings:
                  $ref: '#/components/schemas/ErrorLogSettings'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botaliases/{botAliasId}:
    delete:
      operationId: DeleteBotAlias
      description: |-
        Deletes the specified bot alias.
      parameters:
      - name: botAliasId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotAliasId'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: skipResourceInUseCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SkipResourceInUseCheck'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeBotAlias
      description: |-
        Get information about a specific bot alias.
      parameters:
      - name: botAliasId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotAliasId'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateBotAlias
      description: |-
        Updates the configuration of an existing bot alias.
      parameters:
      - name: botAliasId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotAliasId'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botAliasName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                botVersion:
                  $ref: '#/components/schemas/BotVersion'
                botAliasLocaleSettings:
                  $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
                conversationLogSettings:
                  $ref: '#/components/schemas/ConversationLogSettings'
                sentimentAnalysisSettings:
                  $ref: '#/components/schemas/SentimentAnalysisSettings'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/replicas/{replicaRegion}:
    delete:
      operationId: DeleteBotReplica
      description: |-
        The action to delete the replicated bot in the secondary region.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: replicaRegion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReplicaRegion'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeBotReplica
      description: |-
        Monitors the bot replication status through the UI console.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: replicaRegion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReplicaRegion'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}:
    delete:
      operationId: DeleteBotVersion
      description: |-
        Deletes a specific version of a bot. To delete all versions of a bot, use the [DeleteBot](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DeleteBot.html) operation.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NumericalBotVersion'
      - name: skipResourceInUseCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SkipResourceInUseCheck'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeBotVersion
      description: |-
        Provides metadata about a version of a bot.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NumericalBotVersion'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary:
    delete:
      operationId: DeleteCustomVocabulary
      description: |-
        Removes a custom vocabulary from the specified locale in the specified bot.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /exports/{exportId}:
    delete:
      operationId: DeleteExport
      description: |-
        Removes a previous export and the associated files stored in an S3 bucket.
      parameters:
      - name: exportId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '202': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeExport
      description: |-
        Gets information about a specific export.
      parameters:
      - name: exportId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateExport
      description: |-
        Updates the password used to protect an export zip archive.

        The password is not required. If you don't supply a password, Amazon Lex generates a zip file that is not protected by a password. This is the archive that is available at the pre-signed S3 URL provided by the [DescribeExport](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html) operation.
      parameters:
      - name: exportId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filePassword:
                  $ref: '#/components/schemas/ImportExportFilePassword'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /imports/{importId}:
    delete:
      operationId: DeleteImport
      description: |-
        Removes a previous import and the associated file stored in an S3 bucket.
      parameters:
      - name: importId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '202': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeImport
      description: |-
        Gets information about a specific import.
      parameters:
      - name: importId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}:
    delete:
      operationId: DeleteIntent
      description: |-
        Removes the specified intent.

        Deleting an intent also deletes the slots associated with the intent.
      parameters:
      - name: intentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      responses:
        '204': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeIntent
      description: |-
        Returns metadata about an intent.
      parameters:
      - name: intentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateIntent
      description: |-
        Updates the settings for an intent.
      parameters:
      - name: intentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                intentName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                parentIntentSignature:
                  $ref: '#/components/schemas/IntentSignature'
                sampleUtterances:
                  $ref: '#/components/schemas/SampleUtterancesList'
                dialogCodeHook:
                  $ref: '#/components/schemas/DialogCodeHookSettings'
                fulfillmentCodeHook:
                  $ref: '#/components/schemas/FulfillmentCodeHookSettings'
                slotPriorities:
                  $ref: '#/components/schemas/SlotPrioritiesList'
                intentConfirmationSetting:
                  $ref: '#/components/schemas/IntentConfirmationSetting'
                intentClosingSetting:
                  $ref: '#/components/schemas/IntentClosingSetting'
                inputContexts:
                  $ref: '#/components/schemas/InputContextsList'
                outputContexts:
                  $ref: '#/components/schemas/OutputContextsList'
                kendraConfiguration:
                  $ref: '#/components/schemas/KendraConfiguration'
                initialResponseSetting:
                  $ref: '#/components/schemas/InitialResponseSetting'
                qnAIntentConfiguration:
                  $ref: '#/components/schemas/QnAIntentConfiguration'
                qInConnectIntentConfiguration:
                  $ref: '#/components/schemas/QInConnectIntentConfiguration'
      responses:
        '200': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /policy/{resourceArn}/statements/{statementId}:
    delete:
      operationId: DeleteResourcePolicyStatement
      description: |-
        Deletes a policy statement from a resource policy. If you delete the last statement from a policy, the policy is deleted. If you specify a statement ID that doesn't exist in the policy, or if the bot or bot alias doesn't have a policy attached, Amazon Lex returns an exception.

        You need to add the `DeleteResourcePolicy` or `UpdateResourcePolicy` action to the bot role in order to call the API.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      - name: statementId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Name'
      - name: expectedRevisionId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RevisionId'
      responses:
        '204': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}:
    delete:
      operationId: DeleteSlot
      description: |-
        Deletes the specified slot from an intent.
      parameters:
      - name: slotId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: intentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '204': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeSlot
      description: |-
        Gets metadata information about a slot.
      parameters:
      - name: slotId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: intentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateSlot
      description: |-
        Updates the settings for a slot.
      parameters:
      - name: slotId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: intentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slotName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                slotTypeId:
                  $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
                valueElicitationSetting:
                  $ref: '#/components/schemas/SlotValueElicitationSetting'
                obfuscationSetting:
                  $ref: '#/components/schemas/ObfuscationSetting'
                multipleValuesSetting:
                  $ref: '#/components/schemas/MultipleValuesSetting'
                subSlotSetting:
                  $ref: '#/components/schemas/SubSlotSetting'
      responses:
        '200': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}:
    delete:
      operationId: DeleteSlotType
      description: |-
        Deletes a slot type from a bot locale.

        If a slot is using the slot type, Amazon Lex throws a `ResourceInUseException` exception. To avoid the exception, set the `skipResourceInUseCheck` parameter to `true`.
      parameters:
      - name: slotTypeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: skipResourceInUseCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SkipResourceInUseCheck'
      responses:
        '204': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeSlotType
      description: |-
        Gets metadata information about a slot type.
      parameters:
      - name: slotTypeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateSlotType
      description: |-
        Updates the configuration of an existing slot type.
      parameters:
      - name: slotTypeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slotTypeName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                slotTypeValues:
                  $ref: '#/components/schemas/SlotTypeValues'
                valueSelectionSetting:
                  $ref: '#/components/schemas/SlotValueSelectionSetting'
                parentSlotTypeSignature:
                  $ref: '#/components/schemas/SlotTypeSignature'
                externalSourceSetting:
                  $ref: '#/components/schemas/ExternalSourceSetting'
                compositeSlotTypeSetting:
                  $ref: '#/components/schemas/CompositeSlotTypeSetting'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testsets/{testSetId}:
    delete:
      operationId: DeleteTestSet
      description: |-
        The action to delete the selected test set.
      parameters:
      - name: testSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '204': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeTestSet
      description: |-
        Gets metadata information about the test set.
      parameters:
      - name: testSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateTestSet
      description: |-
        The action to update the test set.
      parameters:
      - name: testSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                testSetName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
      responses:
        '200': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/utterances:
    delete:
      operationId: DeleteUtterances
      description: |-
        Deletes stored utterances.

        Amazon Lex stores the utterances that users send to your bot. Utterances are stored for 15 days for use with the [ListAggregatedUtterances](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html) operation, and then stored indefinitely for use in improving the ability of your bot to respond to user input..

        Use the `DeleteUtterances` operation to manually delete utterances for a specific session. When you use the `DeleteUtterances` operation, utterances stored for improving your bot's ability to respond to user input are deleted immediately. Utterances stored for use with the `ListAggregatedUtterances` operation are deleted after 15 days.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: localeId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: sessionId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SessionId'
      responses:
        '204': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}:
    get:
      operationId: DescribeBotRecommendation
      description: |-
        Provides metadata information about a bot recommendation. This information will enable you to get a description on the request inputs, to download associated transcripts after processing is complete, and to download intents and slot-types generated by the bot recommendation.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: botRecommendationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateBotRecommendation
      description: |-
        Updates an existing bot recommendation request.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: botRecommendationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                encryptionSetting:
                  $ref: '#/components/schemas/EncryptionSetting'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/generations/{generationId}:
    get:
      operationId: DescribeBotResourceGeneration
      description: |-
        Returns information about a request to generate a bot through natural language description, made through the `StartBotResource` API. Use the `generatedBotLocaleUrl` to retrieve the Amazon S3 object containing the bot locale configuration. You can then modify and import this configuration.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: generationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/metadata:
    get:
      operationId: DescribeCustomVocabularyMetadata
      description: |-
        Provides metadata information about a custom vocabulary.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testexecutions/{testExecutionId}:
    get:
      operationId: DescribeTestExecution
      description: |-
        Gets metadata information about the test execution.
      parameters:
      - name: testExecutionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testsetdiscrepancy/{testSetDiscrepancyReportId}:
    get:
      operationId: DescribeTestSetDiscrepancyReport
      description: |-
        Gets metadata information about the test set discrepancy report.
      parameters:
      - name: testSetDiscrepancyReportId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testsetgenerations/{testSetGenerationId}:
    get:
      operationId: DescribeTestSetGeneration
      description: |-
        Gets metadata information about the test set generation.
      parameters:
      - name: testSetGenerationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/generate:
    post:
      operationId: GenerateBotElement
      description: |-
        Generates sample utterances for an intent.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                intentId:
                  $ref: '#/components/schemas/Id'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testexecutions/{testExecutionId}/artifacturl:
    get:
      operationId: GetTestExecutionArtifactsUrl
      description: |-
        The pre-signed Amazon S3 URL to download the test execution result artifacts.
      parameters:
      - name: testExecutionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/aggregatedutterances:
    post:
      operationId: ListAggregatedUtterances
      description: |-
        Provides a list of utterances that users have sent to the bot.

        Utterances are aggregated by the text of the utterance. For example, all instances where customers used the phrase "I want to order pizza" are aggregated into the same line in the response.

        You can see both detected utterances and missed utterances. A detected utterance is where the bot properly recognized the utterance and activated the associated intent. A missed utterance was not recognized by the bot and didn't activate an intent.

        Utterances can be aggregated for a bot alias or for a bot version, but not both at the same time.

        Utterances statistics are not generated under the following conditions:

          * The `childDirected` field was set to true when the bot was created.

          * You are using slot obfuscation with one or more slots.

          * You opted out of participating in improving Amazon Lex.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botAliasId:
                  $ref: '#/components/schemas/BotAliasId'
                botVersion:
                  $ref: '#/components/schemas/BotVersion'
                localeId:
                  $ref: '#/components/schemas/LocaleId'
                aggregationDuration:
                  $ref: '#/components/schemas/UtteranceAggregationDuration'
                sortBy:
                  $ref: '#/components/schemas/AggregatedUtterancesSortBy'
                filters:
                  $ref: '#/components/schemas/AggregatedUtterancesFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/replicas/{replicaRegion}/botaliases:
    post:
      operationId: ListBotAliasReplicas
      description: |-
        The action to list the replicated bots created from the source bot alias.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: replicaRegion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReplicaRegion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations:
    post:
      operationId: ListBotRecommendations
      description: |-
        Get a list of bot recommendations that meet the specified criteria.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: StartBotRecommendation
      description: |-
        Use this to provide your transcript data, and to start the bot recommendation process.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transcriptSourceSetting:
                  $ref: '#/components/schemas/TranscriptSourceSetting'
                encryptionSetting:
                  $ref: '#/components/schemas/EncryptionSetting'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/generations:
    post:
      operationId: ListBotResourceGenerations
      description: |-
        Lists the generation requests made for a bot locale.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/GenerationSortBy'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/replicas/{replicaRegion}/botversions:
    post:
      operationId: ListBotVersionReplicas
      description: |-
        Contains information about all the versions replication statuses applicable for Global Resiliency.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: replicaRegion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReplicaRegion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                sortBy:
                  $ref: '#/components/schemas/BotVersionReplicaSortBy'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /builtins/locales/{localeId}/intents:
    post:
      operationId: ListBuiltInIntents
      description: |-
        Gets a list of built-in intents provided by Amazon Lex that you can use in your bot.

        To use a built-in intent as a the base for your own intent, include the built-in intent signature in the `parentIntentSignature` parameter when you call the `CreateIntent` operation. For more information, see [CreateIntent](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateIntent.html).
      parameters:
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/BuiltInIntentSortBy'
                maxResults:
                  $ref: '#/components/schemas/BuiltInsMaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /builtins/locales/{localeId}/slottypes:
    post:
      operationId: ListBuiltInSlotTypes
      description: |-
        Gets a list of built-in slot types that meet the specified criteria.
      parameters:
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/BuiltInSlotTypeSortBy'
                maxResults:
                  $ref: '#/components/schemas/BuiltInsMaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/list:
    post:
      operationId: ListCustomVocabularyItems
      description: |-
        Paginated list of custom vocabulary items for a given bot locale's custom vocabulary.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /imports:
    post:
      operationId: ListImports
      description: |-
        Lists the imports for a bot, bot locale, or custom vocabulary. Imports are kept in the list for 7 days.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botId:
                  $ref: '#/components/schemas/Id'
                botVersion:
                  $ref: '#/components/schemas/DraftBotVersion'
                sortBy:
                  $ref: '#/components/schemas/ImportSortBy'
                filters:
                  $ref: '#/components/schemas/ImportFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                localeId:
                  $ref: '#/components/schemas/LocaleId'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: StartImport
      description: |-
        Starts importing a bot, bot locale, or custom vocabulary from a zip archive that you uploaded to an S3 bucket.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                importId:
                  $ref: '#/components/schemas/Id'
                resourceSpecification:
                  $ref: '#/components/schemas/ImportResourceSpecification'
                mergeStrategy:
                  $ref: '#/components/schemas/MergeStrategy'
                filePassword:
                  $ref: '#/components/schemas/ImportExportFilePassword'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/analytics/intentmetrics:
    post:
      operationId: ListIntentMetrics
      description: |-
        Retrieves summary metrics for the intents in your bot. The following fields are required:

          * `metrics` – A list of [AnalyticsIntentMetric](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsIntentMetric.html) objects. In each object, use the `name` field to specify the metric to calculate, the `statistic` field to specify whether to calculate the `Sum`, `Average`, or `Max` number, and the `order` field to specify whether to sort the results in `Ascending` or `Descending` order.

          * `startDateTime` and `endDateTime` – Define a time range for which you want to retrieve results.

        Of the optional fields, you can organize the results in the following ways:

          * Use the `filters` field to filter the results, the `groupBy` field to specify categories by which to group the results, and the `binBy` field to specify time intervals by which to group the results.

          * Use the `maxResults` field to limit the number of results to return in a single response and the `nextToken` field to return the next batch of results if the response does not return the full set of results.

        Note that an `order` field exists in both `binBy` and `metrics`. You can specify only one `order` in a given request.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDateTime:
                  $ref: '#/components/schemas/Timestamp'
                endDateTime:
                  $ref: '#/components/schemas/Timestamp'
                metrics:
                  $ref: '#/components/schemas/AnalyticsIntentMetrics'
                binBy:
                  $ref: '#/components/schemas/AnalyticsBinByList'
                groupBy:
                  $ref: '#/components/schemas/AnalyticsIntentGroupByList'
                filters:
                  $ref: '#/components/schemas/AnalyticsIntentFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/analytics/intentpaths:
    post:
      operationId: ListIntentPaths
      description: |-
        Retrieves summary statistics for a path of intents that users take over sessions with your bot. The following fields are required:

          * `startDateTime` and `endDateTime` – Define a time range for which you want to retrieve results.

          * `intentPath` – Define an order of intents for which you want to retrieve metrics. Separate intents in the path with a forward slash. For example, populate the `intentPath` field with `/BookCar/BookHotel` to see details about how many times users invoked the `BookCar` and `BookHotel` intents in that order.

        Use the optional `filters` field to filter the results.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDateTime:
                  $ref: '#/components/schemas/Timestamp'
                endDateTime:
                  $ref: '#/components/schemas/Timestamp'
                intentPath:
                  $ref: '#/components/schemas/AnalyticsPath'
                filters:
                  $ref: '#/components/schemas/AnalyticsPathFilters'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/analytics/intentstagemetrics:
    post:
      operationId: ListIntentStageMetrics
      description: |-
        Retrieves summary metrics for the stages within intents in your bot. The following fields are required:

          * `metrics` – A list of [AnalyticsIntentStageMetric](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsIntentStageMetric.html) objects. In each object, use the `name` field to specify the metric to calculate, the `statistic` field to specify whether to calculate the `Sum`, `Average`, or `Max` number, and the `order` field to specify whether to sort the results in `Ascending` or `Descending` order.

          * `startDateTime` and `endDateTime` – Define a time range for which you want to retrieve results.

        Of the optional fields, you can organize the results in the following ways:

          * Use the `filters` field to filter the results, the `groupBy` field to specify categories by which to group the results, and the `binBy` field to specify time intervals by which to group the results.

          * Use the `maxResults` field to limit the number of results to return in a single response and the `nextToken` field to return the next batch of results if the response does not return the full set of results.

        Note that an `order` field exists in both `binBy` and `metrics`. You can only specify one `order` in a given request.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDateTime:
                  $ref: '#/components/schemas/Timestamp'
                endDateTime:
                  $ref: '#/components/schemas/Timestamp'
                metrics:
                  $ref: '#/components/schemas/AnalyticsIntentStageMetrics'
                binBy:
                  $ref: '#/components/schemas/AnalyticsBinByList'
                groupBy:
                  $ref: '#/components/schemas/AnalyticsIntentStageGroupByList'
                filters:
                  $ref: '#/components/schemas/AnalyticsIntentStageFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/intents:
    post:
      operationId: ListRecommendedIntents
      description: |-
        Gets a list of recommended intents provided by the bot recommendation that you can use in your bot. Intents in the response are ordered by relevance.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: botRecommendationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/analytics/sessions:
    post:
      operationId: ListSessionAnalyticsData
      description: |-
        Retrieves a list of metadata for individual user sessions with your bot. The `startDateTime` and `endDateTime` fields are required. These fields define a time range for which you want to retrieve results. Of the optional fields, you can organize the results in the following ways:

          * Use the `filters` field to filter the results and the `sortBy` field to specify the values by which to sort the results.

          * Use the `maxResults` field to limit the number of results to return in a single response and the `nextToken` field to return the next batch of results if the response does not return the full set of results.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDateTime:
                  $ref: '#/components/schemas/Timestamp'
                endDateTime:
                  $ref: '#/components/schemas/Timestamp'
                sortBy:
                  $ref: '#/components/schemas/SessionDataSortBy'
                filters:
                  $ref: '#/components/schemas/AnalyticsSessionFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/analytics/sessionmetrics:
    post:
      operationId: ListSessionMetrics
      description: |-
        Retrieves summary metrics for the user sessions with your bot. The following fields are required:

          * `metrics` – A list of [AnalyticsSessionMetric](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsSessionMetric.html) objects. In each object, use the `name` field to specify the metric to calculate, the `statistic` field to specify whether to calculate the `Sum`, `Average`, or `Max` number, and the `order` field to specify whether to sort the results in `Ascending` or `Descending` order.

          * `startDateTime` and `endDateTime` – Define a time range for which you want to retrieve results.

        Of the optional fields, you can organize the results in the following ways:

          * Use the `filters` field to filter the results, the `groupBy` field to specify categories by which to group the results, and the `binBy` field to specify time intervals by which to group the results.

          * Use the `maxResults` field to limit the number of results to return in a single response and the `nextToken` field to return the next batch of results if the response does not return the full set of results.

        Note that an `order` field exists in both `binBy` and `metrics`. Currently, you can specify it in either field, but not in both.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDateTime:
                  $ref: '#/components/schemas/Timestamp'
                endDateTime:
                  $ref: '#/components/schemas/Timestamp'
                metrics:
                  $ref: '#/components/schemas/AnalyticsSessionMetrics'
                binBy:
                  $ref: '#/components/schemas/AnalyticsBinByList'
                groupBy:
                  $ref: '#/components/schemas/AnalyticsSessionGroupByList'
                filters:
                  $ref: '#/components/schemas/AnalyticsSessionFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceARN}:
    get:
      operationId: ListTagsForResource
      description: |-
        Gets a list of tags associated with a resource. Only bots, bot aliases, and bot channels can have tags associated with them.
      parameters:
      - name: resourceARN
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Adds the specified tags to the specified resource. If a tag key already exists, the existing value is replaced with the new value.
      parameters:
      - name: resourceARN
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes tags from a bot, bot alias, or bot channel.
      parameters:
      - name: resourceARN
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testexecutions/{testExecutionId}/results:
    post:
      operationId: ListTestExecutionResultItems
      description: |-
        Gets a list of test execution result items.
      parameters:
      - name: testExecutionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resultFilterBy:
                  $ref: '#/components/schemas/TestExecutionResultFilterBy'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testexecutions:
    post:
      operationId: ListTestExecutions
      description: |-
        The list of test set executions.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/TestExecutionSortBy'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testsets/{testSetId}/records:
    post:
      operationId: ListTestSetRecords
      description: |-
        The list of test set records.
      parameters:
      - name: testSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testsets:
    post:
      operationId: ListTestSets
      description: |-
        The list of the test sets
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sortBy:
                  $ref: '#/components/schemas/TestSetSortBy'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/analytics/utterances:
    post:
      operationId: ListUtteranceAnalyticsData
      description: |-
        To use this API operation, your IAM role must have permissions to perform the [ListAggregatedUtterances](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html) operation, which provides access to utterance-related analytics. See [Viewing utterance statistics](https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html) for the IAM policy to apply to the IAM role.

        Retrieves a list of metadata for individual user utterances to your bot. The following fields are required:

          * `startDateTime` and `endDateTime` – Define a time range for which you want to retrieve results.

        Of the optional fields, you can organize the results in the following ways:

          * Use the `filters` field to filter the results and the `sortBy` field to specify the values by which to sort the results.

          * Use the `maxResults` field to limit the number of results to return in a single response and the `nextToken` field to return the next batch of results if the response does not return the full set of results.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDateTime:
                  $ref: '#/components/schemas/Timestamp'
                endDateTime:
                  $ref: '#/components/schemas/Timestamp'
                sortBy:
                  $ref: '#/components/schemas/UtteranceDataSortBy'
                filters:
                  $ref: '#/components/schemas/AnalyticsUtteranceFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/analytics/utterancemetrics:
    post:
      operationId: ListUtteranceMetrics
      description: |-
        To use this API operation, your IAM role must have permissions to perform the [ListAggregatedUtterances](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html) operation, which provides access to utterance-related analytics. See [Viewing utterance statistics](https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html) for the IAM policy to apply to the IAM role.

        Retrieves summary metrics for the utterances in your bot. The following fields are required:

          * `metrics` – A list of [AnalyticsUtteranceMetric](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsUtteranceMetric.html) objects. In each object, use the `name` field to specify the metric to calculate, the `statistic` field to specify whether to calculate the `Sum`, `Average`, or `Max` number, and the `order` field to specify whether to sort the results in `Ascending` or `Descending` order.

          * `startDateTime` and `endDateTime` – Define a time range for which you want to retrieve results.

        Of the optional fields, you can organize the results in the following ways:

          * Use the `filters` field to filter the results, the `groupBy` field to specify categories by which to group the results, and the `binBy` field to specify time intervals by which to group the results.

          * Use the `maxResults` field to limit the number of results to return in a single response and the `nextToken` field to return the next batch of results if the response does not return the full set of results.

        Note that an `order` field exists in both `binBy` and `metrics`. Currently, you can specify it in either field, but not in both.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDateTime:
                  $ref: '#/components/schemas/Timestamp'
                endDateTime:
                  $ref: '#/components/schemas/Timestamp'
                metrics:
                  $ref: '#/components/schemas/AnalyticsUtteranceMetrics'
                binBy:
                  $ref: '#/components/schemas/AnalyticsBinByList'
                groupBy:
                  $ref: '#/components/schemas/AnalyticsUtteranceGroupByList'
                attributes:
                  $ref: '#/components/schemas/AnalyticsUtteranceAttributes'
                filters:
                  $ref: '#/components/schemas/AnalyticsUtteranceFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  ? /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/associatedtranscripts
  : post:
      operationId: SearchAssociatedTranscripts
      description: |-
        Search for associated transcripts that meet the specified criteria.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: botRecommendationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                searchOrder:
                  $ref: '#/components/schemas/SearchOrder'
                filters:
                  $ref: '#/components/schemas/AssociatedTranscriptFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextIndex:
                  $ref: '#/components/schemas/NextIndex'
      responses:
        '200': {}
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/startgeneration:
    put:
      operationId: StartBotResourceGeneration
      description: |-
        Starts a request for the descriptive bot builder to generate a bot locale configuration based on the prompt you provide it. After you make this call, use the `DescribeBotResourceGeneration` operation to check on the status of the generation and for the `generatedBotLocaleUrl` when the generation is complete. Use that value to retrieve the Amazon S3 object containing the bot locale configuration. You can then modify and import this configuration.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                generationInputPrompt:
                  $ref: '#/components/schemas/GenerationInput'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testsets/{testSetId}/testexecutions:
    post:
      operationId: StartTestExecution
      description: |-
        The action to start test set execution.
      parameters:
      - name: testSetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                target:
                  $ref: '#/components/schemas/TestExecutionTarget'
                apiMode:
                  $ref: '#/components/schemas/TestExecutionApiMode'
                testExecutionModality:
                  $ref: '#/components/schemas/TestExecutionModality'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /testsetgenerations:
    put:
      operationId: StartTestSetGeneration
      description: |-
        The action to start the generation of test set.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                testSetName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                storageLocation:
                  $ref: '#/components/schemas/TestSetStorageLocation'
                generationDataSource:
                  $ref: '#/components/schemas/TestSetGenerationDataSource'
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
                testSetTags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  ? /bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/stopbotrecommendation
  : put:
      operationId: StopBotRecommendation
      description: |-
        Stop an already running Bot Recommendation request.
      parameters:
      - name: botId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: botVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftBotVersion'
      - name: localeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LocaleId'
      - name: botRecommendationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '202': {}
        '409':
          description: |-
            The action that you tried to perform couldn't be completed because the resource is in a conflicting state. For example, deleting a bot that is in the CREATING state. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The service encountered an unexpected condition. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '412':
          description: |-
            Your request couldn't be completed because one or more request fields aren't valid. Check the fields in your request and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            You asked to describe a resource that doesn't exist. Check the resource that you are requesting and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have reached a quota for your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Your request rate is too high. Reduce the frequency of requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            One of the input parameters in your request isn't valid. Check the parameters and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    ActiveContext:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ActiveContextName'
          description: The name of active context.
      required:
      - name
      description: The active context used in the test execution.
    ActiveContextList:
      type: array
      items:
        $ref: '#/components/schemas/ActiveContext'
    ActiveContextName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    AdvancedRecognitionSetting:
      type: object
      properties:
        audioRecognitionStrategy:
          allOf:
          - $ref: '#/components/schemas/AudioRecognitionStrategy'
          description: Enables using the slot values as a custom vocabulary for recognizing
            user utterances.
      description: Provides settings that enable advanced recognition settings for
        slot values.
    AgentTurnResult:
      type: object
      properties:
        expectedAgentPrompt:
          allOf:
          - $ref: '#/components/schemas/TestSetAgentPrompt'
          description: The expected agent prompt for the agent turn in a test set
            execution.
        actualAgentPrompt:
          allOf:
          - $ref: '#/components/schemas/TestSetAgentPrompt'
          description: The actual agent prompt for the agent turn in a test set execution.
        errorDetails:
          $ref: '#/components/schemas/ExecutionErrorDetails'
        actualElicitedSlot:
          allOf:
          - $ref: '#/components/schemas/TestResultSlotName'
          description: The actual elicited slot for the agent turn in a test set execution.
        actualIntent:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The actual intent for the agent turn in a test set execution.
      required:
      - expectedAgentPrompt
      description: The information about the agent turn in a test set execution.
    AgentTurnSpecification:
      type: object
      properties:
        agentPrompt:
          allOf:
          - $ref: '#/components/schemas/TestSetAgentPrompt'
          description: The agent prompt for the agent turn in a test set.
      required:
      - agentPrompt
      description: The specification of an agent turn.
    AggregatedUtterancesFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesFilterName'
          description: The name of the field to filter the utterance list.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: The value to use for filtering the list of bots.
        operator:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesFilterOperator'
          description: The operator to use for the filter. Specify `EQ` when the `ListAggregatedUtterances`
            operation should return only utterances that equal the specified value.
            Specify `CO` when the `ListAggregatedUtterances` operation should return
            utterances that contain the specified value.
      required:
      - name
      - values
      - operator
      description: Filters responses returned by the `ListAggregatedUtterances` operation.
    AggregatedUtterancesFilterName:
      type: string
      enum:
      - Utterance
    AggregatedUtterancesFilterOperator:
      type: string
      enum:
      - CO
      - EQ
    AggregatedUtterancesFilters:
      type: array
      items:
        $ref: '#/components/schemas/AggregatedUtterancesFilter'
    AggregatedUtterancesSortAttribute:
      type: string
      enum:
      - HitCount
      - MissedCount
    AggregatedUtterancesSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesSortAttribute'
          description: The utterance attribute to sort by.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies whether to sort the aggregated utterances in ascending
            or descending order.
      required:
      - attribute
      - order
      description: Specifies attributes for sorting a list of utterances.
    AggregatedUtterancesSummary:
      type: object
      properties:
        utterance:
          allOf:
          - $ref: '#/components/schemas/Utterance'
          description: The text of the utterance. If the utterance was used with the
            `RecognizeUtterance` operation, the text is the transcription of the audio
            utterance.
        hitCount:
          allOf:
          - $ref: '#/components/schemas/HitCount'
          description: The number of times that the utterance was detected by Amazon
            Lex during the time period. When an utterance is detected, it activates
            an intent or a slot.
        missedCount:
          allOf:
          - $ref: '#/components/schemas/MissedCount'
          description: The number of times that the utterance was missed by Amazon
            Lex An utterance is missed when it doesn't activate an intent or slot.
        utteranceFirstRecordedInAggregationDuration:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the utterance was first recorded in
            the time window for aggregation. An utterance may have been sent to Amazon
            Lex before that time, but only utterances within the time window are counted.
        utteranceLastRecordedInAggregationDuration:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last date and time that an utterance was recorded in the
            time window for aggregation. An utterance may be sent to Amazon Lex after
            that time, but only utterances within the time window are counted.
        containsDataFromDeletedResources:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Aggregated utterance data may contain utterances from versions
            of your bot that have since been deleted. When the aggregated contains
            this kind of data, this field is set to true.
      description: Provides summary information for aggregated utterances. The `ListAggregatedUtterances`
        operations combines all instances of the same utterance into a single aggregated
        summary.
    AggregatedUtterancesSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/AggregatedUtterancesSummary'
    AllowedInputTypes:
      type: object
      properties:
        allowAudioInput:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates whether audio input is allowed.
        allowDTMFInput:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates whether DTMF input is allowed.
      required:
      - allowAudioInput
      - allowDTMFInput
      description: Specifies the allowed input types.
    AmazonResourceName:
      type: string
      minLength: 1
      maxLength: 1011
    AnalyticsBinByList:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsBinBySpecification'
    AnalyticsBinByName:
      type: string
      enum:
      - ConversationStartTime
      - UtteranceTimestamp
    AnalyticsBinBySpecification:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByName'
          description: Specifies the time metric by which to bin the analytics data.
        interval:
          allOf:
          - $ref: '#/components/schemas/AnalyticsInterval'
          description: Specifies the interval of time by which to bin the analytics
            data.
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          description: Specifies whether to bin the analytics data in ascending or
            descending order. If this field is left blank, the default order is by
            the key of the bin in descending order.
      required:
      - name
      - interval
      description: Contains the time metric, interval, and method by which to bin
        the analytics data.
    AnalyticsBinKey:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByName'
          description: The criterion by which to bin the results.
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinValue'
          description: The value of the criterion that defines the bin.
      description: An object containing the criterion by which to bin the results
        and the value that defines that bin.
    AnalyticsBinKeys:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsBinKey'
    AnalyticsBinValue:
      type: integer
      format: int64
    AnalyticsChannel:
      type: string
      minLength: 1
      maxLength: 50
    AnalyticsCommonFilterName:
      type: string
      enum:
      - BotAliasId
      - BotVersion
      - LocaleId
      - Modality
      - Channel
    AnalyticsFilterOperator:
      type: string
      enum:
      - EQ
      - GT
      - LT
    AnalyticsFilterValue:
      type: string
    AnalyticsFilterValues:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsFilterValue'
    AnalyticsGroupByValue:
      type: string
    AnalyticsIntentField:
      type: string
      enum:
      - IntentName
      - IntentEndState
      - IntentLevel
    AnalyticsIntentFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentFilterName'
          description: "The category by which to filter the intents. The descriptions\
            \ for each option are as follows:\n\n  * `BotAlias` – The name of the\
            \ bot alias.\n\n  * `BotVersion` – The version of the bot.\n\n  * `LocaleId`\
            \ – The locale of the bot.\n\n  * `Modality` – The modality of the session\
            \ with the bot (audio, DTMF, or text).\n\n  * `Channel` – The channel\
            \ that the bot is integrated with.\n\n  * `SessionId` – The identifier\
            \ of the session with the bot.\n\n  * `OriginatingRequestId` – The identifier\
            \ of the first request in a session.\n\n  * `IntentName` – The name of\
            \ the intent.\n\n  * `IntentEndState` – The final state of the intent."
        operator:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterOperator'
          description: "The operation by which to filter the category. The following\
            \ operations are possible:\n\n  * `CO` – Contains\n\n  * `EQ` – Equals\n\
            \n  * `GT` – Greater than\n\n  * `LT` – Less than\n\nThe operators that\
            \ each filter supports are listed below:\n\n  * `BotAlias` – `EQ`.\n\n\
            \  * `BotVersion` – `EQ`.\n\n  * `LocaleId` – `EQ`.\n\n  * `Modality`\
            \ – `EQ`.\n\n  * `Channel` – `EQ`.\n\n  * `SessionId` – `EQ`.\n\n  * `OriginatingRequestId`\
            \ – `EQ`.\n\n  * `IntentName` – `EQ`, `CO`.\n\n  * `IntentEndState` –\
            \ `EQ`, `CO`."
        values:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterValues'
          description: An array containing the values of the category by which to
            apply the operator to filter the results. You can provide multiple values
            if the operator is `EQ` or `CO`. If you provide multiple values, you filter
            for results that equal/contain any of the values. For example, if the
            `name`, `operator`, and `values` fields are `Modality`, `EQ`, and `[Speech,
            Text]`, the operation filters for results where the modality was either
            `Speech` or `Text`.
      required:
      - name
      - operator
      - values
      description: "Contains fields describing a condition by which to filter the\
        \ intents. The expression may be understood as `name` `operator` `values`.\
        \ For example:\n\n  * `IntentName CO Book` – The intent name contains the\
        \ string \"Book.\"\n\n  * `BotVersion EQ 2` – The bot version is equal to\
        \ two.\n\nThe operators that each filter supports are listed below:\n\n  *\
        \ `BotAlias` – `EQ`.\n\n  * `BotVersion` – `EQ`.\n\n  * `LocaleId` – `EQ`.\n\
        \n  * `Modality` – `EQ`.\n\n  * `Channel` – `EQ`.\n\n  * `SessionId` – `EQ`.\n\
        \n  * `OriginatingRequestId` – `EQ`.\n\n  * `IntentName` – `EQ`, `CO`.\n\n\
        \  * `IntentEndState` – `EQ`, `CO`."
    AnalyticsIntentFilterName:
      type: string
      enum:
      - BotAliasId
      - BotVersion
      - LocaleId
      - Modality
      - Channel
      - SessionId
      - OriginatingRequestId
      - IntentName
      - IntentEndState
    AnalyticsIntentFilters:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentFilter'
    AnalyticsIntentGroupByKey:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentField'
          description: A category by which the intent analytics were grouped.
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsGroupByValue'
          description: A member of the category by which the intent analytics were
            grouped.
      description: Contains the category by which the intent analytics were grouped
        and a member of that category.
    AnalyticsIntentGroupByKeys:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentGroupByKey'
    AnalyticsIntentGroupByList:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentGroupBySpecification'
    AnalyticsIntentGroupBySpecification:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentField'
          description: Specifies whether to group the intent stages by their name
            or their end state.
      required:
      - name
      description: Contains the category by which to group the intents.
    AnalyticsIntentMetric:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentMetricName'
          description: "The metric for which you want to get intent summary statistics.\n\
            \n  * `Count` – The number of times the intent was invoked.\n\n  * `Success`\
            \ – The number of times the intent succeeded.\n\n  * `Failure` – The number\
            \ of times the intent failed.\n\n  * `Switched` – The number of times\
            \ there was a switch to a different intent.\n\n  * `Dropped` – The number\
            \ of times the user dropped the intent."
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          description: "The summary statistic to calculate.\n\n  * `Sum` – The total\
            \ count for the category you provide in `name`.\n\n  * `Average` – The\
            \ total count divided by the number of intents in the category you provide\
            \ in `name`.\n\n  * `Max` – The highest count in the category you provide\
            \ in `name`."
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          description: Specifies whether to sort the results in ascending or descending
            order.
      required:
      - name
      - statistic
      description: Contains the metric and the summary statistic you want to calculate,
        and the order in which to sort the results, for the intents in the bot.
    AnalyticsIntentMetricName:
      type: string
      enum:
      - Count
      - Success
      - Failure
      - Switched
      - Dropped
    AnalyticsIntentMetricResult:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentMetricName'
          description: "The metric that you requested. See [Key definitions](https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html)\
            \ for more details about these metrics.\n\n  * `Count` – The number of\
            \ times the intent was invoked.\n\n  * `Success` – The number of times\
            \ the intent succeeded.\n\n  * `Failure` – The number of times the intent\
            \ failed.\n\n  * `Switched` – The number of times there was a switch to\
            \ a different intent.\n\n  * `Dropped` – The number of times the user\
            \ dropped the intent."
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          description: "The statistic that you requested to calculate.\n\n  * `Sum`\
            \ – The total count for the category you provide in `name`.\n\n  * `Average`\
            \ – The total count divided by the number of intents in the category you\
            \ provide in `name`.\n\n  * `Max` – The highest count in the category\
            \ you provide in `name`."
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricValue'
          description: The value of the summary statistic for the metric that you
            requested.
      description: An object containing the results for the intent metric you requested.
    AnalyticsIntentMetricResults:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentMetricResult'
    AnalyticsIntentMetrics:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentMetric'
    AnalyticsIntentNodeSummaries:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentNodeSummary'
    AnalyticsIntentNodeSummary:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the intent at the end of the requested path.
        intentPath:
          allOf:
          - $ref: '#/components/schemas/AnalyticsPath'
          description: The path.
        intentCount:
          allOf:
          - $ref: '#/components/schemas/AnalyticsNodeCount'
          description: The total number of sessions that follow the given path to
            the given intent.
        intentLevel:
          allOf:
          - $ref: '#/components/schemas/AnalyticsNodeLevel'
          description: The number of intents up to and including the requested path.
        nodeType:
          allOf:
          - $ref: '#/components/schemas/AnalyticsNodeType'
          description: Specifies whether the node is the end of a path (`Exit`) or
            not (`Inner`).
      description: An object containing information about the requested path.
    AnalyticsIntentResult:
      type: object
      properties:
        binKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinKeys'
          description: A list of objects containing the criteria you requested for
            binning results and the values of the bins.
        groupByKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentGroupByKeys'
          description: A list of objects containing the criteria you requested for
            grouping results and the values of the groups.
        metricsResults:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentMetricResults'
          description: A list of objects, each of which contains a metric you want
            to list, the statistic for the metric you want to return, and the method
            by which to organize the results.
      description: An object containing the results for the intent metrics you requested
        and the bin and/or group(s) they refer to, if applicable.
    AnalyticsIntentResults:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentResult'
    AnalyticsIntentStageField:
      type: string
      enum:
      - IntentStageName
      - SwitchedToIntent
    AnalyticsIntentStageFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageFilterName'
          description: "The category by which to filter the intent stages. The descriptions\
            \ for each option are as follows:\n\n  * `BotAlias` – The name of the\
            \ bot alias.\n\n  * `BotVersion` – The version of the bot.\n\n  * `LocaleId`\
            \ – The locale of the bot.\n\n  * `Modality` – The modality of the session\
            \ with the bot (audio, DTMF, or text).\n\n  * `Channel` – The channel\
            \ that the bot is integrated with.\n\n  * `SessionId` – The identifier\
            \ of the session with the bot.\n\n  * `OriginatingRequestId` – The identifier\
            \ of the first request in a session.\n\n  * `IntentName` – The name of\
            \ the intent.\n\n  * `IntentStageName` – The stage in the intent."
        operator:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterOperator'
          description: "The operation by which to filter the category. The following\
            \ operations are possible:\n\n  * `CO` – Contains\n\n  * `EQ` – Equals\n\
            \n  * `GT` – Greater than\n\n  * `LT` – Less than\n\nThe operators that\
            \ each filter supports are listed below:\n\n  * `BotAlias` – `EQ`.\n\n\
            \  * `BotVersion` – `EQ`.\n\n  * `LocaleId` – `EQ`.\n\n  * `Modality`\
            \ – `EQ`.\n\n  * `Channel` – `EQ`.\n\n  * `SessionId` – `EQ`.\n\n  * `OriginatingRequestId`\
            \ – `EQ`.\n\n  * `IntentName` – `EQ`, `CO`.\n\n  * `IntentStageName` –\
            \ `EQ`, `CO`."
        values:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterValues'
          description: An array containing the values of the category by which to
            apply the operator to filter the results. You can provide multiple values
            if the operator is `EQ` or `CO`. If you provide multiple values, you filter
            for results that equal/contain any of the values. For example, if the
            `name`, `operator`, and `values` fields are `Modality`, `EQ`, and `[Speech,
            Text]`, the operation filters for results where the modality was either
            `Speech` or `Text`.
      required:
      - name
      - operator
      - values
      description: "Contains fields describing a condition by which to filter the\
        \ intent stages. The expression may be understood as `name` `operator` `values`.\
        \ For example:\n\n  * `IntentName CO Book` – The intent name contains the\
        \ string \"Book.\"\n\n  * `BotVersion EQ 2` – The bot version is equal to\
        \ two.\n\nThe operators that each filter supports are listed below:\n\n  *\
        \ `BotAlias` – `EQ`.\n\n  * `BotVersion` – `EQ`.\n\n  * `LocaleId` – `EQ`.\n\
        \n  * `Modality` – `EQ`.\n\n  * `Channel` – `EQ`.\n\n  * `SessionId` – `EQ`.\n\
        \n  * `OriginatingRequestId` – `EQ`.\n\n  * `IntentName` – `EQ`, `CO`.\n\n\
        \  * `IntentStageName` – `EQ`, `CO`."
    AnalyticsIntentStageFilterName:
      type: string
      enum:
      - BotAliasId
      - BotVersion
      - LocaleId
      - Modality
      - Channel
      - SessionId
      - OriginatingRequestId
      - IntentName
      - IntentStageName
    AnalyticsIntentStageFilters:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageFilter'
    AnalyticsIntentStageGroupByKey:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageField'
          description: A category by which the intent stage analytics were grouped.
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsGroupByValue'
          description: A member of the category by which the intent stage analytics
            were grouped.
      description: Contains the category by which the intent stage analytics and the
        values for that category were grouped.
    AnalyticsIntentStageGroupByKeys:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageGroupByKey'
    AnalyticsIntentStageGroupByList:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageGroupBySpecification'
    AnalyticsIntentStageGroupBySpecification:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageField'
          description: Specifies whether to group the intent stages by their name
            or the intent to which the session was switched.
      required:
      - name
      description: Contains the category by which to group the intent stages.
    AnalyticsIntentStageMetric:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageMetricName'
          description: "The metric for which you want to get intent stage summary\
            \ statistics. See [Key definitions](https://docs.aws.amazon.com/lexv2/latest/dg/analytics-key-definitions.html)\
            \ for more details about these metrics.\n\n  * `Count` – The number of\
            \ times the intent stage occurred.\n\n  * `Success` – The number of times\
            \ the intent stage succeeded.\n\n  * `Failure` – The number of times the\
            \ intent stage failed.\n\n  * `Dropped` – The number of times the user\
            \ dropped the intent stage.\n\n  * `Retry` – The number of times the bot\
            \ tried to elicit a response from the user at this stage."
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          description: "The summary statistic to calculate.\n\n  * `Sum` – The total\
            \ count for the category you provide in `name`.\n\n  * `Average` – The\
            \ total count divided by the number of intent stages in the category you\
            \ provide in `name`.\n\n  * `Max` – The highest count in the category\
            \ you provide in `name`."
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          description: Specifies whether to sort the results in ascending or descending
            order of the summary statistic (`value` in the response).
      required:
      - name
      - statistic
      description: Contains the metric and the summary statistic you want to calculate,
        and the order in which to sort the results, for the intent stages across the
        user sessions with the bot.
    AnalyticsIntentStageMetricName:
      type: string
      enum:
      - Count
      - Success
      - Failed
      - Dropped
      - Retry
    AnalyticsIntentStageMetricResult:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageMetricName'
          description: "The metric that you requested.\n\n  * `Count` – The number\
            \ of times the intent stage occurred.\n\n  * `Success` – The number of\
            \ times the intent stage succeeded.\n\n  * `Failure` – The number of times\
            \ the intent stage failed.\n\n  * `Dropped` – The number of times the\
            \ user dropped the intent stage.\n\n  * `Retry` – The number of times\
            \ the bot tried to elicit a response from the user at this stage."
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          description: "The summary statistic that you requested to calculate.\n\n\
            \  * `Sum` – The total count for the category you provide in `name`.\n\
            \n  * `Average` – The total count divided by the number of intent stages\
            \ in the category you provide in `name`.\n\n  * `Max` – The highest count\
            \ in the category you provide in `name`."
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricValue'
          description: The value of the summary statistic for the metric that you
            requested.
      description: An object containing the results for an intent stage metric you
        requested.
    AnalyticsIntentStageMetricResults:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageMetricResult'
    AnalyticsIntentStageMetrics:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageMetric'
    AnalyticsIntentStageResult:
      type: object
      properties:
        binKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinKeys'
          description: A list of objects containing the criteria you requested for
            binning results and the values of the bins.
        groupByKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageGroupByKeys'
          description: A list of objects containing the criteria you requested for
            grouping results and the values of the bins.
        metricsResults:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageMetricResults'
          description: A list of objects, each of which contains a metric you want
            to list, the statistic for the metric you want to return, and the method
            by which to organize the results.
      description: An object containing the results for the intent stage metrics you
        requested and the bin and/or group they refer to, if applicable.
    AnalyticsIntentStageResults:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsIntentStageResult'
    AnalyticsInterval:
      type: string
      enum:
      - OneHour
      - OneDay
    AnalyticsLongValue:
      type: integer
      format: int64
    AnalyticsMetricStatistic:
      type: string
      enum:
      - Sum
      - Avg
      - Max
    AnalyticsMetricValue:
      type: number
      format: double
    AnalyticsModality:
      type: string
      enum:
      - Speech
      - Text
      - DTMF
      - MultiMode
    AnalyticsNodeCount:
      type: integer
    AnalyticsNodeLevel:
      type: integer
      minimum: 0
      maximum: 100
    AnalyticsNodeType:
      type: string
      enum:
      - Inner
      - Exit
    AnalyticsOriginatingRequestId:
      type: string
    AnalyticsPath:
      type: string
      minLength: 1
      maxLength: 1024
    AnalyticsPathFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsCommonFilterName'
          description: "The category by which to filter the intent paths. The descriptions\
            \ for each option are as follows:\n\n  * `BotAlias` – The name of the\
            \ bot alias.\n\n  * `BotVersion` – The version of the bot.\n\n  * `LocaleId`\
            \ – The locale of the bot.\n\n  * `Modality` – The modality of the session\
            \ with the bot (audio, DTMF, or text).\n\n  * `Channel` – The channel\
            \ that the bot is integrated with."
        operator:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterOperator'
          description: "The operation by which to filter the category. The following\
            \ operations are possible:\n\n  * `CO` – Contains\n\n  * `EQ` – Equals\n\
            \n  * `GT` – Greater than\n\n  * `LT` – Less than\n\nThe operators that\
            \ each filter supports are listed below:\n\n  * `BotAlias` – `EQ`.\n\n\
            \  * `BotVersion` – `EQ`.\n\n  * `LocaleId` – `EQ`.\n\n  * `Modality`\
            \ – `EQ`.\n\n  * `Channel` – `EQ`."
        values:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterValues'
          description: An array containing the values of the category by which to
            apply the operator to filter the results. You can provide multiple values
            if the operator is `EQ` or `CO`. If you provide multiple values, you filter
            for results that equal/contain any of the values. For example, if the
            `name`, `operator`, and `values` fields are `Modality`, `EQ`, and `[Speech,
            Text]`, the operation filters for results where the modality was either
            `Speech` or `Text`.
      required:
      - name
      - operator
      - values
      description: "Contains fields describing a condition by which to filter the\
        \ paths. The expression may be understood as `name` `operator` `values`. For\
        \ example:\n\n  * `LocaleId EQ en` – The locale is \"en\".\n\n  * `BotVersion\
        \ EQ 2` – The bot version is equal to two.\n\nThe operators that each filter\
        \ supports are listed below:\n\n  * `BotAlias` – `EQ`.\n\n  * `BotVersion`\
        \ – `EQ`.\n\n  * `LocaleId` – `EQ`.\n\n  * `Modality` – `EQ`.\n\n  * `Channel`\
        \ – `EQ`."
    AnalyticsPathFilters:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsPathFilter'
    AnalyticsSessionField:
      type: string
      enum:
      - ConversationEndState
      - LocaleId
    AnalyticsSessionFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionFilterName'
          description: "The category by which to filter the sessions. The descriptions\
            \ for each option are as follows:\n\n  * `BotAlias` – The name of the\
            \ bot alias.\n\n  * `BotVersion` – The version of the bot.\n\n  * `LocaleId`\
            \ – The locale of the bot.\n\n  * `Modality` – The modality of the session\
            \ with the bot (audio, DTMF, or text).\n\n  * `Channel` – The channel\
            \ that the bot is integrated with.\n\n  * `Duration` – The duration of\
            \ the session.\n\n  * `conversationEndState` – The final state of the\
            \ session.\n\n  * `SessionId` – The identifier of the session with the\
            \ bot.\n\n  * `OriginatingRequestId` – The identifier of the first request\
            \ in a session.\n\n  * `IntentPath` – The order of intents taken in a\
            \ session."
        operator:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterOperator'
          description: "The operation by which to filter the category. The following\
            \ operations are possible:\n\n  * `CO` – Contains\n\n  * `EQ` – Equals\n\
            \n  * `GT` – Greater than\n\n  * `LT` – Less than\n\nThe operators that\
            \ each filter supports are listed below:\n\n  * `BotAlias` – `EQ`.\n\n\
            \  * `BotVersion` – `EQ`.\n\n  * `LocaleId` – `EQ`.\n\n  * `Modality`\
            \ – `EQ`.\n\n  * `Channel` – `EQ`.\n\n  * `Duration` – `EQ`, `GT`, `LT`.\n\
            \n  * `conversationEndState` – `EQ`, `CO`.\n\n  * `SessionId` – `EQ`.\n\
            \n  * `OriginatingRequestId` – `EQ`.\n\n  * `IntentPath` – `EQ`."
        values:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterValues'
          description: An array containing the values of the category by which to
            apply the operator to filter the results. You can provide multiple values
            if the operator is `EQ` or `CO`. If you provide multiple values, you filter
            for results that equal/contain any of the values. For example, if the
            `name`, `operator`, and `values` fields are `Modality`, `EQ`, and `[Speech,
            Text]`, the operation filters for results where the modality was either
            `Speech` or `Text`.
      required:
      - name
      - operator
      - values
      description: "Contains fields describing a condition by which to filter the\
        \ sessions. The expression may be understood as `name` `operator` `values`.\
        \ For example:\n\n  * `LocaleId EQ en` – The locale is \"en\".\n\n  * `Duration\
        \ GT 200` – The duration is greater than 200 seconds.\n\nThe operators that\
        \ each filter supports are listed below:\n\n  * `BotAlias` – `EQ`.\n\n  *\
        \ `BotVersion` – `EQ`.\n\n  * `LocaleId` – `EQ`.\n\n  * `Modality` – `EQ`.\n\
        \n  * `Channel` – `EQ`.\n\n  * `Duration` – `EQ`, `GT`, `LT`.\n\n  * `conversationEndState`\
        \ – `EQ`, `CO`.\n\n  * `SessionId` – `EQ`.\n\n  * `OriginatingRequestId` –\
        \ `EQ`.\n\n  * `IntentPath` – `EQ`."
    AnalyticsSessionFilterName:
      type: string
      enum:
      - BotAliasId
      - BotVersion
      - LocaleId
      - Modality
      - Channel
      - Duration
      - ConversationEndState
      - SessionId
      - OriginatingRequestId
      - IntentPath
    AnalyticsSessionFilters:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsSessionFilter'
    AnalyticsSessionGroupByKey:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionField'
          description: The category by which the session analytics were grouped.
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsGroupByValue'
          description: A member of the category by which the session analytics were
            grouped.
      description: Contains the category by which the session analytics were grouped
        and a member of that category.
    AnalyticsSessionGroupByKeys:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsSessionGroupByKey'
    AnalyticsSessionGroupByList:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsSessionGroupBySpecification'
    AnalyticsSessionGroupBySpecification:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionField'
          description: Specifies whether to group the session by their end state or
            their locale.
      required:
      - name
      description: Contains the category by which to group the sessions.
    AnalyticsSessionId:
      type: string
      pattern: ^[0-9a-zA-Z._:-]$
    AnalyticsSessionMetric:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionMetricName'
          description: "The metric for which you want to get session summary statistics.\n\
            \n  * `Count` – The number of sessions.\n\n  * `Success` – The number\
            \ of sessions that succeeded.\n\n  * `Failure` – The number of sessions\
            \ that failed.\n\n  * `Dropped` – The number of sessions that the user\
            \ dropped.\n\n  * `Duration` – The duration of sessions.\n\n  * `TurnsPerSession`\
            \ – The number of turns in the sessions.\n\n  * `Concurrency` – The number\
            \ of sessions occurring in the same period of time."
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          description: "The summary statistic to calculate.\n\n  * `Sum` – The total\
            \ count for the category you provide in `name`.\n\n  * `Average` – The\
            \ total count divided by the number of sessions in the category you provide\
            \ in `name`.\n\n  * `Max` – The highest count in the category you provide\
            \ in `name`."
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          description: Specifies whether to sort the results in ascending or descending
            order.
      required:
      - name
      - statistic
      description: Contains the metric and the summary statistic you want to calculate,
        and the order in which to sort the results, for the user sessions with the
        bot.
    AnalyticsSessionMetricName:
      type: string
      enum:
      - Count
      - Success
      - Failure
      - Dropped
      - Duration
      - TurnsPerConversation
      - Concurrency
    AnalyticsSessionMetricResult:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionMetricName'
          description: "The metric that you requested.\n\n  * `Count` – The number\
            \ of sessions.\n\n  * `Success` – The number of sessions that succeeded.\n\
            \n  * `Failure` – The number of sessions that failed.\n\n  * `Dropped`\
            \ – The number of sessions that the user dropped.\n\n  * `Duration` –\
            \ The duration of sessions.\n\n  * `TurnPersession` – The number of turns\
            \ in the sessions.\n\n  * `Concurrency` – The number of sessions occurring\
            \ in the same period of time."
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          description: "The summary statistic that you requested to calculate.\n\n\
            \  * `Sum` – The total count for the category you provide in `name`.\n\
            \n  * `Average` – The total count divided by the number of sessions in\
            \ the category you provide in `name`.\n\n  * `Max` – The highest count\
            \ in the category you provide in `name`."
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricValue'
          description: The value of the summary statistic for the metric that you
            requested.
      description: An object containing the results for a session metric you requested.
    AnalyticsSessionMetricResults:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsSessionMetricResult'
    AnalyticsSessionMetrics:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsSessionMetric'
    AnalyticsSessionResult:
      type: object
      properties:
        binKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinKeys'
          description: A list of objects containing the criteria you requested for
            binning results and the values of the bins.
        groupByKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionGroupByKeys'
          description: A list of objects containing the criteria you requested for
            grouping results and the values of the bins.
        metricsResults:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionMetricResults'
          description: A list of objects, each of which contains a metric you want
            to list, the statistic for the metric you want to return, and the method
            by which to organize the results.
      description: An object containing the results for the session metrics you requested
        and the bin and/or group(s) they refer to, if applicable.
    AnalyticsSessionResults:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsSessionResult'
    AnalyticsSessionSortByName:
      type: string
      enum:
      - ConversationStartTime
      - NumberOfTurns
      - Duration
    AnalyticsSortOrder:
      type: string
      enum:
      - Ascending
      - Descending
    AnalyticsUtteranceAttribute:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceAttributeName'
          description: An attribute to return. The only available attribute is the
            intent that the bot mapped the utterance to.
      required:
      - name
      description: An object that specifies the last used intent at the time of the
        utterance as an attribute to return.
    AnalyticsUtteranceAttributeName:
      type: string
      enum:
      - LastUsedIntent
    AnalyticsUtteranceAttributeResult:
      type: object
      properties:
        lastUsedIntent:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The intent that the bot mapped the utterance to.
      description: An object containing the intent that the bot mapped the utterance
        to.
    AnalyticsUtteranceAttributeResults:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceAttributeResult'
    AnalyticsUtteranceAttributes:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceAttribute'
    AnalyticsUtteranceField:
      type: string
      enum:
      - UtteranceText
      - UtteranceState
    AnalyticsUtteranceFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceFilterName'
          description: "The category by which to filter the utterances. The descriptions\
            \ for each option are as follows:\n\n  * `BotAlias` – The name of the\
            \ bot alias.\n\n  * `BotVersion` – The version of the bot.\n\n  * `LocaleId`\
            \ – The locale of the bot.\n\n  * `Modality` – The modality of the session\
            \ with the bot (audio, DTMF, or text).\n\n  * `Channel` – The channel\
            \ that the bot is integrated with.\n\n  * `SessionId` – The identifier\
            \ of the session with the bot.\n\n  * `OriginatingRequestId` – The identifier\
            \ of the first request in a session.\n\n  * `UtteranceState` – The state\
            \ of the utterance.\n\n  * `UtteranceText` – The text in the utterance."
        operator:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterOperator'
          description: "The operation by which to filter the category. The following\
            \ operations are possible:\n\n  * `CO` – Contains\n\n  * `EQ` – Equals\n\
            \n  * `GT` – Greater than\n\n  * `LT` – Less than\n\nThe operators that\
            \ each filter supports are listed below:\n\n  * `BotAlias` – `EQ`.\n\n\
            \  * `BotVersion` – `EQ`.\n\n  * `LocaleId` – `EQ`.\n\n  * `Modality`\
            \ – `EQ`.\n\n  * `Channel` – `EQ`.\n\n  * `SessionId` – `EQ`.\n\n  * `OriginatingRequestId`\
            \ – `EQ`.\n\n  * `UtteranceState` – `EQ`.\n\n  * `UtteranceText` – `EQ`,\
            \ `CO`."
        values:
          allOf:
          - $ref: '#/components/schemas/AnalyticsFilterValues'
          description: An array containing the values of the category by which to
            apply the operator to filter the results. You can provide multiple values
            if the operator is `EQ` or `CO`. If you provide multiple values, you filter
            for results that equal/contain any of the values. For example, if the
            `name`, `operator`, and `values` fields are `Modality`, `EQ`, and `[Speech,
            Text]`, the operation filters for results where the modality was either
            `Speech` or `Text`.
      required:
      - name
      - operator
      - values
      description: "Contains fields describing a condition by which to filter the\
        \ utterances. The expression may be understood as `name` `operator` `values`.\
        \ For example:\n\n  * `LocaleId EQ Book` – The locale is the string \"en\"\
        .\n\n  * `UtteranceText CO help` – The text of the utterance contains the\
        \ string \"help\".\n\nThe operators that each filter supports are listed below:\n\
        \n  * `BotAlias` – `EQ`.\n\n  * `BotVersion` – `EQ`.\n\n  * `LocaleId` – `EQ`.\n\
        \n  * `Modality` – `EQ`.\n\n  * `Channel` – `EQ`.\n\n  * `SessionId` – `EQ`.\n\
        \n  * `OriginatingRequestId` – `EQ`.\n\n  * `UtteranceState` – `EQ`.\n\n \
        \ * `UtteranceText` – `EQ`, `CO`."
    AnalyticsUtteranceFilterName:
      type: string
      enum:
      - BotAliasId
      - BotVersion
      - LocaleId
      - Modality
      - Channel
      - SessionId
      - OriginatingRequestId
      - UtteranceState
      - UtteranceText
    AnalyticsUtteranceFilters:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceFilter'
    AnalyticsUtteranceGroupByKey:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceField'
          description: The category by which the utterance analytics were grouped.
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsGroupByValue'
          description: A member of the category by which the utterance analytics were
            grouped.
      description: Contains the category by which the utterance analytics were grouped
        and the values for that category.
    AnalyticsUtteranceGroupByKeys:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceGroupByKey'
    AnalyticsUtteranceGroupByList:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceGroupBySpecification'
    AnalyticsUtteranceGroupBySpecification:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceField'
          description: Specifies whether to group the utterances by their text or
            their state.
      required:
      - name
      description: Contains the category by which to group the utterances.
    AnalyticsUtteranceMetric:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceMetricName'
          description: "The metric for which you want to get utterance summary statistics.\n\
            \n  * `Count` – The number of utterances.\n\n  * `Missed` – The number\
            \ of utterances that Amazon Lex failed to recognize.\n\n  * `Detected`\
            \ – The number of utterances that Amazon Lex managed to detect.\n\n  *\
            \ `UtteranceTimestamp` – The date and time of the utterance."
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          description: "The summary statistic to calculate.\n\n  * `Sum` – The total\
            \ count for the category you provide in `name`.\n\n  * `Average` – The\
            \ total count divided by the number of utterances in the category you\
            \ provide in `name`.\n\n  * `Max` – The highest count in the category\
            \ you provide in `name`."
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          description: Specifies whether to sort the results in ascending or descending
            order.
      required:
      - name
      - statistic
      description: Contains the metric and the summary statistic you want to calculate,
        and the order in which to sort the results, for the utterances across the
        user sessions with the bot.
    AnalyticsUtteranceMetricName:
      type: string
      enum:
      - Count
      - Missed
      - Detected
      - UtteranceTimestamp
    AnalyticsUtteranceMetricResult:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceMetricName'
          description: "The metric that you requested.\n\n  * `Count` – The number\
            \ of utterances.\n\n  * `Missed` – The number of utterances that Amazon\
            \ Lex failed to recognize.\n\n  * `Detected` – The number of utterances\
            \ that Amazon Lex managed to detect.\n\n  * `UtteranceTimestamp` – The\
            \ date and time of the utterance."
        statistic:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricStatistic'
          description: "The summary statistic that you requested to calculate.\n\n\
            \  * `Sum` – The total count for the category you provide in `name`.\n\
            \n  * `Average` – The total count divided by the number of utterances\
            \ in the category you provide in `name`.\n\n  * `Max` – The highest count\
            \ in the category you provide in `name`."
        value:
          allOf:
          - $ref: '#/components/schemas/AnalyticsMetricValue'
          description: The value of the summary statistic for the metric that you
            requested.
      description: An object containing the results for the utterance metric you requested.
    AnalyticsUtteranceMetricResults:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceMetricResult'
    AnalyticsUtteranceMetrics:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceMetric'
    AnalyticsUtteranceResult:
      type: object
      properties:
        binKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinKeys'
          description: A list of objects containing the criteria you requested for
            binning results and the values of the bins.
        groupByKeys:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceGroupByKeys'
          description: A list of objects containing the criteria you requested for
            grouping results and the values of the bins.
        metricsResults:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceMetricResults'
          description: A list of objects, each of which contains a metric you want
            to list, the statistic for the metric you want to return, and the method
            by which to organize the results.
        attributeResults:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceAttributeResults'
          description: A list of objects containing information about the last used
            intent at the time of an utterance.
      description: An object containing the results for the utterance metrics you
        requested and the bin and/or group(s) they refer to, if applicable.
    AnalyticsUtteranceResults:
      type: array
      items:
        $ref: '#/components/schemas/AnalyticsUtteranceResult'
    AnalyticsUtteranceSortByName:
      type: string
      enum:
      - UtteranceTimestamp
    AnswerField:
      type: string
    AssociatedTranscript:
      type: object
      properties:
        transcript:
          allOf:
          - $ref: '#/components/schemas/Transcript'
          description: The content of the transcript that meets the search filter
            criteria. For the JSON format of the transcript, see [Output transcript
            format](https://docs.aws.amazon.com/lexv2/latest/dg/designing-output-format.html).
      description: The object containing information that associates the recommended
        intent/slot type with a conversation.
    AssociatedTranscriptFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AssociatedTranscriptFilterName'
          description: The name of the field to use for filtering. The allowed names
            are IntentId and SlotTypeId.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: The values to use to filter the transcript.
      required:
      - name
      - values
      description: Filters to search for the associated transcript.
    AssociatedTranscriptFilterName:
      type: string
      enum:
      - IntentId
      - SlotTypeId
    AssociatedTranscriptFilters:
      type: array
      items:
        $ref: '#/components/schemas/AssociatedTranscriptFilter'
    AssociatedTranscriptList:
      type: array
      items:
        $ref: '#/components/schemas/AssociatedTranscript'
    AttachmentTitle:
      type: string
      minLength: 1
      maxLength: 250
    AttachmentUrl:
      type: string
      minLength: 1
      maxLength: 250
    AudioAndDTMFInputSpecification:
      type: object
      properties:
        startTimeoutMs:
          allOf:
          - $ref: '#/components/schemas/TimeInMilliSeconds'
          description: Time for which a bot waits before assuming that the customer
            isn't going to speak or press a key. This timeout is shared between Audio
            and DTMF inputs.
        audioSpecification:
          allOf:
          - $ref: '#/components/schemas/AudioSpecification'
          description: Specifies the settings on audio input.
        dtmfSpecification:
          allOf:
          - $ref: '#/components/schemas/DTMFSpecification'
          description: Specifies the settings on DTMF input.
      required:
      - startTimeoutMs
      description: Specifies the audio and DTMF input specification.
    AudioFileS3Location:
      type: string
      pattern: ^s3://([a-z0-9\\.-]+)/(.+)$
      minLength: 1
      maxLength: 1024
    AudioLogDestination:
      type: object
      properties:
        s3Bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketLogDestination'
          description: The Amazon S3 bucket where the audio log files are stored.
            The IAM role specified in the `roleArn` parameter of the [CreateBot](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html)
            operation must have permission to write to this bucket.
      required:
      - s3Bucket
      description: The location of audio log files collected when conversation logging
        is enabled for a bot.
    AudioLogSetting:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Determines whether audio logging in enabled for the bot.
        destination:
          $ref: '#/components/schemas/AudioLogDestination'
        selectiveLoggingEnabled:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: The option to enable selective conversation log capture for
            audio.
      required:
      - enabled
      - destination
      description: Settings for logging audio of conversations between Amazon Lex
        and a user. You specify whether to log audio and the Amazon S3 bucket where
        the audio file is stored.
    AudioLogSettingsList:
      type: array
      items:
        $ref: '#/components/schemas/AudioLogSetting'
    AudioRecognitionStrategy:
      type: string
      enum:
      - UseSlotValuesAsCustomVocabulary
    AudioSpecification:
      type: object
      properties:
        maxLengthMs:
          allOf:
          - $ref: '#/components/schemas/TimeInMilliSeconds'
          description: Time for how long Amazon Lex waits before speech input is truncated
            and the speech is returned to application.
        endTimeoutMs:
          allOf:
          - $ref: '#/components/schemas/TimeInMilliSeconds'
          description: Time for which a bot waits after the customer stops speaking
            to assume the utterance is finished.
      required:
      - maxLengthMs
      - endTimeoutMs
      description: Specifies the audio input specifications.
    BatchCreateCustomVocabularyItemRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with this custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The identifier of the version of the bot associated with this
            custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where this custom
            vocabulary is used. The string must match one of the supported locales.
            For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        customVocabularyItemList:
          allOf:
          - $ref: '#/components/schemas/CreateCustomVocabularyItemsList'
          description: A list of new custom vocabulary items. Each entry must contain
            a phrase and can optionally contain a displayAs and/or a weight.
      required:
      - botId
      - botVersion
      - localeId
      - customVocabularyItemList
    BatchCreateCustomVocabularyItemResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with this custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The identifier of the version of the bot associated with this
            custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where this custom
            vocabulary is used. The string must match one of the supported locales.
            For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        errors:
          allOf:
          - $ref: '#/components/schemas/FailedCustomVocabularyItems'
          description: A list of custom vocabulary items that failed to create during
            the operation. The reason for the error is contained within each error
            object.
        resources:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyItems'
          description: A list of custom vocabulary items that were successfully created
            during the operation.
    BatchDeleteCustomVocabularyItemRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with this custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The identifier of the version of the bot associated with this
            custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where this custom
            vocabulary is used. The string must match one of the supported locales.
            For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        customVocabularyItemList:
          allOf:
          - $ref: '#/components/schemas/DeleteCustomVocabularyItemsList'
          description: A list of custom vocabulary items requested to be deleted.
            Each entry must contain the unique custom vocabulary entry identifier.
      required:
      - botId
      - botVersion
      - localeId
      - customVocabularyItemList
    BatchDeleteCustomVocabularyItemResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with this custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The identifier of the version of the bot associated with this
            custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where this custom
            vocabulary is used. The string must match one of the supported locales.
            For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        errors:
          allOf:
          - $ref: '#/components/schemas/FailedCustomVocabularyItems'
          description: A list of custom vocabulary items that failed to delete during
            the operation. The reason for the error is contained within each error
            object.
        resources:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyItems'
          description: A list of custom vocabulary items that were successfully deleted
            during the operation.
    BatchUpdateCustomVocabularyItemRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with this custom vocabulary
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The identifier of the version of the bot associated with this
            custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where this custom
            vocabulary is used. The string must match one of the supported locales.
            For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        customVocabularyItemList:
          allOf:
          - $ref: '#/components/schemas/UpdateCustomVocabularyItemsList'
          description: A list of custom vocabulary items with updated fields. Each
            entry must contain a phrase and can optionally contain a displayAs and/or
            a weight.
      required:
      - botId
      - botVersion
      - localeId
      - customVocabularyItemList
    BatchUpdateCustomVocabularyItemResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with this custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The identifier of the version of the bot associated with this
            custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where this custom
            vocabulary is used. The string must match one of the supported locales.
            For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        errors:
          allOf:
          - $ref: '#/components/schemas/FailedCustomVocabularyItems'
          description: A list of custom vocabulary items that failed to update during
            the operation. The reason for the error is contained within each error
            object.
        resources:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyItems'
          description: A list of custom vocabulary items that were successfully updated
            during the operation.
    BedrockGuardrailConfiguration:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/BedrockGuardrailIdentifier'
          description: The unique guardrail id for the Bedrock guardrail configuration.
        version:
          allOf:
          - $ref: '#/components/schemas/BedrockGuardrailVersion'
          description: The guardrail version for the Bedrock guardrail configuration.
      required:
      - identifier
      - version
      description: The details on the Bedrock guardrail configuration.
    BedrockGuardrailIdentifier:
      type: string
      pattern: ^(([a-z0-9]+)|(arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:guardrail/[a-z0-9]+))$
      minLength: 1
      maxLength: 2048
    BedrockGuardrailVersion:
      type: string
      pattern: ^(([1-9][0-9]{0,7})|(DRAFT))$
    BedrockKnowledgeBaseArn:
      type: string
      pattern: ^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,40}:[0-9]{12}:knowledge-base\/[A-Za-z0-9]{10}$|^[A-Za-z0-9]{10}$
      minLength: 1
      maxLength: 200
    BedrockKnowledgeStoreConfiguration:
      type: object
      properties:
        bedrockKnowledgeBaseArn:
          allOf:
          - $ref: '#/components/schemas/BedrockKnowledgeBaseArn'
          description: The base ARN of the knowledge base used.
        exactResponse:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to return an exact response, or to return
            an answer generated by the model, using the fields you specify from the
            database.
        exactResponseFields:
          allOf:
          - $ref: '#/components/schemas/BedrockKnowledgeStoreExactResponseFields'
          description: Contains the names of the fields used for an exact response
            to the user.
      required:
      - bedrockKnowledgeBaseArn
      description: Contains details about the configuration of a Amazon Bedrock knowledge
        base.
    BedrockKnowledgeStoreExactResponseFields:
      type: object
      properties:
        answerField:
          allOf:
          - $ref: '#/components/schemas/AnswerField'
          description: The answer field used for an exact response from Bedrock Knowledge
            Store.
      description: The exact response fields given by the Bedrock knowledge store.
    BedrockModelArn:
      type: string
      pattern: ^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}::foundation-model\/[a-z0-9-]{1,63}[.]{1}([a-z0-9-]{1,63}[.]){0,2}[a-z0-9-]{1,63}([:][a-z0-9-]{1,63}){0,2}$
    BedrockModelCustomPrompt:
      type: string
      minLength: 1
      maxLength: 4000
    BedrockModelSpecification:
      type: object
      properties:
        modelArn:
          allOf:
          - $ref: '#/components/schemas/BedrockModelArn'
          description: The ARN of the foundation model used in descriptive bot building.
        guardrail:
          allOf:
          - $ref: '#/components/schemas/BedrockGuardrailConfiguration'
          description: The guardrail configuration in the Bedrock model specification
            details.
        traceStatus:
          allOf:
          - $ref: '#/components/schemas/BedrockTraceStatus'
          description: The Bedrock trace status in the Bedrock model specification
            details.
        customPrompt:
          allOf:
          - $ref: '#/components/schemas/BedrockModelCustomPrompt'
          description: The custom prompt used in the Bedrock model specification details.
      required:
      - modelArn
      description: Contains information about the Amazon Bedrock model used to interpret
        the prompt used in descriptive bot building.
    BedrockTraceStatus:
      type: string
      enum:
      - ENABLED
      - DISABLED
    Boolean:
      type: boolean
      default: false
    BotAliasHistoryEvent:
      type: object
      properties:
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that was used in the event.
        startDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event started.
        endDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the event ended.
      description: Provides a record of an event that affects a bot alias. For example,
        when the version of a bot that the alias points to changes.
    BotAliasHistoryEventsList:
      type: array
      items:
        $ref: '#/components/schemas/BotAliasHistoryEvent'
    BotAliasId:
      type: string
      pattern: ^(\bTSTALIASID\b|[0-9a-zA-Z]+)$
      minLength: 10
      maxLength: 10
    BotAliasLocaleSettings:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Determines whether the locale is enabled for the bot. If the
            value is `false`, the locale isn't available for use.
        codeHookSpecification:
          allOf:
          - $ref: '#/components/schemas/CodeHookSpecification'
          description: Specifies the Lambda function that should be used in the locale.
      required:
      - enabled
      description: Specifies settings that are unique to a locale. For example, you
        can use different Lambda function depending on the bot's locale.
    BotAliasLocaleSettingsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/BotAliasLocaleSettings'
    BotAliasName:
      type: string
      pattern: ^(\bAmazonLexTestAlias\b|[0-9a-zA-Z][_-]?)+$
      minLength: 1
      maxLength: 100
    BotAliasReplicaSummary:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The bot alias ID for all the alias bot replications.
        botAliasReplicationStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasReplicationStatus'
          description: The replication statuses for all the alias bot replications.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The bot version for all the alias bot replications.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation time and date for all the alias bot replications.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time and date updated for all the alias bot replications.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: The reasons for failure for the aliases bot replications.
      description: Contains information about all the aliases replication statuses
        applicable for global resiliency.
    BotAliasReplicaSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotAliasReplicaSummary'
    BotAliasReplicationStatus:
      type: string
      enum:
      - Creating
      - Updating
      - Available
      - Deleting
      - Failed
      description: '<p>The status of the operation to replicate the bot alias. Values:
        Creating, Updating, Available, Deleting, Failed.</p>'
    BotAliasStatus:
      type: string
      enum:
      - Creating
      - Available
      - Deleting
      - Failed
    BotAliasSummary:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The unique identifier assigned to the bot alias. You can use
            this ID to get detailed information about the alias using the [DescribeBotAlias](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeBotAlias.html)
            operation.
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that the bot alias references.
        botAliasStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasStatus'
          description: The current state of the bot alias. If the status is `Available`,
            the alias is ready for use.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot alias was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot alias was last
            updated.
      description: Summary information about bot aliases returned from the [ListBotAliases](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotAliases.html)
        operation.
    BotAliasSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotAliasSummary'
    BotAliasTestExecutionTarget:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The bot Id of the bot alias used in the test set execution.
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The bot alias Id of the bot alias used in the test set execution.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale Id of the bot alias used in the test set execution.
      required:
      - botId
      - botAliasId
      - localeId
      description: The target Amazon S3 location for the test set execution using
        a bot alias.
    BotExportSpecification:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot assigned by Amazon Lex.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that was exported. This will be either
            `DRAFT` or the version number.
      required:
      - botId
      - botVersion
      description: Provides the identity of a the bot that was exported.
    BotFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotFilterName'
          description: The name of the field to filter the list of bots.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: The value to use for filtering the list of bots.
        operator:
          allOf:
          - $ref: '#/components/schemas/BotFilterOperator'
          description: The operator to use for the filter. Specify `EQ` when the `ListBots`
            operation should return only aliases that equal the specified value. Specify
            `CO` when the `ListBots` operation should return aliases that contain
            the specified value.
      required:
      - name
      - values
      - operator
      description: Filters the responses returned by the `ListBots` operation.
    BotFilterName:
      type: string
      enum:
      - BotName
      - BotType
    BotFilterOperator:
      type: string
      enum:
      - CO
      - EQ
      - NE
    BotFilters:
      type: array
      items:
        $ref: '#/components/schemas/BotFilter'
    BotImportSpecification:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name that Amazon Lex should use for the bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role used to build
            and run the bot.
        dataPrivacy:
          $ref: '#/components/schemas/DataPrivacy'
        errorLogSettings:
          allOf:
          - $ref: '#/components/schemas/ErrorLogSettings'
          description: Allows you to configure destinations where error logs will
            be published during the bot import process.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: 'The time, in seconds, that Amazon Lex should keep information
            about a user''s conversation with the bot.


            A user interaction remains active for the amount of time specified. If
            no conversation occurs during this time, the session expires and Amazon
            Lex deletes any data provided before the timeout.


            You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.'
        botTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags to add to the bot. You can only add tags when
            you import a bot. You can't use the `UpdateBot` operation to update tags.
            To update tags, use the `TagResource` operation.
        testBotAliasTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags to add to the test alias for a bot. You can
            only add tags when you import a bot. You can't use the `UpdateAlias` operation
            to update tags. To update tags on the test alias, use the `TagResource`
            operation.
      required:
      - botName
      - roleArn
      - dataPrivacy
      description: Provides the bot parameters required for importing a bot.
    BotLocaleExportSpecification:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to create the locale for.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot to export.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale to export. The string
            must match one of the locales in the bot.
      required:
      - botId
      - botVersion
      - localeId
      description: Provides the bot locale parameters required for exporting a bot
        locale.
    BotLocaleFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotLocaleFilterName'
          description: The name of the field to filter the list of bots.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: The value to use for filtering the list of bots.
        operator:
          allOf:
          - $ref: '#/components/schemas/BotLocaleFilterOperator'
          description: The operator to use for the filter. Specify `EQ` when the `ListBotLocales`
            operation should return only aliases that equal the specified value. Specify
            `CO` when the `ListBotLocales` operation should return aliases that contain
            the specified value.
      required:
      - name
      - values
      - operator
      description: Filters responses returned by the `ListBotLocales` operation.
    BotLocaleFilterName:
      type: string
      enum:
      - BotLocaleName
    BotLocaleFilterOperator:
      type: string
      enum:
      - CO
      - EQ
    BotLocaleFilters:
      type: array
      items:
        $ref: '#/components/schemas/BotLocaleFilter'
    BotLocaleHistoryEvent:
      type: object
      properties:
        event:
          allOf:
          - $ref: '#/components/schemas/BotLocaleHistoryEventDescription'
          description: A description of the event that occurred.
        eventDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the event occurred.
      required:
      - event
      - eventDate
      description: Provides information about an event that occurred affecting the
        bot locale.
    BotLocaleHistoryEventDescription:
      type: string
    BotLocaleHistoryEventsList:
      type: array
      items:
        $ref: '#/components/schemas/BotLocaleHistoryEvent'
    BotLocaleImportSpecification:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to import the locale to.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot to import the locale to. This can only
            be the `DRAFT` version of the bot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that the bot will
            be used in. The string must match one of the supported locales. All of
            the intents, slot types, and slots used in the bot must have the same
            locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          description: "Determines the threshold where Amazon Lex will insert the\
            \ `AMAZON.FallbackIntent`, `AMAZON.KendraSearchIntent`, or both when returning\
            \ alternative intents. `AMAZON.FallbackIntent` and `AMAZON.KendraSearchIntent`\
            \ are only inserted if they are configured for the bot.\n\nFor example,\
            \ suppose a bot is configured with the confidence threshold of 0.80 and\
            \ the `AMAZON.FallbackIntent`. Amazon Lex returns three alternative intents\
            \ with the following confidence scores: IntentA (0.70), IntentB (0.60),\
            \ IntentC (0.50). The response from the `PostText` operation would be:\n\
            \n  * `AMAZON.FallbackIntent`\n\n  * `IntentA`\n\n  * `IntentB`\n\n  *\
            \ `IntentC`"
        voiceSettings:
          $ref: '#/components/schemas/VoiceSettings'
      required:
      - botId
      - botVersion
      - localeId
      description: Provides the bot locale parameters required for importing a bot
        locale.
    BotLocaleSortAttribute:
      type: string
      enum:
      - BotLocaleName
    BotLocaleSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BotLocaleSortAttribute'
          description: The bot locale attribute to sort by.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies whether to sort the bot locales in ascending or descending
            order.
      required:
      - attribute
      - order
      description: Specifies attributes for sorting a list of bot locales.
    BotLocaleStatus:
      type: string
      enum:
      - Creating
      - Building
      - Built
      - ReadyExpressTesting
      - Failed
      - Deleting
      - NotBuilt
      - Importing
      - Processing
    BotLocaleSummary:
      type: object
      properties:
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the bot locale.
        localeName:
          allOf:
          - $ref: '#/components/schemas/LocaleName'
          description: The name of the bot locale.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the bot locale.
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          description: The current status of the bot locale. When the status is `Built`
            the locale is ready for use.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot locale was last
            updated.
        lastBuildSubmittedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot locale was last
            built.
      description: Summary information about bot locales returned by the [ListBotLocales](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotLocales.html)
        operation.
    BotLocaleSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotLocaleSummary'
    BotMember:
      type: object
      properties:
        botMemberId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique ID of a bot that is a member of this network of
            bots.
        botMemberName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The unique name of a bot that is a member of this network of
            bots.
        botMemberAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The alias ID of a bot that is a member of this network of bots.
        botMemberAliasName:
          allOf:
          - $ref: '#/components/schemas/BotAliasName'
          description: The alias name of a bot that is a member of this network of
            bots.
        botMemberVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of a bot that is a member of this network of bots.
      required:
      - botMemberId
      - botMemberName
      - botMemberAliasId
      - botMemberAliasName
      - botMemberVersion
      description: A bot that is a member of a network of bots.
    BotMembers:
      type: array
      items:
        $ref: '#/components/schemas/BotMember'
    BotRecommendationResultStatistics:
      type: object
      properties:
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentStatistics'
          description: Statistical information about about the intents associated
            with the bot recommendation results.
        slotTypes:
          allOf:
          - $ref: '#/components/schemas/SlotTypeStatistics'
          description: Statistical information about the slot types associated with
            the bot recommendation results.
      description: A statistical summary of the bot recommendation results.
    BotRecommendationResults:
      type: object
      properties:
        botLocaleExportUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          description: The presigned URL link of the recommended bot definition.
        associatedTranscriptsUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          description: The presigned url link of the associated transcript.
        statistics:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationResultStatistics'
          description: The statistical summary of the bot recommendation results.
      description: The object representing the URL of the bot definition, the URL
        of the associated transcript, and a statistical summary of the bot recommendation
        results.
    BotRecommendationStatus:
      type: string
      enum:
      - Processing
      - Deleting
      - Deleted
      - Downloading
      - Updating
      - Available
      - Failed
      - Stopping
      - Stopped
    BotRecommendationSummary:
      type: object
      properties:
        botRecommendationStatus:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationStatus'
          description: 'The status of the bot recommendation.


            If the status is Failed, then the reasons for the failure are listed in
            the failureReasons field.'
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot recommendation to be updated.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot recommendation
            was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot recommendation
            was last updated.
      required:
      - botRecommendationStatus
      - botRecommendationId
      description: A summary of the bot recommendation.
    BotRecommendationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotRecommendationSummary'
    BotReplicaStatus:
      type: string
      enum:
      - Enabling
      - Enabled
      - Deleting
      - Failed
      description: '<p>The status of the operation to replicate the bot. Values: Enabling,
        Enabled, Deleting, Failed.</p>'
    BotReplicaSummary:
      type: object
      properties:
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The replica region used in the replication statuses summary.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation time and date for the replicated bots.
        botReplicaStatus:
          allOf:
          - $ref: '#/components/schemas/BotReplicaStatus'
          description: The operation status for the replicated bot applicable.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: The reasons for the failure for the replicated bot.
      description: Contains summary information about all the replication statuses
        applicable for global resiliency.
    BotReplicaSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotReplicaSummary'
    BotSortAttribute:
      type: string
      enum:
      - BotName
    BotSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BotSortAttribute'
          description: The attribute to use to sort the list of bots.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can choose ascending or descending.
      required:
      - attribute
      - order
      description: Specifies attributes for sorting a list of bots.
    BotStatus:
      type: string
      enum:
      - Creating
      - Available
      - Inactive
      - Deleting
      - Failed
      - Versioning
      - Importing
      - Updating
    BotSummary:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the bot. Use this ID to get
            detailed information about the bot with the [DescribeBot](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeBot.html)
            operation.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the bot.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          description: The current status of the bot. When the status is `Available`
            the bot is ready for use.
        latestBotVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          description: The latest numerical version in use for the bot.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the bot was last updated.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          description: The type of the bot.
      description: Summary information about a bot returned by the [ListBots](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBots.html)
        operation.
    BotSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotSummary'
    BotType:
      type: string
      enum:
      - Bot
      - BotNetwork
    BotVersion:
      type: string
      pattern: ^(DRAFT|[0-9]+)$
      minLength: 1
      maxLength: 5
    BotVersionLocaleDetails:
      type: object
      properties:
        sourceBotVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of a bot used for a bot locale.
      required:
      - sourceBotVersion
      description: The version of a bot used for a bot locale.
    BotVersionLocaleSpecification:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/BotVersionLocaleDetails'
    BotVersionReplicaSortAttribute:
      type: string
      enum:
      - BotVersion
    BotVersionReplicaSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BotVersionReplicaSortAttribute'
          description: The attribute of the sort category for the version replicated
            bots.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order of the sort category for the version replicated bots.
      required:
      - attribute
      - order
      description: The sort category for the version replicated bots.
    BotVersionReplicaSummary:
      type: object
      properties:
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The bot version for the summary information for all the version
            replication statuses.
        botVersionReplicationStatus:
          allOf:
          - $ref: '#/components/schemas/BotVersionReplicationStatus'
          description: The version replication status for all the replicated bots.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time of the replication status for all
            the replicated bots.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: The reasons for replication failure for all the replicated
            bots.
      description: Contains summary information for all the version replication statuses
        applicable for Global resiliency.
    BotVersionReplicaSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotVersionReplicaSummary'
    BotVersionReplicationStatus:
      type: string
      enum:
      - Creating
      - Available
      - Deleting
      - Failed
      description: '<p>The status of the operation to replicate the bot version. Values:
        Creating, Available, Deleting, Failed.</p>'
    BotVersionSortAttribute:
      type: string
      enum:
      - BotVersion
    BotVersionSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BotVersionSortAttribute'
          description: The attribute to use to sort the list of versions.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can specify ascending or descending
            order.
      required:
      - attribute
      - order
      description: Specifies attributes for sorting a list of bot versions.
    BotVersionSummary:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the bot associated with the version.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The numeric version of the bot, or `DRAFT` to indicate that
            this is the version of the bot that can be updated..
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the version.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          description: The status of the bot. When the status is available, the version
            of the bot is ready for use.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the version was created.
      description: Summary information about a bot version returned by the [ListBotVersions](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBotVersions.html)
        operation.
    BotVersionSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BotVersionSummary'
    BoxedBoolean:
      type: boolean
    BuildBotLocaleRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to build. The identifier is returned
            in the response from the [CreateBot](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html)
            operation.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot to build. This can only be the draft
            version of the bot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that the bot will
            be used in. The string must match one of the supported locales. All of
            the intents, slot types, and slots used in the bot must have the same
            locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
      required:
      - botId
      - botVersion
      - localeId
    BuildBotLocaleResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the specified bot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that was built. This is only the draft
            version of the bot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale specified of where the bot can be used.
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          description: The bot's build status. When the status is `ReadyExpressTesting`
            you can test the bot using the utterances defined for the intents and
            slot types. When the status is `Built`, the bot is ready for use and can
            be tested using any utterance.
        lastBuildSubmittedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp indicating the date and time that the bot was last
            built for this locale.
    BuildtimeSettings:
      type: object
      properties:
        descriptiveBotBuilder:
          allOf:
          - $ref: '#/components/schemas/DescriptiveBotBuilderSpecification'
          description: An object containing specifications for the descriptive bot
            building feature.
        sampleUtteranceGeneration:
          allOf:
          - $ref: '#/components/schemas/SampleUtteranceGenerationSpecification'
          description: Contains specifications for the sample utterance generation
            feature.
      description: Contains specifications about the Amazon Lex build time generative
        AI capabilities from Amazon Bedrock that you can turn on for your bot.
    BuiltInIntentSortAttribute:
      type: string
      enum:
      - IntentSignature
    BuiltInIntentSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BuiltInIntentSortAttribute'
          description: The attribute to use to sort the list of built-in intents.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can specify ascending or descending
            order.
      required:
      - attribute
      - order
      description: Specifies attributes for sorting a list of built-in intents.
    BuiltInIntentSummary:
      type: object
      properties:
        intentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          description: The signature of the built-in intent. Use this to specify the
            parent intent of a derived intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the intent.
      description: Provides summary information about a built-in intent for the [
        ListBuiltInIntents ](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBuiltInIntents.html)
        operation.
    BuiltInIntentSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BuiltInIntentSummary'
    BuiltInOrCustomSlotTypeId:
      type: string
      pattern: ^((AMAZON\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$
      minLength: 1
      maxLength: 25
    BuiltInSlotTypeSortAttribute:
      type: string
      enum:
      - SlotTypeSignature
    BuiltInSlotTypeSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/BuiltInSlotTypeSortAttribute'
          description: The attribute to use to sort the list of built-in intents.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can choose ascending or descending.
      required:
      - attribute
      - order
      description: Specifies attributes for sorting a list of built-in slot types.
    BuiltInSlotTypeSummary:
      type: object
      properties:
        slotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          description: The signature of the built-in slot type. Use this to specify
            the parent slot type of a derived slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the built-in slot type.
      description: Provides summary information about a built-in slot type for the
        [ ListBuiltInSlotTypes ](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListBuiltInSlotTypes.html)
        operation.
    BuiltInSlotTypeSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BuiltInSlotTypeSummary'
    BuiltInsMaxResults:
      type: integer
      minimum: 20
      maximum: 20
    Button:
      type: object
      properties:
        text:
          allOf:
          - $ref: '#/components/schemas/ButtonText'
          description: The text that appears on the button. Use this to tell the user
            what value is returned when they choose this button.
        value:
          allOf:
          - $ref: '#/components/schemas/ButtonValue'
          description: The value returned to Amazon Lex when the user chooses this
            button. This must be one of the slot values configured for the slot.
      required:
      - text
      - value
      description: Describes a button to use on a response card used to gather slot
        values from a user.
    ButtonText:
      type: string
      minLength: 1
      maxLength: 50
    ButtonValue:
      type: string
      minLength: 1
      maxLength: 50
    ButtonsList:
      type: array
      items:
        $ref: '#/components/schemas/Button'
    ChildDirected:
      type: boolean
      default: false
    CloudWatchLogGroupArn:
      type: string
      pattern: ^arn:[\w\-]+:logs:[\w\-]+:[\d]{12}:log-group:[\.\-_/#A-Za-z0-9]{1,512}(?::\*)?$
      minLength: 1
      maxLength: 2048
    CloudWatchLogGroupLogDestination:
      type: object
      properties:
        cloudWatchLogGroupArn:
          allOf:
          - $ref: '#/components/schemas/CloudWatchLogGroupArn'
          description: The Amazon Resource Name (ARN) of the log group where text
            and metadata logs are delivered.
        logPrefix:
          allOf:
          - $ref: '#/components/schemas/LogPrefix'
          description: The prefix of the log stream name within the log group that
            you specified
      required:
      - cloudWatchLogGroupArn
      - logPrefix
      description: The Amazon CloudWatch Logs log group where the text and metadata
        logs are delivered. The log group must exist before you enable logging.
    CodeHookInterfaceVersion:
      type: string
      minLength: 1
      maxLength: 5
    CodeHookSpecification:
      type: object
      properties:
        lambdaCodeHook:
          $ref: '#/components/schemas/LambdaCodeHook'
      required:
      - lambdaCodeHook
      description: Contains information about code hooks that Amazon Lex calls during
        a conversation.
    CompositeSlotTypeSetting:
      type: object
      properties:
        subSlots:
          allOf:
          - $ref: '#/components/schemas/SubSlotTypeList'
          description: Subslots in the composite slot.
      description: A composite slot is a combination of two or more slots that capture
        multiple pieces of information in a single user input.
    Condition:
      type: object
      properties:
        expressionString:
          allOf:
          - $ref: '#/components/schemas/ConditionExpression'
          description: The expression string that is evaluated.
      required:
      - expressionString
      description: Provides an expression that evaluates to true or false.
    ConditionExpression:
      type: string
      minLength: 1
      maxLength: 1024
    ConditionKey:
      type: string
      minLength: 1
      maxLength: 1024
    ConditionKeyValueMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ConditionValue'
    ConditionMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ConditionKeyValueMap'
    ConditionOperator:
      type: string
      minLength: 1
    ConditionValue:
      type: string
      minLength: 1
      maxLength: 1024
    ConditionalBranch:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the branch.
        condition:
          allOf:
          - $ref: '#/components/schemas/Condition'
          description: Contains the expression to evaluate. If the condition is true,
            the branch's actions are taken.
        nextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: The next step in the conversation.
        response:
          $ref: '#/components/schemas/ResponseSpecification'
      required:
      - name
      - condition
      - nextStep
      description: A set of actions that Amazon Lex should run if the condition is
        matched.
    ConditionalBranches:
      type: array
      items:
        $ref: '#/components/schemas/ConditionalBranch'
    ConditionalSpecification:
      type: object
      properties:
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Determines whether a conditional branch is active. When `active`
            is false, the conditions are not evaluated.
        conditionalBranches:
          allOf:
          - $ref: '#/components/schemas/ConditionalBranches'
          description: A list of conditional branches. A conditional branch is made
            up of a condition, a response and a next step. The response and next step
            are executed when the condition is true.
        defaultBranch:
          allOf:
          - $ref: '#/components/schemas/DefaultConditionalBranch'
          description: The conditional branch that should be followed when the conditions
            for other branches are not satisfied. A conditional branch is made up
            of a condition, a response and a next step.
      required:
      - active
      - conditionalBranches
      - defaultBranch
      description: Provides a list of conditional branches. Branches are evaluated
        in the order that they are entered in the list. The first branch with a condition
        that evaluates to true is executed. The last branch in the list is the default
        branch. The default branch should not have any condition expression. The default
        branch is executed if no other branch has a matching condition.
    ConfidenceThreshold:
      type: number
      format: double
      minimum: 0
      maximum: 1
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
      description: The action that you tried to perform couldn't be completed because
        the resource is in a conflicting state. For example, deleting a bot that is
        in the CREATING state. Try your request again.
    ContextTimeToLiveInSeconds:
      type: integer
      minimum: 5
      maximum: 86400
    ContextTurnsToLive:
      type: integer
      minimum: 1
      maximum: 20
    ConversationEndState:
      type: string
      enum:
      - Success
      - Failure
      - Dropped
    ConversationLevelIntentClassificationResultItem:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The intent name used in the evaluation of intent level success
            or failure.
        matchResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: The number of times the specific intent is used in the evaluation
            of intent level success or failure.
      required:
      - intentName
      - matchResult
      description: The item listing the evaluation of intent level success or failure.
    ConversationLevelIntentClassificationResults:
      type: array
      items:
        $ref: '#/components/schemas/ConversationLevelIntentClassificationResultItem'
    ConversationLevelResultDetail:
      type: object
      properties:
        endToEndResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: The success or failure of the streaming of the conversation.
        speechTranscriptionResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: The speech transcription success or failure details of the
            conversation.
      required:
      - endToEndResult
      description: The conversation level details of the conversation used in the
        test set.
    ConversationLevelSlotResolutionResultItem:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The intents used in the slots list for the slot resolution
            details.
        slotName:
          allOf:
          - $ref: '#/components/schemas/TestResultSlotName'
          description: The slot name in the slots list for the slot resolution details.
        matchResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: The number of matching slots used in the slots listings for
            the slot resolution evaluation.
      required:
      - intentName
      - slotName
      - matchResult
      description: The slots used for the slot resolution in the conversation.
    ConversationLevelSlotResolutionResults:
      type: array
      items:
        $ref: '#/components/schemas/ConversationLevelSlotResolutionResultItem'
    ConversationLevelTestResultItem:
      type: object
      properties:
        conversationId:
          allOf:
          - $ref: '#/components/schemas/TestSetConversationId'
          description: The conversation Id of the test result evaluation item.
        endToEndResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: The end-to-end success or failure of the test result evaluation
            item.
        speechTranscriptionResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: The speech transcription success or failure of the test result
            evaluation item.
        intentClassificationResults:
          allOf:
          - $ref: '#/components/schemas/ConversationLevelIntentClassificationResults'
          description: The intent classification of the test result evaluation item.
        slotResolutionResults:
          allOf:
          - $ref: '#/components/schemas/ConversationLevelSlotResolutionResults'
          description: The slot success or failure of the test result evaluation item.
      required:
      - conversationId
      - endToEndResult
      - intentClassificationResults
      - slotResolutionResults
      description: The test result evaluation item at the conversation level.
    ConversationLevelTestResultItemList:
      type: array
      items:
        $ref: '#/components/schemas/ConversationLevelTestResultItem'
    ConversationLevelTestResults:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ConversationLevelTestResultItemList'
          description: The item list in the test set results data at the conversation
            level.
      required:
      - items
      description: The test set results data at the conversation level.
    ConversationLevelTestResultsFilterBy:
      type: object
      properties:
        endToEndResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: The selection of matched or mismatched end-to-end status to
            filter test set results data at the conversation level.
      description: The selection to filter the test set results data at the conversation
        level.
    ConversationLogSettings:
      type: object
      properties:
        textLogSettings:
          allOf:
          - $ref: '#/components/schemas/TextLogSettingsList'
          description: The Amazon CloudWatch Logs settings for logging text and metadata.
        audioLogSettings:
          allOf:
          - $ref: '#/components/schemas/AudioLogSettingsList'
          description: The Amazon S3 settings for logging audio to an S3 bucket.
      description: Configures conversation logging that saves audio, text, and metadata
        for the conversations with your users.
    ConversationLogsDataSource:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The bot Id from the conversation logs.
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The bot alias Id from the conversation logs.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale Id of the conversation log.
        filter:
          allOf:
          - $ref: '#/components/schemas/ConversationLogsDataSourceFilterBy'
          description: The filter for the data source of the conversation log.
      required:
      - botId
      - botAliasId
      - localeId
      - filter
      description: The data source that uses conversation logs.
    ConversationLogsDataSourceFilterBy:
      type: object
      properties:
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The start time for the conversation log.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The end time for the conversation log.
        inputMode:
          allOf:
          - $ref: '#/components/schemas/ConversationLogsInputModeFilter'
          description: The selection to filter by input mode for the conversation
            logs.
      required:
      - startTime
      - endTime
      - inputMode
      description: The selected data source to filter the conversation log.
    ConversationLogsInputModeFilter:
      type: string
      enum:
      - Speech
      - Text
    Count:
      type: integer
    CreateBotAliasRequest:
      type: object
      properties:
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The alias to create. The name must be unique for the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the alias. Use this description to help identify
            the alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot that this alias points to. You can use
            the [UpdateBotAlias](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_UpdateBotAlias.html)
            operation to change the bot version associated with the alias.
        botAliasLocaleSettings:
          allOf:
          - $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          description: Maps configuration information to a specific locale. You can
            use this parameter to specify a specific Lambda function to run different
            functions in different locales.
        conversationLogSettings:
          allOf:
          - $ref: '#/components/schemas/ConversationLogSettings'
          description: Specifies whether Amazon Lex logs text and audio for a conversation
            with the bot. When you enable conversation logs, text logs store text
            input, transcripts of audio input, and associated metadata in Amazon CloudWatch
            Logs. Audio logs store audio input in Amazon S3.
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that the alias applies to.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags to add to the bot alias. You can only add tags
            when you create an alias, you can't use the `UpdateBotAlias` operation
            to update the tags on a bot alias. To update tags, use the `TagResource`
            operation.
      required:
      - botAliasName
      - botId
    CreateBotAliasResponse:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The unique identifier of the bot alias.
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name specified for the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description specified for the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot associated with this alias.
        botAliasLocaleSettings:
          allOf:
          - $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          description: Configuration information for a specific locale.
        conversationLogSettings:
          allOf:
          - $ref: '#/components/schemas/ConversationLogSettings'
          description: The conversation log settings specified for the alias.
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botAliasStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasStatus'
          description: The current status of the alias. The alias is first put into
            the `Creating` state. When the alias is ready to be used, it is put into
            the `Available` state. You can use the `DescribeBotAlias` operation to
            get the current state of an alias.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that this alias applies to.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A Unix timestamp indicating the date and time that the bot
            alias was created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags associated with the bot alias.
    CreateBotLocaleRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to create the locale for.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot to create the locale for. This can only
            be the draft version of the bot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that the bot will
            be used in. The string must match one of the supported locales. All of
            the intents, slot types, and slots used in the bot must have the same
            locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the bot locale. Use this to help identify
            the bot locale in lists.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          description: "Determines the threshold where Amazon Lex will insert the\
            \ `AMAZON.FallbackIntent`, `AMAZON.KendraSearchIntent`, or both when returning\
            \ alternative intents. `AMAZON.FallbackIntent` and `AMAZON.KendraSearchIntent`\
            \ are only inserted if they are configured for the bot.\n\nFor example,\
            \ suppose a bot is configured with the confidence threshold of 0.80 and\
            \ the `AMAZON.FallbackIntent`. Amazon Lex returns three alternative intents\
            \ with the following confidence scores: IntentA (0.70), IntentB (0.60),\
            \ IntentC (0.50). The response from the `RecognizeText` operation would\
            \ be:\n\n  * AMAZON.FallbackIntent\n\n  * IntentA\n\n  * IntentB\n\n \
            \ * IntentC"
        voiceSettings:
          allOf:
          - $ref: '#/components/schemas/VoiceSettings'
          description: The Amazon Polly voice ID that Amazon Lex uses for voice interaction
            with the user.
        generativeAISettings:
          $ref: '#/components/schemas/GenerativeAISettings'
      required:
      - botId
      - botVersion
      - localeId
      - nluIntentConfidenceThreshold
    CreateBotLocaleResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The specified bot identifier.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The specified bot version.
        localeName:
          allOf:
          - $ref: '#/components/schemas/LocaleName'
          description: The specified locale name.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The specified locale identifier.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The specified description of the bot locale.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          description: The specified confidence threshold for inserting the `AMAZON.FallbackIntent`
            and `AMAZON.KendraSearchIntent` intents.
        voiceSettings:
          allOf:
          - $ref: '#/components/schemas/VoiceSettings'
          description: The Amazon Polly voice ID that Amazon Lex uses for voice interaction
            with the user.
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          description: 'The status of the bot.


            When the status is `Creating` the bot locale is being configured. When
            the status is `Building` Amazon Lex is building the bot for testing and
            use.


            If the status of the bot is `ReadyExpressTesting`, you can test the bot
            using the exact utterances specified in the bots'' intents. When the bot
            is ready for full testing or to run, the status is `Built`.


            If there was a problem with building the bot, the status is `Failed`.
            If the bot was saved but not built, the status is `NotBuilt`.'
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp specifying the date and time that the bot locale
            was created.
        generativeAISettings:
          $ref: '#/components/schemas/GenerativeAISettings'
    CreateBotReplicaRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The request for the unique bot ID of the source bot to be replicated
            in the secondary region.
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The request for the secondary region that will be used in the
            replication of the source bot.
      required:
      - botId
      - replicaRegion
    CreateBotReplicaResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique bot ID of the replicated bot generated.
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The region of the replicated bot generated.
        sourceRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The source region for the source bot used for the replicated
            bot generated.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time of the replicated bot generated.
        botReplicaStatus:
          allOf:
          - $ref: '#/components/schemas/BotReplicaStatus'
          description: The operational status of the replicated bot generated.
    CreateBotRequest:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the bot. The bot name must be unique in the account
            that creates the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the bot. It appears in lists to help you identify
            a particular bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permission
            to access the bot.
        dataPrivacy:
          allOf:
          - $ref: '#/components/schemas/DataPrivacy'
          description: Provides information on additional privacy protections Amazon
            Lex should use with the bot's data.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: 'The time, in seconds, that Amazon Lex should keep information
            about a user''s conversation with the bot.


            A user interaction remains active for the amount of time specified. If
            no conversation occurs during this time, the session expires and Amazon
            Lex deletes any data provided before the timeout.


            You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.'
        botTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags to add to the bot. You can only add tags when
            you create a bot. You can't use the `UpdateBot` operation to update tags.
            To update tags, use the `TagResource` operation.
        testBotAliasTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags to add to the test alias for a bot. You can
            only add tags when you create a bot. You can't use the `UpdateAlias` operation
            to update tags. To update tags on the test alias, use the `TagResource`
            operation.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          description: The type of a bot to create.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          description: The list of bot members in a network to be created.
        errorLogSettings:
          allOf:
          - $ref: '#/components/schemas/ErrorLogSettings'
          description: Specifies the configuration for error logging during bot creation.
      required:
      - botName
      - roleArn
      - dataPrivacy
      - idleSessionTTLInSeconds
    CreateBotResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: A unique identifier for a particular bot. You use this to identify
            the bot when you call other Amazon Lex API operations.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name specified for the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description specified for the bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM role specified for the bot.
        dataPrivacy:
          allOf:
          - $ref: '#/components/schemas/DataPrivacy'
          description: The data privacy settings specified for the bot.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: The session idle time specified for the bot.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          description: Shows the current status of the bot. The bot is first in the
            `Creating` status. Once the bot is read for use, it changes to the `Available`
            status. After the bot is created, you can use the `DRAFT` version of the
            bot.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp indicating the date and time that the bot was created.
        botTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags associated with the bot.
        testBotAliasTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags associated with the test alias for the bot.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          description: The type of a bot that was created.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          description: The list of bots in a network that was created.
        errorLogSettings:
          allOf:
          - $ref: '#/components/schemas/ErrorLogSettings'
          description: Specifies configuration settings for delivering error logs
            to Cloudwatch Logs in an Amazon Lex bot response.
    CreateBotVersionRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to create the version for.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the version. Use the description to help identify
            the version in lists.
        botVersionLocaleSpecification:
          allOf:
          - $ref: '#/components/schemas/BotVersionLocaleSpecification'
          description: Specifies the locales that Amazon Lex adds to this version.
            You can choose the `Draft` version or any other previously published version
            for each locale. When you specify a source version, the locale data is
            copied from the source version to the new version.
      required:
      - botId
      - botVersionLocaleSpecification
    CreateBotVersionResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The bot identifier specified in the request.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the version specified in the request.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          description: The version number assigned to the version.
        botVersionLocaleSpecification:
          allOf:
          - $ref: '#/components/schemas/BotVersionLocaleSpecification'
          description: The source versions used for each locale in the new version.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          description: When you send a request to create or update a bot, Amazon Lex
            sets the status response element to `Creating`. After Amazon Lex builds
            the bot, it sets status to `Available`. If Amazon Lex can't build the
            bot, it sets status to `Failed`.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the version was created.
    CreateCustomVocabularyItemsList:
      type: array
      items:
        $ref: '#/components/schemas/NewCustomVocabularyItem'
    CreateExportRequest:
      type: object
      properties:
        resourceSpecification:
          allOf:
          - $ref: '#/components/schemas/ExportResourceSpecification'
          description: Specifies the type of resource to export, either a bot or a
            bot locale. You can only specify one type of resource to export.
        fileFormat:
          allOf:
          - $ref: '#/components/schemas/ImportExportFileFormat'
          description: The file format of the bot or bot locale definition files.
        filePassword:
          allOf:
          - $ref: '#/components/schemas/ImportExportFilePassword'
          description: An password to use to encrypt the exported archive. Using a
            password is optional, but you should encrypt the archive to protect the
            data in transit between Amazon Lex and your local computer.
      required:
      - resourceSpecification
      - fileFormat
    CreateExportResponse:
      type: object
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: An identifier for a specific request to create an export.
        resourceSpecification:
          allOf:
          - $ref: '#/components/schemas/ExportResourceSpecification'
          description: A description of the type of resource that was exported, either
            a bot or a bot locale.
        fileFormat:
          allOf:
          - $ref: '#/components/schemas/ImportExportFileFormat'
          description: The file format used for the bot or bot locale definition files.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          description: The status of the export. When the status is `Completed`, you
            can use the [DescribeExport](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html)
            operation to get the pre-signed S3 URL link to your exported bot or bot
            locale.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the request to export a bot was created.
    CreateIntentRequest:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the intent. Intent names must be unique in the
            locale that contains the intent and cannot match the name of any built-in
            intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the intent. Use the description to help identify
            the intent in lists.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          description: A unique identifier for the built-in intent to base this intent
            on.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          description: 'An array of strings that a user might say to signal the intent.
            For example, "I want a pizza", or "I want a {PizzaSize} pizza".


            In an utterance, slot names are enclosed in curly braces ("{", "}") to
            indicate where they should be displayed in the utterance shown to the
            user..'
        dialogCodeHook:
          allOf:
          - $ref: '#/components/schemas/DialogCodeHookSettings'
          description: 'Specifies that Amazon Lex invokes the alias Lambda function
            for each user input. You can invoke this Lambda function to personalize
            user interaction.


            For example, suppose that your bot determines that the user''s name is
            John. You Lambda function might retrieve John''s information from a backend
            database and prepopulate some of the values. For example, if you find
            that John is gluten intolerant, you might set the corresponding intent
            slot, `glutenIntolerant` to `true`. You might find John''s phone number
            and set the corresponding session attribute.'
        fulfillmentCodeHook:
          allOf:
          - $ref: '#/components/schemas/FulfillmentCodeHookSettings'
          description: 'Specifies that Amazon Lex invokes the alias Lambda function
            when the intent is ready for fulfillment. You can invoke this function
            to complete the bot''s transaction with the user.


            For example, in a pizza ordering bot, the Lambda function can look up
            the closest pizza restaurant to the customer''s location and then place
            an order on the customer''s behalf.'
        intentConfirmationSetting:
          allOf:
          - $ref: '#/components/schemas/IntentConfirmationSetting'
          description: Provides prompts that Amazon Lex sends to the user to confirm
            the completion of an intent. If the user answers "no," the settings contain
            a statement that is sent to the user to end the intent.
        intentClosingSetting:
          allOf:
          - $ref: '#/components/schemas/IntentClosingSetting'
          description: Sets the response that Amazon Lex sends to the user when the
            intent is closed.
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          description: 'A list of contexts that must be active for this intent to
            be considered by Amazon Lex.


            When an intent has an input context list, Amazon Lex only considers using
            the intent in an interaction with the user when the specified contexts
            are included in the active context list for the session. If the contexts
            are not active, then Amazon Lex will not use the intent.


            A context can be automatically activated using the `outputContexts` property
            or it can be set at runtime.


            For example, if there are two intents with different input contexts that
            respond to the same utterances, only the intent with the active context
            will respond.


            An intent may have up to 5 input contexts. If an intent has multiple input
            contexts, all of the contexts must be active to consider the intent.'
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          description: 'A lists of contexts that the intent activates when it is fulfilled.


            You can use an output context to indicate the intents that Amazon Lex
            should consider for the next turn of the conversation with a customer.


            When you use the `outputContextsList` property, all of the contexts specified
            in the list are activated when the intent is fulfilled. You can set up
            to 10 output contexts. You can also set the number of conversation turns
            that the context should be active, or the length of time that the context
            should be active.'
        kendraConfiguration:
          allOf:
          - $ref: '#/components/schemas/KendraConfiguration'
          description: Configuration information required to use the `AMAZON.KendraSearchIntent`
            intent to connect to an Amazon Kendra index. The `AMAZON.KendraSearchIntent`
            intent is called when Amazon Lex can't determine another intent to invoke.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with this intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with this intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where this intent
            is used. All of the bots, slot types, and slots used by the intent must
            have the same locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        initialResponseSetting:
          allOf:
          - $ref: '#/components/schemas/InitialResponseSetting'
          description: Configuration settings for the response that is sent to the
            user at the beginning of a conversation, before eliciting slot values.
        qnAIntentConfiguration:
          allOf:
          - $ref: '#/components/schemas/QnAIntentConfiguration'
          description: Specifies the configuration of the built-in `Amazon.QnAIntent`.
            The `AMAZON.QnAIntent` intent is called when Amazon Lex can't determine
            another intent to invoke. If you specify this field, you can't specify
            the `kendraConfiguration` field.
        qInConnectIntentConfiguration:
          allOf:
          - $ref: '#/components/schemas/QInConnectIntentConfiguration'
          description: Qinconnect intent configuration details for the create intent
            request.
      required:
      - intentName
      - botId
      - botVersion
      - localeId
    CreateIntentResponse:
      type: object
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: A unique identifier for the intent.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name specified for the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description specified for the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          description: The signature of the parent intent specified for the intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          description: The sample utterances specified for the intent.
        dialogCodeHook:
          allOf:
          - $ref: '#/components/schemas/DialogCodeHookSettings'
          description: The dialog Lambda function specified for the intent.
        fulfillmentCodeHook:
          allOf:
          - $ref: '#/components/schemas/FulfillmentCodeHookSettings'
          description: The fulfillment Lambda function specified for the intent.
        intentConfirmationSetting:
          allOf:
          - $ref: '#/components/schemas/IntentConfirmationSetting'
          description: The confirmation setting specified for the intent.
        intentClosingSetting:
          allOf:
          - $ref: '#/components/schemas/IntentClosingSetting'
          description: The closing setting specified for the intent.
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          description: The list of input contexts specified for the intent.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          description: The list of output contexts specified for the intent.
        kendraConfiguration:
          allOf:
          - $ref: '#/components/schemas/KendraConfiguration'
          description: Configuration for searching a Amazon Kendra index specified
            for the intent.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale that the intent is specified to use.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the intent was created.
        initialResponseSetting:
          allOf:
          - $ref: '#/components/schemas/InitialResponseSetting'
          description: Configuration settings for the response that is sent to the
            user at the beginning of a conversation, before eliciting slot values.
        qnAIntentConfiguration:
          allOf:
          - $ref: '#/components/schemas/QnAIntentConfiguration'
          description: Details about the the configuration of the built-in `Amazon.QnAIntent`.
        qInConnectIntentConfiguration:
          allOf:
          - $ref: '#/components/schemas/QInConnectIntentConfiguration'
          description: Qinconnect intent configuration details for the create intent
            response.
    CreateResourcePolicyRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy is attached to.
        policy:
          allOf:
          - $ref: '#/components/schemas/Policy'
          description: 'A resource policy to add to the resource. The policy is a
            JSON structure that contains one or more statements that define the policy.
            The policy must follow the IAM syntax. For more information about the
            contents of a JSON policy document, see [ IAM JSON policy reference ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html).


            If the policy isn''t valid, Amazon Lex returns a validation exception.'
      required:
      - resourceArn
      - policy
    CreateResourcePolicyResponse:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy was attached to.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          description: The current revision of the resource policy. Use the revision
            ID to make sure that you are updating the most current version of a resource
            policy when you add a policy statement to a resource, delete a resource,
            or update a resource.
    CreateResourcePolicyStatementRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy is attached to.
        statementId:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: 'The name of the statement. The ID is the same as the `Sid`
            IAM property. The statement name must be unique within the policy. For
            more information, see [IAM JSON policy elements: Sid](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_sid.html).'
        effect:
          allOf:
          - $ref: '#/components/schemas/Effect'
          description: Determines whether the statement allows or denies access to
            the resource.
        principal:
          allOf:
          - $ref: '#/components/schemas/PrincipalList'
          description: 'An IAM principal, such as an IAM user, IAM role, or Amazon
            Web Services services that is allowed or denied access to a resource.
            For more information, see [Amazon Web Services JSON policy elements: Principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html).'
        action:
          allOf:
          - $ref: '#/components/schemas/OperationList'
          description: The Amazon Lex action that this policy either allows or denies.
            The action must apply to the resource type of the specified ARN. For more
            information, see [ Actions, resources, and condition keys for Amazon Lex
            V2](https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonlexv2.html).
        condition:
          allOf:
          - $ref: '#/components/schemas/ConditionMap'
          description: 'Specifies a condition when the policy is in effect. If the
            principal of the policy is a service principal, you must provide two condition
            blocks, one with a SourceAccount global condition key and one with a SourceArn
            global condition key.


            For more information, see [IAM JSON policy elements: Condition ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).'
        expectedRevisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          description: 'The identifier of the revision of the policy to edit. If this
            revision ID doesn''t match the current revision ID, Amazon Lex throws
            an exception.


            If you don''t specify a revision, Amazon Lex overwrites the contents of
            the policy with the new values.'
      required:
      - resourceArn
      - statementId
      - effect
      - principal
      - action
    CreateResourcePolicyStatementResponse:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy is attached to.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          description: The current revision of the resource policy. Use the revision
            ID to make sure that you are updating the most current version of a resource
            policy when you add a policy statement to a resource, delete a resource,
            or update a resource.
    CreateSlotRequest:
      type: object
      properties:
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the slot. Slot names must be unique within the
            bot that contains the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the slot. Use this to help identify the slot
            in lists.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The unique identifier for the slot type associated with this
            slot. The slot type determines the values that can be entered into the
            slot.
        valueElicitationSetting:
          allOf:
          - $ref: '#/components/schemas/SlotValueElicitationSetting'
          description: Specifies prompts that Amazon Lex sends to the user to elicit
            a response that provides the value for the slot.
        obfuscationSetting:
          allOf:
          - $ref: '#/components/schemas/ObfuscationSetting'
          description: 'Determines how slot values are used in Amazon CloudWatch logs.
            If the value of the `obfuscationSetting` parameter is `DefaultObfuscation`,
            slot values are obfuscated in the log output. If the value is `None`,
            the actual value is present in the log output.


            The default is to obfuscate values in the CloudWatch logs.'
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the slot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the slot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that the slot will
            be used in. The string must match one of the supported locales. All of
            the bots, intents, slot types used by the slot must have the same locale.
            For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the intent that contains the slot.
        multipleValuesSetting:
          allOf:
          - $ref: '#/components/schemas/MultipleValuesSetting'
          description: 'Indicates whether the slot returns multiple values in one
            response. Multi-value slots are only available in the `en-US` locale.
            If you set this value to `true` in any other locale, Amazon Lex throws
            a `ValidationException`.


            If the `multipleValuesSetting` is not set, the default value is `false`.'
        subSlotSetting:
          allOf:
          - $ref: '#/components/schemas/SubSlotSetting'
          description: Specifications for the constituent sub slots and the expression
            for the composite slot.
      required:
      - slotName
      - valueElicitationSetting
      - botId
      - botVersion
      - localeId
      - intentId
    CreateSlotResponse:
      type: object
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier associated with the slot. Use this to
            identify the slot when you update or delete it.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name specified for the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description associated with the slot.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The unique identifier of the slot type associated with this
            slot.
        valueElicitationSetting:
          allOf:
          - $ref: '#/components/schemas/SlotValueElicitationSetting'
          description: The value elicitation settings specified for the slot.
        obfuscationSetting:
          allOf:
          - $ref: '#/components/schemas/ObfuscationSetting'
          description: Indicates whether the slot is configured to obfuscate values
            in Amazon CloudWatch logs.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot associated with the slot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the slot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and local specified for the slot.
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the intent associated with the slot.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the date and time that the slot was created.
        multipleValuesSetting:
          allOf:
          - $ref: '#/components/schemas/MultipleValuesSetting'
          description: Indicates whether the slot returns multiple values in one response.
        subSlotSetting:
          allOf:
          - $ref: '#/components/schemas/SubSlotSetting'
          description: Specifications for the constituent sub slots and the expression
            for the composite slot.
    CreateSlotTypeRequest:
      type: object
      properties:
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name for the slot. A slot type name must be unique within
            the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the slot type. Use the description to help
            identify the slot type in lists.
        slotTypeValues:
          allOf:
          - $ref: '#/components/schemas/SlotTypeValues'
          description: A list of `SlotTypeValue` objects that defines the values that
            the slot type can take. Each value can have a list of synonyms, additional
            values that help train the machine learning model about the values that
            it resolves for a slot.
        valueSelectionSetting:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionSetting'
          description: "Determines the strategy that Amazon Lex uses to select a value\
            \ from the list of possible values. The field can be set to one of the\
            \ following values:\n\n  * `ORIGINAL_VALUE` \\- Returns the value entered\
            \ by the user, if the user value is similar to the slot value.\n\n  *\
            \ `TOP_RESOLUTION` \\- If there is a resolution list for the slot, return\
            \ the first value in the resolution list. If there is no resolution list,\
            \ return null.\n\nIf you don't specify the `valueSelectionSetting` parameter,\
            \ the default is `ORIGINAL_VALUE`."
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          description: 'The built-in slot type used as a parent of this slot type.
            When you define a parent slot type, the new slot type has the configuration
            of the parent slot type.


            Only `AMAZON.AlphaNumeric` is supported.'
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with this slot type.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The identifier of the bot version associated with this slot
            type.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that the slot type
            will be used in. The string must match one of the supported locales. All
            of the bots, intents, and slots used by the slot type must have the same
            locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        externalSourceSetting:
          allOf:
          - $ref: '#/components/schemas/ExternalSourceSetting'
          description: Sets the type of external information used to create the slot
            type.
        compositeSlotTypeSetting:
          allOf:
          - $ref: '#/components/schemas/CompositeSlotTypeSetting'
          description: Specifications for a composite slot type.
      required:
      - slotTypeName
      - botId
      - botVersion
      - localeId
    CreateSlotTypeResponse:
      type: object
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the slot type. Use this to
            identify the slot type in the `UpdateSlotType` and `DeleteSlotType` operations.
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name specified for the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description specified for the slot type.
        slotTypeValues:
          allOf:
          - $ref: '#/components/schemas/SlotTypeValues'
          description: The list of values that the slot type can assume.
        valueSelectionSetting:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionSetting'
          description: The strategy that Amazon Lex uses to select a value from the
            list of possible values.
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          description: The signature of the base slot type specified for the slot
            type.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot associated with the slot type.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the slot type.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The specified language and local specified for the slot type.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot type was created.
        externalSourceSetting:
          allOf:
          - $ref: '#/components/schemas/ExternalSourceSetting'
          description: The type of external information used to create the slot type.
        compositeSlotTypeSetting:
          allOf:
          - $ref: '#/components/schemas/CompositeSlotTypeSetting'
          description: Specifications for a composite slot type.
    CreateTestSetDiscrepancyReportRequest:
      type: object
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id for the test set discrepancy report.
        target:
          allOf:
          - $ref: '#/components/schemas/TestSetDiscrepancyReportResourceTarget'
          description: The target bot for the test set discrepancy report.
      required:
      - testSetId
      - target
    CreateTestSetDiscrepancyReportResponse:
      type: object
      properties:
        testSetDiscrepancyReportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test set discrepancy report to
            describe.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time for the test set discrepancy report.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id for the test set discrepancy report.
        target:
          allOf:
          - $ref: '#/components/schemas/TestSetDiscrepancyReportResourceTarget'
          description: The target bot for the test set discrepancy report.
    CreateUploadUrlRequest:
      type: object
      properties: {}
    CreateUploadUrlResponse:
      type: object
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: An identifier for a unique import job. Use it when you call
            the [StartImport](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_StartImport.html)
            operation.
        uploadUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          description: A pre-signed S3 write URL. Upload the zip archive file that
            contains the definition of your bot or bot locale.
    CustomPayload:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/CustomPayloadValue'
          description: The string that is sent to your application.
      required:
      - value
      description: A custom response string that Amazon Lex sends to your application.
        You define the content and structure the string.
    CustomPayloadValue:
      type: string
      minLength: 1
      maxLength: 1000
    CustomVocabularyEntryId:
      type: object
      properties:
        itemId:
          allOf:
          - $ref: '#/components/schemas/ItemId'
          description: The unique item identifier for the custom vocabulary items.
      required:
      - itemId
      description: The unique entry identifier for the custom vocabulary items.
    CustomVocabularyExportSpecification:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the custom vocabulary
            to export.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the custom vocabulary
            to export.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale of the bot that contains the custom vocabulary to
            export.
      required:
      - botId
      - botVersion
      - localeId
      description: Provides the parameters required for exporting a custom vocabulary.
    CustomVocabularyImportSpecification:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to import the custom vocabulary to.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot to import the custom vocabulary to.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the local to import the custom vocabulary
            to. The value must be `en_GB`.
      required:
      - botId
      - botVersion
      - localeId
      description: Provides the parameters required for importing a custom vocabulary.
    CustomVocabularyItem:
      type: object
      properties:
        itemId:
          allOf:
          - $ref: '#/components/schemas/ItemId'
          description: The unique item identifer for the custom vocabulary item from
            the custom vocabulary list.
        phrase:
          allOf:
          - $ref: '#/components/schemas/Phrase'
          description: The unique phrase for the custom vocabulary item from the custom
            vocabulary list.
        weight:
          allOf:
          - $ref: '#/components/schemas/Weight'
          description: The weight assigned for the custom vocabulary item from the
            custom vocabulary list.
        displayAs:
          allOf:
          - $ref: '#/components/schemas/Phrase'
          description: The DisplayAs value for the custom vocabulary item from the
            custom vocabulary list.
      required:
      - itemId
      - phrase
      description: The unique custom vocabulary item from the custom vocabulary list.
    CustomVocabularyItems:
      type: array
      items:
        $ref: '#/components/schemas/CustomVocabularyItem'
    CustomVocabularyStatus:
      type: string
      enum:
      - Ready
      - Deleting
      - Exporting
      - Importing
      - Creating
    DTMFCharacter:
      type: string
      pattern: ^[A-D0-9#*]{1}$
    DTMFSpecification:
      type: object
      properties:
        maxLength:
          allOf:
          - $ref: '#/components/schemas/MaxUtteranceDigits'
          description: The maximum number of DTMF digits allowed in an utterance.
        endTimeoutMs:
          allOf:
          - $ref: '#/components/schemas/TimeInMilliSeconds'
          description: How long the bot should wait after the last DTMF character
            input before assuming that the input has concluded.
        deletionCharacter:
          allOf:
          - $ref: '#/components/schemas/DTMFCharacter'
          description: The DTMF character that clears the accumulated DTMF digits
            and immediately ends the input.
        endCharacter:
          allOf:
          - $ref: '#/components/schemas/DTMFCharacter'
          description: The DTMF character that immediately ends input. If the user
            does not press this character, the input ends after the end timeout.
      required:
      - maxLength
      - endTimeoutMs
      - deletionCharacter
      - endCharacter
      description: Specifies the DTMF input specifications.
    DataPrivacy:
      type: object
      properties:
        childDirected:
          allOf:
          - $ref: '#/components/schemas/ChildDirected'
          description: For each Amazon Lex bot created with the Amazon Lex Model Building
            Service, you must specify whether your use of Amazon Lex is related to
            a website, program, or other application that is directed or targeted,
            in whole or in part, to children under age 13 and subject to the Children's
            Online Privacy Protection Act (COPPA) by specifying `true` or `false`
            in the `childDirected` field. By specifying `true` in the `childDirected`
            field, you confirm that your use of Amazon Lex **is** related to a website,
            program, or other application that is directed or targeted, in whole or
            in part, to children under age 13 and subject to COPPA. By specifying
            `false` in the `childDirected` field, you confirm that your use of Amazon
            Lex **is not** related to a website, program, or other application that
            is directed or targeted, in whole or in part, to children under age 13
            and subject to COPPA. You may not specify a default value for the `childDirected`
            field that does not accurately reflect whether your use of Amazon Lex
            is related to a website, program, or other application that is directed
            or targeted, in whole or in part, to children under age 13 and subject
            to COPPA. If your use of Amazon Lex relates to a website, program, or
            other application that is directed in whole or in part, to children under
            age 13, you must obtain any required verifiable parental consent under
            COPPA. For information regarding the use of Amazon Lex in connection with
            websites, programs, or other applications that are directed or targeted,
            in whole or in part, to children under age 13, see the [Amazon Lex FAQ](http://aws.amazon.com/lex/faqs#data-security).
      required:
      - childDirected
      description: By default, data stored by Amazon Lex is encrypted. The `DataPrivacy`
        structure provides settings that determine how Amazon Lex handles special
        cases of securing the data for your bot.
    DataSourceConfiguration:
      type: object
      properties:
        opensearchConfiguration:
          allOf:
          - $ref: '#/components/schemas/OpensearchConfiguration'
          description: Contains details about the configuration of the Amazon OpenSearch
            Service database used for the `AMAZON.QnAIntent`. To create a domain,
            follow the steps at [Creating and managing Amazon OpenSearch Service domains](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html).
        kendraConfiguration:
          allOf:
          - $ref: '#/components/schemas/QnAKendraConfiguration'
          description: Contains details about the configuration of the Amazon Kendra
            index used for the `AMAZON.QnAIntent`. To create a Amazon Kendra index,
            follow the steps at [Creating an index](https://docs.aws.amazon.com/kendra/latest/dg/create-index.html).
        bedrockKnowledgeStoreConfiguration:
          allOf:
          - $ref: '#/components/schemas/BedrockKnowledgeStoreConfiguration'
          description: Contains details about the configuration of the Amazon Bedrock
            knowledge base used for the `AMAZON.QnAIntent`. To set up a knowledge
            base, follow the steps at [Building a knowledge base](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base.html).
      description: Contains details about the configuration of the knowledge store
        used for the `AMAZON.QnAIntent`. You must have already created the knowledge
        store and indexed the documents within it.
    DateRangeFilter:
      type: object
      properties:
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp indicating the start date for the date range filter.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp indicating the end date for the date range filter.
      required:
      - startDateTime
      - endDateTime
      description: The object used for specifying the data range that the customer
        wants Amazon Lex to read through in the input transcripts.
    DefaultConditionalBranch:
      type: object
      properties:
        nextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: The next step in the conversation.
        response:
          $ref: '#/components/schemas/ResponseSpecification'
      description: A set of actions that Amazon Lex should run if none of the other
        conditions are met.
    DeleteBotAliasRequest:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The unique identifier of the bot alias to delete.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot associated with the alias
            to delete.
        skipResourceInUseCheck:
          allOf:
          - $ref: '#/components/schemas/SkipResourceInUseCheck'
          description: By default, Amazon Lex checks if any other resource, such as
            a bot network, is using the bot alias before it is deleted and throws
            a `ResourceInUseException` exception if the alias is being used by another
            resource. Set this parameter to `true` to skip this check and remove the
            alias even if it is being used by another resource.
      required:
      - botAliasId
      - botId
    DeleteBotAliasResponse:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The unique identifier of the bot alias to delete.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the alias to
            delete.
        botAliasStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasStatus'
          description: The current status of the alias. The status is `Deleting` while
            the alias is in the process of being deleted. Once the alias is deleted,
            it will no longer appear in the list of aliases returned by the `ListBotAliases`
            operation.
    DeleteBotLocaleRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the locale.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the locale.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that will be deleted.
            The string must match one of the supported locales. For more information,
            see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
      required:
      - botId
      - botVersion
      - localeId
    DeleteBotLocaleResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contained the deleted locale.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contained the deleted locale.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the deleted locale.
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          description: The status of deleting the bot locale. The locale first enters
            the `Deleting` status. Once the locale is deleted it no longer appears
            in the list of locales for the bot.
    DeleteBotReplicaRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique ID of the replicated bot to be deleted from the
            secondary region
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The secondary region of the replicated bot that will be deleted.
      required:
      - botId
      - replicaRegion
    DeleteBotReplicaResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique bot ID of the replicated bot generated.
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The region of the replicated bot generated.
        botReplicaStatus:
          allOf:
          - $ref: '#/components/schemas/BotReplicaStatus'
          description: The operational status of the replicated bot generated.
    DeleteBotRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to delete.
        skipResourceInUseCheck:
          allOf:
          - $ref: '#/components/schemas/SkipResourceInUseCheck'
          description: By default, Amazon Lex checks if any other resource, such as
            an alias or bot network, is using the bot version before it is deleted
            and throws a `ResourceInUseException` exception if the bot is being used
            by another resource. Set this parameter to `true` to skip this check and
            remove the bot even if it is being used by another resource.
      required:
      - botId
    DeleteBotResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that Amazon Lex is deleting.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          description: The current status of the bot. The status is `Deleting` while
            the bot and its associated resources are being deleted.
    DeleteBotVersionRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the version.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot to delete.
        skipResourceInUseCheck:
          allOf:
          - $ref: '#/components/schemas/SkipResourceInUseCheck'
          description: By default, Amazon Lex checks if any other resource, such as
            an alias or bot network, is using the bot version before it is deleted
            and throws a `ResourceInUseException` exception if the version is being
            used by another resource. Set this parameter to `true` to skip this check
            and remove the version even if it is being used by another resource.
      required:
      - botId
      - botVersion
    DeleteBotVersionResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that is being deleted.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot that is being deleted.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          description: The current status of the bot.
    DeleteCustomVocabularyItemsList:
      type: array
      items:
        $ref: '#/components/schemas/CustomVocabularyEntryId'
    DeleteCustomVocabularyRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot to remove the custom vocabulary
            from.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot to remove the custom vocabulary from.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale identifier for the locale that contains the custom
            vocabulary to remove.
      required:
      - botId
      - botVersion
      - localeId
    DeleteCustomVocabularyResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that the custom vocabulary was removed
            from.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that the custom vocabulary was removed
            from.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale identifier for the locale that the custom vocabulary
            was removed from.
        customVocabularyStatus:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyStatus'
          description: The status of removing the custom vocabulary.
    DeleteExportRequest:
      type: object
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the export to delete.
      required:
      - exportId
    DeleteExportResponse:
      type: object
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the deleted export.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          description: The current status of the deletion. When the deletion is complete,
            the export will no longer be returned by the [ListExports](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListExports.html)
            operation and calls to the [ DescribeExport](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeExport.html)
            operation with the export identifier will fail.
    DeleteImportRequest:
      type: object
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the import to delete.
      required:
      - importId
    DeleteImportResponse:
      type: object
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the deleted import.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          description: The current status of the deletion. When the deletion is complete,
            the import will no longer be returned by the [ListImports](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListImports.html)
            operation and calls to the [DescribeImport](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_DescribeImport.html)
            operation with the import identifier will fail.
    DeleteIntentRequest:
      type: object
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the intent to delete.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where the bot will
            be deleted. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
      required:
      - intentId
      - botId
      - botVersion
      - localeId
    DeleteResourcePolicyRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            has the resource policy attached.
        expectedRevisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          description: 'The identifier of the revision to edit. If this ID doesn''t
            match the current revision number, Amazon Lex returns an exception


            If you don''t specify a revision ID, Amazon Lex will delete the current
            policy.'
      required:
      - resourceArn
    DeleteResourcePolicyResponse:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy was deleted from.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          description: The current revision of the resource policy. Use the revision
            ID to make sure that you are updating the most current version of a resource
            policy when you add a policy statement to a resource, delete a resource,
            or update a resource.
    DeleteResourcePolicyStatementRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy is attached to.
        statementId:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the statement (SID) to delete from the policy.
        expectedRevisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          description: 'The identifier of the revision of the policy to delete the
            statement from. If this revision ID doesn''t match the current revision
            ID, Amazon Lex throws an exception.


            If you don''t specify a revision, Amazon Lex removes the current contents
            of the statement.'
      required:
      - resourceArn
      - statementId
    DeleteResourcePolicyStatementResponse:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy statement was removed from.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          description: The current revision of the resource policy. Use the revision
            ID to make sure that you are updating the most current version of a resource
            policy when you add a policy statement to a resource, delete a resource,
            or update a resource.
    DeleteSlotRequest:
      type: object
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the slot to delete.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the slot to delete.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the slot to delete.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that the slot will
            be deleted from. The string must match one of the supported locales. For
            more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the intent associated with the slot.
      required:
      - slotId
      - botId
      - botVersion
      - localeId
      - intentId
    DeleteSlotTypeRequest:
      type: object
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the slot type to delete.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the slot type.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the slot type.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that the slot type
            will be deleted from. The string must match one of the supported locales.
            For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        skipResourceInUseCheck:
          allOf:
          - $ref: '#/components/schemas/SkipResourceInUseCheck'
          description: By default, the `DeleteSlotType` operations throws a `ResourceInUseException`
            exception if you try to delete a slot type used by a slot. Set the `skipResourceInUseCheck`
            parameter to `true` to skip this check and remove the slot type even if
            a slot uses it.
      required:
      - slotTypeId
      - botId
      - botVersion
      - localeId
    DeleteTestSetRequest:
      type: object
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id of the test set to be deleted.
      required:
      - testSetId
    DeleteUtterancesRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the utterances.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where the utterances
            were collected. The string must match one of the supported locales. For
            more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        sessionId:
          allOf:
          - $ref: '#/components/schemas/SessionId'
          description: The unique identifier of the session with the user. The ID
            is returned in the response from the [RecognizeText](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_RecognizeText.html)
            and [RecognizeUtterance](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_RecognizeUtterance.html)
            operations.
      required:
      - botId
    DeleteUtterancesResponse:
      type: object
      properties: {}
    DescribeBotAliasRequest:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The identifier of the bot alias to describe.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the bot alias to
            describe.
      required:
      - botAliasId
      - botId
    DescribeBotAliasResponse:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The identifier of the bot alias.
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the bot alias.
        botAliasLocaleSettings:
          allOf:
          - $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          description: The locale settings that are unique to the alias.
        conversationLogSettings:
          allOf:
          - $ref: '#/components/schemas/ConversationLogSettings'
          description: Specifics of how Amazon Lex logs text and audio conversations
            with the bot associated with the alias.
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botAliasHistoryEvents:
          allOf:
          - $ref: '#/components/schemas/BotAliasHistoryEventsList'
          description: A list of events that affect a bot alias. For example, an event
            is recorded when the version that the alias points to changes.
        botAliasStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasStatus'
          description: The current status of the alias. When the alias is `Available`,
            the alias is ready for use with your bot.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the bot alias.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the alias was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the alias was last updated.
        parentBotNetworks:
          allOf:
          - $ref: '#/components/schemas/ParentBotNetworks'
          description: A list of the networks to which the bot alias you described
            belongs.
    DescribeBotLocaleRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the locale.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the locale.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The unique identifier of the locale to describe. The string
            must match one of the supported locales. For more information, see [Supported
            languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
      required:
      - botId
      - botVersion
      - localeId
    DescribeBotLocaleResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the locale.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the locale.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The unique identifier of the described locale.
        localeName:
          allOf:
          - $ref: '#/components/schemas/LocaleName'
          description: The name of the locale.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the locale.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          description: The confidence threshold where Amazon Lex inserts the `AMAZON.FallbackIntent`
            and `AMAZON.KendraSearchIntent` intents in the list of possible intents
            for an utterance.
        voiceSettings:
          allOf:
          - $ref: '#/components/schemas/VoiceSettings'
          description: The Amazon Polly voice Amazon Lex uses for voice interaction
            with the user.
        intentsCount:
          allOf:
          - $ref: '#/components/schemas/ResourceCount'
          description: The number of intents defined for the locale.
        slotTypesCount:
          allOf:
          - $ref: '#/components/schemas/ResourceCount'
          description: The number of slot types defined for the locale.
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          description: The status of the bot. If the status is `Failed`, the reasons
            for the failure are listed in the `failureReasons` field.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: if `botLocaleStatus` is `Failed`, Amazon Lex explains why it
            failed to build the bot.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the locale was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the locale was last updated.
        lastBuildSubmittedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the locale was last submitted for building.
        botLocaleHistoryEvents:
          allOf:
          - $ref: '#/components/schemas/BotLocaleHistoryEventsList'
          description: History of changes, such as when a locale is used in an alias,
            that have taken place for the locale.
        recommendedActions:
          allOf:
          - $ref: '#/components/schemas/RecommendedActions'
          description: Recommended actions to take to resolve an error in the `failureReasons`
            field.
        generativeAISettings:
          allOf:
          - $ref: '#/components/schemas/GenerativeAISettings'
          description: Contains settings for Amazon Bedrock's generative AI features
            for your bot locale.
    DescribeBotRecommendationRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot associated with the bot recommendation.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the bot recommendation.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the bot recommendation
            to describe. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot recommendation to describe.
      required:
      - botId
      - botVersion
      - localeId
      - botRecommendationId
    DescribeBotRecommendationResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the bot recommendation.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the bot recommendation.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the bot recommendation
            to describe.
        botRecommendationStatus:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationStatus'
          description: The status of the bot recommendation. If the status is Failed,
            then the reasons for the failure are listed in the failureReasons field.
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot recommendation being described.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: If botRecommendationStatus is Failed, Amazon Lex explains why.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the bot recommendation was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the bot recommendation was last updated.
        transcriptSourceSetting:
          allOf:
          - $ref: '#/components/schemas/TranscriptSourceSetting'
          description: The object representing the Amazon S3 bucket containing the
            transcript, as well as the associated metadata.
        encryptionSetting:
          allOf:
          - $ref: '#/components/schemas/EncryptionSetting'
          description: The object representing the passwords that were used to encrypt
            the data related to the bot recommendation results, as well as the KMS
            key ARN used to encrypt the associated metadata.
        botRecommendationResults:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationResults'
          description: The object representing the URL of the bot definition, the
            URL of the associated transcript and a statistical summary of the bot
            recommendation results.
    DescribeBotReplicaRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The request for the unique bot ID of the replicated bot being
            monitored.
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The request for the region of the replicated bot being monitored.
      required:
      - botId
      - replicaRegion
    DescribeBotReplicaResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique bot ID of the replicated bot being monitored.
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The region of the replicated bot being monitored.
        sourceRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The source region of the replicated bot being monitored.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time of the replicated bot being monitored.
        botReplicaStatus:
          allOf:
          - $ref: '#/components/schemas/BotReplicaStatus'
          description: The operational status of the replicated bot being monitored.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: The failure reasons the bot being monitored failed to replicate.
    DescribeBotRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot to describe.
      required:
      - botId
    DescribeBotResourceGenerationRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot for which to return the generation
            details.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot for which to return the generation details.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale of the bot for which to return the generation details.
        generationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the generation request for which to
            return the generation details.
      required:
      - botId
      - botVersion
      - localeId
      - generationId
    DescribeBotResourceGenerationResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot for which the generation request
            was made.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot for which the generation request was
            made.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale of the bot for which the generation request was
            made.
        generationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The generation ID for which to return the generation details.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: A list of reasons why the generation of bot resources through
            natural language description failed.
        generationStatus:
          allOf:
          - $ref: '#/components/schemas/GenerationStatus'
          description: The status of the generation request.
        generationInputPrompt:
          allOf:
          - $ref: '#/components/schemas/GenerationInput'
          description: The prompt used in the generation request.
        generatedBotLocaleUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          description: The Amazon S3 location of the generated bot locale configuration.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time at which the item was generated.
        modelArn:
          allOf:
          - $ref: '#/components/schemas/BedrockModelArn'
          description: The ARN of the model used to generate the bot resources.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time at which the generated item was updated.
    DescribeBotResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permission
            to access the bot.
        dataPrivacy:
          allOf:
          - $ref: '#/components/schemas/DataPrivacy'
          description: Settings for managing data privacy of the bot and its conversations
            with users.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: The maximum time in seconds that Amazon Lex retains the data
            gathered in a conversation.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          description: The current status of the bot. When the status is `Available`
            the bot is ready to be used in conversations with users.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was last updated.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          description: The type of the bot that was described.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          description: The list of bots in the network that was described.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: If the `botStatus` is `Failed`, this contains a list of reasons
            that the bot couldn't be built.
        errorLogSettings:
          allOf:
          - $ref: '#/components/schemas/ErrorLogSettings'
          description: Contains the configuration for error logging that specifies
            where and how bot errors are recorded, including destinations like CloudWatch
            Logs.
    DescribeBotVersionRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot containing the version to return
            metadata for.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot to return metadata for.
      required:
      - botId
      - botVersion
    DescribeBotVersionResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the version.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the bot that contains the version.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot that was described.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description specified for the bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permission
            to access the bot version.
        dataPrivacy:
          allOf:
          - $ref: '#/components/schemas/DataPrivacy'
          description: Data privacy settings for the bot version.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: The number of seconds that a session with the bot remains active
            before it is discarded by Amazon Lex.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          description: The current status of the bot. When the status is `Available`,
            the bot version is ready for use.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: If the `botStatus` is `Failed`, this contains a list of reasons
            that the version couldn't be built.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot version was created.
        parentBotNetworks:
          allOf:
          - $ref: '#/components/schemas/ParentBotNetworks'
          description: A list of the networks to which the bot version you described
            belongs.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          description: The type of the bot in the version that was described.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          description: The members of bot network in the version that was described.
    DescribeCustomVocabularyMetadataRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The bot version of the bot to return metadata for.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale to return the custom vocabulary information for.
            The locale must be `en_GB`.
      required:
      - botId
      - botVersion
      - localeId
    DescribeCustomVocabularyMetadataResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the custom vocabulary
            to describe.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale that contains the custom vocabulary to describe.
        customVocabularyStatus:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyStatus'
          description: The status of the custom vocabulary. If the status is `Ready`
            the custom vocabulary is ready to use.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the custom vocabulary was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the custom vocabulary was last updated.
    DescribeExportRequest:
      type: object
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the export to describe.
      required:
      - exportId
    DescribeExportResponse:
      type: object
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the described export.
        resourceSpecification:
          allOf:
          - $ref: '#/components/schemas/ExportResourceSpecification'
          description: The bot, bot ID, and optional locale ID of the exported bot
            or bot locale.
        fileFormat:
          allOf:
          - $ref: '#/components/schemas/ImportExportFileFormat'
          description: The file format used in the files that describe the resource.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          description: The status of the export. When the status is `Complete` the
            export archive file is available for download.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: If the `exportStatus` is failed, contains one or more reasons
            why the export could not be completed.
        downloadUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          description: A pre-signed S3 URL that points to the bot or bot locale archive.
            The URL is only available for 5 minutes after calling the `DescribeExport`
            operation.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the export was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last date and time that the export was updated.
    DescribeImportRequest:
      type: object
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the import to describe.
      required:
      - importId
    DescribeImportResponse:
      type: object
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the described import.
        resourceSpecification:
          allOf:
          - $ref: '#/components/schemas/ImportResourceSpecification'
          description: The specifications of the imported bot, bot locale, or custom
            vocabulary.
        importedResourceId:
          allOf:
          - $ref: '#/components/schemas/ImportedResourceId'
          description: The unique identifier that Amazon Lex assigned to the resource
            created by the import.
        importedResourceName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the imported resource.
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          description: The strategy used when there was a name conflict between the
            imported resource and an existing resource. When the merge strategy is
            `FailOnConflict` existing resources are not overwritten and the import
            fails.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          description: The status of the import process. When the status is `Completed`
            the resource is imported and ready for use.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: If the `importStatus` field is `Failed`, this provides one
            or more reasons for the failure.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the import was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the import was last updated.
    DescribeIntentRequest:
      type: object
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the intent to describe.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the intent to
            describe. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
      required:
      - intentId
      - botId
      - botVersion
      - localeId
    DescribeIntentResponse:
      type: object
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the intent when it was created.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name specified for the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          description: The identifier of the built-in intent that this intent is derived
            from, if any.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          description: User utterances that trigger this intent.
        dialogCodeHook:
          allOf:
          - $ref: '#/components/schemas/DialogCodeHookSettings'
          description: The Lambda function called during each turn of a conversation
            with the intent.
        fulfillmentCodeHook:
          allOf:
          - $ref: '#/components/schemas/FulfillmentCodeHookSettings'
          description: The Lambda function called when the intent is complete and
            ready for fulfillment.
        slotPriorities:
          allOf:
          - $ref: '#/components/schemas/SlotPrioritiesList'
          description: The list that determines the priority that slots should be
            elicited from the user.
        intentConfirmationSetting:
          allOf:
          - $ref: '#/components/schemas/IntentConfirmationSetting'
          description: Prompts that Amazon Lex sends to the user to confirm completion
            of an intent.
        intentClosingSetting:
          allOf:
          - $ref: '#/components/schemas/IntentClosingSetting'
          description: The response that Amazon Lex sends to when the intent is closed.
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          description: A list of contexts that must be active for the intent to be
            considered for sending to the user.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          description: A list of contexts that are activated when the intent is fulfilled.
        kendraConfiguration:
          allOf:
          - $ref: '#/components/schemas/KendraConfiguration'
          description: Configuration information required to use the `AMAZON.KendraSearchIntent`
            intent.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot associated with the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale specified for the intent.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the intent was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the intent was last updated.
        initialResponseSetting:
          allOf:
          - $ref: '#/components/schemas/InitialResponseSetting'
          description: Configuration setting for a response sent to the user before
            Amazon Lex starts eliciting slots.
        qnAIntentConfiguration:
          allOf:
          - $ref: '#/components/schemas/QnAIntentConfiguration'
          description: Details about the configuration of the built-in `Amazon.QnAIntent`.
        qInConnectIntentConfiguration:
          allOf:
          - $ref: '#/components/schemas/QInConnectIntentConfiguration'
          description: Qinconnect intent configuration details for the describe intent
            response.
    DescribeResourcePolicyRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy is attached to.
      required:
      - resourceArn
    DescribeResourcePolicyResponse:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy is attached to.
        policy:
          allOf:
          - $ref: '#/components/schemas/Policy'
          description: The JSON structure that contains the resource policy. For more
            information about the contents of a JSON policy document, see [ IAM JSON
            policy reference ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html).
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          description: The current revision of the resource policy. Use the revision
            ID to make sure that you are updating the most current version of a resource
            policy when you add a policy statement to a resource, delete a resource,
            or update a resource.
    DescribeSlotRequest:
      type: object
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the slot.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the slot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the slot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the slot to describe.
            The string must match one of the supported locales. For more information,
            see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the intent that contains the slot.
      required:
      - slotId
      - botId
      - botVersion
      - localeId
      - intentId
    DescribeSlotResponse:
      type: object
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier generated for the slot.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name specified for the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description specified for the slot.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The identifier of the slot type that determines the values
            entered into the slot.
        valueElicitationSetting:
          allOf:
          - $ref: '#/components/schemas/SlotValueElicitationSetting'
          description: Prompts that Amazon Lex uses to elicit a value for the slot.
        obfuscationSetting:
          allOf:
          - $ref: '#/components/schemas/ObfuscationSetting'
          description: Whether slot values are shown in Amazon CloudWatch logs. If
            the value is `None`, the actual value of the slot is shown in logs.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the slot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the slot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale specified for the slot.
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the intent associated with the slot.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot was last updated.
        multipleValuesSetting:
          allOf:
          - $ref: '#/components/schemas/MultipleValuesSetting'
          description: 'Indicates whether the slot accepts multiple values in a single
            utterance.


            If the `multipleValuesSetting` is not set, the default value is `false`.'
        subSlotSetting:
          allOf:
          - $ref: '#/components/schemas/SubSlotSetting'
          description: Specifications for the constituent sub slots and the expression
            for the composite slot.
    DescribeSlotTypeRequest:
      type: object
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the slot type.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the slot type.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the slot type.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the slot type
            to describe. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
      required:
      - slotTypeId
      - botId
      - botVersion
      - localeId
    DescribeSlotTypeResponse:
      type: object
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the slot type.
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name specified for the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description specified for the slot type.
        slotTypeValues:
          allOf:
          - $ref: '#/components/schemas/SlotTypeValues'
          description: The values that the slot type can take. Includes any synonyms
            for the slot type values.
        valueSelectionSetting:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionSetting'
          description: The strategy that Amazon Lex uses to choose a value from a
            list of possible values.
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          description: The built in slot type used as a parent to this slot type.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the slot type.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot associated with the slot type.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale specified for the slot type.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot type was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot type was last
            updated.
        externalSourceSetting:
          $ref: '#/components/schemas/ExternalSourceSetting'
        compositeSlotTypeSetting:
          allOf:
          - $ref: '#/components/schemas/CompositeSlotTypeSetting'
          description: Specifications for a composite slot type.
    DescribeTestExecutionRequest:
      type: object
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The execution Id of the test set execution.
      required:
      - testExecutionId
    DescribeTestExecutionResponse:
      type: object
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The execution Id for the test set execution.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The execution creation date and time for the test set execution.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time of the last update for the execution.
        testExecutionStatus:
          allOf:
          - $ref: '#/components/schemas/TestExecutionStatus'
          description: The test execution status for the test execution.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id for the test set execution.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The test set name of the test set execution.
        target:
          allOf:
          - $ref: '#/components/schemas/TestExecutionTarget'
          description: The target bot for the test set execution details.
        apiMode:
          allOf:
          - $ref: '#/components/schemas/TestExecutionApiMode'
          description: Indicates whether we use streaming or non-streaming APIs are
            used for the test set execution. For streaming, `StartConversation` Amazon
            Lex Runtime API is used. Whereas for non-streaming, `RecognizeUtterance`
            and `RecognizeText` Amazon Lex Runtime API is used.
        testExecutionModality:
          allOf:
          - $ref: '#/components/schemas/TestExecutionModality'
          description: Indicates whether test set is audio or text.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: Reasons for the failure of the test set execution.
    DescribeTestSetDiscrepancyReportRequest:
      type: object
      properties:
        testSetDiscrepancyReportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test set discrepancy report.
      required:
      - testSetDiscrepancyReportId
    DescribeTestSetDiscrepancyReportResponse:
      type: object
      properties:
        testSetDiscrepancyReportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test set discrepancy report to
            describe.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id for the test set discrepancy report.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time and date of creation for the test set discrepancy
            report.
        target:
          allOf:
          - $ref: '#/components/schemas/TestSetDiscrepancyReportResourceTarget'
          description: The target bot location for the test set discrepancy report.
        testSetDiscrepancyReportStatus:
          allOf:
          - $ref: '#/components/schemas/TestSetDiscrepancyReportStatus'
          description: The status for the test set discrepancy report.
        lastUpdatedDataTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time of the last update for the test set discrepancy
            report.
        testSetDiscrepancyTopErrors:
          allOf:
          - $ref: '#/components/schemas/TestSetDiscrepancyErrors'
          description: The top 200 error results from the test set discrepancy report.
        testSetDiscrepancyRawOutputUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          description: Pre-signed Amazon S3 URL to download the test set discrepancy
            report.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: The failure report for the test set discrepancy report generation
            action.
    DescribeTestSetGenerationRequest:
      type: object
      properties:
        testSetGenerationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test set generation.
      required:
      - testSetGenerationId
    DescribeTestSetGenerationResponse:
      type: object
      properties:
        testSetGenerationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test set generation.
        testSetGenerationStatus:
          allOf:
          - $ref: '#/components/schemas/TestSetGenerationStatus'
          description: The status for the test set generation.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: The reasons the test set generation failed.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the test set created for the generated
            test set.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The test set name for the generated test set.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The test set description for the test set generation.
        storageLocation:
          allOf:
          - $ref: '#/components/schemas/TestSetStorageLocation'
          description: The Amazon S3 storage location for the test set generation.
        generationDataSource:
          allOf:
          - $ref: '#/components/schemas/TestSetGenerationDataSource'
          description: The data source of the test set used for the test set generation.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The roleARN of the test set used for the test set generation.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time for the test set generation.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time of the last update for the test set generation.
    DescribeTestSetRequest:
      type: object
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id for the test set request.
      required:
      - testSetId
    DescribeTestSetResponse:
      type: object
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id for the test set response.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The test set name of the test set.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the test set.
        modality:
          allOf:
          - $ref: '#/components/schemas/TestSetModality'
          description: Indicates whether the test set is audio or text data.
        status:
          allOf:
          - $ref: '#/components/schemas/TestSetStatus'
          description: The status of the test set.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The roleARN used for any operation in the test set to access
            resources in the Amazon Web Services account.
        numTurns:
          allOf:
          - $ref: '#/components/schemas/Count'
          description: The total number of agent and user turn in the test set.
        storageLocation:
          allOf:
          - $ref: '#/components/schemas/TestSetStorageLocation'
          description: The Amazon S3 storage location for the test set data.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time for the test set data.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time for the last update of the test set data.
    Description:
      type: string
      minLength: 0
      maxLength: 200
    DescriptiveBotBuilderSpecification:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the descriptive bot building feature is activated
            or not.
        bedrockModelSpecification:
          allOf:
          - $ref: '#/components/schemas/BedrockModelSpecification'
          description: An object containing information about the Amazon Bedrock model
            used to interpret the prompt used in descriptive bot building.
      required:
      - enabled
      description: Contains specifications for the descriptive bot building feature.
    DialogAction:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DialogActionType'
          description: The action that the bot should execute.
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: If the dialog action is `ElicitSlot`, defines the slot to elicit
            from the user.
        suppressNextMessage:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: When true the next message for the intent is not used.
      required:
      - type
      description: Defines the action that the bot executes at runtime when the conversation
        reaches this step.
    DialogActionType:
      type: string
      enum:
      - ElicitIntent
      - StartIntent
      - ElicitSlot
      - EvaluateConditional
      - InvokeDialogCodeHook
      - ConfirmIntent
      - FulfillIntent
      - CloseIntent
      - EndConversation
    DialogCodeHookInvocationSetting:
      type: object
      properties:
        enableCodeHookInvocation:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates whether a Lambda function should be invoked for the
            dialog.
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Determines whether a dialog code hook is used when the intent
            is activated.
        invocationLabel:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: A label that indicates the dialog step from which the dialog
            code hook is happening.
        postCodeHookSpecification:
          allOf:
          - $ref: '#/components/schemas/PostDialogCodeHookInvocationSpecification'
          description: Contains the responses and actions that Amazon Lex takes after
            the Lambda function is complete.
      required:
      - enableCodeHookInvocation
      - active
      - postCodeHookSpecification
      description: Settings that specify the dialog code hook that is called by Amazon
        Lex at a step of the conversation.
    DialogCodeHookSettings:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Enables the dialog code hook so that it processes user requests.
      required:
      - enabled
      description: Settings that determine the Lambda function that Amazon Lex uses
        for processing user responses.
    DialogState:
      type: object
      properties:
        dialogAction:
          $ref: '#/components/schemas/DialogAction'
        intent:
          $ref: '#/components/schemas/IntentOverride'
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: Map of key/value pairs representing session-specific context
            information. It contains application information passed between Amazon
            Lex and a client application.
      description: The current state of the conversation with the user.
    DomainEndpoint:
      type: string
      pattern: ^(http|https):\/\/+[^\s]+[\w]$
    DraftBotVersion:
      type: string
      pattern: ^DRAFT$
      minLength: 5
      maxLength: 5
    Effect:
      type: string
      enum:
      - Allow
      - Deny
    ElicitationCodeHookInvocationSetting:
      type: object
      properties:
        enableCodeHookInvocation:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates whether a Lambda function should be invoked for the
            dialog.
        invocationLabel:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: A label that indicates the dialog step from which the dialog
            code hook is happening.
      required:
      - enableCodeHookInvocation
      description: Settings that specify the dialog code hook that is called by Amazon
        Lex between eliciting slot values.
    Enabled:
      type: boolean
      default: false
    EncryptionSetting:
      type: object
      properties:
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key ARN used to encrypt the metadata associated with
            the bot recommendation.
        botLocaleExportPassword:
          allOf:
          - $ref: '#/components/schemas/FilePassword'
          description: The password used to encrypt the recommended bot recommendation
            file.
        associatedTranscriptsPassword:
          allOf:
          - $ref: '#/components/schemas/FilePassword'
          description: The password used to encrypt the associated transcript file.
      description: The object representing the passwords that were used to encrypt
        the data related to the bot recommendation, as well as the KMS key ARN used
        to encrypt the associated metadata.
    ErrorCode:
      type: string
      enum:
      - DUPLICATE_INPUT
      - RESOURCE_DOES_NOT_EXIST
      - RESOURCE_ALREADY_EXISTS
      - INTERNAL_SERVER_FAILURE
    ErrorLogSettings:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Settings parameters for the error logs, when it is enabled.
      required:
      - enabled
      description: Settings parameters for the error logs, whether it is enabled or
        disabled.
    ErrorMessage:
      type: string
    ExactResponseFields:
      type: object
      properties:
        questionField:
          allOf:
          - $ref: '#/components/schemas/QuestionField'
          description: The name of the field that contains the query made to the OpenSearch
            Service database.
        answerField:
          allOf:
          - $ref: '#/components/schemas/AnswerField'
          description: The name of the field that contains the answer to the query
            made to the OpenSearch Service database.
      required:
      - questionField
      - answerField
      description: Contains the names of the fields used for an exact response to
        the user.
    ExceptionMessage:
      type: string
    ExecutionErrorDetails:
      type: object
      properties:
        errorCode:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The error code for the error.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The message describing the error.
      required:
      - errorCode
      - errorMessage
      description: Details about an error in an execution of a test set.
    ExportFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ExportFilterName'
          description: The name of the field to use for filtering.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: The values to use to filter the response. The values must be
            `Bot`, `BotLocale`, or `CustomVocabulary`.
        operator:
          allOf:
          - $ref: '#/components/schemas/ExportFilterOperator'
          description: The operator to use for the filter. Specify EQ when the `ListExports`
            operation should return only resource types that equal the specified value.
            Specify CO when the `ListExports` operation should return resource types
            that contain the specified value.
      required:
      - name
      - values
      - operator
      description: Filters the response form the [ListExports](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListExports.html)
        operation
    ExportFilterName:
      type: string
      enum:
      - ExportResourceType
    ExportFilterOperator:
      type: string
      enum:
      - CO
      - EQ
    ExportFilters:
      type: array
      items:
        $ref: '#/components/schemas/ExportFilter'
    ExportResourceSpecification:
      type: object
      properties:
        botExportSpecification:
          allOf:
          - $ref: '#/components/schemas/BotExportSpecification'
          description: Parameters for exporting a bot.
        botLocaleExportSpecification:
          allOf:
          - $ref: '#/components/schemas/BotLocaleExportSpecification'
          description: Parameters for exporting a bot locale.
        customVocabularyExportSpecification:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyExportSpecification'
          description: The parameters required to export a custom vocabulary.
        testSetExportSpecification:
          allOf:
          - $ref: '#/components/schemas/TestSetExportSpecification'
          description: Specifications for the test set that is exported as a resource.
      description: Provides information about the bot or bot locale that you want
        to export. You can specify the `botExportSpecification` or the `botLocaleExportSpecification`,
        but not both.
    ExportSortAttribute:
      type: string
      enum:
      - LastUpdatedDateTime
    ExportSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/ExportSortAttribute'
          description: The export field to use for sorting.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list.
      required:
      - attribute
      - order
      description: Provides information about sorting a list of exports.
    ExportStatus:
      type: string
      enum:
      - InProgress
      - Completed
      - Failed
      - Deleting
    ExportSummary:
      type: object
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier that Amazon Lex assigned to the export.
        resourceSpecification:
          allOf:
          - $ref: '#/components/schemas/ExportResourceSpecification'
          description: Information about the bot or bot locale that was exported.
        fileFormat:
          allOf:
          - $ref: '#/components/schemas/ImportExportFileFormat'
          description: The file format used in the export files.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          description: The status of the export. When the status is `Completed` the
            export is ready to download.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the export was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the export was last updated.
      description: Provides summary information about an export in an export list.
    ExportSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ExportSummary'
    ExternalSourceSetting:
      type: object
      properties:
        grammarSlotTypeSetting:
          allOf:
          - $ref: '#/components/schemas/GrammarSlotTypeSetting'
          description: Settings required for a slot type based on a grammar that you
            provide.
      description: Provides information about the external source of the slot type's
        definition.
    FailedCustomVocabularyItem:
      type: object
      properties:
        itemId:
          allOf:
          - $ref: '#/components/schemas/ItemId'
          description: The unique item identifer for the failed custom vocabulary
            item from the custom vocabulary list.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The error message for the failed custom vocabulary item from
            the custom vocabulary list.
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: The unique error code for the failed custom vocabulary item
            from the custom vocabulary list.
      description: The unique failed custom vocabulary item from the custom vocabulary
        list.
    FailedCustomVocabularyItems:
      type: array
      items:
        $ref: '#/components/schemas/FailedCustomVocabularyItem'
    FailureReason:
      type: string
    FailureReasons:
      type: array
      items:
        $ref: '#/components/schemas/FailureReason'
    FilePassword:
      type: string
      minLength: 0
      maxLength: 1024
    FilterValue:
      type: string
      pattern: ^[0-9a-zA-Z_()\s-]+$
      minLength: 1
      maxLength: 100
    FilterValues:
      type: array
      items:
        $ref: '#/components/schemas/FilterValue'
    FulfillmentCodeHookSettings:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether a Lambda function should be invoked to fulfill
            a specific intent.
        postFulfillmentStatusSpecification:
          allOf:
          - $ref: '#/components/schemas/PostFulfillmentStatusSpecification'
          description: Provides settings for messages sent to the user for after the
            Lambda fulfillment function completes. Post-fulfillment messages can be
            sent for both streaming and non-streaming conversations.
        fulfillmentUpdatesSpecification:
          allOf:
          - $ref: '#/components/schemas/FulfillmentUpdatesSpecification'
          description: Provides settings for update messages sent to the user for
            long-running Lambda fulfillment functions. Fulfillment updates can be
            used only with streaming conversations.
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Determines whether the fulfillment code hook is used. When
            `active` is false, the code hook doesn't run.
      required:
      - enabled
      description: Determines if a Lambda function should be invoked for a specific
        intent.
    FulfillmentStartResponseDelay:
      type: integer
      minimum: 1
      maximum: 900
    FulfillmentStartResponseSpecification:
      type: object
      properties:
        delayInSeconds:
          allOf:
          - $ref: '#/components/schemas/FulfillmentStartResponseDelay'
          description: The delay between when the Lambda fulfillment function starts
            running and the start message is played. If the Lambda function returns
            before the delay is over, the start message isn't played.
        messageGroups:
          allOf:
          - $ref: '#/components/schemas/MessageGroupsList'
          description: 1 - 5 message groups that contain start messages. Amazon Lex
            chooses one of the messages to play to the user.
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Determines whether the user can interrupt the start message
            while it is playing.
      required:
      - delayInSeconds
      - messageGroups
      description: Provides settings for a message that is sent to the user when a
        fulfillment Lambda function starts running.
    FulfillmentTimeout:
      type: integer
      minimum: 1
      maximum: 900
    FulfillmentUpdateResponseFrequency:
      type: integer
      minimum: 1
      maximum: 900
    FulfillmentUpdateResponseSpecification:
      type: object
      properties:
        frequencyInSeconds:
          allOf:
          - $ref: '#/components/schemas/FulfillmentUpdateResponseFrequency'
          description: The frequency that a message is sent to the user. When the
            period ends, Amazon Lex chooses a message from the message groups and
            plays it to the user. If the fulfillment Lambda returns before the first
            period ends, an update message is not played to the user.
        messageGroups:
          allOf:
          - $ref: '#/components/schemas/MessageGroupsList'
          description: 1 - 5 message groups that contain update messages. Amazon Lex
            chooses one of the messages to play to the user.
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Determines whether the user can interrupt an update message
            while it is playing.
      required:
      - frequencyInSeconds
      - messageGroups
      description: Provides settings for a message that is sent periodically to the
        user while a fulfillment Lambda function is running.
    FulfillmentUpdatesSpecification:
      type: object
      properties:
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: 'Determines whether fulfillment updates are sent to the user.
            When this field is true, updates are sent.


            If the `active` field is set to true, the `startResponse`, `updateResponse`,
            and `timeoutInSeconds` fields are required.'
        startResponse:
          allOf:
          - $ref: '#/components/schemas/FulfillmentStartResponseSpecification'
          description: Provides configuration information for the message sent to
            users when the fulfillment Lambda functions starts running.
        updateResponse:
          allOf:
          - $ref: '#/components/schemas/FulfillmentUpdateResponseSpecification'
          description: Provides configuration information for messages sent periodically
            to the user while the fulfillment Lambda function is running.
        timeoutInSeconds:
          allOf:
          - $ref: '#/components/schemas/FulfillmentTimeout'
          description: The length of time that the fulfillment Lambda function should
            run before it times out.
      required:
      - active
      description: Provides information for updating the user on the progress of fulfilling
        an intent.
    GenerateBotElementRequest:
      type: object
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The intent unique Id for the bot request to generate utterances.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The bot unique Id for the bot request to generate utterances.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The bot version for the bot request to generate utterances.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The unique locale Id for the bot request to generate utterances.
      required:
      - intentId
      - botId
      - botVersion
      - localeId
    GenerateBotElementResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique bot Id for the bot which received the response.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The unique bot version for the bot which received the response.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The unique locale Id for the bot which received the response.
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique intent Id for the bot which received the response.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          description: The sample utterances for the bot which received the response.
    GenerationInput:
      type: string
      minLength: 100
      maxLength: 2000
    GenerationSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/GenerationSortByAttribute'
          description: "The attribute by which to sort the generation request information.\
            \ You can sort by the following attributes.\n\n  * `creationStartTime`\
            \ – The time at which the generation request was created.\n\n  * `lastUpdatedTime`\
            \ – The time at which the generation request was last updated."
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order by which to sort the generation request information.
      required:
      - attribute
      - order
      description: Specifies the attribute and method by which to sort the generation
        request information.
    GenerationSortByAttribute:
      type: string
      enum:
      - creationStartTime
      - lastUpdatedTime
    GenerationStatus:
      type: string
      enum:
      - Failed
      - Complete
      - InProgress
    GenerationSummary:
      type: object
      properties:
        generationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the generation request.
        generationStatus:
          allOf:
          - $ref: '#/components/schemas/GenerationStatus'
          description: The status of the generation request.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time at which the generation request was made.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time at which the generation request was last
            updated.
      description: Contains information about a generation request made for the bot
        locale.
    GenerationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/GenerationSummary'
    GenerativeAISettings:
      type: object
      properties:
        runtimeSettings:
          $ref: '#/components/schemas/RuntimeSettings'
        buildtimeSettings:
          $ref: '#/components/schemas/BuildtimeSettings'
      description: Contains specifications about the generative AI capabilities from
        Amazon Bedrock that you can turn on for your bot.
    GetTestExecutionArtifactsUrlRequest:
      type: object
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the completed test execution.
      required:
      - testExecutionId
    GetTestExecutionArtifactsUrlResponse:
      type: object
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the completed test execution.
        downloadArtifactsUrl:
          allOf:
          - $ref: '#/components/schemas/PresignedS3Url'
          description: The pre-signed Amazon S3 URL to download completed test execution.
    GrammarSlotTypeSetting:
      type: object
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/GrammarSlotTypeSource'
          description: The source of the grammar used to create the slot type.
      description: Settings requried for a slot type based on a grammar that you provide.
    GrammarSlotTypeSource:
      type: object
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The name of the Amazon S3 bucket that contains the grammar
            source.
        s3ObjectKey:
          allOf:
          - $ref: '#/components/schemas/S3ObjectPath'
          description: The path to the grammar in the Amazon S3 bucket.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key required to decrypt the contents of the grammar,
            if any.
      required:
      - s3BucketName
      - s3ObjectKey
      description: Describes the Amazon S3 bucket name and location for the grammar
        that is the source for the slot type.
    HitCount:
      type: integer
    Id:
      type: string
      pattern: ^[0-9a-zA-Z]+$
      minLength: 10
      maxLength: 10
    ImageResponseCard:
      type: object
      properties:
        title:
          allOf:
          - $ref: '#/components/schemas/AttachmentTitle'
          description: The title to display on the response card. The format of the
            title is determined by the platform displaying the response card.
        subtitle:
          allOf:
          - $ref: '#/components/schemas/AttachmentTitle'
          description: The subtitle to display on the response card. The format of
            the subtitle is determined by the platform displaying the response card.
        imageUrl:
          allOf:
          - $ref: '#/components/schemas/AttachmentUrl'
          description: The URL of an image to display on the response card. The image
            URL must be publicly available so that the platform displaying the response
            card has access to the image.
        buttons:
          allOf:
          - $ref: '#/components/schemas/ButtonsList'
          description: A list of buttons that should be displayed on the response
            card. The arrangement of the buttons is determined by the platform that
            displays the button.
      required:
      - title
      description: 'A card that is shown to the user by a messaging platform. You
        define the contents of the card, the card is displayed by the platform.


        When you use a response card, the response from the user is constrained to
        the text associated with a button on the card.'
    ImportExportFileFormat:
      type: string
      enum:
      - LexJson
      - TSV
      - CSV
    ImportExportFilePassword:
      type: string
      minLength: 1
      maxLength: 1024
    ImportFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ImportFilterName'
          description: The name of the field to use for filtering.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: The values to use to filter the response. The values must be
            `Bot`, `BotLocale`, or `CustomVocabulary`.
        operator:
          allOf:
          - $ref: '#/components/schemas/ImportFilterOperator'
          description: The operator to use for the filter. Specify EQ when the `ListImports`
            operation should return only resource types that equal the specified value.
            Specify CO when the `ListImports` operation should return resource types
            that contain the specified value.
      required:
      - name
      - values
      - operator
      description: Filters the response from the [ListImports](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListImports.html)
        operation.
    ImportFilterName:
      type: string
      enum:
      - ImportResourceType
    ImportFilterOperator:
      type: string
      enum:
      - CO
      - EQ
    ImportFilters:
      type: array
      items:
        $ref: '#/components/schemas/ImportFilter'
    ImportResourceSpecification:
      type: object
      properties:
        botImportSpecification:
          allOf:
          - $ref: '#/components/schemas/BotImportSpecification'
          description: Parameters for importing a bot.
        botLocaleImportSpecification:
          allOf:
          - $ref: '#/components/schemas/BotLocaleImportSpecification'
          description: Parameters for importing a bot locale.
        customVocabularyImportSpecification:
          $ref: '#/components/schemas/CustomVocabularyImportSpecification'
        testSetImportResourceSpecification:
          allOf:
          - $ref: '#/components/schemas/TestSetImportResourceSpecification'
          description: Specifications for the test set that is imported.
      description: Provides information about the bot or bot locale that you want
        to import. You can specify the `botImportSpecification` or the `botLocaleImportSpecification`,
        but not both.
    ImportResourceType:
      type: string
      enum:
      - Bot
      - BotLocale
      - CustomVocabulary
      - TestSet
    ImportSortAttribute:
      type: string
      enum:
      - LastUpdatedDateTime
    ImportSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/ImportSortAttribute'
          description: The export field to use for sorting.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list.
      required:
      - attribute
      - order
      description: Provides information for sorting a list of imports.
    ImportStatus:
      type: string
      enum:
      - InProgress
      - Completed
      - Failed
      - Deleting
    ImportSummary:
      type: object
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier that Amazon Lex assigned to the import.
        importedResourceId:
          allOf:
          - $ref: '#/components/schemas/ImportedResourceId'
          description: The unique identifier that Amazon Lex assigned to the imported
            resource.
        importedResourceName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name that you gave the imported resource.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          description: The status of the resource. When the status is `Completed`
            the resource is ready to build.
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          description: The strategy used to merge existing bot or bot locale definitions
            with the imported definition.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the import was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the import was last updated.
        importedResourceType:
          allOf:
          - $ref: '#/components/schemas/ImportResourceType'
          description: The type of resource that was imported.
      description: Provides summary information about an import in an import list.
    ImportSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ImportSummary'
    ImportedResourceId:
      type: string
      pattern: ^([0-9a-zA-Z_])+$
      minLength: 5
      maxLength: 10
    IncludeField:
      type: string
    InitialResponseSetting:
      type: object
      properties:
        initialResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        nextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: The next step in the conversation.
        conditional:
          $ref: '#/components/schemas/ConditionalSpecification'
        codeHook:
          $ref: '#/components/schemas/DialogCodeHookInvocationSetting'
      description: Configuration setting for a response sent to the user before Amazon
        Lex starts eliciting slots.
    InputContext:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the context.
      required:
      - name
      description: A context that must be active for an intent to be selected by Amazon
        Lex.
    InputContextsList:
      type: array
      items:
        $ref: '#/components/schemas/InputContext'
    InputSessionStateSpecification:
      type: object
      properties:
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: Session attributes for the session state.
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextList'
          description: Active contexts for the session state.
        runtimeHints:
          allOf:
          - $ref: '#/components/schemas/RuntimeHints'
          description: Runtime hints for the session state.
      description: Specifications for the current state of the dialog between the
        user and the bot in the test set.
    IntentClassificationTestResultItem:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the intent.
        multiTurnConversation:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the conversation involves multiple turns
            or not.
        resultCounts:
          allOf:
          - $ref: '#/components/schemas/IntentClassificationTestResultItemCounts'
          description: The result of the intent classification test.
      required:
      - intentName
      - multiTurnConversation
      - resultCounts
      description: Information for an intent that is classified by the test workbench.
    IntentClassificationTestResultItemCounts:
      type: object
      properties:
        totalResultCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          description: The total number of results in the intent classification test.
        speechTranscriptionResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          description: The number of matched, mismatched, and execution error results
            for speech transcription for the intent.
        intentMatchResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          description: The number of matched and mismatched results for intent recognition
            for the intent.
      required:
      - totalResultCount
      - intentMatchResultCounts
      description: The number of items in the intent classification test.
    IntentClassificationTestResultItemList:
      type: array
      items:
        $ref: '#/components/schemas/IntentClassificationTestResultItem'
    IntentClassificationTestResults:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/IntentClassificationTestResultItemList'
          description: A list of the results for the intent classification test.
      required:
      - items
      description: Information for the results of the intent classification test.
    IntentClosingSetting:
      type: object
      properties:
        closingResponse:
          allOf:
          - $ref: '#/components/schemas/ResponseSpecification'
          description: The response that Amazon Lex sends to the user when the intent
            is complete.
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Specifies whether an intent's closing response is used. When
            this field is false, the closing response isn't sent to the user. If the
            `active` field isn't specified, the default is true.
        nextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifies the next step that the bot executes after playing
            the intent's closing response.
        conditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches associated with the intent's
            closing response. These branches are executed when the `nextStep` attribute
            is set to `EvalutateConditional`.
      description: Provides a statement the Amazon Lex conveys to the user when the
        intent is successfully fulfilled.
    IntentConfirmationSetting:
      type: object
      properties:
        promptSpecification:
          allOf:
          - $ref: '#/components/schemas/PromptSpecification'
          description: 'Prompts the user to confirm the intent. This question should
            have a yes or no answer.


            Amazon Lex uses this prompt to ensure that the user acknowledges that
            the intent is ready for fulfillment. For example, with the `OrderPizza`
            intent, you might want to confirm that the order is correct before placing
            it. For other intents, such as intents that simply respond to user questions,
            you might not need to ask the user for confirmation before providing the
            information.'
        declinationResponse:
          allOf:
          - $ref: '#/components/schemas/ResponseSpecification'
          description: When the user answers "no" to the question defined in `promptSpecification`,
            Amazon Lex responds with this response to acknowledge that the intent
            was canceled.
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Specifies whether the intent's confirmation is sent to the
            user. When this field is false, confirmation and declination responses
            aren't sent. If the `active` field isn't specified, the default is true.
        confirmationResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        confirmationNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifies the next step that the bot executes when the customer
            confirms the intent.
        confirmationConditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches to evaluate after the intent
            is closed.
        declinationNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifies the next step that the bot executes when the customer
            declines the intent.
        declinationConditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches to evaluate after the intent
            is declined.
        failureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        failureNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: The next step to take in the conversation if the confirmation
            step fails.
        failureConditional:
          $ref: '#/components/schemas/ConditionalSpecification'
        codeHook:
          allOf:
          - $ref: '#/components/schemas/DialogCodeHookInvocationSetting'
          description: The `DialogCodeHookInvocationSetting` object associated with
            intent's confirmation step. The dialog code hook is triggered based on
            these invocation settings when the confirmation next step or declination
            next step or failure next step is `InvokeDialogCodeHook`.
        elicitationCodeHook:
          allOf:
          - $ref: '#/components/schemas/ElicitationCodeHookInvocationSetting'
          description: The `DialogCodeHookInvocationSetting` used when the code hook
            is invoked during confirmation prompt retries.
      required:
      - promptSpecification
      description: Provides a prompt for making sure that the user is ready for the
        intent to be fulfilled.
    IntentFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentFilterName'
          description: The name of the field to use for the filter.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: The value to use for the filter.
        operator:
          allOf:
          - $ref: '#/components/schemas/IntentFilterOperator'
          description: The operator to use for the filter. Specify `EQ` when the `ListIntents`
            operation should return only aliases that equal the specified value. Specify
            `CO` when the `ListIntents` operation should return aliases that contain
            the specified value.
      required:
      - name
      - values
      - operator
      description: Filters the response from the `ListIntents` operation.
    IntentFilterName:
      type: string
      enum:
      - IntentName
    IntentFilterOperator:
      type: string
      enum:
      - CO
      - EQ
    IntentFilters:
      type: array
      items:
        $ref: '#/components/schemas/IntentFilter'
    IntentLevelSlotResolutionTestResultItem:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the intent that was recognized.
        multiTurnConversation:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the conversation involves multiple turns
            or not.
        slotResolutionResults:
          allOf:
          - $ref: '#/components/schemas/SlotResolutionTestResultItems'
          description: The results for the slot resolution in the test execution result.
      required:
      - intentName
      - multiTurnConversation
      - slotResolutionResults
      description: Information about intent-level slot resolution in a test result.
    IntentLevelSlotResolutionTestResultItemList:
      type: array
      items:
        $ref: '#/components/schemas/IntentLevelSlotResolutionTestResultItem'
    IntentLevelSlotResolutionTestResults:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/IntentLevelSlotResolutionTestResultItemList'
          description: Indicates the items for the slot level resolution for the intents.
      required:
      - items
      description: Indicates the success or failure of slots at the intent level.
    IntentOverride:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the intent. Only required when you're switching
            intents.
        slots:
          allOf:
          - $ref: '#/components/schemas/SlotValueOverrideMap'
          description: A map of all of the slot value overrides for the intent. The
            name of the slot maps to the value of the slot. Slots that are not included
            in the map aren't overridden.
      description: Override settings to configure the intent state.
    IntentSignature:
      type: string
    IntentSortAttribute:
      type: string
      enum:
      - IntentName
      - LastUpdatedDateTime
    IntentSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/IntentSortAttribute'
          description: The attribute to use to sort the list of intents.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can choose ascending or descending.
      required:
      - attribute
      - order
      description: Specifies attributes for sorting a list of intents.
    IntentState:
      type: string
      enum:
      - Failed
      - Fulfilled
      - InProgress
      - ReadyForFulfillment
      - Waiting
      - FulfillmentInProgress
    IntentStatistics:
      type: object
      properties:
        discoveredIntentCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          description: The number of recommended intents associated with the bot recommendation.
      description: The object that contains the statistical summary of recommended
        intents associated with the bot recommendation.
    IntentSummary:
      type: object
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the intent. Use this ID to
            get detailed information about the intent with the `DescribeIntent` operation.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          description: If this intent is derived from a built-in intent, the name
            of the parent intent.
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          description: The input contexts that must be active for this intent to be
            considered for recognition.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          description: The output contexts that are activated when this intent is
            fulfilled.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the date and time that the intent was last
            updated.
      description: Summary information about an intent returned by the `ListIntents`
        operation.
    IntentSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/IntentSummary'
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
      description: The service encountered an unexpected condition. Try your request
        again.
    InvokedIntentSample:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of an intent that was invoked.
      description: An object containing the name of an intent that was invoked.
    InvokedIntentSamples:
      type: array
      items:
        $ref: '#/components/schemas/InvokedIntentSample'
    ItemId:
      type: string
      minLength: 1
      maxLength: 32
    KendraConfiguration:
      type: object
      properties:
        kendraIndex:
          allOf:
          - $ref: '#/components/schemas/KendraIndexArn'
          description: The Amazon Resource Name (ARN) of the Amazon Kendra index that
            you want the `AMAZON.KendraSearchIntent` intent to search. The index must
            be in the same account and Region as the Amazon Lex bot.
        queryFilterStringEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Determines whether the `AMAZON.KendraSearchIntent` intent uses
            a custom query string to query the Amazon Kendra index.
        queryFilterString:
          allOf:
          - $ref: '#/components/schemas/QueryFilterString'
          description: A query filter that Amazon Lex sends to Amazon Kendra to filter
            the response from a query. The filter is in the format defined by Amazon
            Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html).
      required:
      - kendraIndex
      description: Provides configuration information for the `AMAZON.KendraSearchIntent`
        intent. When you use this intent, Amazon Lex searches the specified Amazon
        Kendra index and returns documents from the index that match the user's utterance.
    KendraIndexArn:
      type: string
      pattern: ^arn:aws:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index\/[a-zA-Z0-9][a-zA-Z0-9_-]*$
      minLength: 32
      maxLength: 2048
    KmsKeyArn:
      type: string
      pattern: ^arn:[\w\-]+:kms:[\w\-]+:[\d]{12}:(?:key\/[\w\-]+|alias\/[a-zA-Z0-9:\/_\-]{1,256})$
      minLength: 20
      maxLength: 2048
    LambdaARN:
      type: string
      pattern: ^arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?$
      minLength: 20
      maxLength: 2048
    LambdaCodeHook:
      type: object
      properties:
        lambdaARN:
          allOf:
          - $ref: '#/components/schemas/LambdaARN'
          description: The Amazon Resource Name (ARN) of the Lambda function.
        codeHookInterfaceVersion:
          allOf:
          - $ref: '#/components/schemas/CodeHookInterfaceVersion'
          description: The version of the request-response that you want Amazon Lex
            to use to invoke your Lambda function.
      required:
      - lambdaARN
      - codeHookInterfaceVersion
      description: Specifies a Lambda function that verifies requests to a bot or
        fulfills the user's request to a bot.
    LexTranscriptFilter:
      type: object
      properties:
        dateRangeFilter:
          allOf:
          - $ref: '#/components/schemas/DateRangeFilter'
          description: The object that contains a date range filter that will be applied
            to the transcript. Specify this object if you want Amazon Lex to only
            read the files that are within the date range.
      description: The object that contains transcript filter details that are associated
        with a bot recommendation.
    ListAggregatedUtterancesRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot associated with this request.
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The identifier of the bot alias associated with this request.
            If you specify the bot alias, you can't specify the bot version.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The identifier of the bot version associated with this request.
            If you specify the bot version, you can't specify the bot alias.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where the utterances
            were collected. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        aggregationDuration:
          allOf:
          - $ref: '#/components/schemas/UtteranceAggregationDuration'
          description: The time window for aggregating the utterance information.
            You can specify a time between one hour and two weeks.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesSortBy'
          description: Specifies sorting parameters for the list of utterances. You
            can sort by the hit count, the missed count, or the number of distinct
            sessions the utterance appeared in.
        filters:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesFilters'
          description: Provides the specification of a filter used to limit the utterances
            in the response to only those that match the filter specification. You
            can only specify one filter and one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of utterances to return in each page of
            results. If there are fewer results than the maximum page size, only the
            actual number of results are returned. If you don't specify the `maxResults`
            parameter, 1,000 results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the `ListAggregatedUtterances` operation
            contains more results that specified in the `maxResults` parameter, a
            token is returned in the response. Use that token in the `nextToken` parameter
            to return the next page of results.
      required:
      - botId
      - localeId
      - aggregationDuration
    ListAggregatedUtterancesResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the utterances.
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The identifier of the bot alias that contains the utterances.
            If you specified the bot version, the bot alias ID isn't returned.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The identifier of the bot version that contains the utterances.
            If you specified the bot alias, the bot version isn't returned.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that the utterances
            are in.
        aggregationDuration:
          allOf:
          - $ref: '#/components/schemas/UtteranceAggregationDuration'
          description: The time period used to aggregate the utterance data.
        aggregationWindowStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the aggregation window begins. Only
            data collected after this time is returned in the results.
        aggregationWindowEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the aggregation window ends. Only data
            collected between the start time and the end time are returned in the
            results.
        aggregationLastRefreshedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: "The last date and time that the aggregated data was collected.\
            \ The time period depends on the length of the aggregation window.\n\n\
            \  * **Hours** \\- for 1 hour time window, every half hour; otherwise\
            \ every hour.\n\n  * **Days** \\- every 6 hours\n\n  * **Weeks** \\- for\
            \ a one week time window, every 12 hours; otherwise, every day"
        aggregatedUtterancesSummaries:
          allOf:
          - $ref: '#/components/schemas/AggregatedUtterancesSummaryList'
          description: Summaries of the aggregated utterance data. Each response contains
            information about the number of times that the utterance was seen during
            the time period, whether it was detected or missed, and when it was seen
            during the time period.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListAggregatedUtterances` operation. If the `nextToken`
            field is present, you send the contents as the `nextToken` parameter of
            a `ListAggregatedUtterances` operation request to get the next page of
            results.
    ListBotAliasReplicasRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The request for the unique bot ID of the replicated bot created
            from the source bot alias.
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The request for the secondary region of the replicated bot
            created from the source bot alias.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The request for maximum results to list the replicated bots
            created from the source bot alias.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The request for the next token for the replicated bot created
            from the source bot alias.
      required:
      - botId
      - replicaRegion
    ListBotAliasReplicasResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique bot ID of the replicated bot created from the source
            bot alias.
        sourceRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The source region of the replicated bot created from the source
            bot alias.
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The secondary region of the replicated bot created from the
            source bot alias.
        botAliasReplicaSummaries:
          allOf:
          - $ref: '#/components/schemas/BotAliasReplicaSummaryList'
          description: The summary information of the replicated bot created from
            the source bot alias.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next token for the replicated bots created from the source
            bot alias.
    ListBotAliasesRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to list aliases for.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of aliases to return in each page of results.
            If there are fewer results than the max page size, only the actual number
            of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the `ListBotAliases` operation contains
            more results than specified in the `maxResults` parameter, a token is
            returned in the response. Use that token in the `nextToken` parameter
            to return the next page of results.
      required:
      - botId
    ListBotAliasesResponse:
      type: object
      properties:
        botAliasSummaries:
          allOf:
          - $ref: '#/components/schemas/BotAliasSummaryList'
          description: Summary information for the bot aliases that meet the filter
            criteria specified in the request. The length of the list is specified
            in the `maxResults` parameter of the request. If there are more aliases
            available, the `nextToken` field contains a token to get the next page
            of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListBotAliases` operation. If the `nextToken` field
            is present, you send the contents as the `nextToken` parameter of a `ListBotAliases`
            operation request to get the next page of results.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with the aliases.
    ListBotLocalesRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to list locales for.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot to list locales for.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/BotLocaleSortBy'
          description: Specifies sorting parameters for the list of locales. You can
            sort by locale name in ascending or descending order.
        filters:
          allOf:
          - $ref: '#/components/schemas/BotLocaleFilters'
          description: Provides the specification for a filter used to limit the response
            to only those locales that match the filter specification. You can only
            specify one filter and one value to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of aliases to return in each page of results.
            If there are fewer results than the max page size, only the actual number
            of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the `ListBotLocales` operation contains
            more results than specified in the `maxResults` parameter, a token is
            returned in the response. Use that token as the `nextToken` parameter
            to return the next page of results.
      required:
      - botId
      - botVersion
    ListBotLocalesResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to list locales for.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListBotLocales` operation. If the `nextToken` field
            is present, you send the contents as the `nextToken` parameter of a `ListBotLocales`
            operation request to get the next page of results.
        botLocaleSummaries:
          allOf:
          - $ref: '#/components/schemas/BotLocaleSummaryList'
          description: Summary information for the locales that meet the filter criteria
            specified in the request. The length of the list is specified in the `maxResults`
            parameter of the request. If there are more locales available, the `nextToken`
            field contains a token to get the next page of results.
    ListBotRecommendationsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the bot recommendation
            list.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the bot recommendation
            list.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the bot recommendation
            list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of bot recommendations to return in each
            page of results. If there are fewer results than the max page size, only
            the actual number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the ListBotRecommendation operation contains
            more results than specified in the maxResults parameter, a token is returned
            in the response. Use that token in the nextToken parameter to return the
            next page of results.
      required:
      - botId
      - botVersion
      - localeId
    ListBotRecommendationsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the bot recommendation
            list.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the bot recommendation
            list.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the bot recommendation
            list.
        botRecommendationSummaries:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationSummaryList'
          description: Summary information for the bot recommendations that meet the
            filter specified in this request. The length of the list is specified
            in the maxResults parameter of the request. If there are more bot recommendations
            available, the nextToken field contains a token to get the next page of
            results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the ListBotRecommendations operation. If the nextToken
            field is present, you send the contents as the nextToken parameter of
            a ListBotRecommendations operation request to get the next page of results.
    ListBotReplicasRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The request for the unique bot IDs in the list of replicated
            bots.
      required:
      - botId
    ListBotReplicasResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: the unique bot IDs in the list of replicated bots.
        sourceRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The source region of the source bots in the list of replicated
            bots.
        botReplicaSummaries:
          allOf:
          - $ref: '#/components/schemas/BotReplicaSummaryList'
          description: The summary details for the replicated bots.
    ListBotResourceGenerationsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot whose generation requests
            you want to view.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot whose generation requests you want to
            view.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale of the bot whose generation requests you want to
            view.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/GenerationSortBy'
          description: An object containing information about the attribute and the
            method by which to sort the results
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the number specified
            in the `maxResults`, the response returns a token in the `nextToken` field.
            Use this token when making a request to return the next batch of results.
      required:
      - botId
      - botVersion
      - localeId
    ListBotResourceGenerationsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot for which the generation requests
            were made.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot for which the generation requests were
            made.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale of the bot for which the generation requests were
            made.
        generationSummaries:
          allOf:
          - $ref: '#/components/schemas/GenerationSummaryList'
          description: A list of objects, each containing information about a generation
            request for the bot locale.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the number specified
            in the `maxResults`, the response returns a token in the `nextToken` field.
            Use this token when making a request to return the next batch of results.
    ListBotVersionReplicasRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The request for the unique ID in the list of replicated bots.
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The request for the region used in the list of replicated bots.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum results given in the list of replicated bots.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next token given in the list of replicated bots.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/BotVersionReplicaSortBy'
          description: The requested sort category for the list of replicated bots.
      required:
      - botId
      - replicaRegion
    ListBotVersionReplicasResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique ID of the bots in the list of replicated bots.
        sourceRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The source region used for the bots in the list of replicated
            bots.
        replicaRegion:
          allOf:
          - $ref: '#/components/schemas/ReplicaRegion'
          description: The region used for the replicated bots in the list of replicated
            bots.
        botVersionReplicaSummaries:
          allOf:
          - $ref: '#/components/schemas/BotVersionReplicaSummaryList'
          description: The information summary used for the replicated bots in the
            list of replicated bots.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next token used for the replicated bots in the list of
            replicated bots.
    ListBotVersionsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to list versions for.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/BotVersionSortBy'
          description: Specifies sorting parameters for the list of versions. You
            can specify that the list be sorted by version name in either ascending
            or descending order.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of versions to return in each page of results.
            If there are fewer results than the max page size, only the actual number
            of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response to the `ListBotVersion` operation contains
            more results than specified in the `maxResults` parameter, a token is
            returned in the response. Use that token in the `nextToken` parameter
            to return the next page of results.
      required:
      - botId
    ListBotVersionsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot to list versions for.
        botVersionSummaries:
          allOf:
          - $ref: '#/components/schemas/BotVersionSummaryList'
          description: Summary information for the bot versions that meet the filter
            criteria specified in the request. The length of the list is specified
            in the `maxResults` parameter of the request. If there are more versions
            available, the `nextToken` field contains a token to get the next page
            of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListBotVersions` operation. If the `nextToken` field
            is present, you send the contents as the `nextToken` parameter of a `ListBotAliases`
            operation request to get the next page of results.
    ListBotsRequest:
      type: object
      properties:
        sortBy:
          allOf:
          - $ref: '#/components/schemas/BotSortBy'
          description: Specifies sorting parameters for the list of bots. You can
            specify that the list be sorted by bot name in ascending or descending
            order.
        filters:
          allOf:
          - $ref: '#/components/schemas/BotFilters'
          description: Provides the specification of a filter used to limit the bots
            in the response to only those that match the filter specification. You
            can only specify one filter and one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of bots to return in each page of results.
            If there are fewer results than the maximum page size, only the actual
            number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the `ListBots` operation contains more
            results than specified in the `maxResults` parameter, a token is returned
            in the response.


            Use the returned token in the `nextToken` parameter of a `ListBots` request
            to return the next page of results. For a complete set of results, call
            the `ListBots` operation until the `nextToken` returned in the response
            is null.'
    ListBotsResponse:
      type: object
      properties:
        botSummaries:
          allOf:
          - $ref: '#/components/schemas/BotSummaryList'
          description: Summary information for the bots that meet the filter criteria
            specified in the request. The length of the list is specified in the `maxResults`
            parameter of the request. If there are more bots available, the `nextToken`
            field contains a token to the next page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListBots` operation. If the `nextToken` field is
            present, you send the contents as the `nextToken` parameter of a `ListBots`
            operation request to get the next page of results.
    ListBuiltInIntentsRequest:
      type: object
      properties:
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the intents to
            list. The string must match one of the supported locales. For more information,
            see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        sortBy:
          allOf:
          - $ref: '#/components/schemas/BuiltInIntentSortBy'
          description: Specifies sorting parameters for the list of built-in intents.
            You can specify that the list be sorted by the built-in intent signature
            in either ascending or descending order.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/BuiltInsMaxResults'
          description: The maximum number of built-in intents to return in each page
            of results. If there are fewer results than the max page size, only the
            actual number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the `ListBuiltInIntents` operation contains
            more results than specified in the `maxResults` parameter, a token is
            returned in the response. Use that token in the `nextToken` parameter
            to return the next page of results.
      required:
      - localeId
    ListBuiltInIntentsResponse:
      type: object
      properties:
        builtInIntentSummaries:
          allOf:
          - $ref: '#/components/schemas/BuiltInIntentSummaryList'
          description: Summary information for the built-in intents that meet the
            filter criteria specified in the request. The length of the list is specified
            in the `maxResults` parameter of the request. If there are more intents
            available, the `nextToken` field contains a token to get the next page
            of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListBuiltInIntents` operation. If the `nextToken`
            field is present, you send the contents as the `nextToken` parameter of
            a `ListBotAliases` operation request to get the next page of results.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the intents in the list.
    ListBuiltInSlotTypesRequest:
      type: object
      properties:
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the slot types
            to list. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        sortBy:
          allOf:
          - $ref: '#/components/schemas/BuiltInSlotTypeSortBy'
          description: Determines the sort order for the response from the `ListBuiltInSlotTypes`
            operation. You can choose to sort by the slot type signature in either
            ascending or descending order.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/BuiltInsMaxResults'
          description: The maximum number of built-in slot types to return in each
            page of results. If there are fewer results than the max page size, only
            the actual number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the `ListBuiltInSlotTypes` operation contains
            more results than specified in the `maxResults` parameter, a token is
            returned in the response. Use that token in the `nextToken` parameter
            to return the next page of results.
      required:
      - localeId
    ListBuiltInSlotTypesResponse:
      type: object
      properties:
        builtInSlotTypeSummaries:
          allOf:
          - $ref: '#/components/schemas/BuiltInSlotTypeSummaryList'
          description: Summary information for the built-in slot types that meet the
            filter criteria specified in the request. The length of the list is specified
            in the `maxResults` parameter of the request. If there are more slot types
            available, the `nextToken` field contains a token to get the next page
            of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListBuiltInSlotTypes` operation. If the `nextToken`
            field is present, you send the contents as the `nextToken` parameter of
            a `LIstBuiltInSlotTypes` operation request to get the next page of results.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the slot types in the list.
    ListCustomVocabularyItemsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the version of the bot associated with this
            custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The bot version of the bot to the list custom vocabulary request.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where this custom
            vocabulary is used. The string must match one of the supported locales.
            For more information, see Supported languages (https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of items returned by the list operation.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The nextToken identifier to the list custom vocabulary request.
      required:
      - botId
      - botVersion
      - localeId
    ListCustomVocabularyItemsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot associated with this custom vocabulary.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The identifier of the version of the bot associated with this
            custom vocabulary.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where this custom
            vocabulary is used. The string must match one of the supported locales.
            For more information, see [ Supported Languages ](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        customVocabularyItems:
          allOf:
          - $ref: '#/components/schemas/CustomVocabularyItems'
          description: The custom vocabulary items from the list custom vocabulary
            response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The nextToken identifier to the list custom vocabulary response.
    ListExportsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier that Amazon Lex assigned to the bot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot to list exports for.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/ExportSortBy'
          description: Determines the field that the list of exports is sorted by.
            You can sort by the `LastUpdatedDateTime` field in ascending or descending
            order.
        filters:
          allOf:
          - $ref: '#/components/schemas/ExportFilters'
          description: Provides the specification of a filter used to limit the exports
            in the response to only those that match the filter specification. You
            can only specify one filter and one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of exports to return in each page of results.
            If there are fewer results than the max page size, only the actual number
            of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the `ListExports` operation contains
            more results that specified in the `maxResults` parameter, a token is
            returned in the response.


            Use the returned token in the `nextToken` parameter of a `ListExports`
            request to return the next page of results. For a complete set of results,
            call the `ListExports` operation until the `nextToken` returned in the
            response is null.'
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: Specifies the resources that should be exported. If you don't
            specify a resource type in the `filters` parameter, both bot locales and
            custom vocabularies are exported.
    ListExportsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the bot by Amazon Lex.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that was exported.
        exportSummaries:
          allOf:
          - $ref: '#/components/schemas/ExportSummaryList'
          description: Summary information for the exports that meet the filter criteria
            specified in the request. The length of the list is specified in the `maxResults`
            parameter. If there are more exports available, the `nextToken` field
            contains a token to get the next page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListExports` operation. If the `nextToken` field
            is present, you send the contents as the `nextToken` parameter of a `ListExports`
            operation request to get the next page of results.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale specified in the request.
    ListImportsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier that Amazon Lex assigned to the bot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot to list imports for.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/ImportSortBy'
          description: Determines the field that the list of imports is sorted by.
            You can sort by the `LastUpdatedDateTime` field in ascending or descending
            order.
        filters:
          allOf:
          - $ref: '#/components/schemas/ImportFilters'
          description: Provides the specification of a filter used to limit the bots
            in the response to only those that match the filter specification. You
            can only specify one filter and one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of imports to return in each page of results.
            If there are fewer results than the max page size, only the actual number
            of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the `ListImports` operation contains
            more results than specified in the `maxResults` parameter, a token is
            returned in the response.


            Use the returned token in the `nextToken` parameter of a `ListImports`
            request to return the next page of results. For a complete set of results,
            call the `ListImports` operation until the `nextToken` returned in the
            response is null.'
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: Specifies the locale that should be present in the list. If
            you don't specify a resource type in the `filters` parameter, the list
            contains both bot locales and custom vocabularies.
    ListImportsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier assigned by Amazon Lex to the bot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that was imported. It will always be
            `DRAFT`.
        importSummaries:
          allOf:
          - $ref: '#/components/schemas/ImportSummaryList'
          description: Summary information for the imports that meet the filter criteria
            specified in the request. The length of the list is specified in the `maxResults`
            parameter. If there are more imports available, the `nextToken` field
            contains a token to get the next page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListImports` operation. If the `nextToken` field
            is present, you send the contents as the `nextToken` parameter of a `ListImports`
            operation request to get the next page of results.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale specified in the request.
    ListIntentMetricsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you want to retrieve intent
            metrics.
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp that marks the beginning of the range of time
            for which you want to see intent metrics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the end of the range of time for
            which you want to see intent metrics.
        metrics:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentMetrics'
          description: A list of objects, each of which contains a metric you want
            to list, the statistic for the metric you want to return, and the order
            by which to organize the results.
        binBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByList'
          description: A list of objects, each of which contains specifications for
            organizing the results by time.
        groupBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentGroupByList'
          description: "A list of objects, each of which specifies how to group the\
            \ results. You can group by the following criteria:\n\n  * `IntentName`\
            \ – The name of the intent.\n\n  * `IntentEndState` – The final state\
            \ of the intent. The possible end states are detailed in [Key definitions](https://docs.aws.amazon.com/analytics-key-definitions-intents)\
            \ in the user guide."
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentFilters'
          description: A list of objects, each of which describes a condition by which
            you want to filter the results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in each page of results.
            If there are fewer results than the maximum page size, only the actual
            number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListIntentMetrics operation contains
            more results than specified in the maxResults parameter, a token is returned
            in the response.


            Use the returned token in the nextToken parameter of a ListIntentMetrics
            request to return the next page of results. For a complete set of results,
            call the ListIntentMetrics operation until the nextToken returned in the
            response is null.'
      required:
      - botId
      - startDateTime
      - endDateTime
      - metrics
    ListIntentMetricsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you retrieved intent metrics.
        results:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentResults'
          description: The results for the intent metrics.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListIntentMetrics operation contains
            more results than specified in the maxResults parameter, a token is returned
            in the response.


            Use the returned token in the nextToken parameter of a ListIntentMetrics
            request to return the next page of results. For a complete set of results,
            call the ListIntentMetrics operation until the nextToken returned in the
            response is null.'
    ListIntentPathsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you want to retrieve intent
            path metrics.
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the beginning of the range of
            time for which you want to see intent path metrics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the end of the range of time for
            which you want to see intent path metrics.
        intentPath:
          allOf:
          - $ref: '#/components/schemas/AnalyticsPath'
          description: "The intent path for which you want to retrieve metrics. Use\
            \ a forward slash to separate intents in the path. For example:\n\n  *\
            \ /BookCar\n\n  * /BookCar/BookHotel\n\n  * /BookHotel/BookCar"
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsPathFilters'
          description: A list of objects, each describes a condition by which you
            want to filter the results.
      required:
      - botId
      - startDateTime
      - endDateTime
      - intentPath
    ListIntentPathsResponse:
      type: object
      properties:
        nodeSummaries:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentNodeSummaries'
          description: A list of objects, each of which contains information about
            a node in the intent path for which you requested metrics.
    ListIntentStageMetricsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you want to retrieve intent
            stage metrics.
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the beginning of the range of
            time for which you want to see intent stage metrics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the end of the range of time for
            which you want to see intent stage metrics.
        metrics:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageMetrics'
          description: A list of objects, each of which contains a metric you want
            to list, the statistic for the metric you want to return, and the method
            by which to organize the results.
        binBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByList'
          description: A list of objects, each of which contains specifications for
            organizing the results by time.
        groupBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageGroupByList'
          description: "A list of objects, each of which specifies how to group the\
            \ results. You can group by the following criteria:\n\n  * `IntentStageName`\
            \ – The name of the intent stage.\n\n  * `SwitchedToIntent` – The intent\
            \ to which the conversation was switched (if any)."
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageFilters'
          description: A list of objects, each of which describes a condition by which
            you want to filter the results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in each page of results.
            If there are fewer results than the maximum page size, only the actual
            number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListIntentStageMetrics operation
            contains more results than specified in the maxResults parameter, a token
            is returned in the response.


            Use the returned token in the nextToken parameter of a ListIntentStageMetrics
            request to return the next page of results. For a complete set of results,
            call the ListIntentStageMetrics operation until the nextToken returned
            in the response is null.'
      required:
      - botId
      - startDateTime
      - endDateTime
      - metrics
    ListIntentStageMetricsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you retrieved intent stage
            metrics.
        results:
          allOf:
          - $ref: '#/components/schemas/AnalyticsIntentStageResults'
          description: The results for the intent stage metrics.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListIntentStageMetrics operation
            contains more results than specified in the maxResults parameter, a token
            is returned in the response.


            Use the returned token in the nextToken parameter of a ListIntentStageMetrics
            request to return the next page of results. For a complete set of results,
            call the ListIntentStageMetrics operation until the nextToken returned
            in the response is null.'
    ListIntentsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the intents to
            list. The string must match one of the supported locales. For more information,
            see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        sortBy:
          allOf:
          - $ref: '#/components/schemas/IntentSortBy'
          description: Determines the sort order for the response from the `ListIntents`
            operation. You can choose to sort by the intent name or last updated date
            in either ascending or descending order.
        filters:
          allOf:
          - $ref: '#/components/schemas/IntentFilters'
          description: Provides the specification of a filter used to limit the intents
            in the response to only those that match the filter specification. You
            can only specify one filter and only one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of intents to return in each page of results.
            If there are fewer results than the max page size, only the actual number
            of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the `ListIntents` operation contains
            more results than specified in the `maxResults` parameter, a token is
            returned in the response.


            Use the returned token in the `nextToken` parameter of a `ListIntents`
            request to return the next page of results. For a complete set of results,
            call the `ListIntents` operation until the `nextToken` returned in the
            response is null.'
      required:
      - botId
      - botVersion
      - localeId
    ListIntentsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the intents in the list.
        intentSummaries:
          allOf:
          - $ref: '#/components/schemas/IntentSummaryList'
          description: Summary information for the intents that meet the filter criteria
            specified in the request. The length of the list is specified in the `maxResults`
            parameter of the request. If there are more intents available, the `nextToken`
            field contains a token to get the next page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListIntents` operation. If the `nextToken` field
            is present, you send the contents as the `nextToken` parameter of a `ListIntents`
            operation request to get the next page of results.
    ListRecommendedIntentsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot associated with the recommended
            intents.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the recommended intents.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the recommended
            intents.
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot recommendation that contains the
            recommended intents.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the ListRecommendedIntents operation contains
            more results than specified in the maxResults parameter, a token is returned
            in the response. Use that token in the nextToken parameter to return the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of bot recommendations to return in each
            page of results. If there are fewer results than the max page size, only
            the actual number of results are returned.
      required:
      - botId
      - botVersion
      - localeId
      - botRecommendationId
    ListRecommendedIntentsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot associated with the recommended
            intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the intent.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the intents to
            list. The string must match one of the supported locales. For more information,
            see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot recommendation that contains the
            recommended intent.
        summaryList:
          allOf:
          - $ref: '#/components/schemas/RecommendedIntentSummaryList'
          description: Summary information for the intents that meet the filter criteria
            specified in the request. The length of the list is specified in the maxResults
            parameter of the request. If there are more intents available, the nextToken
            field contains a token to get the next page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the ListRecommendedIntents operation. If the nextToken
            field is present, you send the contents as the nextToken parameter of
            a ListRecommendedIntents operation request to get the next page of results.
    ListSessionAnalyticsDataRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you want to retrieve session
            analytics.
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the beginning of the range of
            time for which you want to see session analytics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the end of the range of time for
            which you want to see session analytics.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SessionDataSortBy'
          description: An object specifying the measure and method by which to sort
            the session analytics data.
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionFilters'
          description: A list of objects, each of which describes a condition by which
            you want to filter the results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in each page of results.
            If there are fewer results than the maximum page size, only the actual
            number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListSessionAnalyticsData operation
            contains more results than specified in the maxResults parameter, a token
            is returned in the response.


            Use the returned token in the nextToken parameter of a ListSessionAnalyticsData
            request to return the next page of results. For a complete set of results,
            call the ListSessionAnalyticsData operation until the nextToken returned
            in the response is null.'
      required:
      - botId
      - startDateTime
      - endDateTime
    ListSessionAnalyticsDataResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that the sessions belong to.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListSessionAnalyticsData operation
            contains more results than specified in the maxResults parameter, a token
            is returned in the response.


            Use the returned token in the nextToken parameter of a ListSessionAnalyticsData
            request to return the next page of results. For a complete set of results,
            call the ListSessionAnalyticsData operation until the nextToken returned
            in the response is null.'
        sessions:
          allOf:
          - $ref: '#/components/schemas/SessionSpecifications'
          description: A list of objects, each of which contains information about
            a session with the bot.
    ListSessionMetricsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you want to retrieve session
            metrics.
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the beginning of the range of
            time for which you want to see session metrics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the end of the range of time for
            which you want to see session metrics.
        metrics:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionMetrics'
          description: A list of objects, each of which contains a metric you want
            to list, the statistic for the metric you want to return, and the method
            by which to organize the results.
        binBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByList'
          description: A list of objects, each of which contains specifications for
            organizing the results by time.
        groupBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionGroupByList'
          description: "A list of objects, each of which specifies how to group the\
            \ results. You can group by the following criteria:\n\n  * `ConversationEndState`\
            \ – The final state of the conversation. The possible end states are detailed\
            \ in [Key definitions](https://docs.aws.amazon.com/analytics-key-definitions-conversations)\
            \ in the user guide.\n\n  * `LocaleId` – The unique identifier of the\
            \ bot locale."
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionFilters'
          description: A list of objects, each of which describes a condition by which
            you want to filter the results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in each page of results.
            If there are fewer results than the maximum page size, only the actual
            number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListSessionMetrics operation contains
            more results than specified in the maxResults parameter, a token is returned
            in the response.


            Use the returned token in the nextToken parameter of a ListSessionMetrics
            request to return the next page of results. For a complete set of results,
            call the ListSessionMetrics operation until the nextToken returned in
            the response is null.'
      required:
      - botId
      - startDateTime
      - endDateTime
      - metrics
    ListSessionMetricsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you retrieved session
            metrics.
        results:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionResults'
          description: The results for the session metrics.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListSessionMetrics operation contains
            more results than specified in the maxResults parameter, a token is returned
            in the response.


            Use the returned token in the nextToken parameter of a ListSessionMetrics
            request to return the next page of results. For a complete set of results,
            call the ListSessionMetrics operation until the nextToken returned in
            the response is null.'
    ListSlotTypesRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the slot types.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the slot type.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the slot types
            to list. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSortBy'
          description: Determines the sort order for the response from the `ListSlotTypes`
            operation. You can choose to sort by the slot type name or last updated
            date in either ascending or descending order.
        filters:
          allOf:
          - $ref: '#/components/schemas/SlotTypeFilters'
          description: Provides the specification of a filter used to limit the slot
            types in the response to only those that match the filter specification.
            You can only specify one filter and only one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of slot types to return in each page of
            results. If there are fewer results than the max page size, only the actual
            number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the `ListSlotTypes` operation contains
            more results than specified in the `maxResults` parameter, a token is
            returned in the response. Use that token in the `nextToken` parameter
            to return the next page of results.
      required:
      - botId
      - botVersion
      - localeId
    ListSlotTypesResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the slot types.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the slot types.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and local of the slot types in the list.
        slotTypeSummaries:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSummaryList'
          description: Summary information for the slot types that meet the filter
            criteria specified in the request. The length of the list is specified
            in the `maxResults` parameter of the request. If there are more slot types
            available, the `nextToken` field contains a token to get the next page
            of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListSlotTypes` operation. If the `nextToken` field
            is present, you send the contents as the `nextToken` parameter of a `ListSlotTypes`
            operation request to get the next page of results.
    ListSlotsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the slot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the slot.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the slots to list.
            The string must match one of the supported locales. For more information,
            see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the intent that contains the slot.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SlotSortBy'
          description: Determines the sort order for the response from the `ListSlots`
            operation. You can choose to sort by the slot name or last updated date
            in either ascending or descending order.
        filters:
          allOf:
          - $ref: '#/components/schemas/SlotFilters'
          description: Provides the specification of a filter used to limit the slots
            in the response to only those that match the filter specification. You
            can only specify one filter and only one string to filter on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of slots to return in each page of results.
            If there are fewer results than the max page size, only the actual number
            of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the `ListSlots` operation contains more
            results than specified in the `maxResults` parameter, a token is returned
            in the response. Use that token in the `nextToken` parameter to return
            the next page of results.
      required:
      - botId
      - botVersion
      - localeId
      - intentId
    ListSlotsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the slots.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that contains the slots.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the slots in the list.
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the intent that contains the slots.
        slotSummaries:
          allOf:
          - $ref: '#/components/schemas/SlotSummaryList'
          description: Summary information for the slots that meet the filter criteria
            specified in the request. The length of the list is specified in the `maxResults`
            parameter of the request. If there are more slots available, the `nextToken`
            field contains a token to get the next page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListSlots` operation. If the `nextToken` field is
            present, you send the contents as the `nextToken` parameter of a `ListSlots`
            operation request to get the next page of results.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceARN:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the resource to get a list
            of tags for.
      required:
      - resourceARN
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags associated with a resource.
    ListTestExecutionResultItemsRequest:
      type: object
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test execution to list the result
            items.
        resultFilterBy:
          allOf:
          - $ref: '#/components/schemas/TestExecutionResultFilterBy'
          description: The filter for the list of results from the test set execution.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of test execution result items to return
            in each page. If there are fewer results than the max page size, only
            the actual number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the `ListTestExecutionResultItems` operation
            contains more results than specified in the `maxResults` parameter, a
            token is returned in the response. Use that token in the `nextToken` parameter
            to return the next page of results.
      required:
      - testExecutionId
      - resultFilterBy
    ListTestExecutionResultItemsResponse:
      type: object
      properties:
        testExecutionResults:
          allOf:
          - $ref: '#/components/schemas/TestExecutionResultItems'
          description: The list of results from the test execution.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the `ListTestExecutionResultItems` operation. If the
            `nextToken` field is present, you send the contents as the `nextToken`
            parameter of a `ListTestExecutionResultItems` operation request to get
            the next page of results.
    ListTestExecutionsRequest:
      type: object
      properties:
        sortBy:
          allOf:
          - $ref: '#/components/schemas/TestExecutionSortBy'
          description: The sort order of the test set executions.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of test executions to return in each page.
            If there are fewer results than the max page size, only the actual number
            of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the ListTestExecutions operation contains
            more results than specified in the maxResults parameter, a token is returned
            in the response. Use that token in the nextToken parameter to return the
            next page of results.
    ListTestExecutionsResponse:
      type: object
      properties:
        testExecutions:
          allOf:
          - $ref: '#/components/schemas/TestExecutionSummaryList'
          description: The list of test executions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the ListTestExecutions operation. If the nextToken field
            is present, you send the contents as the nextToken parameter of a ListTestExecutions
            operation request to get the next page of results.
    ListTestSetRecordsRequest:
      type: object
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the test set to list its test set records.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of test set records to return in each page.
            If there are fewer records than the max page size, only the actual number
            of records are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the ListTestSetRecords operation contains
            more results than specified in the maxResults parameter, a token is returned
            in the response. Use that token in the nextToken parameter to return the
            next page of results.
      required:
      - testSetId
    ListTestSetRecordsResponse:
      type: object
      properties:
        testSetRecords:
          allOf:
          - $ref: '#/components/schemas/TestSetTurnRecordList'
          description: The list of records from the test set.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more records to return
            in a response to the ListTestSetRecords operation. If the nextToken field
            is present, you send the contents as the nextToken parameter of a ListTestSetRecords
            operation request to get the next page of records.
    ListTestSetsRequest:
      type: object
      properties:
        sortBy:
          allOf:
          - $ref: '#/components/schemas/TestSetSortBy'
          description: The sort order for the list of test sets.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of test sets to return in each page. If
            there are fewer results than the max page size, only the actual number
            of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response from the ListTestSets operation contains more
            results than specified in the maxResults parameter, a token is returned
            in the response. Use that token in the nextToken parameter to return the
            next page of results.
    ListTestSetsResponse:
      type: object
      properties:
        testSets:
          allOf:
          - $ref: '#/components/schemas/TestSetSummaryList'
          description: The selected test sets in a list of test sets.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that indicates whether there are more results to return
            in a response to the ListTestSets operation. If the nextToken field is
            present, you send the contents as the nextToken parameter of a ListTestSets
            operation request to get the next page of results.
    ListUtteranceAnalyticsDataRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you want to retrieve utterance
            analytics.
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the beginning of the range of
            time for which you want to see utterance analytics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the end of the range of time for
            which you want to see utterance analytics.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/UtteranceDataSortBy'
          description: An object specifying the measure and method by which to sort
            the utterance analytics data.
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceFilters'
          description: A list of objects, each of which describes a condition by which
            you want to filter the results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in each page of results.
            If there are fewer results than the maximum page size, only the actual
            number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListUtteranceAnalyticsData operation
            contains more results than specified in the maxResults parameter, a token
            is returned in the response.


            Use the returned token in the nextToken parameter of a ListUtteranceAnalyticsData
            request to return the next page of results. For a complete set of results,
            call the ListUtteranceAnalyticsData operation until the nextToken returned
            in the response is null.'
      required:
      - botId
      - startDateTime
      - endDateTime
    ListUtteranceAnalyticsDataResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that the utterances belong
            to.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListUtteranceAnalyticsData operation
            contains more results than specified in the maxResults parameter, a token
            is returned in the response.


            Use the returned token in the nextToken parameter of a ListUtteranceAnalyticsData
            request to return the next page of results. For a complete set of results,
            call the ListUtteranceAnalyticsData operation until the nextToken returned
            in the response is null.'
        utterances:
          allOf:
          - $ref: '#/components/schemas/UtteranceSpecifications'
          description: A list of objects, each of which contains information about
            an utterance in a user session with your bot.
    ListUtteranceMetricsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you want to retrieve utterance
            metrics.
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the beginning of the range of
            time for which you want to see utterance metrics.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that marks the end of the range of time for
            which you want to see utterance metrics.
        metrics:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceMetrics'
          description: A list of objects, each of which contains a metric you want
            to list, the statistic for the metric you want to return, and the method
            by which to organize the results.
        binBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsBinByList'
          description: A list of objects, each of which contains specifications for
            organizing the results by time.
        groupBy:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceGroupByList'
          description: "A list of objects, each of which specifies how to group the\
            \ results. You can group by the following criteria:\n\n  * `UtteranceText`\
            \ – The transcription of the utterance.\n\n  * `UtteranceState` – The\
            \ state of the utterance. The possible states are detailed in [Key definitions](https://docs.aws.amazon.com/analytics-key-definitions-utterances)\
            \ in the user guide."
        attributes:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceAttributes'
          description: "A list containing attributes related to the utterance that\
            \ you want the response to return. The following attributes are possible:\n\
            \n  * `LastUsedIntent` – The last used intent at the time of the utterance."
        filters:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceFilters'
          description: A list of objects, each of which describes a condition by which
            you want to filter the results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in each page of results.
            If there are fewer results than the maximum page size, only the actual
            number of results are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListUtteranceMetrics operation contains
            more results than specified in the maxResults parameter, a token is returned
            in the response.


            Use the returned token in the nextToken parameter of a ListUtteranceMetrics
            request to return the next page of results. For a complete set of results,
            call the ListUtteranceMetrics operation until the nextToken returned in
            the response is null.'
      required:
      - botId
      - startDateTime
      - endDateTime
      - metrics
    ListUtteranceMetricsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the bot for which you retrieved utterance
            metrics.
        results:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceResults'
          description: The results for the utterance metrics.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'If the response from the ListUtteranceMetrics operation contains
            more results than specified in the maxResults parameter, a token is returned
            in the response.


            Use the returned token in the nextToken parameter of a ListUtteranceMetrics
            request to return the next page of results. For a complete set of results,
            call the ListUtteranceMetrics operation until the nextToken returned in
            the response is null.'
    LocaleId:
      type: string
    LocaleName:
      type: string
    LogPrefix:
      type: string
      minLength: 0
      maxLength: 1024
    MaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    MaxUtteranceDigits:
      type: integer
      minimum: 1
      maximum: 1024
    MergeStrategy:
      type: string
      enum:
      - Overwrite
      - FailOnConflict
      - Append
    Message:
      type: object
      properties:
        plainTextMessage:
          allOf:
          - $ref: '#/components/schemas/PlainTextMessage'
          description: A message in plain text format.
        customPayload:
          allOf:
          - $ref: '#/components/schemas/CustomPayload'
          description: A message in a custom format defined by the client application.
        ssmlMessage:
          allOf:
          - $ref: '#/components/schemas/SSMLMessage'
          description: A message in Speech Synthesis Markup Language (SSML).
        imageResponseCard:
          allOf:
          - $ref: '#/components/schemas/ImageResponseCard'
          description: A message that defines a response card that the client application
            can show to the user.
      description: The object that provides message text and its type.
    MessageGroup:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/Message'
          description: The primary message that Amazon Lex should send to the user.
        variations:
          allOf:
          - $ref: '#/components/schemas/MessageVariationsList'
          description: Message variations to send to the user. When variations are
            defined, Amazon Lex chooses the primary message or one of the variations
            to send to the user.
      required:
      - message
      description: Provides one or more messages that Amazon Lex should send to the
        user.
    MessageGroupsList:
      type: array
      items:
        $ref: '#/components/schemas/MessageGroup'
    MessageSelectionStrategy:
      type: string
      enum:
      - Random
      - Ordered
    MessageVariationsList:
      type: array
      items:
        $ref: '#/components/schemas/Message'
    MissedCount:
      type: integer
    MultipleValuesSetting:
      type: object
      properties:
        allowMultipleValues:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Indicates whether a slot can return multiple values. When
            `true`, the slot may return more than one value in a response. When `false`,
            the slot returns only a single value.


            Multi-value slots are only available in the en-US locale. If you set this
            value to `true` in any other locale, Amazon Lex throws a `ValidationException`.


            If the `allowMutlipleValues` is not set, the default value is `false`.'
      description: Indicates whether a slot can return multiple values.
    Name:
      type: string
      pattern: ^([0-9a-zA-Z][_-]?){1,100}$
      minLength: 1
      maxLength: 100
    NewCustomVocabularyItem:
      type: object
      properties:
        phrase:
          allOf:
          - $ref: '#/components/schemas/Phrase'
          description: The unique phrase for the new custom vocabulary item from the
            custom vocabulary list.
        weight:
          allOf:
          - $ref: '#/components/schemas/Weight'
          description: The weight assigned to the new custom vocabulary item from
            the custom vocabulary list.
        displayAs:
          allOf:
          - $ref: '#/components/schemas/Phrase'
          description: The display as value assigned to the new custom vocabulary
            item from the custom vocabulary list.
      required:
      - phrase
      description: The new custom vocabulary item from the custom vocabulary list.
    NextIndex:
      type: integer
      minimum: 0
      maximum: 10000000
    NextToken:
      type: string
    NonEmptyString:
      type: string
      minLength: 1
    NumericalBotVersion:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 5
    OSIncludeFields:
      type: array
      items:
        $ref: '#/components/schemas/IncludeField'
    OSIndexName:
      type: string
      pattern: ^(?![_-])[a-z0-9][a-z0-9_\-]{0,254}$
      minLength: 1
      maxLength: 255
    ObfuscationSetting:
      type: object
      properties:
        obfuscationSettingType:
          allOf:
          - $ref: '#/components/schemas/ObfuscationSettingType'
          description: Value that determines whether Amazon Lex obscures slot values
            in conversation logs. The default is to obscure the values.
      required:
      - obfuscationSettingType
      description: Determines whether Amazon Lex obscures slot values in conversation
        logs.
    ObfuscationSettingType:
      type: string
      enum:
      - None
      - DefaultObfuscation
    ObjectPrefix:
      type: string
      pattern: ^[\/]?+[a-zA-Z0-9!_.*'()-]+(\/[a-zA-Z0-9!_.*'()-]+)*$
      minLength: 1
    ObjectPrefixes:
      type: array
      items:
        $ref: '#/components/schemas/ObjectPrefix'
    OpensearchConfiguration:
      type: object
      properties:
        domainEndpoint:
          allOf:
          - $ref: '#/components/schemas/DomainEndpoint'
          description: The endpoint of the Amazon OpenSearch Service domain.
        indexName:
          allOf:
          - $ref: '#/components/schemas/OSIndexName'
          description: The name of the Amazon OpenSearch Service index.
        exactResponse:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to return an exact response or to return
            an answer generated by the model using the fields you specify from the
            database.
        exactResponseFields:
          allOf:
          - $ref: '#/components/schemas/ExactResponseFields'
          description: Contains the names of the fields used for an exact response
            to the user.
        includeFields:
          allOf:
          - $ref: '#/components/schemas/OSIncludeFields'
          description: Contains a list of fields from the Amazon OpenSearch Service
            that the model can use to generate the answer to the query.
      required:
      - domainEndpoint
      - indexName
      description: Contains details about the configuration of the Amazon OpenSearch
        Service database used for the `AMAZON.QnAIntent`.
    Operation:
      type: string
      pattern: ^lex:[a-zA-Z*]+$
      minLength: 5
      maxLength: 50
    OperationList:
      type: array
      items:
        $ref: '#/components/schemas/Operation'
    OutputContext:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the output context.
        timeToLiveInSeconds:
          allOf:
          - $ref: '#/components/schemas/ContextTimeToLiveInSeconds'
          description: The amount of time, in seconds, that the output context should
            remain active. The time is figured from the first time the context is
            sent to the user.
        turnsToLive:
          allOf:
          - $ref: '#/components/schemas/ContextTurnsToLive'
          description: The number of conversation turns that the output context should
            remain active. The number of turns is counted from the first time that
            the context is sent to the user.
      required:
      - name
      - timeToLiveInSeconds
      - turnsToLive
      description: Describes a session context that is activated when an intent is
        fulfilled.
    OutputContextsList:
      type: array
      items:
        $ref: '#/components/schemas/OutputContext'
    OverallTestResultItem:
      type: object
      properties:
        multiTurnConversation:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the conversation contains multiple turns
            or not.
        totalResultCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          description: The total number of overall results in the result of the test
            execution.
        speechTranscriptionResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          description: The number of speech transcription results in the overall test.
        endToEndResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          description: The number of results that succeeded.
      required:
      - multiTurnConversation
      - totalResultCount
      - endToEndResultCounts
      description: Information about the overall results for a test execution result.
    OverallTestResultItemList:
      type: array
      items:
        $ref: '#/components/schemas/OverallTestResultItem'
    OverallTestResults:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/OverallTestResultItemList'
          description: A list of the overall test results.
      required:
      - items
      description: Information about the overall test results.
    ParentBotNetwork:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the network of bots assigned by Amazon Lex.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the network of bots.
      required:
      - botId
      - botVersion
      description: A network of bots.
    ParentBotNetworks:
      type: array
      items:
        $ref: '#/components/schemas/ParentBotNetwork'
    PathFormat:
      type: object
      properties:
        objectPrefixes:
          allOf:
          - $ref: '#/components/schemas/ObjectPrefixes'
          description: A list of Amazon S3 prefixes that points to sub-folders in
            the Amazon S3 bucket. Specify this list if you only want Lex to read the
            files under this set of sub-folders.
      description: The object that contains a path format that will be applied when
        Amazon Lex reads the transcript file in the bucket you provide. Specify this
        object if you only want Lex to read a subset of files in your Amazon S3 bucket.
    Phrase:
      type: string
      minLength: 1
      maxLength: 100
    PlainTextMessage:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/PlainTextMessageValue'
          description: The message to send to the user.
      required:
      - value
      description: Defines an ASCII text message to send to the user.
    PlainTextMessageValue:
      type: string
      minLength: 1
      maxLength: 1000
    Policy:
      type: string
      minLength: 2
    PostDialogCodeHookInvocationSpecification:
      type: object
      properties:
        successResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        successNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifics the next step the bot runs after the dialog code
            hook finishes successfully.
        successConditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches to evaluate after the dialog
            code hook finishes successfully.
        failureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        failureNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifies the next step the bot runs after the dialog code
            hook throws an exception or returns with the `State` field of the `Intent`
            object set to `Failed`.
        failureConditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches to evaluate after the dialog
            code hook throws an exception or returns with the `State` field of the
            `Intent` object set to `Failed`.
        timeoutResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        timeoutNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifies the next step that the bot runs when the code hook
            times out.
        timeoutConditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches to evaluate if the code hook
            times out.
      description: Specifies next steps to run after the dialog code hook finishes.
    PostFulfillmentStatusSpecification:
      type: object
      properties:
        successResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        failureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        timeoutResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        successNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifies the next step in the conversation that Amazon Lex
            invokes when the fulfillment code hook completes successfully.
        successConditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches to evaluate after the fulfillment
            code hook finishes successfully.
        failureNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifies the next step the bot runs after the fulfillment
            code hook throws an exception or returns with the `State` field of the
            `Intent` object set to `Failed`.
        failureConditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches to evaluate after the fulfillment
            code hook throws an exception or returns with the `State` field of the
            `Intent` object set to `Failed`.
        timeoutNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifies the next step that the bot runs when the fulfillment
            code hook times out.
        timeoutConditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches to evaluate if the fulfillment
            code hook times out.
      description: Provides a setting that determines whether the post-fulfillment
        response is sent to the user. For more information, see <https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete>
    PreconditionFailedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
      description: Your request couldn't be completed because one or more request
        fields aren't valid. Check the fields in your request and try again.
    PresignedS3Url:
      type: string
      minLength: 1
      maxLength: 1024
    Principal:
      type: object
      properties:
        service:
          allOf:
          - $ref: '#/components/schemas/ServicePrincipal'
          description: The name of the Amazon Web Services service that should allowed
            or denied access to an Amazon Lex action.
        arn:
          allOf:
          - $ref: '#/components/schemas/PrincipalArn'
          description: The Amazon Resource Name (ARN) of the principal.
      description: 'The IAM principal that you allowing or denying access to an Amazon
        Lex action. You must provide a `service` or an `arn`, but not both in the
        same statement. For more information, see [ AWS JSON policy elements: Principal
        ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html).'
    PrincipalArn:
      type: string
      pattern: ^arn:aws:iam::[0-9]{12}:(root|(user|role)/.*)$
      minLength: 30
      maxLength: 1024
    PrincipalList:
      type: array
      items:
        $ref: '#/components/schemas/Principal'
    PriorityValue:
      type: integer
      minimum: 0
      maximum: 100
    PromptAttempt:
      type: string
      enum:
      - Initial
      - Retry1
      - Retry2
      - Retry3
      - Retry4
      - Retry5
      description: <p>The attempt name of attempts of a prompt.</p>
    PromptAttemptSpecification:
      type: object
      properties:
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates whether the user can interrupt a speech prompt attempt
            from the bot.
        allowedInputTypes:
          allOf:
          - $ref: '#/components/schemas/AllowedInputTypes'
          description: Indicates the allowed input types of the prompt attempt.
        audioAndDTMFInputSpecification:
          allOf:
          - $ref: '#/components/schemas/AudioAndDTMFInputSpecification'
          description: Specifies the settings on audio and DTMF input.
        textInputSpecification:
          allOf:
          - $ref: '#/components/schemas/TextInputSpecification'
          description: Specifies the settings on text input.
      required:
      - allowedInputTypes
      description: Specifies the settings on a prompt attempt.
    PromptAttemptsSpecificationMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PromptAttemptSpecification'
    PromptMaxRetries:
      type: integer
      minimum: 0
      maximum: 5
    PromptSpecification:
      type: object
      properties:
        messageGroups:
          allOf:
          - $ref: '#/components/schemas/MessageGroupsList'
          description: A collection of messages that Amazon Lex can send to the user.
            Amazon Lex chooses the actual message to send at runtime.
        maxRetries:
          allOf:
          - $ref: '#/components/schemas/PromptMaxRetries'
          description: The maximum number of times the bot tries to elicit a response
            from the user using this prompt.
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates whether the user can interrupt a speech prompt from
            the bot.
        messageSelectionStrategy:
          allOf:
          - $ref: '#/components/schemas/MessageSelectionStrategy'
          description: Indicates how a message is selected from a message group among
            retries.
        promptAttemptsSpecification:
          allOf:
          - $ref: '#/components/schemas/PromptAttemptsSpecificationMap'
          description: Specifies the advanced settings on each attempt of the prompt.
      required:
      - messageGroups
      - maxRetries
      description: Specifies a list of message groups that Amazon Lex sends to a user
        to elicit a response.
    QInConnectAssistantARN:
      type: string
      pattern: ^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}){0,2}$
    QInConnectAssistantConfiguration:
      type: object
      properties:
        assistantArn:
          allOf:
          - $ref: '#/components/schemas/QInConnectAssistantARN'
          description: The assistant Arn details of the Qinconnect assistant configuration.
      required:
      - assistantArn
      description: The configuration details of the Qinconnect assistant.
    QInConnectIntentConfiguration:
      type: object
      properties:
        qInConnectAssistantConfiguration:
          allOf:
          - $ref: '#/components/schemas/QInConnectAssistantConfiguration'
          description: The Qinconnect assistant configuration details of the Qinconnect
            intent.
      description: The configuration details of the Qinconnect intent.
    QnAIntentConfiguration:
      type: object
      properties:
        dataSourceConfiguration:
          allOf:
          - $ref: '#/components/schemas/DataSourceConfiguration'
          description: Contains details about the configuration of the data source
            used for the `AMAZON.QnAIntent`.
        bedrockModelConfiguration:
          $ref: '#/components/schemas/BedrockModelSpecification'
      description: Details about the the configuration of the built-in `Amazon.QnAIntent`.
    QnAKendraConfiguration:
      type: object
      properties:
        kendraIndex:
          allOf:
          - $ref: '#/components/schemas/KendraIndexArn'
          description: The ARN of the Amazon Kendra index to use.
        queryFilterStringEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to enable an Amazon Kendra filter string
            or not.
        queryFilterString:
          allOf:
          - $ref: '#/components/schemas/QueryFilterString'
          description: Contains the Amazon Kendra filter string to use if enabled.
            For more information on the Amazon Kendra search filter JSON format, see
            [Using document attributes to filter search results](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering).
        exactResponse:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to return an exact response from the Amazon
            Kendra index or to let the Amazon Bedrock model you select generate a
            response based on the results. To use this feature, you must first add
            FAQ questions to your index by following the steps at [Adding frequently
            asked questions (FAQs) to an index](https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html).
      required:
      - kendraIndex
      description: Contains details about the configuration of the Amazon Kendra index
        used for the `AMAZON.QnAIntent`.
    QueryFilterString:
      type: string
      minLength: 1
      maxLength: 5000
    QuestionField:
      type: string
    RecommendedAction:
      type: string
    RecommendedActions:
      type: array
      items:
        $ref: '#/components/schemas/RecommendedAction'
    RecommendedIntentSummary:
      type: object
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of a recommended intent associated with
            the bot recommendation.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of a recommended intent associated with the bot recommendation.
        sampleUtterancesCount:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesCount'
          description: The count of sample utterances of a recommended intent that
            is associated with a bot recommendation.
      description: An object that contains a summary of a recommended intent.
    RecommendedIntentSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/RecommendedIntentSummary'
    RecordNumber:
      type: integer
      format: int64
      minimum: 1
      maximum: 200000
    RegexPattern:
      type: string
      minLength: 1
      maxLength: 300
    RelativeAggregationDuration:
      type: object
      properties:
        timeDimension:
          allOf:
          - $ref: '#/components/schemas/TimeDimension'
          description: The type of time period that the `timeValue` field represents.
        timeValue:
          allOf:
          - $ref: '#/components/schemas/TimeValue'
          description: "The period of the time window to gather statistics for. The\
            \ valid value depends on the setting of the `timeDimension` field.\n\n\
            \  * `Hours` \\- 1/3/6/12/24\n\n  * `Days` \\- 3\n\n  * `Weeks` \\- 1/2"
      required:
      - timeDimension
      - timeValue
      description: "Specifies the time window that utterance statistics are returned\
        \ for. The time window is always relative to the last time that the that utterances\
        \ were aggregated. For example, if the `ListAggregatedUtterances` operation\
        \ is called at 1600, the time window is set to 1 hour, and the last refresh\
        \ time was 1530, only utterances made between 1430 and 1530 are returned.\n\
        \nYou can choose the time window that statistics should be returned for.\n\
        \n  * **Hours** \\- You can request utterance statistics for 1, 3, 6, 12,\
        \ or 24 hour time windows. Statistics are refreshed every half hour for 1\
        \ hour time windows, and hourly for the other time windows.\n\n  * **Days**\
        \ \\- You can request utterance statistics for 3 days. Statistics are refreshed\
        \ every 6 hours.\n\n  * **Weeks** \\- You can see statistics for one or two\
        \ weeks. Statistics are refreshed every 12 hours for one week time windows,\
        \ and once per day for two week time windows."
    ReplicaRegion:
      type: string
      minLength: 2
      maxLength: 25
    ResourceCount:
      type: integer
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
      description: You asked to describe a resource that doesn't exist. Check the
        resource that you are requesting and try again.
    ResponseSpecification:
      type: object
      properties:
        messageGroups:
          allOf:
          - $ref: '#/components/schemas/MessageGroupsList'
          description: A collection of responses that Amazon Lex can send to the user.
            Amazon Lex chooses the actual response to send at runtime.
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates whether the user can interrupt a speech response
            from Amazon Lex.
      required:
      - messageGroups
      description: Specifies a list of message groups that Amazon Lex uses to respond
        the user input.
    RetryAfterSeconds:
      type: integer
      default: 0
    RevisionId:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 5
    RoleArn:
      type: string
      pattern: ^arn:aws:iam::[0-9]{12}:role/.*$
      minLength: 32
      maxLength: 2048
    RuntimeHintDetails:
      type: object
      properties:
        runtimeHintValues:
          allOf:
          - $ref: '#/components/schemas/RuntimeHintValuesList'
          description: One or more strings that Amazon Lex should look for in the
            input to the bot. Each phrase is given preference when deciding on slot
            values.
        subSlotHints:
          allOf:
          - $ref: '#/components/schemas/SlotHintsSlotMap'
          description: A map of constituent sub slot names inside a composite slot
            in the intent and the phrases that should be added for each sub slot.
            Inside each composite slot hints, this structure provides a mechanism
            to add granular sub slot phrases. Only sub slot hints are supported for
            composite slots. The intent name, composite slot name and the constituent
            sub slot names must exist.
      description: Provides an array of phrases that should be given preference when
        resolving values for a slot.
    RuntimeHintPhrase:
      type: string
      minLength: 1
      maxLength: 140
    RuntimeHintValue:
      type: object
      properties:
        phrase:
          allOf:
          - $ref: '#/components/schemas/RuntimeHintPhrase'
          description: The phrase that Amazon Lex should look for in the user's input
            to the bot.
      required:
      - phrase
      description: Provides the phrase that Amazon Lex should look for in the user's
        input to the bot.
    RuntimeHintValuesList:
      type: array
      items:
        $ref: '#/components/schemas/RuntimeHintValue'
    RuntimeHints:
      type: object
      properties:
        slotHints:
          allOf:
          - $ref: '#/components/schemas/SlotHintsIntentMap'
          description: 'A list of the slots in the intent that should have runtime
            hints added, and the phrases that should be added for each slot.


            The first level of the `slotHints` map is the name of the intent. The
            second level is the name of the slot within the intent. For more information,
            see [Using hints to improve accuracy](https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html).


            The intent name and slot name must exist.'
      description: 'You can provide Amazon Lex with hints to the phrases that a customer
        is likely to use for a slot. When a slot with hints is resolved, the phrases
        in the runtime hints are preferred in the resolution. You can provide hints
        for a maximum of 100 intents. You can provide a maximum of 100 slots.


        Before you can use runtime hints with an existing bot, you must first rebuild
        the bot.


        For more information, see [Using runtime hints to improve recognition of slot
        values](https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html).'
    RuntimeSettings:
      type: object
      properties:
        slotResolutionImprovement:
          allOf:
          - $ref: '#/components/schemas/SlotResolutionImprovementSpecification'
          description: An object containing specifications for the assisted slot resolution
            feature.
      description: Contains specifications about the Amazon Lex runtime generative
        AI capabilities from Amazon Bedrock that you can turn on for your bot.
    S3BucketArn:
      type: string
      pattern: ^arn:[\w\-]+:s3:::[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$
      minLength: 1
      maxLength: 2048
    S3BucketLogDestination:
      type: object
      properties:
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of an Amazon Web Services Key
            Management Service (KMS) key for encrypting audio log files stored in
            an S3 bucket.
        s3BucketArn:
          allOf:
          - $ref: '#/components/schemas/S3BucketArn'
          description: The Amazon Resource Name (ARN) of an Amazon S3 bucket where
            audio log files are stored.
        logPrefix:
          allOf:
          - $ref: '#/components/schemas/LogPrefix'
          description: The S3 prefix to assign to audio log files.
      required:
      - s3BucketArn
      - logPrefix
      description: Specifies an Amazon S3 bucket for logging audio conversations
    S3BucketName:
      type: string
      pattern: ^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$
      minLength: 3
      maxLength: 63
    S3BucketTranscriptSource:
      type: object
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The name of the bucket containing the transcript and the associated
            metadata.
        pathFormat:
          allOf:
          - $ref: '#/components/schemas/PathFormat'
          description: The object that contains a path format that will be applied
            when Amazon Lex reads the transcript file in the bucket you provide. Specify
            this object if you only want Lex to read a subset of files in your Amazon
            S3 bucket.
        transcriptFormat:
          allOf:
          - $ref: '#/components/schemas/TranscriptFormat'
          description: The format of the transcript content. Currently, Genie only
            supports the Amazon Lex transcript format.
        transcriptFilter:
          allOf:
          - $ref: '#/components/schemas/TranscriptFilter'
          description: The object that contains the filter which will be applied when
            Amazon Lex reads through the Amazon S3 bucket. Specify this object if
            you want Amazon Lex to read only a subset of the Amazon S3 bucket based
            on the filter you provide.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The ARN of the KMS key that customer use to encrypt their Amazon
            S3 bucket. Only use this field if your bucket is encrypted using a customer
            managed KMS key.
      required:
      - s3BucketName
      - transcriptFormat
      description: The object representing the Amazon S3 bucket containing the transcript,
        as well as the associated metadata.
    S3ObjectPath:
      type: string
      pattern: ^[\.\-\!\*\_\'\(\)a-zA-Z0-9][\.\-\!\*\_\'\(\)\/a-zA-Z0-9]*$
      minLength: 1
      maxLength: 1024
    SSMLMessage:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/SSMLMessageValue'
          description: The SSML text that defines the prompt.
      required:
      - value
      description: Defines a Speech Synthesis Markup Language (SSML) prompt.
    SSMLMessageValue:
      type: string
      minLength: 1
      maxLength: 1000
    SampleUtterance:
      type: object
      properties:
        utterance:
          allOf:
          - $ref: '#/components/schemas/Utterance'
          description: The sample utterance that Amazon Lex uses to build its machine-learning
            model to recognize intents.
      required:
      - utterance
      description: A sample utterance that invokes an intent or respond to a slot
        elicitation prompt.
    SampleUtteranceGenerationSpecification:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to enable sample utterance generation or
            not.
        bedrockModelSpecification:
          $ref: '#/components/schemas/BedrockModelSpecification'
      required:
      - enabled
      description: Contains specifications for the sample utterance generation feature.
    SampleUtterancesCount:
      type: integer
    SampleUtterancesList:
      type: array
      items:
        $ref: '#/components/schemas/SampleUtterance'
    SampleValue:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/Value'
          description: The value that can be used for a slot type.
      required:
      - value
      description: Defines one of the values for a slot type.
    SearchAssociatedTranscriptsRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot associated with the transcripts
            that you are searching.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot containing the transcripts that you
            are searching.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the transcripts
            to search. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot recommendation associated
            with the transcripts to search.
        searchOrder:
          allOf:
          - $ref: '#/components/schemas/SearchOrder'
          description: How SearchResults are ordered. Valid values are Ascending or
            Descending. The default is Descending.
        filters:
          allOf:
          - $ref: '#/components/schemas/AssociatedTranscriptFilters'
          description: A list of filter objects.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of bot recommendations to return in each
            page of results. If there are fewer results than the max page size, only
            the actual number of results are returned.
        nextIndex:
          allOf:
          - $ref: '#/components/schemas/NextIndex'
          description: If the response from the SearchAssociatedTranscriptsRequest
            operation contains more results than specified in the maxResults parameter,
            an index is returned in the response. Use that index in the nextIndex
            parameter to return the next page of results.
      required:
      - botId
      - botVersion
      - localeId
      - botRecommendationId
      - filters
    SearchAssociatedTranscriptsResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot associated with the transcripts
            that you are searching.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot containing the transcripts that you
            are searching.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the transcripts
            to search. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot recommendation associated
            with the transcripts to search.
        nextIndex:
          allOf:
          - $ref: '#/components/schemas/NextIndex'
          description: A index that indicates whether there are more results to return
            in a response to the SearchAssociatedTranscripts operation. If the nextIndex
            field is present, you send the contents as the nextIndex parameter of
            a SearchAssociatedTranscriptsRequest operation to get the next page of
            results.
        associatedTranscripts:
          allOf:
          - $ref: '#/components/schemas/AssociatedTranscriptList'
          description: The object that contains the associated transcript that meet
            the criteria you specified.
        totalResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The total number of transcripts returned by the search.
    SearchOrder:
      type: string
      enum:
      - Ascending
      - Descending
    SentimentAnalysisSettings:
      type: object
      properties:
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Sets whether Amazon Lex uses Amazon Comprehend to detect the
            sentiment of user utterances.
      required:
      - detectSentiment
      description: Determines whether Amazon Lex will use Amazon Comprehend to detect
        the sentiment of user utterances.
    ServicePrincipal:
      type: string
      pattern: ^[0-9a-zA-Z_.]+$
      minLength: 15
      maxLength: 1024
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
      description: You have reached a quota for your bot.
    SessionDataSortBy:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionSortByName'
          description: "The measure by which to sort the session analytics data.\n\
            \n  * `conversationStartTime` – The date and time when the conversation\
            \ began. A conversation is defined as a unique combination of a `sessionId`\
            \ and an `originatingRequestId`.\n\n  * `numberOfTurns` – The number of\
            \ turns that the session took.\n\n  * `conversationDurationSeconds` –\
            \ The duration of the conversation in seconds."
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          description: Specifies whether to sort the results in ascending or descending
            order.
      required:
      - name
      - order
      description: An object specifying the measure and method by which to sort the
        session analytics data.
    SessionId:
      type: string
      pattern: ^[0-9a-zA-Z._:-]+$
      minLength: 2
      maxLength: 100
    SessionSpecification:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The identifier of the alias of the bot that the session was
            held with.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot that the session was held with.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale of the bot that the session was held with.
        channel:
          allOf:
          - $ref: '#/components/schemas/AnalyticsChannel'
          description: The channel that is integrated with the bot that the session
            was held with.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionId'
          description: The identifier of the session.
        conversationStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the conversation began. A conversation
            is defined as a unique combination of a `sessionId` and an `originatingRequestId`.
        conversationEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the conversation ended. A conversation
            is defined as a unique combination of a `sessionId` and an `originatingRequestId`.
        conversationDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/AnalyticsLongValue'
          description: The duration of the conversation in seconds. A conversation
            is defined as a unique combination of a `sessionId` and an `originatingRequestId`.
        conversationEndState:
          allOf:
          - $ref: '#/components/schemas/ConversationEndState'
          description: The final state of the conversation. A conversation is defined
            as a unique combination of a `sessionId` and an `originatingRequestId`.
        mode:
          allOf:
          - $ref: '#/components/schemas/AnalyticsModality'
          description: "The mode of the session. The possible values are as follows:\n\
            \n  * `Speech` – The session was spoken.\n\n  * `Text` – The session was\
            \ written.\n\n  * `DTMF` – The session used a touch-tone keypad (Dual\
            \ Tone Multi-Frequency).\n\n  * `MultiMode` – The session used multiple\
            \ modes."
        numberOfTurns:
          allOf:
          - $ref: '#/components/schemas/AnalyticsLongValue'
          description: The number of turns that the session took.
        invokedIntentSamples:
          allOf:
          - $ref: '#/components/schemas/InvokedIntentSamples'
          description: A list of objects containing the name of an intent that was
            invoked.
        originatingRequestId:
          allOf:
          - $ref: '#/components/schemas/AnalyticsOriginatingRequestId'
          description: The identifier of the first request in a session.
      description: An object containing information about a specific session.
    SessionSpecifications:
      type: array
      items:
        $ref: '#/components/schemas/SessionSpecification'
    SessionTTL:
      type: integer
      minimum: 60
      maximum: 86400
    SkipResourceInUseCheck:
      type: boolean
      default: false
    SlotCaptureSetting:
      type: object
      properties:
        captureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        captureNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifies the next step that the bot runs when the slot value
            is captured before the code hook times out.
        captureConditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches to evaluate after the slot value
            is captured.
        failureResponse:
          $ref: '#/components/schemas/ResponseSpecification'
        failureNextStep:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: Specifies the next step that the bot runs when the slot value
            code is not recognized.
        failureConditional:
          allOf:
          - $ref: '#/components/schemas/ConditionalSpecification'
          description: A list of conditional branches to evaluate when the slot value
            isn't captured.
        codeHook:
          allOf:
          - $ref: '#/components/schemas/DialogCodeHookInvocationSetting'
          description: Code hook called after Amazon Lex successfully captures a slot
            value.
        elicitationCodeHook:
          allOf:
          - $ref: '#/components/schemas/ElicitationCodeHookInvocationSetting'
          description: Code hook called when Amazon Lex doesn't capture a slot value.
      description: Settings used when Amazon Lex successfully captures a slot value
        from a user.
    SlotConstraint:
      type: string
      enum:
      - Required
      - Optional
    SlotDefaultValue:
      type: object
      properties:
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/SlotDefaultValueString'
          description: The default value to use when a user doesn't provide a value
            for a slot.
      required:
      - defaultValue
      description: Specifies the default value to use when a user doesn't provide
        a value for a slot.
    SlotDefaultValueList:
      type: array
      items:
        $ref: '#/components/schemas/SlotDefaultValue'
    SlotDefaultValueSpecification:
      type: object
      properties:
        defaultValueList:
          allOf:
          - $ref: '#/components/schemas/SlotDefaultValueList'
          description: A list of default values. Amazon Lex chooses the default value
            to use in the order that they are presented in the list.
      required:
      - defaultValueList
      description: Defines a list of values that Amazon Lex should use as the default
        value for a slot.
    SlotDefaultValueString:
      type: string
      minLength: 1
      maxLength: 202
    SlotFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotFilterName'
          description: The name of the field to use for filtering.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: The value to use to filter the response.
        operator:
          allOf:
          - $ref: '#/components/schemas/SlotFilterOperator'
          description: The operator to use for the filter. Specify `EQ` when the `ListSlots`
            operation should return only aliases that equal the specified value. Specify
            `CO` when the `ListSlots` operation should return aliases that contain
            the specified value.
      required:
      - name
      - values
      - operator
      description: Filters the response from the `ListSlots` operation.
    SlotFilterName:
      type: string
      enum:
      - SlotName
    SlotFilterOperator:
      type: string
      enum:
      - CO
      - EQ
    SlotFilters:
      type: array
      items:
        $ref: '#/components/schemas/SlotFilter'
    SlotHintsIntentMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SlotHintsSlotMap'
    SlotHintsSlotMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/RuntimeHintDetails'
    SlotPrioritiesList:
      type: array
      items:
        $ref: '#/components/schemas/SlotPriority'
    SlotPriority:
      type: object
      properties:
        priority:
          allOf:
          - $ref: '#/components/schemas/PriorityValue'
          description: The priority that Amazon Lex should apply to the slot.
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the slot.
      required:
      - priority
      - slotId
      description: Sets the priority that Amazon Lex should use when eliciting slot
        values from a user.
    SlotResolutionImprovementSpecification:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Enabled'
          description: Specifies whether assisted slot resolution is turned on or
            off.
        bedrockModelSpecification:
          allOf:
          - $ref: '#/components/schemas/BedrockModelSpecification'
          description: An object containing information about the Amazon Bedrock model
            used to assist slot resolution.
      required:
      - enabled
      description: Contains specifications for the assisted slot resolution feature.
    SlotResolutionSetting:
      type: object
      properties:
        slotResolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotResolutionStrategy'
          description: Specifies whether assisted slot resolution is turned on for
            the slot or not. If the value is `EnhancedFallback`, assisted slot resolution
            is activated when Amazon Lex defaults to the `AMAZON.FallbackIntent`.
            If the value is `Default`, assisted slot resolution is turned off.
      required:
      - slotResolutionStrategy
      description: Contains information about whether assisted slot resolution is
        turned on for the slot or not.
    SlotResolutionStrategy:
      type: string
      enum:
      - EnhancedFallback
      - Default
    SlotResolutionTestResultItem:
      type: object
      properties:
        slotName:
          allOf:
          - $ref: '#/components/schemas/TestResultSlotName'
          description: The name of the slot.
        resultCounts:
          allOf:
          - $ref: '#/components/schemas/SlotResolutionTestResultItemCounts'
          description: A result for slot resolution in the results of a test execution.
      required:
      - slotName
      - resultCounts
      description: Information about the success and failure rate of slot resolution
        in the results of a test execution.
    SlotResolutionTestResultItemCounts:
      type: object
      properties:
        totalResultCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          description: The total number of results.
        speechTranscriptionResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          description: The number of matched, mismatched and execution error results
            for speech transcription for the slot.
        slotMatchResultCounts:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatusCountMap'
          description: The number of matched and mismatched results for slot resolution
            for the slot.
      required:
      - totalResultCount
      - slotMatchResultCounts
      description: Information about the counts for a slot resolution in the results
        of a test execution.
    SlotResolutionTestResultItems:
      type: array
      items:
        $ref: '#/components/schemas/SlotResolutionTestResultItem'
    SlotShape:
      type: string
      enum:
      - Scalar
      - List
    SlotSortAttribute:
      type: string
      enum:
      - SlotName
      - LastUpdatedDateTime
    SlotSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/SlotSortAttribute'
          description: The attribute to use to sort the list.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can choose ascending or descending.
      required:
      - attribute
      - order
      description: Specifies attributes for sorting a list of bots.
    SlotSummary:
      type: object
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the slot.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name given to the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the slot.
        slotConstraint:
          allOf:
          - $ref: '#/components/schemas/SlotConstraint'
          description: Whether the slot is required or optional. An intent is complete
            when all required slots are filled.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The unique identifier for the slot type that defines the values
            for the slot.
        valueElicitationPromptSpecification:
          allOf:
          - $ref: '#/components/schemas/PromptSpecification'
          description: Prompts that are sent to the user to elicit a value for the
            slot.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the last date and time that the slot was updated.
      description: Summary information about a slot, a value that the bot elicits
        from the user.
    SlotSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/SlotSummary'
    SlotTypeCategory:
      type: string
      enum:
      - Custom
      - Extended
      - ExternalGrammar
      - Composite
    SlotTypeFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeFilterName'
          description: The name of the field to use for filtering.
        values:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: The value to use to filter the response.
        operator:
          allOf:
          - $ref: '#/components/schemas/SlotTypeFilterOperator'
          description: The operator to use for the filter. Specify `EQ` when the `ListSlotTypes`
            operation should return only aliases that equal the specified value. Specify
            `CO` when the `ListSlotTypes` operation should return aliases that contain
            the specified value.
      required:
      - name
      - values
      - operator
      description: Filters the response from the `ListSlotTypes` operation.
    SlotTypeFilterName:
      type: string
      enum:
      - SlotTypeName
      - ExternalSourceType
    SlotTypeFilterOperator:
      type: string
      enum:
      - CO
      - EQ
    SlotTypeFilters:
      type: array
      items:
        $ref: '#/components/schemas/SlotTypeFilter'
    SlotTypeSignature:
      type: string
    SlotTypeSortAttribute:
      type: string
      enum:
      - SlotTypeName
      - LastUpdatedDateTime
    SlotTypeSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSortAttribute'
          description: The attribute to use to sort the list of slot types.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order to sort the list. You can say ascending or descending.
      required:
      - attribute
      - order
      description: Specifies attributes for sorting a list of slot types.
    SlotTypeStatistics:
      type: object
      properties:
        discoveredSlotTypeCount:
          allOf:
          - $ref: '#/components/schemas/Count'
          description: The number of recommended slot types associated with the bot
            recommendation.
      description: The object that contains the statistical summary of the recommended
        slot type associated with the bot recommendation.
    SlotTypeSummary:
      type: object
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier assigned to the slot type.
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the slot type.
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          description: If the slot type is derived from a built-on slot type, the
            name of the parent slot type.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot type was last
            updated.
        slotTypeCategory:
          allOf:
          - $ref: '#/components/schemas/SlotTypeCategory'
          description: "Indicates the type of the slot type.\n\n  * `Custom` \\- A\
            \ slot type that you created using custom values. For more information,\
            \ see [Creating custom slot types](https://docs.aws.amazon.com/lexv2/latest/dg/custom-slot-types.html).\n\
            \n  * `Extended` \\- A slot type created by extending the `AMAZON.AlphaNumeric`\
            \ built-in slot type. For more information, see [ `AMAZON.AlphaNumeric`\
            \ ](https://docs.aws.amazon.com/lexv2/latest/dg/built-in-slot-alphanumerice.html).\n\
            \n  * `ExternalGrammar` \\- A slot type using a custom GRXML grammar to\
            \ define values. For more information, see [Using a custom grammar slot\
            \ type](https://docs.aws.amazon.com/lexv2/latest/dg/building-grxml.html)."
      description: Provides summary information about a slot type.
    SlotTypeSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/SlotTypeSummary'
    SlotTypeValue:
      type: object
      properties:
        sampleValue:
          allOf:
          - $ref: '#/components/schemas/SampleValue'
          description: The value of the slot type entry.
        synonyms:
          allOf:
          - $ref: '#/components/schemas/SynonymList'
          description: Additional values related to the slot type entry.
      description: Each slot type can have a set of values. Each `SlotTypeValue` represents
        a value that the slot type can take.
    SlotTypeValues:
      type: array
      items:
        $ref: '#/components/schemas/SlotTypeValue'
    SlotValue:
      type: object
      properties:
        interpretedValue:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The value that Amazon Lex determines for the slot. The actual
            value depends on the setting of the value selection strategy for the bot.
            You can choose to use the value entered by the user, or you can have Amazon
            Lex choose the first value in the `resolvedValues` list.
      description: The value to set in a slot.
    SlotValueElicitationSetting:
      type: object
      properties:
        defaultValueSpecification:
          allOf:
          - $ref: '#/components/schemas/SlotDefaultValueSpecification'
          description: A list of default values for a slot. Default values are used
            when Amazon Lex hasn't determined a value for a slot. You can specify
            default values from context variables, session attributes, and defined
            values.
        slotConstraint:
          allOf:
          - $ref: '#/components/schemas/SlotConstraint'
          description: Specifies whether the slot is required or optional.
        promptSpecification:
          allOf:
          - $ref: '#/components/schemas/PromptSpecification'
          description: The prompt that Amazon Lex uses to elicit the slot value from
            the user.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          description: If you know a specific pattern that users might respond to
            an Amazon Lex request for a slot value, you can provide those utterances
            to improve accuracy. This is optional. In most cases, Amazon Lex is capable
            of understanding user utterances.
        waitAndContinueSpecification:
          $ref: '#/components/schemas/WaitAndContinueSpecification'
        slotCaptureSetting:
          allOf:
          - $ref: '#/components/schemas/SlotCaptureSetting'
          description: Specifies the settings that Amazon Lex uses when a slot value
            is successfully entered by a user.
        slotResolutionSetting:
          allOf:
          - $ref: '#/components/schemas/SlotResolutionSetting'
          description: An object containing information about whether assisted slot
            resolution is turned on for the slot or not.
      required:
      - slotConstraint
      description: Specifies the elicitation setting details eliciting a slot.
    SlotValueOverride:
      type: object
      properties:
        shape:
          allOf:
          - $ref: '#/components/schemas/SlotShape'
          description: When the shape value is `List`, it indicates that the `values`
            field contains a list of slot values. When the value is `Scalar`, it indicates
            that the `value` field contains a single value.
        value:
          allOf:
          - $ref: '#/components/schemas/SlotValue'
          description: The current value of the slot.
        values:
          allOf:
          - $ref: '#/components/schemas/SlotValues'
          description: A list of one or more values that the user provided for the
            slot. For example, for a slot that elicits pizza toppings, the values
            might be "pepperoni" and "pineapple."
      description: The slot values that Amazon Lex uses when it sets slot values in
        a dialog step.
    SlotValueOverrideMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SlotValueOverride'
    SlotValueRegexFilter:
      type: object
      properties:
        pattern:
          allOf:
          - $ref: '#/components/schemas/RegexPattern'
          description: "A regular expression used to validate the value of a slot.\n\
            \nUse a standard regular expression. Amazon Lex supports the following\
            \ characters in the regular expression:\n\n  * A-Z, a-z\n\n  * 0-9\n\n\
            \  * Unicode characters (\"\\⁠u\")\n\nRepresent Unicode characters with\
            \ four digits, for example \"\\⁠u0041\" or \"\\⁠u005A\".\n\nThe following\
            \ regular expression operators are not supported:\n\n  * Infinite repeaters:\
            \ *, +, or {x,} with no upper bound.\n\n  * Wild card (.)"
      required:
      - pattern
      description: Provides a regular expression used to validate the value of a slot.
    SlotValueResolutionStrategy:
      type: string
      enum:
      - OriginalValue
      - TopResolution
      - Concatenation
    SlotValueSelectionSetting:
      type: object
      properties:
        resolutionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueResolutionStrategy'
          description: "Determines the slot resolution strategy that Amazon Lex uses\
            \ to return slot type values. The field can be set to one of the following\
            \ values:\n\n  * `ORIGINAL_VALUE` \\- Returns the value entered by the\
            \ user, if the user value is similar to the slot value.\n\n  * `TOP_RESOLUTION`\
            \ \\- If there is a resolution list for the slot, return the first value\
            \ in the resolution list as the slot type value. If there is no resolution\
            \ list, null is returned.\n\nIf you don't specify the `valueSelectionStrategy`,\
            \ the default is `ORIGINAL_VALUE`."
        regexFilter:
          allOf:
          - $ref: '#/components/schemas/SlotValueRegexFilter'
          description: A regular expression used to validate the value of a slot.
        advancedRecognitionSetting:
          allOf:
          - $ref: '#/components/schemas/AdvancedRecognitionSetting'
          description: Provides settings that enable advanced recognition settings
            for slot values. You can use this to enable using slot values as a custom
            vocabulary for recognizing user utterances.
      required:
      - resolutionStrategy
      description: Contains settings used by Amazon Lex to select a slot value.
    SlotValues:
      type: array
      items:
        $ref: '#/components/schemas/SlotValueOverride'
    SortOrder:
      type: string
      enum:
      - Ascending
      - Descending
    Specifications:
      type: object
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The unique identifier assigned to the slot type.
        valueElicitationSetting:
          allOf:
          - $ref: '#/components/schemas/SubSlotValueElicitationSetting'
          description: Specifies the elicitation setting details for constituent sub
            slots of a composite slot.
      required:
      - slotTypeId
      - valueElicitationSetting
      description: Subslot specifications.
    StartBotRecommendationRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot containing the bot recommendation.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot containing the bot recommendation.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the bot recommendation
            to start. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
        transcriptSourceSetting:
          allOf:
          - $ref: '#/components/schemas/TranscriptSourceSetting'
          description: The object representing the Amazon S3 bucket containing the
            transcript, as well as the associated metadata.
        encryptionSetting:
          allOf:
          - $ref: '#/components/schemas/EncryptionSetting'
          description: The object representing the passwords that will be used to
            encrypt the data related to the bot recommendation results, as well as
            the KMS key ARN used to encrypt the associated metadata.
      required:
      - botId
      - botVersion
      - localeId
      - transcriptSourceSetting
    StartBotRecommendationResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot containing the bot recommendation.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot containing the bot recommendation.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the bot recommendation
            to start. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
        botRecommendationStatus:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationStatus'
          description: 'The status of the bot recommendation.


            If the status is Failed, then the reasons for the failure are listed in
            the failureReasons field.'
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot recommendation that you have created.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot recommendation
            was created.
        transcriptSourceSetting:
          allOf:
          - $ref: '#/components/schemas/TranscriptSourceSetting'
          description: The object representing the Amazon S3 bucket containing the
            transcript, as well as the associated metadata.
        encryptionSetting:
          allOf:
          - $ref: '#/components/schemas/EncryptionSetting'
          description: The object representing the passwords that were used to encrypt
            the data related to the bot recommendation results, as well as the KMS
            key ARN used to encrypt the associated metadata.
    StartBotResourceGenerationRequest:
      type: object
      properties:
        generationInputPrompt:
          allOf:
          - $ref: '#/components/schemas/GenerationInput'
          description: The prompt to generate intents and slot types for the bot locale.
            Your description should be both _detailed_ and _precise_ to help generate
            appropriate and sufficient intents for your bot. Include a list of actions
            to improve the intent creation process.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot for which to generate intents
            and slot types.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot for which to generate intents and slot
            types.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale of the bot for which to generate intents and slot
            types.
      required:
      - generationInputPrompt
      - botId
      - botVersion
      - localeId
    StartBotResourceGenerationResponse:
      type: object
      properties:
        generationInputPrompt:
          allOf:
          - $ref: '#/components/schemas/GenerationInput'
          description: The prompt that was used generate intents and slot types for
            the bot locale.
        generationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the generation request.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot for which the generation request
            was made.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot for which the generation request was
            made.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale of the bot for which the generation request was
            made.
        generationStatus:
          allOf:
          - $ref: '#/components/schemas/GenerationStatus'
          description: The status of the generation request.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time at which the generation request was made.
    StartImportRequest:
      type: object
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the import. It is included in the
            response from the [CreateUploadUrl](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html)
            operation.
        resourceSpecification:
          allOf:
          - $ref: '#/components/schemas/ImportResourceSpecification'
          description: Parameters for creating the bot, bot locale or custom vocabulary.
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          description: The strategy to use when there is a name conflict between the
            imported resource and an existing resource. When the merge strategy is
            `FailOnConflict` existing resources are not overwritten and the import
            fails.
        filePassword:
          allOf:
          - $ref: '#/components/schemas/ImportExportFilePassword'
          description: The password used to encrypt the zip archive that contains
            the resource definition. You should always encrypt the zip archive to
            protect it during transit between your site and Amazon Lex.
      required:
      - importId
      - resourceSpecification
      - mergeStrategy
    StartImportResponse:
      type: object
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: A unique identifier for the import.
        resourceSpecification:
          allOf:
          - $ref: '#/components/schemas/ImportResourceSpecification'
          description: The parameters used when importing the resource.
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          description: The strategy used when there was a name conflict between the
            imported resource and an existing resource. When the merge strategy is
            `FailOnConflict` existing resources are not overwritten and the import
            fails.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          description: The current status of the import. When the status is `Complete`
            the bot, bot alias, or custom vocabulary is ready to use.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the import request was created.
    StartTestExecutionRequest:
      type: object
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id for the test set execution.
        target:
          allOf:
          - $ref: '#/components/schemas/TestExecutionTarget'
          description: The target bot for the test set execution.
        apiMode:
          allOf:
          - $ref: '#/components/schemas/TestExecutionApiMode'
          description: Indicates whether we use streaming or non-streaming APIs for
            the test set execution. For streaming, StartConversation Runtime API is
            used. Whereas, for non-streaming, RecognizeUtterance and RecognizeText
            Amazon Lex Runtime API are used.
        testExecutionModality:
          allOf:
          - $ref: '#/components/schemas/TestExecutionModality'
          description: Indicates whether audio or text is used.
      required:
      - testSetId
      - target
      - apiMode
    StartTestExecutionResponse:
      type: object
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test set execution.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time for the test set execution.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id for the test set execution.
        target:
          allOf:
          - $ref: '#/components/schemas/TestExecutionTarget'
          description: The target bot for the test set execution.
        apiMode:
          allOf:
          - $ref: '#/components/schemas/TestExecutionApiMode'
          description: Indicates whether we use streaming or non-streaming APIs for
            the test set execution. For streaming, StartConversation Amazon Lex Runtime
            API is used. Whereas for non-streaming, RecognizeUtterance and RecognizeText
            Amazon Lex Runtime API are used.
        testExecutionModality:
          allOf:
          - $ref: '#/components/schemas/TestExecutionModality'
          description: Indicates whether audio or text is used.
    StartTestSetGenerationRequest:
      type: object
      properties:
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The test set name for the test set generation request.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The test set description for the test set generation request.
        storageLocation:
          allOf:
          - $ref: '#/components/schemas/TestSetStorageLocation'
          description: The Amazon S3 storage location for the test set generation.
        generationDataSource:
          allOf:
          - $ref: '#/components/schemas/TestSetGenerationDataSource'
          description: The data source for the test set generation.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The roleARN used for any operation in the test set to access
            resources in the Amazon Web Services account.
        testSetTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags to add to the test set. You can only add tags
            when you import/generate a new test set. You can't use the `UpdateTestSet`
            operation to update tags. To update tags, use the `TagResource` operation.
      required:
      - testSetName
      - storageLocation
      - generationDataSource
      - roleArn
    StartTestSetGenerationResponse:
      type: object
      properties:
        testSetGenerationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test set generation to describe.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time for the test set generation.
        testSetGenerationStatus:
          allOf:
          - $ref: '#/components/schemas/TestSetGenerationStatus'
          description: The status for the test set generation.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The test set name used for the test set generation.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description used for the test set generation.
        storageLocation:
          allOf:
          - $ref: '#/components/schemas/TestSetStorageLocation'
          description: The Amazon S3 storage location for the test set generation.
        generationDataSource:
          allOf:
          - $ref: '#/components/schemas/TestSetGenerationDataSource'
          description: The data source for the test set generation.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The roleARN used for any operation in the test set to access
            resources in the Amazon Web Services account.
        testSetTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags that was used for the test set that is being
            generated.
    StillWaitingResponseFrequency:
      type: integer
      minimum: 1
      maximum: 300
    StillWaitingResponseSpecification:
      type: object
      properties:
        messageGroups:
          allOf:
          - $ref: '#/components/schemas/MessageGroupsList'
          description: One or more message groups, each containing one or more messages,
            that define the prompts that Amazon Lex sends to the user.
        frequencyInSeconds:
          allOf:
          - $ref: '#/components/schemas/StillWaitingResponseFrequency'
          description: How often a message should be sent to the user. Minimum of
            1 second, maximum of 5 minutes.
        timeoutInSeconds:
          allOf:
          - $ref: '#/components/schemas/StillWaitingResponseTimeout'
          description: If Amazon Lex waits longer than this length of time for a response,
            it will stop sending messages.
        allowInterrupt:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Indicates that the user can interrupt the response by speaking
            while the message is being played.
      required:
      - messageGroups
      - frequencyInSeconds
      - timeoutInSeconds
      description: Defines the messages that Amazon Lex sends to a user to remind
        them that the bot is waiting for a response.
    StillWaitingResponseTimeout:
      type: integer
      minimum: 1
      maximum: 900
    StopBotRecommendationRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot containing the bot recommendation
            to be stopped.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot containing the bot recommendation.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the bot recommendation
            to stop. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot recommendation to be stopped.
      required:
      - botId
      - botVersion
      - localeId
      - botRecommendationId
    StopBotRecommendationResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot containing the bot recommendation
            that is being stopped.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot containing the recommendation that is
            being stopped.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the bot response
            to stop. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
        botRecommendationStatus:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationStatus'
          description: The status of the bot recommendation. If the status is Failed,
            then the reasons for the failure are listed in the failureReasons field.
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot recommendation that is being
            stopped.
    String:
      type: string
    StringMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    SubSlotExpression:
      type: string
      pattern: ^[0-9A-Za-z_\-\s\(\)]+$
      minLength: 0
      maxLength: 640
    SubSlotSetting:
      type: object
      properties:
        expression:
          allOf:
          - $ref: '#/components/schemas/SubSlotExpression'
          description: The expression text for defining the constituent sub slots
            in the composite slot using logical AND and OR operators.
        slotSpecifications:
          allOf:
          - $ref: '#/components/schemas/SubSlotSpecificationMap'
          description: Specifications for the constituent sub slots of a composite
            slot.
      description: Specifications for the constituent sub slots and the expression
        for the composite slot.
    SubSlotSpecificationMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Specifications'
    SubSlotTypeComposition:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: Name of a constituent sub slot inside a composite slot.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The unique identifier assigned to a slot type. This refers
            to either a built-in slot type or the unique slotTypeId of a custom slot
            type.
      required:
      - name
      - slotTypeId
      description: Subslot type composition.
    SubSlotTypeList:
      type: array
      items:
        $ref: '#/components/schemas/SubSlotTypeComposition'
    SubSlotValueElicitationSetting:
      type: object
      properties:
        defaultValueSpecification:
          $ref: '#/components/schemas/SlotDefaultValueSpecification'
        promptSpecification:
          $ref: '#/components/schemas/PromptSpecification'
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          description: If you know a specific pattern that users might respond to
            an Amazon Lex request for a sub slot value, you can provide those utterances
            to improve accuracy. This is optional. In most cases Amazon Lex is capable
            of understanding user utterances. This is similar to `SampleUtterances`
            for slots.
        waitAndContinueSpecification:
          $ref: '#/components/schemas/WaitAndContinueSpecification'
      required:
      - promptSpecification
      description: 'Subslot elicitation settings.


        `DefaultValueSpecification` is a list of default values for a constituent
        sub slot in a composite slot. Default values are used when Amazon Lex hasn''t
        determined a value for a slot. You can specify default values from context
        variables, session attributes, and defined values. This is similar to `DefaultValueSpecification`
        for slots.


        `PromptSpecification` is the prompt that Amazon Lex uses to elicit the sub
        slot value from the user. This is similar to `PromptSpecification` for slots.'
    SynonymList:
      type: array
      items:
        $ref: '#/components/schemas/SampleValue'
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceARN:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot, bot alias, or bot
            channel to tag.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tag keys to add to the resource. If a tag key already
            exists, the existing value is replaced with the new value.
      required:
      - resourceARN
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TestExecutionApiMode:
      type: string
      enum:
      - Streaming
      - NonStreaming
    TestExecutionModality:
      type: string
      enum:
      - Text
      - Audio
    TestExecutionResultFilterBy:
      type: object
      properties:
        resultTypeFilter:
          allOf:
          - $ref: '#/components/schemas/TestResultTypeFilter'
          description: Specifies which results to filter. See [Test result details">Test
            results details](https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html)
            for details about different types of results.
        conversationLevelTestResultsFilterBy:
          allOf:
          - $ref: '#/components/schemas/ConversationLevelTestResultsFilterBy'
          description: Contains information about the method for filtering Conversation
            level test results.
      required:
      - resultTypeFilter
      description: Contains information about the method by which to filter the results
        of the test execution.
    TestExecutionResultItems:
      type: object
      properties:
        overallTestResults:
          allOf:
          - $ref: '#/components/schemas/OverallTestResults'
          description: Overall results for the test execution, including the breakdown
            of conversations and single-input utterances.
        conversationLevelTestResults:
          allOf:
          - $ref: '#/components/schemas/ConversationLevelTestResults'
          description: Results related to conversations in the test set, including
            metrics about success and failure of conversations and intent and slot
            failures.
        intentClassificationTestResults:
          allOf:
          - $ref: '#/components/schemas/IntentClassificationTestResults'
          description: Intent recognition results aggregated by intent name. The aggregated
            results contain success and failure rates of intent recognition, speech
            transcriptions, and end-to-end conversations.
        intentLevelSlotResolutionTestResults:
          allOf:
          - $ref: '#/components/schemas/IntentLevelSlotResolutionTestResults'
          description: Slot resolution results aggregated by intent and slot name.
            The aggregated results contain success and failure rates of slot resolution,
            speech transcriptions, and end-to-end conversations
        utteranceLevelTestResults:
          allOf:
          - $ref: '#/components/schemas/UtteranceLevelTestResults'
          description: Results related to utterances in the test set.
      description: Contains the results of the test execution, grouped by type of
        results. See [Test result details">Test results details](https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html)
        for details about different types of results.
    TestExecutionSortAttribute:
      type: string
      enum:
      - TestSetName
      - CreationDateTime
    TestExecutionSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/TestExecutionSortAttribute'
          description: Specifies whether to sort the test set executions by the date
            and time at which the test sets were created.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies whether to sort in ascending or descending order.
      required:
      - attribute
      - order
      description: Contains information about the method by which to sort the instances
        of test executions you have carried out.
    TestExecutionStatus:
      type: string
      enum:
      - Pending
      - Waiting
      - InProgress
      - Completed
      - Failed
      - Stopping
      - Stopped
    TestExecutionSummary:
      type: object
      properties:
        testExecutionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test execution.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time at which the test execution was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time at which the test execution was last updated.
        testExecutionStatus:
          allOf:
          - $ref: '#/components/schemas/TestExecutionStatus'
          description: The current status of the test execution.
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test set used in the test execution.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the test set used in the test execution.
        target:
          allOf:
          - $ref: '#/components/schemas/TestExecutionTarget'
          description: Contains information about the bot used for the test execution..
        apiMode:
          allOf:
          - $ref: '#/components/schemas/TestExecutionApiMode'
          description: Specifies whether the API mode for the test execution is streaming
            or non-streaming.
        testExecutionModality:
          allOf:
          - $ref: '#/components/schemas/TestExecutionModality'
          description: Specifies whether the data used for the test execution is written
            or spoken.
      description: Summarizes metadata about the test execution.
    TestExecutionSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/TestExecutionSummary'
    TestExecutionTarget:
      type: object
      properties:
        botAliasTarget:
          allOf:
          - $ref: '#/components/schemas/BotAliasTestExecutionTarget'
          description: Contains information about the bot alias used for the test
            execution.
      description: Contains information about the bot used for the test execution.
    TestResultMatchStatus:
      type: string
      enum:
      - Matched
      - Mismatched
      - ExecutionError
    TestResultMatchStatusCountMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Count'
    TestResultSlotName:
      type: string
      pattern: ^([0-9a-zA-Z][_.-]?)+$
      minLength: 1
      maxLength: 100
    TestResultTypeFilter:
      type: string
      enum:
      - OverallTestResults
      - ConversationLevelTestResults
      - IntentClassificationTestResults
      - SlotResolutionTestResults
      - UtteranceLevelResults
    TestSetAgentPrompt:
      type: string
      minLength: 1
      maxLength: 1024
    TestSetConversationId:
      type: string
      pattern: ^([0-9a-zA-Z][_-]?)+$
      minLength: 1
      maxLength: 50
    TestSetDiscrepancyErrors:
      type: object
      properties:
        intentDiscrepancies:
          allOf:
          - $ref: '#/components/schemas/TestSetIntentDiscrepancyList'
          description: Contains information about discrepancies found for intents
            between the test set and the bot.
        slotDiscrepancies:
          allOf:
          - $ref: '#/components/schemas/TestSetSlotDiscrepancyList'
          description: Contains information about discrepancies found for slots between
            the test set and the bot.
      required:
      - intentDiscrepancies
      - slotDiscrepancies
      description: Contains details about the errors in the test set discrepancy report
    TestSetDiscrepancyReportBotAliasTarget:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the bot alias.
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The unique identifier for the bot associated with the bot alias.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The unique identifier of the locale associated with the bot
            alias.
      required:
      - botId
      - botAliasId
      - localeId
      description: Contains information about the bot alias used for the test set
        discrepancy report.
    TestSetDiscrepancyReportResourceTarget:
      type: object
      properties:
        botAliasTarget:
          allOf:
          - $ref: '#/components/schemas/TestSetDiscrepancyReportBotAliasTarget'
          description: Contains information about the bot alias used as the resource
            for the test set discrepancy report.
      description: Contains information about the resource used for the test set discrepancy
        report.
    TestSetDiscrepancyReportStatus:
      type: string
      enum:
      - InProgress
      - Completed
      - Failed
    TestSetExportSpecification:
      type: object
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test set.
      required:
      - testSetId
      description: Contains information about the test set that is exported.
    TestSetGenerationDataSource:
      type: object
      properties:
        conversationLogsDataSource:
          allOf:
          - $ref: '#/components/schemas/ConversationLogsDataSource'
          description: Contains information about the bot from which the conversation
            logs are sourced.
      description: Contains information about the data source from which the test
        set is generated.
    TestSetGenerationStatus:
      type: string
      enum:
      - Generating
      - Ready
      - Failed
      - Pending
    TestSetImportInputLocation:
      type: object
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The name of the Amazon S3 bucket.
        s3Path:
          allOf:
          - $ref: '#/components/schemas/S3ObjectPath'
          description: The path inside the Amazon S3 bucket pointing to the test-set
            CSV file.
      required:
      - s3BucketName
      - s3Path
      description: Contains information about the Amazon S3 location from which the
        test set is imported.
    TestSetImportResourceSpecification:
      type: object
      properties:
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the test set.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the test set.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permission
            to access the test set.
        storageLocation:
          allOf:
          - $ref: '#/components/schemas/TestSetStorageLocation'
          description: Contains information about the location that Amazon Lex uses
            to store the test-set.
        importInputLocation:
          allOf:
          - $ref: '#/components/schemas/TestSetImportInputLocation'
          description: Contains information about the input location from where test-set
            should be imported.
        modality:
          allOf:
          - $ref: '#/components/schemas/TestSetModality'
          description: Specifies whether the test-set being imported contains written
            or spoken data.
        testSetTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags to add to the test set. You can only add tags
            when you import/generate a new test set. You can't use the `UpdateTestSet`
            operation to update tags. To update tags, use the `TagResource` operation.
      required:
      - testSetName
      - roleArn
      - storageLocation
      - importInputLocation
      - modality
      description: Contains information about the test set that is imported.
    TestSetIntentDiscrepancyItem:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the intent in the discrepancy report.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message for a discrepancy for an intent between the
            test set and the bot.
      required:
      - intentName
      - errorMessage
      description: Contains information about discrepancy in an intent information
        between the test set and the bot.
    TestSetIntentDiscrepancyList:
      type: array
      items:
        $ref: '#/components/schemas/TestSetIntentDiscrepancyItem'
    TestSetModality:
      type: string
      enum:
      - Text
      - Audio
    TestSetSlotDiscrepancyItem:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the intent associated with the slot in the discrepancy
            report.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the slot in the discrepancy report.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message for a discrepancy for an intent between the
            test set and the bot.
      required:
      - intentName
      - slotName
      - errorMessage
      description: Contains information about discrepancy in a slot information between
        the test set and the bot.
    TestSetSlotDiscrepancyList:
      type: array
      items:
        $ref: '#/components/schemas/TestSetSlotDiscrepancyItem'
    TestSetSortAttribute:
      type: string
      enum:
      - TestSetName
      - LastUpdatedDateTime
    TestSetSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/TestSetSortAttribute'
          description: Specifies whether to sort the test sets by name or by the time
            they were last updated.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies whether to sort in ascending or descending order.
      required:
      - attribute
      - order
      description: Contains information about the methods by which to sort the test
        set.
    TestSetStatus:
      type: string
      enum:
      - Importing
      - PendingAnnotation
      - Deleting
      - ValidationError
      - Ready
    TestSetStorageLocation:
      type: object
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The name of the Amazon S3 bucket in which the test set is stored.
        s3Path:
          allOf:
          - $ref: '#/components/schemas/S3ObjectPath'
          description: The path inside the Amazon S3 bucket where the test set is
            stored.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of an Amazon Web Services Key
            Management Service (KMS) key for encrypting the test set.
      required:
      - s3BucketName
      - s3Path
      description: Contains information about the location in which the test set is
        stored.
    TestSetSummary:
      type: object
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the test set.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the test set.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the test set.
        modality:
          allOf:
          - $ref: '#/components/schemas/TestSetModality'
          description: Specifies whether the test set contains written or spoken data.
        status:
          allOf:
          - $ref: '#/components/schemas/TestSetStatus'
          description: The status of the test set.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permission
            to access the test set.
        numTurns:
          allOf:
          - $ref: '#/components/schemas/Count'
          description: The number of turns in the test set.
        storageLocation:
          allOf:
          - $ref: '#/components/schemas/TestSetStorageLocation'
          description: Contains information about the location at which the test set
            is stored.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time at which the test set was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time at which the test set was last updated.
      description: Contains summary information about the test set.
    TestSetSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/TestSetSummary'
    TestSetTurnRecord:
      type: object
      properties:
        recordNumber:
          allOf:
          - $ref: '#/components/schemas/RecordNumber'
          description: The record number associated with the turn.
        conversationId:
          allOf:
          - $ref: '#/components/schemas/TestSetConversationId'
          description: The unique identifier for the conversation associated with
            the turn.
        turnNumber:
          allOf:
          - $ref: '#/components/schemas/TurnNumber'
          description: The number of turns that has elapsed up to that turn.
        turnSpecification:
          allOf:
          - $ref: '#/components/schemas/TurnSpecification'
          description: Contains information about the agent or user turn depending
            upon type of turn.
      required:
      - recordNumber
      - turnSpecification
      description: Contains information about a turn in a test set.
    TestSetTurnRecordList:
      type: array
      items:
        $ref: '#/components/schemas/TestSetTurnRecord'
    TestSetTurnResult:
      type: object
      properties:
        agent:
          allOf:
          - $ref: '#/components/schemas/AgentTurnResult'
          description: Contains information about the agent messages in the turn.
        user:
          allOf:
          - $ref: '#/components/schemas/UserTurnResult'
          description: Contains information about the user messages in the turn.
      description: Contains information about the results of the analysis of a turn
        in the test set.
    TestSetUtteranceText:
      type: string
      minLength: 1
      maxLength: 1024
    TextInputSpecification:
      type: object
      properties:
        startTimeoutMs:
          allOf:
          - $ref: '#/components/schemas/TimeInMilliSeconds'
          description: Time for which a bot waits before re-prompting a customer for
            text input.
      required:
      - startTimeoutMs
      description: Specifies the text input specifications.
    TextLogDestination:
      type: object
      properties:
        cloudWatch:
          allOf:
          - $ref: '#/components/schemas/CloudWatchLogGroupLogDestination'
          description: Defines the Amazon CloudWatch Logs log group where text and
            metadata logs are delivered.
      required:
      - cloudWatch
      description: Defines the Amazon CloudWatch Logs destination log group for conversation
        text logs.
    TextLogSetting:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Determines whether conversation logs should be stored for an
            alias.
        destination:
          $ref: '#/components/schemas/TextLogDestination'
        selectiveLoggingEnabled:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: The option to enable selective conversation log capture for
            text.
      required:
      - enabled
      - destination
      description: Defines settings to enable text conversation logs.
    TextLogSettingsList:
      type: array
      items:
        $ref: '#/components/schemas/TextLogSetting'
    ThrottlingException:
      type: object
      properties:
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/RetryAfterSeconds'
          description: The number of seconds after which the user can invoke the API
            again.
        message:
          $ref: '#/components/schemas/ExceptionMessage'
      description: Your request rate is too high. Reduce the frequency of requests.
    TimeDimension:
      type: string
      enum:
      - Hours
      - Days
      - Weeks
    TimeInMilliSeconds:
      type: integer
      minimum: 1
    TimeValue:
      type: integer
      minimum: 1
      maximum: 24
    Timestamp:
      type: string
      format: date-time
    Transcript:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 6000000
    TranscriptFilter:
      type: object
      properties:
        lexTranscriptFilter:
          allOf:
          - $ref: '#/components/schemas/LexTranscriptFilter'
          description: The object representing the filter that Amazon Lex will use
            to select the appropriate transcript when the transcript format is the
            Amazon Lex format.
      description: The object representing the filter that Amazon Lex will use to
        select the appropriate transcript.
    TranscriptFormat:
      type: string
      enum:
      - Lex
    TranscriptSourceSetting:
      type: object
      properties:
        s3BucketTranscriptSource:
          allOf:
          - $ref: '#/components/schemas/S3BucketTranscriptSource'
          description: Indicates the setting of the Amazon S3 bucket where the transcript
            is stored.
      description: Indicates the setting of the location where the transcript is stored.
    TurnNumber:
      type: integer
      minimum: 0
      maximum: 30
    TurnSpecification:
      type: object
      properties:
        agentTurn:
          allOf:
          - $ref: '#/components/schemas/AgentTurnSpecification'
          description: Contains information about the agent messages in the turn.
        userTurn:
          allOf:
          - $ref: '#/components/schemas/UserTurnSpecification'
          description: Contains information about the user messages in the turn.
      description: Contains information about the messages in the turn.
    UntagResourceRequest:
      type: object
      properties:
        resourceARN:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the resource to remove the
            tags from.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of tag keys to remove from the resource. If a tag key
            does not exist on the resource, it is ignored.
      required:
      - resourceARN
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateBotAliasRequest:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The unique identifier of the bot alias.
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The new name to assign to the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The new description to assign to the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The new bot version to assign to the bot alias.
        botAliasLocaleSettings:
          allOf:
          - $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          description: The new Lambda functions to use in each locale for the bot
            alias.
        conversationLogSettings:
          allOf:
          - $ref: '#/components/schemas/ConversationLogSettings'
          description: The new settings for storing conversation logs in Amazon CloudWatch
            Logs and Amazon S3 buckets.
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot with the updated alias.
      required:
      - botAliasId
      - botAliasName
      - botId
    UpdateBotAliasResponse:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The identifier of the updated bot alias.
        botAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The updated name of the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The updated description of the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The updated version of the bot that the alias points to.
        botAliasLocaleSettings:
          allOf:
          - $ref: '#/components/schemas/BotAliasLocaleSettingsMap'
          description: The updated Lambda functions to use in each locale for the
            bot alias.
        conversationLogSettings:
          allOf:
          - $ref: '#/components/schemas/ConversationLogSettings'
          description: The updated settings for storing conversation logs in Amazon
            CloudWatch Logs and Amazon S3 buckets.
        sentimentAnalysisSettings:
          $ref: '#/components/schemas/SentimentAnalysisSettings'
        botAliasStatus:
          allOf:
          - $ref: '#/components/schemas/BotAliasStatus'
          description: The current status of the bot alias. When the status is `Available`
            the alias is ready for use.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot with the updated alias.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was last updated.
    UpdateBotLocaleRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the locale.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the locale to be updated.
            The version can only be the `DRAFT` version.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale to update. The string
            must match one of the supported locales. For more information, see [Supported
            languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The new description of the locale.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          description: The new confidence threshold where Amazon Lex inserts the `AMAZON.FallbackIntent`
            and `AMAZON.KendraSearchIntent` intents in the list of possible intents
            for an utterance.
        voiceSettings:
          allOf:
          - $ref: '#/components/schemas/VoiceSettings'
          description: The new Amazon Polly voice Amazon Lex should use for voice
            interaction with the user.
        generativeAISettings:
          allOf:
          - $ref: '#/components/schemas/GenerativeAISettings'
          description: Contains settings for generative AI features powered by Amazon
            Bedrock for your bot locale. Use this object to turn generative AI features
            on and off. Pricing may differ if you turn a feature on. For more information,
            see LINK.
      required:
      - botId
      - botVersion
      - localeId
      - nluIntentConfidenceThreshold
    UpdateBotLocaleResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the updated locale.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the updated locale.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the updated bot locale.
        localeName:
          allOf:
          - $ref: '#/components/schemas/LocaleName'
          description: The updated locale name for the locale.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The updated description of the locale.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          description: The updated confidence threshold for inserting the `AMAZON.FallbackIntent`
            and `AMAZON.KendraSearchIntent` intents in the list of possible intents
            for an utterance.
        voiceSettings:
          allOf:
          - $ref: '#/components/schemas/VoiceSettings'
          description: The updated Amazon Polly voice to use for voice interaction
            with the user.
        botLocaleStatus:
          allOf:
          - $ref: '#/components/schemas/BotLocaleStatus'
          description: The current status of the locale. When the bot status is `Built`
            the locale is ready for use.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: If the `botLocaleStatus` is `Failed`, the `failureReasons`
            field lists the errors that occurred while building the bot.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the locale was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the locale was last updated.
        recommendedActions:
          allOf:
          - $ref: '#/components/schemas/RecommendedActions'
          description: Recommended actions to take to resolve an error in the `failureReasons`
            field.
        generativeAISettings:
          allOf:
          - $ref: '#/components/schemas/GenerativeAISettings'
          description: Contains settings for generative AI features powered by Amazon
            Bedrock for your bot locale.
    UpdateBotRecommendationRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot containing the bot recommendation
            to be updated.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot containing the bot recommendation to
            be updated.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the bot recommendation
            to update. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot recommendation to be updated.
        encryptionSetting:
          allOf:
          - $ref: '#/components/schemas/EncryptionSetting'
          description: The object representing the passwords that will be used to
            encrypt the data related to the bot recommendation results, as well as
            the KMS key ARN used to encrypt the associated metadata.
      required:
      - botId
      - botVersion
      - localeId
      - botRecommendationId
      - encryptionSetting
    UpdateBotRecommendationResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot containing the bot recommendation
            that has been updated.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot containing the bot recommendation that
            has been updated.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale of the bot recommendation
            to update. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html)
        botRecommendationStatus:
          allOf:
          - $ref: '#/components/schemas/BotRecommendationStatus'
          description: 'The status of the bot recommendation.


            If the status is Failed, then the reasons for the failure are listed in
            the failureReasons field.'
        botRecommendationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot recommendation to be updated.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot recommendation
            was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot recommendation
            was last updated.
        transcriptSourceSetting:
          allOf:
          - $ref: '#/components/schemas/TranscriptSourceSetting'
          description: The object representing the Amazon S3 bucket containing the
            transcript, as well as the associated metadata.
        encryptionSetting:
          allOf:
          - $ref: '#/components/schemas/EncryptionSetting'
          description: The object representing the passwords that were used to encrypt
            the data related to the bot recommendation results, as well as the KMS
            key ARN used to encrypt the associated metadata.
    UpdateBotRequest:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot to update. This identifier
            is returned by the [CreateBot](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateBot.html)
            operation.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The new name of the bot. The name must be unique in the account
            that creates the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the bot.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permissions
            to access the bot.
        dataPrivacy:
          allOf:
          - $ref: '#/components/schemas/DataPrivacy'
          description: Provides information on additional privacy protections Amazon
            Lex should use with the bot's data.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: 'The time, in seconds, that Amazon Lex should keep information
            about a user''s conversation with the bot.


            A user interaction remains active for the amount of time specified. If
            no conversation occurs during this time, the session expires and Amazon
            Lex deletes any data provided before the timeout.


            You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.'
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          description: The type of the bot to be updated.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          description: The list of bot members in the network associated with the
            update action.
        errorLogSettings:
          allOf:
          - $ref: '#/components/schemas/ErrorLogSettings'
          description: Allows you to modify how Amazon Lex logs errors during bot
            interactions, including destinations for error logs and the types of errors
            to be captured.
      required:
      - botId
      - botName
      - roleArn
      - dataPrivacy
      - idleSessionTTLInSeconds
    UpdateBotResponse:
      type: object
      properties:
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that was updated.
        botName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the bot after the update.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the bot after the update.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role used by the
            bot after the update.
        dataPrivacy:
          allOf:
          - $ref: '#/components/schemas/DataPrivacy'
          description: The data privacy settings for the bot after the update.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: The session timeout, in seconds, for the bot after the update.
        botStatus:
          allOf:
          - $ref: '#/components/schemas/BotStatus'
          description: Shows the current status of the bot. The bot is first in the
            `Creating` status. Once the bot is read for use, it changes to the `Available`
            status. After the bot is created, you can use the `DRAFT` version of the
            bot.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the bot was last updated.
        botType:
          allOf:
          - $ref: '#/components/schemas/BotType'
          description: The type of the bot that was updated.
        botMembers:
          allOf:
          - $ref: '#/components/schemas/BotMembers'
          description: The list of bot members in the network that was updated.
        errorLogSettings:
          allOf:
          - $ref: '#/components/schemas/ErrorLogSettings'
          description: Settings for managing error logs within the response of an
            update bot operation.
    UpdateCustomVocabularyItemsList:
      type: array
      items:
        $ref: '#/components/schemas/CustomVocabularyItem'
    UpdateExportRequest:
      type: object
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier Amazon Lex assigned to the export.
        filePassword:
          allOf:
          - $ref: '#/components/schemas/ImportExportFilePassword'
          description: The new password to use to encrypt the export zip archive.
      required:
      - exportId
    UpdateExportResponse:
      type: object
      properties:
        exportId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier Amazon Lex assigned to the export.
        resourceSpecification:
          allOf:
          - $ref: '#/components/schemas/ExportResourceSpecification'
          description: A description of the type of resource that was exported, either
            a bot or a bot locale.
        fileFormat:
          allOf:
          - $ref: '#/components/schemas/ImportExportFileFormat'
          description: The file format used for the files that define the resource.
            The `TSV` format is required to export a custom vocabulary only; otherwise
            use `LexJson` format.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          description: The status of the export. When the status is `Completed` the
            export archive is available for download.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the export was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the export was last updated.
    UpdateIntentRequest:
      type: object
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the intent to update.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The new name for the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The new description of the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          description: The signature of the new built-in intent to use as the parent
            of this intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          description: New utterances used to invoke the intent.
        dialogCodeHook:
          allOf:
          - $ref: '#/components/schemas/DialogCodeHookSettings'
          description: The new Lambda function to use between each turn of the conversation
            with the bot.
        fulfillmentCodeHook:
          allOf:
          - $ref: '#/components/schemas/FulfillmentCodeHookSettings'
          description: The new Lambda function to call when all of the intents required
            slots are provided and the intent is ready for fulfillment.
        slotPriorities:
          allOf:
          - $ref: '#/components/schemas/SlotPrioritiesList'
          description: A new list of slots and their priorities that are contained
            by the intent.
        intentConfirmationSetting:
          allOf:
          - $ref: '#/components/schemas/IntentConfirmationSetting'
          description: New prompts that Amazon Lex sends to the user to confirm the
            completion of an intent.
        intentClosingSetting:
          allOf:
          - $ref: '#/components/schemas/IntentClosingSetting'
          description: The new response that Amazon Lex sends the user when the intent
            is closed.
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          description: A new list of contexts that must be active in order for Amazon
            Lex to consider the intent.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          description: A new list of contexts that Amazon Lex activates when the intent
            is fulfilled.
        kendraConfiguration:
          allOf:
          - $ref: '#/components/schemas/KendraConfiguration'
          description: New configuration settings for connecting to an Amazon Kendra
            index.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the intent. Must be `DRAFT`.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale where this intent
            is used. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        initialResponseSetting:
          allOf:
          - $ref: '#/components/schemas/InitialResponseSetting'
          description: Configuration settings for a response sent to the user before
            Amazon Lex starts eliciting slots.
        qnAIntentConfiguration:
          allOf:
          - $ref: '#/components/schemas/QnAIntentConfiguration'
          description: Specifies the configuration of the built-in `Amazon.QnAIntent`.
            The `AMAZON.QnAIntent` intent is called when Amazon Lex can't determine
            another intent to invoke. If you specify this field, you can't specify
            the `kendraConfiguration` field.
        qInConnectIntentConfiguration:
          allOf:
          - $ref: '#/components/schemas/QInConnectIntentConfiguration'
          description: Qinconnect intent configuration details for the update intent
            request.
      required:
      - intentId
      - intentName
      - botId
      - botVersion
      - localeId
    UpdateIntentResponse:
      type: object
      properties:
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the intent that was updated.
        intentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The updated name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The updated description of the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/IntentSignature'
          description: The updated built-in intent that is the parent of this intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SampleUtterancesList'
          description: The updated list of sample utterances for the intent.
        dialogCodeHook:
          allOf:
          - $ref: '#/components/schemas/DialogCodeHookSettings'
          description: The updated Lambda function called during each turn of the
            conversation with the user.
        fulfillmentCodeHook:
          allOf:
          - $ref: '#/components/schemas/FulfillmentCodeHookSettings'
          description: The updated Lambda function called when the intent is ready
            for fulfillment.
        slotPriorities:
          allOf:
          - $ref: '#/components/schemas/SlotPrioritiesList'
          description: The updated list of slots and their priorities that are elicited
            from the user for the intent.
        intentConfirmationSetting:
          allOf:
          - $ref: '#/components/schemas/IntentConfirmationSetting'
          description: The updated prompts that Amazon Lex sends to the user to confirm
            the completion of an intent.
        intentClosingSetting:
          allOf:
          - $ref: '#/components/schemas/IntentClosingSetting'
          description: The updated response that Amazon Lex sends the user when the
            intent is closed.
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextsList'
          description: The updated list of contexts that must be active for the intent
            to be considered by Amazon Lex.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextsList'
          description: The updated list of contexts that Amazon Lex activates when
            the intent is fulfilled.
        kendraConfiguration:
          allOf:
          - $ref: '#/components/schemas/KendraConfiguration'
          description: The updated configuration for connecting to an Amazon Kendra
            index with the `AMAZON.KendraSearchIntent` intent.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the intent.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the intent. Will always
            be `DRAFT`.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The updated language and locale of the intent.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of when the intent was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the last time that the intent was modified.
        initialResponseSetting:
          allOf:
          - $ref: '#/components/schemas/InitialResponseSetting'
          description: Configuration settings for a response sent to the user before
            Amazon Lex starts eliciting slots.
        qnAIntentConfiguration:
          allOf:
          - $ref: '#/components/schemas/QnAIntentConfiguration'
          description: Details about the configuration of the built-in `Amazon.QnAIntent`.
        qInConnectIntentConfiguration:
          allOf:
          - $ref: '#/components/schemas/QInConnectIntentConfiguration'
          description: Qinconnect intent configuration details for the update intent
            response.
    UpdateResourcePolicyRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy is attached to.
        policy:
          allOf:
          - $ref: '#/components/schemas/Policy'
          description: 'A resource policy to add to the resource. The policy is a
            JSON structure that contains one or more statements that define the policy.
            The policy must follow the IAM syntax. For more information about the
            contents of a JSON policy document, see [ IAM JSON policy reference ](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html).


            If the policy isn''t valid, Amazon Lex returns a validation exception.'
        expectedRevisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          description: 'The identifier of the revision of the policy to update. If
            this revision ID doesn''t match the current revision ID, Amazon Lex throws
            an exception.


            If you don''t specify a revision, Amazon Lex overwrites the contents of
            the policy with the new values.'
      required:
      - resourceArn
      - policy
    UpdateResourcePolicyResponse:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot or bot alias that
            the resource policy is attached to.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/RevisionId'
          description: The current revision of the resource policy. Use the revision
            ID to make sure that you are updating the most current version of a resource
            policy when you add a policy statement to a resource, delete a resource,
            or update a resource.
    UpdateSlotRequest:
      type: object
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier for the slot to update.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The new name for the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The new description for the slot.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The unique identifier of the new slot type to associate with
            this slot.
        valueElicitationSetting:
          allOf:
          - $ref: '#/components/schemas/SlotValueElicitationSetting'
          description: A new set of prompts that Amazon Lex sends to the user to elicit
            a response the provides a value for the slot.
        obfuscationSetting:
          allOf:
          - $ref: '#/components/schemas/ObfuscationSetting'
          description: New settings that determine how slot values are formatted in
            Amazon CloudWatch logs.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the bot that contains the slot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the slot. Must always
            be `DRAFT`.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that contains the
            slot. The string must match one of the supported locales. For more information,
            see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the intent that contains the slot.
        multipleValuesSetting:
          allOf:
          - $ref: '#/components/schemas/MultipleValuesSetting'
          description: 'Determines whether the slot accepts multiple values in one
            response. Multiple value slots are only available in the en-US locale.
            If you set this value to `true` in any other locale, Amazon Lex throws
            a `ValidationException`.


            If the `multipleValuesSetting` is not set, the default value is `false`.'
        subSlotSetting:
          allOf:
          - $ref: '#/components/schemas/SubSlotSetting'
          description: Specifications for the constituent sub slots and the expression
            for the composite slot.
      required:
      - slotId
      - slotName
      - valueElicitationSetting
      - botId
      - botVersion
      - localeId
      - intentId
    UpdateSlotResponse:
      type: object
      properties:
        slotId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the slot that was updated.
        slotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The updated name of the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The updated description of the bot.
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/BuiltInOrCustomSlotTypeId'
          description: The updated identifier of the slot type that provides values
            for the slot.
        valueElicitationSetting:
          allOf:
          - $ref: '#/components/schemas/SlotValueElicitationSetting'
          description: The updated prompts that Amazon Lex sends to the user to elicit
            a response that provides a value for the slot.
        obfuscationSetting:
          allOf:
          - $ref: '#/components/schemas/ObfuscationSetting'
          description: The updated setting that determines whether the slot value
            is obfuscated in the Amazon CloudWatch logs.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the slot.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the slot. Will always
            be `DRAFT`.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale that contains the slot.
        intentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The intent that contains the slot.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the date and time that the slot was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the date and time that the slot was last updated.
        multipleValuesSetting:
          allOf:
          - $ref: '#/components/schemas/MultipleValuesSetting'
          description: Indicates whether the slot accepts multiple values in one response.
        subSlotSetting:
          allOf:
          - $ref: '#/components/schemas/SubSlotSetting'
          description: Specifications for the constituent sub slots and the expression
            for the composite slot.
    UpdateSlotTypeRequest:
      type: object
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the slot type to update.
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The new name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The new description of the slot type.
        slotTypeValues:
          allOf:
          - $ref: '#/components/schemas/SlotTypeValues'
          description: A new list of values and their optional synonyms that define
            the values that the slot type can take.
        valueSelectionSetting:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionSetting'
          description: The strategy that Amazon Lex should use when deciding on a
            value from the list of slot type values.
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          description: The new built-in slot type that should be used as the parent
            of this slot type.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the slot type.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the slot type. Must be
            `DRAFT`.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The identifier of the language and locale that contains the
            slot type. The string must match one of the supported locales. For more
            information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
        externalSourceSetting:
          $ref: '#/components/schemas/ExternalSourceSetting'
        compositeSlotTypeSetting:
          allOf:
          - $ref: '#/components/schemas/CompositeSlotTypeSetting'
          description: Specifications for a composite slot type.
      required:
      - slotTypeId
      - slotTypeName
      - botId
      - botVersion
      - localeId
    UpdateSlotTypeResponse:
      type: object
      properties:
        slotTypeId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the updated slot type.
        slotTypeName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The updated name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The updated description of the slot type.
        slotTypeValues:
          allOf:
          - $ref: '#/components/schemas/SlotTypeValues'
          description: The updated values that the slot type provides.
        valueSelectionSetting:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionSetting'
          description: The updated strategy that Amazon Lex uses to determine which
            value to select from the slot type.
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/SlotTypeSignature'
          description: The updated signature of the built-in slot type that is the
            parent of this slot type.
        botId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the bot that contains the slot type.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/DraftBotVersion'
          description: The version of the bot that contains the slot type. This is
            always `DRAFT`.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The language and locale of the updated slot type.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the date and time that the slot type was created.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of the date and time that the slot type was last
            updated.
        externalSourceSetting:
          $ref: '#/components/schemas/ExternalSourceSetting'
        compositeSlotTypeSetting:
          allOf:
          - $ref: '#/components/schemas/CompositeSlotTypeSetting'
          description: Specifications for a composite slot type.
    UpdateTestSetRequest:
      type: object
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id for which update test operation to be performed.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The new test set name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The new test set description.
      required:
      - testSetId
      - testSetName
    UpdateTestSetResponse:
      type: object
      properties:
        testSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The test set Id for which update test operation to be performed.
        testSetName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The test set name for the updated test set.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The test set description for the updated test set.
        modality:
          allOf:
          - $ref: '#/components/schemas/TestSetModality'
          description: Indicates whether audio or text is used for the updated test
            set.
        status:
          allOf:
          - $ref: '#/components/schemas/TestSetStatus'
          description: The status for the updated test set.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The roleARN used for any operation in the test set to access
            resources in the Amazon Web Services account.
        numTurns:
          allOf:
          - $ref: '#/components/schemas/Count'
          description: The number of conversation turns from the updated test set.
        storageLocation:
          allOf:
          - $ref: '#/components/schemas/TestSetStorageLocation'
          description: The Amazon S3 storage location for the updated test set.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time for the updated test set.
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time of the last update for the updated test set.
    UserTurnInputSpecification:
      type: object
      properties:
        utteranceInput:
          allOf:
          - $ref: '#/components/schemas/UtteranceInputSpecification'
          description: The utterance input in the user turn.
        requestAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: Request attributes of the user turn.
        sessionState:
          allOf:
          - $ref: '#/components/schemas/InputSessionStateSpecification'
          description: Contains information about the session state in the input.
      required:
      - utteranceInput
      description: Contains information about the user messages in the turn in the
        input.
    UserTurnIntentOutput:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/UserTurnSlotOutputMap'
          description: The slots associated with the intent.
      required:
      - name
      description: Contains information about the intent that is output for the turn
        by the test execution.
    UserTurnOutputSpecification:
      type: object
      properties:
        intent:
          allOf:
          - $ref: '#/components/schemas/UserTurnIntentOutput'
          description: Contains information about the intent.
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextList'
          description: The contexts that are active in the turn.
        transcript:
          allOf:
          - $ref: '#/components/schemas/TestSetUtteranceText'
          description: The transcript that is output for the user turn by the test
            execution.
      required:
      - intent
      description: Contains results that are output for the user turn by the test
        execution.
    UserTurnResult:
      type: object
      properties:
        input:
          allOf:
          - $ref: '#/components/schemas/UserTurnInputSpecification'
          description: Contains information about the user messages in the turn in
            the input.
        expectedOutput:
          allOf:
          - $ref: '#/components/schemas/UserTurnOutputSpecification'
          description: Contains information about the expected output for the user
            turn.
        actualOutput:
          allOf:
          - $ref: '#/components/schemas/UserTurnOutputSpecification'
          description: Contains information about the actual output for the user turn.
        errorDetails:
          $ref: '#/components/schemas/ExecutionErrorDetails'
        endToEndResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: Specifies whether the expected and actual outputs match or
            not, or if there is an error in execution.
        intentMatchResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: Specifies whether the expected and actual intents match or
            not.
        slotMatchResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: Specifies whether the expected and actual slots match or not.
        speechTranscriptionResult:
          allOf:
          - $ref: '#/components/schemas/TestResultMatchStatus'
          description: Specifies whether the expected and actual speech transcriptions
            match or not, or if there is an error in execution.
        conversationLevelResult:
          allOf:
          - $ref: '#/components/schemas/ConversationLevelResultDetail'
          description: Contains information about the results related to the conversation
            associated with the user turn.
      required:
      - input
      - expectedOutput
      description: Contains the results for the user turn by the test execution.
    UserTurnSlotOutput:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The value output by the slot recognition.
        values:
          allOf:
          - $ref: '#/components/schemas/UserTurnSlotOutputList'
          description: Values that are output by the slot recognition.
        subSlots:
          allOf:
          - $ref: '#/components/schemas/UserTurnSlotOutputMap'
          description: A list of items mapping the name of the subslots to information
            about those subslots.
      description: Contains information about a slot output by the test set execution.
    UserTurnSlotOutputList:
      type: array
      items:
        $ref: '#/components/schemas/UserTurnSlotOutput'
    UserTurnSlotOutputMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/UserTurnSlotOutput'
    UserTurnSpecification:
      type: object
      properties:
        input:
          allOf:
          - $ref: '#/components/schemas/UserTurnInputSpecification'
          description: Contains information about the user messages in the turn in
            the input.
        expected:
          allOf:
          - $ref: '#/components/schemas/UserTurnOutputSpecification'
          description: Contains results about the expected output for the user turn.
      required:
      - input
      - expected
      description: Contains information about the expected and input values for the
        user turn.
    Utterance:
      type: string
    UtteranceAggregationDuration:
      type: object
      properties:
        relativeAggregationDuration:
          allOf:
          - $ref: '#/components/schemas/RelativeAggregationDuration'
          description: The desired time window for aggregating utterances.
      required:
      - relativeAggregationDuration
      description: Provides parameters for setting the time window and duration for
        aggregating utterance data.
    UtteranceAudioInputSpecification:
      type: object
      properties:
        audioFileS3Location:
          allOf:
          - $ref: '#/components/schemas/AudioFileS3Location'
          description: Amazon S3 file pointing to the audio.
      required:
      - audioFileS3Location
      description: Contains information about the audio for an utterance.
    UtteranceBotResponse:
      type: object
      properties:
        content:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The text of the response to the utterance from the bot.
        contentType:
          allOf:
          - $ref: '#/components/schemas/UtteranceContentType'
          description: "The type of the response. The following values are possible:\n\
            \n  * `PlainText` – A plain text string.\n\n  * `CustomPayload` – A response\
            \ string that you can customize to include data or metadata for your application.\n\
            \n  * `SSML` – A string that includes Speech Synthesis Markup Language\
            \ to customize the audio response.\n\n  * `ImageResponseCard` – An image\
            \ with buttons that the customer can select. See [ImageResponseCard](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_ImageResponseCard.html)\
            \ for more information."
        imageResponseCard:
          $ref: '#/components/schemas/ImageResponseCard'
      description: An object that contains a response to the utterance from the bot.
    UtteranceBotResponses:
      type: array
      items:
        $ref: '#/components/schemas/UtteranceBotResponse'
    UtteranceContentType:
      type: string
      enum:
      - PlainText
      - CustomPayload
      - SSML
      - ImageResponseCard
    UtteranceDataSortBy:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AnalyticsUtteranceSortByName'
          description: "The measure by which to sort the utterance analytics data.\n\
            \n  * `Count` – The number of utterances.\n\n  * `UtteranceTimestamp`\
            \ – The date and time of the utterance."
        order:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSortOrder'
          description: Specifies whether to sort the results in ascending or descending
            order.
      required:
      - name
      - order
      description: An object specifying the measure and method by which to sort the
        utterance data.
    UtteranceInputSpecification:
      type: object
      properties:
        textInput:
          allOf:
          - $ref: '#/components/schemas/TestSetUtteranceText'
          description: A text input transcription of the utterance. It is only applicable
            for test-sets containing text data.
        audioInput:
          allOf:
          - $ref: '#/components/schemas/UtteranceAudioInputSpecification'
          description: Contains information about the audio input for an utterance.
      description: Contains information about input of an utterance.
    UtteranceLevelTestResultItem:
      type: object
      properties:
        recordNumber:
          allOf:
          - $ref: '#/components/schemas/RecordNumber'
          description: The record number of the result.
        conversationId:
          allOf:
          - $ref: '#/components/schemas/TestSetConversationId'
          description: The unique identifier for the conversation associated with
            the result.
        turnResult:
          allOf:
          - $ref: '#/components/schemas/TestSetTurnResult'
          description: Contains information about the turn associated with the result.
      required:
      - recordNumber
      - turnResult
      description: Contains information about multiple utterances in the results of
        a test set execution.
    UtteranceLevelTestResultItemList:
      type: array
      items:
        $ref: '#/components/schemas/UtteranceLevelTestResultItem'
    UtteranceLevelTestResults:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/UtteranceLevelTestResultItemList'
          description: Contains information about an utterance in the results of the
            test set execution.
      required:
      - items
      description: Contains information about the utterances in the results of the
        test set execution.
    UtteranceSpecification:
      type: object
      properties:
        botAliasId:
          allOf:
          - $ref: '#/components/schemas/BotAliasId'
          description: The identifier of the alias of the bot that the utterance was
            made to.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalBotVersion'
          description: The version of the bot that the utterance was made to.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LocaleId'
          description: The locale of the bot that the utterance was made to.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/AnalyticsSessionId'
          description: The identifier of the session that the utterance was made in.
        channel:
          allOf:
          - $ref: '#/components/schemas/AnalyticsChannel'
          description: The channel that is integrated with the bot that the utterance
            was made to.
        mode:
          allOf:
          - $ref: '#/components/schemas/AnalyticsModality'
          description: "The mode of the session. The possible values are as follows:\n\
            \n  * `Speech` – The session consisted of spoken dialogue.\n\n  * `Text`\
            \ – The session consisted of written dialogue.\n\n  * `DTMF` – The session\
            \ consisted of touch-tone keypad (Dual Tone Multi-Frequency) key presses.\n\
            \n  * `MultiMode` – The session consisted of multiple modes."
        conversationStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the conversation in which the utterance
            took place began. A conversation is defined as a unique combination of
            a `sessionId` and an `originatingRequestId`.
        conversationEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the conversation in which the utterance
            took place ended. A conversation is defined as a unique combination of
            a `sessionId` and an `originatingRequestId`.
        utterance:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The text of the utterance.
        utteranceTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the utterance took place.
        audioVoiceDurationMillis:
          allOf:
          - $ref: '#/components/schemas/AnalyticsLongValue'
          description: The duration in milliseconds of the audio associated with the
            utterance.
        utteranceUnderstood:
          allOf:
          - $ref: '#/components/schemas/UtteranceUnderstood'
          description: Specifies whether the bot understood the utterance or not.
        inputType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The input type of the utterance. The possible values are as\
            \ follows:\n\n  * PCM format: audio data must be in little-endian byte\
            \ order.\n\n    * `audio/l16; rate=16000; channels=1`\n\n    * `audio/x-l16;\
            \ sample-rate=16000; channel-count=1`\n\n    * `audio/lpcm; sample-rate=8000;\
            \ sample-size-bits=16; channel-count=1; is-big-endian=false`\n\n  * Opus\
            \ format\n\n    * `audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4`\n\
            \n  * Text format\n\n    * `text/plain; charset=utf-8`"
        outputType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The output type of the utterance. The possible values are\
            \ as follows:\n\n  * `audio/mpeg`\n\n  * `audio/ogg`\n\n  * `audio/pcm\
            \ (16 KHz)`\n\n  * `audio/` (defaults to `mpeg`)\n\n  * `text/plain; charset=utf-8`"
        associatedIntentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the intent that the utterance is associated to.
        associatedSlotName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the slot that the utterance is associated to.
        intentState:
          allOf:
          - $ref: '#/components/schemas/IntentState'
          description: The state of the intent that the utterance is associated to.
        dialogActionType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of dialog action that the utterance is associated
            to. See the `type` field in [DialogAction](https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_DialogAction.html)
            for more information.
        botResponseAudioVoiceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the audio of the bot response.
        slotsFilledInSession:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The slots that have been filled in the session by the time
            of the utterance.
        utteranceRequestId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the request associated with the utterance.
        botResponses:
          allOf:
          - $ref: '#/components/schemas/UtteranceBotResponses'
          description: A list of objects containing information about the bot response
            to the utterance.
      description: An object containing information about a specific utterance.
    UtteranceSpecifications:
      type: array
      items:
        $ref: '#/components/schemas/UtteranceSpecification'
    UtteranceUnderstood:
      type: boolean
      default: false
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
      description: One of the input parameters in your request isn't valid. Check
        the parameters and try your request again.
    Value:
      type: string
      minLength: 1
      maxLength: 140
    VoiceEngine:
      type: string
      enum:
      - standard
      - neural
      - long-form
      - generative
    VoiceId:
      type: string
    VoiceSettings:
      type: object
      properties:
        voiceId:
          allOf:
          - $ref: '#/components/schemas/VoiceId'
          description: The identifier of the Amazon Polly voice to use.
        engine:
          allOf:
          - $ref: '#/components/schemas/VoiceEngine'
          description: 'Indicates the type of Amazon Polly voice that Amazon Lex should
            use for voice interaction with the user. For more information, see the
            [ `engine` parameter of the `SynthesizeSpeech` operation](https://docs.aws.amazon.com/polly/latest/dg/API_SynthesizeSpeech.html#polly-SynthesizeSpeech-request-Engine)
            in the _Amazon Polly developer guide_.


            If you do not specify a value, the default is `standard`.'
      required:
      - voiceId
      description: "Defines settings for using an Amazon Polly voice to communicate\
        \ with a user.\n\nValid values include:\n\n  * `standard`\n\n  * `neural`\n\
        \n  * `long-form`\n\n  * `generative`"
    WaitAndContinueSpecification:
      type: object
      properties:
        waitingResponse:
          allOf:
          - $ref: '#/components/schemas/ResponseSpecification'
          description: The response that Amazon Lex sends to indicate that the bot
            is waiting for the conversation to continue.
        continueResponse:
          allOf:
          - $ref: '#/components/schemas/ResponseSpecification'
          description: The response that Amazon Lex sends to indicate that the bot
            is ready to continue the conversation.
        stillWaitingResponse:
          allOf:
          - $ref: '#/components/schemas/StillWaitingResponseSpecification'
          description: A response that Amazon Lex sends periodically to the user to
            indicate that the bot is still waiting for input from the user.
        active:
          allOf:
          - $ref: '#/components/schemas/BoxedBoolean'
          description: Specifies whether the bot will wait for a user to respond.
            When this field is false, wait and continue responses for a slot aren't
            used. If the `active` field isn't specified, the default is true.
      required:
      - waitingResponse
      - continueResponse
      description: Specifies the prompts that Amazon Lex uses while a bot is waiting
        for customer input.
    Weight:
      type: integer
      minimum: 0
      maximum: 3
