openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: app_mesh
  x-aws-serviceName: appmesh
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2019-01-25'
  title: AWS App Mesh
  description: |-
    App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.

    App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.

    App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see [Service Discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html) in the _Amazon Elastic Container Service Developer Guide_. Kubernetes `kube-dns` and `coredns` are supported. For more information, see [DNS for Services and Pods](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/) in the Kubernetes documentation.
servers:
- description: The AWS App Mesh regional endpoint
  url: https://appmesh.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes:
    put:
      operationId: CreateGatewayRoute
      description: |-
        Creates a gateway route.

        A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.

        For more information about gateway routes, see [Gateway routes](https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html).
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: virtualGatewayName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gatewayRouteName:
                  $ref: '#/components/schemas/ResourceName'
                spec:
                  $ref: '#/components/schemas/GatewayRouteSpec'
                tags:
                  $ref: '#/components/schemas/TagList'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListGatewayRoutes
      description: |-
        Returns a list of existing gateway routes that are associated to a virtual gateway.
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: virtualGatewayName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListGatewayRoutesLimit'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes:
    put:
      operationId: CreateMesh
      description: |-
        Creates a service mesh.

        A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.

        For more information about service meshes, see [Service meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meshName:
                  $ref: '#/components/schemas/ResourceName'
                spec:
                  $ref: '#/components/schemas/MeshSpec'
                tags:
                  $ref: '#/components/schemas/TagList'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListMeshes
      description: |-
        Returns a list of existing service meshes.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListMeshesLimit'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes:
    put:
      operationId: CreateRoute
      description: |-
        Creates a route that is associated with a virtual router.

        You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.

        For more information about routes, see [Routes](https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html).
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: virtualRouterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                routeName:
                  $ref: '#/components/schemas/ResourceName'
                spec:
                  $ref: '#/components/schemas/RouteSpec'
                tags:
                  $ref: '#/components/schemas/TagList'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListRoutes
      description: |-
        Returns a list of existing routes in a service mesh.
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: virtualRouterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListRoutesLimit'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualGateways:
    put:
      operationId: CreateVirtualGateway
      description: |-
        Creates a virtual gateway.

        A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.

        For more information about virtual gateways, see [Virtual gateways](https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html).
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                virtualGatewayName:
                  $ref: '#/components/schemas/ResourceName'
                spec:
                  $ref: '#/components/schemas/VirtualGatewaySpec'
                tags:
                  $ref: '#/components/schemas/TagList'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListVirtualGateways
      description: |-
        Returns a list of existing virtual gateways in a service mesh.
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListVirtualGatewaysLimit'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualNodes:
    put:
      operationId: CreateVirtualNode
      description: |-
        Creates a virtual node within a service mesh.

        A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).

        You define a `listener` for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a `backend`.

        The response metadata for your new virtual node contains the `arn` that is associated with the virtual node. Set this value to the full ARN; for example, `arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp`) as the `APPMESH_RESOURCE_ARN` environment variable for your task group's Envoy proxy container in your task definition or pod spec. This is then mapped to the `node.id` and `node.cluster` Envoy parameters.

        By default, App Mesh uses the name of the resource you specified in `APPMESH_RESOURCE_ARN` when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the `APPMESH_RESOURCE_CLUSTER` environment variable with your own name.

        For more information about virtual nodes, see [Virtual nodes](https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html). You must be using `1.15.0` or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see [Envoy image](https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html) in the App Mesh User Guide.
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                virtualNodeName:
                  $ref: '#/components/schemas/ResourceName'
                spec:
                  $ref: '#/components/schemas/VirtualNodeSpec'
                tags:
                  $ref: '#/components/schemas/TagList'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListVirtualNodes
      description: |-
        Returns a list of existing virtual nodes.
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListVirtualNodesLimit'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualRouters:
    put:
      operationId: CreateVirtualRouter
      description: |-
        Creates a virtual router within a service mesh.

        Specify a `listener` for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.

        For more information about virtual routers, see [Virtual routers](https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html).
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                virtualRouterName:
                  $ref: '#/components/schemas/ResourceName'
                spec:
                  $ref: '#/components/schemas/VirtualRouterSpec'
                tags:
                  $ref: '#/components/schemas/TagList'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListVirtualRouters
      description: |-
        Returns a list of existing virtual routers in a service mesh.
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListVirtualRoutersLimit'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualServices:
    put:
      operationId: CreateVirtualService
      description: |-
        Creates a virtual service within a service mesh.

        A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its `virtualServiceName`, and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.

        For more information about virtual services, see [Virtual services](https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html).
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                virtualServiceName:
                  $ref: '#/components/schemas/ServiceName'
                spec:
                  $ref: '#/components/schemas/VirtualServiceSpec'
                tags:
                  $ref: '#/components/schemas/TagList'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListVirtualServices
      description: |-
        Returns a list of existing virtual services in a service mesh.
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListVirtualServicesLimit'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}:
    delete:
      operationId: DeleteGatewayRoute
      description: |-
        Deletes an existing gateway route.
      parameters:
      - name: gatewayRouteName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: virtualGatewayName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '409':
          description: |-
            You can't delete the specified resource because it's in use or required by another resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeGatewayRoute
      description: |-
        Describes an existing gateway route.
      parameters:
      - name: gatewayRouteName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: virtualGatewayName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateGatewayRoute
      description: |-
        Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.
      parameters:
      - name: gatewayRouteName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: virtualGatewayName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spec:
                  $ref: '#/components/schemas/GatewayRouteSpec'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}:
    delete:
      operationId: DeleteMesh
      description: |-
        Deletes an existing service mesh.

        You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '409':
          description: |-
            You can't delete the specified resource because it's in use or required by another resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeMesh
      description: |-
        Describes an existing service mesh.
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateMesh
      description: |-
        Updates an existing service mesh.
      parameters:
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spec:
                  $ref: '#/components/schemas/MeshSpec'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}:
    delete:
      operationId: DeleteRoute
      description: |-
        Deletes an existing route.
      parameters:
      - name: routeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: virtualRouterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '409':
          description: |-
            You can't delete the specified resource because it's in use or required by another resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeRoute
      description: |-
        Describes an existing route.
      parameters:
      - name: routeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: virtualRouterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateRoute
      description: |-
        Updates an existing route for a specified service mesh and virtual router.
      parameters:
      - name: routeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: virtualRouterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spec:
                  $ref: '#/components/schemas/RouteSpec'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}:
    delete:
      operationId: DeleteVirtualGateway
      description: |-
        Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.
      parameters:
      - name: virtualGatewayName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '409':
          description: |-
            You can't delete the specified resource because it's in use or required by another resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeVirtualGateway
      description: |-
        Describes an existing virtual gateway.
      parameters:
      - name: virtualGatewayName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateVirtualGateway
      description: |-
        Updates an existing virtual gateway in a specified service mesh.
      parameters:
      - name: virtualGatewayName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spec:
                  $ref: '#/components/schemas/VirtualGatewaySpec'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}:
    delete:
      operationId: DeleteVirtualNode
      description: |-
        Deletes an existing virtual node.

        You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.
      parameters:
      - name: virtualNodeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '409':
          description: |-
            You can't delete the specified resource because it's in use or required by another resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeVirtualNode
      description: |-
        Describes an existing virtual node.
      parameters:
      - name: virtualNodeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateVirtualNode
      description: |-
        Updates an existing virtual node in a specified service mesh.
      parameters:
      - name: virtualNodeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spec:
                  $ref: '#/components/schemas/VirtualNodeSpec'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}:
    delete:
      operationId: DeleteVirtualRouter
      description: |-
        Deletes an existing virtual router.

        You must delete any routes associated with the virtual router before you can delete the router itself.
      parameters:
      - name: virtualRouterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '409':
          description: |-
            You can't delete the specified resource because it's in use or required by another resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeVirtualRouter
      description: |-
        Describes an existing virtual router.
      parameters:
      - name: virtualRouterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateVirtualRouter
      description: |-
        Updates an existing virtual router in a specified service mesh.
      parameters:
      - name: virtualRouterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spec:
                  $ref: '#/components/schemas/VirtualRouterSpec'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}:
    delete:
      operationId: DeleteVirtualService
      description: |-
        Deletes an existing virtual service.
      parameters:
      - name: virtualServiceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '409':
          description: |-
            You can't delete the specified resource because it's in use or required by another resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: DescribeVirtualService
      description: |-
        Describes an existing virtual service.
      parameters:
      - name: virtualServiceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateVirtualService
      description: |-
        Updates an existing virtual service in a specified service mesh.
      parameters:
      - name: virtualServiceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceName'
      - name: meshName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceName'
      - name: meshOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spec:
                  $ref: '#/components/schemas/VirtualServiceSpec'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            You have exceeded a service limit for your account. For more information, see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html) in the _App Mesh User Guide_.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/tags:
    get:
      operationId: ListTagsForResource
      description: |-
        List the tags for an App Mesh resource.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/TagsLimit'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/tag:
    put:
      operationId: TagResource
      description: |-
        Associates the specified tags to a resource with the specified `resourceArn`. If existing tags on a resource aren't specified in the request parameters, they aren't changed. When a resource is deleted, the tags associated with that resource are also deleted.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '400':
          description: |-
            The request exceeds the maximum allowed number of tags allowed per resource. The current limit is 50 user tags per resource. You must reduce the number of tags in the request. None of the tags in this request were applied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v20190125/untag:
    put:
      operationId: UntagResource
      description: |-
        Deletes specified tags from a resource.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagKeys:
                  $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '400':
          description: |-
            The request syntax was malformed. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '403':
          description: |-
            You don't have permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '404':
          description: |-
            The specified resource doesn't exist. Check your request syntax and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The request has failed due to a temporary failure of the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
components:
  schemas:
    AccessLog:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/FileAccessLog'
        description: |-
          The file object to send virtual node access logs to.
      description: |-
        An object that represents the access logging information for a virtual node.
    AccountId:
      type: string
      minLength: 12
      maxLength: 12
    Arn:
      type: string
    AwsCloudMapInstanceAttribute:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/AwsCloudMapInstanceAttributeKey'
          description: The name of an Cloud Map service instance attribute key. Any
            Cloud Map service instance that contains the specified key and value is
            returned.
        value:
          allOf:
          - $ref: '#/components/schemas/AwsCloudMapInstanceAttributeValue'
          description: The value of an Cloud Map service instance attribute key. Any
            Cloud Map service instance that contains the specified key and value is
            returned.
      required:
      - key
      - value
      description: 'An object that represents the Cloud Map attribute information
        for your virtual node.


        Cloud Map is not available in the eu-south-1 Region.'
    AwsCloudMapInstanceAttributeKey:
      type: string
      pattern: ^[a-zA-Z0-9!-~]+$
      minLength: 1
      maxLength: 255
    AwsCloudMapInstanceAttributeValue:
      type: string
      pattern: "^([a-zA-Z0-9!-~][ \ta-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$"
      minLength: 1
      maxLength: 1024
    AwsCloudMapInstanceAttributes:
      type: array
      items:
        $ref: '#/components/schemas/AwsCloudMapInstanceAttribute'
    AwsCloudMapName:
      type: string
      minLength: 1
      maxLength: 1024
    AwsCloudMapServiceDiscovery:
      type: object
      properties:
        namespaceName:
          allOf:
          - $ref: '#/components/schemas/AwsCloudMapName'
          description: The name of the Cloud Map namespace to use.
        serviceName:
          allOf:
          - $ref: '#/components/schemas/AwsCloudMapName'
          description: The name of the Cloud Map service to use.
        attributes:
          allOf:
          - $ref: '#/components/schemas/AwsCloudMapInstanceAttributes'
          description: A string map that contains attributes with values that you
            can use to filter instances by any custom attribute that you specified
            when you registered the instance. Only instances that match all of the
            specified key/value pairs will be returned.
        ipPreference:
          allOf:
          - $ref: '#/components/schemas/IpPreference'
          description: The preferred IP version that this virtual node uses. Setting
            the IP preference on the virtual node only overrides the IP preference
            set for the mesh on this specific node.
      required:
      - namespaceName
      - serviceName
      description: 'An object that represents the Cloud Map service discovery information
        for your virtual node.


        Cloud Map is not available in the eu-south-1 Region.'
    Backend:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VirtualServiceBackend'
        description: |-
          Specifies a virtual service to use as a backend.
      description: |-
        An object that represents the backends that a virtual node is expected to send outbound traffic to.
    BackendDefaults:
      type: object
      properties:
        clientPolicy:
          allOf:
          - $ref: '#/components/schemas/ClientPolicy'
          description: A reference to an object that represents a client policy.
      description: An object that represents the default properties for a backend.
    Backends:
      type: array
      items:
        $ref: '#/components/schemas/Backend'
    BadRequestException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request syntax was malformed. Check your request syntax and
        try again.
    CertificateAuthorityArns:
      type: array
      items:
        $ref: '#/components/schemas/Arn'
    ClientPolicy:
      type: object
      properties:
        tls:
          allOf:
          - $ref: '#/components/schemas/ClientPolicyTls'
          description: A reference to an object that represents a Transport Layer
            Security (TLS) client policy.
      description: An object that represents a client policy.
    ClientPolicyTls:
      type: object
      properties:
        enforce:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Whether the policy is enforced. The default is `True`, if a
            value isn't specified.
        ports:
          allOf:
          - $ref: '#/components/schemas/PortSet'
          description: One or more ports that the policy is enforced for.
        certificate:
          allOf:
          - $ref: '#/components/schemas/ClientTlsCertificate'
          description: A reference to an object that represents a client's TLS certificate.
        validation:
          allOf:
          - $ref: '#/components/schemas/TlsValidationContext'
          description: A reference to an object that represents a TLS validation context.
      required:
      - validation
      description: A reference to an object that represents a Transport Layer Security
        (TLS) client policy.
    ClientTlsCertificate:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ListenerTlsFileCertificate'
        description: |-
          An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see [Transport Layer Security (TLS)](https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html).
      - allOf:
        - $ref: '#/components/schemas/ListenerTlsSdsCertificate'
        description: |-
          A reference to an object that represents a client's TLS Secret Discovery Service certificate.
      description: |-
        An object that represents the client's certificate.
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request contains a client token that was used for a previous
        update resource call with different specifications. Try the request again
        with a new client token.
    CreateGatewayRouteInput:
      type: object
      properties:
        gatewayRouteName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name to use for the gateway route.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to create the gateway route in.
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual gateway to associate the gateway route
            with. If the virtual gateway is in a shared mesh, then you must be the
            owner of the virtual gateway resource.
        spec:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteSpec'
          description: The gateway route specification to apply.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: Optional metadata that you can apply to the gateway route to
            assist with categorization and organization. Each tag consists of a key
            and an optional value, both of which you define. Tag keys can have a maximum
            character length of 128 characters, and tag values can have a maximum
            length of 256 characters.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then the account that you specify
            must share the mesh with your account before you can create the resource
            in the service mesh. For more information about mesh sharing, see [Working
            with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - gatewayRouteName
      - meshName
      - virtualGatewayName
      - spec
    CreateGatewayRouteOutput:
      type: object
      properties:
        gatewayRoute:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteData'
          description: The full description of your gateway route following the create
            call.
      required:
      - gatewayRoute
    CreateMeshInput:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name to use for the service mesh.
        spec:
          allOf:
          - $ref: '#/components/schemas/MeshSpec'
          description: The service mesh specification to apply.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: Optional metadata that you can apply to the service mesh to
            assist with categorization and organization. Each tag consists of a key
            and an optional value, both of which you define. Tag keys can have a maximum
            character length of 128 characters, and tag values can have a maximum
            length of 256 characters.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
      required:
      - meshName
      description: ''
    CreateMeshOutput:
      type: object
      properties:
        mesh:
          allOf:
          - $ref: '#/components/schemas/MeshData'
          description: The full description of your service mesh following the create
            call.
      required:
      - mesh
      description: ''
    CreateRouteInput:
      type: object
      properties:
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name to use for the route.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to create the route in.
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router in which to create the route.
            If the virtual router is in a shared mesh, then you must be the owner
            of the virtual router resource.
        spec:
          allOf:
          - $ref: '#/components/schemas/RouteSpec'
          description: The route specification to apply.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: Optional metadata that you can apply to the route to assist
            with categorization and organization. Each tag consists of a key and an
            optional value, both of which you define. Tag keys can have a maximum
            character length of 128 characters, and tag values can have a maximum
            length of 256 characters.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then the account that you specify
            must share the mesh with your account before you can create the resource
            in the service mesh. For more information about mesh sharing, see [Working
            with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - routeName
      - meshName
      - virtualRouterName
      - spec
      description: ''
    CreateRouteOutput:
      type: object
      properties:
        route:
          allOf:
          - $ref: '#/components/schemas/RouteData'
          description: The full description of your mesh following the create call.
      required:
      - route
      description: ''
    CreateVirtualGatewayInput:
      type: object
      properties:
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name to use for the virtual gateway.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to create the virtual gateway
            in.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewaySpec'
          description: The virtual gateway specification to apply.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: Optional metadata that you can apply to the virtual gateway
            to assist with categorization and organization. Each tag consists of a
            key and an optional value, both of which you define. Tag keys can have
            a maximum character length of 128 characters, and tag values can have
            a maximum length of 256 characters.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then the account that you specify
            must share the mesh with your account before you can create the resource
            in the service mesh. For more information about mesh sharing, see [Working
            with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualGatewayName
      - meshName
      - spec
    CreateVirtualGatewayOutput:
      type: object
      properties:
        virtualGateway:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayData'
          description: The full description of your virtual gateway following the
            create call.
      required:
      - virtualGateway
    CreateVirtualNodeInput:
      type: object
      properties:
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name to use for the virtual node.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to create the virtual node in.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeSpec'
          description: The virtual node specification to apply.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: Optional metadata that you can apply to the virtual node to
            assist with categorization and organization. Each tag consists of a key
            and an optional value, both of which you define. Tag keys can have a maximum
            character length of 128 characters, and tag values can have a maximum
            length of 256 characters.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then the account that you specify
            must share the mesh with your account before you can create the resource
            in the service mesh. For more information about mesh sharing, see [Working
            with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualNodeName
      - meshName
      - spec
      description: ''
    CreateVirtualNodeOutput:
      type: object
      properties:
        virtualNode:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeData'
          description: The full description of your virtual node following the create
            call.
      required:
      - virtualNode
      description: ''
    CreateVirtualRouterInput:
      type: object
      properties:
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name to use for the virtual router.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to create the virtual router in.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterSpec'
          description: The virtual router specification to apply.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: Optional metadata that you can apply to the virtual router
            to assist with categorization and organization. Each tag consists of a
            key and an optional value, both of which you define. Tag keys can have
            a maximum character length of 128 characters, and tag values can have
            a maximum length of 256 characters.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then the account that you specify
            must share the mesh with your account before you can create the resource
            in the service mesh. For more information about mesh sharing, see [Working
            with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualRouterName
      - meshName
      - spec
      description: ''
    CreateVirtualRouterOutput:
      type: object
      properties:
        virtualRouter:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterData'
          description: The full description of your virtual router following the create
            call.
      required:
      - virtualRouter
      description: ''
    CreateVirtualServiceInput:
      type: object
      properties:
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name to use for the virtual service.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to create the virtual service
            in.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceSpec'
          description: The virtual service specification to apply.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: Optional metadata that you can apply to the virtual service
            to assist with categorization and organization. Each tag consists of a
            key and an optional value, both of which you define. Tag keys can have
            a maximum character length of 128 characters, and tag values can have
            a maximum length of 256 characters.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then the account that you specify
            must share the mesh with your account before you can create the resource
            in the service mesh. For more information about mesh sharing, see [Working
            with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualServiceName
      - meshName
      - spec
      description: ''
    CreateVirtualServiceOutput:
      type: object
      properties:
        virtualService:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceData'
          description: The full description of your virtual service following the
            create call.
      required:
      - virtualService
      description: ''
    DefaultGatewayRouteRewrite:
      type: string
      enum:
      - ENABLED
      - DISABLED
    DeleteGatewayRouteInput:
      type: object
      properties:
        gatewayRouteName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the gateway route to delete.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to delete the gateway route from.
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual gateway to delete the route from.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - gatewayRouteName
      - meshName
      - virtualGatewayName
    DeleteGatewayRouteOutput:
      type: object
      properties:
        gatewayRoute:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteData'
          description: The gateway route that was deleted.
      required:
      - gatewayRoute
    DeleteMeshInput:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to delete.
      required:
      - meshName
      description: ''
    DeleteMeshOutput:
      type: object
      properties:
        mesh:
          allOf:
          - $ref: '#/components/schemas/MeshData'
          description: The service mesh that was deleted.
      required:
      - mesh
      description: ''
    DeleteRouteInput:
      type: object
      properties:
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the route to delete.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to delete the route in.
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router to delete the route in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - routeName
      - meshName
      - virtualRouterName
      description: ''
    DeleteRouteOutput:
      type: object
      properties:
        route:
          allOf:
          - $ref: '#/components/schemas/RouteData'
          description: The route that was deleted.
      required:
      - route
      description: ''
    DeleteVirtualGatewayInput:
      type: object
      properties:
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual gateway to delete.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to delete the virtual gateway
            from.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualGatewayName
      - meshName
    DeleteVirtualGatewayOutput:
      type: object
      properties:
        virtualGateway:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayData'
          description: The virtual gateway that was deleted.
      required:
      - virtualGateway
    DeleteVirtualNodeInput:
      type: object
      properties:
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node to delete.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to delete the virtual node in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualNodeName
      - meshName
      description: Deletes a virtual node input.
    DeleteVirtualNodeOutput:
      type: object
      properties:
        virtualNode:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeData'
          description: The virtual node that was deleted.
      required:
      - virtualNode
      description: ''
    DeleteVirtualRouterInput:
      type: object
      properties:
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router to delete.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to delete the virtual router in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualRouterName
      - meshName
      description: ''
    DeleteVirtualRouterOutput:
      type: object
      properties:
        virtualRouter:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterData'
          description: The virtual router that was deleted.
      required:
      - virtualRouter
      description: ''
    DeleteVirtualServiceInput:
      type: object
      properties:
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service to delete.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to delete the virtual service
            in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualServiceName
      - meshName
      description: ''
    DeleteVirtualServiceOutput:
      type: object
      properties:
        virtualService:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceData'
          description: The virtual service that was deleted.
      required:
      - virtualService
      description: ''
    DescribeGatewayRouteInput:
      type: object
      properties:
        gatewayRouteName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the gateway route to describe.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the gateway route resides
            in.
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual gateway that the gateway route is associated
            with.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - gatewayRouteName
      - meshName
      - virtualGatewayName
    DescribeGatewayRouteOutput:
      type: object
      properties:
        gatewayRoute:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteData'
          description: The full description of your gateway route.
      required:
      - gatewayRoute
    DescribeMeshInput:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to describe.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - meshName
      description: ''
    DescribeMeshOutput:
      type: object
      properties:
        mesh:
          allOf:
          - $ref: '#/components/schemas/MeshData'
          description: The full description of your service mesh.
      required:
      - mesh
      description: ''
    DescribeRouteInput:
      type: object
      properties:
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the route to describe.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the route resides in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router that the route is associated
            with.
      required:
      - routeName
      - meshName
      - virtualRouterName
      description: ''
    DescribeRouteOutput:
      type: object
      properties:
        route:
          allOf:
          - $ref: '#/components/schemas/RouteData'
          description: The full description of your route.
      required:
      - route
      description: ''
    DescribeVirtualGatewayInput:
      type: object
      properties:
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual gateway to describe.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the gateway route resides
            in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualGatewayName
      - meshName
    DescribeVirtualGatewayOutput:
      type: object
      properties:
        virtualGateway:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayData'
          description: The full description of your virtual gateway.
      required:
      - virtualGateway
    DescribeVirtualNodeInput:
      type: object
      properties:
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node to describe.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual node resides
            in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualNodeName
      - meshName
      description: ''
    DescribeVirtualNodeOutput:
      type: object
      properties:
        virtualNode:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeData'
          description: The full description of your virtual node.
      required:
      - virtualNode
      description: ''
    DescribeVirtualRouterInput:
      type: object
      properties:
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router to describe.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual router resides
            in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualRouterName
      - meshName
      description: ''
    DescribeVirtualRouterOutput:
      type: object
      properties:
        virtualRouter:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterData'
          description: The full description of your virtual router.
      required:
      - virtualRouter
      description: ''
    DescribeVirtualServiceInput:
      type: object
      properties:
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service to describe.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual service resides
            in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualServiceName
      - meshName
      description: ''
    DescribeVirtualServiceOutput:
      type: object
      properties:
        virtualService:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceData'
          description: The full description of your virtual service.
      required:
      - virtualService
      description: ''
    DnsResponseType:
      type: string
      enum:
      - LOADBALANCER
      - ENDPOINTS
    DnsServiceDiscovery:
      type: object
      properties:
        hostname:
          allOf:
          - $ref: '#/components/schemas/Hostname'
          description: Specifies the DNS service discovery hostname for the virtual
            node.
        responseType:
          allOf:
          - $ref: '#/components/schemas/DnsResponseType'
          description: Specifies the DNS response type for the virtual node.
        ipPreference:
          allOf:
          - $ref: '#/components/schemas/IpPreference'
          description: The preferred IP version that this virtual node uses. Setting
            the IP preference on the virtual node only overrides the IP preference
            set for the mesh on this specific node.
      required:
      - hostname
      description: An object that represents the DNS service discovery information
        for your virtual node.
    Duration:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/DurationValue'
          description: A number of time units.
        unit:
          allOf:
          - $ref: '#/components/schemas/DurationUnit'
          description: A unit of time.
      description: An object that represents a duration of time.
    DurationUnit:
      type: string
      enum:
      - s
      - ms
    DurationValue:
      type: integer
      format: int64
      minimum: 0
    EgressFilter:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/EgressFilterType'
          description: The egress filter type. By default, the type is `DROP_ALL`,
            which allows egress only from virtual nodes to other defined resources
            in the service mesh (and any traffic to `*.amazonaws.com` for Amazon Web
            Services API calls). You can set the egress filter type to `ALLOW_ALL`
            to allow egress to any endpoint inside or outside of the service mesh.
      required:
      - type
      description: An object that represents the egress filter rules for a service
        mesh.
    EgressFilterType:
      type: string
      enum:
      - ALLOW_ALL
      - DROP_ALL
    ExactHostName:
      type: string
      minLength: 1
      maxLength: 253
    FileAccessLog:
      type: object
      properties:
        path:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          description: 'The file path to write access logs to. You can use `/dev/stdout`
            to send access logs to standard out and configure your Envoy container
            to use a log driver, such as `awslogs`, to export the access logs to a
            log storage service such as Amazon CloudWatch Logs. You can also specify
            a path in the Envoy container''s file system to write the files to disk.


            The Envoy process must have write permissions to the path that you specify
            here. Otherwise, Envoy fails to bootstrap properly.'
        format:
          allOf:
          - $ref: '#/components/schemas/LoggingFormat'
          description: The specified format for the logs. The format is either `json_format`
            or `text_format`.
      required:
      - path
      description: An object that represents an access log file.
    FilePath:
      type: string
      minLength: 1
      maxLength: 255
    ForbiddenException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: You don't have permissions to perform this action.
    GatewayRouteData:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the resource resides in.
        gatewayRouteName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the gateway route.
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The virtual gateway that the gateway route is associated with.
        spec:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteSpec'
          description: The specifications of the gateway route.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        status:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteStatus'
          description: The status of the gateway route.
      required:
      - meshName
      - gatewayRouteName
      - virtualGatewayName
      - spec
      - metadata
      - status
      description: An object that represents a gateway route returned by a describe
        operation.
    GatewayRouteHostnameMatch:
      type: object
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/ExactHostName'
          description: The exact host name to match on.
        suffix:
          allOf:
          - $ref: '#/components/schemas/SuffixHostname'
          description: The specified ending characters of the host name to match on.
      description: An object representing the gateway route host name to match.
    GatewayRouteHostnameRewrite:
      type: object
      properties:
        defaultTargetHostname:
          allOf:
          - $ref: '#/components/schemas/DefaultGatewayRouteRewrite'
          description: The default target host name to write to.
      description: An object representing the gateway route host name to rewrite.
    GatewayRouteList:
      type: array
      items:
        $ref: '#/components/schemas/GatewayRouteRef'
    GatewayRoutePriority:
      type: integer
      minimum: 0
      maximum: 1000
    GatewayRouteRef:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the resource resides in.
        gatewayRouteName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the gateway route.
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The virtual gateway that the gateway route is associated with.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the resource owner.
            If the account ID is not your own, then it's the ID of the mesh owner
            or of another account that the mesh is shared with. For more information
            about mesh sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the gateway route.
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The version of the resource. Resources are created at version
            1, and this version is incremented each time that they're updated.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            last updated.
      required:
      - meshName
      - gatewayRouteName
      - virtualGatewayName
      - meshOwner
      - resourceOwner
      - arn
      - version
      - createdAt
      - lastUpdatedAt
      description: An object that represents a gateway route returned by a list operation.
    GatewayRouteSpec:
      type: object
      properties:
        priority:
          allOf:
          - $ref: '#/components/schemas/GatewayRoutePriority'
          description: The ordering of the gateway routes spec.
        httpRoute:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRoute'
          description: An object that represents the specification of an HTTP gateway
            route.
        http2Route:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRoute'
          description: An object that represents the specification of an HTTP/2 gateway
            route.
        grpcRoute:
          allOf:
          - $ref: '#/components/schemas/GrpcGatewayRoute'
          description: An object that represents the specification of a gRPC gateway
            route.
      description: An object that represents a gateway route specification. Specify
        one gateway route type.
    GatewayRouteStatus:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteStatusCode'
          description: The current status for the gateway route.
      required:
      - status
      description: An object that represents the current status of a gateway route.
    GatewayRouteStatusCode:
      type: string
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
    GatewayRouteTarget:
      type: object
      properties:
        virtualService:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteVirtualService'
          description: An object that represents a virtual service gateway route target.
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          description: The port number of the gateway route target.
      required:
      - virtualService
      description: An object that represents a gateway route target.
    GatewayRouteVirtualService:
      type: object
      properties:
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual service that traffic is routed to.
      required:
      - virtualServiceName
      description: An object that represents the virtual service that traffic is routed
        to.
    GrpcGatewayRoute:
      type: object
      properties:
        match:
          allOf:
          - $ref: '#/components/schemas/GrpcGatewayRouteMatch'
          description: An object that represents the criteria for determining a request
            match.
        action:
          allOf:
          - $ref: '#/components/schemas/GrpcGatewayRouteAction'
          description: An object that represents the action to take if a match is
            determined.
      required:
      - match
      - action
      description: An object that represents a gRPC gateway route.
    GrpcGatewayRouteAction:
      type: object
      properties:
        target:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteTarget'
          description: An object that represents the target that traffic is routed
            to when a request matches the gateway route.
        rewrite:
          allOf:
          - $ref: '#/components/schemas/GrpcGatewayRouteRewrite'
          description: The gateway route action to rewrite.
      required:
      - target
      description: An object that represents the action to take if a match is determined.
    GrpcGatewayRouteMatch:
      type: object
      properties:
        serviceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The fully qualified domain name for the service to match from
            the request.
        hostname:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteHostnameMatch'
          description: The gateway route host name to be matched on.
        metadata:
          allOf:
          - $ref: '#/components/schemas/GrpcGatewayRouteMetadataList'
          description: The gateway route metadata to be matched on.
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          description: The gateway route port to be matched on.
      description: An object that represents the criteria for determining a request
        match.
    GrpcGatewayRouteMetadata:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/HeaderName'
          description: A name for the gateway route metadata.
        invert:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specify `True` to match anything except the match criteria.
            The default value is `False`.
        match:
          allOf:
          - $ref: '#/components/schemas/GrpcMetadataMatchMethod'
          description: The criteria for determining a metadata match.
      required:
      - name
      description: An object representing the metadata of the gateway route.
    GrpcGatewayRouteMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/GrpcGatewayRouteMetadata'
    GrpcGatewayRouteRewrite:
      type: object
      properties:
        hostname:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteHostnameRewrite'
          description: The host name of the gateway route to rewrite.
      description: An object that represents the gateway route to rewrite.
    GrpcMetadataMatchMethod:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The exact method header to be matched on.
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The regex used to match the method header.
      - allOf:
        - $ref: '#/components/schemas/MatchRange'
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The specified beginning characters of the method header to be matched on.
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The specified ending characters of the method header to match on.
      description: |-
        An object representing the method header to be matched.
    GrpcRetryPolicy:
      type: object
      properties:
        perRetryTimeout:
          allOf:
          - $ref: '#/components/schemas/Duration'
          description: The timeout for each retry attempt.
        maxRetries:
          allOf:
          - $ref: '#/components/schemas/MaxRetries'
          description: The maximum number of retry attempts.
        httpRetryEvents:
          allOf:
          - $ref: '#/components/schemas/HttpRetryPolicyEvents'
          description: "Specify at least one of the following values.\n\n  * **server-error**\
            \ – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510,\
            \ and 511\n\n  * **gateway-error** – HTTP status codes 502, 503, and 504\n\
            \n  * **client-error** – HTTP status code 409\n\n  * **stream-error**\
            \ – Retry on refused stream"
        tcpRetryEvents:
          allOf:
          - $ref: '#/components/schemas/TcpRetryPolicyEvents'
          description: Specify a valid value. The event occurs before any processing
            of a request has started and is encountered when the upstream is temporarily
            or permanently unavailable.
        grpcRetryEvents:
          allOf:
          - $ref: '#/components/schemas/GrpcRetryPolicyEvents'
          description: Specify at least one of the valid values.
      required:
      - perRetryTimeout
      - maxRetries
      description: An object that represents a retry policy. Specify at least one
        value for at least one of the types of `RetryEvents`, a value for `maxRetries`,
        and a value for `perRetryTimeout`. Both `server-error` and `gateway-error`
        under `httpRetryEvents` include the Envoy `reset` policy. For more information
        on the `reset` policy, see the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on).
    GrpcRetryPolicyEvent:
      type: string
      enum:
      - cancelled
      - deadline-exceeded
      - internal
      - resource-exhausted
      - unavailable
    GrpcRetryPolicyEvents:
      type: array
      items:
        $ref: '#/components/schemas/GrpcRetryPolicyEvent'
    GrpcRoute:
      type: object
      properties:
        action:
          allOf:
          - $ref: '#/components/schemas/GrpcRouteAction'
          description: An object that represents the action to take if a match is
            determined.
        match:
          allOf:
          - $ref: '#/components/schemas/GrpcRouteMatch'
          description: An object that represents the criteria for determining a request
            match.
        retryPolicy:
          allOf:
          - $ref: '#/components/schemas/GrpcRetryPolicy'
          description: An object that represents a retry policy.
        timeout:
          allOf:
          - $ref: '#/components/schemas/GrpcTimeout'
          description: An object that represents types of timeouts.
      required:
      - action
      - match
      description: An object that represents a gRPC route type.
    GrpcRouteAction:
      type: object
      properties:
        weightedTargets:
          allOf:
          - $ref: '#/components/schemas/WeightedTargets'
          description: An object that represents the targets that traffic is routed
            to when a request matches the route.
      required:
      - weightedTargets
      description: An object that represents the action to take if a match is determined.
    GrpcRouteMatch:
      type: object
      properties:
        serviceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The fully qualified domain name for the service to match from
            the request.
        methodName:
          allOf:
          - $ref: '#/components/schemas/MethodName'
          description: The method name to match from the request. If you specify a
            name, you must also specify a `serviceName`.
        metadata:
          allOf:
          - $ref: '#/components/schemas/GrpcRouteMetadataList'
          description: An object that represents the data to match from the request.
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          description: The port number to match on.
      description: An object that represents the criteria for determining a request
        match.
    GrpcRouteMetadata:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/HeaderName'
          description: The name of the route.
        invert:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specify `True` to match anything except the match criteria.
            The default value is `False`.
        match:
          allOf:
          - $ref: '#/components/schemas/GrpcRouteMetadataMatchMethod'
          description: An object that represents the data to match from the request.
      required:
      - name
      description: An object that represents the match metadata for the route.
    GrpcRouteMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/GrpcRouteMetadata'
    GrpcRouteMetadataMatchMethod:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The value sent by the client must match the specified value exactly.
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The value sent by the client must include the specified characters.
      - allOf:
        - $ref: '#/components/schemas/MatchRange'
        description: |-
          An object that represents the range of values to match on.
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The value sent by the client must begin with the specified characters.
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The value sent by the client must end with the specified characters.
      description: |-
        An object that represents the match method. Specify one of the match values.
    GrpcTimeout:
      type: object
      properties:
        perRequest:
          allOf:
          - $ref: '#/components/schemas/Duration'
          description: An object that represents a per request timeout. The default
            value is 15 seconds. If you set a higher timeout, then make sure that
            the higher value is set for each App Mesh resource in a conversation.
            For example, if a virtual node backend uses a virtual router provider
            to route to another virtual node, then the timeout should be greater than
            15 seconds for the source and destination virtual node and the route.
        idle:
          allOf:
          - $ref: '#/components/schemas/Duration'
          description: An object that represents an idle timeout. An idle timeout
            bounds the amount of time that a connection may be idle. The default value
            is none.
      description: An object that represents types of timeouts.
    HeaderMatch:
      type: string
      minLength: 1
      maxLength: 255
    HeaderMatchMethod:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The value sent by the client must match the specified value exactly.
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The value sent by the client must include the specified characters.
      - allOf:
        - $ref: '#/components/schemas/MatchRange'
        description: |-
          An object that represents the range of values to match on.
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The value sent by the client must begin with the specified characters.
      - allOf:
        - $ref: '#/components/schemas/HeaderMatch'
        description: |-
          The value sent by the client must end with the specified characters.
      description: |-
        An object that represents the method and value to match with the header value sent in a request. Specify one match method.
    HeaderName:
      type: string
      minLength: 1
      maxLength: 50
    HealthCheckIntervalMillis:
      type: integer
      format: int64
      minimum: 5000
      maximum: 300000
    HealthCheckPolicy:
      type: object
      properties:
        timeoutMillis:
          allOf:
          - $ref: '#/components/schemas/HealthCheckTimeoutMillis'
          description: The amount of time to wait when receiving a response from the
            health check, in milliseconds.
        intervalMillis:
          allOf:
          - $ref: '#/components/schemas/HealthCheckIntervalMillis'
          description: The time period in milliseconds between each health check execution.
        protocol:
          allOf:
          - $ref: '#/components/schemas/PortProtocol'
          description: The protocol for the health check request. If you specify `grpc`,
            then your service must conform to the [GRPC Health Checking Protocol](https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
        port:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          description: The destination port for the health check request. This port
            must match the port defined in the PortMapping for the listener.
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The destination path for the health check request. This value
            is only used if the specified protocol is HTTP or HTTP/2. For any other
            protocol, this value is ignored.
        healthyThreshold:
          allOf:
          - $ref: '#/components/schemas/HealthCheckThreshold'
          description: The number of consecutive successful health checks that must
            occur before declaring listener healthy.
        unhealthyThreshold:
          allOf:
          - $ref: '#/components/schemas/HealthCheckThreshold'
          description: The number of consecutive failed health checks that must occur
            before declaring a virtual node unhealthy.
      required:
      - timeoutMillis
      - intervalMillis
      - protocol
      - healthyThreshold
      - unhealthyThreshold
      description: An object that represents the health check policy for a virtual
        node's listener.
    HealthCheckThreshold:
      type: integer
      minimum: 2
      maximum: 10
    HealthCheckTimeoutMillis:
      type: integer
      format: int64
      minimum: 2000
      maximum: 60000
    Hostname:
      type: string
    HttpGatewayRoute:
      type: object
      properties:
        match:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRouteMatch'
          description: An object that represents the criteria for determining a request
            match.
        action:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRouteAction'
          description: An object that represents the action to take if a match is
            determined.
      required:
      - match
      - action
      description: An object that represents an HTTP gateway route.
    HttpGatewayRouteAction:
      type: object
      properties:
        target:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteTarget'
          description: An object that represents the target that traffic is routed
            to when a request matches the gateway route.
        rewrite:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRouteRewrite'
          description: The gateway route action to rewrite.
      required:
      - target
      description: An object that represents the action to take if a match is determined.
    HttpGatewayRouteHeader:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/HeaderName'
          description: A name for the HTTP header in the gateway route that will be
            matched on.
        invert:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specify `True` to match anything except the match criteria.
            The default value is `False`.
        match:
          allOf:
          - $ref: '#/components/schemas/HeaderMatchMethod'
          description: An object that represents the method and value to match with
            the header value sent in a request. Specify one match method.
      required:
      - name
      description: An object that represents the HTTP header in the gateway route.
    HttpGatewayRouteHeaders:
      type: array
      items:
        $ref: '#/components/schemas/HttpGatewayRouteHeader'
    HttpGatewayRouteMatch:
      type: object
      properties:
        prefix:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the path to match requests with. This parameter must
            always start with `/`, which by itself matches all requests to the virtual
            service name. You can also match for path-based routing of requests. For
            example, if your virtual service name is `my-service.local` and you want
            the route to match requests to `my-service.local/metrics`, your prefix
            should be `/metrics`.
        path:
          allOf:
          - $ref: '#/components/schemas/HttpPathMatch'
          description: The path to match on.
        queryParameters:
          allOf:
          - $ref: '#/components/schemas/HttpQueryParameters'
          description: The query parameter to match on.
        method:
          allOf:
          - $ref: '#/components/schemas/HttpMethod'
          description: The method to match on.
        hostname:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteHostnameMatch'
          description: The host name to match on.
        headers:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRouteHeaders'
          description: The client request headers to match on.
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          description: The port number to match on.
      description: An object that represents the criteria for determining a request
        match.
    HttpGatewayRoutePathRewrite:
      type: object
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/HttpPathExact'
          description: The exact path to rewrite.
      description: An object that represents the path to rewrite.
    HttpGatewayRoutePrefix:
      type: string
      minLength: 1
      maxLength: 255
    HttpGatewayRoutePrefixRewrite:
      type: object
      properties:
        defaultPrefix:
          allOf:
          - $ref: '#/components/schemas/DefaultGatewayRouteRewrite'
          description: The default prefix used to replace the incoming route prefix
            when rewritten.
        value:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRoutePrefix'
          description: The value used to replace the incoming route prefix when rewritten.
      description: An object representing the beginning characters of the route to
        rewrite.
    HttpGatewayRouteRewrite:
      type: object
      properties:
        prefix:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRoutePrefixRewrite'
          description: The specified beginning characters to rewrite.
        path:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRoutePathRewrite'
          description: The path to rewrite.
        hostname:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteHostnameRewrite'
          description: The host name to rewrite.
      description: An object representing the gateway route to rewrite.
    HttpMethod:
      type: string
      enum:
      - GET
      - HEAD
      - POST
      - PUT
      - DELETE
      - CONNECT
      - OPTIONS
      - TRACE
      - PATCH
    HttpPathExact:
      type: string
      minLength: 1
      maxLength: 255
    HttpPathMatch:
      type: object
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/HttpPathExact'
          description: The exact path to match on.
        regex:
          allOf:
          - $ref: '#/components/schemas/HttpPathRegex'
          description: The regex used to match the path.
      description: An object representing the path to match in the request.
    HttpPathRegex:
      type: string
      minLength: 1
      maxLength: 255
    HttpQueryParameter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/QueryParameterName'
          description: A name for the query parameter that will be matched on.
        match:
          allOf:
          - $ref: '#/components/schemas/QueryParameterMatch'
          description: The query parameter to match on.
      required:
      - name
      description: An object that represents the query parameter in the request.
    HttpQueryParameters:
      type: array
      items:
        $ref: '#/components/schemas/HttpQueryParameter'
    HttpRetryPolicy:
      type: object
      properties:
        perRetryTimeout:
          allOf:
          - $ref: '#/components/schemas/Duration'
          description: The timeout for each retry attempt.
        maxRetries:
          allOf:
          - $ref: '#/components/schemas/MaxRetries'
          description: The maximum number of retry attempts.
        httpRetryEvents:
          allOf:
          - $ref: '#/components/schemas/HttpRetryPolicyEvents'
          description: "Specify at least one of the following values.\n\n  * **server-error**\
            \ – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510,\
            \ and 511\n\n  * **gateway-error** – HTTP status codes 502, 503, and 504\n\
            \n  * **client-error** – HTTP status code 409\n\n  * **stream-error**\
            \ – Retry on refused stream"
        tcpRetryEvents:
          allOf:
          - $ref: '#/components/schemas/TcpRetryPolicyEvents'
          description: Specify a valid value. The event occurs before any processing
            of a request has started and is encountered when the upstream is temporarily
            or permanently unavailable.
      required:
      - perRetryTimeout
      - maxRetries
      description: An object that represents a retry policy. Specify at least one
        value for at least one of the types of `RetryEvents`, a value for `maxRetries`,
        and a value for `perRetryTimeout`. Both `server-error` and `gateway-error`
        under `httpRetryEvents` include the Envoy `reset` policy. For more information
        on the `reset` policy, see the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on).
    HttpRetryPolicyEvent:
      type: string
      minLength: 1
      maxLength: 25
    HttpRetryPolicyEvents:
      type: array
      items:
        $ref: '#/components/schemas/HttpRetryPolicyEvent'
    HttpRoute:
      type: object
      properties:
        match:
          allOf:
          - $ref: '#/components/schemas/HttpRouteMatch'
          description: An object that represents the criteria for determining a request
            match.
        action:
          allOf:
          - $ref: '#/components/schemas/HttpRouteAction'
          description: An object that represents the action to take if a match is
            determined.
        retryPolicy:
          allOf:
          - $ref: '#/components/schemas/HttpRetryPolicy'
          description: An object that represents a retry policy.
        timeout:
          allOf:
          - $ref: '#/components/schemas/HttpTimeout'
          description: An object that represents types of timeouts.
      required:
      - match
      - action
      description: An object that represents an HTTP or HTTP/2 route type.
    HttpRouteAction:
      type: object
      properties:
        weightedTargets:
          allOf:
          - $ref: '#/components/schemas/WeightedTargets'
          description: An object that represents the targets that traffic is routed
            to when a request matches the route.
      required:
      - weightedTargets
      description: An object that represents the action to take if a match is determined.
    HttpRouteHeader:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/HeaderName'
          description: A name for the HTTP header in the client request that will
            be matched on.
        invert:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specify `True` to match anything except the match criteria.
            The default value is `False`.
        match:
          allOf:
          - $ref: '#/components/schemas/HeaderMatchMethod'
          description: The `HeaderMatchMethod` object.
      required:
      - name
      description: An object that represents the HTTP header in the request.
    HttpRouteHeaders:
      type: array
      items:
        $ref: '#/components/schemas/HttpRouteHeader'
    HttpRouteMatch:
      type: object
      properties:
        prefix:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the path to match requests with. This parameter must
            always start with `/`, which by itself matches all requests to the virtual
            service name. You can also match for path-based routing of requests. For
            example, if your virtual service name is `my-service.local` and you want
            the route to match requests to `my-service.local/metrics`, your prefix
            should be `/metrics`.
        path:
          allOf:
          - $ref: '#/components/schemas/HttpPathMatch'
          description: The client request path to match on.
        queryParameters:
          allOf:
          - $ref: '#/components/schemas/HttpQueryParameters'
          description: The client request query parameters to match on.
        method:
          allOf:
          - $ref: '#/components/schemas/HttpMethod'
          description: The client request method to match on. Specify only one.
        scheme:
          allOf:
          - $ref: '#/components/schemas/HttpScheme'
          description: The client request scheme to match on. Specify only one. Applicable
            only for HTTP2 routes.
        headers:
          allOf:
          - $ref: '#/components/schemas/HttpRouteHeaders'
          description: The client request headers to match on.
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          description: The port number to match on.
      description: An object that represents the requirements for a route to match
        HTTP requests for a virtual router.
    HttpScheme:
      type: string
      enum:
      - http
      - https
    HttpTimeout:
      type: object
      properties:
        perRequest:
          allOf:
          - $ref: '#/components/schemas/Duration'
          description: An object that represents a per request timeout. The default
            value is 15 seconds. If you set a higher timeout, then make sure that
            the higher value is set for each App Mesh resource in a conversation.
            For example, if a virtual node backend uses a virtual router provider
            to route to another virtual node, then the timeout should be greater than
            15 seconds for the source and destination virtual node and the route.
        idle:
          allOf:
          - $ref: '#/components/schemas/Duration'
          description: An object that represents an idle timeout. An idle timeout
            bounds the amount of time that a connection may be idle. The default value
            is none.
      description: An object that represents types of timeouts.
    InternalServerErrorException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request processing has failed because of an unknown error,
        exception, or failure.
    IpPreference:
      type: string
      enum:
      - IPv6_PREFERRED
      - IPv4_PREFERRED
      - IPv4_ONLY
      - IPv6_ONLY
    JsonFormat:
      type: array
      items:
        $ref: '#/components/schemas/JsonFormatRef'
    JsonFormatRef:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/JsonKey'
          description: The specified key for the JSON.
        value:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: The specified value for the JSON.
      required:
      - key
      - value
      description: An object that represents the key value pairs for the JSON.
    JsonKey:
      type: string
      minLength: 1
      maxLength: 100
    JsonValue:
      type: string
      minLength: 1
      maxLength: 100
    LimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: You have exceeded a service limit for your account. For more information,
        see [Service Limits](https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html)
        in the _App Mesh User Guide_.
    ListGatewayRoutesInput:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to list gateway routes in.
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual gateway to list gateway routes in.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value returned from a previous paginated `ListGatewayRoutes`
            request where `limit` was used and the results exceeded the value of that
            parameter. Pagination continues from the end of the previous results that
            returned the `nextToken` value.
        limit:
          allOf:
          - $ref: '#/components/schemas/ListGatewayRoutesLimit'
          description: The maximum number of results returned by `ListGatewayRoutes`
            in paginated output. When you use this parameter, `ListGatewayRoutes`
            returns only `limit` results in a single page along with a `nextToken`
            response element. You can see the remaining results of the initial request
            by sending another `ListGatewayRoutes` request with the returned `nextToken`
            value. This value can be between 1 and 100. If you don't use this parameter,
            `ListGatewayRoutes` returns up to 100 results and a `nextToken` value
            if applicable.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - meshName
      - virtualGatewayName
    ListGatewayRoutesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListGatewayRoutesOutput:
      type: object
      properties:
        gatewayRoutes:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteList'
          description: The list of existing gateway routes for the specified service
            mesh and virtual gateway.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListGatewayRoutes`
            request. When the results of a `ListGatewayRoutes` request exceed `limit`,
            you can use this value to retrieve the next page of results. This value
            is `null` when there are no more results to return.
      required:
      - gatewayRoutes
    ListMeshesInput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The `nextToken` value returned from a previous paginated `ListMeshes`
            request where `limit` was used and the results exceeded the value of that
            parameter. Pagination continues from the end of the previous results that
            returned the `nextToken` value.


            This token should be treated as an opaque identifier that is used only
            to retrieve the next items in a list and not for other programmatic purposes.'
        limit:
          allOf:
          - $ref: '#/components/schemas/ListMeshesLimit'
          description: The maximum number of results returned by `ListMeshes` in paginated
            output. When you use this parameter, `ListMeshes` returns only `limit`
            results in a single page along with a `nextToken` response element. You
            can see the remaining results of the initial request by sending another
            `ListMeshes` request with the returned `nextToken` value. This value can
            be between 1 and 100. If you don't use this parameter, `ListMeshes` returns
            up to 100 results and a `nextToken` value if applicable.
      description: ''
    ListMeshesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListMeshesOutput:
      type: object
      properties:
        meshes:
          allOf:
          - $ref: '#/components/schemas/MeshList'
          description: The list of existing service meshes.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListMeshes` request.
            When the results of a `ListMeshes` request exceed `limit`, you can use
            this value to retrieve the next page of results. This value is `null`
            when there are no more results to return.
      required:
      - meshes
      description: ''
    ListRoutesInput:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to list routes in.
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router to list routes in.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value returned from a previous paginated `ListRoutes`
            request where `limit` was used and the results exceeded the value of that
            parameter. Pagination continues from the end of the previous results that
            returned the `nextToken` value.
        limit:
          allOf:
          - $ref: '#/components/schemas/ListRoutesLimit'
          description: The maximum number of results returned by `ListRoutes` in paginated
            output. When you use this parameter, `ListRoutes` returns only `limit`
            results in a single page along with a `nextToken` response element. You
            can see the remaining results of the initial request by sending another
            `ListRoutes` request with the returned `nextToken` value. This value can
            be between 1 and 100. If you don't use this parameter, `ListRoutes` returns
            up to 100 results and a `nextToken` value if applicable.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - meshName
      - virtualRouterName
      description: ''
    ListRoutesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListRoutesOutput:
      type: object
      properties:
        routes:
          allOf:
          - $ref: '#/components/schemas/RouteList'
          description: The list of existing routes for the specified service mesh
            and virtual router.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListRoutes` request.
            When the results of a `ListRoutes` request exceed `limit`, you can use
            this value to retrieve the next page of results. This value is `null`
            when there are no more results to return.
      required:
      - routes
      description: ''
    ListTagsForResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) that identifies the resource
            to list the tags for.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value returned from a previous paginated `ListTagsForResource`
            request where `limit` was used and the results exceeded the value of that
            parameter. Pagination continues from the end of the previous results that
            returned the `nextToken` value.
        limit:
          allOf:
          - $ref: '#/components/schemas/TagsLimit'
          description: The maximum number of tag results returned by `ListTagsForResource`
            in paginated output. When this parameter is used, `ListTagsForResource`
            returns only `limit` results in a single page along with a `nextToken`
            response element. You can see the remaining results of the initial request
            by sending another `ListTagsForResource` request with the returned `nextToken`
            value. This value can be between 1 and 100. If you don't use this parameter,
            `ListTagsForResource` returns up to 100 results and a `nextToken` value
            if applicable.
      required:
      - resourceArn
      description: ''
    ListTagsForResourceOutput:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: The tags for the resource.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListTagsForResource`
            request. When the results of a `ListTagsForResource` request exceed `limit`,
            you can use this value to retrieve the next page of results. This value
            is `null` when there are no more results to return.
      required:
      - tags
      description: ''
    ListVirtualGatewaysInput:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to list virtual gateways in.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value returned from a previous paginated `ListVirtualGateways`
            request where `limit` was used and the results exceeded the value of that
            parameter. Pagination continues from the end of the previous results that
            returned the `nextToken` value.
        limit:
          allOf:
          - $ref: '#/components/schemas/ListVirtualGatewaysLimit'
          description: The maximum number of results returned by `ListVirtualGateways`
            in paginated output. When you use this parameter, `ListVirtualGateways`
            returns only `limit` results in a single page along with a `nextToken`
            response element. You can see the remaining results of the initial request
            by sending another `ListVirtualGateways` request with the returned `nextToken`
            value. This value can be between 1 and 100. If you don't use this parameter,
            `ListVirtualGateways` returns up to 100 results and a `nextToken` value
            if applicable.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - meshName
    ListVirtualGatewaysLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListVirtualGatewaysOutput:
      type: object
      properties:
        virtualGateways:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayList'
          description: The list of existing virtual gateways for the specified service
            mesh.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListVirtualGateways`
            request. When the results of a `ListVirtualGateways` request exceed `limit`,
            you can use this value to retrieve the next page of results. This value
            is `null` when there are no more results to return.
      required:
      - virtualGateways
    ListVirtualNodesInput:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to list virtual nodes in.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value returned from a previous paginated `ListVirtualNodes`
            request where `limit` was used and the results exceeded the value of that
            parameter. Pagination continues from the end of the previous results that
            returned the `nextToken` value.
        limit:
          allOf:
          - $ref: '#/components/schemas/ListVirtualNodesLimit'
          description: The maximum number of results returned by `ListVirtualNodes`
            in paginated output. When you use this parameter, `ListVirtualNodes` returns
            only `limit` results in a single page along with a `nextToken` response
            element. You can see the remaining results of the initial request by sending
            another `ListVirtualNodes` request with the returned `nextToken` value.
            This value can be between 1 and 100. If you don't use this parameter,
            `ListVirtualNodes` returns up to 100 results and a `nextToken` value if
            applicable.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - meshName
      description: ''
    ListVirtualNodesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListVirtualNodesOutput:
      type: object
      properties:
        virtualNodes:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeList'
          description: The list of existing virtual nodes for the specified service
            mesh.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListVirtualNodes`
            request. When the results of a `ListVirtualNodes` request exceed `limit`,
            you can use this value to retrieve the next page of results. This value
            is `null` when there are no more results to return.
      required:
      - virtualNodes
      description: ''
    ListVirtualRoutersInput:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to list virtual routers in.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value returned from a previous paginated `ListVirtualRouters`
            request where `limit` was used and the results exceeded the value of that
            parameter. Pagination continues from the end of the previous results that
            returned the `nextToken` value.
        limit:
          allOf:
          - $ref: '#/components/schemas/ListVirtualRoutersLimit'
          description: The maximum number of results returned by `ListVirtualRouters`
            in paginated output. When you use this parameter, `ListVirtualRouters`
            returns only `limit` results in a single page along with a `nextToken`
            response element. You can see the remaining results of the initial request
            by sending another `ListVirtualRouters` request with the returned `nextToken`
            value. This value can be between 1 and 100. If you don't use this parameter,
            `ListVirtualRouters` returns up to 100 results and a `nextToken` value
            if applicable.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - meshName
      description: ''
    ListVirtualRoutersLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListVirtualRoutersOutput:
      type: object
      properties:
        virtualRouters:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterList'
          description: The list of existing virtual routers for the specified service
            mesh.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListVirtualRouters`
            request. When the results of a `ListVirtualRouters` request exceed `limit`,
            you can use this value to retrieve the next page of results. This value
            is `null` when there are no more results to return.
      required:
      - virtualRouters
      description: ''
    ListVirtualServicesInput:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to list virtual services in.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value returned from a previous paginated `ListVirtualServices`
            request where `limit` was used and the results exceeded the value of that
            parameter. Pagination continues from the end of the previous results that
            returned the `nextToken` value.
        limit:
          allOf:
          - $ref: '#/components/schemas/ListVirtualServicesLimit'
          description: The maximum number of results returned by `ListVirtualServices`
            in paginated output. When you use this parameter, `ListVirtualServices`
            returns only `limit` results in a single page along with a `nextToken`
            response element. You can see the remaining results of the initial request
            by sending another `ListVirtualServices` request with the returned `nextToken`
            value. This value can be between 1 and 100. If you don't use this parameter,
            `ListVirtualServices` returns up to 100 results and a `nextToken` value
            if applicable.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - meshName
      description: ''
    ListVirtualServicesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListVirtualServicesOutput:
      type: object
      properties:
        virtualServices:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceList'
          description: The list of existing virtual services for the specified service
            mesh.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListVirtualServices`
            request. When the results of a `ListVirtualServices` request exceed `limit`,
            you can use this value to retrieve the next page of results. This value
            is `null` when there are no more results to return.
      required:
      - virtualServices
      description: ''
    Listener:
      type: object
      properties:
        portMapping:
          allOf:
          - $ref: '#/components/schemas/PortMapping'
          description: The port mapping information for the listener.
        tls:
          allOf:
          - $ref: '#/components/schemas/ListenerTls'
          description: A reference to an object that represents the Transport Layer
            Security (TLS) properties for a listener.
        healthCheck:
          allOf:
          - $ref: '#/components/schemas/HealthCheckPolicy'
          description: The health check information for the listener.
        timeout:
          allOf:
          - $ref: '#/components/schemas/ListenerTimeout'
          description: An object that represents timeouts for different protocols.
        outlierDetection:
          allOf:
          - $ref: '#/components/schemas/OutlierDetection'
          description: The outlier detection information for the listener.
        connectionPool:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeConnectionPool'
          description: The connection pool information for the listener.
      required:
      - portMapping
      description: An object that represents a listener for a virtual node.
    ListenerPort:
      type: integer
      minimum: 1
      maximum: 65535
    ListenerTimeout:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/TcpTimeout'
        description: |-
          An object that represents types of timeouts.
      - allOf:
        - $ref: '#/components/schemas/HttpTimeout'
        description: |-
          An object that represents types of timeouts.
      - allOf:
        - $ref: '#/components/schemas/HttpTimeout'
        description: |-
          An object that represents types of timeouts.
      - allOf:
        - $ref: '#/components/schemas/GrpcTimeout'
        description: |-
          An object that represents types of timeouts.
      description: |-
        An object that represents timeouts for different protocols.
    ListenerTls:
      type: object
      properties:
        mode:
          allOf:
          - $ref: '#/components/schemas/ListenerTlsMode'
          description: "Specify one of the following modes.\n\n  * ****STRICT – Listener\
            \ only accepts connections with TLS enabled.\n\n  * ****PERMISSIVE – Listener\
            \ accepts connections with or without TLS enabled.\n\n  * ****DISABLED\
            \ – Listener only accepts connections without TLS."
        certificate:
          allOf:
          - $ref: '#/components/schemas/ListenerTlsCertificate'
          description: A reference to an object that represents a listener's Transport
            Layer Security (TLS) certificate.
        validation:
          allOf:
          - $ref: '#/components/schemas/ListenerTlsValidationContext'
          description: A reference to an object that represents a listener's Transport
            Layer Security (TLS) validation context.
      required:
      - mode
      - certificate
      description: An object that represents the Transport Layer Security (TLS) properties
        for a listener.
    ListenerTlsAcmCertificate:
      type: object
      properties:
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) for the certificate. The certificate
            must meet specific requirements and you must have proxy authorization
            enabled. For more information, see [Transport Layer Security (TLS)](https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites).
      required:
      - certificateArn
      description: An object that represents an Certificate Manager certificate.
    ListenerTlsCertificate:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ListenerTlsAcmCertificate'
        description: |-
          A reference to an object that represents an Certificate Manager certificate.
      - allOf:
        - $ref: '#/components/schemas/ListenerTlsFileCertificate'
        description: |-
          A reference to an object that represents a local file certificate.
      - allOf:
        - $ref: '#/components/schemas/ListenerTlsSdsCertificate'
        description: |-
          A reference to an object that represents a listener's Secret Discovery Service certificate.
      description: |-
        An object that represents a listener's Transport Layer Security (TLS) certificate.
    ListenerTlsFileCertificate:
      type: object
      properties:
        certificateChain:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          description: The certificate chain for the certificate.
        privateKey:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          description: The private key for a certificate stored on the file system
            of the virtual node that the proxy is running on.
      required:
      - certificateChain
      - privateKey
      description: An object that represents a local file certificate. The certificate
        must meet specific requirements and you must have proxy authorization enabled.
        For more information, see [Transport Layer Security (TLS)](https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites).
    ListenerTlsMode:
      type: string
      enum:
      - STRICT
      - PERMISSIVE
      - DISABLED
    ListenerTlsSdsCertificate:
      type: object
      properties:
        secretName:
          allOf:
          - $ref: '#/components/schemas/SdsSecretName'
          description: A reference to an object that represents the name of the secret
            requested from the Secret Discovery Service provider representing Transport
            Layer Security (TLS) materials like a certificate or certificate chain.
      required:
      - secretName
      description: An object that represents the listener's Secret Discovery Service
        certificate. The proxy must be configured with a local SDS provider via a
        Unix Domain Socket. See App Mesh [TLS documentation](https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html)
        for more info.
    ListenerTlsValidationContext:
      type: object
      properties:
        trust:
          allOf:
          - $ref: '#/components/schemas/ListenerTlsValidationContextTrust'
          description: A reference to where to retrieve the trust chain when validating
            a peer’s Transport Layer Security (TLS) certificate.
        subjectAlternativeNames:
          allOf:
          - $ref: '#/components/schemas/SubjectAlternativeNames'
          description: A reference to an object that represents the SANs for a listener's
            Transport Layer Security (TLS) validation context.
      required:
      - trust
      description: An object that represents a listener's Transport Layer Security
        (TLS) validation context.
    ListenerTlsValidationContextTrust:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/TlsValidationContextFileTrust'
        description: |-
          An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
      - allOf:
        - $ref: '#/components/schemas/TlsValidationContextSdsTrust'
        description: |-
          A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
      description: |-
        An object that represents a listener's Transport Layer Security (TLS) validation context trust.
    Listeners:
      type: array
      items:
        $ref: '#/components/schemas/Listener'
    Logging:
      type: object
      properties:
        accessLog:
          allOf:
          - $ref: '#/components/schemas/AccessLog'
          description: The access log configuration for a virtual node.
      description: An object that represents the logging information for a virtual
        node.
    LoggingFormat:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/TextFormat'
        description: ""
      - allOf:
        - $ref: '#/components/schemas/JsonFormat'
        description: ""
      description: |-
        An object that represents the format for the logs.
    MatchRange:
      type: object
      properties:
        start:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The start of the range.
        end:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The end of the range.
      required:
      - start
      - end
      description: An object that represents the range of values to match on. The
        first character of the range is included in the range, though the last character
        is not. For example, if the range specified were 1-100, only values 1-99 would
        be matched.
    MaxConnections:
      type: integer
      minimum: 1
    MaxPendingRequests:
      type: integer
      minimum: 1
    MaxRequests:
      type: integer
      minimum: 1
    MaxRetries:
      type: integer
      format: int64
      minimum: 0
    MeshData:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh.
        spec:
          allOf:
          - $ref: '#/components/schemas/MeshSpec'
          description: The associated specification for the service mesh.
        metadata:
          allOf:
          - $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the service mesh.
        status:
          allOf:
          - $ref: '#/components/schemas/MeshStatus'
          description: The status of the service mesh.
      required:
      - meshName
      - spec
      - metadata
      - status
      description: An object that represents a service mesh returned by a describe
        operation.
    MeshList:
      type: array
      items:
        $ref: '#/components/schemas/MeshRef'
    MeshRef:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the resource owner.
            If the account ID is not your own, then it's the ID of the mesh owner
            or of another account that the mesh is shared with. For more information
            about mesh sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) of the service mesh.
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The version of the resource. Resources are created at version
            1, and this version is incremented each time that they're updated.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            last updated.
      required:
      - meshName
      - meshOwner
      - resourceOwner
      - arn
      - version
      - createdAt
      - lastUpdatedAt
      description: An object that represents a service mesh returned by a list operation.
    MeshServiceDiscovery:
      type: object
      properties:
        ipPreference:
          allOf:
          - $ref: '#/components/schemas/IpPreference'
          description: The IP version to use to control traffic within the mesh.
      description: An object that represents the service discovery information for
        a service mesh.
    MeshSpec:
      type: object
      properties:
        egressFilter:
          allOf:
          - $ref: '#/components/schemas/EgressFilter'
          description: The egress filter rules for the service mesh.
        serviceDiscovery:
          $ref: '#/components/schemas/MeshServiceDiscovery'
      description: An object that represents the specification of a service mesh.
    MeshStatus:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/MeshStatusCode'
          description: The current mesh status.
      description: An object that represents the status of a service mesh.
    MeshStatusCode:
      type: string
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
    MethodName:
      type: string
      minLength: 1
      maxLength: 50
    NotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The specified resource doesn't exist. Check your request syntax
        and try again.
    OutlierDetection:
      type: object
      properties:
        maxServerErrors:
          allOf:
          - $ref: '#/components/schemas/OutlierDetectionMaxServerErrors'
          description: Number of consecutive `5xx` errors required for ejection.
        interval:
          allOf:
          - $ref: '#/components/schemas/Duration'
          description: The time interval between ejection sweep analysis.
        baseEjectionDuration:
          allOf:
          - $ref: '#/components/schemas/Duration'
          description: The base amount of time for which a host is ejected.
        maxEjectionPercent:
          allOf:
          - $ref: '#/components/schemas/OutlierDetectionMaxEjectionPercent'
          description: Maximum percentage of hosts in load balancing pool for upstream
            service that can be ejected. Will eject at least one host regardless of
            the value.
      required:
      - maxServerErrors
      - interval
      - baseEjectionDuration
      - maxEjectionPercent
      description: An object that represents the outlier detection for a virtual node's
        listener.
    OutlierDetectionMaxEjectionPercent:
      type: integer
      minimum: 0
      maximum: 100
    OutlierDetectionMaxServerErrors:
      type: integer
      format: int64
      minimum: 1
    PercentInt:
      type: integer
      default: 0
      minimum: 0
      maximum: 100
    PortMapping:
      type: object
      properties:
        port:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          description: The port used for the port mapping.
        protocol:
          allOf:
          - $ref: '#/components/schemas/PortProtocol'
          description: The protocol used for the port mapping. Specify one protocol.
      required:
      - port
      - protocol
      description: An object that represents a port mapping.
    PortNumber:
      type: integer
      minimum: 1
      maximum: 65535
    PortProtocol:
      type: string
      enum:
      - http
      - tcp
      - http2
      - grpc
    PortSet:
      type: array
      items:
        $ref: '#/components/schemas/PortNumber'
    QueryParameterMatch:
      type: object
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exact query parameter to match on.
      description: An object representing the query parameter to match.
    QueryParameterName:
      type: string
    ResourceInUseException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: You can't delete the specified resource because it's in use or
        required by another resource.
    ResourceMetadata:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the resource.
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The version of the resource. Resources are created at version
            1, and this version is incremented each time that they're updated.
        uid:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique identifier for the resource.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            last updated.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the resource owner.
            If the account ID is not your own, then it's the ID of the mesh owner
            or of another account that the mesh is shared with. For more information
            about mesh sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - arn
      - version
      - uid
      - createdAt
      - lastUpdatedAt
      - meshOwner
      - resourceOwner
      description: An object that represents metadata for a resource.
    ResourceName:
      type: string
      minLength: 1
      maxLength: 255
    RouteData:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the route resides in.
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The virtual router that the route is associated with.
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the route.
        spec:
          allOf:
          - $ref: '#/components/schemas/RouteSpec'
          description: The specifications of the route.
        metadata:
          allOf:
          - $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the route.
        status:
          allOf:
          - $ref: '#/components/schemas/RouteStatus'
          description: The status of the route.
      required:
      - meshName
      - virtualRouterName
      - routeName
      - spec
      - metadata
      - status
      description: An object that represents a route returned by a describe operation.
    RouteList:
      type: array
      items:
        $ref: '#/components/schemas/RouteRef'
    RoutePriority:
      type: integer
      minimum: 0
      maximum: 1000
    RouteRef:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the route resides in.
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The virtual router that the route is associated with.
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the route.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the resource owner.
            If the account ID is not your own, then it's the ID of the mesh owner
            or of another account that the mesh is shared with. For more information
            about mesh sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the route.
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The version of the resource. Resources are created at version
            1, and this version is incremented each time that they're updated.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            last updated.
      required:
      - meshName
      - virtualRouterName
      - routeName
      - meshOwner
      - resourceOwner
      - arn
      - version
      - createdAt
      - lastUpdatedAt
      description: An object that represents a route returned by a list operation.
    RouteSpec:
      type: object
      properties:
        priority:
          allOf:
          - $ref: '#/components/schemas/RoutePriority'
          description: The priority for the route. Routes are matched based on the
            specified value, where 0 is the highest priority.
        httpRoute:
          allOf:
          - $ref: '#/components/schemas/HttpRoute'
          description: An object that represents the specification of an HTTP route.
        tcpRoute:
          allOf:
          - $ref: '#/components/schemas/TcpRoute'
          description: An object that represents the specification of a TCP route.
        http2Route:
          allOf:
          - $ref: '#/components/schemas/HttpRoute'
          description: An object that represents the specification of an HTTP/2 route.
        grpcRoute:
          allOf:
          - $ref: '#/components/schemas/GrpcRoute'
          description: An object that represents the specification of a gRPC route.
      description: An object that represents a route specification. Specify one route
        type.
    RouteStatus:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/RouteStatusCode'
          description: The current status for the route.
      required:
      - status
      description: An object that represents the current status of a route.
    RouteStatusCode:
      type: string
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
    SdsSecretName:
      type: string
    ServiceDiscovery:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/DnsServiceDiscovery'
        description: |-
          Specifies the DNS information for the virtual node.
      - allOf:
        - $ref: '#/components/schemas/AwsCloudMapServiceDiscovery'
        description: |-
          Specifies any Cloud Map information for the virtual node.
      description: |-
        An object that represents the service discovery information for a virtual node.
    ServiceName:
      type: string
    ServiceUnavailableException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request has failed due to a temporary failure of the service.
    SubjectAlternativeName:
      type: string
      minLength: 1
      maxLength: 254
    SubjectAlternativeNameList:
      type: array
      items:
        $ref: '#/components/schemas/SubjectAlternativeName'
    SubjectAlternativeNameMatchers:
      type: object
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/SubjectAlternativeNameList'
          description: The values sent must match the specified values exactly.
      required:
      - exact
      description: An object that represents the methods by which a subject alternative
        name on a peer Transport Layer Security (TLS) certificate can be matched.
    SubjectAlternativeNames:
      type: object
      properties:
        match:
          allOf:
          - $ref: '#/components/schemas/SubjectAlternativeNameMatchers'
          description: An object that represents the criteria for determining a SANs
            match.
      required:
      - match
      description: An object that represents the subject alternative names secured
        by the certificate.
    SuffixHostname:
      type: string
      minLength: 1
      maxLength: 253
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/TagRef'
    TagRef:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          description: One part of a key-value pair that make up a tag. A `key` is
            a general label that acts like a category for more specific tag values.
        value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: The optional part of a key-value pair that make up a tag. A
            `value` acts as a descriptor within a tag category (key).
      required:
      - key
      - value
      description: Optional metadata that you apply to a resource to assist with categorization
        and organization. Each tag consists of a key and an optional value, both of
        which you define. Tag keys can have a maximum character length of 128 characters,
        and tag values can have a maximum length of 256 characters.
    TagResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the resource to add tags
            to.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: The tags to add to the resource. A tag is an array of key-value
            pairs. Tag keys can have a maximum character length of 128 characters,
            and tag values can have a maximum length of 256 characters.
      required:
      - resourceArn
      - tags
      description: ''
    TagResourceOutput:
      type: object
      properties: {}
      description: ''
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TagsLimit:
      type: integer
      minimum: 1
      maximum: 50
    TcpRetryPolicyEvent:
      type: string
      enum:
      - connection-error
    TcpRetryPolicyEvents:
      type: array
      items:
        $ref: '#/components/schemas/TcpRetryPolicyEvent'
    TcpRoute:
      type: object
      properties:
        action:
          allOf:
          - $ref: '#/components/schemas/TcpRouteAction'
          description: The action to take if a match is determined.
        timeout:
          allOf:
          - $ref: '#/components/schemas/TcpTimeout'
          description: An object that represents types of timeouts.
        match:
          allOf:
          - $ref: '#/components/schemas/TcpRouteMatch'
          description: An object that represents the criteria for determining a request
            match.
      required:
      - action
      description: An object that represents a TCP route type.
    TcpRouteAction:
      type: object
      properties:
        weightedTargets:
          allOf:
          - $ref: '#/components/schemas/WeightedTargets'
          description: An object that represents the targets that traffic is routed
            to when a request matches the route.
      required:
      - weightedTargets
      description: An object that represents the action to take if a match is determined.
    TcpRouteMatch:
      type: object
      properties:
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          description: The port number to match on.
      description: An object representing the TCP route to match.
    TcpTimeout:
      type: object
      properties:
        idle:
          allOf:
          - $ref: '#/components/schemas/Duration'
          description: An object that represents an idle timeout. An idle timeout
            bounds the amount of time that a connection may be idle. The default value
            is none.
      description: An object that represents types of timeouts.
    TextFormat:
      type: string
      minLength: 1
      maxLength: 1000
    TlsValidationContext:
      type: object
      properties:
        trust:
          allOf:
          - $ref: '#/components/schemas/TlsValidationContextTrust'
          description: A reference to where to retrieve the trust chain when validating
            a peer’s Transport Layer Security (TLS) certificate.
        subjectAlternativeNames:
          allOf:
          - $ref: '#/components/schemas/SubjectAlternativeNames'
          description: A reference to an object that represents the SANs for a Transport
            Layer Security (TLS) validation context. If you don't specify SANs on
            the _terminating_ mesh endpoint, the Envoy proxy for that node doesn't
            verify the SAN on a peer client certificate. If you don't specify SANs
            on the _originating_ mesh endpoint, the SAN on the certificate provided
            by the terminating endpoint must match the mesh endpoint service discovery
            configuration. Since SPIRE vended certificates have a SPIFFE ID as a name,
            you must set the SAN since the name doesn't match the service discovery
            name.
      required:
      - trust
      description: An object that represents how the proxy will validate its peer
        during Transport Layer Security (TLS) negotiation.
    TlsValidationContextAcmTrust:
      type: object
      properties:
        certificateAuthorityArns:
          allOf:
          - $ref: '#/components/schemas/CertificateAuthorityArns'
          description: One or more ACM Amazon Resource Name (ARN)s.
      required:
      - certificateAuthorityArns
      description: An object that represents a Transport Layer Security (TLS) validation
        context trust for an Certificate Manager certificate.
    TlsValidationContextFileTrust:
      type: object
      properties:
        certificateChain:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          description: The certificate trust chain for a certificate stored on the
            file system of the virtual node that the proxy is running on.
      required:
      - certificateChain
      description: An object that represents a Transport Layer Security (TLS) validation
        context trust for a local file.
    TlsValidationContextSdsTrust:
      type: object
      properties:
        secretName:
          allOf:
          - $ref: '#/components/schemas/SdsSecretName'
          description: A reference to an object that represents the name of the secret
            for a Transport Layer Security (TLS) Secret Discovery Service validation
            context trust.
      required:
      - secretName
      description: An object that represents a Transport Layer Security (TLS) Secret
        Discovery Service validation context trust. The proxy must be configured with
        a local SDS provider via a Unix Domain Socket. See App Mesh [TLS documentation](https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html)
        for more info.
    TlsValidationContextTrust:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/TlsValidationContextAcmTrust'
        description: |-
          A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.
      - allOf:
        - $ref: '#/components/schemas/TlsValidationContextFileTrust'
        description: |-
          An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
      - allOf:
        - $ref: '#/components/schemas/TlsValidationContextSdsTrust'
        description: |-
          A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust.
      description: |-
        An object that represents a Transport Layer Security (TLS) validation context trust.
    TooManyRequestsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The maximum request rate permitted by the App Mesh APIs has been
        exceeded for your account. For best results, use an increasing or variable
        sleep interval between requests.
    TooManyTagsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request exceeds the maximum allowed number of tags allowed
        per resource. The current limit is 50 user tags per resource. You must reduce
        the number of tags in the request. None of the tags in this request were applied.
    UntagResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the resource to delete tags
            from.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The keys of the tags to be removed.
      required:
      - resourceArn
      - tagKeys
      description: ''
    UntagResourceOutput:
      type: object
      properties: {}
      description: ''
    UpdateGatewayRouteInput:
      type: object
      properties:
        gatewayRouteName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the gateway route to update.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the gateway route resides
            in.
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual gateway that the gateway route is associated
            with.
        spec:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteSpec'
          description: The new gateway route specification to apply. This overwrites
            the existing data.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - gatewayRouteName
      - meshName
      - virtualGatewayName
      - spec
    UpdateGatewayRouteOutput:
      type: object
      properties:
        gatewayRoute:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteData'
          description: A full description of the gateway route that was updated.
      required:
      - gatewayRoute
    UpdateMeshInput:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh to update.
        spec:
          allOf:
          - $ref: '#/components/schemas/MeshSpec'
          description: The service mesh specification to apply.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
      required:
      - meshName
      description: ''
    UpdateMeshOutput:
      type: object
      properties:
        mesh:
          $ref: '#/components/schemas/MeshData'
      required:
      - mesh
      description: ''
    UpdateRouteInput:
      type: object
      properties:
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the route to update.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the route resides in.
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router that the route is associated
            with.
        spec:
          allOf:
          - $ref: '#/components/schemas/RouteSpec'
          description: The new route specification to apply. This overwrites the existing
            data.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - routeName
      - meshName
      - virtualRouterName
      - spec
      description: ''
    UpdateRouteOutput:
      type: object
      properties:
        route:
          allOf:
          - $ref: '#/components/schemas/RouteData'
          description: A full description of the route that was updated.
      required:
      - route
      description: ''
    UpdateVirtualGatewayInput:
      type: object
      properties:
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual gateway to update.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual gateway resides
            in.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewaySpec'
          description: The new virtual gateway specification to apply. This overwrites
            the existing data.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualGatewayName
      - meshName
      - spec
    UpdateVirtualGatewayOutput:
      type: object
      properties:
        virtualGateway:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayData'
          description: A full description of the virtual gateway that was updated.
      required:
      - virtualGateway
    UpdateVirtualNodeInput:
      type: object
      properties:
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node to update.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual node resides
            in.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeSpec'
          description: The new virtual node specification to apply. This overwrites
            the existing data.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualNodeName
      - meshName
      - spec
      description: ''
    UpdateVirtualNodeOutput:
      type: object
      properties:
        virtualNode:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeData'
          description: A full description of the virtual node that was updated.
      required:
      - virtualNode
      description: ''
    UpdateVirtualRouterInput:
      type: object
      properties:
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router to update.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual router resides
            in.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterSpec'
          description: The new virtual router specification to apply. This overwrites
            the existing data.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualRouterName
      - meshName
      - spec
      description: ''
    UpdateVirtualRouterOutput:
      type: object
      properties:
        virtualRouter:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterData'
          description: A full description of the virtual router that was updated.
      required:
      - virtualRouter
      description: ''
    UpdateVirtualServiceInput:
      type: object
      properties:
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service to update.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual service resides
            in.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceSpec'
          description: The new virtual service specification to apply. This overwrites
            the existing data.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Up to 36 letters, numbers, hyphens, and
            underscores are allowed.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
      required:
      - virtualServiceName
      - meshName
      - spec
      description: ''
    UpdateVirtualServiceOutput:
      type: object
      properties:
        virtualService:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceData'
          description: A full description of the virtual service that was updated.
      required:
      - virtualService
      description: ''
    VirtualGatewayAccessLog:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayFileAccessLog'
        description: |-
          The file object to send virtual gateway access logs to.
      description: |-
        The access log configuration for a virtual gateway.
    VirtualGatewayBackendDefaults:
      type: object
      properties:
        clientPolicy:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayClientPolicy'
          description: A reference to an object that represents a client policy.
      description: An object that represents the default properties for a backend.
    VirtualGatewayCertificateAuthorityArns:
      type: array
      items:
        $ref: '#/components/schemas/Arn'
    VirtualGatewayClientPolicy:
      type: object
      properties:
        tls:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayClientPolicyTls'
          description: A reference to an object that represents a Transport Layer
            Security (TLS) client policy.
      description: An object that represents a client policy.
    VirtualGatewayClientPolicyTls:
      type: object
      properties:
        enforce:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Whether the policy is enforced. The default is `True`, if a
            value isn't specified.
        ports:
          allOf:
          - $ref: '#/components/schemas/PortSet'
          description: One or more ports that the policy is enforced for.
        certificate:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayClientTlsCertificate'
          description: A reference to an object that represents a virtual gateway's
            client's Transport Layer Security (TLS) certificate.
        validation:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayTlsValidationContext'
          description: A reference to an object that represents a Transport Layer
            Security (TLS) validation context.
      required:
      - validation
      description: An object that represents a Transport Layer Security (TLS) client
        policy.
    VirtualGatewayClientTlsCertificate:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayListenerTlsFileCertificate'
        description: |-
          An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see [ Transport Layer Security (TLS) ](https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html).
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayListenerTlsSdsCertificate'
        description: |-
          A reference to an object that represents a virtual gateway's client's Secret Discovery Service certificate.
      description: |-
        An object that represents the virtual gateway's client's Transport Layer Security (TLS) certificate.
    VirtualGatewayConnectionPool:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayHttpConnectionPool'
        description: |-
          An object that represents a type of connection pool.
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayHttp2ConnectionPool'
        description: |-
          An object that represents a type of connection pool.
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayGrpcConnectionPool'
        description: |-
          An object that represents a type of connection pool.
      description: |-
        An object that represents the type of virtual gateway connection pool.

        Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.

        If not present the default value for `maxPendingRequests` is `2147483647`.
    VirtualGatewayData:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual gateway resides
            in.
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual gateway.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewaySpec'
          description: The specifications of the virtual gateway.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayStatus'
          description: The current status of the virtual gateway.
      required:
      - meshName
      - virtualGatewayName
      - spec
      - metadata
      - status
      description: An object that represents a virtual gateway returned by a describe
        operation.
    VirtualGatewayFileAccessLog:
      type: object
      properties:
        path:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          description: The file path to write access logs to. You can use `/dev/stdout`
            to send access logs to standard out and configure your Envoy container
            to use a log driver, such as `awslogs`, to export the access logs to a
            log storage service such as Amazon CloudWatch Logs. You can also specify
            a path in the Envoy container's file system to write the files to disk.
        format:
          allOf:
          - $ref: '#/components/schemas/LoggingFormat'
          description: The specified format for the virtual gateway access logs. It
            can be either `json_format` or `text_format`.
      required:
      - path
      description: An object that represents an access log file.
    VirtualGatewayGrpcConnectionPool:
      type: object
      properties:
        maxRequests:
          allOf:
          - $ref: '#/components/schemas/MaxRequests'
          description: Maximum number of inflight requests Envoy can concurrently
            support across hosts in upstream cluster.
      required:
      - maxRequests
      description: An object that represents a type of connection pool.
    VirtualGatewayHealthCheckIntervalMillis:
      type: integer
      format: int64
      minimum: 5000
      maximum: 300000
    VirtualGatewayHealthCheckPolicy:
      type: object
      properties:
        timeoutMillis:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayHealthCheckTimeoutMillis'
          description: The amount of time to wait when receiving a response from the
            health check, in milliseconds.
        intervalMillis:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayHealthCheckIntervalMillis'
          description: The time period in milliseconds between each health check execution.
        protocol:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayPortProtocol'
          description: The protocol for the health check request. If you specify `grpc`,
            then your service must conform to the [GRPC Health Checking Protocol](https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
        port:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          description: The destination port for the health check request. This port
            must match the port defined in the PortMapping for the listener.
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The destination path for the health check request. This value
            is only used if the specified protocol is HTTP or HTTP/2. For any other
            protocol, this value is ignored.
        healthyThreshold:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayHealthCheckThreshold'
          description: The number of consecutive successful health checks that must
            occur before declaring the listener healthy.
        unhealthyThreshold:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayHealthCheckThreshold'
          description: The number of consecutive failed health checks that must occur
            before declaring a virtual gateway unhealthy.
      required:
      - timeoutMillis
      - intervalMillis
      - protocol
      - healthyThreshold
      - unhealthyThreshold
      description: An object that represents the health check policy for a virtual
        gateway's listener.
    VirtualGatewayHealthCheckThreshold:
      type: integer
      minimum: 2
      maximum: 10
    VirtualGatewayHealthCheckTimeoutMillis:
      type: integer
      format: int64
      minimum: 2000
      maximum: 60000
    VirtualGatewayHttp2ConnectionPool:
      type: object
      properties:
        maxRequests:
          allOf:
          - $ref: '#/components/schemas/MaxRequests'
          description: Maximum number of inflight requests Envoy can concurrently
            support across hosts in upstream cluster.
      required:
      - maxRequests
      description: An object that represents a type of connection pool.
    VirtualGatewayHttpConnectionPool:
      type: object
      properties:
        maxConnections:
          allOf:
          - $ref: '#/components/schemas/MaxConnections'
          description: Maximum number of outbound TCP connections Envoy can establish
            concurrently with all hosts in upstream cluster.
        maxPendingRequests:
          allOf:
          - $ref: '#/components/schemas/MaxPendingRequests'
          description: Number of overflowing requests after `max_connections` Envoy
            will queue to upstream cluster.
      required:
      - maxConnections
      description: An object that represents a type of connection pool.
    VirtualGatewayList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualGatewayRef'
    VirtualGatewayListener:
      type: object
      properties:
        healthCheck:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayHealthCheckPolicy'
          description: The health check information for the listener.
        portMapping:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayPortMapping'
          description: The port mapping information for the listener.
        tls:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayListenerTls'
          description: A reference to an object that represents the Transport Layer
            Security (TLS) properties for the listener.
        connectionPool:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayConnectionPool'
          description: The connection pool information for the virtual gateway listener.
      required:
      - portMapping
      description: An object that represents a listener for a virtual gateway.
    VirtualGatewayListenerTls:
      type: object
      properties:
        mode:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayListenerTlsMode'
          description: "Specify one of the following modes.\n\n  * ****STRICT – Listener\
            \ only accepts connections with TLS enabled.\n\n  * ****PERMISSIVE – Listener\
            \ accepts connections with or without TLS enabled.\n\n  * ****DISABLED\
            \ – Listener only accepts connections without TLS."
        validation:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContext'
          description: A reference to an object that represents a virtual gateway's
            listener's Transport Layer Security (TLS) validation context.
        certificate:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayListenerTlsCertificate'
          description: An object that represents a Transport Layer Security (TLS)
            certificate.
      required:
      - mode
      - certificate
      description: An object that represents the Transport Layer Security (TLS) properties
        for a listener.
    VirtualGatewayListenerTlsAcmCertificate:
      type: object
      properties:
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) for the certificate. The certificate
            must meet specific requirements and you must have proxy authorization
            enabled. For more information, see [Transport Layer Security (TLS)](https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites).
      required:
      - certificateArn
      description: An object that represents an Certificate Manager certificate.
    VirtualGatewayListenerTlsCertificate:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayListenerTlsAcmCertificate'
        description: |-
          A reference to an object that represents an Certificate Manager certificate.
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayListenerTlsFileCertificate'
        description: |-
          A reference to an object that represents a local file certificate.
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayListenerTlsSdsCertificate'
        description: |-
          A reference to an object that represents a virtual gateway's listener's Secret Discovery Service certificate.
      description: |-
        An object that represents a listener's Transport Layer Security (TLS) certificate.
    VirtualGatewayListenerTlsFileCertificate:
      type: object
      properties:
        certificateChain:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          description: The certificate chain for the certificate.
        privateKey:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          description: The private key for a certificate stored on the file system
            of the mesh endpoint that the proxy is running on.
      required:
      - certificateChain
      - privateKey
      description: An object that represents a local file certificate. The certificate
        must meet specific requirements and you must have proxy authorization enabled.
        For more information, see [Transport Layer Security (TLS)](https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites).
    VirtualGatewayListenerTlsMode:
      type: string
      enum:
      - STRICT
      - PERMISSIVE
      - DISABLED
    VirtualGatewayListenerTlsSdsCertificate:
      type: object
      properties:
        secretName:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewaySdsSecretName'
          description: A reference to an object that represents the name of the secret
            secret requested from the Secret Discovery Service provider representing
            Transport Layer Security (TLS) materials like a certificate or certificate
            chain.
      required:
      - secretName
      description: An object that represents the virtual gateway's listener's Secret
        Discovery Service certificate.The proxy must be configured with a local SDS
        provider via a Unix Domain Socket. See App Mesh[TLS documentation](https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html)
        for more info.
    VirtualGatewayListenerTlsValidationContext:
      type: object
      properties:
        trust:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContextTrust'
          description: A reference to where to retrieve the trust chain when validating
            a peer’s Transport Layer Security (TLS) certificate.
        subjectAlternativeNames:
          allOf:
          - $ref: '#/components/schemas/SubjectAlternativeNames'
          description: A reference to an object that represents the SANs for a virtual
            gateway listener's Transport Layer Security (TLS) validation context.
      required:
      - trust
      description: An object that represents a virtual gateway's listener's Transport
        Layer Security (TLS) validation context.
    VirtualGatewayListenerTlsValidationContextTrust:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextFileTrust'
        description: |-
          An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextSdsTrust'
        description: |-
          A reference to an object that represents a virtual gateway's listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
      description: |-
        An object that represents a virtual gateway's listener's Transport Layer Security (TLS) validation context trust.
    VirtualGatewayListeners:
      type: array
      items:
        $ref: '#/components/schemas/VirtualGatewayListener'
    VirtualGatewayLogging:
      type: object
      properties:
        accessLog:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayAccessLog'
          description: The access log configuration.
      description: An object that represents logging information.
    VirtualGatewayPortMapping:
      type: object
      properties:
        port:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          description: The port used for the port mapping. Specify one protocol.
        protocol:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayPortProtocol'
          description: The protocol used for the port mapping.
      required:
      - port
      - protocol
      description: An object that represents a port mapping.
    VirtualGatewayPortProtocol:
      type: string
      enum:
      - http
      - http2
      - grpc
    VirtualGatewayRef:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the resource resides in.
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the resource.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the resource owner.
            If the account ID is not your own, then it's the ID of the mesh owner
            or of another account that the mesh is shared with. For more information
            about mesh sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the resource.
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The version of the resource. Resources are created at version
            1, and this version is incremented each time that they're updated.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            last updated.
      required:
      - meshName
      - virtualGatewayName
      - meshOwner
      - resourceOwner
      - arn
      - version
      - createdAt
      - lastUpdatedAt
      description: An object that represents a virtual gateway returned by a list
        operation.
    VirtualGatewaySdsSecretName:
      type: string
    VirtualGatewaySpec:
      type: object
      properties:
        backendDefaults:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayBackendDefaults'
          description: A reference to an object that represents the defaults for backends.
        listeners:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayListeners'
          description: The listeners that the mesh endpoint is expected to receive
            inbound traffic from. You can specify one listener.
        logging:
          $ref: '#/components/schemas/VirtualGatewayLogging'
      required:
      - listeners
      description: An object that represents the specification of a service mesh resource.
    VirtualGatewayStatus:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayStatusCode'
          description: The current status.
      required:
      - status
      description: An object that represents the status of the mesh resource.
    VirtualGatewayStatusCode:
      type: string
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
    VirtualGatewayTlsValidationContext:
      type: object
      properties:
        trust:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextTrust'
          description: A reference to where to retrieve the trust chain when validating
            a peer’s Transport Layer Security (TLS) certificate.
        subjectAlternativeNames:
          allOf:
          - $ref: '#/components/schemas/SubjectAlternativeNames'
          description: A reference to an object that represents the SANs for a virtual
            gateway's listener's Transport Layer Security (TLS) validation context.
      required:
      - trust
      description: An object that represents a Transport Layer Security (TLS) validation
        context.
    VirtualGatewayTlsValidationContextAcmTrust:
      type: object
      properties:
        certificateAuthorityArns:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayCertificateAuthorityArns'
          description: One or more ACM Amazon Resource Name (ARN)s.
      required:
      - certificateAuthorityArns
      description: An object that represents a Transport Layer Security (TLS) validation
        context trust for an Certificate Manager certificate.
    VirtualGatewayTlsValidationContextFileTrust:
      type: object
      properties:
        certificateChain:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          description: The certificate trust chain for a certificate stored on the
            file system of the virtual node that the proxy is running on.
      required:
      - certificateChain
      description: An object that represents a Transport Layer Security (TLS) validation
        context trust for a local file.
    VirtualGatewayTlsValidationContextSdsTrust:
      type: object
      properties:
        secretName:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewaySdsSecretName'
          description: A reference to an object that represents the name of the secret
            for a virtual gateway's Transport Layer Security (TLS) Secret Discovery
            Service validation context trust.
      required:
      - secretName
      description: An object that represents a virtual gateway's listener's Transport
        Layer Security (TLS) Secret Discovery Service validation context trust. The
        proxy must be configured with a local SDS provider via a Unix Domain Socket.
        See App Mesh [TLS documentation](https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html)
        for more info.
    VirtualGatewayTlsValidationContextTrust:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextAcmTrust'
        description: |-
          A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate.
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextFileTrust'
        description: |-
          An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
      - allOf:
        - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextSdsTrust'
        description: |-
          A reference to an object that represents a virtual gateway's Transport Layer Security (TLS) Secret Discovery Service validation context trust.
      description: |-
        An object that represents a Transport Layer Security (TLS) validation context trust.
    VirtualNodeConnectionPool:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VirtualNodeTcpConnectionPool'
        description: |-
          An object that represents a type of connection pool.
      - allOf:
        - $ref: '#/components/schemas/VirtualNodeHttpConnectionPool'
        description: |-
          An object that represents a type of connection pool.
      - allOf:
        - $ref: '#/components/schemas/VirtualNodeHttp2ConnectionPool'
        description: |-
          An object that represents a type of connection pool.
      - allOf:
        - $ref: '#/components/schemas/VirtualNodeGrpcConnectionPool'
        description: |-
          An object that represents a type of connection pool.
      description: |-
        An object that represents the type of virtual node connection pool.

        Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.

        If not present the default value for `maxPendingRequests` is `2147483647`.
    VirtualNodeData:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual node resides
            in.
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeSpec'
          description: The specifications of the virtual node.
        metadata:
          allOf:
          - $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the virtual node.
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeStatus'
          description: The current status for the virtual node.
      required:
      - meshName
      - virtualNodeName
      - spec
      - metadata
      - status
      description: An object that represents a virtual node returned by a describe
        operation.
    VirtualNodeGrpcConnectionPool:
      type: object
      properties:
        maxRequests:
          allOf:
          - $ref: '#/components/schemas/MaxRequests'
          description: Maximum number of inflight requests Envoy can concurrently
            support across hosts in upstream cluster.
      required:
      - maxRequests
      description: An object that represents a type of connection pool.
    VirtualNodeHttp2ConnectionPool:
      type: object
      properties:
        maxRequests:
          allOf:
          - $ref: '#/components/schemas/MaxRequests'
          description: Maximum number of inflight requests Envoy can concurrently
            support across hosts in upstream cluster.
      required:
      - maxRequests
      description: An object that represents a type of connection pool.
    VirtualNodeHttpConnectionPool:
      type: object
      properties:
        maxConnections:
          allOf:
          - $ref: '#/components/schemas/MaxConnections'
          description: Maximum number of outbound TCP connections Envoy can establish
            concurrently with all hosts in upstream cluster.
        maxPendingRequests:
          allOf:
          - $ref: '#/components/schemas/MaxPendingRequests'
          description: Number of overflowing requests after `max_connections` Envoy
            will queue to upstream cluster.
      required:
      - maxConnections
      description: An object that represents a type of connection pool.
    VirtualNodeList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualNodeRef'
    VirtualNodeRef:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual node resides
            in.
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the resource owner.
            If the account ID is not your own, then it's the ID of the mesh owner
            or of another account that the mesh is shared with. For more information
            about mesh sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the virtual node.
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The version of the resource. Resources are created at version
            1, and this version is incremented each time that they're updated.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            last updated.
      required:
      - meshName
      - virtualNodeName
      - meshOwner
      - resourceOwner
      - arn
      - version
      - createdAt
      - lastUpdatedAt
      description: An object that represents a virtual node returned by a list operation.
    VirtualNodeServiceProvider:
      type: object
      properties:
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node that is acting as a service provider.
      required:
      - virtualNodeName
      description: An object that represents a virtual node service provider.
    VirtualNodeSpec:
      type: object
      properties:
        serviceDiscovery:
          allOf:
          - $ref: '#/components/schemas/ServiceDiscovery'
          description: The service discovery information for the virtual node. If
            your virtual node does not expect ingress traffic, you can omit this parameter.
            If you specify a `listener`, then you must specify service discovery information.
        listeners:
          allOf:
          - $ref: '#/components/schemas/Listeners'
          description: The listener that the virtual node is expected to receive inbound
            traffic from. You can specify one listener.
        backends:
          allOf:
          - $ref: '#/components/schemas/Backends'
          description: The backends that the virtual node is expected to send outbound
            traffic to.
        backendDefaults:
          allOf:
          - $ref: '#/components/schemas/BackendDefaults'
          description: A reference to an object that represents the defaults for backends.
        logging:
          allOf:
          - $ref: '#/components/schemas/Logging'
          description: The inbound and outbound access logging information for the
            virtual node.
      description: An object that represents the specification of a virtual node.
    VirtualNodeStatus:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeStatusCode'
          description: The current status of the virtual node.
      required:
      - status
      description: An object that represents the current status of the virtual node.
    VirtualNodeStatusCode:
      type: string
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
    VirtualNodeTcpConnectionPool:
      type: object
      properties:
        maxConnections:
          allOf:
          - $ref: '#/components/schemas/MaxConnections'
          description: Maximum number of outbound TCP connections Envoy can establish
            concurrently with all hosts in upstream cluster.
      required:
      - maxConnections
      description: An object that represents a type of connection pool.
    VirtualRouterData:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual router resides
            in.
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterSpec'
          description: The specifications of the virtual router.
        metadata:
          allOf:
          - $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the virtual router.
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterStatus'
          description: The current status of the virtual router.
      required:
      - meshName
      - virtualRouterName
      - spec
      - metadata
      - status
      description: An object that represents a virtual router returned by a describe
        operation.
    VirtualRouterList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualRouterRef'
    VirtualRouterListener:
      type: object
      properties:
        portMapping:
          $ref: '#/components/schemas/PortMapping'
      required:
      - portMapping
      description: An object that represents a virtual router listener.
    VirtualRouterListeners:
      type: array
      items:
        $ref: '#/components/schemas/VirtualRouterListener'
    VirtualRouterRef:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual router resides
            in.
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the resource owner.
            If the account ID is not your own, then it's the ID of the mesh owner
            or of another account that the mesh is shared with. For more information
            about mesh sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the virtual router.
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The version of the resource. Resources are created at version
            1, and this version is incremented each time that they're updated.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            last updated.
      required:
      - meshName
      - virtualRouterName
      - meshOwner
      - resourceOwner
      - arn
      - version
      - createdAt
      - lastUpdatedAt
      description: An object that represents a virtual router returned by a list operation.
    VirtualRouterServiceProvider:
      type: object
      properties:
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router that is acting as a service
            provider.
      required:
      - virtualRouterName
      description: An object that represents a virtual node service provider.
    VirtualRouterSpec:
      type: object
      properties:
        listeners:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterListeners'
          description: The listeners that the virtual router is expected to receive
            inbound traffic from. You can specify one listener.
      description: An object that represents the specification of a virtual router.
    VirtualRouterStatus:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterStatusCode'
          description: The current status of the virtual router.
      required:
      - status
      description: An object that represents the status of a virtual router.
    VirtualRouterStatusCode:
      type: string
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
    VirtualServiceBackend:
      type: object
      properties:
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service that is acting as a virtual
            node backend.
        clientPolicy:
          allOf:
          - $ref: '#/components/schemas/ClientPolicy'
          description: A reference to an object that represents the client policy
            for a backend.
      required:
      - virtualServiceName
      description: An object that represents a virtual service backend for a virtual
        node.
    VirtualServiceData:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual service resides
            in.
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service.
        spec:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceSpec'
          description: The specifications of the virtual service.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceStatus'
          description: The current status of the virtual service.
      required:
      - meshName
      - virtualServiceName
      - spec
      - metadata
      - status
      description: An object that represents a virtual service returned by a describe
        operation.
    VirtualServiceList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualServiceRef'
    VirtualServiceProvider:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VirtualNodeServiceProvider'
        description: |-
          The virtual node associated with a virtual service.
      - allOf:
        - $ref: '#/components/schemas/VirtualRouterServiceProvider'
        description: |-
          The virtual router associated with a virtual service.
      description: |-
        An object that represents the provider for a virtual service.
    VirtualServiceRef:
      type: object
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual service resides
            in.
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the service mesh
            owner. If the account ID is not your own, then it's the ID of the account
            that shared the mesh with your account. For more information about mesh
            sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services IAM account ID of the resource owner.
            If the account ID is not your own, then it's the ID of the mesh owner
            or of another account that the mesh is shared with. For more information
            about mesh sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the virtual service.
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The version of the resource. Resources are created at version
            1, and this version is incremented each time that they're updated.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was
            last updated.
      required:
      - meshName
      - virtualServiceName
      - meshOwner
      - resourceOwner
      - arn
      - version
      - createdAt
      - lastUpdatedAt
      description: An object that represents a virtual service returned by a list
        operation.
    VirtualServiceSpec:
      type: object
      properties:
        provider:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceProvider'
          description: The App Mesh object that is acting as the provider for a virtual
            service. You can specify a single virtual node or virtual router.
      description: An object that represents the specification of a virtual service.
    VirtualServiceStatus:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceStatusCode'
          description: The current status of the virtual service.
      required:
      - status
      description: An object that represents the status of a virtual service.
    VirtualServiceStatusCode:
      type: string
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
    WeightedTarget:
      type: object
      properties:
        virtualNode:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The virtual node to associate with the weighted target.
        weight:
          allOf:
          - $ref: '#/components/schemas/PercentInt'
          description: The relative weight of the weighted target.
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          description: The targeted port of the weighted object.
      required:
      - virtualNode
      - weight
      description: An object that represents a target and its relative weight. Traffic
        is distributed across targets according to their relative weight. For example,
        a weighted target with a relative weight of 50 receives five times as much
        traffic as one with a relative weight of 10\. The total weight for all targets
        combined must be less than or equal to 100.
    WeightedTargets:
      type: array
      items:
        $ref: '#/components/schemas/WeightedTarget'
