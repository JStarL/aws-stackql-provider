openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: workspaces_thin_client
  x-aws-serviceName: workspacesthinclient
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2023-08-22'
  title: Amazon WorkSpaces Thin Client
  description: |-
    Amazon WorkSpaces Thin Client is an affordable device built to work with Amazon Web Services End User Computing (EUC) virtual desktops to provide users with a complete cloud desktop solution. WorkSpaces Thin Client is a compact device designed to connect up to two monitors and USB devices like a keyboard, mouse, headset, and webcam. To maximize endpoint security, WorkSpaces Thin Client devices do not allow local data storage or installation of unapproved applications. The WorkSpaces Thin Client device ships preloaded with device management software.

    You can use these APIs to complete WorkSpaces Thin Client tasks, such as creating environments or viewing devices. For more information about WorkSpaces Thin Client, including the required permissions to use the service, see the [Amazon WorkSpaces Thin Client Administrator Guide](https://docs.aws.amazon.com/workspaces-thin-client/latest/ag/). For more information about using the Command Line Interface (CLI) to manage your WorkSpaces Thin Client resources, see the [WorkSpaces Thin Client section of the CLI Reference](https://docs.aws.amazon.com/cli/latest/reference/workspaces-thin-client/index.html).
servers:
- description: The Amazon WorkSpaces Thin Client regional endpoint
  url: https://thinclient.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /environments:
    post:
      operationId: CreateEnvironment
      description: |-
        Creates an environment for your thin client devices.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/EnvironmentName'
                desktopArn:
                  $ref: '#/components/schemas/Arn'
                desktopEndpoint:
                  $ref: '#/components/schemas/DesktopEndpoint'
                softwareSetUpdateSchedule:
                  $ref: '#/components/schemas/SoftwareSetUpdateSchedule'
                maintenanceWindow:
                  $ref: '#/components/schemas/MaintenanceWindow'
                softwareSetUpdateMode:
                  $ref: '#/components/schemas/SoftwareSetUpdateMode'
                desiredSoftwareSetId:
                  $ref: '#/components/schemas/SoftwareSetId'
                kmsKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                deviceCreationTags:
                  $ref: '#/components/schemas/DeviceCreationTagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Your request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListEnvironments
      description: |-
        Returns a list of environments.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /devices/{id}:
    delete:
      operationId: DeleteDevice
      description: |-
        Deletes a thin client device.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DeviceId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetDevice
      description: |-
        Returns information for a thin client device.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DeviceId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateDevice
      description: |-
        Updates a thin client device.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DeviceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/DeviceName'
                desiredSoftwareSetId:
                  $ref: '#/components/schemas/SoftwareSetId'
                softwareSetUpdateSchedule:
                  $ref: '#/components/schemas/SoftwareSetUpdateSchedule'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /environments/{id}:
    delete:
      operationId: DeleteEnvironment
      description: |-
        Deletes an environment.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetEnvironment
      description: |-
        Returns information for an environment.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateEnvironment
      description: |-
        Updates an environment.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/EnvironmentName'
                desktopArn:
                  $ref: '#/components/schemas/Arn'
                desktopEndpoint:
                  $ref: '#/components/schemas/DesktopEndpoint'
                softwareSetUpdateSchedule:
                  $ref: '#/components/schemas/SoftwareSetUpdateSchedule'
                maintenanceWindow:
                  $ref: '#/components/schemas/MaintenanceWindow'
                softwareSetUpdateMode:
                  $ref: '#/components/schemas/SoftwareSetUpdateMode'
                desiredSoftwareSetId:
                  $ref: '#/components/schemas/SoftwareSetIdOrEmptyString'
                deviceCreationTags:
                  $ref: '#/components/schemas/DeviceCreationTagsMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /deregister-device/{id}:
    post:
      operationId: DeregisterDevice
      description: |-
        Deregisters a thin client device.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DeviceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetDeviceStatus:
                  $ref: '#/components/schemas/TargetDeviceStatus'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /softwaresets/{id}:
    get:
      operationId: GetSoftwareSet
      description: |-
        Returns information for a software set.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SoftwareSetId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateSoftwareSet
      description: |-
        Updates a software set.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SoftwareSetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                validationStatus:
                  $ref: '#/components/schemas/SoftwareSetValidationStatus'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /devices:
    get:
      operationId: ListDevices
      description: |-
        Returns a list of thin client devices.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /softwaresets:
    get:
      operationId: ListSoftwareSets
      description: |-
        Returns a list of software sets.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Returns a list of tags for a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Assigns one or more tags (key-value pairs) to the specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes a tag or tags from a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeys'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The server encountered an internal error and is unable to complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the specified constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
      description: You do not have sufficient access to perform this action.
    ActivationCode:
      type: string
      pattern: ^[a-z]{2}[a-z0-9]{6}$
    ApplyTimeOf:
      type: string
      enum:
      - UTC
      - DEVICE
    Arn:
      type: string
      pattern: ^arn:[\w+=\/,.@-]+:[a-zA-Z0-9\-]+:[a-zA-Z0-9\-]*:[0-9]{0,12}:[a-zA-Z0-9\-\/\._]+$
      minLength: 20
      maxLength: 2048
    ClientToken:
      type: string
      minLength: 1
      maxLength: 512
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The ID of the resource associated with the request.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of the resource associated with the request.
      description: The requested operation would cause a conflict with the current
        state of a service resource associated with the request. Resolve the conflict
        before retrying this request.
    CreateEnvironmentRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name for the environment.
        desktopArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the desktop to stream from
            Amazon WorkSpaces, WorkSpaces Secure Browser, or AppStream 2.0.
        desktopEndpoint:
          allOf:
          - $ref: '#/components/schemas/DesktopEndpoint'
          description: The URL for the identity provider login (only for environments
            that use AppStream 2.0).
        softwareSetUpdateSchedule:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateSchedule'
          description: An option to define if software updates should be applied within
            a maintenance window.
        maintenanceWindow:
          allOf:
          - $ref: '#/components/schemas/MaintenanceWindow'
          description: A specification for a time window to apply software updates.
        softwareSetUpdateMode:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateMode'
          description: An option to define which software updates to apply.
        desiredSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set to apply.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the Key Management Service
            key to use to encrypt the environment.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'Specifies a unique, case-sensitive identifier that you provide
            to ensure the idempotency of the request. This lets you safely retry the
            request without accidentally performing the same operation a second time.
            Passing the same value to a later call to an operation requires that you
            also pass the same value for all other parameters. We recommend that you
            use a [UUID type of value](https://wikipedia.org/wiki/Universally_unique_identifier).


            If you don''t provide this value, then Amazon Web Services generates a
            random one for you.


            If you retry the operation with the same `ClientToken`, but with different
            parameters, the retry fails with an `IdempotentParameterMismatch` error.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A map of the key-value pairs of the tag or tags to assign to
            the resource.
        deviceCreationTags:
          allOf:
          - $ref: '#/components/schemas/DeviceCreationTagsMap'
          description: A map of the key-value pairs of the tag or tags to assign to
            the newly created devices for this environment.
      required:
      - desktopArn
    CreateEnvironmentResponse:
      type: object
      properties:
        environment:
          allOf:
          - $ref: '#/components/schemas/EnvironmentSummary'
          description: Describes an environment.
    DayOfWeek:
      type: string
      enum:
      - MONDAY
      - TUESDAY
      - WEDNESDAY
      - THURSDAY
      - FRIDAY
      - SATURDAY
      - SUNDAY
    DayOfWeekList:
      type: array
      items:
        $ref: '#/components/schemas/DayOfWeek'
    DeleteDeviceRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DeviceId'
          description: The ID of the device to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'Specifies a unique, case-sensitive identifier that you provide
            to ensure the idempotency of the request. This lets you safely retry the
            request without accidentally performing the same operation a second time.
            Passing the same value to a later call to an operation requires that you
            also pass the same value for all other parameters. We recommend that you
            use a [UUID type of value](https://wikipedia.org/wiki/Universally_unique_identifier).


            If you don''t provide this value, then Amazon Web Services generates a
            random one for you.


            If you retry the operation with the same `ClientToken`, but with different
            parameters, the retry fails with an `IdempotentParameterMismatch` error.'
      required:
      - id
    DeleteDeviceResponse:
      type: object
      properties: {}
    DeleteEnvironmentRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'Specifies a unique, case-sensitive identifier that you provide
            to ensure the idempotency of the request. This lets you safely retry the
            request without accidentally performing the same operation a second time.
            Passing the same value to a later call to an operation requires that you
            also pass the same value for all other parameters. We recommend that you
            use a [UUID type of value](https://wikipedia.org/wiki/Universally_unique_identifier).


            If you don''t provide this value, then Amazon Web Services generates a
            random one for you.


            If you retry the operation with the same `ClientToken`, but with different
            parameters, the retry fails with an `IdempotentParameterMismatch` error.'
      required:
      - id
    DeleteEnvironmentResponse:
      type: object
      properties: {}
    DeregisterDeviceRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DeviceId'
          description: The ID of the device to deregister.
        targetDeviceStatus:
          allOf:
          - $ref: '#/components/schemas/TargetDeviceStatus'
          description: The desired new status for the device.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'Specifies a unique, case-sensitive identifier that you provide
            to ensure the idempotency of the request. This lets you safely retry the
            request without accidentally performing the same operation a second time.
            Passing the same value to a later call to an operation requires that you
            also pass the same value for all other parameters. We recommend that you
            use a [UUID type of value](https://wikipedia.org/wiki/Universally_unique_identifier).


            If you don''t provide this value, then Amazon Web Services generates a
            random one for you.


            If you retry the operation with the same `ClientToken`, but with different
            parameters, the retry fails with an `IdempotentParameterMismatch` error.'
      required:
      - id
    DeregisterDeviceResponse:
      type: object
      properties: {}
    DesktopEndpoint:
      type: string
      pattern: ^(https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,32}(:[0-9]{1,5})?(\/.*)?$
      minLength: 1
      maxLength: 1024
    DesktopType:
      type: string
      enum:
      - workspaces
      - appstream
      - workspaces-web
    Device:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DeviceId'
          description: The ID of the device.
        serialNumber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The hardware serial number of the device.
        name:
          allOf:
          - $ref: '#/components/schemas/DeviceName'
          description: The name of the device.
        model:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The model number of the device.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment the device is associated with.
        status:
          allOf:
          - $ref: '#/components/schemas/DeviceStatus'
          description: The status of the device.
        currentSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set currently installed on the device.
        currentSoftwareSetVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the software set currently installed on the
            device.
        desiredSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set which the device has been set to.
        pendingSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set that is pending to be installed
            on the device.
        pendingSoftwareSetVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the software set that is pending to be installed
            on the device.
        softwareSetUpdateSchedule:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateSchedule'
          description: An option to define if software updates should be applied within
            a maintenance window.
        softwareSetComplianceStatus:
          allOf:
          - $ref: '#/components/schemas/DeviceSoftwareSetComplianceStatus'
          description: Describes if the software currently installed on the device
            is a supported version.
        softwareSetUpdateStatus:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateStatus'
          description: Describes if the device has a supported version of software
            installed.
        lastConnectedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the most recent session on the device.
        lastPostureAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the most recent check-in of the device.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the device was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the device was updated.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the device.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the Key Management Service
            key used to encrypt the device.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: The tag keys and optional values for the resource.
      description: Describes a thin client device.
    DeviceCreationTagKey:
      type: string
      pattern: ^(?!aws:)[A-Za-z0-9 _=@:.+-/]+$
      minLength: 1
      maxLength: 128
    DeviceCreationTagValue:
      type: string
      pattern: ^[A-Za-z0-9 _=@:.+-/]+$
      minLength: 0
      maxLength: 256
    DeviceCreationTagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DeviceCreationTagValue'
    DeviceId:
      type: string
      pattern: ^[a-zA-Z0-9]{24}$
    DeviceList:
      type: array
      items:
        $ref: '#/components/schemas/DeviceSummary'
    DeviceName:
      type: string
      pattern: ^$|^[0-9\p{IsAlphabetic}+:,.@'" -]*$
      maxLength: 64
    DeviceSoftwareSetComplianceStatus:
      type: string
      enum:
      - NONE
      - COMPLIANT
      - NOT_COMPLIANT
    DeviceStatus:
      type: string
      enum:
      - REGISTERED
      - DEREGISTERING
      - DEREGISTERED
      - ARCHIVED
    DeviceSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DeviceId'
          description: The ID of the device.
        serialNumber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The hardware serial number of the device.
        name:
          allOf:
          - $ref: '#/components/schemas/DeviceName'
          description: The name of the device.
        model:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The model number of the device.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment the device is associated with.
        status:
          allOf:
          - $ref: '#/components/schemas/DeviceStatus'
          description: The status of the device.
        currentSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set currently installed on the device.
        desiredSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set which the device has been set to.
        pendingSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set that is pending to be installed
            on the device.
        softwareSetUpdateSchedule:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateSchedule'
          description: An option to define if software updates should be applied within
            a maintenance window.
        lastConnectedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the most recent session on the device.
        lastPostureAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the most recent check-in of the device.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the device was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the device was updated.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the device.
      description: Describes a thin client device.
    Environment:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name of the environment.
        desktopArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the desktop to stream from
            Amazon WorkSpaces, WorkSpaces Secure Browser, or AppStream 2.0.
        desktopEndpoint:
          allOf:
          - $ref: '#/components/schemas/DesktopEndpoint'
          description: The URL for the identity provider login (only for environments
            that use AppStream 2.0).
        desktopType:
          allOf:
          - $ref: '#/components/schemas/DesktopType'
          description: The type of streaming desktop for the environment.
        activationCode:
          allOf:
          - $ref: '#/components/schemas/ActivationCode'
          description: The activation code to register a device to the environment.
        registeredDevicesCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of devices registered to the environment.
        softwareSetUpdateSchedule:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateSchedule'
          description: An option to define if software updates should be applied within
            a maintenance window.
        maintenanceWindow:
          allOf:
          - $ref: '#/components/schemas/MaintenanceWindow'
          description: A specification for a time window to apply software updates.
        softwareSetUpdateMode:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateMode'
          description: An option to define which software updates to apply.
        desiredSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set to apply.
        pendingSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set that is pending to be installed.
        pendingSoftwareSetVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the software set that is pending to be installed.
        softwareSetComplianceStatus:
          allOf:
          - $ref: '#/components/schemas/EnvironmentSoftwareSetComplianceStatus'
          description: Describes if the software currently installed on all devices
            in the environment is a supported version.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the device was updated.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the environment.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the Key Management Service
            key used to encrypt the environment.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: The tag keys and optional values for the resource.
        deviceCreationTags:
          allOf:
          - $ref: '#/components/schemas/DeviceCreationTagsMap'
          description: The tag keys and optional values for the newly created devices
            for this environment.
      description: Describes an environment.
    EnvironmentId:
      type: string
      pattern: ^[a-z0-9]{9}$
    EnvironmentList:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentSummary'
    EnvironmentName:
      type: string
      pattern: ^$|^[0-9\p{IsAlphabetic}+:,.@'" -][0-9\p{IsAlphabetic}+=:,.@'" -]*$
      maxLength: 64
    EnvironmentSoftwareSetComplianceStatus:
      type: string
      enum:
      - NO_REGISTERED_DEVICES
      - COMPLIANT
      - NOT_COMPLIANT
    EnvironmentSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name of the environment.
        desktopArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the desktop to stream from
            Amazon WorkSpaces, WorkSpaces Secure Browser, or AppStream 2.0.
        desktopEndpoint:
          allOf:
          - $ref: '#/components/schemas/DesktopEndpoint'
          description: The URL for the identity provider login (only for environments
            that use AppStream 2.0).
        desktopType:
          allOf:
          - $ref: '#/components/schemas/DesktopType'
          description: The type of streaming desktop for the environment.
        activationCode:
          allOf:
          - $ref: '#/components/schemas/ActivationCode'
          description: The activation code to register a device to the environment.
        softwareSetUpdateSchedule:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateSchedule'
          description: An option to define if software updates should be applied within
            a maintenance window.
        maintenanceWindow:
          allOf:
          - $ref: '#/components/schemas/MaintenanceWindow'
          description: A specification for a time window to apply software updates.
        softwareSetUpdateMode:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateMode'
          description: An option to define which software updates to apply.
        desiredSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set to apply.
        pendingSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set that is pending to be installed.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the device was updated.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the environment.
      description: Describes an environment.
    ExceptionMessage:
      type: string
    FieldName:
      type: string
    GetDeviceRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DeviceId'
          description: The ID of the device for which to return information.
      required:
      - id
    GetDeviceResponse:
      type: object
      properties:
        device:
          allOf:
          - $ref: '#/components/schemas/Device'
          description: Describes an device.
    GetEnvironmentRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment for which to return information.
      required:
      - id
    GetEnvironmentResponse:
      type: object
      properties:
        environment:
          allOf:
          - $ref: '#/components/schemas/Environment'
          description: Describes an environment.
    GetSoftwareSetRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set for which to return information.
      required:
      - id
    GetSoftwareSetResponse:
      type: object
      properties:
        softwareSet:
          allOf:
          - $ref: '#/components/schemas/SoftwareSet'
          description: Describes a software set.
    Hour:
      type: integer
      minimum: 0
      maximum: 23
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/RetryAfterSeconds'
          description: The number of seconds to wait before retrying the next request.
      description: The server encountered an internal error and is unable to complete
        the request.
    KmsKeyArn:
      type: string
      pattern: ^arn:[\w+=\/,.@-]+:kms:[a-zA-Z0-9\-]*:[0-9]{0,12}:key\/[a-zA-Z0-9-]+$
      minLength: 20
      maxLength: 2048
    ListDevicesRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If `nextToken` is returned, there are more results available.
            The value of `nextToken` is a unique pagination token for each page. Make
            the call again using the returned token to retrieve the next page. Keep
            all other arguments unchanged. Each pagination token expires after 24
            hours. Using an expired pagination token will return an _HTTP 400 InvalidToken
            error_.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results that are returned per call.
            You can use `nextToken` to obtain further pages of results.


            This is only an upper limit. The actual number of results returned per
            call might be fewer than the specified maximum.'
    ListDevicesResponse:
      type: object
      properties:
        devices:
          allOf:
          - $ref: '#/components/schemas/DeviceList'
          description: Describes devices.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If `nextToken` is returned, there are more results available.
            The value of `nextToken` is a unique pagination token for each page. Make
            the call again using the returned token to retrieve the next page. Keep
            all other arguments unchanged. Each pagination token expires after 24
            hours. Using an expired pagination token will return an _HTTP 400 InvalidToken
            error_.
    ListEnvironmentsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If `nextToken` is returned, there are more results available.
            The value of `nextToken` is a unique pagination token for each page. Make
            the call again using the returned token to retrieve the next page. Keep
            all other arguments unchanged. Each pagination token expires after 24
            hours. Using an expired pagination token will return an _HTTP 400 InvalidToken
            error_.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results that are returned per call.
            You can use `nextToken` to obtain further pages of results.


            This is only an upper limit. The actual number of results returned per
            call might be fewer than the specified maximum.'
    ListEnvironmentsResponse:
      type: object
      properties:
        environments:
          allOf:
          - $ref: '#/components/schemas/EnvironmentList'
          description: Describes environments.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If `nextToken` is returned, there are more results available.
            The value of `nextToken` is a unique pagination token for each page. Make
            the call again using the returned token to retrieve the next page. Keep
            all other arguments unchanged. Each pagination token expires after 24
            hours. Using an expired pagination token will return an _HTTP 400 InvalidToken
            error_.
    ListSoftwareSetsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If `nextToken` is returned, there are more results available.
            The value of `nextToken` is a unique pagination token for each page. Make
            the call again using the returned token to retrieve the next page. Keep
            all other arguments unchanged. Each pagination token expires after 24
            hours. Using an expired pagination token will return an _HTTP 400 InvalidToken
            error_.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results that are returned per call.
            You can use `nextToken` to obtain further pages of results.


            This is only an upper limit. The actual number of results returned per
            call might be fewer than the specified maximum.'
    ListSoftwareSetsResponse:
      type: object
      properties:
        softwareSets:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetList'
          description: Describes software sets.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If `nextToken` is returned, there are more results available.
            The value of `nextToken` is a unique pagination token for each page. Make
            the call again using the returned token to retrieve the next page. Keep
            all other arguments unchanged. Each pagination token expires after 24
            hours. Using an expired pagination token will return an _HTTP 400 InvalidToken
            error_.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the resource for which you
            want to retrieve tags.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A map of the key-value pairs for the tag or tags assigned to
            the specified resource.
    MaintenanceWindow:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/MaintenanceWindowType'
          description: An option to select the default or custom maintenance window.
        startTimeHour:
          allOf:
          - $ref: '#/components/schemas/Hour'
          description: The hour for the maintenance window start (`00`-`23`).
        startTimeMinute:
          allOf:
          - $ref: '#/components/schemas/Minute'
          description: The minutes past the hour for the maintenance window start
            (`00`-`59`).
        endTimeHour:
          allOf:
          - $ref: '#/components/schemas/Hour'
          description: The hour for the maintenance window end (`00`-`23`).
        endTimeMinute:
          allOf:
          - $ref: '#/components/schemas/Minute'
          description: The minutes for the maintenance window end (`00`-`59`).
        daysOfTheWeek:
          allOf:
          - $ref: '#/components/schemas/DayOfWeekList'
          description: The days of the week during which the maintenance window is
            open.
        applyTimeOf:
          allOf:
          - $ref: '#/components/schemas/ApplyTimeOf'
          description: The option to set the maintenance window during the device
            local time or Universal Coordinated Time (UTC).
      required:
      - type
      description: Describes the maintenance window for a thin client device.
    MaintenanceWindowType:
      type: string
      enum:
      - SYSTEM
      - CUSTOM
    MaxResults:
      type: integer
      minimum: 1
      maximum: 50
    Minute:
      type: integer
      minimum: 0
      maximum: 59
    PaginationToken:
      type: string
      pattern: ^\S*$
      minLength: 0
      maxLength: 2048
    QuotaCode:
      type: string
    ResourceId:
      type: string
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The ID of the resource associated with the request.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of the resource associated with the request.
      description: The resource specified in the request was not found.
    ResourceType:
      type: string
    RetryAfterSeconds:
      type: integer
    ServiceCode:
      type: string
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The ID of the resource that exceeds the service quota.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of the resource that exceeds the service quota.
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/ServiceCode'
          description: The code for the service in [Service Quotas](https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html).
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/QuotaCode'
          description: The code for the quota in [Service Quotas](https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html).
      description: Your request exceeds a service quota.
    Software:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the software component.
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the software component.
      description: Describes software.
    SoftwareList:
      type: array
      items:
        $ref: '#/components/schemas/Software'
    SoftwareSet:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set.
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the software set.
        releasedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the software set was released.
        supportedUntil:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the end of support for the software set.
        validationStatus:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetValidationStatus'
          description: An option to define if the software set has been validated.
        software:
          allOf:
          - $ref: '#/components/schemas/SoftwareList'
          description: A list of the software components in the software set.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the software set.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: The tag keys and optional values for the resource.
      description: Describes a software set.
    SoftwareSetId:
      type: string
      pattern: ^[0-9]{1,9}$
    SoftwareSetIdOrEmptyString:
      type: string
      pattern: ^[0-9]{0,9}$
    SoftwareSetList:
      type: array
      items:
        $ref: '#/components/schemas/SoftwareSetSummary'
    SoftwareSetSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set.
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the software set.
        releasedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the software set was released.
        supportedUntil:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the end of support for the software set.
        validationStatus:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetValidationStatus'
          description: An option to define if the software set has been validated.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the software set.
      description: Describes a software set.
    SoftwareSetUpdateMode:
      type: string
      enum:
      - USE_LATEST
      - USE_DESIRED
    SoftwareSetUpdateSchedule:
      type: string
      enum:
      - USE_MAINTENANCE_WINDOW
      - APPLY_IMMEDIATELY
    SoftwareSetUpdateStatus:
      type: string
      enum:
      - AVAILABLE
      - IN_PROGRESS
      - UP_TO_DATE
    SoftwareSetValidationStatus:
      type: string
      enum:
      - VALIDATED
      - NOT_VALIDATED
    TagKeys:
      type: array
      items:
        type: string
      x-sensitive: true
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to tag.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A map of the key-value pairs of the tag or tags to assign to
            the resource.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    TargetDeviceStatus:
      type: string
      enum:
      - DEREGISTERED
      - ARCHIVED
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/ServiceCode'
          description: The code for the service in [Service Quotas](https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html).
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/QuotaCode'
          description: The code for the quota in [Service Quotas](https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html).
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/RetryAfterSeconds'
          description: The number of seconds to wait before retrying the next request.
      description: The request was denied due to request throttling.
    Timestamp:
      type: string
      format: date-time
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to untag.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeys'
          description: The keys of the key-value pairs for the tag or tags you want
            to remove from the specified resource.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateDeviceRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DeviceId'
          description: The ID of the device to update.
        name:
          allOf:
          - $ref: '#/components/schemas/DeviceName'
          description: The name of the device to update.
        desiredSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set to apply.
        softwareSetUpdateSchedule:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateSchedule'
          description: An option to define if software updates should be applied within
            a maintenance window.
      required:
      - id
    UpdateDeviceResponse:
      type: object
      properties:
        device:
          allOf:
          - $ref: '#/components/schemas/DeviceSummary'
          description: Describes a device.
    UpdateEnvironmentRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment to update.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name of the environment to update.
        desktopArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the desktop to stream from
            Amazon WorkSpaces, WorkSpaces Secure Browser, or AppStream 2.0.
        desktopEndpoint:
          allOf:
          - $ref: '#/components/schemas/DesktopEndpoint'
          description: The URL for the identity provider login (only for environments
            that use AppStream 2.0).
        softwareSetUpdateSchedule:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateSchedule'
          description: An option to define if software updates should be applied within
            a maintenance window.
        maintenanceWindow:
          allOf:
          - $ref: '#/components/schemas/MaintenanceWindow'
          description: A specification for a time window to apply software updates.
        softwareSetUpdateMode:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetUpdateMode'
          description: An option to define which software updates to apply.
        desiredSoftwareSetId:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetIdOrEmptyString'
          description: The ID of the software set to apply.
        deviceCreationTags:
          allOf:
          - $ref: '#/components/schemas/DeviceCreationTagsMap'
          description: A map of the key-value pairs of the tag or tags to assign to
            the newly created devices for this environment.
      required:
      - id
    UpdateEnvironmentResponse:
      type: object
      properties:
        environment:
          allOf:
          - $ref: '#/components/schemas/EnvironmentSummary'
          description: Describes an environment.
    UpdateSoftwareSetRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetId'
          description: The ID of the software set to update.
        validationStatus:
          allOf:
          - $ref: '#/components/schemas/SoftwareSetValidationStatus'
          description: An option to define if the software set has been validated.
      required:
      - id
      - validationStatus
    UpdateSoftwareSetResponse:
      type: object
      properties: {}
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: The reason for the exception.
        fieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: A list of fields that didn't validate.
      description: The input fails to satisfy the specified constraints.
    ValidationExceptionField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the exception.
        message:
          allOf:
          - $ref: '#/components/schemas/ExceptionMessage'
          description: A message that describes the reason for the exception.
      required:
      - name
      - message
      description: Describes a validation exception.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - unknownOperation
      - cannotParse
      - fieldValidationFailed
      - other
