openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: socialmessaging
  x-aws-serviceName: socialmessaging
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-05'
  version: '2024-01-01'
  title: AWS End User Messaging Social
  description: |-
    _Amazon Web Services End User Messaging Social_ , also referred to as Social messaging, is a messaging service that enables application developers to incorporate WhatsApp into their existing workflows. The _Amazon Web Services End User Messaging Social API_ provides information about the _Amazon Web Services End User Messaging Social API_ resources, including supported HTTP methods, parameters, and schemas.

    The _Amazon Web Services End User Messaging Social API_ provides programmatic access to options that are unique to the WhatsApp Business Platform.

    If you're new to the _Amazon Web Services End User Messaging Social API_ , it's also helpful to review [What is Amazon Web Services End User Messaging Social](https://docs.aws.amazon.com/sms-voice/latest/userguide/what-is-service.html) in the _Amazon Web Services End User Messaging Social User Guide_. The _Amazon Web Services End User Messaging Social User Guide_ provides tutorials, code samples, and procedures that demonstrate how to use _Amazon Web Services End User Messaging Social API_ features programmatically and how to integrate functionality into applications. The guide also provides key information, such as integration with other Amazon Web Services services, and the quotas that apply to use of the service.

    **Regional availability**

    The _Amazon Web Services End User Messaging Social API_ is available across several Amazon Web Services Regions and it provides a dedicated endpoint for each of these Regions. For a list of all the Regions and endpoints where the API is currently available, see [Amazon Web Services Service Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region) and [Amazon Web Services End User Messaging endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/end-user-messaging.html) in the Amazon Web Services General Reference. To learn more about Amazon Web Services Regions, see [Managing Amazon Web Services Regions](https://docs.aws.amazon.com/general/latest/gr/rande-manage.html) in the Amazon Web Services General Reference.

    In each Region, Amazon Web Services maintains multiple Availability Zones. These Availability Zones are physically isolated from each other, but are united by private, low-latency, high-throughput, and highly redundant network connections. These Availability Zones enable us to provide very high levels of availability and redundancy, while also minimizing latency. To learn more about the number of Availability Zones that are available in each Region, see [Amazon Web Services Global Infrastructure.](https://aws.amazon.com/about-aws/global-infrastructure/)
servers:
- description: The AWS End User Messaging Social regional endpoint
  url: https://social-messaging.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths: {}
components:
  schemas:
    Arn:
      type: string
      pattern: ^arn:.*$
      maxLength: 2048
    AssociateInProgressToken:
      type: string
      maxLength: 50
    ErrorMessage:
      type: string
    EventDestinationArn:
      type: string
      pattern: ^arn:.*:[a-z-]+([/:](.*))?$
      maxLength: 2048
    Headers:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    IsoCountryCode:
      type: string
      pattern: ^[A-Z]{2}$
    LinkedAccountWithIncompleteSetup:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/LinkedWhatsAppBusinessAccountIdMetaData'
    LinkedWhatsAppBusinessAccountArn:
      type: string
      pattern: ^arn:.*:waba/[0-9a-zA-Z]+$
      maxLength: 2048
    LinkedWhatsAppBusinessAccountId:
      type: string
      pattern: (^waba-.*$)|(^arn:.*:waba/[0-9a-zA-Z]+$)
      minLength: 1
      maxLength: 100
    LinkedWhatsAppBusinessAccountSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/LinkedWhatsAppBusinessAccountSummary'
    LinkedWhatsAppPhoneNumberArn:
      type: string
      pattern: ^arn:.*:phone-number-id/[0-9a-zA-Z]+$
      maxLength: 2048
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    NextToken:
      type: string
      minLength: 1
      maxLength: 600
    PhoneNumber:
      type: string
      minLength: 1
      maxLength: 20
    RegistrationStatus:
      type: string
      enum:
      - COMPLETE
      - INCOMPLETE
    RoleArn:
      type: string
      pattern: ^arn:aws:iam::\d{12}:role\/[a-zA-Z0-9+=,.@\-_]+$
    StringList:
      type: array
      items:
        type: string
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    TwoFactorPin:
      type: string
      minLength: 1
      maxLength: 6
    WabaPhoneNumberSetupFinalizationList:
      type: array
      items:
        $ref: '#/components/schemas/WabaPhoneNumberSetupFinalization'
    WhatsAppBusinessAccountEventDestinations:
      type: array
      items:
        $ref: '#/components/schemas/WhatsAppBusinessAccountEventDestination'
    WhatsAppBusinessAccountId:
      type: string
      minLength: 1
      maxLength: 100
    WhatsAppBusinessAccountLinkDate:
      type: string
      format: date-time
    WhatsAppBusinessAccountName:
      type: string
      maxLength: 200
    WhatsAppDisplayPhoneNumber:
      type: string
      maxLength: 20
    WhatsAppMediaId:
      type: string
      pattern: ^[A-Za-z0-9]+$
      minLength: 1
      maxLength: 100
    WhatsAppMessageBlob:
      type: string
      format: byte
      minLength: 1
      maxLength: 2048000
      x-sensitive: true
    WhatsAppPhoneNumber:
      type: string
      minLength: 1
      maxLength: 100
    WhatsAppPhoneNumberDetailList:
      type: array
      items:
        $ref: '#/components/schemas/WhatsAppPhoneNumberDetail'
    WhatsAppPhoneNumberId:
      type: string
      pattern: (^phone-number-id-.*$)|(^arn:.*:phone-number-id/[0-9a-zA-Z]+$)
      minLength: 1
      maxLength: 100
    WhatsAppPhoneNumberName:
      type: string
      maxLength: 200
    WhatsAppPhoneNumberQualityRating:
      type: string
      maxLength: 10
    WhatsAppPhoneNumberSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/WhatsAppPhoneNumberSummary'
