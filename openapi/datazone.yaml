openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: datazone
  x-aws-serviceName: datazone
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-05-10'
  title: Amazon DataZone
  description: |-
    Amazon DataZone is a data management service that enables you to catalog, discover, govern, share, and analyze your data. With Amazon DataZone, you can share and access your data across accounts and supported regions. Amazon DataZone simplifies your experience across Amazon Web Services services, including, but not limited to, Amazon Redshift, Amazon Athena, Amazon Web Services Glue, and Amazon Web Services Lake Formation.
servers:
- description: The Amazon DataZone regional endpoint
  url: https://datazone.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /v2/domains/{domainIdentifier}/assets/{identifier}/accept-predictions:
    put:
      operationId: AcceptPredictions
      description: |-
        Accepts automatically generated business-friendly metadata for your Amazon DataZone assets.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetIdentifier'
      - name: revision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Revision'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                acceptRule:
                  $ref: '#/components/schemas/AcceptRule'
                acceptChoices:
                  $ref: '#/components/schemas/AcceptChoices'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscription-requests/{identifier}/accept:
    put:
      operationId: AcceptSubscriptionRequest
      description: |-
        Accepts a subscription request to a specific asset.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionRequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                decisionComment:
                  $ref: '#/components/schemas/DecisionComment'
                assetScopes:
                  $ref: '#/components/schemas/AcceptedAssetScopes'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/addOwner:
    post:
      operationId: AddEntityOwner
      description: |-
        Adds the owner of an entity (a domain unit).
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: entityType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataZoneEntityType'
      - name: entityIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  $ref: '#/components/schemas/OwnerProperties'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/policies/managed/{entityType}/{entityIdentifier}/addGrant:
    post:
      operationId: AddPolicyGrant
      description: |-
        Adds a policy grant (an authorization policy) to a specified entity, including domain units, environment blueprint configurations, or environment profiles.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: entityType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TargetEntityType'
      - name: entityIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policyType:
                  $ref: '#/components/schemas/ManagedPolicyType'
                principal:
                  $ref: '#/components/schemas/PolicyGrantPrincipal'
                detail:
                  $ref: '#/components/schemas/PolicyGrantDetail'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/roles/{environmentRoleArn}:
    put:
      operationId: AssociateEnvironmentRole
      description: |-
        Associates the environment role in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: environmentRoleArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DisassociateEnvironmentRole
      description: |-
        Disassociates the environment role in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: environmentRoleArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/metadata-generation-runs/{identifier}/cancel:
    post:
      operationId: CancelMetadataGenerationRun
      description: |-
        Cancels the metadata generation run.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MetadataGenerationRunIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscriptions/{identifier}/cancel:
    put:
      operationId: CancelSubscription
      description: |-
        Cancels the subscription to the specified asset.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/assets:
    post:
      operationId: CreateAsset
      description: |-
        Creates an asset in Amazon DataZone catalog.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/AssetName'
                externalIdentifier:
                  $ref: '#/components/schemas/ExternalIdentifier'
                typeIdentifier:
                  $ref: '#/components/schemas/AssetTypeIdentifier'
                typeRevision:
                  $ref: '#/components/schemas/Revision'
                description:
                  $ref: '#/components/schemas/Description'
                glossaryTerms:
                  $ref: '#/components/schemas/GlossaryTerms'
                formsInput:
                  $ref: '#/components/schemas/FormInputList'
                owningProjectIdentifier:
                  $ref: '#/components/schemas/ProjectId'
                predictionConfiguration:
                  $ref: '#/components/schemas/PredictionConfiguration'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/assets/{assetIdentifier}/filters:
    post:
      operationId: CreateAssetFilter
      description: |-
        Creates a data asset filter.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: assetIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/FilterName'
                description:
                  $ref: '#/components/schemas/Description'
                configuration:
                  $ref: '#/components/schemas/AssetFilterConfiguration'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListAssetFilters
      description: |-
        Lists asset filters.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: assetIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetId'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/FilterStatus'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/assets/{identifier}/revisions:
    post:
      operationId: CreateAssetRevision
      description: |-
        Creates a revision of the asset.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/AssetName'
                typeRevision:
                  $ref: '#/components/schemas/Revision'
                description:
                  $ref: '#/components/schemas/Description'
                glossaryTerms:
                  $ref: '#/components/schemas/GlossaryTerms'
                formsInput:
                  $ref: '#/components/schemas/FormInputList'
                predictionConfiguration:
                  $ref: '#/components/schemas/PredictionConfiguration'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListAssetRevisions
      description: |-
        Lists the revisions for the asset.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetIdentifier'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/asset-types:
    post:
      operationId: CreateAssetType
      description: |-
        Creates a custom asset type.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/TypeName'
                description:
                  $ref: '#/components/schemas/Description'
                formsInput:
                  $ref: '#/components/schemas/FormsInputMap'
                owningProjectIdentifier:
                  $ref: '#/components/schemas/ProjectId'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/connections:
    post:
      operationId: CreateConnection
      description: |-
        Creates a new connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                awsLocation:
                  $ref: '#/components/schemas/AwsLocation'
                clientToken:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/Description'
                environmentIdentifier:
                  $ref: '#/components/schemas/EnvironmentId'
                name:
                  $ref: '#/components/schemas/ConnectionName'
                props:
                  $ref: '#/components/schemas/ConnectionPropertiesInput'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListConnections
      description: |-
        Lists connections. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: sortBy
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortFieldConnection'
      - name: sortOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ConnectionName'
      - name: environmentIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: projectIdentifier
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ConnectionType'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/data-products:
    post:
      operationId: CreateDataProduct
      description: |-
        Creates a data product.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/DataProductName'
                owningProjectIdentifier:
                  $ref: '#/components/schemas/ProjectId'
                description:
                  $ref: '#/components/schemas/DataProductDescription'
                glossaryTerms:
                  $ref: '#/components/schemas/GlossaryTerms'
                formsInput:
                  $ref: '#/components/schemas/FormInputList'
                items:
                  $ref: '#/components/schemas/DataProductItems'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/data-products/{identifier}/revisions:
    post:
      operationId: CreateDataProductRevision
      description: |-
        Creates a data product revision.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataProductId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/DataProductName'
                description:
                  $ref: '#/components/schemas/DataProductDescription'
                glossaryTerms:
                  $ref: '#/components/schemas/GlossaryTerms'
                items:
                  $ref: '#/components/schemas/DataProductItems'
                formsInput:
                  $ref: '#/components/schemas/FormInputList'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListDataProductRevisions
      description: |-
        Lists data product revisions.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataProductId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/data-sources:
    post:
      operationId: CreateDataSource
      description: |-
        Creates an Amazon DataZone data source.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                projectIdentifier:
                  $ref: '#/components/schemas/String'
                environmentIdentifier:
                  $ref: '#/components/schemas/String'
                connectionIdentifier:
                  $ref: '#/components/schemas/String'
                type:
                  $ref: '#/components/schemas/DataSourceType'
                configuration:
                  $ref: '#/components/schemas/DataSourceConfigurationInput'
                recommendation:
                  $ref: '#/components/schemas/RecommendationConfiguration'
                enableSetting:
                  $ref: '#/components/schemas/EnableSetting'
                schedule:
                  $ref: '#/components/schemas/ScheduleConfiguration'
                publishOnImport:
                  $ref: '#/components/schemas/Boolean'
                assetFormsInput:
                  $ref: '#/components/schemas/FormInputList'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListDataSources
      description: |-
        Lists data sources in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: projectIdentifier
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: environmentIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: connectionIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DataSourceType'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DataSourceStatus'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Name'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains:
    post:
      operationId: CreateDomain
      description: |-
        Creates an Amazon DataZone domain.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                singleSignOn:
                  $ref: '#/components/schemas/SingleSignOn'
                domainExecutionRole:
                  $ref: '#/components/schemas/RoleArn'
                kmsKeyIdentifier:
                  $ref: '#/components/schemas/KmsKeyArn'
                tags:
                  $ref: '#/components/schemas/Tags'
                domainVersion:
                  $ref: '#/components/schemas/DomainVersion'
                serviceRole:
                  $ref: '#/components/schemas/RoleArn'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListDomains
      description: |-
        Lists Amazon DataZone domains.
      parameters:
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DomainStatus'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResultsForListDomains'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/domain-units:
    post:
      operationId: CreateDomainUnit
      description: |-
        Creates a domain unit in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/DomainUnitName'
                parentDomainUnitIdentifier:
                  $ref: '#/components/schemas/DomainUnitId'
                description:
                  $ref: '#/components/schemas/DomainUnitDescription'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListDomainUnitsForParent
      description: |-
        Lists child domain units for the specified parent domain unit.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: parentDomainUnitIdentifier
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainUnitId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResultsForListDomains'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environments:
    post:
      operationId: CreateEnvironment
      description: |-
        Create an Amazon DataZone environment.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectIdentifier:
                  $ref: '#/components/schemas/ProjectId'
                description:
                  $ref: '#/components/schemas/String'
                name:
                  $ref: '#/components/schemas/String'
                environmentProfileIdentifier:
                  $ref: '#/components/schemas/EnvironmentProfileId'
                userParameters:
                  $ref: '#/components/schemas/EnvironmentParametersList'
                glossaryTerms:
                  $ref: '#/components/schemas/GlossaryTerms'
                environmentAccountIdentifier:
                  $ref: '#/components/schemas/String'
                environmentAccountRegion:
                  $ref: '#/components/schemas/String'
                environmentBlueprintIdentifier:
                  $ref: '#/components/schemas/String'
                deploymentOrder:
                  $ref: '#/components/schemas/Integer'
                environmentConfigurationId:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListEnvironments
      description: |-
        Lists Amazon DataZone environments.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: awsAccountId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AwsAccountId'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EnvironmentStatus'
      - name: awsAccountRegion
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AwsRegion'
      - name: projectIdentifier
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: environmentProfileIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EnvironmentProfileId'
      - name: environmentBlueprintIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EnvironmentBlueprintId'
      - name: provider
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/actions:
    post:
      operationId: CreateEnvironmentAction
      description: |-
        Creates an action for the environment, for example, creates a console link for an analytics tool that is available in this environment.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                parameters:
                  $ref: '#/components/schemas/ActionParameters'
                description:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListEnvironmentActions
      description: |-
        Lists existing environment actions.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environment-profiles:
    post:
      operationId: CreateEnvironmentProfile
      description: |-
        Creates an Amazon DataZone environment profile.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/EnvironmentProfileName'
                description:
                  $ref: '#/components/schemas/Description'
                environmentBlueprintIdentifier:
                  $ref: '#/components/schemas/EnvironmentBlueprintId'
                projectIdentifier:
                  $ref: '#/components/schemas/ProjectId'
                userParameters:
                  $ref: '#/components/schemas/EnvironmentParametersList'
                awsAccountId:
                  $ref: '#/components/schemas/AwsAccountId'
                awsAccountRegion:
                  $ref: '#/components/schemas/AwsRegion'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListEnvironmentProfiles
      description: |-
        Lists Amazon DataZone environment profiles.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: awsAccountId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AwsAccountId'
      - name: awsAccountRegion
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AwsRegion'
      - name: environmentBlueprintIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EnvironmentBlueprintId'
      - name: projectIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EnvironmentProfileName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/form-types:
    post:
      operationId: CreateFormType
      description: |-
        Creates a metadata form type.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/FormTypeName'
                model:
                  $ref: '#/components/schemas/Model'
                owningProjectIdentifier:
                  $ref: '#/components/schemas/ProjectId'
                status:
                  $ref: '#/components/schemas/FormTypeStatus'
                description:
                  $ref: '#/components/schemas/Description'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/glossaries:
    post:
      operationId: CreateGlossary
      description: |-
        Creates an Amazon DataZone business glossary.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/GlossaryName'
                owningProjectIdentifier:
                  $ref: '#/components/schemas/ProjectId'
                description:
                  $ref: '#/components/schemas/GlossaryDescription'
                status:
                  $ref: '#/components/schemas/GlossaryStatus'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/glossary-terms:
    post:
      operationId: CreateGlossaryTerm
      description: |-
        Creates a business glossary term.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                glossaryIdentifier:
                  $ref: '#/components/schemas/GlossaryTermId'
                name:
                  $ref: '#/components/schemas/GlossaryTermName'
                status:
                  $ref: '#/components/schemas/GlossaryTermStatus'
                shortDescription:
                  $ref: '#/components/schemas/ShortDescription'
                longDescription:
                  $ref: '#/components/schemas/LongDescription'
                termRelations:
                  $ref: '#/components/schemas/TermRelations'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/group-profiles:
    post:
      operationId: CreateGroupProfile
      description: |-
        Creates a group profile in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupIdentifier:
                  $ref: '#/components/schemas/GroupIdentifier'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/listings/change-set:
    post:
      operationId: CreateListingChangeSet
      description: |-
        Publishes a listing (a record of an asset at a given time) or removes a listing from the catalog.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityIdentifier:
                  $ref: '#/components/schemas/EntityIdentifier'
                entityType:
                  $ref: '#/components/schemas/EntityType'
                entityRevision:
                  $ref: '#/components/schemas/Revision'
                action:
                  $ref: '#/components/schemas/ChangeAction'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/projects:
    post:
      operationId: CreateProject
      description: |-
        Creates an Amazon DataZone project.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ProjectName'
                description:
                  $ref: '#/components/schemas/Description'
                glossaryTerms:
                  $ref: '#/components/schemas/GlossaryTerms'
                domainUnitId:
                  $ref: '#/components/schemas/DomainUnitId'
                projectProfileId:
                  $ref: '#/components/schemas/ProjectProfileId'
                userParameters:
                  $ref: '#/components/schemas/EnvironmentConfigurationUserParametersList'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListProjects
      description: |-
        Lists Amazon DataZone projects.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: userIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: groupIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/projects/{projectIdentifier}/createMembership:
    post:
      operationId: CreateProjectMembership
      description: |-
        Creates a project membership in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: projectIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member:
                  $ref: '#/components/schemas/Member'
                designation:
                  $ref: '#/components/schemas/UserDesignation'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/project-profiles:
    post:
      operationId: CreateProjectProfile
      description: |-
        Creates a project profile.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ProjectProfileName'
                description:
                  $ref: '#/components/schemas/Description'
                status:
                  $ref: '#/components/schemas/Status'
                environmentConfigurations:
                  $ref: '#/components/schemas/EnvironmentConfigurationsList'
                domainUnitIdentifier:
                  $ref: '#/components/schemas/DomainUnitId'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListProjectProfiles
      description: |-
        Lists project profiles.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProjectProfileName'
      - name: sortBy
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortFieldProject'
      - name: sortOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/rules:
    post:
      operationId: CreateRule
      description: |-
        Creates a rule in Amazon DataZone. A rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/RuleName'
                target:
                  $ref: '#/components/schemas/RuleTarget'
                action:
                  $ref: '#/components/schemas/RuleAction'
                scope:
                  $ref: '#/components/schemas/RuleScope'
                detail:
                  $ref: '#/components/schemas/RuleDetail'
                description:
                  $ref: '#/components/schemas/Description'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscription-grants:
    post:
      operationId: CreateSubscriptionGrant
      description: |-
        Creates a subsscription grant in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                environmentIdentifier:
                  $ref: '#/components/schemas/EnvironmentId'
                subscriptionTargetIdentifier:
                  $ref: '#/components/schemas/SubscriptionTargetId'
                grantedEntity:
                  $ref: '#/components/schemas/GrantedEntityInput'
                assetTargetNames:
                  $ref: '#/components/schemas/AssetTargetNames'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListSubscriptionGrants
      description: |-
        Lists subscription grants.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: subscriptionTargetId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SubscriptionTargetId'
      - name: subscribedListingId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListingId'
      - name: subscriptionId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SubscriptionId'
      - name: owningProjectId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: sortBy
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortKey'
      - name: sortOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscription-requests:
    post:
      operationId: CreateSubscriptionRequest
      description: |-
        Creates a subscription request in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscribedPrincipals:
                  $ref: '#/components/schemas/SubscribedPrincipalInputs'
                subscribedListings:
                  $ref: '#/components/schemas/SubscribedListingInputs'
                requestReason:
                  $ref: '#/components/schemas/RequestReason'
                clientToken:
                  $ref: '#/components/schemas/String'
                metadataForms:
                  $ref: '#/components/schemas/MetadataFormInputs'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListSubscriptionRequests
      description: |-
        Lists Amazon DataZone subscription requests.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SubscriptionRequestStatus'
      - name: subscribedListingId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListingId'
      - name: owningProjectId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: approverProjectId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: sortBy
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortKey'
      - name: sortOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets:
    post:
      operationId: CreateSubscriptionTarget
      description: |-
        Creates a subscription target in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/SubscriptionTargetName'
                type:
                  $ref: '#/components/schemas/String'
                subscriptionTargetConfig:
                  $ref: '#/components/schemas/SubscriptionTargetForms'
                authorizedPrincipals:
                  $ref: '#/components/schemas/AuthorizedPrincipalIdentifiers'
                manageAccessRole:
                  $ref: '#/components/schemas/IamRoleArn'
                applicableAssetTypes:
                  $ref: '#/components/schemas/ApplicableAssetTypes'
                provider:
                  $ref: '#/components/schemas/String'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListSubscriptionTargets
      description: |-
        Lists subscription targets in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: sortBy
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortKey'
      - name: sortOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/user-profiles:
    post:
      operationId: CreateUserProfile
      description: |-
        Creates a user profile in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIdentifier:
                  $ref: '#/components/schemas/UserIdentifier'
                userType:
                  $ref: '#/components/schemas/UserType'
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/assets/{identifier}:
    delete:
      operationId: DeleteAsset
      description: |-
        Deletes an asset in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetIdentifier'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAsset
      description: |-
        Gets an Amazon DataZone asset.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetIdentifier'
      - name: revision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Revision'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/assets/{assetIdentifier}/filters/{identifier}:
    delete:
      operationId: DeleteAssetFilter
      description: |-
        Deletes an asset filter.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: assetIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FilterId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAssetFilter
      description: |-
        Gets an asset filter.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: assetIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FilterId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateAssetFilter
      description: |-
        Updates an asset filter.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: assetIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FilterId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/Description'
                configuration:
                  $ref: '#/components/schemas/AssetFilterConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/asset-types/{identifier}:
    delete:
      operationId: DeleteAssetType
      description: |-
        Deletes an asset type in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetTypeIdentifier'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAssetType
      description: |-
        Gets an Amazon DataZone asset type.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetTypeIdentifier'
      - name: revision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Revision'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/connections/{identifier}:
    delete:
      operationId: DeleteConnection
      description: |-
        Deletes and connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConnectionId'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetConnection
      description: |-
        Gets a connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConnectionId'
      - name: withSecret
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateConnection
      description: |-
        Updates a connection. In Amazon DataZone, a connection enables you to connect your resources (domains, projects, and environments) to external resources and services.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConnectionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                awsLocation:
                  $ref: '#/components/schemas/AwsLocation'
                props:
                  $ref: '#/components/schemas/ConnectionPropertiesPatch'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/data-products/{identifier}:
    delete:
      operationId: DeleteDataProduct
      description: |-
        Deletes a data product in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataProductId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetDataProduct
      description: |-
        Gets the data product.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataProductId'
      - name: revision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Revision'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/data-sources/{identifier}:
    delete:
      operationId: DeleteDataSource
      description: |-
        Deletes a data source in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataSourceId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: retainPermissionsOnRevokeFailure
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetDataSource
      description: |-
        Gets an Amazon DataZone data source.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataSourceId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateDataSource
      description: |-
        Updates the specified data source in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataSourceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                enableSetting:
                  $ref: '#/components/schemas/EnableSetting'
                publishOnImport:
                  $ref: '#/components/schemas/Boolean'
                assetFormsInput:
                  $ref: '#/components/schemas/FormInputList'
                schedule:
                  $ref: '#/components/schemas/ScheduleConfiguration'
                configuration:
                  $ref: '#/components/schemas/DataSourceConfigurationInput'
                recommendation:
                  $ref: '#/components/schemas/RecommendationConfiguration'
                retainPermissionsOnRevokeFailure:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{identifier}:
    delete:
      operationId: DeleteDomain
      description: |-
        Deletes a Amazon DataZone domain.
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: skipDeletionCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetDomain
      description: |-
        Gets an Amazon DataZone domain.
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateDomain
      description: |-
        Updates a Amazon DataZone domain.
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/String'
                singleSignOn:
                  $ref: '#/components/schemas/SingleSignOn'
                domainExecutionRole:
                  $ref: '#/components/schemas/RoleArn'
                serviceRole:
                  $ref: '#/components/schemas/RoleArn'
                name:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/domain-units/{identifier}:
    delete:
      operationId: DeleteDomainUnit
      description: |-
        Deletes a domain unit.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainUnitId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetDomainUnit
      description: |-
        Gets the details of the specified domain unit.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainUnitId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateDomainUnit
      description: |-
        Updates the domain unit.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainUnitId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/DomainUnitDescription'
                name:
                  $ref: '#/components/schemas/DomainUnitName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environments/{identifier}:
    delete:
      operationId: DeleteEnvironment
      description: |-
        Deletes an environment in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetEnvironment
      description: |-
        Gets an Amazon DataZone environment.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateEnvironment
      description: |-
        Updates the specified environment in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                glossaryTerms:
                  $ref: '#/components/schemas/GlossaryTerms'
                blueprintVersion:
                  $ref: '#/components/schemas/String'
                userParameters:
                  $ref: '#/components/schemas/EnvironmentParametersList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/actions/{identifier}:
    delete:
      operationId: DeleteEnvironmentAction
      description: |-
        Deletes an action for the environment, for example, deletes a console link for an analytics tool that is available in this environment.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetEnvironmentAction
      description: |-
        Gets the specified environment action.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateEnvironmentAction
      description: |-
        Updates an environment action.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  $ref: '#/components/schemas/ActionParameters'
                name:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}:
    delete:
      operationId: DeleteEnvironmentBlueprintConfiguration
      description: |-
        Deletes the blueprint configuration in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentBlueprintIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentBlueprintId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetEnvironmentBlueprintConfiguration
      description: |-
        Gets the blueprint configuration in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentBlueprintIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentBlueprintId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutEnvironmentBlueprintConfiguration
      description: |-
        Writes the configuration for the specified environment blueprint in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentBlueprintIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentBlueprintId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provisioningRoleArn:
                  $ref: '#/components/schemas/RoleArn'
                manageAccessRoleArn:
                  $ref: '#/components/schemas/RoleArn'
                environmentRolePermissionBoundary:
                  $ref: '#/components/schemas/PolicyArn'
                enabledRegions:
                  $ref: '#/components/schemas/EnabledRegionList'
                regionalParameters:
                  $ref: '#/components/schemas/RegionalParameterMap'
                provisioningConfigurations:
                  $ref: '#/components/schemas/ProvisioningConfigurationList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environment-profiles/{identifier}:
    delete:
      operationId: DeleteEnvironmentProfile
      description: |-
        Deletes an environment profile in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentProfileId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetEnvironmentProfile
      description: |-
        Gets an evinronment profile in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentProfileId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateEnvironmentProfile
      description: |-
        Updates the specified environment profile in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentProfileId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/EnvironmentProfileName'
                description:
                  $ref: '#/components/schemas/String'
                userParameters:
                  $ref: '#/components/schemas/EnvironmentParametersList'
                awsAccountId:
                  $ref: '#/components/schemas/AwsAccountId'
                awsAccountRegion:
                  $ref: '#/components/schemas/AwsRegion'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/form-types/{formTypeIdentifier}:
    delete:
      operationId: DeleteFormType
      description: |-
        Delets and metadata form type in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: formTypeIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FormTypeIdentifier'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetFormType
      description: |-
        Gets a metadata form type in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: formTypeIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FormTypeIdentifier'
      - name: revision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Revision'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/glossaries/{identifier}:
    delete:
      operationId: DeleteGlossary
      description: |-
        Deletes a business glossary in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GlossaryId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetGlossary
      description: |-
        Gets a business glossary in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GlossaryId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateGlossary
      description: |-
        Updates the business glossary in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GlossaryId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/GlossaryName'
                description:
                  $ref: '#/components/schemas/GlossaryDescription'
                status:
                  $ref: '#/components/schemas/GlossaryStatus'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/glossary-terms/{identifier}:
    delete:
      operationId: DeleteGlossaryTerm
      description: |-
        Deletes a business glossary term in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GlossaryTermId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetGlossaryTerm
      description: |-
        Gets a business glossary term in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GlossaryTermId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateGlossaryTerm
      description: |-
        Updates a business glossary term in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GlossaryTermId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                glossaryIdentifier:
                  $ref: '#/components/schemas/GlossaryTermId'
                name:
                  $ref: '#/components/schemas/GlossaryTermName'
                shortDescription:
                  $ref: '#/components/schemas/ShortDescription'
                longDescription:
                  $ref: '#/components/schemas/LongDescription'
                termRelations:
                  $ref: '#/components/schemas/TermRelations'
                status:
                  $ref: '#/components/schemas/GlossaryTermStatus'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/listings/{identifier}:
    delete:
      operationId: DeleteListing
      description: |-
        Deletes a listing (a record of an asset at a given time).
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListingId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetListing
      description: |-
        Gets a listing (a record of an asset at a given time). If you specify a listing version, only details that are specific to that version are returned.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListingId'
      - name: listingRevision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Revision'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/projects/{identifier}:
    delete:
      operationId: DeleteProject
      description: |-
        Deletes a project in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: skipDeletionCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetProject
      description: |-
        Gets a project in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateProject
      description: |-
        Updates the specified project in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ProjectName'
                description:
                  $ref: '#/components/schemas/Description'
                glossaryTerms:
                  $ref: '#/components/schemas/GlossaryTerms'
                environmentDeploymentDetails:
                  $ref: '#/components/schemas/EnvironmentDeploymentDetails'
                userParameters:
                  $ref: '#/components/schemas/EnvironmentConfigurationUserParametersList'
                projectProfileVersion:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/projects/{projectIdentifier}/deleteMembership:
    post:
      operationId: DeleteProjectMembership
      description: |-
        Deletes project membership in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: projectIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member:
                  $ref: '#/components/schemas/Member'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/project-profiles/{identifier}:
    delete:
      operationId: DeleteProjectProfile
      description: |-
        Deletes a project profile.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectProfileId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetProjectProfile
      description: |-
        The details of the project profile.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectProfileId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateProjectProfile
      description: |-
        Updates a project profile.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectProfileId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ProjectProfileName'
                description:
                  $ref: '#/components/schemas/Description'
                status:
                  $ref: '#/components/schemas/Status'
                environmentConfigurations:
                  $ref: '#/components/schemas/EnvironmentConfigurationsList'
                domainUnitIdentifier:
                  $ref: '#/components/schemas/DomainUnitId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/rules/{identifier}:
    delete:
      operationId: DeleteRule
      description: |-
        Deletes a rule in Amazon DataZone. A rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RuleId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetRule
      description: |-
        Gets the details of a rule in Amazon DataZone. A rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RuleId'
      - name: revision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Revision'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateRule
      description: |-
        Updates a rule. In Amazon DataZone, a rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RuleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/RuleName'
                description:
                  $ref: '#/components/schemas/Description'
                scope:
                  $ref: '#/components/schemas/RuleScope'
                detail:
                  $ref: '#/components/schemas/RuleDetail'
                includeChildDomainUnits:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscription-grants/{identifier}:
    delete:
      operationId: DeleteSubscriptionGrant
      description: |-
        Deletes and subscription grant in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionGrantId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetSubscriptionGrant
      description: |-
        Gets the subscription grant in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionGrantId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscription-requests/{identifier}:
    delete:
      operationId: DeleteSubscriptionRequest
      description: |-
        Deletes a subscription request in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionRequestId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetSubscriptionRequestDetails
      description: |-
        Gets the details of the specified subscription request.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionRequestId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateSubscriptionRequest
      description: |-
        Updates a specified subscription request in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionRequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requestReason:
                  $ref: '#/components/schemas/RequestReason'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}:
    delete:
      operationId: DeleteSubscriptionTarget
      description: |-
        Deletes a subscription target in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionTargetId'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetSubscriptionTarget
      description: |-
        Gets the subscription target in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionTargetId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateSubscriptionTarget
      description: |-
        Updates the specified subscription target in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionTargetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/SubscriptionTargetName'
                authorizedPrincipals:
                  $ref: '#/components/schemas/AuthorizedPrincipalIdentifiers'
                applicableAssetTypes:
                  $ref: '#/components/schemas/ApplicableAssetTypes'
                subscriptionTargetConfig:
                  $ref: '#/components/schemas/SubscriptionTargetForms'
                manageAccessRole:
                  $ref: '#/components/schemas/IamRoleArn'
                provider:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/time-series-data-points:
    delete:
      operationId: DeleteTimeSeriesDataPoints
      description: |-
        Deletes the specified time series form for the specified asset.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: entityIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityIdentifier'
      - name: entityType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TimeSeriesEntityType'
      - name: formName
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TimeSeriesFormName'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListTimeSeriesDataPoints
      description: |-
        Lists time series data points.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: entityIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityIdentifier'
      - name: entityType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TimeSeriesEntityType'
      - name: formName
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TimeSeriesFormName'
      - name: startedAt
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: endedAt
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: PostTimeSeriesDataPoints
      description: |-
        Posts time series data points to Amazon DataZone for the specified asset.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: entityIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityIdentifier'
      - name: entityType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TimeSeriesEntityType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                forms:
                  $ref: '#/components/schemas/TimeSeriesDataPointFormInputList'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/data-source-runs/{identifier}:
    get:
      operationId: GetDataSourceRun
      description: |-
        Gets an Amazon DataZone data source run.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataSourceRunId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environment-blueprints/{identifier}:
    get:
      operationId: GetEnvironmentBlueprint
      description: |-
        Gets an Amazon DataZone blueprint.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentBlueprintId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/credentials:
    get:
      operationId: GetEnvironmentCredentials
      description: |-
        Gets the credentials of an environment in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: environmentIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/group-profiles/{groupIdentifier}:
    get:
      operationId: GetGroupProfile
      description: |-
        Gets a group profile in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: groupIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GroupIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateGroupProfile
      description: |-
        Updates the specified group profile in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: groupIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GroupIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/GroupProfileStatus'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/get-portal-login-url:
    post:
      operationId: GetIamPortalLoginUrl
      description: |-
        Gets the data portal URL for the specified Amazon DataZone domain.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/jobRuns/{identifier}:
    get:
      operationId: GetJobRun
      description: |-
        The details of the job run.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/lineage/events/{identifier}:
    get:
      operationId: GetLineageEvent
      description: |-
        Describes the lineage event.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LineageEventIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/lineage/nodes/{identifier}:
    get:
      operationId: GetLineageNode
      description: |-
        Gets the data lineage node.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LineageNodeIdentifier'
      - name: timestamp
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/metadata-generation-runs/{identifier}:
    get:
      operationId: GetMetadataGenerationRun
      description: |-
        Gets a metadata generation run in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MetadataGenerationRunIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscriptions/{identifier}:
    get:
      operationId: GetSubscription
      description: |-
        Gets a subscription in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/time-series-data-points/{identifier}:
    get:
      operationId: GetTimeSeriesDataPoint
      description: |-
        Gets the existing data point for the asset.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: entityIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityIdentifier'
      - name: entityType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TimeSeriesEntityType'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TimeSeriesDataPointIdentifier'
      - name: formName
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TimeSeriesFormName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/user-profiles/{userIdentifier}:
    get:
      operationId: GetUserProfile
      description: |-
        Gets a user profile in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: userIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdentifier'
      - name: type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/UserProfileType'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateUserProfile
      description: |-
        Updates the specified user profile in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: userIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/UserProfileType'
                status:
                  $ref: '#/components/schemas/UserProfileStatus'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/data-source-runs/{identifier}/activities:
    get:
      operationId: ListDataSourceRunActivities
      description: |-
        Lists data source run activities.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataSourceRunId'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DataAssetActivityStatus'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/data-sources/{dataSourceIdentifier}/runs:
    get:
      operationId: ListDataSourceRuns
      description: |-
        Lists data source runs in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: dataSourceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataSourceId'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DataSourceRunStatus'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartDataSourceRun
      description: |-
        Start the run of the specified data source in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: dataSourceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataSourceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/owners:
    get:
      operationId: ListEntityOwners
      description: |-
        Lists the entity (domain units) owners.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: entityType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataZoneEntityType'
      - name: entityIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResultsForListDomains'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environment-blueprint-configurations:
    get:
      operationId: ListEnvironmentBlueprintConfigurations
      description: |-
        Lists blueprint configurations for a Amazon DataZone environment.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/environment-blueprints:
    get:
      operationId: ListEnvironmentBlueprints
      description: |-
        Lists blueprints in an Amazon DataZone environment.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EnvironmentBlueprintName'
      - name: managed
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/jobs/{jobIdentifier}/runs:
    get:
      operationId: ListJobRuns
      description: |-
        Lists job runs.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: jobIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/JobRunStatus'
      - name: sortOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/lineage/events:
    get:
      operationId: ListLineageEvents
      description: |-
        Lists lineage events.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: timestampAfter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: timestampBefore
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: processingStatus
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/LineageEventProcessingStatus'
      - name: sortOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: PostLineageEvent
      description: |-
        Posts a data lineage event.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  $ref: '#/components/schemas/LineageEvent'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/lineage/nodes/{identifier}/history:
    get:
      operationId: ListLineageNodeHistory
      description: |-
        Lists the history of the specified data lineage node.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LineageNodeIdentifier'
      - name: direction
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EdgeDirection'
      - name: timestampGTE
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: timestampLTE
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: sortOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/metadata-generation-runs:
    get:
      operationId: ListMetadataGenerationRuns
      description: |-
        Lists all metadata generation runs.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MetadataGenerationRunStatus'
      - name: type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MetadataGenerationRunType'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartMetadataGenerationRun
      description: |-
        Starts the metadata generation run.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/MetadataGenerationRunType'
                target:
                  $ref: '#/components/schemas/MetadataGenerationRunTarget'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                owningProjectIdentifier:
                  $ref: '#/components/schemas/ProjectId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request has exceeded the specified service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/notifications:
    get:
      operationId: ListNotifications
      description: |-
        Lists all Amazon DataZone notifications.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: type
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/NotificationType'
      - name: afterTimestamp
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: beforeTimestamp
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: subjects
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NotificationSubjects'
      - name: taskStatus
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/TaskStatus'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/policies/managed/{entityType}/{entityIdentifier}/grants:
    get:
      operationId: ListPolicyGrants
      description: |-
        Lists policy grants.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: entityType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TargetEntityType'
      - name: entityIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: policyType
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ManagedPolicyType'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResultsForListDomains'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/projects/{projectIdentifier}/memberships:
    get:
      operationId: ListProjectMemberships
      description: |-
        Lists all members of the specified project.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: projectIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: sortBy
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortFieldProject'
      - name: sortOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/list-rules/{targetType}/{targetIdentifier}:
    get:
      operationId: ListRules
      description: |-
        Lists existing rules. In Amazon DataZone, a rule is a formal agreement that enforces specific requirements across user workflows (e.g., publishing assets to the catalog, requesting subscriptions, creating projects) within the Amazon DataZone data portal. These rules help maintain consistency, ensure compliance, and uphold governance standards in data management processes. For instance, a metadata enforcement rule can specify the required information for creating a subscription request or publishing a data asset to the catalog, ensuring alignment with organizational standards.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: targetType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RuleTargetType'
      - name: targetIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: ruleType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RuleType'
      - name: ruleAction
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RuleAction'
      - name: projectIds
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProjectIds'
      - name: assetTypes
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AssetTypeIdentifiers'
      - name: dataProduct
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      - name: includeCascaded
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscriptions:
    get:
      operationId: ListSubscriptions
      description: |-
        Lists subscriptions in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: subscriptionRequestIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SubscriptionRequestId'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SubscriptionStatus'
      - name: subscribedListingId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListingId'
      - name: owningProjectId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: approverProjectId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProjectId'
      - name: sortBy
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortKey'
      - name: sortOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Lists tags for the specified resource in Amazon DataZone.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Tags a resource in Amazon DataZone.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Untags a resource in Amazon DataZone.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /v2/domains/{domainIdentifier}/assets/{identifier}/reject-predictions:
    put:
      operationId: RejectPredictions
      description: |-
        Rejects automatically generated business-friendly metadata for your Amazon DataZone assets.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetIdentifier'
      - name: revision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Revision'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rejectRule:
                  $ref: '#/components/schemas/RejectRule'
                rejectChoices:
                  $ref: '#/components/schemas/RejectChoices'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscription-requests/{identifier}/reject:
    put:
      operationId: RejectSubscriptionRequest
      description: |-
        Rejects the specified subscription request.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionRequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                decisionComment:
                  $ref: '#/components/schemas/DecisionComment'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/entities/{entityType}/{entityIdentifier}/removeOwner:
    post:
      operationId: RemoveEntityOwner
      description: |-
        Removes an owner from an entity.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: entityType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataZoneEntityType'
      - name: entityIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  $ref: '#/components/schemas/OwnerProperties'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/policies/managed/{entityType}/{entityIdentifier}/removeGrant:
    post:
      operationId: RemovePolicyGrant
      description: |-
        Removes a policy grant.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: entityType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TargetEntityType'
      - name: entityIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policyType:
                  $ref: '#/components/schemas/ManagedPolicyType'
                principal:
                  $ref: '#/components/schemas/PolicyGrantPrincipal'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscriptions/{identifier}/revoke:
    put:
      operationId: RevokeSubscription
      description: |-
        Revokes a specified subscription in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                retainPermissions:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/search:
    post:
      operationId: Search
      description: |-
        Searches for assets in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owningProjectIdentifier:
                  $ref: '#/components/schemas/ProjectId'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                searchScope:
                  $ref: '#/components/schemas/InventorySearchScope'
                searchText:
                  $ref: '#/components/schemas/SearchText'
                searchIn:
                  $ref: '#/components/schemas/SearchInList'
                filters:
                  $ref: '#/components/schemas/FilterClause'
                sort:
                  $ref: '#/components/schemas/SearchSort'
                additionalAttributes:
                  $ref: '#/components/schemas/SearchOutputAdditionalAttributes'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/search-group-profiles:
    post:
      operationId: SearchGroupProfiles
      description: |-
        Searches group profiles in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupType:
                  $ref: '#/components/schemas/GroupSearchType'
                searchText:
                  $ref: '#/components/schemas/GroupSearchText'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/listings/search:
    post:
      operationId: SearchListings
      description: |-
        Searches listings (records of an asset at a given time) in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                searchText:
                  $ref: '#/components/schemas/String'
                searchIn:
                  $ref: '#/components/schemas/SearchInList'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                filters:
                  $ref: '#/components/schemas/FilterClause'
                sort:
                  $ref: '#/components/schemas/SearchSort'
                additionalAttributes:
                  $ref: '#/components/schemas/SearchOutputAdditionalAttributes'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/types-search:
    post:
      operationId: SearchTypes
      description: |-
        Searches for types in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                searchScope:
                  $ref: '#/components/schemas/TypesSearchScope'
                searchText:
                  $ref: '#/components/schemas/SearchText'
                searchIn:
                  $ref: '#/components/schemas/SearchInList'
                filters:
                  $ref: '#/components/schemas/FilterClause'
                sort:
                  $ref: '#/components/schemas/SearchSort'
                managed:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/search-user-profiles:
    post:
      operationId: SearchUserProfiles
      description: |-
        Searches user profiles in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userType:
                  $ref: '#/components/schemas/UserSearchType'
                searchText:
                  $ref: '#/components/schemas/UserSearchText'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v2/domains/{domainIdentifier}/subscription-grants/{identifier}/status/{assetIdentifier}:
    patch:
      operationId: UpdateSubscriptionGrantStatus
      description: |-
        Updates the status of the specified subscription grant status in Amazon DataZone.
      parameters:
      - name: domainIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainId'
      - name: identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionGrantId'
      - name: assetIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AssetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/SubscriptionGrantStatus'
                failureCause:
                  $ref: '#/components/schemas/FailureCause'
                targetName:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict while performing this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource cannot be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by the Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AcceptChoice:
      type: object
      properties:
        predictionTarget:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the target (for example, a column name) where a prediction
            can be accepted.
        predictionChoice:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies the prediction (aka, the automatically generated
            piece of metadata) that can be accepted.
        editedValue:
          allOf:
          - $ref: '#/components/schemas/EditedValue'
          description: The edit of the prediction.
      required:
      - predictionTarget
      description: Specifies the prediction (aka, the automatically generated piece
        of metadata) and the target (for example, a column name) that can be accepted.
    AcceptChoices:
      type: array
      items:
        $ref: '#/components/schemas/AcceptChoice'
    AcceptPredictionsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        identifier:
          allOf:
          - $ref: '#/components/schemas/AssetIdentifier'
          description: The identifier of the asset.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision that is to be made to the asset.
        acceptRule:
          allOf:
          - $ref: '#/components/schemas/AcceptRule'
          description: Specifies the rule (or the conditions) under which a prediction
            can be accepted.
        acceptChoices:
          allOf:
          - $ref: '#/components/schemas/AcceptChoices'
          description: Specifies the prediction (aka, the automatically generated
            piece of metadata) and the target (for example, a column name) that can
            be accepted.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure idempotency of
            the request. This field is automatically populated if not provided.
      required:
      - domainIdentifier
      - identifier
    AcceptPredictionsOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the asset.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision that is to be made to the asset.
      required:
      - domainId
      - assetId
      - revision
    AcceptRule:
      type: object
      properties:
        rule:
          allOf:
          - $ref: '#/components/schemas/AcceptRuleBehavior'
          description: Specifies whether you want to accept the top prediction for
            all targets or none.
        threshold:
          allOf:
          - $ref: '#/components/schemas/Float'
          description: The confidence score that specifies the condition at which
            a prediction can be accepted.
      description: Specifies the rule and the threshold under which a prediction can
        be accepted.
    AcceptRuleBehavior:
      type: string
      enum:
      - ALL
      - NONE
    AcceptSubscriptionRequestInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The Amazon DataZone domain where the specified subscription
            request is being accepted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The unique identifier of the subscription request that is to
            be accepted.
        decisionComment:
          allOf:
          - $ref: '#/components/schemas/DecisionComment'
          description: A description that specifies the reason for accepting the specified
            subscription request.
        assetScopes:
          allOf:
          - $ref: '#/components/schemas/AcceptedAssetScopes'
          description: The asset scopes of the accept subscription request.
      required:
      - domainIdentifier
      - identifier
    AcceptSubscriptionRequestOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: Specifies the Amazon DataZone user that accepted the specified
            subscription request.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: Specifies the Amazon DataZone user who updated the subscription
            request.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The unique identifier of the Amazon DataZone domain where the
            specified subscription request was accepted.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestStatus'
          description: Specifies the status of the subscription request.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp that specifies when the subscription request
            was accepted.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: Specifies the timestamp when subscription request was updated.
        requestReason:
          allOf:
          - $ref: '#/components/schemas/RequestReason'
          description: Specifies the reason for requesting a subscription to the asset.
        subscribedPrincipals:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipals'
          description: Specifies the Amazon DataZone users who are subscribed to the
            asset specified in the subscription request.
        subscribedListings:
          allOf:
          - $ref: '#/components/schemas/SubscribedListings'
          description: Specifies the asset for which the subscription request was
            created.
        reviewerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifes the ID of the Amazon DataZone user who reviewed the
            subscription request.
        decisionComment:
          allOf:
          - $ref: '#/components/schemas/DecisionComment'
          description: Specifies the reason for accepting the subscription request.
        existingSubscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The ID of the existing subscription.
        metadataForms:
          allOf:
          - $ref: '#/components/schemas/MetadataForms'
          description: The metadata form in the subscription request.
      required:
      - id
      - createdBy
      - domainId
      - status
      - createdAt
      - updatedAt
      - requestReason
      - subscribedPrincipals
      - subscribedListings
    AcceptedAssetScope:
      type: object
      properties:
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The asset ID of the accepted asset scope.
        filterIds:
          allOf:
          - $ref: '#/components/schemas/FilterIds'
          description: The filter IDs of the accepted asset scope.
      required:
      - assetId
      - filterIds
      description: The accepted asset scope.
    AcceptedAssetScopes:
      type: array
      items:
        $ref: '#/components/schemas/AcceptedAssetScope'
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: You do not have sufficient access to perform this action.
    ActionLink:
      type: string
    ActionParameters:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AwsConsoleLinkParameters'
        description: |-
          The console link specified as part of the environment action.
      description: |-
        The parameters of the environment action.
    AddEntityOwnerInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain in which you want to add the entity owner.
        entityType:
          allOf:
          - $ref: '#/components/schemas/DataZoneEntityType'
          description: The type of an entity.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the entity to which you want to add an owner.
        owner:
          allOf:
          - $ref: '#/components/schemas/OwnerProperties'
          description: The owner that you want to add to the entity.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - entityType
      - entityIdentifier
      - owner
    AddEntityOwnerOutput:
      type: object
      properties: {}
    AddPolicyGrantInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to add a policy grant.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TargetEntityType'
          description: The type of entity (resource) to which the grant is added.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the entity (resource) to which you want to add a
            policy grant.
        policyType:
          allOf:
          - $ref: '#/components/schemas/ManagedPolicyType'
          description: The type of policy that you want to grant.
        principal:
          allOf:
          - $ref: '#/components/schemas/PolicyGrantPrincipal'
          description: The principal to whom the permissions are granted.
        detail:
          allOf:
          - $ref: '#/components/schemas/PolicyGrantDetail'
          description: The details of the policy grant.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - entityType
      - entityIdentifier
      - policyType
      - principal
      - detail
    AddPolicyGrantOutput:
      type: object
      properties: {}
    AddToProjectMemberPoolPolicyGrantDetail:
      type: object
      properties:
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the policy grant is applied to child domain
            units.
      description: The details of the policy grant.
    AllDomainUnitsGrantFilter:
      type: object
      properties: {}
      description: The grant filter for all domain units.
    AllUsersGrantFilter:
      type: object
      properties: {}
      description: The all users grant filter.
    ApplicableAssetTypes:
      type: array
      items:
        $ref: '#/components/schemas/TypeName'
    AssetFilterConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ColumnFilterConfiguration'
        description: |-
          The column configuration of the asset filter.
      - allOf:
        - $ref: '#/components/schemas/RowFilterConfiguration'
        description: |-
          The row configuration of the asset filter.
      description: |-
        The configuration details of the asset filter.
    AssetFilterSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/FilterId'
          description: The ID of the asset filter.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the asset filter lives.
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the data asset.
        name:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          description: The name of the asset filter.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the asset filter.
        status:
          allOf:
          - $ref: '#/components/schemas/FilterStatus'
          description: The status of the asset filter.
        effectiveColumnNames:
          allOf:
          - $ref: '#/components/schemas/ColumnNameList'
          description: The effective column names of the asset filter.
        effectiveRowFilter:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The effective row filter of the asset filter.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the asset filter was created.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message that is displayed if the action does not
            succeed.
      required:
      - id
      - domainId
      - assetId
      - name
      description: The summary of the asset filter.
    AssetFilters:
      type: array
      items:
        $ref: '#/components/schemas/AssetFilterSummary'
    AssetId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    AssetIdentifier:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    AssetInDataProductListingItem:
      type: object
      properties:
        entityId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The entity ID of the listing of the asset in a data product.
        entityRevision:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The entity revision of the listing of the asset in a data product.
        entityType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The entity type of the listing of the asset in a data product.
      description: The listing of the asset in a data product.
    AssetInDataProductListingItems:
      type: array
      items:
        $ref: '#/components/schemas/AssetInDataProductListingItem'
    AssetItem:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the inventory
            asset exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/AssetIdentifier'
          description: the identifier of the Amazon DataZone inventory asset.
        name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the Amazon DataZone inventory asset.
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetTypeIdentifier'
          description: The identifier of the asset type of the specified Amazon DataZone
            inventory asset.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the inventory asset type.
        externalIdentifier:
          allOf:
          - $ref: '#/components/schemas/ExternalIdentifier'
          description: The external identifier of the Amazon DataZone inventory asset.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of an Amazon DataZone inventory asset.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the Amazon DataZone inventory asset was
            created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the inventory asset.
        firstRevisionCreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the first revision of the inventory asset
            was created.
        firstRevisionCreatedBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the first revision of
            the inventory asset.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms attached to the Amazon DataZone inventory
            asset.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the Amazon DataZone project that owns the
            inventory asset.
        additionalAttributes:
          allOf:
          - $ref: '#/components/schemas/AssetItemAdditionalAttributes'
          description: The additional attributes of a Amazon DataZone inventory asset.
      required:
      - domainId
      - identifier
      - name
      - typeIdentifier
      - typeRevision
      - owningProjectId
      description: A Amazon DataZone inventory asset.
    AssetItemAdditionalAttributes:
      type: object
      properties:
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The forms included in the additional attributes of an inventory
            asset.
        readOnlyFormsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The read-only forms included in the additional attributes of
            an inventory asset.
        latestTimeSeriesDataPointFormsOutput:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointSummaryFormOutputList'
          description: The latest time series data points forms included in the additional
            attributes of an asset.
      description: The additional attributes of an inventory asset.
    AssetListing:
      type: object
      properties:
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The identifier of an asset published in an Amazon DataZone
            catalog.
        assetRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of an asset published in an Amazon DataZone catalog.
        assetType:
          allOf:
          - $ref: '#/components/schemas/TypeName'
          description: The type of an asset published in an Amazon DataZone catalog.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when an asset published in an Amazon DataZone
            catalog was created.
        forms:
          allOf:
          - $ref: '#/components/schemas/Forms'
          description: The metadata forms attached to an asset published in an Amazon
            DataZone catalog.
        latestTimeSeriesDataPointForms:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointSummaryFormOutputList'
          description: The latest time series data points forms included in the additional
            attributes of an asset.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/DetailedGlossaryTerms'
          description: The glossary terms attached to an asset published in an Amazon
            DataZone catalog.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project where an asset published in an
            Amazon DataZone catalog exists.
      description: An asset published in an Amazon DataZone catalog.
    AssetListingDetails:
      type: object
      properties:
        listingId:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The identifier of an asset published in an Amazon DataZone
            catalog.
        listingStatus:
          allOf:
          - $ref: '#/components/schemas/ListingStatus'
          description: The status of an asset published in an Amazon DataZone catalog.
      required:
      - listingId
      - listingStatus
      description: The details of an asset published in an Amazon DataZone catalog.
    AssetListingItem:
      type: object
      properties:
        listingId:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The identifier of the listing (asset published in Amazon DataZone
            catalog).
        listingRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the listing (asset published in Amazon DataZone
            catalog).
        name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the inventory asset.
        entityId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The identifier of the inventory asset.
        entityRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the inventory asset.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TypeName'
          description: The type of the inventory asset.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of an asset published in an Amazon DataZone
            catalog.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when an asset published in an Amazon DataZone
            catalog was created.
        listingCreatedBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the listing.
        listingUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the listing.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/DetailedGlossaryTerms'
          description: Glossary terms attached to the inventory asset.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project that owns the inventory asset.
        additionalAttributes:
          allOf:
          - $ref: '#/components/schemas/AssetListingItemAdditionalAttributes'
          description: The additional attributes of an asset published in an Amazon
            DataZone catalog.
      description: The details of an asset published in an Amazon DataZone catalog.
    AssetListingItemAdditionalAttributes:
      type: object
      properties:
        forms:
          allOf:
          - $ref: '#/components/schemas/Forms'
          description: The metadata forms that form additional attributes of the metadata
            asset.
        latestTimeSeriesDataPointForms:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointSummaryFormOutputList'
          description: The latest time series data points forms included in the additional
            attributes of an asset.
      description: Additional attributes of an inventory asset.
    AssetName:
      type: string
      minLength: 1
      maxLength: 256
    AssetRevision:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The Amazon DataZone user who created the inventory asset.
        id:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The identifier of the inventory asset revision.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision details of the inventory asset.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the asset revision.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when an inventory asset revison was created.
      description: The revision of an inventory asset.
    AssetRevisions:
      type: array
      items:
        $ref: '#/components/schemas/AssetRevision'
    AssetScope:
      type: object
      properties:
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The asset ID of the asset scope.
        filterIds:
          allOf:
          - $ref: '#/components/schemas/FilterIds'
          description: The filter IDs of the asset scope.
        status:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The status of the asset scope.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message of the asset scope.
      required:
      - assetId
      - filterIds
      - status
      description: The asset scope.
    AssetTargetNameMap:
      type: object
      properties:
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The identifier of the inventory asset.
        targetName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The target name in the asset target name map.
      required:
      - assetId
      - targetName
      description: The name map for assets.
    AssetTargetNames:
      type: array
      items:
        $ref: '#/components/schemas/AssetTargetNameMap'
    AssetTypeIdentifier:
      type: string
      pattern: ^(?!\.)[\w\.]*\w$
      minLength: 1
      maxLength: 513
    AssetTypeIdentifiers:
      type: array
      items:
        $ref: '#/components/schemas/AssetTypeIdentifier'
    AssetTypeItem:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain where the asset
            type exists.
        name:
          allOf:
          - $ref: '#/components/schemas/TypeName'
          description: The name of the asset type.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the asset type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the asset type.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormsOutputMap'
          description: The forms included in the details of the asset type.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the Amazon DataZone project that owns the
            asset type.
        originDomainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain where the asset
            type was originally created.
        originProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the Amazon DataZone project where the asset
            type exists.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the asset type was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the asset type.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the asset type was updated.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the asset type.
      required:
      - domainId
      - name
      - revision
      - formsOutput
      - owningProjectId
      description: The details of the asset type.
    AssetTypesForRule:
      type: object
      properties:
        selectionMode:
          allOf:
          - $ref: '#/components/schemas/RuleScopeSelectionMode'
          description: The selection mode for the rule.
        specificAssetTypes:
          allOf:
          - $ref: '#/components/schemas/RuleAssetTypeList'
          description: The specific asset types that are included in the rule.
      required:
      - selectionMode
      description: The asset type for the rule details.
    AssociateEnvironmentRoleInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the environment
            role is associated.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the Amazon DataZone environment.
        environmentRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the environment role.
      required:
      - domainIdentifier
      - environmentIdentifier
      - environmentRoleArn
    AssociateEnvironmentRoleOutput:
      type: object
      properties: {}
    AthenaPropertiesInput:
      type: object
      properties:
        workgroupName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Athena workgroup name of a connection.
      description: The Amazon Athena properties of a connection.
    AthenaPropertiesOutput:
      type: object
      properties:
        workgroupName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Athena workgroup name of a connection.
      description: The Amazon Athena properties of a connection.
    AthenaPropertiesPatch:
      type: object
      properties:
        workgroupName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Athena workgroup name of a connection.
      description: The Amazon Athena properties patch of a connection.
    Attribute:
      type: string
      minLength: 1
      maxLength: 128
    AuthType:
      type: string
      enum:
      - IAM_IDC
      - DISABLED
    AuthenticationConfiguration:
      type: object
      properties:
        authenticationType:
          allOf:
          - $ref: '#/components/schemas/AuthenticationType'
          description: The authentication type of a connection.
        secretArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The secret ARN of a connection.
        oAuth2Properties:
          allOf:
          - $ref: '#/components/schemas/OAuth2Properties'
          description: The oAuth2 properties of a connection.
      description: The authentication configuration of a connection.
    AuthenticationConfigurationInput:
      type: object
      properties:
        authenticationType:
          allOf:
          - $ref: '#/components/schemas/AuthenticationType'
          description: The authentication type of a connection.
        oAuth2Properties:
          allOf:
          - $ref: '#/components/schemas/OAuth2Properties'
          description: The oAuth2 properties of a connection.
        secretArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The secret ARN of a connection.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The KMS key ARN of a connection.
        basicAuthenticationCredentials:
          allOf:
          - $ref: '#/components/schemas/BasicAuthenticationCredentials'
          description: The basic authentication credentials of a connection.
        customAuthenticationCredentials:
          allOf:
          - $ref: '#/components/schemas/CredentialMap'
          description: The custom authentication credentials of a connection.
      description: The authentication configuration of a connection.
    AuthenticationConfigurationPatch:
      type: object
      properties:
        secretArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The secret ARN of a connection.
        basicAuthenticationCredentials:
          allOf:
          - $ref: '#/components/schemas/BasicAuthenticationCredentials'
          description: The basic authentication credentials of a connection.
      description: The authentication configuration patch of a connection.
    AuthenticationType:
      type: string
      enum:
      - BASIC
      - OAUTH2
      - CUSTOM
    AuthorizationCodeProperties:
      type: object
      properties:
        authorizationCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The authorization code of a connection.
        redirectUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The redirect URI of a connection.
      description: The authorization code properties of a connection.
    AuthorizedPrincipalIdentifier:
      type: string
      pattern: ^[a-zA-Z0-9:/._-]*$
    AuthorizedPrincipalIdentifiers:
      type: array
      items:
        $ref: '#/components/schemas/AuthorizedPrincipalIdentifier'
    AwsAccount:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AwsAccountId'
        description: |-
          The account ID of a project.
      - allOf:
        - $ref: '#/components/schemas/ParameterStorePath'
        description: |-
          The account ID path of a project.
      description: |-
        The account ID of a project.
    AwsAccountId:
      type: string
      pattern: ^\d{12}$
    AwsConsoleLinkParameters:
      type: object
      properties:
        uri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The URI of the console link specified as part of the environment
            action.
      description: The parameters of the console link specified as part of the environment
        action.
    AwsLocation:
      type: object
      properties:
        accessRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The access role of a connection.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The account ID of a connection.
        awsRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Region of a connection.
        iamConnectionId:
          allOf:
          - $ref: '#/components/schemas/ConnectionId'
          description: The IAM connection ID of a connection.
      description: The location of a project.
    AwsRegion:
      type: string
      pattern: ^[a-z]{2}-[a-z]{4,10}-\d$
    BasicAuthenticationCredentials:
      type: object
      properties:
        userName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user name for the connecion.
        password:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The password for a connection.
      description: The basic authentication credentials of a connection.
    BusinessNameGenerationConfiguration:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the business name generation is enabled.
      description: The configuration of the business name generation.
    CancelMetadataGenerationRunInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the metadata
            generation run is to be cancelled.
        identifier:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunIdentifier'
          description: The ID of the metadata generation run.
      required:
      - domainIdentifier
      - identifier
    CancelMetadataGenerationRunOutput:
      type: object
      properties: {}
    CancelSubscriptionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The unique identifier of the Amazon DataZone domain where the
            subscription request is being cancelled.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The unique identifier of the subscription that is being cancelled.
      required:
      - domainIdentifier
      - identifier
    CancelSubscriptionOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The identifier of the subscription.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: Specifies the Amazon DataZone user who is cancelling the subscription.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user that cancelled the subscription.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The unique identifier of the Amazon DataZone domain where the
            subscription is being cancelled.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionStatus'
          description: The status of the request to cancel the subscription.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp that specifies when the request to cancel the
            subscription was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp that specifies when the subscription was cancelled.
        subscribedPrincipal:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipal'
          description: The Amazon DataZone user who is made a subscriber to the specified
            asset by the subscription that is being cancelled.
        subscribedListing:
          allOf:
          - $ref: '#/components/schemas/SubscribedListing'
          description: The asset to which a subscription is being cancelled.
        subscriptionRequestId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The unique ID of the subscripton request for the subscription
            that is being cancelled.
        retainPermissions:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the permissions to the asset are retained
            after the subscription is cancelled.
      required:
      - id
      - createdBy
      - domainId
      - status
      - createdAt
      - updatedAt
      - subscribedPrincipal
      - subscribedListing
    ChangeAction:
      type: string
      enum:
      - PUBLISH
      - UNPUBLISH
    ClientToken:
      type: string
      pattern: ^[\x21-\x7E]+$
      minLength: 1
      maxLength: 128
    CloudFormationProperties:
      type: object
      properties:
        templateUrl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The template URL of the cloud formation provisioning properties
            of the environment blueprint.
      required:
      - templateUrl
      description: Part of the provisioning properties of the environment blueprint.
    ColumnFilterConfiguration:
      type: object
      properties:
        includedColumnNames:
          allOf:
          - $ref: '#/components/schemas/ColumnNameList'
          description: Specifies whether to include column names.
      description: The column configuration of the asset filter.
    ColumnNameList:
      type: array
      items:
        type: string
    ComputeEnvironments:
      type: string
      enum:
      - SPARK
      - ATHENA
      - PYTHON
    ComputeEnvironmentsList:
      type: array
      items:
        $ref: '#/components/schemas/ComputeEnvironments'
    ConfigurableActionParameter:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key of the configurable action parameter.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of the configurable action parameter.
      description: The details of the parameters for the configurable environment
        action.
    ConfigurableActionParameterList:
      type: array
      items:
        $ref: '#/components/schemas/ConfigurableActionParameter'
    ConfigurableActionTypeAuthorization:
      type: string
      enum:
      - IAM
      - HTTPS
    ConfigurableEnvironmentAction:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of a configurable action in a Amazon DataZone environment.
        auth:
          allOf:
          - $ref: '#/components/schemas/ConfigurableActionTypeAuthorization'
          description: The authentication type of a configurable action of a Amazon
            DataZone environment.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ConfigurableActionParameterList'
          description: The parameters of a configurable action in a Amazon DataZone
            environment.
      required:
      - type
      - parameters
      description: The configurable action of a Amazon DataZone environment.
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: There is a conflict while performing this action.
    ConnectionCredentials:
      type: object
      properties:
        accessKeyId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The access key ID of a connection.
        secretAccessKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The secret access key of a connection.
        sessionToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The session token of a connection credentials.
        expiration:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The expiration of the connection credentials.
      description: The credentials of a connection.
    ConnectionId:
      type: string
      maxLength: 128
    ConnectionName:
      type: string
      maxLength: 64
    ConnectionProperties:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    ConnectionPropertiesInput:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AthenaPropertiesInput'
        description: |-
          The Amazon Athena properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/GluePropertiesInput'
        description: |-
          The Amazon Web Services Glue properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/HyperPodPropertiesInput'
        description: |-
          The hyper pod properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/IamPropertiesInput'
        description: |-
          The IAM properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/RedshiftPropertiesInput'
        description: |-
          The Amazon Redshift properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/SparkEmrPropertiesInput'
        description: |-
          The Spark EMR properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/SparkGluePropertiesInput'
        description: |-
          The Spark Amazon Web Services Glue properties of a connection.
      description: |-
        The properties of a connection.
    ConnectionPropertiesOutput:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AthenaPropertiesOutput'
        description: |-
          The Amazon Athena properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/GluePropertiesOutput'
        description: |-
          The Amazon Web Services Glue properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/HyperPodPropertiesOutput'
        description: |-
          The hyper pod properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/IamPropertiesOutput'
        description: |-
          The IAM properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/RedshiftPropertiesOutput'
        description: |-
          The Amazon Redshift properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/SparkEmrPropertiesOutput'
        description: |-
          The Spark EMR properties of a connection.
      - allOf:
        - $ref: '#/components/schemas/SparkGluePropertiesOutput'
        description: |-
          The Spark Amazon Web Services Glue properties of a connection.
      description: |-
        The properties of a connection.
    ConnectionPropertiesPatch:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AthenaPropertiesPatch'
        description: |-
          The Amazon Athena properties of a connection properties patch.
      - allOf:
        - $ref: '#/components/schemas/GluePropertiesPatch'
        description: |-
          The Amazon Web Services Glue properties of a connection properties patch.
      - allOf:
        - $ref: '#/components/schemas/IamPropertiesPatch'
        description: |-
          The IAM properties of a connection properties patch.
      - allOf:
        - $ref: '#/components/schemas/RedshiftPropertiesPatch'
        description: |-
          The Amazon Redshift properties of a connection properties patch.
      - allOf:
        - $ref: '#/components/schemas/SparkEmrPropertiesPatch'
        description: |-
          The Spark EMR properties of a connection properties patch.
      description: |-
        The connection properties patch.
    ConnectionStatus:
      type: string
      enum:
      - CREATING
      - CREATE_FAILED
      - DELETING
      - DELETE_FAILED
      - READY
      - UPDATING
      - UPDATE_FAILED
      - DELETED
    ConnectionSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ConnectionSummary'
    ConnectionSummary:
      type: object
      properties:
        connectionId:
          allOf:
          - $ref: '#/components/schemas/ConnectionId'
          description: The ID of a connection.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The domain ID of a connection.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The domain unit ID of a connection.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The environment ID of a connection.
        name:
          allOf:
          - $ref: '#/components/schemas/ConnectionName'
          description: The connection name.
        physicalEndpoints:
          allOf:
          - $ref: '#/components/schemas/PhysicalEndpoints'
          description: The connection physical endpoints.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The connection project ID.
        props:
          allOf:
          - $ref: '#/components/schemas/ConnectionPropertiesOutput'
          description: The connection props.
        type:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The connection type.
      required:
      - connectionId
      - domainId
      - domainUnitId
      - name
      - physicalEndpoints
      - type
      description: The summary of a connection.
    ConnectionType:
      type: string
      enum:
      - ATHENA
      - BIGQUERY
      - DATABRICKS
      - DOCUMENTDB
      - DYNAMODB
      - HYPERPOD
      - IAM
      - MYSQL
      - OPENSEARCH
      - ORACLE
      - POSTGRESQL
      - REDSHIFT
      - SAPHANA
      - SNOWFLAKE
      - SPARK
      - SQLSERVER
      - TERADATA
      - VERTICA
      - WORKFLOWS_MWAA
    CreateAssetFilterInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain in which you want to create an asset filter.
        assetIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the data asset.
        name:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          description: The name of the asset filter.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the asset filter.
        configuration:
          allOf:
          - $ref: '#/components/schemas/AssetFilterConfiguration'
          description: The configuration of the asset filter.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - assetIdentifier
      - name
      - configuration
    CreateAssetFilterOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/FilterId'
          description: The ID of the asset filter.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the asset filter is created.
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the asset.
        name:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          description: The name of the asset filter.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the asset filter.
        status:
          allOf:
          - $ref: '#/components/schemas/FilterStatus'
          description: The status of the asset filter.
        configuration:
          allOf:
          - $ref: '#/components/schemas/AssetFilterConfiguration'
          description: The configuration of the asset filter.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the asset filter was created.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message that is displayed if the asset filter is
            not created successfully.
        effectiveColumnNames:
          allOf:
          - $ref: '#/components/schemas/ColumnNameList'
          description: The column names in the asset filter.
        effectiveRowFilter:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The row filter in the asset filter.
      required:
      - id
      - domainId
      - assetId
      - name
      - configuration
    CreateAssetInput:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: Asset name.
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: Amazon DataZone domain where the asset is created.
        externalIdentifier:
          allOf:
          - $ref: '#/components/schemas/ExternalIdentifier'
          description: The external identifier of the asset.
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetTypeIdentifier'
          description: The unique identifier of this asset's type.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of this asset's type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Asset description.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: Glossary terms attached to the asset.
        formsInput:
          allOf:
          - $ref: '#/components/schemas/FormInputList'
          description: Metadata forms attached to the asset.
        owningProjectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The unique identifier of the project that owns this asset.
        predictionConfiguration:
          allOf:
          - $ref: '#/components/schemas/PredictionConfiguration'
          description: The configuration of the automatically generated business-friendly
            metadata for the asset.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - name
      - domainIdentifier
      - typeIdentifier
      - owningProjectIdentifier
    CreateAssetOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The unique identifier of the created asset.
        name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the created asset.
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetTypeIdentifier'
          description: The identifier of the created asset type.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision type of the asset.
        externalIdentifier:
          allOf:
          - $ref: '#/components/schemas/ExternalIdentifier'
          description: The external identifier of the asset.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the asset.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the created asset.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the asset was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user that created this asset in the catalog.
        firstRevisionCreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the first revision of the asset took
            place.
        firstRevisionCreatedBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user that made the first revision of the
            asset.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms that are attached to the created asset.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project that owns the created
            asset.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the asset was
            created.
        listing:
          allOf:
          - $ref: '#/components/schemas/AssetListingDetails'
          description: The details of an asset published in an Amazon DataZone catalog.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The metadata forms that are attached to the created asset.
        readOnlyFormsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The read-only metadata forms that are attached to the created
            asset.
        latestTimeSeriesDataPointFormsOutput:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointSummaryFormOutputList'
          description: The latest data point that was imported into the time series
            form for the asset.
        predictionConfiguration:
          allOf:
          - $ref: '#/components/schemas/PredictionConfiguration'
          description: The configuration of the automatically generated business-friendly
            metadata for the asset.
      required:
      - id
      - name
      - typeIdentifier
      - typeRevision
      - revision
      - owningProjectId
      - domainId
      - formsOutput
    CreateAssetRevisionInput:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: Te revised name of the asset.
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The unique identifier of the domain where the asset is being
            revised.
        identifier:
          allOf:
          - $ref: '#/components/schemas/AssetIdentifier'
          description: The identifier of the asset.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision type of the asset.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The revised description of the asset.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms to be attached to the asset as part of asset
            revision.
        formsInput:
          allOf:
          - $ref: '#/components/schemas/FormInputList'
          description: The metadata forms to be attached to the asset as part of asset
            revision.
        predictionConfiguration:
          allOf:
          - $ref: '#/components/schemas/PredictionConfiguration'
          description: The configuration of the automatically generated business-friendly
            metadata for the asset.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - name
      - domainIdentifier
      - identifier
    CreateAssetRevisionOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The unique identifier of the asset revision.
        name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The revised name of the asset.
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetTypeIdentifier'
          description: The identifier of the revision type.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision type of the asset.
        externalIdentifier:
          allOf:
          - $ref: '#/components/schemas/ExternalIdentifier'
          description: The external identifier of the asset.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the asset.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The revised asset description.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the asset revision occured.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who performed the asset revision.
        firstRevisionCreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the first asset revision occured.
        firstRevisionCreatedBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who performed the first asset revision.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms that were attached to the asset as part
            of asset revision.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The unique identifier of the revised project that owns the
            asset.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The unique identifier of the Amazon DataZone domain where the
            asset was revised.
        listing:
          allOf:
          - $ref: '#/components/schemas/AssetListingDetails'
          description: The details of an asset published in an Amazon DataZone catalog.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The metadata forms that were attached to the asset as part
            of the asset revision.
        readOnlyFormsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The read-only metadata forms that were attached to the asset
            as part of the asset revision.
        latestTimeSeriesDataPointFormsOutput:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointSummaryFormOutputList'
          description: The latest data point that was imported into the time series
            form for the asset.
        predictionConfiguration:
          allOf:
          - $ref: '#/components/schemas/PredictionConfiguration'
          description: The configuration of the automatically generated business-friendly
            metadata for the asset.
      required:
      - id
      - name
      - typeIdentifier
      - typeRevision
      - revision
      - owningProjectId
      - domainId
      - formsOutput
    CreateAssetTypeInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The unique identifier of the Amazon DataZone domain where the
            custom asset type is being created.
        name:
          allOf:
          - $ref: '#/components/schemas/TypeName'
          description: The name of the custom asset type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The descripton of the custom asset type.
        formsInput:
          allOf:
          - $ref: '#/components/schemas/FormsInputMap'
          description: The metadata forms that are to be attached to the custom asset
            type.
        owningProjectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the Amazon DataZone project that is to own
            the custom asset type.
      required:
      - domainIdentifier
      - name
      - formsInput
      - owningProjectIdentifier
    CreateAssetTypeOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the asset type
            was created.
        name:
          allOf:
          - $ref: '#/components/schemas/TypeName'
          description: The name of the asset type.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the custom asset type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the custom asset type.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormsOutputMap'
          description: The metadata forms that are attached to the asset type.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project that currently owns this
            asset type.
        originDomainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where the asset type was
            originally created.
        originProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project where the asset type
            was originally created.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the asset type is to be created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who creates this custom asset type.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the custom type was created.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user that created the custom asset type.
      required:
      - domainId
      - name
      - revision
      - formsOutput
    CreateAssetTypePolicyGrantDetail:
      type: object
      properties:
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the policy grant is applied to child domain
            units.
      description: The details of the policy grant.
    CreateConnectionInput:
      type: object
      properties:
        awsLocation:
          allOf:
          - $ref: '#/components/schemas/AwsLocation'
          description: The location where the connection is created.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A connection description.
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the connection is created.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment where the connection is created.
        name:
          allOf:
          - $ref: '#/components/schemas/ConnectionName'
          description: The connection name.
        props:
          allOf:
          - $ref: '#/components/schemas/ConnectionPropertiesInput'
          description: The connection props.
      required:
      - domainIdentifier
      - environmentIdentifier
      - name
    CreateConnectionOutput:
      type: object
      properties:
        connectionId:
          allOf:
          - $ref: '#/components/schemas/ConnectionId'
          description: The ID of the connection.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The connection description.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the connection is created.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit where the connection is created.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment where the connection is created.
        name:
          allOf:
          - $ref: '#/components/schemas/ConnectionName'
          description: The connection name.
        physicalEndpoints:
          allOf:
          - $ref: '#/components/schemas/PhysicalEndpoints'
          description: The physical endpoints of the connection.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project where the connection is created.
        props:
          allOf:
          - $ref: '#/components/schemas/ConnectionPropertiesOutput'
          description: The connection props.
        type:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The connection type.
      required:
      - connectionId
      - domainId
      - domainUnitId
      - name
      - physicalEndpoints
      - type
    CreateDataProductInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the data product is created.
        name:
          allOf:
          - $ref: '#/components/schemas/DataProductName'
          description: The name of the data product.
        owningProjectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the owning project of the data product.
        description:
          allOf:
          - $ref: '#/components/schemas/DataProductDescription'
          description: The description of the data product.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms of the data product.
        formsInput:
          allOf:
          - $ref: '#/components/schemas/FormInputList'
          description: The metadata forms of the data product.
        items:
          allOf:
          - $ref: '#/components/schemas/DataProductItems'
          description: The data assets of the data product.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - name
      - owningProjectIdentifier
    CreateDataProductOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the data product lives.
        id:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The ID of the data product.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the data product.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the owning project of the data product.
        name:
          allOf:
          - $ref: '#/components/schemas/DataProductName'
          description: The name of the data product.
        status:
          allOf:
          - $ref: '#/components/schemas/DataProductStatus'
          description: The status of the data product.
        description:
          allOf:
          - $ref: '#/components/schemas/DataProductDescription'
          description: The description of the data product.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms of the data product.
        items:
          allOf:
          - $ref: '#/components/schemas/DataProductItems'
          description: The data assets of the data product.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The metadata forms of the data product.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the data product was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the data product.
        firstRevisionCreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the first revision of the data product
            was created.
        firstRevisionCreatedBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the first revision of the data product.
      required:
      - domainId
      - id
      - revision
      - owningProjectId
      - name
      - status
    CreateDataProductRevisionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the data product revision is created.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The ID of the data product revision.
        name:
          allOf:
          - $ref: '#/components/schemas/DataProductName'
          description: The name of the data product revision.
        description:
          allOf:
          - $ref: '#/components/schemas/DataProductDescription'
          description: The description of the data product revision.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms of the data product revision.
        items:
          allOf:
          - $ref: '#/components/schemas/DataProductItems'
          description: The data assets of the data product revision.
        formsInput:
          allOf:
          - $ref: '#/components/schemas/FormInputList'
          description: The metadata forms of the data product revision.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - identifier
      - name
    CreateDataProductRevisionOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where data product revision is created.
        id:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The ID of the data product revision.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the data product revision.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the owning project of the data product revision.
        name:
          allOf:
          - $ref: '#/components/schemas/DataProductName'
          description: The name of the data product revision.
        status:
          allOf:
          - $ref: '#/components/schemas/DataProductStatus'
          description: The status of the data product revision.
        description:
          allOf:
          - $ref: '#/components/schemas/DataProductDescription'
          description: The description of the data product revision.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms of the data product revision.
        items:
          allOf:
          - $ref: '#/components/schemas/DataProductItems'
          description: The data assets of the data product revision.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The metadata forms of the data product revision.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the data product revision is created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the data product revision.
        firstRevisionCreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the first revision of the data product
            is created.
        firstRevisionCreatedBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the first revision of the data product.
      required:
      - domainId
      - id
      - revision
      - owningProjectId
      - name
      - status
    CreateDataSourceInput:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data source.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the data source.
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where the data source
            is created.
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Amazon DataZone project in which you
            want to add this data source.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique identifier of the Amazon DataZone environment to
            which the data source publishes assets.
        connectionIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the connection.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceType'
          description: The type of the data source. In Amazon DataZone, you can use
            data sources to import technical metadata of assets (data) from the source
            databases or data warehouses into Amazon DataZone. In the current release
            of Amazon DataZone, you can create and run data sources for Amazon Web
            Services Glue and Amazon Redshift.
        configuration:
          allOf:
          - $ref: '#/components/schemas/DataSourceConfigurationInput'
          description: Specifies the configuration of the data source. It can be set
            to either `glueRunConfiguration` or `redshiftRunConfiguration`.
        recommendation:
          allOf:
          - $ref: '#/components/schemas/RecommendationConfiguration'
          description: Specifies whether the business name generation is to be enabled
            for this data source.
        enableSetting:
          allOf:
          - $ref: '#/components/schemas/EnableSetting'
          description: Specifies whether the data source is enabled.
        schedule:
          allOf:
          - $ref: '#/components/schemas/ScheduleConfiguration'
          description: The schedule of the data source runs.
        publishOnImport:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the assets that this data source creates
            in the inventory are to be also automatically published to the catalog.
        assetFormsInput:
          allOf:
          - $ref: '#/components/schemas/FormInputList'
          description: The metadata forms that are to be attached to the assets that
            this data source works with.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - name
      - domainIdentifier
      - projectIdentifier
      - type
    CreateDataSourceOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The unique identifier of the data source.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceStatus'
          description: The status of the data source.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceType'
          description: The type of the data source.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data source.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the data source.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the data source
            is created.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project to which the data source
            is added.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The unique identifier of the Amazon DataZone environment to
            which the data source publishes assets.
        connectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the connection.
        configuration:
          allOf:
          - $ref: '#/components/schemas/DataSourceConfigurationOutput'
          description: Specifies the configuration of the data source. It can be set
            to either `glueRunConfiguration` or `redshiftRunConfiguration`.
        recommendation:
          allOf:
          - $ref: '#/components/schemas/RecommendationConfiguration'
          description: Specifies whether the business name generation is to be enabled
            for this data source.
        enableSetting:
          allOf:
          - $ref: '#/components/schemas/EnableSetting'
          description: Specifies whether the data source is enabled.
        publishOnImport:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the assets that this data source creates
            in the inventory are to be also automatically published to the catalog.
        assetFormsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The metadata forms attached to the assets that this data source
            creates.
        schedule:
          allOf:
          - $ref: '#/components/schemas/ScheduleConfiguration'
          description: The schedule of the data source runs.
        lastRunStatus:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunStatus'
          description: The status of the last run of this data source.
        lastRunAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp that specifies when the data source was last
            run.
        lastRunErrorMessage:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorMessage'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorMessage'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source was updated.
      required:
      - id
      - name
      - domainId
      - projectId
    CreateDomainInput:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon DataZone domain.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the Amazon DataZone domain.
        singleSignOn:
          allOf:
          - $ref: '#/components/schemas/SingleSignOn'
          description: The single-sign on configuration of the Amazon DataZone domain.
        domainExecutionRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The domain execution role that is created when an Amazon DataZone
            domain is created. The domain execution role is created in the Amazon
            Web Services account that houses the Amazon DataZone domain.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The identifier of the Amazon Web Services Key Management Service
            (KMS) key that is used to encrypt the Amazon DataZone domain, metadata,
            and reporting data.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The tags specified for the Amazon DataZone domain.
        domainVersion:
          allOf:
          - $ref: '#/components/schemas/DomainVersion'
          description: The version of the domain that is created.
        serviceRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The service role of the domain that is created.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - name
      - domainExecutionRole
    CreateDomainOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        rootDomainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the root domain unit.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon DataZone domain.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the Amazon DataZone domain.
        singleSignOn:
          allOf:
          - $ref: '#/components/schemas/SingleSignOn'
          description: The single-sign on configuration of the Amazon DataZone domain.
        domainExecutionRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The domain execution role that is created when an Amazon DataZone
            domain is created. The domain execution role is created in the Amazon
            Web Services account that houses the Amazon DataZone domain.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the Amazon DataZone domain.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The identifier of the Amazon Web Services Key Management Service
            (KMS) key that is used to encrypt the Amazon DataZone domain, metadata,
            and reporting data.
        status:
          allOf:
          - $ref: '#/components/schemas/DomainStatus'
          description: The status of the Amazon DataZone domain.
        portalUrl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The URL of the data portal for this Amazon DataZone domain.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The tags specified for the Amazon DataZone domain.
        domainVersion:
          allOf:
          - $ref: '#/components/schemas/DomainVersion'
          description: The version of the domain that is created.
        serviceRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: Te service role of the domain that is created.
      required:
      - id
    CreateDomainUnitInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to crate a domain unit.
        name:
          allOf:
          - $ref: '#/components/schemas/DomainUnitName'
          description: The name of the domain unit.
        parentDomainUnitIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the parent domain unit.
        description:
          allOf:
          - $ref: '#/components/schemas/DomainUnitDescription'
          description: The description of the domain unit.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - name
      - parentDomainUnitIdentifier
    CreateDomainUnitOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the domain unit was created.
        name:
          allOf:
          - $ref: '#/components/schemas/DomainUnitName'
          description: The name of the domain unit.
        parentDomainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the parent domain unit.
        description:
          allOf:
          - $ref: '#/components/schemas/DomainUnitDescription'
          description: The description of the domain unit.
        owners:
          allOf:
          - $ref: '#/components/schemas/DomainUnitOwners'
          description: The owners of the domain unit.
        ancestorDomainUnitIds:
          allOf:
          - $ref: '#/components/schemas/DomainUnitIds'
          description: The IDs of the ancestor domain units.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the domain unit was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the domain unit.
      required:
      - id
      - domainId
      - name
      - owners
      - ancestorDomainUnitIds
    CreateDomainUnitPolicyGrantDetail:
      type: object
      properties:
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the policy grant is applied to child domain
            units.
      description: The details of the policy grant.
    CreateEnvironmentActionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the environment
            action is created.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment in which the environment action is
            created.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the environment action.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ActionParameters'
          description: The parameters of the environment action.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the environment action that is being created
            in the environment.
      required:
      - domainIdentifier
      - environmentIdentifier
      - name
      - parameters
    CreateEnvironmentActionOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain in which the environment action is created.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment in which the environment is created.
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentActionId'
          description: The ID of the environment action.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the environment action.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ActionParameters'
          description: The parameters of the environment action.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the environment action.
      required:
      - domainId
      - environmentId
      - id
      - name
      - parameters
    CreateEnvironmentInput:
      type: object
      properties:
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the Amazon DataZone project in which this
            environment is created.
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the environment
            is created.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the Amazon DataZone environment.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon DataZone environment.
        environmentProfileIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The identifier of the environment profile that is used to create
            this Amazon DataZone environment.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentParametersList'
          description: The user parameters of this Amazon DataZone environment.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms that can be used in this Amazon DataZone
            environment.
        environmentAccountIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the account in which the environment is being created.
        environmentAccountRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The region of the account in which the environment is being
            created.
        environmentBlueprintIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the blueprint with which the environment is being
            created.
        deploymentOrder:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The deployment order of the environment.
        environmentConfigurationId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The configuration ID of the environment.
      required:
      - projectIdentifier
      - domainIdentifier
      - name
      - environmentProfileIdentifier
    CreateEnvironmentOutput:
      type: object
      properties:
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project in which this environment
            is created.
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of this Amazon DataZone environment.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the environment
            is created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon DataZone user who created this environment.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when this environment was updated.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name of this environment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of this Amazon DataZone environment.
        environmentProfileId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The ID of the environment profile with which this Amazon DataZone
            environment was created.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The Amazon Web Services account in which the Amazon DataZone
            environment is created.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services region in which the Amazon DataZone
            environment is created.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of this Amazon DataZone environment.
        provisionedResources:
          allOf:
          - $ref: '#/components/schemas/ResourceList'
          description: The provisioned resources of this Amazon DataZone environment.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: The status of this Amazon DataZone environment.
        environmentActions:
          allOf:
          - $ref: '#/components/schemas/EnvironmentActionList'
          description: The configurable actions of this Amazon DataZone environment.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms that can be used in this Amazon DataZone
            environment.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/CustomParameterList'
          description: The user parameters of this Amazon DataZone environment.
        lastDeployment:
          allOf:
          - $ref: '#/components/schemas/Deployment'
          description: The details of the last deployment of this Amazon DataZone
            environment.
        provisioningProperties:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProperties'
          description: The provisioning properties of this Amazon DataZone environment.
        deploymentProperties:
          allOf:
          - $ref: '#/components/schemas/DeploymentProperties'
          description: The deployment properties of this Amazon DataZone environment.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The ID of the blueprint with which this Amazon DataZone environment
            was created.
        environmentConfigurationId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationId'
          description: The configuration ID of the environment.
      required:
      - projectId
      - domainId
      - createdBy
      - name
      - provider
    CreateEnvironmentProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this environment
            profile is created.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileName'
          description: The name of this Amazon DataZone environment profile.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of this Amazon DataZone environment profile.
        environmentBlueprintIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The ID of the blueprint with which this environment profile
            is created.
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project in which to create the environment
            profile.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentParametersList'
          description: The user parameters of this Amazon DataZone environment profile.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The Amazon Web Services account in which the Amazon DataZone
            environment is created.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services region in which this environment profile
            is created.
      required:
      - domainIdentifier
      - name
      - environmentBlueprintIdentifier
      - projectIdentifier
    CreateEnvironmentProfileOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The ID of this Amazon DataZone environment profile.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this environment
            profile is created.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The Amazon Web Services account ID in which this Amazon DataZone
            environment profile is created.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services region in which this Amazon DataZone
            environment profile is created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon DataZone user who created this environment profile.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when this environment profile was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when this environment profile was updated.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileName'
          description: The name of this Amazon DataZone environment profile.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of this Amazon DataZone environment profile.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The ID of the blueprint with which this environment profile
            is created.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project in which this environment
            profile is created.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/CustomParameterList'
          description: The user parameters of this Amazon DataZone environment profile.
      required:
      - id
      - domainId
      - createdBy
      - name
      - environmentBlueprintId
    CreateEnvironmentProfilePolicyGrantDetail:
      type: object
      properties:
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit.
      description: The details of the policy grant.
    CreateFormTypeInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this metadata
            form type is created.
        name:
          allOf:
          - $ref: '#/components/schemas/FormTypeName'
          description: The name of this Amazon DataZone metadata form type.
        model:
          allOf:
          - $ref: '#/components/schemas/Model'
          description: The model of this Amazon DataZone metadata form type.
        owningProjectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project that owns this metadata
            form type.
        status:
          allOf:
          - $ref: '#/components/schemas/FormTypeStatus'
          description: The status of this Amazon DataZone metadata form type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of this Amazon DataZone metadata form type.
      required:
      - domainIdentifier
      - name
      - model
      - owningProjectIdentifier
    CreateFormTypeOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this metadata
            form type is created.
        name:
          allOf:
          - $ref: '#/components/schemas/FormTypeName'
          description: The name of this Amazon DataZone metadata form type.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of this Amazon DataZone metadata form type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of this Amazon DataZone metadata form type.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project that owns this Amazon DataZone metadata
            form type.
        originDomainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this metadata
            form type was originally created.
        originProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project in which this Amazon DataZone metadata
            form type was originally created.
      required:
      - domainId
      - name
      - revision
    CreateFormTypePolicyGrantDetail:
      type: object
      properties:
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the policy grant is applied to child domain
            units.
      description: The details of the policy grant.
    CreateGlossaryInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this business
            glossary is created.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryName'
          description: The name of this business glossary.
        owningProjectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project that currently owns business glossary.
        description:
          allOf:
          - $ref: '#/components/schemas/GlossaryDescription'
          description: The description of this business glossary.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryStatus'
          description: The status of this business glossary.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - name
      - owningProjectIdentifier
    CreateGlossaryOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this business
            glossary is created.
        id:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The ID of this business glossary.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryName'
          description: The name of this business glossary.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project that currently owns this business glossary.
        description:
          allOf:
          - $ref: '#/components/schemas/GlossaryDescription'
          description: The description of this business glossary.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryStatus'
          description: The status of this business glossary.
      required:
      - domainId
      - id
      - name
      - owningProjectId
    CreateGlossaryPolicyGrantDetail:
      type: object
      properties:
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the policy grant is applied to child domain
            units.
      description: The details of the policy grant.
    CreateGlossaryTermInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this business
            glossary term is created.
        glossaryIdentifier:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermId'
          description: The ID of the business glossary in which this term is created.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermName'
          description: The name of this business glossary term.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermStatus'
          description: The status of this business glossary term.
        shortDescription:
          allOf:
          - $ref: '#/components/schemas/ShortDescription'
          description: The short description of this business glossary term.
        longDescription:
          allOf:
          - $ref: '#/components/schemas/LongDescription'
          description: The long description of this business glossary term.
        termRelations:
          allOf:
          - $ref: '#/components/schemas/TermRelations'
          description: The term relations of this business glossary term.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - glossaryIdentifier
      - name
    CreateGlossaryTermOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermId'
          description: The ID of this business glossary term.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this business
            glossary term is created.
        glossaryId:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The ID of the business glossary in which this term is created.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermName'
          description: The name of this business glossary term.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermStatus'
          description: The status of this business glossary term.
        shortDescription:
          allOf:
          - $ref: '#/components/schemas/ShortDescription'
          description: The short description of this business glossary term.
        longDescription:
          allOf:
          - $ref: '#/components/schemas/LongDescription'
          description: The long description of this business glossary term.
        termRelations:
          allOf:
          - $ref: '#/components/schemas/TermRelations'
          description: The term relations of this business glossary term.
      required:
      - id
      - domainId
      - glossaryId
      - name
      - status
    CreateGroupProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the group
            profile is created.
        groupIdentifier:
          allOf:
          - $ref: '#/components/schemas/GroupIdentifier'
          description: The identifier of the group for which the group profile is
            created.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - groupIdentifier
    CreateGroupProfileOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the group
            profile is created.
        id:
          allOf:
          - $ref: '#/components/schemas/GroupProfileId'
          description: The identifier of the group profile.
        status:
          allOf:
          - $ref: '#/components/schemas/GroupProfileStatus'
          description: The status of the group profile.
        groupName:
          allOf:
          - $ref: '#/components/schemas/GroupProfileName'
          description: The name of the group for which group profile is created.
    CreateListingChangeSetInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/EntityIdentifier'
          description: The ID of the asset.
        entityType:
          allOf:
          - $ref: '#/components/schemas/EntityType'
          description: The type of an entity.
        entityRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of an asset.
        action:
          allOf:
          - $ref: '#/components/schemas/ChangeAction'
          description: Specifies whether to publish or unpublish a listing.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - entityIdentifier
      - entityType
      - action
    CreateListingChangeSetOutput:
      type: object
      properties:
        listingId:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The ID of the listing (a record of an asset at a given time).
        listingRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of a listing.
        status:
          allOf:
          - $ref: '#/components/schemas/ListingStatus'
          description: Specifies the status of the listing.
      required:
      - listingId
      - listingRevision
      - status
    CreateProjectFromProjectProfilePolicyGrantDetail:
      type: object
      properties:
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to include child domain units when creating
            a project from project profile policy grant details
        projectProfiles:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileList'
          description: Specifies project profiles when creating a project from project
            profile policy grant details
      description: Specifies whether to create a project from project profile policy
        grant details.
    CreateProjectInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this project
            is created.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the Amazon DataZone project.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the Amazon DataZone project.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms that can be used in this Amazon DataZone
            project.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit. This parameter is not required and
            if it is not specified, then the project is created at the root domain
            unit level.
        projectProfileId:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: The ID of the project profile.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationUserParametersList'
          description: The user parameters of the project.
      required:
      - domainIdentifier
      - name
    CreateProjectMembershipInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which project membership
            is created.
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project for which this project membership was
            created.
        member:
          allOf:
          - $ref: '#/components/schemas/Member'
          description: The project member whose project membership was created.
        designation:
          allOf:
          - $ref: '#/components/schemas/UserDesignation'
          description: The designation of the project membership.
      required:
      - domainIdentifier
      - projectIdentifier
      - member
      - designation
    CreateProjectMembershipOutput:
      type: object
      properties: {}
    CreateProjectOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the project
            was created.
        id:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the project.
        projectStatus:
          allOf:
          - $ref: '#/components/schemas/ProjectStatus'
          description: The status of the Amazon DataZone project that was created.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the project.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the project was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the project was last updated.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms that can be used in the project.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit.
        projectProfileId:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: The project profile ID.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationUserParametersList'
          description: The user parameters of the project.
        environmentDeploymentDetails:
          allOf:
          - $ref: '#/components/schemas/EnvironmentDeploymentDetails'
          description: The environment deployment details.
      required:
      - domainId
      - id
      - name
      - createdBy
    CreateProjectPolicyGrantDetail:
      type: object
      properties:
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the policy grant is applied to child domain
            units.
      description: The details of the policy grant.
    CreateProjectProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: A domain ID of the project profile.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileName'
          description: Project profile name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of a project profile.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Project profile status.
        environmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationsList'
          description: Environment configurations of the project profile.
        domainUnitIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: A domain unit ID of the project profile.
      required:
      - domainIdentifier
      - name
    CreateProjectProfileOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where a project profile is created.
        id:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: Project profile ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileName'
          description: Project profile name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A project profile description.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Project profile status.
        environmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationsList'
          description: Environment configurations of a project profile.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: A user who created a project profile.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp at which a project profile is created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp when a project profile was last updated.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit where a project profile is created.
      required:
      - domainId
      - id
      - name
      - createdBy
    CreateRuleInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the rule is created.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the rule.
        target:
          allOf:
          - $ref: '#/components/schemas/RuleTarget'
          description: The target of the rule.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action of the rule.
        scope:
          allOf:
          - $ref: '#/components/schemas/RuleScope'
          description: The scope of the rule.
        detail:
          allOf:
          - $ref: '#/components/schemas/RuleDetail'
          description: The detail of the rule.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the rule.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - name
      - target
      - action
      - scope
      - detail
    CreateRuleOutput:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the rule.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the rule.
        ruleType:
          allOf:
          - $ref: '#/components/schemas/RuleType'
          description: The type of the rule.
        target:
          allOf:
          - $ref: '#/components/schemas/RuleTarget'
          description: The target of the rule.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action of the rule.
        scope:
          allOf:
          - $ref: '#/components/schemas/RuleScope'
          description: The scope of the rule.
        detail:
          allOf:
          - $ref: '#/components/schemas/RuleDetail'
          description: The detail of the rule.
        targetType:
          allOf:
          - $ref: '#/components/schemas/RuleTargetType'
          description: The target type of the rule.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the rule.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the rule is created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who creates the rule.
      required:
      - identifier
      - name
      - ruleType
      - target
      - action
      - scope
      - detail
      - createdAt
      - createdBy
    CreateSubscriptionGrantInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            grant is created.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment in which the subscription grant is
            created.
        subscriptionTargetIdentifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The ID of the subscription target for which the subscription
            grant is created.
        grantedEntity:
          allOf:
          - $ref: '#/components/schemas/GrantedEntityInput'
          description: The entity to which the subscription is to be granted.
        assetTargetNames:
          allOf:
          - $ref: '#/components/schemas/AssetTargetNames'
          description: The names of the assets for which the subscription grant is
            created.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - environmentIdentifier
      - grantedEntity
    CreateSubscriptionGrantOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantId'
          description: The ID of the subscription grant.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription grant.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription grant.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            grant is created.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: A timestamp of when the subscription grant is created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: A timestamp of when the subscription grant was updated.
        subscriptionTargetId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The ID of the subscription target for which the subscription
            grant is created.
        grantedEntity:
          allOf:
          - $ref: '#/components/schemas/GrantedEntity'
          description: The entity to which the subscription is granted.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantOverallStatus'
          description: The status of the subscription grant.
        assets:
          allOf:
          - $ref: '#/components/schemas/SubscribedAssets'
          description: The assets for which the subscription grant is created.
        subscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The identifier of the subscription grant.
      required:
      - id
      - createdBy
      - domainId
      - createdAt
      - updatedAt
      - subscriptionTargetId
      - grantedEntity
      - status
    CreateSubscriptionRequestInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            request is created.
        subscribedPrincipals:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipalInputs'
          description: The Amazon DataZone principals for whom the subscription request
            is created.
        subscribedListings:
          allOf:
          - $ref: '#/components/schemas/SubscribedListingInputs'
          description: The published asset for which the subscription grant is to
            be created.
        requestReason:
          allOf:
          - $ref: '#/components/schemas/RequestReason'
          description: The reason for the subscription request.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
        metadataForms:
          allOf:
          - $ref: '#/components/schemas/MetadataFormInputs'
          description: The metadata form included in the subscription request.
      required:
      - domainIdentifier
      - subscribedPrincipals
      - subscribedListings
      - requestReason
    CreateSubscriptionRequestOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The ID of the subscription request.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription request.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription request.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in whcih the subscription
            request is created.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestStatus'
          description: The status of the subscription request.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: A timestamp of when the subscription request is created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription request was updated.
        requestReason:
          allOf:
          - $ref: '#/components/schemas/RequestReason'
          description: The reason for the subscription request.
        subscribedPrincipals:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipals'
          description: The subscribed principals of the subscription request.
        subscribedListings:
          allOf:
          - $ref: '#/components/schemas/SubscribedListings'
          description: The published asset for which the subscription grant is to
            be created.
        reviewerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the reviewer of the subscription request.
        decisionComment:
          allOf:
          - $ref: '#/components/schemas/DecisionComment'
          description: The decision comment of the subscription request.
        existingSubscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The ID of the existing subscription.
        metadataForms:
          allOf:
          - $ref: '#/components/schemas/MetadataForms'
          description: The metadata form included in the subscription request.
      required:
      - id
      - createdBy
      - domainId
      - status
      - createdAt
      - updatedAt
      - requestReason
      - subscribedPrincipals
      - subscribedListings
    CreateSubscriptionTargetInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which subscription
            target is created.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment in which subscription target is created.
        name:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetName'
          description: The name of the subscription target.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the subscription target.
        subscriptionTargetConfig:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetForms'
          description: The configuration of the subscription target.
        authorizedPrincipals:
          allOf:
          - $ref: '#/components/schemas/AuthorizedPrincipalIdentifiers'
          description: The authorized principals of the subscription target.
        manageAccessRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The manage access role that is used to create the subscription
            target.
        applicableAssetTypes:
          allOf:
          - $ref: '#/components/schemas/ApplicableAssetTypes'
          description: The asset types that can be included in the subscription target.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of the subscription target.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - environmentIdentifier
      - name
      - type
      - subscriptionTargetConfig
      - authorizedPrincipals
      - manageAccessRole
      - applicableAssetTypes
    CreateSubscriptionTargetOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The ID of the subscription target.
        authorizedPrincipals:
          allOf:
          - $ref: '#/components/schemas/AuthorizedPrincipalIdentifiers'
          description: The authorised principals of the subscription target.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            target was created.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: ???
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment in which the subscription target
            was created.
        name:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetName'
          description: The name of the subscription target.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the subscription target.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription target.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription target.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription target was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription target was updated.
        manageAccessRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The manage access role with which the subscription target was
            created.
        applicableAssetTypes:
          allOf:
          - $ref: '#/components/schemas/ApplicableAssetTypes'
          description: The asset types that can be included in the subscription target.
        subscriptionTargetConfig:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetForms'
          description: The configuration of the subscription target.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of the subscription target.
      required:
      - id
      - authorizedPrincipals
      - domainId
      - projectId
      - environmentId
      - name
      - type
      - createdBy
      - createdAt
      - applicableAssetTypes
      - subscriptionTargetConfig
      - provider
    CreateUserProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a user
            profile is created.
        userIdentifier:
          allOf:
          - $ref: '#/components/schemas/UserIdentifier'
          description: The identifier of the user for which the user profile is created.
        userType:
          allOf:
          - $ref: '#/components/schemas/UserType'
          description: The user type of the user for which the user profile is created.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - userIdentifier
    CreateUserProfileOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a user
            profile is created.
        id:
          allOf:
          - $ref: '#/components/schemas/UserProfileId'
          description: The identifier of the user profile.
        type:
          allOf:
          - $ref: '#/components/schemas/UserProfileType'
          description: The type of the user profile.
        status:
          allOf:
          - $ref: '#/components/schemas/UserProfileStatus'
          description: The status of the user profile.
        details:
          $ref: '#/components/schemas/UserProfileDetails'
    CreatedAt:
      type: string
      format: date-time
    CreatedBy:
      type: string
    CredentialMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    CronString:
      type: string
      pattern: cron\((\b[0-5]?[0-9]\b) (\b2[0-3]\b|\b[0-1]?[0-9]\b) ([-?*,/\dLW]){1,83}
        ([-*,/\d]|[a-zA-Z]{3}){1,23} ([-?#*,/\dL]|[a-zA-Z]{3}){1,13} ([^\)]+)\)
      minLength: 1
      maxLength: 256
    CustomParameter:
      type: object
      properties:
        keyName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key name of the parameter.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the parameter.
        fieldType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The filed type of the parameter.
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The default value of the parameter.
        isEditable:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the parameter is editable.
        isOptional:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the custom parameter is optional.
      required:
      - keyName
      - fieldType
      description: The details of user parameters of an environment blueprint.
    CustomParameterList:
      type: array
      items:
        $ref: '#/components/schemas/CustomParameter'
    DataAssetActivityStatus:
      type: string
      enum:
      - FAILED
      - PUBLISHING_FAILED
      - SUCCEEDED_CREATED
      - SUCCEEDED_UPDATED
      - SKIPPED_ALREADY_IMPORTED
      - SKIPPED_ARCHIVED
      - SKIPPED_NO_ACCESS
      - UNCHANGED
    DataPointIdentifier:
      type: string
      pattern: ^[a-zA-Z0-9_-]{0,36}$
    DataProductDescription:
      type: string
      minLength: 1
      maxLength: 4096
    DataProductId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    DataProductItem:
      type: object
      properties:
        itemType:
          allOf:
          - $ref: '#/components/schemas/DataProductItemType'
          description: The type of the data product.
        identifier:
          allOf:
          - $ref: '#/components/schemas/EntityIdentifier'
          description: The ID of the data product.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the data product.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/ItemGlossaryTerms'
          description: The glossary terms of the data product.
      required:
      - itemType
      - identifier
      description: The data product.
    DataProductItemType:
      type: string
      enum:
      - ASSET
    DataProductItems:
      type: array
      items:
        $ref: '#/components/schemas/DataProductItem'
    DataProductListing:
      type: object
      properties:
        dataProductId:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The ID of the data product listing.
        dataProductRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the data product listing.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the data product listing was created.
        forms:
          allOf:
          - $ref: '#/components/schemas/Forms'
          description: The metadata forms of the data product listing.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/DetailedGlossaryTerms'
          description: The glossary terms of the data product listing.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the owning project of the data product listing.
        items:
          allOf:
          - $ref: '#/components/schemas/ListingSummaries'
          description: The data assets of the data product listing.
      description: The data product listing.
    DataProductListingItem:
      type: object
      properties:
        listingId:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The ID of the listing.
        listingRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the listing.
        name:
          allOf:
          - $ref: '#/components/schemas/DataProductName'
          description: The name of the asset of the data product.
        entityId:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The entity ID of the asset of the asset of the data product.
        entityRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the asset of the asset of the data product.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the asset of the asset of the data product.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the asset of the data product listing
            was created.
        listingCreatedBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The timestamp at which the listing was created.
        listingUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The user who updated the listing.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/DetailedGlossaryTerms'
          description: The glossary terms of the asset of the asset of the data product.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the owning project of the asset of the data product.
        additionalAttributes:
          allOf:
          - $ref: '#/components/schemas/DataProductListingItemAdditionalAttributes'
          description: The additional attributes of the asset of the data product.
        items:
          allOf:
          - $ref: '#/components/schemas/ListingSummaryItems'
          description: The data of the asset of the data product.
      description: The asset of the data product listing.
    DataProductListingItemAdditionalAttributes:
      type: object
      properties:
        forms:
          allOf:
          - $ref: '#/components/schemas/Forms'
          description: The metadata forms of the asset of the data product.
      description: The additional attributes of the asset of the data product.
    DataProductName:
      type: string
      minLength: 1
      maxLength: 64
    DataProductResultItem:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the data product lives.
        id:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The ID of the data product.
        name:
          allOf:
          - $ref: '#/components/schemas/DataProductName'
          description: The name of the data product.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the owning project of the data product.
        description:
          allOf:
          - $ref: '#/components/schemas/DataProductDescription'
          description: The description of the data product.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms of the data product.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the data product was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the data product.
        firstRevisionCreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which first revision of the data product was
            created.
        firstRevisionCreatedBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the first revision of the data product.
      required:
      - domainId
      - id
      - name
      - owningProjectId
      description: The data product.
    DataProductRevision:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the data product revision lives.
        id:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The ID of the data product revision.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The data product revision.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the data product revision was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the data product revision.
      description: The data product revision.
    DataProductRevisions:
      type: array
      items:
        $ref: '#/components/schemas/DataProductRevision'
    DataProductStatus:
      type: string
      enum:
      - CREATED
      - CREATING
      - CREATE_FAILED
    DataSourceConfigurationInput:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/GlueRunConfigurationInput'
        description: |-
          The configuration of the Amazon Web Services Glue data source.
      - allOf:
        - $ref: '#/components/schemas/RedshiftRunConfigurationInput'
        description: |-
          The configuration of the Amazon Redshift data source.
      - allOf:
        - $ref: '#/components/schemas/SageMakerRunConfigurationInput'
        description: |-
          The Amazon SageMaker run configuration.
      description: |-
        The configuration of the data source.
    DataSourceConfigurationOutput:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/GlueRunConfigurationOutput'
        description: |-
          The configuration of the Amazon Web Services Glue data source.
      - allOf:
        - $ref: '#/components/schemas/RedshiftRunConfigurationOutput'
        description: |-
          The configuration of the Amazon Redshift data source.
      - allOf:
        - $ref: '#/components/schemas/SageMakerRunConfigurationOutput'
        description: |-
          The Amazon SageMaker run configuration.
      description: |-
        The configuration of the data source.
    DataSourceErrorMessage:
      type: object
      properties:
        errorType:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorType'
          description: The type of the error message that is returned if the operation
            cannot be successfully completed.
        errorDetail:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The details of the error message that is returned if the operation
            cannot be successfully completed.
      required:
      - errorType
      description: The details of the error message that is returned if the operation
        cannot be successfully completed.
    DataSourceErrorType:
      type: string
      enum:
      - ACCESS_DENIED_EXCEPTION
      - CONFLICT_EXCEPTION
      - INTERNAL_SERVER_EXCEPTION
      - RESOURCE_NOT_FOUND_EXCEPTION
      - SERVICE_QUOTA_EXCEEDED_EXCEPTION
      - THROTTLING_EXCEPTION
      - VALIDATION_EXCEPTION
    DataSourceId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    DataSourceRunActivities:
      type: array
      items:
        $ref: '#/components/schemas/DataSourceRunActivity'
    DataSourceRunActivity:
      type: object
      properties:
        database:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The database included in the data source run activity.
        dataSourceRunId:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunId'
          description: The identifier of the data source for the data source run activity.
        technicalName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The technical name included in the data source run activity.
        dataAssetStatus:
          allOf:
          - $ref: '#/components/schemas/DataAssetActivityStatus'
          description: The status of the asset included in the data source run activity.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The project ID included in the data source run activity.
        dataAssetId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the asset included in the data source run
            activity.
        technicalDescription:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The technical description included in the data source run activity.
        errorMessage:
          $ref: '#/components/schemas/DataSourceErrorMessage'
        lineageSummary:
          allOf:
          - $ref: '#/components/schemas/LineageInfo'
          description: The data lineage summary.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when data source run activity was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when data source run activity was updated.
      required:
      - database
      - dataSourceRunId
      - technicalName
      - dataAssetStatus
      - projectId
      - createdAt
      - updatedAt
      description: The activity details of the data source run.
    DataSourceRunId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    DataSourceRunLineageSummary:
      type: object
      properties:
        importStatus:
          allOf:
          - $ref: '#/components/schemas/LineageImportStatus'
          description: The import status that's part of the run lineage summary of
            a data source.
      description: The run lineage summary of a data source.
    DataSourceRunStatus:
      type: string
      enum:
      - REQUESTED
      - RUNNING
      - FAILED
      - PARTIALLY_SUCCEEDED
      - SUCCESS
    DataSourceRunSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DataSourceRunSummary'
    DataSourceRunSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunId'
          description: The identifier of the data source run.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The identifier of the data source of the data source run.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunType'
          description: The type of the data source run.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunStatus'
          description: The status of the data source run.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The project ID of the data source run.
        runStatisticsForAssets:
          $ref: '#/components/schemas/RunStatisticsForAssets'
        errorMessage:
          $ref: '#/components/schemas/DataSourceErrorMessage'
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when a data source run was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when a data source run was updated.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when a data source run was started.
        stoppedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when a data source run was stopped.
        lineageSummary:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunLineageSummary'
          description: The run lineage summary of a data source.
      required:
      - id
      - dataSourceId
      - type
      - status
      - projectId
      - createdAt
      - updatedAt
      description: The details of a data source run.
    DataSourceRunType:
      type: string
      enum:
      - PRIORITIZED
      - SCHEDULED
    DataSourceStatus:
      type: string
      enum:
      - CREATING
      - FAILED_CREATION
      - READY
      - UPDATING
      - FAILED_UPDATE
      - RUNNING
      - DELETING
      - FAILED_DELETION
    DataSourceSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DataSourceSummary'
    DataSourceSummary:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the data source
            exists.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the environment in which the data source exists.
        connectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The connection ID that's part of the data source summary.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The ID of the data source.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data source.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the data source.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceStatus'
          description: The status of the data source.
        enableSetting:
          allOf:
          - $ref: '#/components/schemas/EnableSetting'
          description: Specifies whether the data source is enabled.
        schedule:
          $ref: '#/components/schemas/ScheduleConfiguration'
        lastRunStatus:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunStatus'
          description: The status of the last data source run.
        lastRunAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source run was last performed.
        lastRunErrorMessage:
          $ref: '#/components/schemas/DataSourceErrorMessage'
        lastRunAssetCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The count of the assets created during the last data source
            run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source was updated.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The data source description.
      required:
      - domainId
      - dataSourceId
      - name
      - type
      - status
      description: The details of the data source.
    DataSourceType:
      type: string
      minLength: 1
      maxLength: 256
    DataZoneEntityType:
      type: string
      enum:
      - DOMAIN_UNIT
    DateTime:
      type: string
      format: date-time
    DecisionComment:
      type: string
      minLength: 1
      maxLength: 4096
    DeleteAssetFilterInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to delete an asset filter.
        assetIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the data asset.
        identifier:
          allOf:
          - $ref: '#/components/schemas/FilterId'
          description: The ID of the asset filter that you want to delete.
      required:
      - domainIdentifier
      - assetIdentifier
      - identifier
    DeleteAssetInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the asset is
            deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/AssetIdentifier'
          description: The identifier of the asset that is deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteAssetOutput:
      type: object
      properties: {}
    DeleteAssetTypeInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the asset type
            is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/AssetTypeIdentifier'
          description: The identifier of the asset type that is deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteAssetTypeOutput:
      type: object
      properties: {}
    DeleteConnectionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the connection is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ConnectionId'
          description: The ID of the connection that is deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteConnectionOutput:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The status of the action.
    DeleteDataProductInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the data product
            is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The identifier of the data product that is deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteDataProductOutput:
      type: object
      properties: {}
    DeleteDataSourceInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the data source
            is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The identifier of the data source that is deleted.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
        retainPermissionsOnRevokeFailure:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies that the granted permissions are retained in case
            of a self-subscribe functionality failure for a data source.
      required:
      - domainIdentifier
      - identifier
    DeleteDataSourceOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The ID of the data source that is deleted.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceStatus'
          description: The status of this data source.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceType'
          description: The type of this data source.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data source that is deleted.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the data source that is deleted.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the data source
            is deleted.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project in which this data source exists and
            from which it's deleted.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environemnt associated with this data source.
        connectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the connection that is deleted.
        configuration:
          allOf:
          - $ref: '#/components/schemas/DataSourceConfigurationOutput'
          description: The configuration of the data source that is deleted.
        enableSetting:
          allOf:
          - $ref: '#/components/schemas/EnableSetting'
          description: The enable setting of the data source that specifies whether
            the data source is enabled or disabled.
        publishOnImport:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the assets that this data source creates
            in the inventory are to be also automatically published to the catalog.
        assetFormsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The asset data forms associated with this data source.
        schedule:
          allOf:
          - $ref: '#/components/schemas/ScheduleConfiguration'
          description: The schedule of runs for this data source.
        lastRunStatus:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunStatus'
          description: The status of the last run of this data source.
        lastRunAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source was last run.
        lastRunErrorMessage:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorMessage'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorMessage'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when this data source was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when this data source was updated.
        selfGrantStatus:
          allOf:
          - $ref: '#/components/schemas/SelfGrantStatusOutput'
          description: Specifies the status of the self-granting functionality.
        retainPermissionsOnRevokeFailure:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies that the granted permissions are retained in case
            of a self-subscribe functionality failure for a data source.
      required:
      - id
      - name
      - domainId
      - projectId
    DeleteDomainInput:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon Web Services domain that is to
            be deleted.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
        skipDeletionCheck:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies the optional flag to delete all child entities within
            the domain.
      required:
      - identifier
    DeleteDomainOutput:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/DomainStatus'
          description: The status of the domain.
      required:
      - status
    DeleteDomainUnitInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to delete a domain unit.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit that you want to delete.
      required:
      - domainIdentifier
      - identifier
    DeleteDomainUnitOutput:
      type: object
      properties: {}
    DeleteEnvironmentActionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which an environment
            action is deleted.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment where an environment action is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the environment action that is deleted.
      required:
      - domainIdentifier
      - environmentIdentifier
      - identifier
    DeleteEnvironmentBlueprintConfigurationInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the blueprint
            configuration is deleted.
        environmentBlueprintIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The ID of the blueprint the configuration of which is deleted.
      required:
      - domainIdentifier
      - environmentBlueprintIdentifier
    DeleteEnvironmentBlueprintConfigurationOutput:
      type: object
      properties: {}
    DeleteEnvironmentInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the environment
            is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The identifier of the environment that is to be deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteEnvironmentProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the environment
            profile is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The ID of the environment profile that is deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteFormTypeInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the metadata
            form type is deleted.
        formTypeIdentifier:
          allOf:
          - $ref: '#/components/schemas/FormTypeIdentifier'
          description: The ID of the metadata form type that is deleted.
      required:
      - domainIdentifier
      - formTypeIdentifier
    DeleteFormTypeOutput:
      type: object
      properties: {}
    DeleteGlossaryInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the business
            glossary is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The ID of the business glossary that is deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteGlossaryOutput:
      type: object
      properties: {}
    DeleteGlossaryTermInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the business
            glossary term is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermId'
          description: The ID of the business glossary term that is deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteGlossaryTermOutput:
      type: object
      properties: {}
    DeleteListingInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The ID of the listing to be deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteListingOutput:
      type: object
      properties: {}
    DeleteProjectInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the project is
            deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project that is to be deleted.
        skipDeletionCheck:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies the optional flag to delete all child entities within
            the project.
      required:
      - domainIdentifier
      - identifier
    DeleteProjectMembershipInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where project membership
            is deleted.
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project the membership to which
            is deleted.
        member:
          allOf:
          - $ref: '#/components/schemas/Member'
          description: The project member whose project membership is deleted.
      required:
      - domainIdentifier
      - projectIdentifier
      - member
    DeleteProjectMembershipOutput:
      type: object
      properties: {}
    DeleteProjectOutput:
      type: object
      properties: {}
    DeleteProjectProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where a project profile is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: The ID of the project profile that is deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteProjectProfileOutput:
      type: object
      properties: {}
    DeleteRuleInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain that where the rule is to be deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the rule that is to be deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteRuleOutput:
      type: object
      properties: {}
    DeleteSubscriptionGrantInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where the subscription
            grant is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantId'
          description: The ID of the subscription grant that is deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteSubscriptionGrantOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantId'
          description: The ID of the subscription grant that is deleted.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription grant
            that is deleted.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription grant
            that is deleted.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            grant is deleted.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription grant that is deleted
            was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription grant that is deleted
            was updated.
        subscriptionTargetId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The ID of the subscription target associated with the subscription
            grant that is deleted.
        grantedEntity:
          allOf:
          - $ref: '#/components/schemas/GrantedEntity'
          description: The entity to which the subscription is deleted.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantOverallStatus'
          description: The status of the subscription grant that is deleted.
        assets:
          allOf:
          - $ref: '#/components/schemas/SubscribedAssets'
          description: The assets for which the subsctiption grant that is deleted
            gave access.
        subscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The identifier of the subsctiption whose subscription grant
            is to be deleted.
      required:
      - id
      - createdBy
      - domainId
      - createdAt
      - updatedAt
      - subscriptionTargetId
      - grantedEntity
      - status
    DeleteSubscriptionRequestInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            request is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The ID of the subscription request that is deleted.
      required:
      - domainIdentifier
      - identifier
    DeleteSubscriptionTargetInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            target is deleted.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the Amazon DataZone environment in which the subscription
            target is deleted.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The ID of the subscription target that is deleted.
      required:
      - domainIdentifier
      - environmentIdentifier
      - identifier
    DeleteTimeSeriesDataPointsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain that houses the asset
            for which you want to delete a time series form.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/EntityIdentifier'
          description: The ID of the asset for which you want to delete a time series
            form.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesEntityType'
          description: The type of the asset for which you want to delete a time series
            form.
        formName:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesFormName'
          description: The name of the time series form that you want to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure idempotency of
            the request. This field is automatically populated if not provided.
      required:
      - domainIdentifier
      - entityIdentifier
      - entityType
      - formName
    DeleteTimeSeriesDataPointsOutput:
      type: object
      properties: {}
    Deployment:
      type: object
      properties:
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the last deployment of the environment.
        deploymentType:
          allOf:
          - $ref: '#/components/schemas/DeploymentType'
          description: The type of the last deployment of the environment.
        deploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          description: The status of the last deployment of the environment.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/EnvironmentError'
          description: The failure reason of the last deployment of the environment.
        messages:
          allOf:
          - $ref: '#/components/schemas/DeploymentMessagesList'
          description: The messages of the last deployment of the environment.
        isDeploymentComplete:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the last deployment of the environment is
            complete.
      description: The details of the last deployment of the environment.
    DeploymentMessage:
      type: string
    DeploymentMessagesList:
      type: array
      items:
        $ref: '#/components/schemas/DeploymentMessage'
    DeploymentMode:
      type: string
      enum:
      - ON_CREATE
      - ON_DEMAND
    DeploymentOrder:
      type: integer
      minimum: 0
      maximum: 16
    DeploymentProperties:
      type: object
      properties:
        startTimeoutMinutes:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The start timeout of the environment blueprint deployment.
        endTimeoutMinutes:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The end timeout of the environment blueprint deployment.
      description: The deployment properties of the Amazon DataZone blueprint.
    DeploymentStatus:
      type: string
      enum:
      - IN_PROGRESS
      - SUCCESSFUL
      - FAILED
      - PENDING_DEPLOYMENT
    DeploymentType:
      type: string
      enum:
      - CREATE
      - UPDATE
      - DELETE
    Description:
      type: string
      maxLength: 2048
    DetailedGlossaryTerm:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermName'
          description: The name of a glossary term attached to the inventory asset.
        shortDescription:
          allOf:
          - $ref: '#/components/schemas/ShortDescription'
          description: The shoft description of a glossary term attached to the inventory
            asset.
      description: Details of a glossary term attached to the inventory asset.
    DetailedGlossaryTerms:
      type: array
      items:
        $ref: '#/components/schemas/DetailedGlossaryTerm'
    DisassociateEnvironmentRoleInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which an environment
            role is disassociated.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment.
        environmentRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the environment role.
      required:
      - domainIdentifier
      - environmentIdentifier
      - environmentRoleArn
    DisassociateEnvironmentRoleOutput:
      type: object
      properties: {}
    DomainDescription:
      type: string
    DomainId:
      type: string
      pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
    DomainName:
      type: string
    DomainStatus:
      type: string
      enum:
      - CREATING
      - AVAILABLE
      - CREATION_FAILED
      - DELETING
      - DELETED
      - DELETION_FAILED
    DomainSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DomainSummary'
    DomainSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain.
        name:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: A name of an Amazon DataZone domain.
        description:
          allOf:
          - $ref: '#/components/schemas/DomainDescription'
          description: A description of an Amazon DataZone domain.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the Amazon DataZone domain.
        managedAccountId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Amazon Web Services account that manages
            the domain.
        status:
          allOf:
          - $ref: '#/components/schemas/DomainStatus'
          description: The status of the Amazon DataZone domain.
        portalUrl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The data portal URL for the Amazon DataZone domain.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: A timestamp of when a Amazon DataZone domain was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: A timestamp of when a Amazon DataZone domain was last updated.
        domainVersion:
          allOf:
          - $ref: '#/components/schemas/DomainVersion'
          description: The domain version.
      required:
      - id
      - name
      - arn
      - managedAccountId
      - status
      - createdAt
      description: A summary of a Amazon DataZone domain.
    DomainUnitDescription:
      type: string
      maxLength: 2048
    DomainUnitDesignation:
      type: string
      enum:
      - OWNER
    DomainUnitFilterForProject:
      type: object
      properties:
        domainUnit:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The domain unit ID to use in the filter.
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to include child domain units.
      required:
      - domainUnit
      description: The domain unit filter of the project grant filter.
    DomainUnitGrantFilter:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AllDomainUnitsGrantFilter'
        description: |-
          Specifies a grant filter containing all domain units.
      description: |-
        The grant filter for the domain unit. In the current release of Amazon DataZone, the only supported filter is the `allDomainUnitsGrantFilter`.
    DomainUnitGroupProperties:
      type: object
      properties:
        groupId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the domain unit group.
      description: The properties of a domain unit group.
    DomainUnitId:
      type: string
      pattern: ^[a-z0-9_\-]+$
      minLength: 1
      maxLength: 256
    DomainUnitIds:
      type: array
      items:
        $ref: '#/components/schemas/DomainUnitId'
    DomainUnitName:
      type: string
      pattern: ^[\w -]+$
      minLength: 1
      maxLength: 128
    DomainUnitOwnerProperties:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/DomainUnitUserProperties'
        description: |-
          Indicates that the domain unit owner is a user.
      - allOf:
        - $ref: '#/components/schemas/DomainUnitGroupProperties'
        description: |-
          Indicates that the domain unit owner is a group.
      description: |-
        The properties of the domain unit owner.
    DomainUnitOwners:
      type: array
      items:
        $ref: '#/components/schemas/DomainUnitOwnerProperties'
    DomainUnitPolicyGrantPrincipal:
      type: object
      properties:
        domainUnitDesignation:
          allOf:
          - $ref: '#/components/schemas/DomainUnitDesignation'
          description: Specifes the designation of the domain unit users.
        domainUnitIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit.
        domainUnitGrantFilter:
          allOf:
          - $ref: '#/components/schemas/DomainUnitGrantFilter'
          description: The grant filter for the domain unit.
      required:
      - domainUnitDesignation
      description: The domain unit principal to whom the policy is granted.
    DomainUnitSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DomainUnitSummary'
    DomainUnitSummary:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the domain unit summary.
        id:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit summary.
      required:
      - name
      - id
      description: The summary of the domain unit.
    DomainUnitTarget:
      type: object
      properties:
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit.
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to apply a rule to the child domain units.
      required:
      - domainUnitId
      description: The target for the domain unit.
    DomainUnitUserProperties:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of teh domain unit user.
      description: The properties of the domain unit user.
    DomainVersion:
      type: string
      enum:
      - V1
      - V2
    EdgeDirection:
      type: string
      enum:
      - UPSTREAM
      - DOWNSTREAM
    EditedValue:
      type: string
      minLength: 1
      maxLength: 5000
    EnableSetting:
      type: string
      enum:
      - ENABLED
      - DISABLED
    EnabledRegionList:
      type: array
      items:
        $ref: '#/components/schemas/RegionName'
    EntityId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    EntityIdentifier:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    EntityOwners:
      type: array
      items:
        $ref: '#/components/schemas/OwnerPropertiesOutput'
    EntityType:
      type: string
      enum:
      - ASSET
      - DATA_PRODUCT
    EnvironmentActionId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    EnvironmentActionList:
      type: array
      items:
        $ref: '#/components/schemas/ConfigurableEnvironmentAction'
    EnvironmentActionSummary:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The Amazon DataZone domain ID of the environment action.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The environment ID of the environment action.
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentActionId'
          description: The ID of the environment action.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the environment action.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ActionParameters'
          description: The parameters of the environment action.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The environment action description.
      required:
      - domainId
      - environmentId
      - id
      - name
      - parameters
      description: The details about the specified action configured for an environment.
        For example, the details of the specified console links for an analytics tool
        that is available in this environment.
    EnvironmentBlueprintConfigurationItem:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which an environment
            blueprint exists.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The identifier of the environment blueprint.
        provisioningRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the provisioning role specified in the environment
            blueprint configuration.
        environmentRolePermissionBoundary:
          allOf:
          - $ref: '#/components/schemas/PolicyArn'
          description: The environment role permission boundary.
        manageAccessRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the manage access role specified in the environment
            blueprint configuration.
        enabledRegions:
          allOf:
          - $ref: '#/components/schemas/EnabledRegionList'
          description: The enabled Amazon Web Services Regions specified in a blueprint
            configuration.
        regionalParameters:
          allOf:
          - $ref: '#/components/schemas/RegionalParameterMap'
          description: The regional parameters of the environment blueprint.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when an environment blueprint was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment blueprint was updated.
        provisioningConfigurations:
          allOf:
          - $ref: '#/components/schemas/ProvisioningConfigurationList'
          description: The provisioning configuration of a blueprint.
      required:
      - domainId
      - environmentBlueprintId
      description: The configuration details of an environment blueprint.
    EnvironmentBlueprintConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentBlueprintConfigurationItem'
    EnvironmentBlueprintId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    EnvironmentBlueprintName:
      type: string
      pattern: ^[\w -]+$
      minLength: 1
      maxLength: 64
    EnvironmentBlueprintSummaries:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentBlueprintSummary'
    EnvironmentBlueprintSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The identifier of the blueprint.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintName'
          description: The name of the blueprint.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of a blueprint.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of the blueprint.
        provisioningProperties:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProperties'
          description: The provisioning properties of the blueprint.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when an environment blueprint was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the blueprint was enabled.
      required:
      - id
      - name
      - provider
      - provisioningProperties
      description: The details of an environment blueprint summary.
    EnvironmentConfiguration:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationName'
          description: The environment name.
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationId'
          description: The environment ID.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The environment blueprint ID.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The environment description.
        deploymentMode:
          allOf:
          - $ref: '#/components/schemas/DeploymentMode'
          description: The deployment mode of the environment.
        configurationParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationParametersDetails'
          description: The configuration parameters of the environment.
        awsAccount:
          allOf:
          - $ref: '#/components/schemas/AwsAccount'
          description: The Amazon Web Services account of the environment.
        awsRegion:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Amazon Web Services Region of the environment.
        deploymentOrder:
          allOf:
          - $ref: '#/components/schemas/DeploymentOrder'
          description: The deployment order of the environment.
      required:
      - name
      - environmentBlueprintId
      - awsAccount
      - awsRegion
      description: The configuration of an environment.
    EnvironmentConfigurationId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    EnvironmentConfigurationName:
      type: string
      pattern: ^[\w -]+$
      minLength: 1
      maxLength: 64
    EnvironmentConfigurationParameter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationParameterName'
          description: The name of the environment configuration parameter.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of the environment configuration parameter.
        isEditable:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the environment parameter is editable.
      description: The environment configuration parameter.
    EnvironmentConfigurationParameterName:
      type: string
      pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
    EnvironmentConfigurationParametersDetails:
      type: object
      properties:
        ssmPath:
          allOf:
          - $ref: '#/components/schemas/ParameterStorePath'
          description: Ssm path environment configuration parameters.
        parameterOverrides:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationParametersList'
          description: The parameter overrides.
        resolvedParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationParametersList'
          description: The resolved environment configuration parameters.
      description: The details of the environment configuration parameter.
    EnvironmentConfigurationParametersList:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentConfigurationParameter'
    EnvironmentConfigurationUserParameter:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment.
        environmentConfigurationName:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationName'
          description: The environment configuration name.
        environmentParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentParametersList'
          description: The environment parameters.
      description: The environment configuration user parameters.
    EnvironmentConfigurationUserParametersList:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentConfigurationUserParameter'
    EnvironmentConfigurationsList:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentConfiguration'
    EnvironmentDeploymentDetails:
      type: object
      properties:
        overallDeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/OverallDeploymentStatus'
          description: The overall deployment status of the environment.
        environmentFailureReasons:
          allOf:
          - $ref: '#/components/schemas/EnvironmentFailureReasons'
          description: Environment failure reasons.
      description: The environment deployment details.
    EnvironmentError:
      type: object
      properties:
        code:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error code for the failure reason for the environment deployment.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message for the failure reason for the environment
            deployment.
      required:
      - message
      description: The failure reasons for the environment deployment.
    EnvironmentFailureReasons:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/EnvironmentFailureReasonsList'
    EnvironmentFailureReasonsList:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentError'
    EnvironmentId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    EnvironmentName:
      type: string
      pattern: ^[\w -]+$
      minLength: 1
      maxLength: 64
    EnvironmentParameter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of an environment profile parameter.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of an environment profile parameter.
      description: The parameter details of an evironment profile.
    EnvironmentParametersList:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentParameter'
    EnvironmentProfileId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{0,36}$
    EnvironmentProfileName:
      type: string
      pattern: ^[\w -]+$
      minLength: 1
      maxLength: 64
    EnvironmentProfileSummaries:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentProfileSummary'
    EnvironmentProfileSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The identifier of the environment profile.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the environment
            profile exists.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The identifier of an Amazon Web Services account in which an
            environment profile exists.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services Region in which an environment profile
            exists.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon DataZone user who created the environment profile.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when an environment profile was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment profile was updated.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileName'
          description: The name of the environment profile.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the environment profile.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The identifier of a blueprint with which an environment profile
            is created.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of a project in which an environment profile
            exists.
      required:
      - id
      - domainId
      - createdBy
      - name
      - environmentBlueprintId
      description: The details of an environment profile.
    EnvironmentStatus:
      type: string
      enum:
      - ACTIVE
      - CREATING
      - UPDATING
      - DELETING
      - CREATE_FAILED
      - UPDATE_FAILED
      - DELETE_FAILED
      - VALIDATION_FAILED
      - SUSPENDED
      - DISABLED
      - EXPIRED
      - DELETED
      - INACCESSIBLE
    EnvironmentSummaries:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentSummary'
    EnvironmentSummary:
      type: object
      properties:
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project in which the environment exists.
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The identifier of the environment.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the environment
            exists.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon DataZone user who created the environment.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment was updated.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name of the environment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the environment.
        environmentProfileId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The identifier of the environment profile with which the environment
            was created.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The identifier of the Amazon Web Services account in which
            an environment exists.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services Region in which an environment exists.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of the environment.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: The status of the environment.
        environmentConfigurationId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationId'
          description: The configuration ID with which the environment is created.
      required:
      - projectId
      - domainId
      - createdBy
      - name
      - provider
      description: The details of an environment.
    EqualToExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value that might be equal to an expression.
      required:
      - columnName
      - value
      description: Specifies whether the value is equal to an expression.
    ErrorMessage:
      type: string
    EventSummary:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/OpenLineageRunEventSummary'
        description: |-
          The open lineage run event summary.
      description: |-
        The event summary.
    ExternalIdentifier:
      type: string
      minLength: 1
      maxLength: 600
    FailedQueryProcessingErrorMessages:
      type: array
      items:
        type: string
    FailureCause:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the error message.
      description: Specifies the error message that is returned if the operation cannot
        be successfully completed.
    FailureReasons:
      type: array
      items:
        $ref: '#/components/schemas/ProjectDeletionError'
    Filter:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/Attribute'
          description: A search filter attribute in Amazon DataZone.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A search filter value in Amazon DataZone.
      required:
      - attribute
      - value
      description: A search filter in Amazon DataZone.
    FilterClause:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/Filter'
        description: |-
          A search filter in Amazon DataZone.
      - allOf:
        - $ref: '#/components/schemas/FilterList'
        description: |-
          The 'and' search filter clause in Amazon DataZone.
      - allOf:
        - $ref: '#/components/schemas/FilterList'
        description: |-
          The 'or' search filter clause in Amazon DataZone.
      description: |-
        A search filter clause in Amazon DataZone.
    FilterExpression:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/FilterExpressionType'
          description: The search filter explresison type.
        expression:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The search filter expression.
      required:
      - type
      - expression
      description: A filter expression in Amazon DataZone.
    FilterExpressionType:
      type: string
      enum:
      - INCLUDE
      - EXCLUDE
    FilterExpressions:
      type: array
      items:
        $ref: '#/components/schemas/FilterExpression'
    FilterId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    FilterIds:
      type: array
      items:
        $ref: '#/components/schemas/FilterId'
    FilterList:
      type: array
      items:
        $ref: '#/components/schemas/FilterClause'
    FilterName:
      type: string
      pattern: ^[\w -]+$
      minLength: 1
      maxLength: 64
    FilterStatus:
      type: string
      enum:
      - VALID
      - INVALID
    FirstName:
      type: string
    FormEntryInput:
      type: object
      properties:
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/FormTypeIdentifier'
          description: The type ID of the form entry.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The type revision of the form entry.
        required:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether a form entry is required.
      required:
      - typeIdentifier
      - typeRevision
      description: The details of the form entry.
    FormEntryOutput:
      type: object
      properties:
        typeName:
          allOf:
          - $ref: '#/components/schemas/FormTypeName'
          description: The name of the type of the form entry.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The type revision of the form entry.
        required:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether a form entry is required.
      required:
      - typeName
      - typeRevision
      description: The details of the form entry.
    FormInput:
      type: object
      properties:
        formName:
          allOf:
          - $ref: '#/components/schemas/FormName'
          description: The name of the metadata form.
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/FormTypeIdentifier'
          description: The ID of the metadata form type.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/RevisionInput'
          description: The revision of the metadata form type.
        content:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content of the metadata form.
      required:
      - formName
      description: The details of a metadata form.
    FormInputList:
      type: array
      items:
        $ref: '#/components/schemas/FormInput'
      x-sensitive: true
    FormName:
      type: string
      pattern: ^(?![0-9_])\w+$|^_\w*[a-zA-Z0-9]\w*$
      minLength: 1
      maxLength: 128
    FormOutput:
      type: object
      properties:
        formName:
          allOf:
          - $ref: '#/components/schemas/FormName'
          description: The name of the metadata form.
        typeName:
          allOf:
          - $ref: '#/components/schemas/FormTypeName'
          description: The name of the metadata form type.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the metadata form type.
        content:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content of the metadata form.
      required:
      - formName
      description: The details of a metadata form.
    FormOutputList:
      type: array
      items:
        $ref: '#/components/schemas/FormOutput'
    FormTypeData:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the form
            type exists.
        name:
          allOf:
          - $ref: '#/components/schemas/FormTypeName'
          description: The name of the form type.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the form type.
        model:
          allOf:
          - $ref: '#/components/schemas/Model'
          description: The model of the form type.
        status:
          allOf:
          - $ref: '#/components/schemas/FormTypeStatus'
          description: The status of the form type.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project that owns the form type.
        originDomainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the form
            type was originally created.
        originProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project in which the form type was originally
            created.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the metadata form type was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created teh metadata form type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the metadata form type.
        imports:
          allOf:
          - $ref: '#/components/schemas/ImportList'
          description: The imports specified in the form type.
      required:
      - domainId
      - name
      - revision
      description: The details of the metadata form type.
    FormTypeIdentifier:
      type: string
      pattern: ^(?!\.)[\w\.]*\w$
      minLength: 1
      maxLength: 385
    FormTypeName:
      type: string
      pattern: ^(amazon.datazone.)?(?![0-9_])\w+$|^_\w*[a-zA-Z0-9]\w*$
      minLength: 1
      maxLength: 128
    FormTypeStatus:
      type: string
      enum:
      - ENABLED
      - DISABLED
    Forms:
      type: string
    FormsInputMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FormEntryInput'
    FormsOutputMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FormEntryOutput'
    GetAssetFilterInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to get an asset filter.
        assetIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the data asset.
        identifier:
          allOf:
          - $ref: '#/components/schemas/FilterId'
          description: The ID of the asset filter.
      required:
      - domainIdentifier
      - assetIdentifier
      - identifier
    GetAssetFilterOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/FilterId'
          description: The ID of the asset filter.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to get an asset filter.
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the data asset.
        name:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          description: The name of the asset filter.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the asset filter.
        status:
          allOf:
          - $ref: '#/components/schemas/FilterStatus'
          description: The status of the asset filter.
        configuration:
          allOf:
          - $ref: '#/components/schemas/AssetFilterConfiguration'
          description: The configuration of the asset filter.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the asset filter was created.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message that is displayed if the action does not
            complete successfully.
        effectiveColumnNames:
          allOf:
          - $ref: '#/components/schemas/ColumnNameList'
          description: The column names of the asset filter.
        effectiveRowFilter:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The row filter of the asset filter.
      required:
      - id
      - domainId
      - assetId
      - name
      - configuration
    GetAssetInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain to which the asset belongs.
        identifier:
          allOf:
          - $ref: '#/components/schemas/AssetIdentifier'
          description: The ID of the Amazon DataZone asset.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the Amazon DataZone asset.
      required:
      - domainIdentifier
      - identifier
    GetAssetOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the asset.
        name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the asset.
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetTypeIdentifier'
          description: The ID of the asset type.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the asset type.
        externalIdentifier:
          allOf:
          - $ref: '#/components/schemas/ExternalIdentifier'
          description: The external ID of the asset.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the asset.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the Amazon DataZone asset.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the asset was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the asset.
        firstRevisionCreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the first revision of the asset was created.
        firstRevisionCreatedBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the first revision of
            the asset.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The business glossary terms attached to the asset.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project that owns the asset.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain to which the asset belongs.
        listing:
          allOf:
          - $ref: '#/components/schemas/AssetListingDetails'
          description: The listing of the asset.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The metadata forms attached to the asset.
        readOnlyFormsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The read-only metadata forms attached to the asset.
        latestTimeSeriesDataPointFormsOutput:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointSummaryFormOutputList'
          description: The latest data point that was imported into the time series
            form for the asset.
      required:
      - id
      - name
      - typeIdentifier
      - typeRevision
      - revision
      - owningProjectId
      - domainId
      - formsOutput
    GetAssetTypeInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the asset type
            exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/AssetTypeIdentifier'
          description: The ID of the asset type.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the asset type.
      required:
      - domainIdentifier
      - identifier
    GetAssetTypeOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the asset type
            exists.
        name:
          allOf:
          - $ref: '#/components/schemas/TypeName'
          description: The name of the asset type.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the asset type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the asset type.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormsOutputMap'
          description: The metadata forms attached to the asset type.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project that owns the asset type.
        originDomainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the asset type
            was originally created.
        originProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project in which the asset type
            was originally created.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the asset type was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the asset type.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the asset type was updated.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user that updated the asset type.
      required:
      - domainId
      - name
      - revision
      - formsOutput
      - owningProjectId
    GetConnectionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where we get the connection.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ConnectionId'
          description: The connection ID.
        withSecret:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether a connection has a secret.
      required:
      - domainIdentifier
      - identifier
    GetConnectionOutput:
      type: object
      properties:
        connectionCredentials:
          allOf:
          - $ref: '#/components/schemas/ConnectionCredentials'
          description: Connection credentials.
        connectionId:
          allOf:
          - $ref: '#/components/schemas/ConnectionId'
          description: The ID of the connection.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Connection description.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The domain ID of the connection.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The domain unit ID of the connection.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment.
        environmentUserRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The environment user role.
        name:
          allOf:
          - $ref: '#/components/schemas/ConnectionName'
          description: The name of the connection.
        physicalEndpoints:
          allOf:
          - $ref: '#/components/schemas/PhysicalEndpoints'
          description: The physical endpoints of the connection.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project.
        props:
          allOf:
          - $ref: '#/components/schemas/ConnectionPropertiesOutput'
          description: Connection props.
        type:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of the connection.
      required:
      - connectionId
      - domainId
      - domainUnitId
      - name
      - physicalEndpoints
      - type
    GetDataProductInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the data product lives.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The ID of the data product.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the data product.
      required:
      - domainIdentifier
      - identifier
    GetDataProductOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the data product lives.
        id:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The ID of the data product.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the data product.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the owning project of the data product.
        name:
          allOf:
          - $ref: '#/components/schemas/DataProductName'
          description: The name of the data product.
        status:
          allOf:
          - $ref: '#/components/schemas/DataProductStatus'
          description: The status of the data product.
        description:
          allOf:
          - $ref: '#/components/schemas/DataProductDescription'
          description: The description of the data product.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms of the data product.
        items:
          allOf:
          - $ref: '#/components/schemas/DataProductItems'
          description: The data assets of the data product.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The metadata forms of the data product.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the data product is created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the data product.
        firstRevisionCreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the first revision of the data product
            is created.
        firstRevisionCreatedBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the first revision of the data product.
      required:
      - domainId
      - id
      - revision
      - owningProjectId
      - name
      - status
    GetDataSourceInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the data source
            exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The ID of the Amazon DataZone data source.
      required:
      - domainIdentifier
      - identifier
    GetDataSourceOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The ID of the data source.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceStatus'
          description: The status of the data source.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceType'
          description: The type of the data source.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data source.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the data source.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the data source
            exists.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project where the data source creates and publishes
            assets.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment where this data source creates and
            publishes assets,
        connectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the connection.
        configuration:
          allOf:
          - $ref: '#/components/schemas/DataSourceConfigurationOutput'
          description: The configuration of the data source.
        recommendation:
          allOf:
          - $ref: '#/components/schemas/RecommendationConfiguration'
          description: The recommendation configuration of the data source.
        enableSetting:
          allOf:
          - $ref: '#/components/schemas/EnableSetting'
          description: Specifies whether this data source is enabled or not.
        publishOnImport:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the assets that this data source creates
            in the inventory are to be also automatically published to the catalog.
        assetFormsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The metadata forms attached to the assets created by this data
            source.
        schedule:
          allOf:
          - $ref: '#/components/schemas/ScheduleConfiguration'
          description: The schedule of the data source runs.
        lastRunStatus:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunStatus'
          description: The status of the last run of the data source.
        lastRunAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of the last run of the data source.
        lastRunErrorMessage:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorMessage'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        lastRunAssetCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of assets created by the data source during its
            last run.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorMessage'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source was updated.
        selfGrantStatus:
          allOf:
          - $ref: '#/components/schemas/SelfGrantStatusOutput'
          description: Specifies the status of the self-granting functionality.
      required:
      - id
      - name
      - domainId
      - projectId
    GetDataSourceRunInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain in which this data source run was performed.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunId'
          description: The ID of the data source run.
      required:
      - domainIdentifier
      - identifier
    GetDataSourceRunOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain in which this data source run was performed.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The ID of the data source for this data source run.
        id:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunId'
          description: The ID of the data source run.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project in which this data source run occured.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunStatus'
          description: The status of this data source run.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunType'
          description: The type of this data source run.
        dataSourceConfigurationSnapshot:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The configuration snapshot of the data source run.
        runStatisticsForAssets:
          allOf:
          - $ref: '#/components/schemas/RunStatisticsForAssets'
          description: The asset statistics from this data source run.
        lineageSummary:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunLineageSummary'
          description: The summary of the data lineage.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorMessage'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source run was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when this data source run was updated.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when this data source run started.
        stoppedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when this data source run stopped.
      required:
      - domainId
      - dataSourceId
      - id
      - projectId
      - status
      - type
      - createdAt
      - updatedAt
    GetDomainInput:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the specified Amazon DataZone domain.
      required:
      - identifier
    GetDomainOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the specified Amazon DataZone domain.
        rootDomainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the root domain in Amazon Datazone.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon DataZone domain.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the Amazon DataZone domain.
        singleSignOn:
          allOf:
          - $ref: '#/components/schemas/SingleSignOn'
          description: The single sing-on option of the specified Amazon DataZone
            domain.
        domainExecutionRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The domain execution role with which the Amazon DataZone domain
            is created.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the specified Amazon DataZone domain.
        kmsKeyIdentifier:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The identifier of the Amazon Web Services Key Management Service
            (KMS) key that is used to encrypt the Amazon DataZone domain, metadata,
            and reporting data.
        status:
          allOf:
          - $ref: '#/components/schemas/DomainStatus'
          description: The status of the specified Amazon DataZone domain.
        portalUrl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The URL of the data portal for this Amazon DataZone domain.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the Amazon DataZone domain was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the Amazon DataZone domain was last updated.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The tags specified for the Amazon DataZone domain.
        domainVersion:
          allOf:
          - $ref: '#/components/schemas/DomainVersion'
          description: The version of the domain.
        serviceRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The service role of the domain.
      required:
      - id
      - domainExecutionRole
      - status
    GetDomainUnitInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to get a domain unit.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The identifier of the domain unit that you want to get.
      required:
      - domainIdentifier
      - identifier
    GetDomainUnitOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain in which the domain unit lives.
        name:
          allOf:
          - $ref: '#/components/schemas/DomainUnitName'
          description: The name of the domain unit.
        parentDomainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the parent domain unit.
        description:
          allOf:
          - $ref: '#/components/schemas/DomainUnitDescription'
          description: The description of the domain unit.
        owners:
          allOf:
          - $ref: '#/components/schemas/DomainUnitOwners'
          description: The owners of the domain unit.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The time stamp at which the domain unit was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp at which the domain unit was last updated.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the domain unit.
        lastUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The user who last updated the domain unit.
      required:
      - id
      - domainId
      - name
      - owners
    GetEnvironmentActionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the `GetEnvironmentAction`
            API is invoked.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The environment ID of the environment action.
        identifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the environment action
      required:
      - domainIdentifier
      - environmentIdentifier
      - identifier
    GetEnvironmentActionOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the environment
            action lives.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The environment ID of the environment action.
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentActionId'
          description: The ID of the environment action.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the environment action.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ActionParameters'
          description: The parameters of the environment action.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the environment action.
      required:
      - domainId
      - environmentId
      - id
      - name
      - parameters
    GetEnvironmentBlueprintConfigurationInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where this blueprint exists.
        environmentBlueprintIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: He ID of the blueprint.
      required:
      - domainIdentifier
      - environmentBlueprintIdentifier
    GetEnvironmentBlueprintConfigurationOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where this blueprint exists.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The ID of the blueprint.
        provisioningRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the provisioning role with which this blueprint
            is created.
        environmentRolePermissionBoundary:
          allOf:
          - $ref: '#/components/schemas/PolicyArn'
          description: The environment role permissions boundary.
        manageAccessRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the manage access role with which this blueprint
            is created.
        enabledRegions:
          allOf:
          - $ref: '#/components/schemas/EnabledRegionList'
          description: The Amazon Web Services regions in which this blueprint is
            enabled.
        regionalParameters:
          allOf:
          - $ref: '#/components/schemas/RegionalParameterMap'
          description: The regional parameters of the blueprint.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when this blueprint was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when this blueprint was upated.
        provisioningConfigurations:
          allOf:
          - $ref: '#/components/schemas/ProvisioningConfigurationList'
          description: The provisioning configuration of a blueprint.
      required:
      - domainId
      - environmentBlueprintId
    GetEnvironmentBlueprintInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the domain in which this blueprint exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The ID of this Amazon DataZone blueprint.
      required:
      - domainIdentifier
      - identifier
    GetEnvironmentBlueprintOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The ID of this Amazon DataZone blueprint.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintName'
          description: The name of this Amazon DataZone blueprint.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of this Amazon DataZone blueprint.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of this Amazon DataZone blueprint.
        provisioningProperties:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProperties'
          description: The provisioning properties of this Amazon DataZone blueprint.
        deploymentProperties:
          allOf:
          - $ref: '#/components/schemas/DeploymentProperties'
          description: The deployment properties of this Amazon DataZone blueprint.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/CustomParameterList'
          description: The user parameters of this blueprint.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms attached to this Amazon DataZone blueprint.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp of when this blueprint was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when this blueprint was updated.
      required:
      - id
      - name
      - provider
      - provisioningProperties
    GetEnvironmentCredentialsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this environment
            and its credentials exist.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment whose credentials this operation
            gets.
      required:
      - domainIdentifier
      - environmentIdentifier
    GetEnvironmentCredentialsOutput:
      type: object
      properties:
        accessKeyId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The access key ID of the environment.
        secretAccessKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The secret access key of the environment credentials.
        sessionToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The session token of the environment credentials.
        expiration:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The expiration timestamp of the environment credentials.
    GetEnvironmentInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where the environment
            exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the Amazon DataZone environment.
      required:
      - domainIdentifier
      - identifier
    GetEnvironmentOutput:
      type: object
      properties:
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project in which this environment
            is created.
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where the environment
            exists.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon DataZone user who created the environment.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when this environment was updated.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name of the environment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the environment.
        environmentProfileId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The ID of the environment profile with which the environment
            is created.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The ID of the Amazon Web Services account where the environment
            exists.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services region where the environment exists.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of this Amazon DataZone environment.
        provisionedResources:
          allOf:
          - $ref: '#/components/schemas/ResourceList'
          description: The provisioned resources of this Amazon DataZone environment.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: The status of this Amazon DataZone environment.
        environmentActions:
          allOf:
          - $ref: '#/components/schemas/EnvironmentActionList'
          description: The actions of the environment.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The business glossary terms that can be used in this environment.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/CustomParameterList'
          description: The user parameters of this Amazon DataZone environment.
        lastDeployment:
          allOf:
          - $ref: '#/components/schemas/Deployment'
          description: The details of the last deployment of the environment.
        provisioningProperties:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProperties'
          description: The provisioning properties of this Amazon DataZone environment.
        deploymentProperties:
          allOf:
          - $ref: '#/components/schemas/DeploymentProperties'
          description: The deployment properties of the environment.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The blueprint with which the environment is created.
        environmentConfigurationId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationId'
          description: The configuration ID that is used to create the environment.
      required:
      - projectId
      - domainId
      - createdBy
      - name
      - provider
    GetEnvironmentProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this environment
            profile exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The ID of the environment profile.
      required:
      - domainIdentifier
      - identifier
    GetEnvironmentProfileOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The ID of the environment profile.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this environment
            profile exists.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The ID of the Amazon Web Services account where this environment
            profile exists.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services region where this environment profile
            exists.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon DataZone user who created this environment profile.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when this environment profile was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when this environment profile was upated.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileName'
          description: The name of the environment profile.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the environment profile.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The ID of the blueprint with which this environment profile
            is created.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the Amazon DataZone project in which this environment
            profile is created.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/CustomParameterList'
          description: The user parameters of the environment profile.
      required:
      - id
      - domainId
      - createdBy
      - name
      - environmentBlueprintId
    GetFormTypeInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this metadata
            form type exists.
        formTypeIdentifier:
          allOf:
          - $ref: '#/components/schemas/FormTypeIdentifier'
          description: The ID of the metadata form type.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of this metadata form type.
      required:
      - domainIdentifier
      - formTypeIdentifier
    GetFormTypeOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this metadata
            form type exists.
        name:
          allOf:
          - $ref: '#/components/schemas/FormTypeName'
          description: The name of the metadata form type.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the metadata form type.
        model:
          allOf:
          - $ref: '#/components/schemas/Model'
          description: The model of the metadata form type.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project that owns this metadata form type.
        originDomainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the metadata
            form type was originally created.
        originProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project in which this metadata form type was
            originally created.
        status:
          allOf:
          - $ref: '#/components/schemas/FormTypeStatus'
          description: The status of the metadata form type.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when this metadata form type was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created this metadata form type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the metadata form type.
        imports:
          allOf:
          - $ref: '#/components/schemas/ImportList'
          description: The imports of the metadata form type.
      required:
      - domainId
      - name
      - revision
      - model
    GetGlossaryInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this business
            glossary exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The ID of the business glossary.
      required:
      - domainIdentifier
      - identifier
    GetGlossaryOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this business
            glossary exists.
        id:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The ID of the business glossary.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project that owns this business glossary.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryName'
          description: The name of the business glossary.
        description:
          allOf:
          - $ref: '#/components/schemas/GlossaryDescription'
          description: The description of the business glossary.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryStatus'
          description: The status of the business glossary.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when this business glossary was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created this business glossary.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the business glossary was updated.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the business glossary.
      required:
      - domainId
      - id
      - owningProjectId
      - name
      - status
    GetGlossaryTermInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this business
            glossary term exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermId'
          description: The ID of the business glossary term.
      required:
      - domainIdentifier
      - identifier
    GetGlossaryTermOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which this business
            glossary term exists.
        glossaryId:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The ID of the business glossary to which this term belongs.
        id:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermId'
          description: The ID of the business glossary term.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermName'
          description: The name of the business glossary term.
        shortDescription:
          allOf:
          - $ref: '#/components/schemas/ShortDescription'
          description: The short decription of the business glossary term.
        longDescription:
          allOf:
          - $ref: '#/components/schemas/LongDescription'
          description: The long description of the business glossary term.
        termRelations:
          allOf:
          - $ref: '#/components/schemas/TermRelations'
          description: The relations of the business glossary term.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermStatus'
          description: The status of the business glossary term.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the business glossary term was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the business glossary.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the business glossary term was updated.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the business glossary
            term.
      required:
      - domainId
      - glossaryId
      - id
      - name
      - status
    GetGroupProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the group
            profile exists.
        groupIdentifier:
          allOf:
          - $ref: '#/components/schemas/GroupIdentifier'
          description: The identifier of the group profile.
      required:
      - domainIdentifier
      - groupIdentifier
    GetGroupProfileOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the group
            profile exists.
        id:
          allOf:
          - $ref: '#/components/schemas/GroupProfileId'
          description: The identifier of the group profile.
        status:
          allOf:
          - $ref: '#/components/schemas/GroupProfileStatus'
          description: The identifier of the group profile.
        groupName:
          allOf:
          - $ref: '#/components/schemas/GroupProfileName'
          description: The name of the group for which the specified group profile
            exists.
    GetIamPortalLoginUrlInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: the ID of the Amazon DataZone domain the data portal of which
            you want to get.
      required:
      - domainIdentifier
    GetIamPortalLoginUrlOutput:
      type: object
      properties:
        authCodeUrl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The data portal URL of the specified Amazon DataZone domain.
        userProfileId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the user profile.
      required:
      - userProfileId
    GetJobRunInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain.
        identifier:
          allOf:
          - $ref: '#/components/schemas/RunIdentifier'
          description: The ID of the job run.
      required:
      - domainIdentifier
      - identifier
    GetJobRunOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain.
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the job run.
        jobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the job run.
        jobType:
          allOf:
          - $ref: '#/components/schemas/JobType'
          description: The type of the job run.
        runMode:
          allOf:
          - $ref: '#/components/schemas/JobRunMode'
          description: The mode of the job run.
        details:
          allOf:
          - $ref: '#/components/schemas/JobRunDetails'
          description: The details of the job run.
        status:
          allOf:
          - $ref: '#/components/schemas/JobRunStatus'
          description: The status of the job run.
        error:
          allOf:
          - $ref: '#/components/schemas/JobRunError'
          description: The error generated if the action is not completed successfully.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user who created the job run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the job run was created.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the job run started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the job run ended.
    GetLineageEventInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain.
        identifier:
          allOf:
          - $ref: '#/components/schemas/LineageEventIdentifier'
          description: The ID of the lineage event.
      required:
      - domainIdentifier
      - identifier
    GetLineageEventOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain.
        id:
          allOf:
          - $ref: '#/components/schemas/LineageEventIdentifier'
          description: The ID of the lineage event.
        event:
          allOf:
          - $ref: '#/components/schemas/LineageEvent'
          description: The lineage event details.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the lineage event.
        processingStatus:
          allOf:
          - $ref: '#/components/schemas/LineageEventProcessingStatus'
          description: The progressing status of the lineage event.
        eventTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time of the lineage event.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the lineage event was created.
    GetLineageNodeInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain in which you want to get the data lineage
            node.
        identifier:
          allOf:
          - $ref: '#/components/schemas/LineageNodeIdentifier'
          description: 'The ID of the data lineage node that you want to get.


            Both, a lineage node identifier generated by Amazon DataZone and a `sourceIdentifier`
            of the lineage node are supported. If `sourceIdentifier` is greater than
            1800 characters, you can use lineage node identifier generated by Amazon
            DataZone to get the node details.'
        eventTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The event time stamp for which you want to get the data lineage
            node.
      required:
      - domainIdentifier
      - identifier
    GetLineageNodeOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you're getting the data lineage
            node.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the data lineage node.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the data lineage node.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the data lineage node was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the data lineage node.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp at which the data lineage node was updated.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The user who updated the data lineage node.
        id:
          allOf:
          - $ref: '#/components/schemas/LineageNodeId'
          description: The ID of the data lineage node.
        typeName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the type of the specified data lineage node.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision type of the specified data lineage node.
        sourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The source identifier of the data lineage node.
        eventTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the event described in the data lineage node.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The metadata of the specified data lineage node.
        upstreamNodes:
          allOf:
          - $ref: '#/components/schemas/LineageNodeReferenceList'
          description: The upstream nodes of the specified data lineage node.
        downstreamNodes:
          allOf:
          - $ref: '#/components/schemas/LineageNodeReferenceList'
          description: The downsteam nodes of the specified data lineage node.
      required:
      - domainId
      - id
      - typeName
    GetListingInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The ID of the listing.
        listingRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the listing.
      required:
      - domainIdentifier
      - identifier
    GetListingOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain.
        id:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The ID of the listing.
        listingRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of a listing.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the listing was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the listing was updated.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the listing.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the listing.
        item:
          allOf:
          - $ref: '#/components/schemas/ListingItem'
          description: The details of a listing.
        name:
          allOf:
          - $ref: '#/components/schemas/ListingName'
          description: The name of the listing.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the listing.
        status:
          allOf:
          - $ref: '#/components/schemas/ListingStatus'
          description: The status of the listing.
      required:
      - domainId
      - id
      - listingRevision
    GetMetadataGenerationRunInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain the metadata generation
            run of which you want to get.
        identifier:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunIdentifier'
          description: The identifier of the metadata generation run.
      required:
      - domainIdentifier
      - identifier
    GetMetadataGenerationRunOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain the metadata generation
            run of which you want to get.
        id:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunIdentifier'
          description: The ID of the metadata generation run.
        target:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunTarget'
          description: The asset for which you're generating metadata.
        status:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunStatus'
          description: The status of the metadata generation run.
        type:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunType'
          description: The type of metadata generation run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the metadata generation run was start.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who started the metadata generation
            run.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project that owns the assets for which you're
            running metadata generation.
      required:
      - domainId
      - id
      - owningProjectId
    GetProjectInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the project exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project.
      required:
      - domainIdentifier
      - identifier
    GetProjectOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the project exists.
        id:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: '>The ID of the project.'
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the project.
        projectStatus:
          allOf:
          - $ref: '#/components/schemas/ProjectStatus'
          description: The status of the project.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the project.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the project was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the project was last updated.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The business glossary terms that can be used in the project.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit.
        projectProfileId:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: The ID of the project profile of a project.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationUserParametersList'
          description: The user parameters of a project.
        environmentDeploymentDetails:
          allOf:
          - $ref: '#/components/schemas/EnvironmentDeploymentDetails'
          description: The environment deployment status of a project.
      required:
      - domainId
      - id
      - name
      - createdBy
    GetProjectProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: The ID of the project profile.
      required:
      - domainIdentifier
      - identifier
    GetProjectProfileOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain of the project profile.
        id:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: The ID of the project profile.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileName'
          description: The name of the project profile.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the project profile.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the project profile.
        environmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationsList'
          description: The environment configurations of the project profile.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the project profile.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the project profile was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when project profile was last updated.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit of the project profile.
      required:
      - domainId
      - id
      - name
      - createdBy
    GetRuleInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the `GetRule` action is to be invoked.
        identifier:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the rule.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the rule.
      required:
      - domainIdentifier
      - identifier
    GetRuleOutput:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the rule.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the rule.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the rule.
        ruleType:
          allOf:
          - $ref: '#/components/schemas/RuleType'
          description: The type of the rule.
        target:
          allOf:
          - $ref: '#/components/schemas/RuleTarget'
          description: The target of the rule.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action of the rule.
        scope:
          allOf:
          - $ref: '#/components/schemas/RuleScope'
          description: The scope of the rule.
        detail:
          allOf:
          - $ref: '#/components/schemas/RuleDetail'
          description: The detail of the rule.
        targetType:
          allOf:
          - $ref: '#/components/schemas/RuleTargetType'
          description: The target type of the rule.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the rule.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the rule was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp at which the rule was last updated.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the rule.
        lastUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The timestamp at which the rule was last updated.
      required:
      - identifier
      - revision
      - name
      - ruleType
      - target
      - action
      - scope
      - detail
      - createdAt
      - updatedAt
      - createdBy
      - lastUpdatedBy
    GetSubscriptionGrantInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            grant exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantId'
          description: The ID of the subscription grant.
      required:
      - domainIdentifier
      - identifier
    GetSubscriptionGrantOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantId'
          description: The ID of the subscription grant.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription grant.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription grant.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            grant exists.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription grant is created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription grant was upated.
        subscriptionTargetId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The subscription target ID associated with the subscription
            grant.
        grantedEntity:
          allOf:
          - $ref: '#/components/schemas/GrantedEntity'
          description: The entity to which the subscription is granted.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantOverallStatus'
          description: The status of the subscription grant.
        assets:
          allOf:
          - $ref: '#/components/schemas/SubscribedAssets'
          description: The assets for which the subscription grant is created.
        subscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The identifier of the subscription.
      required:
      - id
      - createdBy
      - domainId
      - createdAt
      - updatedAt
      - subscriptionTargetId
      - grantedEntity
      - status
    GetSubscriptionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            exists.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The ID of the subscription.
      required:
      - domainIdentifier
      - identifier
    GetSubscriptionOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The ID of the subscription.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            exists.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionStatus'
          description: The status of the subscription.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription was updated.
        subscribedPrincipal:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipal'
          description: The principal that owns the subscription.
        subscribedListing:
          allOf:
          - $ref: '#/components/schemas/SubscribedListing'
          description: The details of the published asset for which the subscription
            grant is created.
        subscriptionRequestId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The ID of the subscription request.
        retainPermissions:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The retain permissions of the subscription.
      required:
      - id
      - createdBy
      - domainId
      - status
      - createdAt
      - updatedAt
      - subscribedPrincipal
      - subscribedListing
    GetSubscriptionRequestDetailsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which to get
            the subscription request details.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request the details of which
            to get.
      required:
      - domainIdentifier
      - identifier
    GetSubscriptionRequestDetailsOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription request.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription request.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The Amazon DataZone domain of the subscription request.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestStatus'
          description: The status of the subscription request.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the specified subscription request was
            created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription request was updated.
        requestReason:
          allOf:
          - $ref: '#/components/schemas/RequestReason'
          description: The reason for the subscription request.
        subscribedPrincipals:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipals'
          description: The subscribed principals in the subscription request.
        subscribedListings:
          allOf:
          - $ref: '#/components/schemas/SubscribedListings'
          description: The subscribed listings in the subscription request.
        reviewerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Amazon DataZone user who reviewed the
            subscription request.
        decisionComment:
          allOf:
          - $ref: '#/components/schemas/DecisionComment'
          description: The decision comment of the subscription request.
        existingSubscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The ID of the existing subscription.
        metadataForms:
          allOf:
          - $ref: '#/components/schemas/MetadataForms'
          description: The metadata forms included in the subscription request.
      required:
      - id
      - createdBy
      - domainId
      - status
      - createdAt
      - updatedAt
      - requestReason
      - subscribedPrincipals
      - subscribedListings
    GetSubscriptionTargetInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            target exists.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment associated with the subscription
            target.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The ID of the subscription target.
      required:
      - domainIdentifier
      - environmentIdentifier
      - identifier
    GetSubscriptionTargetOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The ID of the subscription target.
        authorizedPrincipals:
          allOf:
          - $ref: '#/components/schemas/AuthorizedPrincipalIdentifiers'
          description: The authorized principals of the subscription target.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the subscription
            target exists.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project associated with the subscription target.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment associated with the subscription
            target.
        name:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetName'
          description: The name of the subscription target.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the subscription target.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription target.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription target.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription target was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription target was updated.
        manageAccessRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The manage access role with which the subscription target was
            created.
        applicableAssetTypes:
          allOf:
          - $ref: '#/components/schemas/ApplicableAssetTypes'
          description: The asset types associated with the subscription target.
        subscriptionTargetConfig:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetForms'
          description: The configuration of teh subscription target.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of the subscription target.
      required:
      - id
      - authorizedPrincipals
      - domainId
      - projectId
      - environmentId
      - name
      - type
      - createdBy
      - createdAt
      - applicableAssetTypes
      - subscriptionTargetConfig
      - provider
    GetTimeSeriesDataPointInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain that houses the asset
            for which you want to get the data point.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/EntityIdentifier'
          description: The ID of the asset for which you want to get the data point.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesEntityType'
          description: The type of the asset for which you want to get the data point.
        identifier:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointIdentifier'
          description: The ID of the data point that you want to get.
        formName:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesFormName'
          description: The name of the time series form that houses the data point
            that you want to get.
      required:
      - domainIdentifier
      - entityIdentifier
      - entityType
      - identifier
      - formName
    GetTimeSeriesDataPointOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain that houses the asset
            data point that you want to get.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the asset for which you want to get the data point.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesEntityType'
          description: The type of the asset for which you want to get the data point.
        formName:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesFormName'
          description: The name of the time series form that houses the data point
            that you want to get.
        form:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointFormOutput'
          description: The time series form that houses the data point that you want
            to get.
    GetUserProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: the ID of the Amazon DataZone domain the data portal of which
            you want to get.
        userIdentifier:
          allOf:
          - $ref: '#/components/schemas/UserIdentifier'
          description: The identifier of the user for which you want to get the user
            profile.
        type:
          allOf:
          - $ref: '#/components/schemas/UserProfileType'
          description: The type of the user profile.
      required:
      - domainIdentifier
      - userIdentifier
    GetUserProfileOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: the identifier of the Amazon DataZone domain of which you want
            to get the user profile.
        id:
          allOf:
          - $ref: '#/components/schemas/UserProfileId'
          description: The identifier of the user profile.
        type:
          allOf:
          - $ref: '#/components/schemas/UserProfileType'
          description: The type of the user profile.
        status:
          allOf:
          - $ref: '#/components/schemas/UserProfileStatus'
          description: The status of the user profile.
        details:
          $ref: '#/components/schemas/UserProfileDetails'
    GlossaryDescription:
      type: string
      maxLength: 4096
    GlossaryId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    GlossaryItem:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the business
            glossary exists.
        id:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The identifier of the glossary.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryName'
          description: The name of the glossary.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project that owns the business glosary.
        description:
          allOf:
          - $ref: '#/components/schemas/GlossaryDescription'
          description: The business glossary description.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryStatus'
          description: The business glossary status.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the glossary was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the glossary.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the business glossary was updated.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the business glossary.
      required:
      - domainId
      - id
      - name
      - owningProjectId
      - status
      description: The details of a business glossary.
    GlossaryName:
      type: string
      minLength: 1
      maxLength: 256
    GlossaryStatus:
      type: string
      enum:
      - DISABLED
      - ENABLED
    GlossaryTermId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    GlossaryTermItem:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the business
            glossary exists.
        glossaryId:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The identifier of the business glossary to which the term belongs.
        id:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermId'
          description: The identifier of the business glossary term.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermName'
          description: The name of the business glossary term.
        shortDescription:
          allOf:
          - $ref: '#/components/schemas/ShortDescription'
          description: The short description of the business glossary term.
        longDescription:
          allOf:
          - $ref: '#/components/schemas/LongDescription'
          description: The long description of the business glossary term.
        termRelations:
          allOf:
          - $ref: '#/components/schemas/TermRelations'
          description: The relations of the business glossary term.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermStatus'
          description: The status of the business glossary term.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when a business glossary term was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the business glossary.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when a business glossary term was updated.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the business glossary
            term.
      required:
      - domainId
      - glossaryId
      - id
      - name
      - status
      description: The details of a business glossary term.
    GlossaryTermName:
      type: string
      minLength: 1
      maxLength: 256
    GlossaryTermStatus:
      type: string
      enum:
      - ENABLED
      - DISABLED
    GlossaryTerms:
      type: array
      items:
        $ref: '#/components/schemas/GlossaryTermId'
    GlueConnection:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon Web Services Glue connection.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the Amazon Web Services Glue connection.
        connectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of the Amazon Web Services Glue connection.
        matchCriteria:
          allOf:
          - $ref: '#/components/schemas/MatchCriteria'
          description: The match criteria of the Amazon Web Services Glue connection.
        connectionProperties:
          allOf:
          - $ref: '#/components/schemas/ConnectionProperties'
          description: The properties of the Amazon Web Services Glue connection.
        sparkProperties:
          allOf:
          - $ref: '#/components/schemas/PropertyMap'
          description: The Spark properties of the Amazon Web Services Glue connection.
        athenaProperties:
          allOf:
          - $ref: '#/components/schemas/PropertyMap'
          description: The Amazon Athena properties of the Amazon Web Services Glue
            connection.
        pythonProperties:
          allOf:
          - $ref: '#/components/schemas/PropertyMap'
          description: The Python properties of the Amazon Web Services Glue connection.
        physicalConnectionRequirements:
          allOf:
          - $ref: '#/components/schemas/PhysicalConnectionRequirements'
          description: The physical connection requirements of the Amazon Web Services
            Glue connection.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation time of the Amazon Web Services Glue connection.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the Amazon Web Services Glue connection
            was last updated.
        lastUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user who last updated the Amazon Web Services Glue connection.
        status:
          allOf:
          - $ref: '#/components/schemas/ConnectionStatus'
          description: The status of the Amazon Web Services Glue connection.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The status reason of the Amazon Web Services Glue connection.
        lastConnectionValidationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last validation time of the Amazon Web Services Glue connection.
        authenticationConfiguration:
          allOf:
          - $ref: '#/components/schemas/AuthenticationConfiguration'
          description: The authentication configuration of the Amazon Web Services
            Glue connection.
        connectionSchemaVersion:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The connection schema version of the Amazon Web Services Glue
            connection.
        compatibleComputeEnvironments:
          allOf:
          - $ref: '#/components/schemas/ComputeEnvironmentsList'
          description: The compatible compute environments of the Amazon Web Services
            Glue connection.
      description: The Amazon Web Services Glue connection.
    GlueConnectionInput:
      type: object
      properties:
        connectionProperties:
          allOf:
          - $ref: '#/components/schemas/ConnectionProperties'
          description: The connection properties of the Amazon Web Services Glue connection.
        physicalConnectionRequirements:
          allOf:
          - $ref: '#/components/schemas/PhysicalConnectionRequirements'
          description: The physical connection requirements for the Amazon Web Services
            Glue connection.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon Web Services Glue connection.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the Amazon Web Services Glue connection.
        connectionType:
          allOf:
          - $ref: '#/components/schemas/GlueConnectionType'
          description: The connection type of the Amazon Web Services Glue connection.
        matchCriteria:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The match criteria of the Amazon Web Services Glue connection.
        validateCredentials:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Speciefies whether to validate credentials of the Amazon Web
            Services Glue connection.
        validateForComputeEnvironments:
          allOf:
          - $ref: '#/components/schemas/ComputeEnvironmentsList'
          description: Speciefies whether to validate for compute environments of
            the Amazon Web Services Glue connection.
        sparkProperties:
          allOf:
          - $ref: '#/components/schemas/PropertyMap'
          description: The Spark properties of the Amazon Web Services Glue connection.
        athenaProperties:
          allOf:
          - $ref: '#/components/schemas/PropertyMap'
          description: The Amazon Athena properties of the Amazon Web Services Glue
            connection.
        pythonProperties:
          allOf:
          - $ref: '#/components/schemas/PropertyMap'
          description: The Python properties of the Amazon Web Services Glue connection.
        authenticationConfiguration:
          allOf:
          - $ref: '#/components/schemas/AuthenticationConfigurationInput'
          description: The authentication configuration of the Amazon Web Services
            Glue connection.
      description: The Amazon Web Services Glue connecton input.
    GlueConnectionPatch:
      type: object
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the Amazon Web Services Glue connection
            patch.
        connectionProperties:
          allOf:
          - $ref: '#/components/schemas/ConnectionProperties'
          description: The properties of the Amazon Web Services Glue connection patch.
        authenticationConfiguration:
          allOf:
          - $ref: '#/components/schemas/AuthenticationConfigurationPatch'
          description: The authentication configuration of the Amazon Web Services
            Glue connection patch.
      description: The Amazon Web Services Glue connection patch.
    GlueConnectionType:
      type: string
      enum:
      - SNOWFLAKE
      - BIGQUERY
      - DOCUMENTDB
      - DYNAMODB
      - MYSQL
      - OPENSEARCH
      - ORACLE
      - POSTGRESQL
      - REDSHIFT
      - SAPHANA
      - SQLSERVER
      - TERADATA
      - VERTICA
    GlueOAuth2Credentials:
      type: object
      properties:
        userManagedClientApplicationClientSecret:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user managed client application client secret of the connection.
        accessToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The access token of a connection.
        refreshToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The refresh token of the connection.
        jwtToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The jwt token of the connection.
      description: The GlueOAuth2 credentials of a connection.
    GluePropertiesInput:
      type: object
      properties:
        glueConnectionInput:
          allOf:
          - $ref: '#/components/schemas/GlueConnectionInput'
          description: The Amazon Web Services Glue connection.
      description: The Amazon Web Services Glue properties of a connection.
    GluePropertiesOutput:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ConnectionStatus'
          description: The status of a connection.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message generated if the action is not completed
            successfully.
      description: The properties of the Amazon Web Services Glue connection.
    GluePropertiesPatch:
      type: object
      properties:
        glueConnectionInput:
          allOf:
          - $ref: '#/components/schemas/GlueConnectionPatch'
          description: The Amazon Web Services Glue properties patch of a connection.
      description: The Amazon Web Services Glue properties patch of a connection.
    GlueRunConfigurationInput:
      type: object
      properties:
        dataAccessRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The data access role included in the configuration details
            of the Amazon Web Services Glue data source.
        relationalFilterConfigurations:
          allOf:
          - $ref: '#/components/schemas/RelationalFilterConfigurations'
          description: The relational filter configurations included in the configuration
            details of the Amazon Web Services Glue data source.
        autoImportDataQualityResult:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to automatically import data quality metrics
            as part of the data source run.
        catalogName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The catalog name in the Amazon Web Services Glue run configuration.
      required:
      - relationalFilterConfigurations
      description: The configuration details of the Amazon Web Services Glue data
        source.
    GlueRunConfigurationOutput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services account ID included in the configuration
            details of the Amazon Web Services Glue data source.
        region:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services region included in the configuration
            details of the Amazon Web Services Glue data source.
        dataAccessRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The data access role included in the configuration details
            of the Amazon Web Services Glue data source.
        relationalFilterConfigurations:
          allOf:
          - $ref: '#/components/schemas/RelationalFilterConfigurations'
          description: The relational filter configurations included in the configuration
            details of the Amazon Web Services Glue data source.
        autoImportDataQualityResult:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to automatically import data quality metrics
            as part of the data source run.
        catalogName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The catalog name in the Amazon Web Services Glue run configuration.
      required:
      - relationalFilterConfigurations
      description: The configuration details of the Amazon Web Services Glue data
        source.
    GlueSelfGrantStatusOutput:
      type: object
      properties:
        selfGrantStatusDetails:
          allOf:
          - $ref: '#/components/schemas/SelfGrantStatusDetails'
          description: The details for the self granting status for a Glue data source.
      required:
      - selfGrantStatusDetails
      description: The details of the self granting status.
    GovernanceType:
      type: string
      enum:
      - AWS_MANAGED
      - USER_MANAGED
    GrantedEntity:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ListingRevision'
        description: |-
          The listing for which a subscription is granted.
      description: |-
        The details of a listing for which a subscription is granted.
    GrantedEntityInput:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ListingRevisionInput'
        description: |-
          The listing for which a subscription is to be granted.
      description: |-
        The details of a listing for which a subscription is to be granted.
    GreaterThanExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value that might be greater than an expression.
      required:
      - columnName
      - value
      description: Specifies whether the value is greater than an expression.
    GreaterThanOrEqualToExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value that might be greater than or equal to an expression.
      required:
      - columnName
      - value
      description: Specifies whether the value is greater than or equal to an expression.
    GroupDetails:
      type: object
      properties:
        groupId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the group in Amazon DataZone.
      required:
      - groupId
      description: The details of a group in Amazon DataZone.
    GroupIdentifier:
      type: string
      pattern: (^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$|[\p{L}\p{M}\p{S}\p{N}\p{P}\t\n\r  ]+)
    GroupPolicyGrantPrincipal:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/GroupIdentifier'
        description: |-
          The ID Of the group of the group principal.
      description: |-
        The group principal to whom the policy is granted.
    GroupProfileId:
      type: string
      pattern: ^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$
    GroupProfileName:
      type: string
      pattern: ^[a-zA-Z_0-9+=,.@-]+$
      minLength: 1
      maxLength: 1024
    GroupProfileStatus:
      type: string
      enum:
      - ASSIGNED
      - NOT_ASSIGNED
    GroupProfileSummaries:
      type: array
      items:
        $ref: '#/components/schemas/GroupProfileSummary'
    GroupProfileSummary:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain of a group profile.
        id:
          allOf:
          - $ref: '#/components/schemas/GroupProfileId'
          description: The ID of a group profile.
        status:
          allOf:
          - $ref: '#/components/schemas/GroupProfileStatus'
          description: The status of a group profile.
        groupName:
          allOf:
          - $ref: '#/components/schemas/GroupProfileName'
          description: The group name of a group profile.
      description: The details of a group profile.
    GroupSearchText:
      type: string
      minLength: 0
      maxLength: 1024
    GroupSearchType:
      type: string
      enum:
      - SSO_GROUP
      - DATAZONE_SSO_GROUP
    HyperPodOrchestrator:
      type: string
      enum:
      - EKS
      - SLURM
    HyperPodPropertiesInput:
      type: object
      properties:
        clusterName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The cluster name the hyper pod properties.
      required:
      - clusterName
      description: The hyper pod properties of a Amazon Web Services Glue properties
        patch.
    HyperPodPropertiesOutput:
      type: object
      properties:
        clusterName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The cluster name the hyper pod properties.
        clusterArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The cluster ARN of the hyper pod properties.
        orchestrator:
          allOf:
          - $ref: '#/components/schemas/HyperPodOrchestrator'
          description: The orchestrator of the hyper pod properties.
      required:
      - clusterName
      description: The hyper pod properties of a Amazon Web Services Glue properties
        patch.
    IamPropertiesInput:
      type: object
      properties:
        glueLineageSyncEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether Amazon Web Services Glue lineage sync is
            enabled for a connection.
      description: The IAM properties of a connection.
    IamPropertiesOutput:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The environment ID of the connection.
        glueLineageSyncEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether Amazon Web Services Glue lineage sync is
            enabled for a connection.
      description: The IAM properties of a connection.
    IamPropertiesPatch:
      type: object
      properties:
        glueLineageSyncEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether Amazon Web Services Glue lineage sync is
            enabled for a connection.
      description: The IAM properties patch of a connection.
    IamRoleArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov):iam::\d{12}:(role|role/service-role)/[\w+=,.@-]*$
    IamUserProfileDetails:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of an IAM user profile in Amazon DataZone.
      description: The details of an IAM user profile in Amazon DataZone.
    Import:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FormTypeName'
          description: The name of the import.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the import.
      required:
      - name
      - revision
      description: The details of the import of the metadata form type.
    ImportList:
      type: array
      items:
        $ref: '#/components/schemas/Import'
    InExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
        values:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The values that might be in the expression.
      required:
      - columnName
      - values
      description: Specifies whether values are in the expression.
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: The request has failed because of an unknown error, exception or
        failure.
    InventorySearchScope:
      type: string
      enum:
      - ASSET
      - GLOSSARY
      - GLOSSARY_TERM
      - DATA_PRODUCT
    IsNotNullExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
      required:
      - columnName
      description: Specifies that the expression is not null.
    IsNullExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
      required:
      - columnName
      description: Specifies that the expression is null.
    ItemGlossaryTerms:
      type: array
      items:
        $ref: '#/components/schemas/GlossaryTermId'
    JobRunDetails:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/LineageRunDetails'
        description: |-
          The data lineage details of a job run.
      description: |-
        The details of a job run.
    JobRunError:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job run error message.
      required:
      - message
      description: The job run error.
    JobRunMode:
      type: string
      enum:
      - SCHEDULED
      - ON_DEMAND
    JobRunStatus:
      type: string
      enum:
      - SCHEDULED
      - IN_PROGRESS
      - SUCCESS
      - PARTIALLY_SUCCEEDED
      - FAILED
      - ABORTED
      - TIMED_OUT
      - CANCELED
    JobRunSummaries:
      type: array
      items:
        $ref: '#/components/schemas/JobRunSummary'
    JobRunSummary:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The domain ID of the job run.
        jobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job ID of a job run.
        jobType:
          allOf:
          - $ref: '#/components/schemas/JobType'
          description: The job type of a job run.
        runId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The run ID of a job run.
        runMode:
          allOf:
          - $ref: '#/components/schemas/JobRunMode'
          description: The run mode of a job run.
        status:
          allOf:
          - $ref: '#/components/schemas/JobRunStatus'
          description: The status of a job run.
        error:
          allOf:
          - $ref: '#/components/schemas/JobRunError'
          description: The error of a job run.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user who created the job run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which job run was created.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The start time of a job run.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The end time of a job run.
      description: The job run summary.
    JobType:
      type: string
      enum:
      - LINEAGE
    KmsKeyArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$
      minLength: 1
      maxLength: 1024
    LakeFormationConfiguration:
      type: object
      properties:
        locationRegistrationRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The role that is used to manage read/write access to the chosen
            Amazon S3 bucket(s) for Data Lake using Amazon Web Services Lake Formation
            hybrid access mode.
        locationRegistrationExcludeS3Locations:
          allOf:
          - $ref: '#/components/schemas/S3LocationList'
          description: Specifies certain Amazon S3 locations if you do not want Amazon
            DataZone to automatically register them in hybrid mode.
      description: The Lake Formation configuration of the Data Lake blueprint.
    LastName:
      type: string
    LessThanExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value that might be less than the expression.
      required:
      - columnName
      - value
      description: Specifies that a value is less than an expression.
    LessThanOrEqualToExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value that might be less than or equal to an expression.
      required:
      - columnName
      - value
      description: Specifies that a value is less than or equal to an expression.
    LikeExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value that might be like the expression.
      required:
      - columnName
      - value
      description: Specifies that a value is like the expression.
    LineageEvent:
      type: string
      format: byte
      maxLength: 300000
      x-sensitive: true
    LineageEventErrorMessage:
      type: string
    LineageEventIdentifier:
      type: string
      pattern: ^[a-z0-9]{14}$
    LineageEventProcessingStatus:
      type: string
      enum:
      - REQUESTED
      - PROCESSING
      - SUCCESS
      - FAILED
    LineageEventSummaries:
      type: array
      items:
        $ref: '#/components/schemas/LineageEventSummary'
    LineageEventSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/LineageEventIdentifier'
          description: The ID of the data lineage event.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The domain ID of the lineage event.
        processingStatus:
          allOf:
          - $ref: '#/components/schemas/LineageEventProcessingStatus'
          description: The processing status of the data lineage event.
        eventTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time of the data lineage event.
        eventSummary:
          allOf:
          - $ref: '#/components/schemas/EventSummary'
          description: The summary of the data lineate event.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the data lineage event.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which data lineage event was created.
      description: The data lineage event summary.
    LineageImportStatus:
      type: string
      enum:
      - IN_PROGRESS
      - SUCCESS
      - FAILED
      - PARTIALLY_SUCCEEDED
    LineageInfo:
      type: object
      properties:
        eventId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The data lineage event ID.
        eventStatus:
          allOf:
          - $ref: '#/components/schemas/LineageEventProcessingStatus'
          description: The data lineage event status.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/LineageEventErrorMessage'
          description: The data lineage error message.
      description: The data lineage information.
    LineageNodeId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    LineageNodeIdentifier:
      type: string
      minLength: 1
      maxLength: 2086
    LineageNodeReference:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/LineageNodeId'
          description: The ID of the data lineage node.
        eventTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The event timestamp of the data lineage node.
      description: The reference details for the data lineage node.
    LineageNodeReferenceList:
      type: array
      items:
        $ref: '#/components/schemas/LineageNodeReference'
    LineageNodeSummaries:
      type: array
      items:
        $ref: '#/components/schemas/LineageNodeSummary'
    LineageNodeSummary:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain of the data lineage node.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the data lineage node.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the data lineage node.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the data lineage node was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the data lineage node.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp at which the data lineage node was updated.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The user who updated the data lineage node.
        id:
          allOf:
          - $ref: '#/components/schemas/LineageNodeId'
          description: The ID of the data lineage node.
        typeName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the type of the data lineage node.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The type of the revision of the data lineage node.
        sourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The alternate ID of the data lineage node.
        eventTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The event timestamp of the data lineage node.
      required:
      - domainId
      - id
      - typeName
      description: The summary of the data lineage node.
    LineageNodeTypeItem:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the data lineage node type lives.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the data lineage node type.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the data lineage node type.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the data lineage node type was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the data lineage node type.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp at which the data lineage node type was updated.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The user who updated the data lineage node type.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the data lineage node type.
        formsOutput:
          allOf:
          - $ref: '#/components/schemas/FormsOutputMap'
          description: The forms output of the data lineage node type.
      required:
      - domainId
      - revision
      - formsOutput
      description: The details of a data lineage node type.
    LineageRunDetails:
      type: object
      properties:
        sqlQueryRunDetails:
          allOf:
          - $ref: '#/components/schemas/LineageSqlQueryRunDetails'
          description: The SQL query run details of a data lineage run.
      description: The data lineage run details.
    LineageSqlQueryRunDetails:
      type: object
      properties:
        queryStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The query start time in the SQL query run details of a data
            lineage run.
        queryEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The query end time in the SQL query run details of a data lineage
            run.
        totalQueriesProcessed:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total queries processed in the SQL query run details of
            a data lineage run.
        numQueriesFailed:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of queries that failed in the SQL query run details
            of a data lineage run.
        errorMessages:
          allOf:
          - $ref: '#/components/schemas/FailedQueryProcessingErrorMessages'
          description: The error message of the SQL query run details of a data lineage
            run.
      description: The SQL query run details of a data lineage run.
    LineageSyncSchedule:
      type: object
      properties:
        schedule:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The lineage sync schedule.
      description: The lineage sync schedule.
    ListAssetFiltersInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to list asset filters.
        assetIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the data asset.
        status:
          allOf:
          - $ref: '#/components/schemas/FilterStatus'
          description: The status of the asset filter.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of asset filters is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of asset filters, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListAssetFilters` to list the next set
            of asset filters.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of asset filters to return in a single call
            to `ListAssetFilters`. When the number of asset filters to be listed is
            greater than the value of `MaxResults`, the response contains a `NextToken`
            value that you can use in a subsequent call to `ListAssetFilters` to list
            the next set of asset filters.
      required:
      - domainIdentifier
      - assetIdentifier
    ListAssetFiltersOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/AssetFilters'
          description: The results of the `ListAssetFilters` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of asset filters is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of asset filters, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListAssetFilters` to list the next set
            of asset filters.
      required:
      - items
    ListAssetRevisionsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the domain.
        identifier:
          allOf:
          - $ref: '#/components/schemas/AssetIdentifier'
          description: The identifier of the asset.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of revisions is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of revisions, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListAssetRevisions` to list the next set
            of revisions.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of revisions to return in a single call
            to `ListAssetRevisions`. When the number of revisions to be listed is
            greater than the value of `MaxResults`, the response contains a `NextToken`
            value that you can use in a subsequent call to `ListAssetRevisions` to
            list the next set of revisions.
      required:
      - domainIdentifier
      - identifier
    ListAssetRevisionsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/AssetRevisions'
          description: The results of the `ListAssetRevisions` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of revisions is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of revisions, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListAssetRevisions` to list the next set
            of revisions.
    ListConnectionsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to list connections.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of connections to return in a single call
            to ListConnections. When the number of connections to be listed is greater
            than the value of MaxResults, the response contains a NextToken value
            that you can use in a subsequent call to ListConnections to list the next
            set of connections.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of connections is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of connections, the response
            includes a pagination token named NextToken. You can specify this NextToken
            value in a subsequent call to ListConnections to list the next set of
            connections.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SortFieldConnection'
          description: Specifies how you want to sort the listed connections.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies the sort order for the listed connections.
        name:
          allOf:
          - $ref: '#/components/schemas/ConnectionName'
          description: The name of the connection.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment where you want to list connections.
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project where you want to list connections.
        type:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of connection.
      required:
      - domainIdentifier
      - projectIdentifier
    ListConnectionsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ConnectionSummaries'
          description: The results of the ListConnections action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of connections is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of connections, the response
            includes a pagination token named NextToken. You can specify this NextToken
            value in a subsequent call to ListConnections to list the next set of
            connections.
      required:
      - items
    ListDataProductRevisionsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain of the data product revisions that you
            want to list.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DataProductId'
          description: The ID of the data product revision.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of asset filters to return in a single call
            to `ListDataProductRevisions`. When the number of data product revisions
            to be listed is greater than the value of `MaxResults`, the response contains
            a `NextToken` value that you can use in a subsequent call to `ListDataProductRevisions`
            to list the next set of data product revisions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of data product revisions is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of data product
            revisions, the response includes a pagination token named `NextToken`.
            You can specify this `NextToken` value in a subsequent call to `ListDataProductRevisions`
            to list the next set of data product revisions.
      required:
      - domainIdentifier
      - identifier
    ListDataProductRevisionsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/DataProductRevisions'
          description: The results of the `ListDataProductRevisions` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of data product revisions is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of data product
            revisions, the response includes a pagination token named `NextToken`.
            You can specify this `NextToken` value in a subsequent call to `ListDataProductRevisions`
            to list the next set of data product revisions.
      required:
      - items
    ListDataSourceRunActivitiesInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which to list
            data source run activities.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunId'
          description: The identifier of the data source run.
        status:
          allOf:
          - $ref: '#/components/schemas/DataAssetActivityStatus'
          description: The status of the data source run.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of activities is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of activities, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListDataSourceRunActivities` to list the
            next set of activities.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of activities to return in a single call
            to `ListDataSourceRunActivities`. When the number of activities to be
            listed is greater than the value of `MaxResults`, the response contains
            a `NextToken` value that you can use in a subsequent call to `ListDataSourceRunActivities`
            to list the next set of activities.
      required:
      - domainIdentifier
      - identifier
    ListDataSourceRunActivitiesOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunActivities'
          description: The results of the `ListDataSourceRunActivities` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of activities is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of activities, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListDataSourceRunActivities` to list the
            next set of activities.
      required:
      - items
    ListDataSourceRunsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which to invoke
            the `ListDataSourceRuns` action.
        dataSourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The identifier of the data source.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunStatus'
          description: The status of the data source.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of runs is greater than the default value for
            the `MaxResults` parameter, or if you explicitly specify a value for `MaxResults`
            that is less than the number of runs, the response includes a pagination
            token named `NextToken`. You can specify this `NextToken` value in a subsequent
            call to `ListDataSourceRuns` to list the next set of runs.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of runs to return in a single call to `ListDataSourceRuns`.
            When the number of runs to be listed is greater than the value of `MaxResults`,
            the response contains a `NextToken` value that you can use in a subsequent
            call to `ListDataSourceRuns` to list the next set of runs.
      required:
      - domainIdentifier
      - dataSourceIdentifier
    ListDataSourceRunsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunSummaries'
          description: The results of the `ListDataSourceRuns` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of runs is greater than the default value for
            the `MaxResults` parameter, or if you explicitly specify a value for `MaxResults`
            that is less than the number of runs, the response includes a pagination
            token named `NextToken`. You can specify this `NextToken` value in a subsequent
            call to `ListDataSourceRuns` to list the next set of runs.
      required:
      - items
    ListDataSourcesInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which to list
            the data sources.
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the project in which to list data sources.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the environment in which to list the data
            sources.
        connectionIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the connection.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceType'
          description: The type of the data source.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceStatus'
          description: The status of the data source.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data source.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of data sources is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of data sources, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListDataSources` to list the next set of
            data sources.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of data sources to return in a single call
            to `ListDataSources`. When the number of data sources to be listed is
            greater than the value of `MaxResults`, the response contains a `NextToken`
            value that you can use in a subsequent call to `ListDataSources` to list
            the next set of data sources.
      required:
      - domainIdentifier
      - projectIdentifier
    ListDataSourcesOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/DataSourceSummaries'
          description: The results of the `ListDataSources` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of data sources is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of data sources, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListDataSources` to list the next set of
            data sources.
      required:
      - items
    ListDomainUnitsForParentInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain in which you want to list domain units
            for a parent domain unit.
        parentDomainUnitIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the parent domain unit.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsForListDomains'
          description: The maximum number of domain units to return in a single call
            to ListDomainUnitsForParent. When the number of domain units to be listed
            is greater than the value of MaxResults, the response contains a NextToken
            value that you can use in a subsequent call to ListDomainUnitsForParent
            to list the next set of domain units.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of domain units is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of domain units, the response
            includes a pagination token named NextToken. You can specify this NextToken
            value in a subsequent call to ListDomainUnitsForParent to list the next
            set of domain units.
      required:
      - domainIdentifier
      - parentDomainUnitIdentifier
    ListDomainUnitsForParentOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/DomainUnitSummaries'
          description: The results returned by this action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of domain units is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of domain units, the response
            includes a pagination token named NextToken. You can specify this NextToken
            value in a subsequent call to ListDomainUnitsForParent to list the next
            set of domain units.
      required:
      - items
    ListDomainsInput:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/DomainStatus'
          description: The status of the data source.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsForListDomains'
          description: The maximum number of domains to return in a single call to
            `ListDomains`. When the number of domains to be listed is greater than
            the value of `MaxResults`, the response contains a `NextToken` value that
            you can use in a subsequent call to `ListDomains` to list the next set
            of domains.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of domains is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of domains, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListDomains` to list the next set of domains.
    ListDomainsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/DomainSummaries'
          description: The results of the `ListDomains` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of domains is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of domains, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListDomains` to list the next set of domains.
      required:
      - items
    ListEntityOwnersInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to list entity owners.
        entityType:
          allOf:
          - $ref: '#/components/schemas/DataZoneEntityType'
          description: The type of the entity that you want to list.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the entity that you want to list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsForListDomains'
          description: The maximum number of entities to return in a single call to
            `ListEntityOwners`. When the number of entities to be listed is greater
            than the value of `MaxResults`, the response contains a `NextToken` value
            that you can use in a subsequent call to `ListEntityOwners` to list the
            next set of entities.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of entities is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of entities, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListEntityOwners` to list the next set
            of entities.
      required:
      - domainIdentifier
      - entityType
      - entityIdentifier
    ListEntityOwnersOutput:
      type: object
      properties:
        owners:
          allOf:
          - $ref: '#/components/schemas/EntityOwners'
          description: The owners of the entity.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of entities is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of entities, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListEntityOwners` to list the next set
            of entities.
      required:
      - owners
    ListEnvironmentActionSummaries:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentActionSummary'
    ListEnvironmentActionsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the environment
            actions are listed.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the envrironment whose environment actions are listed.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of environment actions is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of environment actions,
            the response includes a pagination token named `NextToken`. You can specify
            this `NextToken` value in a subsequent call to `ListEnvironmentActions`
            to list the next set of environment actions.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of environment actions to return in a single
            call to `ListEnvironmentActions`. When the number of environment actions
            to be listed is greater than the value of `MaxResults`, the response contains
            a `NextToken` value that you can use in a subsequent call to `ListEnvironmentActions`
            to list the next set of environment actions.
      required:
      - domainIdentifier
      - environmentIdentifier
    ListEnvironmentActionsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListEnvironmentActionSummaries'
          description: The results of `ListEnvironmentActions`.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of environment actions is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of environment actions,
            the response includes a pagination token named `NextToken`. You can specify
            this `NextToken` value in a subsequent call to `ListEnvironmentActions`
            to list the next set of environment actions.
    ListEnvironmentBlueprintConfigurationsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of blueprint configurations to return in
            a single call to `ListEnvironmentBlueprintConfigurations`. When the number
            of configurations to be listed is greater than the value of `MaxResults`,
            the response contains a `NextToken` value that you can use in a subsequent
            call to `ListEnvironmentBlueprintConfigurations` to list the next set
            of configurations.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of blueprint configurations is greater than
            the default value for the `MaxResults` parameter, or if you explicitly
            specify a value for `MaxResults` that is less than the number of configurations,
            the response includes a pagination token named `NextToken`. You can specify
            this `NextToken` value in a subsequent call to `ListEnvironmentBlueprintConfigurations`
            to list the next set of configurations.
      required:
      - domainIdentifier
    ListEnvironmentBlueprintConfigurationsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintConfigurations'
          description: The results of the `ListEnvironmentBlueprintConfigurations`
            action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of blueprint configurations is greater than
            the default value for the `MaxResults` parameter, or if you explicitly
            specify a value for `MaxResults` that is less than the number of configurations,
            the response includes a pagination token named `NextToken`. You can specify
            this `NextToken` value in a subsequent call to `ListEnvironmentBlueprintConfigurations`
            to list the next set of configurations.
    ListEnvironmentBlueprintsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of blueprints to return in a single call
            to `ListEnvironmentBlueprints`. When the number of blueprints to be listed
            is greater than the value of `MaxResults`, the response contains a `NextToken`
            value that you can use in a subsequent call to `ListEnvironmentBlueprints`
            to list the next set of blueprints.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of blueprints in the environment is greater
            than the default value for the `MaxResults` parameter, or if you explicitly
            specify a value for `MaxResults` that is less than the number of blueprints
            in the environment, the response includes a pagination token named `NextToken`.
            You can specify this `NextToken` value in a subsequent call to `ListEnvironmentBlueprints`to
            list the next set of blueprints.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintName'
          description: The name of the Amazon DataZone environment.
        managed:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the environment blueprint is managed by Amazon
            DataZone.
      required:
      - domainIdentifier
    ListEnvironmentBlueprintsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintSummaries'
          description: The results of the `ListEnvironmentBlueprints` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of blueprints in the environment is greater
            than the default value for the `MaxResults` parameter, or if you explicitly
            specify a value for `MaxResults` that is less than the number of blueprints
            in the environment, the response includes a pagination token named `NextToken`.
            You can specify this `NextToken` value in a subsequent call to `ListEnvironmentBlueprints`to
            list the next set of blueprints.
      required:
      - items
    ListEnvironmentProfilesInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The identifier of the Amazon Web Services account where you
            want to list environment profiles.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services region where you want to list environment
            profiles.
        environmentBlueprintIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The identifier of the blueprint that was used to create the
            environment profiles that you want to list.
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the Amazon DataZone project.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileName'
          description: ''
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of environment profiles is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of environment profiles,
            the response includes a pagination token named `NextToken`. You can specify
            this `NextToken` value in a subsequent call to `ListEnvironmentProfiles`
            to list the next set of environment profiles.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of environment profiles to return in a single
            call to `ListEnvironmentProfiles`. When the number of environment profiles
            to be listed is greater than the value of `MaxResults`, the response contains
            a `NextToken` value that you can use in a subsequent call to `ListEnvironmentProfiles`
            to list the next set of environment profiles.
      required:
      - domainIdentifier
    ListEnvironmentProfilesOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileSummaries'
          description: The results of the `ListEnvironmentProfiles` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of environment profiles is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of environment profiles,
            the response includes a pagination token named `NextToken`. You can specify
            this `NextToken` value in a subsequent call to `ListEnvironmentProfiles`
            to list the next set of environment profiles.
      required:
      - items
    ListEnvironmentsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The identifier of the Amazon Web Services account where you
            want to list environments.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: The status of the environments that you want to list.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services region where you want to list environments.
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the Amazon DataZone project.
        environmentProfileIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The identifier of the environment profile.
        environmentBlueprintIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The identifier of the Amazon DataZone blueprint.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of the environment.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the environment.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of environments to return in a single call
            to `ListEnvironments`. When the number of environments to be listed is
            greater than the value of `MaxResults`, the response contains a `NextToken`
            value that you can use in a subsequent call to `ListEnvironments` to list
            the next set of environments.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of environments is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of environments, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListEnvironments` to list the next set
            of environments.
      required:
      - domainIdentifier
      - projectIdentifier
    ListEnvironmentsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/EnvironmentSummaries'
          description: The results of the `ListEnvironments` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of environments is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of environments, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListEnvironments` to list the next set
            of environments.
      required:
      - items
    ListJobRunsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to list job runs.
        jobIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the job run.
        status:
          allOf:
          - $ref: '#/components/schemas/JobRunStatus'
          description: The status of a job run.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies the order in which job runs are to be sorted.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of job runs is greater than the default value
            for the MaxResults parameter, or if you explicitly specify a value for
            MaxResults that is less than the number of job runs, the response includes
            a pagination token named NextToken. You can specify this NextToken value
            in a subsequent call to ListJobRuns to list the next set of job runs.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of job runs to return in a single call to
            ListJobRuns. When the number of job runs to be listed is greater than
            the value of MaxResults, the response contains a NextToken value that
            you can use in a subsequent call to ListJobRuns to list the next set of
            job runs.
      required:
      - domainIdentifier
      - jobIdentifier
    ListJobRunsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/JobRunSummaries'
          description: The results of the ListJobRuns action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of job runs is greater than the default value
            for the MaxResults parameter, or if you explicitly specify a value for
            MaxResults that is less than the number of job runs, the response includes
            a pagination token named NextToken. You can specify this NextToken value
            in a subsequent call to ListJobRuns to list the next set of job runs.
    ListLineageEventsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to list lineage events.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of lineage events to return in a single
            call to ListLineageEvents. When the number of lineage events to be listed
            is greater than the value of MaxResults, the response contains a NextToken
            value that you can use in a subsequent call to ListLineageEvents to list
            the next set of lineage events.
        timestampAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The after timestamp of a lineage event.
        timestampBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The before timestamp of a lineage event.
        processingStatus:
          allOf:
          - $ref: '#/components/schemas/LineageEventProcessingStatus'
          description: The processing status of a lineage event.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The sort order of the lineage events.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of lineage events is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of lineage events, the response
            includes a pagination token named NextToken. You can specify this NextToken
            value in a subsequent call to ListLineageEvents to list the next set of
            lineage events.
      required:
      - domainIdentifier
    ListLineageEventsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/LineageEventSummaries'
          description: The results of the ListLineageEvents action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of lineage events is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of lineage events, the response
            includes a pagination token named NextToken. You can specify this NextToken
            value in a subsequent call to ListLineageEvents to list the next set of
            lineage events.
    ListLineageNodeHistoryInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to list the history of
            the specified data lineage node.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of history items to return in a single call
            to ListLineageNodeHistory. When the number of memberships to be listed
            is greater than the value of MaxResults, the response contains a NextToken
            value that you can use in a subsequent call to ListLineageNodeHistory
            to list the next set of items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of history items is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of items, the response includes
            a pagination token named NextToken. You can specify this NextToken value
            in a subsequent call to ListLineageNodeHistory to list the next set of
            items.
        identifier:
          allOf:
          - $ref: '#/components/schemas/LineageNodeIdentifier'
          description: The ID of the data lineage node whose history you want to list.
        direction:
          allOf:
          - $ref: '#/components/schemas/EdgeDirection'
          description: The direction of the data lineage node refers to the lineage
            node having neighbors in that direction. For example, if direction is
            `UPSTREAM`, the `ListLineageNodeHistory` API responds with historical
            versions with upstream neighbors only.
        eventTimestampGTE:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Specifies whether the action is to return data lineage node
            history from the time after the event timestamp.
        eventTimestampLTE:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Specifies whether the action is to return data lineage node
            history from the time prior of the event timestamp.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order by which you want data lineage node history to be
            sorted.
      required:
      - domainIdentifier
      - identifier
    ListLineageNodeHistoryOutput:
      type: object
      properties:
        nodes:
          allOf:
          - $ref: '#/components/schemas/LineageNodeSummaries'
          description: The nodes returned by the ListLineageNodeHistory action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of history items is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of items, the response includes
            a pagination token named NextToken. You can specify this NextToken value
            in a subsequent call to ListLineageNodeHistory to list the next set of
            items.
    ListMetadataGenerationRunsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where you want to list
            metadata generation runs.
        status:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunStatus'
          description: The status of the metadata generation runs.
        type:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunType'
          description: The type of the metadata generation runs.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of metadata generation runs is greater than
            the default value for the MaxResults parameter, or if you explicitly specify
            a value for MaxResults that is less than the number of metadata generation
            runs, the response includes a pagination token named NextToken. You can
            specify this NextToken value in a subsequent call to ListMetadataGenerationRuns
            to list the next set of revisions.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of metadata generation runs to return in
            a single call to ListMetadataGenerationRuns. When the number of metadata
            generation runs to be listed is greater than the value of MaxResults,
            the response contains a NextToken value that you can use in a subsequent
            call to ListMetadataGenerationRuns to list the next set of revisions.
      required:
      - domainIdentifier
    ListMetadataGenerationRunsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRuns'
          description: The results of the ListMetadataGenerationRuns action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of metadata generation runs is greater than
            the default value for the MaxResults parameter, or if you explicitly specify
            a value for MaxResults that is less than the number of metadata generation
            runs, the response includes a pagination token named NextToken. You can
            specify this NextToken value in a subsequent call to ListMetadataGenerationRuns
            to list the next set of revisions.
    ListNotificationsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        type:
          allOf:
          - $ref: '#/components/schemas/NotificationType'
          description: The type of notifications.
        afterTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time after which you want to list notifications.
        beforeTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time before which you want to list notifications.
        subjects:
          allOf:
          - $ref: '#/components/schemas/NotificationSubjects'
          description: The subjects of notifications.
        taskStatus:
          allOf:
          - $ref: '#/components/schemas/TaskStatus'
          description: The task status of notifications.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of notifications to return in a single call
            to `ListNotifications`. When the number of notifications to be listed
            is greater than the value of `MaxResults`, the response contains a `NextToken`
            value that you can use in a subsequent call to `ListNotifications` to
            list the next set of notifications.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of notifications is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of notifications, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListNotifications` to list the next set
            of notifications.
      required:
      - domainIdentifier
      - type
    ListNotificationsOutput:
      type: object
      properties:
        notifications:
          allOf:
          - $ref: '#/components/schemas/NotificationsList'
          description: The results of the `ListNotifications` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of notifications is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of notifications, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListNotifications` to list the next set
            of notifications.
    ListPolicyGrantsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to list policy grants.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TargetEntityType'
          description: The type of entity for which you want to list policy grants.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the entity for which you want to list policy grants.
        policyType:
          allOf:
          - $ref: '#/components/schemas/ManagedPolicyType'
          description: The type of policy that you want to list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsForListDomains'
          description: The maximum number of grants to return in a single call to
            `ListPolicyGrants`. When the number of grants to be listed is greater
            than the value of `MaxResults`, the response contains a `NextToken` value
            that you can use in a subsequent call to `ListPolicyGrants` to list the
            next set of grants.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of grants is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of grants, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListPolicyGrants` to list the next set
            of grants.
      required:
      - domainIdentifier
      - entityType
      - entityIdentifier
      - policyType
    ListPolicyGrantsOutput:
      type: object
      properties:
        grantList:
          allOf:
          - $ref: '#/components/schemas/PolicyGrantList'
          description: The results of this action - the listed grants.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of grants is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of grants, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListPolicyGrants` to list the next set
            of grants.
      required:
      - grantList
    ListProjectMembershipsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which you want
            to list project memberships.
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project whose memberships you want to
            list.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SortFieldProject'
          description: The method by which you want to sort the project memberships.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The sort order of the project memberships.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of memberships is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of memberships, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListProjectMemberships` to list the next
            set of memberships.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of memberships to return in a single call
            to `ListProjectMemberships`. When the number of memberships to be listed
            is greater than the value of `MaxResults`, the response contains a `NextToken`
            value that you can use in a subsequent call to `ListProjectMemberships`
            to list the next set of memberships.
      required:
      - domainIdentifier
      - projectIdentifier
    ListProjectMembershipsOutput:
      type: object
      properties:
        members:
          allOf:
          - $ref: '#/components/schemas/ProjectMembers'
          description: The members of the project.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of memberships is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of memberships, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListProjectMemberships` to list the next
            set of memberships.
      required:
      - members
    ListProjectProfilesInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to list project profiles.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileName'
          description: The name of a project profile.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SortFieldProject'
          description: Specifies by what to sort project profiles.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies the sort order of the project profiles.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of project profiles is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of project profiles, the response
            includes a pagination token named NextToken. You can specify this NextToken
            value in a subsequent call to ListProjectProfiles to list the next set
            of project profiles.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of project profiles to return in a single
            call to ListProjectProfiles. When the number of project profiles to be
            listed is greater than the value of MaxResults, the response contains
            a NextToken value that you can use in a subsequent call to ListProjectProfiles
            to list the next set of project profiles.
      required:
      - domainIdentifier
    ListProjectProfilesOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileSummaries'
          description: The results of the ListProjectProfiles action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of project profiles is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of project profiles, the response
            includes a pagination token named NextToken. You can specify this NextToken
            value in a subsequent call to ListProjectProfiles to list the next set
            of project profiles.
    ListProjectsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        userIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Amazon DataZone user.
        groupIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of a group.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of projects is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of projects, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListProjects` to list the next set of projects.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of projects to return in a single call to
            `ListProjects`. When the number of projects to be listed is greater than
            the value of `MaxResults`, the response contains a `NextToken` value that
            you can use in a subsequent call to `ListProjects` to list the next set
            of projects.
      required:
      - domainIdentifier
    ListProjectsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ProjectSummaries'
          description: The results of the `ListProjects` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of projects is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of projects, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListProjects` to list the next set of projects.
    ListRulesInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain in which the rules are to be listed.
        targetType:
          allOf:
          - $ref: '#/components/schemas/RuleTargetType'
          description: The target type of the rule.
        targetIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The target ID of the rule.
        ruleType:
          allOf:
          - $ref: '#/components/schemas/RuleType'
          description: The type of the rule.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action of the rule.
        projectIds:
          allOf:
          - $ref: '#/components/schemas/ProjectIds'
          description: The IDs of projects in which rules are to be listed.
        assetTypes:
          allOf:
          - $ref: '#/components/schemas/AssetTypeIdentifiers'
          description: The asset types of the rule.
        dataProduct:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The data product of the rule.
        includeCascaded:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to include cascading rules in the results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of rules to return in a single call to `ListRules`.
            When the number of rules to be listed is greater than the value of `MaxResults`,
            the response contains a `NextToken` value that you can use in a subsequent
            call to `ListRules` to list the next set of rules.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of rules is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of rules, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListRules` to list the next set of rules.
      required:
      - domainIdentifier
      - targetType
      - targetIdentifier
    ListRulesOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/RuleSummaries'
          description: The results of the `ListRules` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of rules is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of rules, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListRules` to list the next set of rules.
      required:
      - items
    ListSubscriptionGrantsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The identifier of the Amazon DataZone environment.
        subscriptionTargetId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The identifier of the subscription target.
        subscribedListingId:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The identifier of the subscribed listing.
        subscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The identifier of the subscription.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the owning project of the subscription grants.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SortKey'
          description: Specifies the way of sorting the results of this action.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies the sort order of this action.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of subscription grants to return in a single
            call to `ListSubscriptionGrants`. When the number of subscription grants
            to be listed is greater than the value of `MaxResults`, the response contains
            a `NextToken` value that you can use in a subsequent call to `ListSubscriptionGrants`
            to list the next set of subscription grants.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of subscription grants is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of subscription
            grants, the response includes a pagination token named `NextToken`. You
            can specify this `NextToken` value in a subsequent call to `ListSubscriptionGrants`
            to list the next set of subscription grants.
      required:
      - domainIdentifier
    ListSubscriptionGrantsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrants'
          description: The results of the `ListSubscriptionGrants` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of subscription grants is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of subscription
            grants, the response includes a pagination token named `NextToken`. You
            can specify this `NextToken` value in a subsequent call to `ListSubscriptionGrants`
            to list the next set of subscription grants.
      required:
      - items
    ListSubscriptionRequestsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestStatus'
          description: 'Specifies the status of the subscription requests.


            This is not a required parameter, but if not specified, by default, Amazon
            DataZone returns only `PENDING` subscription requests.'
        subscribedListingId:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The identifier of the subscribed listing.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project for the subscription requests.
        approverProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the subscription request approver's project.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SortKey'
          description: Specifies the way to sort the results of this action.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies the sort order for the results of this action.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of subscription requests to return in a
            single call to `ListSubscriptionRequests`. When the number of subscription
            requests to be listed is greater than the value of `MaxResults`, the response
            contains a `NextToken` value that you can use in a subsequent call to
            `ListSubscriptionRequests` to list the next set of subscription requests.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of subscription requests is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of subscription
            requests, the response includes a pagination token named `NextToken`.
            You can specify this `NextToken` value in a subsequent call to `ListSubscriptionRequests`
            to list the next set of subscription requests.
      required:
      - domainIdentifier
    ListSubscriptionRequestsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequests'
          description: The results of the `ListSubscriptionRequests` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of subscription requests is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of subscription
            requests, the response includes a pagination token named `NextToken`.
            You can specify this `NextToken` value in a subsequent call to `ListSubscriptionRequests`
            to list the next set of subscription requests.
      required:
      - items
    ListSubscriptionTargetsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain where you want
            to list subscription targets.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The identifier of the environment where you want to list subscription
            targets.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SortKey'
          description: Specifies the way in which the results of this action are to
            be sorted.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies the sort order for the results of this action.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of subscription targets to return in a single
            call to `ListSubscriptionTargets`. When the number of subscription targets
            to be listed is greater than the value of `MaxResults`, the response contains
            a `NextToken` value that you can use in a subsequent call to `ListSubscriptionTargets`
            to list the next set of subscription targets.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of subscription targets is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of subscription
            targets, the response includes a pagination token named `NextToken`. You
            can specify this `NextToken` value in a subsequent call to `ListSubscriptionTargets`
            to list the next set of subscription targets.
      required:
      - domainIdentifier
      - environmentIdentifier
    ListSubscriptionTargetsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargets'
          description: The results of the `ListSubscriptionTargets` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of subscription targets is greater than the
            default value for the `MaxResults` parameter, or if you explicitly specify
            a value for `MaxResults` that is less than the number of subscription
            targets, the response includes a pagination token named `NextToken`. You
            can specify this `NextToken` value in a subsequent call to `ListSubscriptionTargets`
            to list the next set of subscription targets.
      required:
      - items
    ListSubscriptionsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        subscriptionRequestIdentifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request for the subscriptions
            that you want to list.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionStatus'
          description: 'The status of the subscriptions that you want to list.


            This is not a required parameter, but if not provided, by default, Amazon
            DataZone returns only `APPROVED` subscriptions.'
        subscribedListingId:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The identifier of the subscribed listing for the subscriptions
            that you want to list.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the owning project.
        approverProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project for the subscription's approver.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/SortKey'
          description: Specifies the way in which the results of this action are to
            be sorted.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Specifies the sort order for the results of this action.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of subscriptions to return in a single call
            to `ListSubscriptions`. When the number of subscriptions to be listed
            is greater than the value of `MaxResults`, the response contains a `NextToken`
            value that you can use in a subsequent call to `ListSubscriptions` to
            list the next set of Subscriptions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of subscriptions is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of subscriptions, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListSubscriptions` to list the next set
            of subscriptions.
      required:
      - domainIdentifier
    ListSubscriptionsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/Subscriptions'
          description: The results of the `ListSubscriptions` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of subscriptions is greater than the default
            value for the `MaxResults` parameter, or if you explicitly specify a value
            for `MaxResults` that is less than the number of subscriptions, the response
            includes a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `ListSubscriptions` to list the next set
            of subscriptions.
      required:
      - items
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the resource whose tags you want to list.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The tags of the specified resource.
    ListTimeSeriesDataPointsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain that houses the assets
            for which you want to list time series data points.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/EntityIdentifier'
          description: The ID of the asset for which you want to list data points.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesEntityType'
          description: The type of the asset for which you want to list data points.
        formName:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesFormName'
          description: The name of the time series data points form.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the data points that you want to list
            started.
        endedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the data points that you wanted to list
            ended.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of data points is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of data points, the response
            includes a pagination token named NextToken. You can specify this NextToken
            value in a subsequent call to ListTimeSeriesDataPoints to list the next
            set of data points.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of data points to return in a single call
            to ListTimeSeriesDataPoints. When the number of data points to be listed
            is greater than the value of MaxResults, the response contains a NextToken
            value that you can use in a subsequent call to ListTimeSeriesDataPoints
            to list the next set of data points.
      required:
      - domainIdentifier
      - entityIdentifier
      - entityType
      - formName
    ListTimeSeriesDataPointsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointSummaryFormOutputList'
          description: The results of the ListTimeSeriesDataPoints action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of data points is greater than the default
            value for the MaxResults parameter, or if you explicitly specify a value
            for MaxResults that is less than the number of data points, the response
            includes a pagination token named NextToken. You can specify this NextToken
            value in a subsequent call to ListTimeSeriesDataPoints to list the next
            set of data points.
    ListingId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    ListingItem:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AssetListing'
        description: |-
          An asset published in an Amazon DataZone catalog.
      - allOf:
        - $ref: '#/components/schemas/DataProductListing'
        description: |-
          The data product listing.
      description: |-
        The details of a listing (aka asset published in a Amazon DataZone catalog).
    ListingName:
      type: string
      minLength: 1
      maxLength: 64
    ListingRevision:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: An identifier of a revision of an asset published in a Amazon
            DataZone catalog.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The details of a revision of an asset published in a Amazon
            DataZone catalog.
      required:
      - id
      - revision
      description: A revision of an asset published in a Amazon DataZone catalog.
    ListingRevisionInput:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: An identifier of revision to be made to an asset published
            in a Amazon DataZone catalog.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The details of a revision to be made to an asset published
            in a Amazon DataZone catalog.
      required:
      - identifier
      - revision
      description: A revision to be made to an asset published in a Amazon DataZone
        catalog.
    ListingStatus:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - INACTIVE
    ListingSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ListingSummary'
    ListingSummary:
      type: object
      properties:
        listingId:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The ID of the data product listing.
        listingRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the data product listing.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/DetailedGlossaryTerms'
          description: The glossary terms of the data product.
      description: The summary of the listing of the data product.
    ListingSummaryItem:
      type: object
      properties:
        listingId:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The ID of the data product listing.
        listingRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the data product listing.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/DetailedGlossaryTerms'
          description: The glossary terms of the data product listing.
      description: The results of the data product summary.
    ListingSummaryItems:
      type: array
      items:
        $ref: '#/components/schemas/ListingSummaryItem'
    LongDescription:
      type: string
      maxLength: 4096
    ManagedPolicyType:
      type: string
      enum:
      - CREATE_DOMAIN_UNIT
      - OVERRIDE_DOMAIN_UNIT_OWNERS
      - ADD_TO_PROJECT_MEMBER_POOL
      - OVERRIDE_PROJECT_OWNERS
      - CREATE_GLOSSARY
      - CREATE_FORM_TYPE
      - CREATE_ASSET_TYPE
      - CREATE_PROJECT
      - CREATE_ENVIRONMENT_PROFILE
      - DELEGATE_CREATE_ENVIRONMENT_PROFILE
      - CREATE_ENVIRONMENT
      - CREATE_ENVIRONMENT_FROM_BLUEPRINT
      - CREATE_PROJECT_FROM_PROJECT_PROFILE
    MatchCriteria:
      type: array
      items:
        type: string
    MaxResults:
      type: integer
      minimum: 1
      maximum: 50
    MaxResultsForListDomains:
      type: integer
      minimum: 1
      maximum: 25
    Member:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The user ID of a project member.
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The ID of the group of a project member.
      description: |-
        The details about a project member.
    MemberDetails:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/UserDetails'
        description: |-
          The user details of a project member.
      - allOf:
        - $ref: '#/components/schemas/GroupDetails'
        description: |-
          The group details of a project member.
      description: |-
        The details about a project member.
    Message:
      type: string
      maxLength: 16384
    MetadataFormEnforcementDetail:
      type: object
      properties:
        requiredMetadataForms:
          allOf:
          - $ref: '#/components/schemas/RequiredMetadataFormList'
          description: The required metadata forms.
      description: The enforcement details of a metadata form.
    MetadataFormInputs:
      type: array
      items:
        $ref: '#/components/schemas/FormInput'
    MetadataFormReference:
      type: object
      properties:
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/FormTypeIdentifier'
          description: The type ID of the metadata form reference.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The type revision of the metadata form reference.
      required:
      - typeIdentifier
      - typeRevision
      description: The reference of a metadata form.
    MetadataFormSummary:
      type: object
      properties:
        formName:
          allOf:
          - $ref: '#/components/schemas/FormName'
          description: The form name of the metadata form.
        typeName:
          allOf:
          - $ref: '#/components/schemas/FormTypeName'
          description: The type name of the metadata form.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The type revision of the metadata form.
      required:
      - typeName
      - typeRevision
      description: The summary of the metadata form.
    MetadataForms:
      type: array
      items:
        $ref: '#/components/schemas/FormOutput'
    MetadataFormsSummary:
      type: array
      items:
        $ref: '#/components/schemas/MetadataFormSummary'
    MetadataGenerationRunIdentifier:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    MetadataGenerationRunItem:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the metadata
            generation run was created.
        id:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunIdentifier'
          description: The ID of the metadata generation run.
        target:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunTarget'
          description: The asset for which metadata was generated.
        status:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunStatus'
          description: The status of the metadata generation run.
        type:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunType'
          description: The type of the metadata generation run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the metadata generation run was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the metadata generation run.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project that owns the asset for which the metadata
            generation was ran.
      required:
      - domainId
      - id
      - owningProjectId
      description: The metadata generation run.
    MetadataGenerationRunStatus:
      type: string
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELED
      - SUCCEEDED
      - FAILED
    MetadataGenerationRunTarget:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationTargetType'
          description: The type of the asset for which metadata was generated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the metadata generation run's target.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the asset for which metadata was generated.
      required:
      - type
      - identifier
      description: The asset for which metadata was generated.
    MetadataGenerationRunType:
      type: string
      enum:
      - BUSINESS_DESCRIPTIONS
    MetadataGenerationRuns:
      type: array
      items:
        $ref: '#/components/schemas/MetadataGenerationRunItem'
    MetadataGenerationTargetType:
      type: string
      enum:
      - ASSET
    MetadataMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    Model:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/Smithy'
        description: |-
          Indicates the smithy model of the API.
      description: |-
        The model of the API.
      x-sensitive: true
    Name:
      type: string
      minLength: 1
      maxLength: 256
    NameIdentifier:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name in the name identifier.
        namespace:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The namespace in the name identifier.
      description: The name identifier.
    NameIdentifiers:
      type: array
      items:
        $ref: '#/components/schemas/NameIdentifier'
    NotEqualToExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value that might not be equal to the expression.
      required:
      - columnName
      - value
      description: Specifies that a value is not equal to the expression.
    NotInExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
        values:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The value that might not be in the expression.
      required:
      - columnName
      - values
      description: Specifies that a value is not in the expression.
    NotLikeExpression:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the column.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value that might not be like the expression.
      required:
      - columnName
      - value
      description: Specifies that a value might be not like the expression.
    NotificationOutput:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The identifier of the notification.
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of a Amazon DataZone domain in which the notification
            exists.
        type:
          allOf:
          - $ref: '#/components/schemas/NotificationType'
          description: The type of the notification.
        topic:
          allOf:
          - $ref: '#/components/schemas/Topic'
          description: The topic of the notification.
        title:
          allOf:
          - $ref: '#/components/schemas/Title'
          description: The title of the notification.
        message:
          allOf:
          - $ref: '#/components/schemas/Message'
          description: The message included in the notification.
        status:
          allOf:
          - $ref: '#/components/schemas/TaskStatus'
          description: The status included in the notification.
        actionLink:
          allOf:
          - $ref: '#/components/schemas/ActionLink'
          description: The action link included in the notification.
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when a notification was created.
        lastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the notification was last updated.
        metadata:
          allOf:
          - $ref: '#/components/schemas/MetadataMap'
          description: The metadata included in the notification.
      required:
      - identifier
      - domainIdentifier
      - type
      - topic
      - title
      - message
      - actionLink
      - creationTimestamp
      - lastUpdatedTimestamp
      description: The details of a notification generated in Amazon DataZone.
    NotificationResource:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/NotificationResourceType'
          description: The type of the resource mentioned in a notification.
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the resource mentioned in a notification.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the resource mentioned in a notification.
      required:
      - type
      - id
      description: The details of the resource mentioned in a notification.
    NotificationResourceType:
      type: string
      enum:
      - PROJECT
    NotificationRole:
      type: string
      enum:
      - PROJECT_OWNER
      - PROJECT_CONTRIBUTOR
      - PROJECT_VIEWER
      - DOMAIN_OWNER
      - PROJECT_SUBSCRIBER
    NotificationSubjects:
      type: array
      items:
        type: string
    NotificationType:
      type: string
      enum:
      - TASK
      - EVENT
    NotificationsList:
      type: array
      items:
        $ref: '#/components/schemas/NotificationOutput'
    OAuth2ClientApplication:
      type: object
      properties:
        userManagedClientApplicationClientId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user managed client application client ID in the OAuth2Client
            application.
        aWSManagedClientApplicationReference:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services managed client application reference
            in the OAuth2Client application.
      description: The OAuth2Client application.
    OAuth2GrantType:
      type: string
      enum:
      - AUTHORIZATION_CODE
      - CLIENT_CREDENTIALS
      - JWT_BEARER
    OAuth2Properties:
      type: object
      properties:
        oAuth2GrantType:
          allOf:
          - $ref: '#/components/schemas/OAuth2GrantType'
          description: The OAuth2 grant type of the OAuth2 properties.
        oAuth2ClientApplication:
          allOf:
          - $ref: '#/components/schemas/OAuth2ClientApplication'
          description: The OAuth2 client application of the OAuth2 properties.
        tokenUrl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The OAuth2 token URL of the OAuth2 properties.
        tokenUrlParametersMap:
          allOf:
          - $ref: '#/components/schemas/TokenUrlParametersMap'
          description: The OAuth2 token URL parameter map of the OAuth2 properties.
        authorizationCodeProperties:
          allOf:
          - $ref: '#/components/schemas/AuthorizationCodeProperties'
          description: The authorization code properties of the OAuth2 properties.
        oAuth2Credentials:
          allOf:
          - $ref: '#/components/schemas/GlueOAuth2Credentials'
          description: The OAuth2 credentials of the OAuth2 properties.
      description: The OAuth2 properties.
    OpenLineageRunEventSummary:
      type: object
      properties:
        eventType:
          allOf:
          - $ref: '#/components/schemas/OpenLineageRunState'
          description: The event type of the open lineage run event summary.
        runId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The runID of the open lineage run event summary.
        job:
          allOf:
          - $ref: '#/components/schemas/NameIdentifier'
          description: The job of the open lineage run event summary.
        inputs:
          allOf:
          - $ref: '#/components/schemas/NameIdentifiers'
          description: The inputs of the open lineage run event summary.
        outputs:
          allOf:
          - $ref: '#/components/schemas/NameIdentifiers'
          description: The outputs of the open lineage run event summary.
      description: The open lineage run event summary.
    OpenLineageRunState:
      type: string
      enum:
      - START
      - RUNNING
      - COMPLETE
      - ABORT
      - FAIL
      - OTHER
    OverallDeploymentStatus:
      type: string
      enum:
      - PENDING_DEPLOYMENT
      - IN_PROGRESS
      - SUCCESSFUL
      - FAILED_VALIDATION
      - FAILED_DEPLOYMENT
    OverrideDomainUnitOwnersPolicyGrantDetail:
      type: object
      properties:
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the policy is inherited by child domain units.
      description: The grant details of the override domain unit owners policy.
    OverrideProjectOwnersPolicyGrantDetail:
      type: object
      properties:
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the policy is inherited by child domain units.
      description: The details of the override project owners policy grant.
    OwnerGroupProperties:
      type: object
      properties:
        groupIdentifier:
          allOf:
          - $ref: '#/components/schemas/GroupIdentifier'
          description: The ID of the domain unit owners group.
      required:
      - groupIdentifier
      description: The properties of the domain unit owners group.
    OwnerGroupPropertiesOutput:
      type: object
      properties:
        groupId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the domain unit owners group.
      description: The properties of the domain unit owners group.
    OwnerProperties:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/OwnerUserProperties'
        description: |-
          Specifies that the domain unit owner is a user.
      - allOf:
        - $ref: '#/components/schemas/OwnerGroupProperties'
        description: |-
          Specifies that the domain unit owner is a group.
      description: |-
        The properties of a domain unit's owner.
    OwnerPropertiesOutput:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/OwnerUserPropertiesOutput'
        description: |-
          Specifies that the domain unit owner is a user.
      - allOf:
        - $ref: '#/components/schemas/OwnerGroupPropertiesOutput'
        description: |-
          Specifies that the domain unit owner is a group.
      description: |-
        The ID of the domain unit owners group.
    OwnerUserProperties:
      type: object
      properties:
        userIdentifier:
          allOf:
          - $ref: '#/components/schemas/UserIdentifier'
          description: The ID of the owner user.
      required:
      - userIdentifier
      description: The properties of the owner user.
    OwnerUserPropertiesOutput:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the owner user.
      description: The properties of the owner user.
    PaginationToken:
      type: string
      minLength: 1
      maxLength: 8192
    ParameterStorePath:
      type: string
      minLength: 1
      maxLength: 2048
    Password:
      type: string
      maxLength: 64
    PhysicalConnectionRequirements:
      type: object
      properties:
        subnetId:
          allOf:
          - $ref: '#/components/schemas/SubnetId'
          description: The subnet ID of the physical connection requirements of a
            connection.
        subnetIdList:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          description: The subnet ID list of the physical connection requirements
            of a connection.
        securityGroupIdList:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          description: The group ID list of the physical connection requirements of
            a connection.
        availabilityZone:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The availability zone of the physical connection requirements
            of a connection.
      description: Physical connection requirements of a connection.
    PhysicalEndpoint:
      type: object
      properties:
        awsLocation:
          allOf:
          - $ref: '#/components/schemas/AwsLocation'
          description: The location of a connection.
        glueConnectionName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Glue connection name.
        glueConnection:
          allOf:
          - $ref: '#/components/schemas/GlueConnection'
          description: The Amazon Web Services Glue connection.
        host:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The host in the physical endpoints of a connection.
        port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port in the physical endpoints of a connection.
        protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: The protocol in the physical endpoints of a connection.
        stage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The stage in the physical endpoints of a connection.
      description: The physical endpoints of a connection.
    PhysicalEndpoints:
      type: array
      items:
        $ref: '#/components/schemas/PhysicalEndpoint'
    PolicyArn:
      type: string
      pattern: ^arn:aws[^:]*:iam::(aws|\d{12}):policy/[\w+=,.@-]*$
    PolicyGrantDetail:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/CreateDomainUnitPolicyGrantDetail'
        description: |-
          Specifies that this is a create domain unit policy.
      - allOf:
        - $ref: '#/components/schemas/OverrideDomainUnitOwnersPolicyGrantDetail'
        description: |-
          Specifies whether to override domain unit owners.
      - allOf:
        - $ref: '#/components/schemas/AddToProjectMemberPoolPolicyGrantDetail'
        description: |-
          Specifies that the policy grant is to be added to the members of the project.
      - allOf:
        - $ref: '#/components/schemas/OverrideProjectOwnersPolicyGrantDetail'
        description: |-
          Specifies whether to override project owners.
      - allOf:
        - $ref: '#/components/schemas/CreateGlossaryPolicyGrantDetail'
        description: |-
          Specifies that this is a create glossary policy.
      - allOf:
        - $ref: '#/components/schemas/CreateFormTypePolicyGrantDetail'
        description: |-
          Specifies that this is a create form type policy.
      - allOf:
        - $ref: '#/components/schemas/CreateAssetTypePolicyGrantDetail'
        description: |-
          Specifies that this is a create asset type policy.
      - allOf:
        - $ref: '#/components/schemas/CreateProjectPolicyGrantDetail'
        description: |-
          Specifies that this is a create project policy.
      - allOf:
        - $ref: '#/components/schemas/CreateEnvironmentProfilePolicyGrantDetail'
        description: |-
          Specifies that this is a create environment profile policy.
      - allOf:
        - $ref: '#/components/schemas/Unit'
        description: |-
          Specifies that this is the delegation of the create environment profile policy.
      - allOf:
        - $ref: '#/components/schemas/Unit'
        description: |-
          Specifies that this is a create environment policy.
      - allOf:
        - $ref: '#/components/schemas/Unit'
      - allOf:
        - $ref: '#/components/schemas/CreateProjectFromProjectProfilePolicyGrantDetail'
        description: |-
          Specifies whether to create a project from project profile.
      description: |-
        The details of the policy grant.
    PolicyGrantList:
      type: array
      items:
        $ref: '#/components/schemas/PolicyGrantMember'
    PolicyGrantMember:
      type: object
      properties:
        principal:
          allOf:
          - $ref: '#/components/schemas/PolicyGrantPrincipal'
          description: The principal of the policy grant member.
        detail:
          allOf:
          - $ref: '#/components/schemas/PolicyGrantDetail'
          description: The details of the policy grant member.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: Specifies the timestamp at which policy grant member was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: Specifies the user who created the policy grant member.
      description: A member of the policy grant list.
    PolicyGrantPrincipal:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/UserPolicyGrantPrincipal'
        description: |-
          The user of the policy grant principal.
      - allOf:
        - $ref: '#/components/schemas/GroupPolicyGrantPrincipal'
        description: |-
          The group of the policy grant principal.
      - allOf:
        - $ref: '#/components/schemas/ProjectPolicyGrantPrincipal'
        description: |-
          The project of the policy grant principal.
      - allOf:
        - $ref: '#/components/schemas/DomainUnitPolicyGrantPrincipal'
        description: |-
          The domain unit of the policy grant principal.
      description: |-
        The policy grant principal.
    PostLineageEventInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to post a data lineage
            event.
        event:
          allOf:
          - $ref: '#/components/schemas/LineageEvent'
          description: The data lineage event that you want to post. Only open-lineage
            run event are supported as events.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - event
    PostLineageEventOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/LineageEventIdentifier'
          description: The ID of the lineage event.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain.
    PostTimeSeriesDataPointsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which you want to post
            time series data points.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/EntityIdentifier'
          description: The ID of the asset for which you want to post time series
            data points.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesEntityType'
          description: The type of the asset for which you want to post data points.
        forms:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointFormInputList'
          description: The forms that contain the data points that you want to post.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - entityIdentifier
      - entityType
      - forms
    PostTimeSeriesDataPointsOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which you want to post
            time series data points.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the asset for which you want to post time series
            data points.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesEntityType'
          description: The type of the asset for which you want to post data points.
        forms:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesDataPointFormOutputList'
          description: The forms that contain the data points that you have posted.
    PredictionChoices:
      type: array
      items:
        type: integer
    PredictionConfiguration:
      type: object
      properties:
        businessNameGeneration:
          allOf:
          - $ref: '#/components/schemas/BusinessNameGenerationConfiguration'
          description: The business name generation mechanism.
      description: The configuration of the prediction.
    ProjectDeletionError:
      type: object
      properties:
        code:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The code of the project deletion error.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The message of the project deletion error.
      description: Specifies the error message that is returned if the operation cannot
        be successfully completed.
    ProjectDesignation:
      type: string
      enum:
      - OWNER
      - CONTRIBUTOR
      - PROJECT_CATALOG_STEWARD
    ProjectGrantFilter:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/DomainUnitFilterForProject'
        description: |-
          The domain unit filter of the project grant filter.
      description: |-
        The project grant filter.
    ProjectId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    ProjectIds:
      type: array
      items:
        $ref: '#/components/schemas/ProjectId'
    ProjectMember:
      type: object
      properties:
        memberDetails:
          allOf:
          - $ref: '#/components/schemas/MemberDetails'
          description: The membership details of a project member.
        designation:
          allOf:
          - $ref: '#/components/schemas/UserDesignation'
          description: The designated role of a project member.
      required:
      - memberDetails
      - designation
      description: The details of a project member.
    ProjectMembers:
      type: array
      items:
        $ref: '#/components/schemas/ProjectMember'
    ProjectName:
      type: string
      pattern: ^[\w -]+$
      minLength: 1
      maxLength: 64
    ProjectPolicyGrantPrincipal:
      type: object
      properties:
        projectDesignation:
          allOf:
          - $ref: '#/components/schemas/ProjectDesignation'
          description: The project designation of the project policy grant principal.
        projectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The project ID of the project policy grant principal.
        projectGrantFilter:
          allOf:
          - $ref: '#/components/schemas/ProjectGrantFilter'
          description: The project grant filter of the project policy grant principal.
      required:
      - projectDesignation
      description: The project policy grant principal.
    ProjectProfileId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    ProjectProfileList:
      type: array
      items:
        type: string
    ProjectProfileName:
      type: string
      pattern: ^[\w -]+$
      minLength: 1
      maxLength: 64
    ProjectProfileSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ProjectProfileSummary'
    ProjectProfileSummary:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The domain ID of the project profile.
        id:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: The ID of the project profile.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileName'
          description: The name of a project profile.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the project profile.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of a project profile.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the project profile.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the project profile was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which a project profile was last updated.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The domain unit ID of the project profile.
      required:
      - domainId
      - id
      - name
      - createdBy
      description: The summary of a project profile.
    ProjectStatus:
      type: string
      enum:
      - ACTIVE
      - DELETING
      - DELETE_FAILED
      - UPDATING
      - UPDATE_FAILED
    ProjectSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ProjectSummary'
    ProjectSummary:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of a Amazon DataZone domain where the project
            exists.
        id:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of a project.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of a project.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of a project.
        projectStatus:
          allOf:
          - $ref: '#/components/schemas/ProjectStatus'
          description: The status of the project.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the project.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when a project was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the project was updated.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit.
      required:
      - domainId
      - id
      - name
      - createdBy
      description: The details of a Amazon DataZone project.
    ProjectsForRule:
      type: object
      properties:
        selectionMode:
          allOf:
          - $ref: '#/components/schemas/RuleScopeSelectionMode'
          description: The selection mode of the rule.
        specificProjects:
          allOf:
          - $ref: '#/components/schemas/RuleProjectIdentifierList'
          description: The specific projects in which the rule is created.
      required:
      - selectionMode
      description: Specifies projects in which the rule is created.
    PropertyMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    Protocol:
      type: string
      enum:
      - ATHENA
      - GLUE_INTERACTIVE_SESSION
      - HTTPS
      - JDBC
      - LIVY
      - ODBC
      - PRISM
    ProvisioningConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/LakeFormationConfiguration'
        description: |-
          The Lake Formation configuration of the Data Lake blueprint.
      description: |-
        The provisioning configuration of the blueprint.
    ProvisioningConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/ProvisioningConfiguration'
    ProvisioningProperties:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/CloudFormationProperties'
        description: |-
          The cloud formation properties included as part of the provisioning properties of an environment blueprint.
      description: |-
        The provisioning properties of an environment blueprint.
    PutEnvironmentBlueprintConfigurationInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        environmentBlueprintIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The identifier of the environment blueprint.
        provisioningRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the provisioning role.
        manageAccessRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the manage access role.
        environmentRolePermissionBoundary:
          allOf:
          - $ref: '#/components/schemas/PolicyArn'
          description: The environment role permissions boundary.
        enabledRegions:
          allOf:
          - $ref: '#/components/schemas/EnabledRegionList'
          description: Specifies the enabled Amazon Web Services Regions.
        regionalParameters:
          allOf:
          - $ref: '#/components/schemas/RegionalParameterMap'
          description: The regional parameters in the environment blueprint.
        provisioningConfigurations:
          allOf:
          - $ref: '#/components/schemas/ProvisioningConfigurationList'
          description: The provisioning configuration of a blueprint.
      required:
      - domainIdentifier
      - environmentBlueprintIdentifier
      - enabledRegions
    PutEnvironmentBlueprintConfigurationOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The identifier of the environment blueprint.
        provisioningRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the provisioning role.
        environmentRolePermissionBoundary:
          allOf:
          - $ref: '#/components/schemas/PolicyArn'
          description: The environment role permissions boundary.
        manageAccessRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the manage access role.
        enabledRegions:
          allOf:
          - $ref: '#/components/schemas/EnabledRegionList'
          description: Specifies the enabled Amazon Web Services Regions.
        regionalParameters:
          allOf:
          - $ref: '#/components/schemas/RegionalParameterMap'
          description: The regional parameters in the environment blueprint.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment blueprint was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment blueprint was updated.
        provisioningConfigurations:
          allOf:
          - $ref: '#/components/schemas/ProvisioningConfigurationList'
          description: The provisioning configuration of a blueprint.
      required:
      - domainId
      - environmentBlueprintId
    RecommendationConfiguration:
      type: object
      properties:
        enableBusinessNameGeneration:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether automatic business name generation is to
            be enabled or not as part of the recommendation configuration.
      description: The recommendation to be updated as part of the `UpdateDataSource`
        action.
    RedshiftClusterStorage:
      type: object
      properties:
        clusterName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of an Amazon Redshift cluster.
      required:
      - clusterName
      description: The details of the Amazon Redshift cluster storage.
    RedshiftCredentialConfiguration:
      type: object
      properties:
        secretManagerArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of a secret manager for an Amazon Redshift cluster.
      required:
      - secretManagerArn
      description: The details of the credentials required to access an Amazon Redshift
        cluster.
    RedshiftCredentials:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The secret ARN of the Amazon Redshift credentials of a connection.
      - allOf:
        - $ref: '#/components/schemas/UsernamePassword'
        description: |-
          The username and password of the Amazon Redshift credentials of a connection.
      description: |-
        Amazon Redshift credentials of a connection.
      x-sensitive: true
    RedshiftLineageSyncConfigurationInput:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the Amaon Redshift lineage sync configuration
            is enabled.
        schedule:
          allOf:
          - $ref: '#/components/schemas/LineageSyncSchedule'
          description: The schedule of the Amaon Redshift lineage sync configuration.
      description: The Amaon Redshift lineage sync configuration.
    RedshiftLineageSyncConfigurationOutput:
      type: object
      properties:
        lineageJobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The lineage job ID of the Amaon Redshift lineage sync configuration.
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the Amaon Redshift lineage sync configuration
            is enabled.
        schedule:
          allOf:
          - $ref: '#/components/schemas/LineageSyncSchedule'
          description: The schedule of teh Amaon Redshift lineage sync configuration.
      description: The Amaon Redshift lineage sync configuration.
    RedshiftPropertiesInput:
      type: object
      properties:
        storage:
          allOf:
          - $ref: '#/components/schemas/RedshiftStorageProperties'
          description: The Amazon Redshift storage.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Redshift database name.
        host:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Redshift host.
        port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The Amaon Redshift port.
        credentials:
          allOf:
          - $ref: '#/components/schemas/RedshiftCredentials'
          description: The Amaon Redshift credentials.
        lineageSync:
          allOf:
          - $ref: '#/components/schemas/RedshiftLineageSyncConfigurationInput'
          description: The lineage sync of the Amazon Redshift.
      description: The Amazon Redshift properties.
    RedshiftPropertiesOutput:
      type: object
      properties:
        storage:
          allOf:
          - $ref: '#/components/schemas/RedshiftStorageProperties'
          description: The storage in the Amazon Redshift properties.
        credentials:
          allOf:
          - $ref: '#/components/schemas/RedshiftCredentials'
          description: The Amazon Redshift credentials.
        isProvisionedSecret:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether Amaon Redshift properties has a provisioned
            secret.
        jdbcIamUrl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The jdbcIam URL of the Amazon Redshift properties.
        jdbcUrl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The jdbcURL of the Amazon Redshift properties.
        redshiftTempDir:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The redshiftTempDir of the Amazon Redshift properties.
        lineageSync:
          allOf:
          - $ref: '#/components/schemas/RedshiftLineageSyncConfigurationOutput'
          description: The lineage syn of the Amazon Redshift properties.
        status:
          allOf:
          - $ref: '#/components/schemas/ConnectionStatus'
          description: The status in the Amazon Redshift properties.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Redshift database name.
      description: The Amazon Redshift properties.
    RedshiftPropertiesPatch:
      type: object
      properties:
        storage:
          allOf:
          - $ref: '#/components/schemas/RedshiftStorageProperties'
          description: The storage in the Amazon Redshift properties patch.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name in the Amazon Redshift properties patch.
        host:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The host in the Amazon Redshift properties patch.
        port:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port in the Amazon Redshift properties patch.
        credentials:
          allOf:
          - $ref: '#/components/schemas/RedshiftCredentials'
          description: The credentials in the Amazon Redshift properties patch.
        lineageSync:
          allOf:
          - $ref: '#/components/schemas/RedshiftLineageSyncConfigurationInput'
          description: The lineage sync in the Amazon Redshift properties patch.
      description: Amazon Redshift properties patch.
    RedshiftRunConfigurationInput:
      type: object
      properties:
        dataAccessRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The data access role included in the configuration details
            of the Amazon Redshift data source.
        relationalFilterConfigurations:
          allOf:
          - $ref: '#/components/schemas/RelationalFilterConfigurations'
          description: The relational filger configurations included in the configuration
            details of the Amazon Redshift data source.
        redshiftCredentialConfiguration:
          $ref: '#/components/schemas/RedshiftCredentialConfiguration'
        redshiftStorage:
          $ref: '#/components/schemas/RedshiftStorage'
      required:
      - relationalFilterConfigurations
      description: The configuration details of the Amazon Redshift data source.
    RedshiftRunConfigurationOutput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the Amazon Web Services account included in the configuration
            details of the Amazon Redshift data source.
        region:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services region included in the configuration
            details of the Amazon Redshift data source.
        dataAccessRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The data access role included in the configuration details
            of the Amazon Redshift data source.
        relationalFilterConfigurations:
          allOf:
          - $ref: '#/components/schemas/RelationalFilterConfigurations'
          description: The relational filger configurations included in the configuration
            details of the Amazon Redshift data source.
        redshiftCredentialConfiguration:
          $ref: '#/components/schemas/RedshiftCredentialConfiguration'
        redshiftStorage:
          $ref: '#/components/schemas/RedshiftStorage'
      required:
      - relationalFilterConfigurations
      - redshiftStorage
      description: The configuration details of the Amazon Redshift data source.
    RedshiftSelfGrantStatusOutput:
      type: object
      properties:
        selfGrantStatusDetails:
          allOf:
          - $ref: '#/components/schemas/SelfGrantStatusDetails'
          description: The details for the self granting status for an Amazon Redshift
            data source.
      required:
      - selfGrantStatusDetails
      description: The details for the self granting status for an Amazon Redshift
        data source.
    RedshiftServerlessStorage:
      type: object
      properties:
        workgroupName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon Redshift Serverless workgroup.
      required:
      - workgroupName
      description: The details of the Amazon Redshift Serverless workgroup storage.
    RedshiftStorage:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/RedshiftClusterStorage'
        description: |-
          The details of the Amazon Redshift cluster source.
      - allOf:
        - $ref: '#/components/schemas/RedshiftServerlessStorage'
        description: |-
          The details of the Amazon Redshift Serverless workgroup source.
      description: |-
        The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.
    RedshiftStorageProperties:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The cluster name in the Amazon Redshift storage properties.
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The workgroup name in the Amazon Redshift storage properties.
      description: |-
        The Amazon Redshift storage properties.
    Region:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/RegionName'
        description: |-
          The Amazon Web Services Region name.
      - allOf:
        - $ref: '#/components/schemas/ParameterStorePath'
        description: |-
          The region name path.
      description: |-
        The Amazon Web Services Region.
    RegionName:
      type: string
      pattern: ^[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]$
      minLength: 4
      maxLength: 16
    RegionalParameter:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    RegionalParameterMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/RegionalParameter'
    RejectChoice:
      type: object
      properties:
        predictionTarget:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the target (for example, a column name) where a prediction
            can be rejected.
        predictionChoices:
          allOf:
          - $ref: '#/components/schemas/PredictionChoices'
          description: Specifies the the automatically generated business metadata
            that can be rejected.
      required:
      - predictionTarget
      description: The details of the automatically generated business metadata that
        is rejected.
    RejectChoices:
      type: array
      items:
        $ref: '#/components/schemas/RejectChoice'
    RejectPredictionsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        identifier:
          allOf:
          - $ref: '#/components/schemas/AssetIdentifier'
          description: The identifier of the prediction.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision that is to be made to the asset.
        rejectRule:
          allOf:
          - $ref: '#/components/schemas/RejectRule'
          description: Specifies the rule (or the conditions) under which a prediction
            can be rejected.
        rejectChoices:
          allOf:
          - $ref: '#/components/schemas/RejectChoices'
          description: Specifies the prediction (aka, the automatically generated
            piece of metadata) and the target (for example, a column name) that can
            be rejected.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - identifier
    RejectPredictionsOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain.
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the asset.
        assetRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision that is to be made to the asset.
      required:
      - domainId
      - assetId
      - assetRevision
    RejectRule:
      type: object
      properties:
        rule:
          allOf:
          - $ref: '#/components/schemas/RejectRuleBehavior'
          description: Specifies whether you want to reject the top prediction for
            all targets or none.
        threshold:
          allOf:
          - $ref: '#/components/schemas/Float'
          description: The confidence score that specifies the condition at which
            a prediction can be rejected.
      description: Specifies the rule and the threshold under which a prediction can
        be rejected.
    RejectRuleBehavior:
      type: string
      enum:
      - ALL
      - NONE
    RejectSubscriptionRequestInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the subscription
            request was rejected.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request that was rejected.
        decisionComment:
          allOf:
          - $ref: '#/components/schemas/DecisionComment'
          description: The decision comment of the rejected subscription request.
      required:
      - domainIdentifier
      - identifier
    RejectSubscriptionRequestOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request that was rejected.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The timestamp of when the subscription request was rejected.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription request.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the subscription
            request was rejected.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestStatus'
          description: The status of the subscription request.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription request was rejected.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription request was updated.
        requestReason:
          allOf:
          - $ref: '#/components/schemas/RequestReason'
          description: The reason for the subscription request.
        subscribedPrincipals:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipals'
          description: The subscribed principals of the subscription request.
        subscribedListings:
          allOf:
          - $ref: '#/components/schemas/SubscribedListings'
          description: The subscribed listings of the subscription request.
        reviewerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the subscription request reviewer.
        decisionComment:
          allOf:
          - $ref: '#/components/schemas/DecisionComment'
          description: The decision comment of the rejected subscription request.
        existingSubscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The ID of the existing subscription.
        metadataForms:
          allOf:
          - $ref: '#/components/schemas/MetadataForms'
          description: Metadata forms included in the subscription request.
      required:
      - id
      - createdBy
      - domainId
      - status
      - createdAt
      - updatedAt
      - requestReason
      - subscribedPrincipals
      - subscribedListings
    RelationalFilterConfiguration:
      type: object
      properties:
        databaseName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The database name specified in the relational filter configuration
            for the data source.
        schemaName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The schema name specified in the relational filter configuration
            for the data source.
        filterExpressions:
          allOf:
          - $ref: '#/components/schemas/FilterExpressions'
          description: The filter expressions specified in the relational filter configuration
            for the data source.
      required:
      - databaseName
      description: The relational filter configuration for the data source.
    RelationalFilterConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/RelationalFilterConfiguration'
    RemoveEntityOwnerInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to remove an owner from
            an entity.
        entityType:
          allOf:
          - $ref: '#/components/schemas/DataZoneEntityType'
          description: The type of the entity from which you want to remove an owner.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the entity from which you want to remove an owner.
        owner:
          allOf:
          - $ref: '#/components/schemas/OwnerProperties'
          description: The owner that you want to remove from an entity.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - entityType
      - entityIdentifier
      - owner
    RemoveEntityOwnerOutput:
      type: object
      properties: {}
    RemovePolicyGrantInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to remove a policy grant.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TargetEntityType'
          description: The type of the entity from which you want to remove a policy
            grant.
        entityIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the entity from which you want to remove a policy
            grant.
        policyType:
          allOf:
          - $ref: '#/components/schemas/ManagedPolicyType'
          description: The type of the policy that you want to remove.
        principal:
          allOf:
          - $ref: '#/components/schemas/PolicyGrantPrincipal'
          description: The principal from which you want to remove a policy grant.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - entityType
      - entityIdentifier
      - policyType
      - principal
    RemovePolicyGrantOutput:
      type: object
      properties: {}
    RequestReason:
      type: string
      minLength: 1
      maxLength: 4096
    RequiredMetadataFormList:
      type: array
      items:
        $ref: '#/components/schemas/MetadataFormReference'
    Resource:
      type: object
      properties:
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of a provisioned resource of this Amazon DataZone
            environment.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of a provisioned resource of this Amazon DataZone
            environment.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of a provisioned resource of this Amazon DataZone
            environment.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of a provisioned resource of this Amazon DataZone
            environment.
      required:
      - value
      - type
      description: The details of a provisioned resource of this Amazon DataZone environment.
    ResourceList:
      type: array
      items:
        $ref: '#/components/schemas/Resource'
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: The specified resource cannot be found.
    Revision:
      type: string
      minLength: 1
      maxLength: 64
    RevisionInput:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 64
    RevokeSubscriptionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain where you want
            to revoke a subscription.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The identifier of the revoked subscription.
        retainPermissions:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether permissions are retained when the subscription
            is revoked.
      required:
      - domainIdentifier
      - identifier
    RevokeSubscriptionOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The identifier of the revoked subscription.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The identifier of the user who revoked the subscription.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who revoked the subscription.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain where you want
            to revoke a subscription.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionStatus'
          description: The status of the revoked subscription.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription was revoked.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription was revoked.
        subscribedPrincipal:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipal'
          description: The subscribed principal of the revoked subscription.
        subscribedListing:
          allOf:
          - $ref: '#/components/schemas/SubscribedListing'
          description: The subscribed listing of the revoked subscription.
        subscriptionRequestId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request for the revoked
            subscription.
        retainPermissions:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether permissions are retained when the subscription
            is revoked.
      required:
      - id
      - createdBy
      - domainId
      - status
      - createdAt
      - updatedAt
      - subscribedPrincipal
      - subscribedListing
    RoleArn:
      type: string
      pattern: ^arn:aws[^:]*:iam::\d{12}:(role|role/service-role)/[\w+=,.@-]*$
    RowFilter:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/RowFilterExpression'
        description: |-
          The expression of the row filter.
      - allOf:
        - $ref: '#/components/schemas/RowFilterList'
        description: |-
          The 'and' clause of the row filter.
      - allOf:
        - $ref: '#/components/schemas/RowFilterList'
        description: |-
          The 'or' clause of the row filter.
      description: |-
        The row filter.
    RowFilterConfiguration:
      type: object
      properties:
        rowFilter:
          allOf:
          - $ref: '#/components/schemas/RowFilter'
          description: The row filter.
        sensitive:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the row filter is sensitive.
      required:
      - rowFilter
      description: The row filter configuration details.
    RowFilterExpression:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/EqualToExpression'
        description: |-
          The 'equal to' clause of the row filter expression.
      - allOf:
        - $ref: '#/components/schemas/NotEqualToExpression'
        description: |-
          The 'no equal to' clause of the row filter expression.
      - allOf:
        - $ref: '#/components/schemas/GreaterThanExpression'
        description: |-
          The 'greater than' clause of the row filter expression.
      - allOf:
        - $ref: '#/components/schemas/LessThanExpression'
        description: |-
          The 'less than' clause of the row filter expression.
      - allOf:
        - $ref: '#/components/schemas/GreaterThanOrEqualToExpression'
        description: |-
          The 'greater than or equal to' clause of the filter expression.
      - allOf:
        - $ref: '#/components/schemas/LessThanOrEqualToExpression'
        description: |-
          The 'less than or equal to' clause of the row filter expression.
      - allOf:
        - $ref: '#/components/schemas/IsNullExpression'
        description: |-
          The 'is null' clause of the row filter expression.
      - allOf:
        - $ref: '#/components/schemas/IsNotNullExpression'
        description: |-
          The 'is not null' clause of the row filter expression.
      - allOf:
        - $ref: '#/components/schemas/InExpression'
        description: |-
          The 'in' clause of the row filter expression.
      - allOf:
        - $ref: '#/components/schemas/NotInExpression'
        description: |-
          The 'not in' clause of the row filter expression.
      - allOf:
        - $ref: '#/components/schemas/LikeExpression'
        description: |-
          The 'like' clause of the row filter expression.
      - allOf:
        - $ref: '#/components/schemas/NotLikeExpression'
        description: |-
          The 'not like' clause of the row filter expression.
      description: |-
        The row filter expression.
    RowFilterList:
      type: array
      items:
        $ref: '#/components/schemas/RowFilter'
    RuleAction:
      type: string
      enum:
      - CREATE_LISTING_CHANGE_SET
      - CREATE_SUBSCRIPTION_REQUEST
    RuleAssetTypeList:
      type: array
      items:
        $ref: '#/components/schemas/AssetTypeIdentifier'
    RuleDetail:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/MetadataFormEnforcementDetail'
        description: |-
          The enforcement detail of the metadata form.
      description: |-
        The details of a rule.
    RuleId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    RuleName:
      type: string
      pattern: ^[\w -]+$
      minLength: 1
      maxLength: 256
    RuleProjectIdentifierList:
      type: array
      items:
        $ref: '#/components/schemas/ProjectId'
    RuleScope:
      type: object
      properties:
        assetType:
          allOf:
          - $ref: '#/components/schemas/AssetTypesForRule'
          description: The asset type included in the rule scope.
        dataProduct:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The data product included in the rule scope.
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectsForRule'
          description: The project included in the rule scope.
      description: The scope of a rule.
    RuleScopeSelectionMode:
      type: string
      enum:
      - ALL
      - SPECIFIC
    RuleSummaries:
      type: array
      items:
        $ref: '#/components/schemas/RuleSummary'
    RuleSummary:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the rule.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the rule.
        ruleType:
          allOf:
          - $ref: '#/components/schemas/RuleType'
          description: The type of the rule.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the rule.
        targetType:
          allOf:
          - $ref: '#/components/schemas/RuleTargetType'
          description: The target type of the rule.
        target:
          allOf:
          - $ref: '#/components/schemas/RuleTarget'
          description: The target of the rule.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action of the rule.
        scope:
          allOf:
          - $ref: '#/components/schemas/RuleScope'
          description: The scope of the rule.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp at which the rule was last updated.
        lastUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The timestamp at which the rule was last updated.
      description: The summary of the rule.
    RuleTarget:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/DomainUnitTarget'
        description: |-
          The ID of the domain unit.
      description: |-
        The target of the rule.
    RuleTargetType:
      type: string
      enum:
      - DOMAIN_UNIT
    RuleType:
      type: string
      enum:
      - METADATA_FORM_ENFORCEMENT
    RunIdentifier:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    RunStatisticsForAssets:
      type: object
      properties:
        added:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The `added` statistic for the data source run.
        updated:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The `updated` statistic for the data source run.
        unchanged:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The `unchanged` statistic for the data source run.
        skipped:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The `skipped` statistic for the data source run.
        failed:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The `failed` statistic for the data source run.
      description: The asset statistics from the data source run.
    S3Location:
      type: string
      pattern: ^s3://.+$
      minLength: 1
      maxLength: 1024
    S3LocationList:
      type: array
      items:
        $ref: '#/components/schemas/S3Location'
    SageMakerAssetType:
      type: string
      minLength: 1
      maxLength: 64
    SageMakerResourceArn:
      type: string
      pattern: ^arn:aws[^:]*:sagemaker:[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]:\d{12}:[\w+=,.@-]{1,128}/[\w+=,.@-]{1,256}$
    SageMakerRunConfigurationInput:
      type: object
      properties:
        trackingAssets:
          allOf:
          - $ref: '#/components/schemas/TrackingAssets'
          description: The tracking assets of the Amazon SageMaker run.
      required:
      - trackingAssets
      description: The Amazon SageMaker run configuration.
    SageMakerRunConfigurationOutput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon SageMaker account ID.
        region:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon SageMaker Region.
        trackingAssets:
          allOf:
          - $ref: '#/components/schemas/TrackingAssets'
          description: The tracking assets of the Amazon SageMaker.
      required:
      - trackingAssets
      description: The Amazon SageMaker run configuration.
    ScheduleConfiguration:
      type: object
      properties:
        timezone:
          allOf:
          - $ref: '#/components/schemas/Timezone'
          description: The timezone of the data source run.
        schedule:
          allOf:
          - $ref: '#/components/schemas/CronString'
          description: The schedule of the data source runs.
      description: The details of the schedule of the data source runs.
    SearchGroupProfilesInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which you want
            to search group profiles.
        groupType:
          allOf:
          - $ref: '#/components/schemas/GroupSearchType'
          description: The group type for which to search.
        searchText:
          allOf:
          - $ref: '#/components/schemas/GroupSearchText'
          description: Specifies the text for which to search.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in a single call to
            `SearchGroupProfiles`. When the number of results to be listed is greater
            than the value of `MaxResults`, the response contains a `NextToken` value
            that you can use in a subsequent call to `SearchGroupProfiles` to list
            the next set of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of results is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of results, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `SearchGroupProfiles` to list the next set
            of results.
      required:
      - domainIdentifier
      - groupType
    SearchGroupProfilesOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/GroupProfileSummaries'
          description: The results of the `SearchGroupProfiles` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of results is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of results, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `SearchGroupProfiles` to list the next set
            of results.
    SearchInItem:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/Attribute'
          description: The search attribute.
      required:
      - attribute
      description: The details of the search.
    SearchInList:
      type: array
      items:
        $ref: '#/components/schemas/SearchInItem'
    SearchInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        owningProjectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the owning project specified for the search.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in a single call to
            `Search`. When the number of results to be listed is greater than the
            value of `MaxResults`, the response contains a `NextToken` value that
            you can use in a subsequent call to `Search` to list the next set of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of results is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of results, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `Search` to list the next set of results.
        searchScope:
          allOf:
          - $ref: '#/components/schemas/InventorySearchScope'
          description: The scope of the search.
        searchText:
          allOf:
          - $ref: '#/components/schemas/SearchText'
          description: Specifies the text for which to search.
        searchIn:
          allOf:
          - $ref: '#/components/schemas/SearchInList'
          description: The details of the search.
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterClause'
          description: Specifies the search filters.
        sort:
          allOf:
          - $ref: '#/components/schemas/SearchSort'
          description: Specifies the way in which the search results are to be sorted.
        additionalAttributes:
          allOf:
          - $ref: '#/components/schemas/SearchOutputAdditionalAttributes'
          description: Specifies additional attributes for the `Search` action.
      required:
      - domainIdentifier
      - searchScope
    SearchInventoryResultItem:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/GlossaryItem'
        description: |-
          The glossary item included in the search results.
      - allOf:
        - $ref: '#/components/schemas/GlossaryTermItem'
        description: |-
          The glossary term item included in the search results.
      - allOf:
        - $ref: '#/components/schemas/AssetItem'
        description: |-
          The asset item included in the search results.
      - allOf:
        - $ref: '#/components/schemas/DataProductResultItem'
        description: |-
          The data product.
      description: |-
        The details of the search results.
    SearchInventoryResultItems:
      type: array
      items:
        $ref: '#/components/schemas/SearchInventoryResultItem'
    SearchListingsInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the domain in which to search listings.
        searchText:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the text for which to search.
        searchIn:
          allOf:
          - $ref: '#/components/schemas/SearchInList'
          description: The details of the search.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in a single call to
            `SearchListings`. When the number of results to be listed is greater than
            the value of `MaxResults`, the response contains a `NextToken` value that
            you can use in a subsequent call to `SearchListings` to list the next
            set of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of results is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of results, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `SearchListings` to list the next set of
            results.
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterClause'
          description: Specifies the filters for the search of listings.
        sort:
          allOf:
          - $ref: '#/components/schemas/SearchSort'
          description: Specifies the way for sorting the search results.
        additionalAttributes:
          allOf:
          - $ref: '#/components/schemas/SearchOutputAdditionalAttributes'
          description: Specifies additional attributes for the search.
      required:
      - domainIdentifier
    SearchListingsOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/SearchResultItems'
          description: The results of the `SearchListings` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of results is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of results, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `SearchListings` to list the next set of
            results.
        totalMatchCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Total number of search results.
    SearchOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/SearchInventoryResultItems'
          description: The results of the `Search` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of results is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of results, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `Search` to list the next set of results.
        totalMatchCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Total number of search results.
    SearchOutputAdditionalAttribute:
      type: string
      enum:
      - FORMS
      - TIME_SERIES_DATA_POINT_FORMS
    SearchOutputAdditionalAttributes:
      type: array
      items:
        $ref: '#/components/schemas/SearchOutputAdditionalAttribute'
    SearchResultItem:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AssetListingItem'
        description: |-
          The asset listing included in the results of the `SearchListings` action.
      - allOf:
        - $ref: '#/components/schemas/DataProductListingItem'
        description: |-
          The data product listing.
      description: |-
        The details of the results of the `SearchListings` action.
    SearchResultItems:
      type: array
      items:
        $ref: '#/components/schemas/SearchResultItem'
    SearchSort:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/Attribute'
          description: The attribute detail of the way to sort search results.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order detail of the wya to sort search results.
      required:
      - attribute
      description: The details of the way to sort search results.
    SearchText:
      type: string
      minLength: 1
      maxLength: 4096
    SearchTypesInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which to invoke
            the `SearchTypes` action.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in a single call to
            `SearchTypes`. When the number of results to be listed is greater than
            the value of `MaxResults`, the response contains a `NextToken` value that
            you can use in a subsequent call to `SearchTypes` to list the next set
            of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of results is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of results, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `SearchTypes` to list the next set of results.
        searchScope:
          allOf:
          - $ref: '#/components/schemas/TypesSearchScope'
          description: Specifies the scope of the search for types.
        searchText:
          allOf:
          - $ref: '#/components/schemas/SearchText'
          description: Specifies the text for which to search.
        searchIn:
          allOf:
          - $ref: '#/components/schemas/SearchInList'
          description: The details of the search.
        filters:
          allOf:
          - $ref: '#/components/schemas/FilterClause'
          description: The filters for the `SearchTypes` action.
        sort:
          allOf:
          - $ref: '#/components/schemas/SearchSort'
          description: The specifies the way to sort the `SearchTypes` results.
        managed:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the search is managed.
      required:
      - domainIdentifier
      - searchScope
      - managed
    SearchTypesOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/SearchTypesResultItems'
          description: The results of the `SearchTypes` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of results is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of results, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `SearchTypes` to list the next set of results.
        totalMatchCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Total number of search results.
    SearchTypesResultItem:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AssetTypeItem'
        description: |-
          The asset type included in the results of the `SearchTypes` action.
      - allOf:
        - $ref: '#/components/schemas/FormTypeData'
        description: |-
          The form type included in the results of the `SearchTypes` action.
      - allOf:
        - $ref: '#/components/schemas/LineageNodeTypeItem'
        description: |-
          The details of a data lineage node type.
      description: |-
        The details of the results of the `SearchTypes` action.
    SearchTypesResultItems:
      type: array
      items:
        $ref: '#/components/schemas/SearchTypesResultItem'
    SearchUserProfilesInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which you want
            to search user profiles.
        userType:
          allOf:
          - $ref: '#/components/schemas/UserSearchType'
          description: Specifies the user type for the `SearchUserProfiles` action.
        searchText:
          allOf:
          - $ref: '#/components/schemas/UserSearchText'
          description: Specifies the text for which to search.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in a single call to
            `SearchUserProfiles`. When the number of results to be listed is greater
            than the value of `MaxResults`, the response contains a `NextToken` value
            that you can use in a subsequent call to `SearchUserProfiles` to list
            the next set of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of results is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of results, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `SearchUserProfiles` to list the next set
            of results.
      required:
      - domainIdentifier
      - userType
    SearchUserProfilesOutput:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/UserProfileSummaries'
          description: The results of the `SearchUserProfiles` action.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: When the number of results is greater than the default value
            for the `MaxResults` parameter, or if you explicitly specify a value for
            `MaxResults` that is less than the number of results, the response includes
            a pagination token named `NextToken`. You can specify this `NextToken`
            value in a subsequent call to `SearchUserProfiles` to list the next set
            of results.
    SecurityGroupIdList:
      type: array
      items:
        type: string
    SelfGrantStatus:
      type: string
      enum:
      - GRANT_PENDING
      - REVOKE_PENDING
      - GRANT_IN_PROGRESS
      - REVOKE_IN_PROGRESS
      - GRANTED
      - GRANT_FAILED
      - REVOKE_FAILED
    SelfGrantStatusDetail:
      type: object
      properties:
        databaseName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the database used for the data source.
        schemaName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the schema used in the data source.
        status:
          allOf:
          - $ref: '#/components/schemas/SelfGrantStatus'
          description: The self granting status of the data source.
        failureCause:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason for why the operation failed.
      required:
      - databaseName
      - status
      description: The details for the self granting status.
    SelfGrantStatusDetails:
      type: array
      items:
        $ref: '#/components/schemas/SelfGrantStatusDetail'
    SelfGrantStatusOutput:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/GlueSelfGrantStatusOutput'
        description: |-
          The details for the self granting status for a Glue data source.
      - allOf:
        - $ref: '#/components/schemas/RedshiftSelfGrantStatusOutput'
        description: |-
          The details for the self granting status for an Amazon Redshift data source.
      description: |-
        The details for the self granting status for a data source.
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: The request has exceeded the specified service quota.
    ShortDescription:
      type: string
      maxLength: 1024
    SingleSignOn:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: The type of single sign-on in Amazon DataZone.
        userAssignment:
          allOf:
          - $ref: '#/components/schemas/UserAssignment'
          description: The single sign-on user assignment in Amazon DataZone.
        idcInstanceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the IDC instance.
      description: The single sign-on details in Amazon DataZone.
    Smithy:
      type: string
      minLength: 1
      maxLength: 100000
    SortFieldConnection:
      type: string
      enum:
      - NAME
    SortFieldProject:
      type: string
      enum:
      - NAME
    SortKey:
      type: string
      enum:
      - CREATED_AT
      - UPDATED_AT
    SortOrder:
      type: string
      enum:
      - ASCENDING
      - DESCENDING
    SparkEmrPropertiesInput:
      type: object
      properties:
        computeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The compute ARN of Spark EMR.
        instanceProfileArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The instance profile ARN of Spark EMR.
        javaVirtualEnv:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The java virtual env of the Spark EMR.
        logUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The log URI of the Spark EMR.
        pythonVirtualEnv:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Python virtual env of the Spark EMR.
        runtimeRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The runtime role of the Spark EMR.
        trustedCertificatesS3Uri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The certificates S3 URI of the Spark EMR.
      description: The Spark EMR properties.
    SparkEmrPropertiesOutput:
      type: object
      properties:
        computeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The compute ARN of the Spark EMR.
        credentials:
          allOf:
          - $ref: '#/components/schemas/UsernamePassword'
          description: The credentials of the Spark EMR.
        credentialsExpiration:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The credential expiration of the Spark EMR.
        governanceType:
          allOf:
          - $ref: '#/components/schemas/GovernanceType'
          description: The governance type of the Spark EMR.
        instanceProfileArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The instance profile ARN of the Spark EMR.
        javaVirtualEnv:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Java virtual env of the Spark EMR.
        livyEndpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The livy endpoint of the Spark EMR.
        logUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The log URI of the Spark EMR.
        pythonVirtualEnv:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Python virtual env of the Spark EMR.
        runtimeRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The runtime role of the Spark EMR.
        trustedCertificatesS3Uri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The trusted certificate S3 URL of the Spark EMR.
      description: The Spark EMR properties.
    SparkEmrPropertiesPatch:
      type: object
      properties:
        computeArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The compute ARN in the Spark EMR properties patch.
        instanceProfileArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The instance profile ARN in the Spark EMR properties patch.
        javaVirtualEnv:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Java virtual evn in the Spark EMR properties patch.
        logUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The log URI in the Spark EMR properties patch.
        pythonVirtualEnv:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Python virtual env in the Spark EMR properties patch.
        runtimeRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The runtime role in the Spark EMR properties patch.
        trustedCertificatesS3Uri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The trusted certificates S3 URI in the Spark EMR properties
            patch.
      description: The Spark EMR properties patch.
    SparkGlueArgs:
      type: object
      properties:
        connection:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The connection in the Spark Amazon Web Services Glue args.
      description: The Spark Amazon Web Services Glue args.
    SparkGluePropertiesInput:
      type: object
      properties:
        additionalArgs:
          allOf:
          - $ref: '#/components/schemas/SparkGlueArgs'
          description: The additional args in the Spark Amazon Web Services Glue properties.
        glueConnectionName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Glue connection name in the Spark Amazon
            Web Services Glue properties.
        glueVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Glue version in the Spark Amazon Web
            Services Glue properties.
        idleTimeout:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The idle timeout in the Spark Amazon Web Services Glue properties.
        javaVirtualEnv:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Java virtual env in the Spark Amazon Web Services Glue
            properties.
        numberOfWorkers:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of workers in the Spark Amazon Web Services Glue
            properties.
        pythonVirtualEnv:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Python virtual env in the Spark Amazon Web Services Glue
            properties.
        workerType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The worker type in the Spark Amazon Web Services Glue properties.
      description: The Spark Amazon Web Services Glue properties.
    SparkGluePropertiesOutput:
      type: object
      properties:
        additionalArgs:
          allOf:
          - $ref: '#/components/schemas/SparkGlueArgs'
          description: The additional args in the Spark Amazon Web Services Glue properties.
        glueConnectionName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Glue connection name in the Spark Amazon
            Web Services Glue properties.
        glueVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Glue version in the Spark Amazon Web
            Services Glue properties.
        idleTimeout:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The idle timeout in the Spark Amazon Web Services Glue properties.
        javaVirtualEnv:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Java virtual env in the Spark Amazon Web Services Glue
            properties.
        numberOfWorkers:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of workers in the Spark Amazon Web Services Glue
            properties.
        pythonVirtualEnv:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Python virtual env in the Spark Amazon Web Services Glue
            properties.
        workerType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The worker type in the Spark Amazon Web Services Glue properties.
      description: The Spark Amazon Web Services Glue properties.
    SsoUserProfileDetails:
      type: object
      properties:
        username:
          allOf:
          - $ref: '#/components/schemas/UserProfileName'
          description: The username included in the single sign-on details of the
            user profile.
        firstName:
          allOf:
          - $ref: '#/components/schemas/FirstName'
          description: The first name included in the single sign-on details of the
            user profile.
        lastName:
          allOf:
          - $ref: '#/components/schemas/LastName'
          description: The last name included in the single sign-on details of the
            user profile.
      description: The single sign-on details of the user profile.
    StartDataSourceRunInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which to start
            a data source run.
        dataSourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The identifier of the data source.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - dataSourceIdentifier
    StartDataSourceRunOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which to start
            a data source run.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The identifier of the data source.
        id:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunId'
          description: The identifier of the data source run.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunStatus'
          description: The status of the data source run.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunType'
          description: The type of the data source run.
        dataSourceConfigurationSnapshot:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The configuration snapshot of the data source that is being
            run.
        runStatisticsForAssets:
          allOf:
          - $ref: '#/components/schemas/RunStatisticsForAssets'
          description: Specifies run statistics for assets.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorMessage'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when data source run was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source run was updated.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source run was started.
        stoppedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source run was stopped.
      required:
      - domainId
      - dataSourceId
      - id
      - projectId
      - status
      - type
      - createdAt
      - updatedAt
    StartMetadataGenerationRunInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where you want to start
            a metadata generation run.
        type:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunType'
          description: The type of the metadata generation run.
        target:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunTarget'
          description: The asset for which you want to start a metadata generation
            run.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure idempotency of
            the request. This field is automatically populated if not provided.
        owningProjectIdentifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project that owns the asset for which you want
            to start a metadata generation run.
      required:
      - domainIdentifier
      - type
      - target
      - owningProjectIdentifier
    StartMetadataGenerationRunOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain in which the metadata
            generation run was started.
        id:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunIdentifier'
          description: The ID of the metadata generation run.
        status:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunStatus'
          description: The status of the metadata generation run.
        type:
          allOf:
          - $ref: '#/components/schemas/MetadataGenerationRunType'
          description: The type of the metadata generation run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the metadata generation run was started.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The ID of the user who started the metadata generation run.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The ID of the project that owns the asset for which the metadata
            generation run was started.
      required:
      - domainId
      - id
    Status:
      type: string
      enum:
      - ENABLED
      - DISABLED
    StringList:
      type: array
      items:
        type: string
    SubnetId:
      type: string
      pattern: ^subnet-[a-z0-9]+$
      maxLength: 32
    SubnetIdList:
      type: array
      items:
        $ref: '#/components/schemas/SubnetId'
    SubscribedAsset:
      type: object
      properties:
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The identifier of the asset for which the subscription grant
            is created.
        assetRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the asset for which the subscription grant
            is created.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantStatus'
          description: The status of the asset for which the subscription grant is
            created.
        targetName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The target name of the asset for which the subscription grant
            is created.
        failureCause:
          allOf:
          - $ref: '#/components/schemas/FailureCause'
          description: The failure cause included in the details of the asset for
            which the subscription grant is created.
        grantedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the subscription grant to the asset is
            created.
        failureTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The failure timestamp included in the details of the asset
            for which the subscription grant is created.
        assetScope:
          allOf:
          - $ref: '#/components/schemas/AssetScope'
          description: The asset scope of the subscribed asset.
      required:
      - assetId
      - assetRevision
      - status
      description: The details of the asset for which the subscription grant is created.
    SubscribedAssetListing:
      type: object
      properties:
        entityId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The identifier of the published asset for which the subscription
            grant is created.
        entityRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the published asset for which the subscription
            grant is created.
        entityType:
          allOf:
          - $ref: '#/components/schemas/TypeName'
          description: The type of the published asset for which the subscription
            grant is created.
        forms:
          allOf:
          - $ref: '#/components/schemas/Forms'
          description: The forms attached to the published asset for which the subscription
            grant is created.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/DetailedGlossaryTerms'
          description: The glossary terms attached to the published asset for which
            the subscription grant is created.
        assetScope:
          allOf:
          - $ref: '#/components/schemas/AssetScope'
          description: The asset scope of the subscribed asset listing.
      description: The details of the published asset for which the subscription grant
        is created.
    SubscribedAssets:
      type: array
      items:
        $ref: '#/components/schemas/SubscribedAsset'
    SubscribedListing:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The identifier of the published asset for which the subscription
            grant is created.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the published asset for which the subscription
            grant is created.
        name:
          allOf:
          - $ref: '#/components/schemas/ListingName'
          description: The name of the published asset for which the subscription
            grant is created.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the published asset for which the subscription
            grant is created.
        item:
          allOf:
          - $ref: '#/components/schemas/SubscribedListingItem'
          description: The published asset for which the subscription grant is created.
        ownerProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project of the published asset for which
            the subscription grant is created.
        ownerProjectName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the project that owns the published asset for which
            the subscription grant is created.
      required:
      - id
      - name
      - description
      - item
      - ownerProjectId
      description: The details of the published asset for which the subscription grant
        is created.
    SubscribedListingInput:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/ListingId'
          description: The identifier of the published asset for which the subscription
            grant is to be created.
      required:
      - identifier
      description: The published asset for which the subscription grant is to be created.
    SubscribedListingInputs:
      type: array
      items:
        $ref: '#/components/schemas/SubscribedListingInput'
    SubscribedListingItem:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/SubscribedAssetListing'
        description: |-
          The asset for which the subscription grant is created.
      - allOf:
        - $ref: '#/components/schemas/SubscribedProductListing'
        description: |-
          The data product listing.
      description: |-
        The published asset for which the subscription grant is created.
    SubscribedListings:
      type: array
      items:
        $ref: '#/components/schemas/SubscribedListing'
    SubscribedPrincipal:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/SubscribedProject'
        description: |-
          The project that has the subscription grant.
      description: |-
        The principal that has the subscription grant for the asset.
    SubscribedPrincipalInput:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/SubscribedProjectInput'
        description: |-
          The project that is to be given a subscription grant.
      description: |-
        The principal that is to be given a subscriptiong grant.
    SubscribedPrincipalInputs:
      type: array
      items:
        $ref: '#/components/schemas/SubscribedPrincipalInput'
    SubscribedPrincipals:
      type: array
      items:
        $ref: '#/components/schemas/SubscribedPrincipal'
    SubscribedProductListing:
      type: object
      properties:
        entityId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the data product listing.
        entityRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the data product listing.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/DetailedGlossaryTerms'
          description: The glossary terms of the data product listing.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the data product listing.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the data product listing.
        assetListings:
          allOf:
          - $ref: '#/components/schemas/AssetInDataProductListingItems'
          description: The data assets of the data product listing.
      description: The data product listing.
    SubscribedProject:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project that has the subscription grant.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that has the subscription grant.
      description: The project that has the subscription grant.
    SubscribedProjectInput:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project that is to be given a subscription
            grant.
      description: The project that is to be given a subscription grant.
    SubscriptionGrantId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    SubscriptionGrantOverallStatus:
      type: string
      enum:
      - PENDING
      - IN_PROGRESS
      - GRANT_FAILED
      - REVOKE_FAILED
      - GRANT_AND_REVOKE_FAILED
      - COMPLETED
      - INACCESSIBLE
    SubscriptionGrantStatus:
      type: string
      enum:
      - GRANT_PENDING
      - REVOKE_PENDING
      - GRANT_IN_PROGRESS
      - REVOKE_IN_PROGRESS
      - GRANTED
      - REVOKED
      - GRANT_FAILED
      - REVOKE_FAILED
    SubscriptionGrantSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantId'
          description: The identifier of the subscription grant.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The datazone user who created the subscription grant.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription grant.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a subscription
            grant exists.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when a subscription grant was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestampf of when the subscription grant was updated.
        subscriptionTargetId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The identifier of the target of the subscription grant.
        grantedEntity:
          allOf:
          - $ref: '#/components/schemas/GrantedEntity'
          description: The entity to which the subscription is granted.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantOverallStatus'
          description: The status of the subscription grant.
        assets:
          allOf:
          - $ref: '#/components/schemas/SubscribedAssets'
          description: The assets included in the subscription grant.
        subscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The ID of the subscription.
      required:
      - id
      - createdBy
      - domainId
      - createdAt
      - updatedAt
      - subscriptionTargetId
      - grantedEntity
      - status
      description: The details of the subscription grant.
    SubscriptionGrants:
      type: array
      items:
        $ref: '#/components/schemas/SubscriptionGrantSummary'
    SubscriptionId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    SubscriptionRequestId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    SubscriptionRequestStatus:
      type: string
      enum:
      - PENDING
      - ACCEPTED
      - REJECTED
    SubscriptionRequestSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription request.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The identifier of the Amazon DataZone user who updated the
            subscription request.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a subscription
            request exists.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestStatus'
          description: The status of the subscription request.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when a subscription request was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription request was updated.
        requestReason:
          allOf:
          - $ref: '#/components/schemas/RequestReason'
          description: The reason for the subscription request.
        subscribedPrincipals:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipals'
          description: The principals included in the subscription request.
        subscribedListings:
          allOf:
          - $ref: '#/components/schemas/SubscribedListings'
          description: The listings included in the subscription request.
        reviewerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the subscription request reviewer.
        decisionComment:
          allOf:
          - $ref: '#/components/schemas/DecisionComment'
          description: The decision comment of the subscription request.
        existingSubscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The ID of the existing subscription.
        metadataFormsSummary:
          allOf:
          - $ref: '#/components/schemas/MetadataFormsSummary'
          description: The summary of the metadata forms.
      required:
      - id
      - createdBy
      - domainId
      - status
      - createdAt
      - updatedAt
      - requestReason
      - subscribedPrincipals
      - subscribedListings
      description: The details of the subscription request.
    SubscriptionRequests:
      type: array
      items:
        $ref: '#/components/schemas/SubscriptionRequestSummary'
    SubscriptionStatus:
      type: string
      enum:
      - APPROVED
      - REVOKED
      - CANCELLED
    SubscriptionSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The identifier of the subscription.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a subscription
            exists.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionStatus'
          description: The status of the subscription.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription was updated.
        subscribedPrincipal:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipal'
          description: The principal included in the subscription.
        subscribedListing:
          allOf:
          - $ref: '#/components/schemas/SubscribedListing'
          description: The listing included in the subscription.
        subscriptionRequestId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request for the subscription.
        retainPermissions:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The retain permissions included in the subscription.
      required:
      - id
      - createdBy
      - domainId
      - status
      - createdAt
      - updatedAt
      - subscribedPrincipal
      - subscribedListing
      description: The details of the subscription.
    SubscriptionTargetForm:
      type: object
      properties:
        formName:
          allOf:
          - $ref: '#/components/schemas/FormName'
          description: The form name included in the subscription target configuration.
        content:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content of the subscription target configuration.
      required:
      - formName
      - content
      description: The details of the subscription target configuration.
    SubscriptionTargetForms:
      type: array
      items:
        $ref: '#/components/schemas/SubscriptionTargetForm'
    SubscriptionTargetId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    SubscriptionTargetName:
      type: string
      minLength: 1
      maxLength: 256
    SubscriptionTargetSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The identifier of the subscription target.
        authorizedPrincipals:
          allOf:
          - $ref: '#/components/schemas/AuthorizedPrincipalIdentifiers'
          description: The authorized principals included in the subscription target.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the subscription
            target exists.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project specified in the subscription
            target.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The identifier of the environment of the subscription target.
        name:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetName'
          description: The name of the subscription target.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the subscription target.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription target.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription target.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription target was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription target was updated.
        manageAccessRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The manage access role specified in the subscription target.
        applicableAssetTypes:
          allOf:
          - $ref: '#/components/schemas/ApplicableAssetTypes'
          description: The asset types included in the subscription target.
        subscriptionTargetConfig:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetForms'
          description: The configuration of the subscription target.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of the subscription target.
      required:
      - id
      - authorizedPrincipals
      - domainId
      - projectId
      - environmentId
      - name
      - type
      - createdBy
      - createdAt
      - applicableAssetTypes
      - subscriptionTargetConfig
      - provider
      description: The details of the subscription target.
    SubscriptionTargets:
      type: array
      items:
        $ref: '#/components/schemas/SubscriptionTargetSummary'
    Subscriptions:
      type: array
      items:
        $ref: '#/components/schemas/SubscriptionSummary'
    TagKey:
      type: string
      pattern: ^[\w \.:/=+@-]+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the resource to be tagged in Amazon DataZone.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Specifies the tags for the `TagResource` action.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      pattern: ^[\w \.:/=+@-]*$
      maxLength: 256
    Tags:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TargetEntityType:
      type: string
      enum:
      - DOMAIN_UNIT
      - ENVIRONMENT_BLUEPRINT_CONFIGURATION
      - ENVIRONMENT_PROFILE
    TaskId:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    TaskStatus:
      type: string
      enum:
      - ACTIVE
      - INACTIVE
    TermRelations:
      type: object
      properties:
        isA:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The `isA` property of the term relations.
        classifies:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The classifies of the term relations.
      description: The details of the term relations.
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: The request was denied due to request throttling.
    TimeSeriesDataPointFormInput:
      type: object
      properties:
        formName:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesFormName'
          description: The name of the time series data points form.
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/FormTypeIdentifier'
          description: The ID of the type of the time series data points form.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision type of the time series data points form.
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the time series data points form.
        content:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content of the time series data points form.
      required:
      - formName
      - typeIdentifier
      - timestamp
      description: The time series data points form.
    TimeSeriesDataPointFormInputList:
      type: array
      items:
        $ref: '#/components/schemas/TimeSeriesDataPointFormInput'
    TimeSeriesDataPointFormOutput:
      type: object
      properties:
        formName:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesFormName'
          description: The name of the time series data points form.
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/FormTypeIdentifier'
          description: The ID of the type of the time series data points form.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision type of the time series data points form.
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the time series data points form.
        content:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content of the time series data points form.
        id:
          allOf:
          - $ref: '#/components/schemas/DataPointIdentifier'
          description: The ID of the time series data points form.
      required:
      - formName
      - typeIdentifier
      - timestamp
      description: The time series data points form.
    TimeSeriesDataPointFormOutputList:
      type: array
      items:
        $ref: '#/components/schemas/TimeSeriesDataPointFormOutput'
    TimeSeriesDataPointIdentifier:
      type: string
      pattern: ^[a-zA-Z0-9_-]{1,36}$
    TimeSeriesDataPointSummaryFormOutput:
      type: object
      properties:
        formName:
          allOf:
          - $ref: '#/components/schemas/TimeSeriesFormName'
          description: The name of the time series data points summary form.
        typeIdentifier:
          allOf:
          - $ref: '#/components/schemas/FormTypeIdentifier'
          description: The type ID of the time series data points summary form.
        typeRevision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The type revision of the time series data points summary form.
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the time series data points summary form.
        contentSummary:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content of the summary of the time series data points form.
        id:
          allOf:
          - $ref: '#/components/schemas/DataPointIdentifier'
          description: The ID of the time series data points summary form.
      required:
      - formName
      - typeIdentifier
      - timestamp
      description: The summary of the time series data points form.
    TimeSeriesDataPointSummaryFormOutputList:
      type: array
      items:
        $ref: '#/components/schemas/TimeSeriesDataPointSummaryFormOutput'
    TimeSeriesEntityType:
      type: string
      enum:
      - ASSET
      - LISTING
    TimeSeriesFormName:
      type: string
      minLength: 1
      maxLength: 128
    Timezone:
      type: string
      enum:
      - UTC
      - AFRICA_JOHANNESBURG
      - AMERICA_MONTREAL
      - AMERICA_SAO_PAULO
      - ASIA_BAHRAIN
      - ASIA_BANGKOK
      - ASIA_CALCUTTA
      - ASIA_DUBAI
      - ASIA_HONG_KONG
      - ASIA_JAKARTA
      - ASIA_KUALA_LUMPUR
      - ASIA_SEOUL
      - ASIA_SHANGHAI
      - ASIA_SINGAPORE
      - ASIA_TAIPEI
      - ASIA_TOKYO
      - AUSTRALIA_MELBOURNE
      - AUSTRALIA_SYDNEY
      - CANADA_CENTRAL
      - CET
      - CST6CDT
      - ETC_GMT
      - ETC_GMT0
      - ETC_GMT_ADD_0
      - ETC_GMT_ADD_1
      - ETC_GMT_ADD_10
      - ETC_GMT_ADD_11
      - ETC_GMT_ADD_12
      - ETC_GMT_ADD_2
      - ETC_GMT_ADD_3
      - ETC_GMT_ADD_4
      - ETC_GMT_ADD_5
      - ETC_GMT_ADD_6
      - ETC_GMT_ADD_7
      - ETC_GMT_ADD_8
      - ETC_GMT_ADD_9
      - ETC_GMT_NEG_0
      - ETC_GMT_NEG_1
      - ETC_GMT_NEG_10
      - ETC_GMT_NEG_11
      - ETC_GMT_NEG_12
      - ETC_GMT_NEG_13
      - ETC_GMT_NEG_14
      - ETC_GMT_NEG_2
      - ETC_GMT_NEG_3
      - ETC_GMT_NEG_4
      - ETC_GMT_NEG_5
      - ETC_GMT_NEG_6
      - ETC_GMT_NEG_7
      - ETC_GMT_NEG_8
      - ETC_GMT_NEG_9
      - EUROPE_DUBLIN
      - EUROPE_LONDON
      - EUROPE_PARIS
      - EUROPE_STOCKHOLM
      - EUROPE_ZURICH
      - ISRAEL
      - MEXICO_GENERAL
      - MST7MDT
      - PACIFIC_AUCKLAND
      - US_CENTRAL
      - US_EASTERN
      - US_MOUNTAIN
      - US_PACIFIC
    Title:
      type: string
      maxLength: 1000
    TokenUrlParametersMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    Topic:
      type: object
      properties:
        subject:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The subject of the resource mentioned in a notification.
        resource:
          $ref: '#/components/schemas/NotificationResource'
        role:
          allOf:
          - $ref: '#/components/schemas/NotificationRole'
          description: The role of the resource mentioned in a notification.
      required:
      - subject
      - resource
      - role
      description: The topic of the notification.
    TrackingAssetArns:
      type: array
      items:
        $ref: '#/components/schemas/SageMakerResourceArn'
    TrackingAssets:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TrackingAssetArns'
    TypeName:
      type: string
      pattern: ^[^\.]*
      minLength: 1
      maxLength: 256
    TypesSearchScope:
      type: string
      enum:
      - ASSET_TYPE
      - FORM_TYPE
      - LINEAGE_NODE_TYPE
    UnauthorizedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: You do not have permission to perform this action.
    Unit:
      type: object
      properties: {}
      description: The details of the policy of creating an environment.
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the resource to be untagged in Amazon DataZone.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: Specifies the tag keys for the `UntagResource` action.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateAssetFilterInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to update an asset filter.
        assetIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the data asset.
        identifier:
          allOf:
          - $ref: '#/components/schemas/FilterId'
          description: The ID of the asset filter.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the asset filter.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the asset filter.
        configuration:
          allOf:
          - $ref: '#/components/schemas/AssetFilterConfiguration'
          description: The configuration of the asset filter.
      required:
      - domainIdentifier
      - assetIdentifier
      - identifier
    UpdateAssetFilterOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/FilterId'
          description: The ID of the asset filter.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where the asset filter was created.
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the data asset.
        name:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          description: The name of the asset filter.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the asset filter.
        status:
          allOf:
          - $ref: '#/components/schemas/FilterStatus'
          description: The status of the asset filter.
        configuration:
          allOf:
          - $ref: '#/components/schemas/AssetFilterConfiguration'
          description: The configuration of the asset filter.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the asset filter was created.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message that is displayed if the action is not completed
            successfully.
        effectiveColumnNames:
          allOf:
          - $ref: '#/components/schemas/ColumnNameList'
          description: The column names of the asset filter.
        effectiveRowFilter:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The row filter of the asset filter.
      required:
      - id
      - domainId
      - assetId
      - name
      - configuration
    UpdateConnectionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where a connection is to be updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ConnectionId'
          description: The ID of the connection to be updated.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of a connection.
        awsLocation:
          allOf:
          - $ref: '#/components/schemas/AwsLocation'
          description: The location where a connection is to be updated.
        props:
          allOf:
          - $ref: '#/components/schemas/ConnectionPropertiesPatch'
          description: The connection props.
      required:
      - domainIdentifier
      - identifier
    UpdateConnectionOutput:
      type: object
      properties:
        connectionId:
          allOf:
          - $ref: '#/components/schemas/ConnectionId'
          description: The ID of the connection.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The connection description.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where a connection is to be updated.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit where a connection is to be updated.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The ID of the environment where a connection is to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/ConnectionName'
          description: The name of the connection.
        physicalEndpoints:
          allOf:
          - $ref: '#/components/schemas/PhysicalEndpoints'
          description: The physical endpoints of the connection.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The project ID of the connection.
        props:
          allOf:
          - $ref: '#/components/schemas/ConnectionPropertiesOutput'
          description: The connection props.
        type:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The connection type.
      required:
      - connectionId
      - domainId
      - domainUnitId
      - name
      - physicalEndpoints
      - type
    UpdateDataSourceInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the domain in which to update a data source.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The identifier of the data source to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name to be updated as part of the `UpdateDataSource` action.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description to be updated as part of the `UpdateDataSource`
            action.
        enableSetting:
          allOf:
          - $ref: '#/components/schemas/EnableSetting'
          description: The enable setting to be updated as part of the `UpdateDataSource`
            action.
        publishOnImport:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The publish on import setting to be updated as part of the
            `UpdateDataSource` action.
        assetFormsInput:
          allOf:
          - $ref: '#/components/schemas/FormInputList'
          description: The asset forms to be updated as part of the `UpdateDataSource`
            action.
        schedule:
          allOf:
          - $ref: '#/components/schemas/ScheduleConfiguration'
          description: The schedule to be updated as part of the `UpdateDataSource`
            action.
        configuration:
          allOf:
          - $ref: '#/components/schemas/DataSourceConfigurationInput'
          description: The configuration to be updated as part of the `UpdateDataSource`
            action.
        recommendation:
          allOf:
          - $ref: '#/components/schemas/RecommendationConfiguration'
          description: The recommendation to be updated as part of the `UpdateDataSource`
            action.
        retainPermissionsOnRevokeFailure:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies that the granted permissions are retained in case
            of a self-subscribe functionality failure for a data source.
      required:
      - domainIdentifier
      - identifier
    UpdateDataSourceOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DataSourceId'
          description: The identifier of the data source to be updated.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceStatus'
          description: The status to be updated as part of the `UpdateDataSource`
            action.
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceType'
          description: The type to be updated as part of the `UpdateDataSource` action.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name to be updated as part of the `UpdateDataSource` action.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description to be updated as part of the `UpdateDataSource`
            action.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a data
            source is to be updated.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project where data source is to be updated.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The identifier of the environment in which a data source is
            to be updated.
        connectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The connection ID.
        configuration:
          allOf:
          - $ref: '#/components/schemas/DataSourceConfigurationOutput'
          description: The configuration to be updated as part of the `UpdateDataSource`
            action.
        recommendation:
          allOf:
          - $ref: '#/components/schemas/RecommendationConfiguration'
          description: The recommendation to be updated as part of the `UpdateDataSource`
            action.
        enableSetting:
          allOf:
          - $ref: '#/components/schemas/EnableSetting'
          description: The enable setting to be updated as part of the `UpdateDataSource`
            action.
        publishOnImport:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The publish on import setting to be updated as part of the
            `UpdateDataSource` action.
        assetFormsOutput:
          allOf:
          - $ref: '#/components/schemas/FormOutputList'
          description: The asset forms to be updated as part of the `UpdateDataSource`
            action.
        schedule:
          allOf:
          - $ref: '#/components/schemas/ScheduleConfiguration'
          description: The schedule to be updated as part of the `UpdateDataSource`
            action.
        lastRunStatus:
          allOf:
          - $ref: '#/components/schemas/DataSourceRunStatus'
          description: The last run status of the data source.
        lastRunAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source was last run.
        lastRunErrorMessage:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorMessage'
          description: The last run error message of the data source.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/DataSourceErrorMessage'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source was updated.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The timestamp of when the data source was updated.
        selfGrantStatus:
          allOf:
          - $ref: '#/components/schemas/SelfGrantStatusOutput'
          description: Specifies the status of the self-granting functionality.
        retainPermissionsOnRevokeFailure:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies that the granted permissions are retained in case
            of a self-subscribe functionality failure for a data source.
      required:
      - id
      - name
      - domainId
      - projectId
    UpdateDomainInput:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon Web Services domain that is to be updated.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description to be updated as part of the `UpdateDomain`
            action.
        singleSignOn:
          allOf:
          - $ref: '#/components/schemas/SingleSignOn'
          description: The single sign-on option to be updated as part of the `UpdateDomain`
            action.
        domainExecutionRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The domain execution role to be updated as part of the `UpdateDomain`
            action.
        serviceRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The service role of the domain.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name to be updated as part of the `UpdateDomain` action.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - identifier
    UpdateDomainOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain.
        rootDomainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the root domain unit.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description to be updated as part of the `UpdateDomain`
            action.
        singleSignOn:
          allOf:
          - $ref: '#/components/schemas/SingleSignOn'
          description: The single sign-on option of the Amazon DataZone domain.
        domainExecutionRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The domain execution role to be updated as part of the `UpdateDomain`
            action.
        serviceRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The service role of the domain.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name to be updated as part of the `UpdateDomain` action.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: Specifies the timestamp of when the domain was last updated.
      required:
      - id
    UpdateDomainUnitInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to update a domain unit.
        identifier:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit that you want to update.
        description:
          allOf:
          - $ref: '#/components/schemas/DomainUnitDescription'
          description: The description of the domain unit that you want to update.
        name:
          allOf:
          - $ref: '#/components/schemas/DomainUnitName'
          description: The name of the domain unit that you want to update.
      required:
      - domainIdentifier
      - identifier
    UpdateDomainUnitOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit that you want to update.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where you want to update the domain unit.
        name:
          allOf:
          - $ref: '#/components/schemas/DomainUnitName'
          description: The name of the domain unit that you want to update.
        owners:
          allOf:
          - $ref: '#/components/schemas/DomainUnitOwners'
          description: The owners of the domain unit that you want to update.
        description:
          allOf:
          - $ref: '#/components/schemas/DomainUnitDescription'
          description: The description of the domain unit that you want to update.
        parentDomainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the parent domain unit.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The time stamp at which the domain unit that you want to update
            was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp at which the domain unit was last updated.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the domain unit that you want to update.
        lastUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The user who last updated the domain unit.
      required:
      - id
      - domainId
      - name
      - owners
    UpdateEnvironmentActionInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The domain ID of the environment action.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The environment ID of the environment action.
        identifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the environment action.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ActionParameters'
          description: The parameters of the environment action.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the environment action.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the environment action.
      required:
      - domainIdentifier
      - environmentIdentifier
      - identifier
    UpdateEnvironmentActionOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The domain ID of the environment action.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The environment ID of the environment action.
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentActionId'
          description: The ID of the environment action.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the environment action.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ActionParameters'
          description: The parameters of the environment action.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the environment action.
      required:
      - domainId
      - environmentId
      - id
      - name
      - parameters
    UpdateEnvironmentInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the domain in which the environment is to
            be updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The identifier of the environment that is to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name to be updated as part of the `UpdateEnvironment` action.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description to be updated as part of the `UpdateEnvironment`
            action.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms to be updated as part of the `UpdateEnvironment`
            action.
        blueprintVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The blueprint version to which the environment should be updated.
            You can only specify the following string for this parameter: `latest`.'
        userParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentParametersList'
          description: The user parameters of the environment.
      required:
      - domainIdentifier
      - identifier
    UpdateEnvironmentOutput:
      type: object
      properties:
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The project identifier of the environment.
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The identifier of the environment that is to be updated.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the domain in which the environment is to
            be updated.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon DataZone user who created the environment.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment was updated.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name to be updated as part of the `UpdateEnvironment` action.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description to be updated as part of the `UpdateEnvironment`
            action.
        environmentProfileId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The profile identifier of the environment.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The identifier of the Amazon Web Services account in which
            the environment is to be updated.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services Region in which the environment is
            updated.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider identifier of the environment.
        provisionedResources:
          allOf:
          - $ref: '#/components/schemas/ResourceList'
          description: The provisioned resources to be updated as part of the `UpdateEnvironment`
            action.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: The status to be updated as part of the `UpdateEnvironment`
            action.
        environmentActions:
          allOf:
          - $ref: '#/components/schemas/EnvironmentActionList'
          description: The environment actions to be updated as part of the `UpdateEnvironment`
            action.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms to be updated as part of the `UpdateEnvironment`
            action.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/CustomParameterList'
          description: The user parameters to be updated as part of the `UpdateEnvironment`
            action.
        lastDeployment:
          allOf:
          - $ref: '#/components/schemas/Deployment'
          description: The last deployment of the environment.
        provisioningProperties:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProperties'
          description: The provisioning properties to be updated as part of the `UpdateEnvironment`
            action.
        deploymentProperties:
          allOf:
          - $ref: '#/components/schemas/DeploymentProperties'
          description: The deployment properties to be updated as part of the `UpdateEnvironment`
            action.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The blueprint identifier of the environment.
        environmentConfigurationId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationId'
          description: The configuration ID of the environment.
      required:
      - projectId
      - domainId
      - createdBy
      - name
      - provider
    UpdateEnvironmentProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which an environment
            profile is to be updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The identifier of the environment profile that is to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileName'
          description: The name to be updated as part of the `UpdateEnvironmentProfile`
            action.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description to be updated as part of the `UpdateEnvironmentProfile`
            action.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentParametersList'
          description: The user parameters to be updated as part of the `UpdateEnvironmentProfile`
            action.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The Amazon Web Services account in which a specified environment
            profile is to be udpated.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services Region in which a specified environment
            profile is to be updated.
      required:
      - domainIdentifier
      - identifier
    UpdateEnvironmentProfileOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileId'
          description: The identifier of the environment profile that is to be udpated.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which the environment
            profile is to be updated.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The Amazon Web Services account in which a specified environment
            profile is to be udpated.
        awsAccountRegion:
          allOf:
          - $ref: '#/components/schemas/AwsRegion'
          description: The Amazon Web Services Region in which a specified environment
            profile is to be updated.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon DataZone user who created the environment profile.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment profile was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the environment profile was updated.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentProfileName'
          description: The name to be updated as part of the `UpdateEnvironmentProfile`
            action.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description to be updated as part of the `UpdateEnvironmentProfile`
            action.
        environmentBlueprintId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentBlueprintId'
          description: The identifier of the blueprint of the environment profile
            that is to be updated.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project of the environment profile that
            is to be updated.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/CustomParameterList'
          description: The user parameters to be updated as part of the `UpdateEnvironmentProfile`
            action.
      required:
      - id
      - domainId
      - createdBy
      - name
      - environmentBlueprintId
    UpdateGlossaryInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a business
            glossary is to be updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The identifier of the business glossary to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryName'
          description: The name to be updated as part of the `UpdateGlossary` action.
        description:
          allOf:
          - $ref: '#/components/schemas/GlossaryDescription'
          description: The description to be updated as part of the `UpdateGlossary`
            action.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryStatus'
          description: The status to be updated as part of the `UpdateGlossary` action.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that is provided to ensure
            the idempotency of the request.
      required:
      - domainIdentifier
      - identifier
    UpdateGlossaryOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a business
            glossary is to be updated.
        id:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The identifier of the business glossary that is to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryName'
          description: The name to be updated as part of the `UpdateGlossary` action.
        owningProjectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project in which to update a business
            glossary.
        description:
          allOf:
          - $ref: '#/components/schemas/GlossaryDescription'
          description: The description to be updated as part of the `UpdateGlossary`
            action.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryStatus'
          description: The status to be updated as part of the `UpdateGlossary` action.
      required:
      - domainId
      - id
      - name
      - owningProjectId
    UpdateGlossaryTermInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a business
            glossary term is to be updated.
        glossaryIdentifier:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermId'
          description: The identifier of the business glossary in which a term is
            to be updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermId'
          description: The identifier of the business glossary term that is to be
            updated.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermName'
          description: The name to be updated as part of the `UpdateGlossaryTerm`
            action.
        shortDescription:
          allOf:
          - $ref: '#/components/schemas/ShortDescription'
          description: The short description to be updated as part of the `UpdateGlossaryTerm`
            action.
        longDescription:
          allOf:
          - $ref: '#/components/schemas/LongDescription'
          description: The long description to be updated as part of the `UpdateGlossaryTerm`
            action.
        termRelations:
          allOf:
          - $ref: '#/components/schemas/TermRelations'
          description: The term relations to be updated as part of the `UpdateGlossaryTerm`
            action.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermStatus'
          description: The status to be updated as part of the `UpdateGlossaryTerm`
            action.
      required:
      - domainIdentifier
      - identifier
    UpdateGlossaryTermOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermId'
          description: The identifier of the business glossary term that is to be
            updated.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a business
            glossary term is to be updated.
        glossaryId:
          allOf:
          - $ref: '#/components/schemas/GlossaryId'
          description: The identifier of the business glossary in which a term is
            to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermName'
          description: The name to be updated as part of the `UpdateGlossaryTerm`
            action.
        status:
          allOf:
          - $ref: '#/components/schemas/GlossaryTermStatus'
          description: The status to be updated as part of the `UpdateGlossaryTerm`
            action.
        shortDescription:
          allOf:
          - $ref: '#/components/schemas/ShortDescription'
          description: The short description to be updated as part of the `UpdateGlossaryTerm`
            action.
        longDescription:
          allOf:
          - $ref: '#/components/schemas/LongDescription'
          description: The long description to be updated as part of the `UpdateGlossaryTerm`
            action.
        termRelations:
          allOf:
          - $ref: '#/components/schemas/TermRelations'
          description: The term relations to be updated as part of the `UpdateGlossaryTerm`
            action.
      required:
      - id
      - domainId
      - glossaryId
      - name
      - status
    UpdateGroupProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a group
            profile is updated.
        groupIdentifier:
          allOf:
          - $ref: '#/components/schemas/GroupIdentifier'
          description: The identifier of the group profile that is updated.
        status:
          allOf:
          - $ref: '#/components/schemas/GroupProfileStatus'
          description: The status of the group profile that is updated.
      required:
      - domainIdentifier
      - groupIdentifier
      - status
    UpdateGroupProfileOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a group
            profile is updated.
        id:
          allOf:
          - $ref: '#/components/schemas/GroupProfileId'
          description: The identifier of the group profile that is updated.
        status:
          allOf:
          - $ref: '#/components/schemas/GroupProfileStatus'
          description: The status of the group profile that is updated.
        groupName:
          allOf:
          - $ref: '#/components/schemas/GroupProfileName'
          description: The name of the group profile that is updated.
    UpdateProjectInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain where a project is being
            updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project that is to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name to be updated as part of the `UpdateProject` action.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description to be updated as part of the `UpdateProject`
            action.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms to be updated as part of the `UpdateProject`
            action.
        environmentDeploymentDetails:
          allOf:
          - $ref: '#/components/schemas/EnvironmentDeploymentDetails'
          description: The environment deployment details of the project.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationUserParametersList'
          description: The user parameters of the project.
        projectProfileVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The project profile version to which the project should be
            updated. You can only specify the following string for this parameter:
            `latest`.'
      required:
      - domainIdentifier
      - identifier
    UpdateProjectOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a project
            is updated.
        id:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project that is to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that is to be updated.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the project that is to be updated.
        projectStatus:
          allOf:
          - $ref: '#/components/schemas/ProjectStatus'
          description: The status of the project.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the project.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the project was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the project was last updated.
        glossaryTerms:
          allOf:
          - $ref: '#/components/schemas/GlossaryTerms'
          description: The glossary terms of the project that are to be updated.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit.
        projectProfileId:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: The ID of the project profile.
        userParameters:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationUserParametersList'
          description: The user parameters of the project.
        environmentDeploymentDetails:
          allOf:
          - $ref: '#/components/schemas/EnvironmentDeploymentDetails'
          description: The environment deployment details of the project.
      required:
      - domainId
      - id
      - name
      - createdBy
    UpdateProjectProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where a project profile is to be updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: The ID of a project profile that is to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileName'
          description: The name of a project profile.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of a project profile.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of a project profile.
        environmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationsList'
          description: The environment configurations of a project profile.
        domainUnitIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The ID of the domain unit where a project profile is to be
            updated.
      required:
      - domainIdentifier
      - identifier
    UpdateProjectProfileOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain where project profile is to be updated.
        id:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileId'
          description: The ID of the project profile.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectProfileName'
          description: The name of the project profile.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of a project profile.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the project profile.
        environmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/EnvironmentConfigurationsList'
          description: The environment configurations of a project profile.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created a project profile.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which a project profile is created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which a project profile was last updated.
        domainUnitId:
          allOf:
          - $ref: '#/components/schemas/DomainUnitId'
          description: The domain unit ID of the project profile to be updated.
      required:
      - domainId
      - id
      - name
      - createdBy
    UpdateRuleInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the domain in which a rule is to be updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the rule that is to be updated
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the rule.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the rule.
        scope:
          allOf:
          - $ref: '#/components/schemas/RuleScope'
          description: The scrope of the rule.
        detail:
          allOf:
          - $ref: '#/components/schemas/RuleDetail'
          description: The detail of the rule.
        includeChildDomainUnits:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to update this rule in the child domain units.
      required:
      - domainIdentifier
      - identifier
    UpdateRuleOutput:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the rule.
        revision:
          allOf:
          - $ref: '#/components/schemas/Revision'
          description: The revision of the rule.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the rule.
        ruleType:
          allOf:
          - $ref: '#/components/schemas/RuleType'
          description: The type of the rule.
        target:
          allOf:
          - $ref: '#/components/schemas/RuleTarget'
          description: The target of the rule.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action of the rule.
        scope:
          allOf:
          - $ref: '#/components/schemas/RuleScope'
          description: The scope of the rule.
        detail:
          allOf:
          - $ref: '#/components/schemas/RuleDetail'
          description: The detail of the rule.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the rule.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp at which the rule was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp at which the rule was last updated.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The user who created the rule.
        lastUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The timestamp at which the rule was last updated.
      required:
      - identifier
      - revision
      - name
      - ruleType
      - target
      - action
      - scope
      - detail
      - createdAt
      - updatedAt
      - createdBy
      - lastUpdatedBy
    UpdateSubscriptionGrantStatusInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a subscription
            grant status is to be updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantId'
          description: The identifier of the subscription grant the status of which
            is to be updated.
        assetIdentifier:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The identifier of the asset the subscription grant status of
            which is to be updated.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantStatus'
          description: The status to be updated as part of the `UpdateSubscriptionGrantStatus`
            action.
        failureCause:
          allOf:
          - $ref: '#/components/schemas/FailureCause'
          description: Specifies the error message that is returned if the operation
            cannot be successfully completed.
        targetName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The target name to be updated as part of the `UpdateSubscriptionGrantStatus`
            action.
      required:
      - domainIdentifier
      - identifier
      - assetIdentifier
      - status
    UpdateSubscriptionGrantStatusOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantId'
          description: The identifier of the subscription grant.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone domain user who created the subscription
            grant status.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription grant
            status.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a subscription
            grant status is to be updated.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription grant status was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription grant status is to be
            updated.
        subscriptionTargetId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: The identifier of the subscription target whose subscription
            grant status is to be updated.
        grantedEntity:
          allOf:
          - $ref: '#/components/schemas/GrantedEntity'
          description: The granted entity to be updated as part of the `UpdateSubscriptionGrantStatus`
            action.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionGrantOverallStatus'
          description: The status to be updated as part of the `UpdateSubscriptionGrantStatus`
            action.
        assets:
          allOf:
          - $ref: '#/components/schemas/SubscribedAssets'
          description: The details of the asset for which the subscription grant is
            created.
        subscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The identifier of the subscription.
      required:
      - id
      - createdBy
      - domainId
      - createdAt
      - updatedAt
      - subscriptionTargetId
      - grantedEntity
      - status
    UpdateSubscriptionRequestInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a subscription
            request is to be updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request that is to be updated.
        requestReason:
          allOf:
          - $ref: '#/components/schemas/RequestReason'
          description: The reason for the `UpdateSubscriptionRequest` action.
      required:
      - domainIdentifier
      - identifier
      - requestReason
    UpdateSubscriptionRequestOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestId'
          description: The identifier of the subscription request that is to be updated.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription request.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription request.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a subscription
            request is to be updated.
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriptionRequestStatus'
          description: The status of the subscription request.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when the subscription request was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription request was updated.
        requestReason:
          allOf:
          - $ref: '#/components/schemas/RequestReason'
          description: The reason for the `UpdateSubscriptionRequest` action.
        subscribedPrincipals:
          allOf:
          - $ref: '#/components/schemas/SubscribedPrincipals'
          description: The subscribed principals of the subscription request.
        subscribedListings:
          allOf:
          - $ref: '#/components/schemas/SubscribedListings'
          description: The subscribed listings of the subscription request.
        reviewerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Amazon DataZone user who reviews the
            subscription request.
        decisionComment:
          allOf:
          - $ref: '#/components/schemas/DecisionComment'
          description: The decision comment of the `UpdateSubscriptionRequest` action.
        existingSubscriptionId:
          allOf:
          - $ref: '#/components/schemas/SubscriptionId'
          description: The ID of the existing subscription.
        metadataForms:
          allOf:
          - $ref: '#/components/schemas/MetadataForms'
          description: Metadata forms included in the subscription request.
      required:
      - id
      - createdBy
      - domainId
      - status
      - createdAt
      - updatedAt
      - requestReason
      - subscribedPrincipals
      - subscribedListings
    UpdateSubscriptionTargetInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a subscription
            target is to be updated.
        environmentIdentifier:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The identifier of the environment in which a subscription target
            is to be updated.
        identifier:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: Identifier of the subscription target that is to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetName'
          description: The name to be updated as part of the `UpdateSubscriptionTarget`
            action.
        authorizedPrincipals:
          allOf:
          - $ref: '#/components/schemas/AuthorizedPrincipalIdentifiers'
          description: The authorized principals to be updated as part of the `UpdateSubscriptionTarget`
            action.
        applicableAssetTypes:
          allOf:
          - $ref: '#/components/schemas/ApplicableAssetTypes'
          description: The applicable asset types to be updated as part of the `UpdateSubscriptionTarget`
            action.
        subscriptionTargetConfig:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetForms'
          description: The configuration to be updated as part of the `UpdateSubscriptionTarget`
            action.
        manageAccessRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The manage access role to be updated as part of the `UpdateSubscriptionTarget`
            action.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider to be updated as part of the `UpdateSubscriptionTarget`
            action.
      required:
      - domainIdentifier
      - environmentIdentifier
      - identifier
    UpdateSubscriptionTargetOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetId'
          description: Identifier of the subscription target that is to be updated.
        authorizedPrincipals:
          allOf:
          - $ref: '#/components/schemas/AuthorizedPrincipalIdentifiers'
          description: The authorized principals to be updated as part of the `UpdateSubscriptionTarget`
            action.
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a subscription
            target is to be updated.
        projectId:
          allOf:
          - $ref: '#/components/schemas/ProjectId'
          description: The identifier of the project in which a subscription target
            is to be updated.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: The identifier of the environment in which a subscription target
            is to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetName'
          description: The name to be updated as part of the `UpdateSubscriptionTarget`
            action.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type to be updated as part of the `UpdateSubscriptionTarget`
            action.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The Amazon DataZone user who created the subscription target.
        updatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: The Amazon DataZone user who updated the subscription target.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp of when a subscription target was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp of when the subscription target was updated.
        manageAccessRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The manage access role to be updated as part of the `UpdateSubscriptionTarget`
            action.
        applicableAssetTypes:
          allOf:
          - $ref: '#/components/schemas/ApplicableAssetTypes'
          description: The applicable asset types to be updated as part of the `UpdateSubscriptionTarget`
            action.
        subscriptionTargetConfig:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTargetForms'
          description: The configuration to be updated as part of the `UpdateSubscriptionTarget`
            action.
        provider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider to be updated as part of the `UpdateSubscriptionTarget`
            action.
      required:
      - id
      - authorizedPrincipals
      - domainId
      - projectId
      - environmentId
      - name
      - type
      - createdBy
      - createdAt
      - applicableAssetTypes
      - subscriptionTargetConfig
      - provider
    UpdateUserProfileInput:
      type: object
      properties:
        domainIdentifier:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a user
            profile is updated.
        userIdentifier:
          allOf:
          - $ref: '#/components/schemas/UserIdentifier'
          description: The identifier of the user whose user profile is to be updated.
        type:
          allOf:
          - $ref: '#/components/schemas/UserProfileType'
          description: The type of the user profile that are to be updated.
        status:
          allOf:
          - $ref: '#/components/schemas/UserProfileStatus'
          description: The status of the user profile that are to be updated.
      required:
      - domainIdentifier
      - userIdentifier
      - status
    UpdateUserProfileOutput:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The identifier of the Amazon DataZone domain in which a user
            profile is updated.
        id:
          allOf:
          - $ref: '#/components/schemas/UserProfileId'
          description: The identifier of the user profile.
        type:
          allOf:
          - $ref: '#/components/schemas/UserProfileType'
          description: The type of the user profile.
        status:
          allOf:
          - $ref: '#/components/schemas/UserProfileStatus'
          description: The status of the user profile.
        details:
          $ref: '#/components/schemas/UserProfileDetails'
    UpdatedAt:
      type: string
      format: date-time
    UpdatedBy:
      type: string
    UserAssignment:
      type: string
      enum:
      - AUTOMATIC
      - MANUAL
    UserDesignation:
      type: string
      enum:
      - PROJECT_OWNER
      - PROJECT_CONTRIBUTOR
      - PROJECT_CATALOG_VIEWER
      - PROJECT_CATALOG_CONSUMER
      - PROJECT_CATALOG_STEWARD
    UserDetails:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Amazon DataZone user.
      required:
      - userId
      description: The user details of a project member.
    UserIdentifier:
      type: string
      pattern: (^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$|^[a-zA-Z_0-9+=,.@-]+$|^arn:aws:iam::\d{12}:.+$)
    UserPolicyGrantPrincipal:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/UserIdentifier'
        description: |-
          The user ID of the user policy grant principal.
      - allOf:
        - $ref: '#/components/schemas/AllUsersGrantFilter'
        description: |-
          The all users grant filter of the user policy grant principal.
      description: |-
        The user policy grant principal.
    UserProfileDetails:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/IamUserProfileDetails'
        description: |-
          The IAM details included in the user profile details.
      - allOf:
        - $ref: '#/components/schemas/SsoUserProfileDetails'
        description: |-
          The single sign-on details included in the user profile details.
      description: |-
        The details of the user profile in Amazon DataZone.
    UserProfileId:
      type: string
      pattern: ^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$
    UserProfileName:
      type: string
      pattern: ^[a-zA-Z_0-9+=,.@-]+$
      minLength: 1
      maxLength: 1024
    UserProfileStatus:
      type: string
      enum:
      - ASSIGNED
      - NOT_ASSIGNED
      - ACTIVATED
      - DEACTIVATED
    UserProfileSummaries:
      type: array
      items:
        $ref: '#/components/schemas/UserProfileSummary'
    UserProfileSummary:
      type: object
      properties:
        domainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The ID of the Amazon DataZone domain of the user profile.
        id:
          allOf:
          - $ref: '#/components/schemas/UserProfileId'
          description: The ID of the user profile.
        type:
          allOf:
          - $ref: '#/components/schemas/UserProfileType'
          description: The type of the user profile.
        status:
          allOf:
          - $ref: '#/components/schemas/UserProfileStatus'
          description: The status of the user profile.
        details:
          allOf:
          - $ref: '#/components/schemas/UserProfileDetails'
          description: The details of the user profile.
      description: The details of the user profile.
    UserProfileType:
      type: string
      enum:
      - IAM
      - SSO
    UserSearchText:
      type: string
      minLength: 0
      maxLength: 1024
    UserSearchType:
      type: string
      enum:
      - SSO_USER
      - DATAZONE_USER
      - DATAZONE_SSO_USER
      - DATAZONE_IAM_USER
    UserType:
      type: string
      enum:
      - IAM_USER
      - IAM_ROLE
      - SSO_USER
    Username:
      type: string
      maxLength: 64
    UsernamePassword:
      type: object
      properties:
        password:
          allOf:
          - $ref: '#/components/schemas/Password'
          description: The password of a connection.
        username:
          allOf:
          - $ref: '#/components/schemas/Username'
          description: The username of a connection.
      required:
      - password
      - username
      description: The username and password of a connection.
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: The input fails to satisfy the constraints specified by the Amazon
        Web Services service.
