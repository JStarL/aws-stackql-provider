openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: cleanroomsml
  x-aws-serviceName: cleanroomsml
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2023-09-06'
  title: AWS Clean Rooms ML
  description: |-
    Welcome to the _Amazon Web Services Clean Rooms ML API Reference_.

    Amazon Web Services Clean Rooms ML provides a privacy-enhancing method for two parties to identify similar users in their data without the need to share their data with each other. The first party brings the training data to Clean Rooms so that they can create and configure an audience model (lookalike model) and associate it with a collaboration. The second party then brings their seed data to Clean Rooms and generates an audience (lookalike segment) that resembles the training data.

    To learn more about Amazon Web Services Clean Rooms ML concepts, procedures, and best practices, see the [Clean Rooms User Guide](https://docs.aws.amazon.com/clean-rooms/latest/userguide/machine-learning.html).

    To learn more about SQL commands, functions, and conditions supported in Clean Rooms, see the [Clean Rooms SQL Reference](https://docs.aws.amazon.com/clean-rooms/latest/sql-reference/sql-reference.html).
servers:
- description: The AWS Clean Rooms ML regional endpoint
  url: https://cleanrooms-ml.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /memberships/{membershipIdentifier}/trained-models/{trainedModelArn}:
    patch:
      operationId: CancelTrainedModel
      description: |-
        Submits a request to cancel the trained model job.
      parameters:
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      - name: trainedModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TrainedModelArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteTrainedModelOutput
      description: |-
        Deletes the output of a trained model.
      parameters:
      - name: trainedModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TrainedModelArn'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetTrainedModel
      description: |-
        Returns information about a trained model.
      parameters:
      - name: trainedModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TrainedModelArn'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /memberships/{membershipIdentifier}/trained-model-inference-jobs/{trainedModelInferenceJobArn}:
    patch:
      operationId: CancelTrainedModelInferenceJob
      description: |-
        Submits a request to cancel a trained model inference job.
      parameters:
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      - name: trainedModelInferenceJobArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TrainedModelInferenceJobArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetTrainedModelInferenceJob
      description: |-
        Returns information about a trained model inference job.
      parameters:
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      - name: trainedModelInferenceJobArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TrainedModelInferenceJobArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /audience-model:
    post:
      operationId: CreateAudienceModel
      description: |-
        Defines the information necessary to create an audience model. An audience model is a machine learning model that Clean Rooms ML trains to measure similarity between users. Clean Rooms ML manages training and storing the audience model. The audience model can be used in multiple calls to the StartAudienceGenerationJob API.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trainingDataStartTime:
                  $ref: '#/components/schemas/Timestamp'
                trainingDataEndTime:
                  $ref: '#/components/schemas/Timestamp'
                name:
                  $ref: '#/components/schemas/NameString'
                trainingDatasetArn:
                  $ref: '#/components/schemas/TrainingDatasetArn'
                kmsKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                tags:
                  $ref: '#/components/schemas/TagMap'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have exceeded your service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListAudienceModels
      description: |-
        Returns a list of audience models.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /configured-audience-model:
    post:
      operationId: CreateConfiguredAudienceModel
      description: |-
        Defines the information necessary to create a configured audience model.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NameString'
                audienceModelArn:
                  $ref: '#/components/schemas/AudienceModelArn'
                outputConfig:
                  $ref: '#/components/schemas/ConfiguredAudienceModelOutputConfig'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
                sharedAudienceMetrics:
                  $ref: '#/components/schemas/MetricsList'
                minMatchingSeedSize:
                  $ref: '#/components/schemas/MinMatchingSeedSize'
                audienceSizeConfig:
                  $ref: '#/components/schemas/AudienceSizeConfig'
                tags:
                  $ref: '#/components/schemas/TagMap'
                childResourceTagOnCreatePolicy:
                  $ref: '#/components/schemas/TagOnCreatePolicy'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have exceeded your service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListConfiguredAudienceModels
      description: |-
        Returns a list of the configured audience models.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /configured-model-algorithms:
    post:
      operationId: CreateConfiguredModelAlgorithm
      description: |-
        Creates a configured model algorithm using a container image stored in an ECR repository.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NameString'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
                roleArn:
                  $ref: '#/components/schemas/IamRoleArn'
                trainingContainerConfig:
                  $ref: '#/components/schemas/ContainerConfig'
                inferenceContainerConfig:
                  $ref: '#/components/schemas/InferenceContainerConfig'
                tags:
                  $ref: '#/components/schemas/TagMap'
                kmsKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '402':
          description: |-
            You have exceeded your service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListConfiguredModelAlgorithms
      description: |-
        Returns a list of configured model algorithms.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /memberships/{membershipIdentifier}/configured-model-algorithm-associations:
    post:
      operationId: CreateConfiguredModelAlgorithmAssociation
      description: |-
        Associates a configured model algorithm to a collaboration for use by any member of the collaboration.
      parameters:
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                configuredModelAlgorithmArn:
                  $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
                name:
                  $ref: '#/components/schemas/NameString'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
                privacyConfiguration:
                  $ref: '#/components/schemas/PrivacyConfiguration'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have exceeded your service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListConfiguredModelAlgorithmAssociations
      description: |-
        Returns a list of configured model algorithm associations.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /memberships/{membershipIdentifier}/ml-input-channels:
    post:
      operationId: CreateMLInputChannel
      description: |-
        Provides the information to create an ML input channel. An ML input channel is the result of a query that can be used for ML modeling.
      parameters:
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                configuredModelAlgorithmAssociations:
                  $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArnList'
                inputChannel:
                  $ref: '#/components/schemas/InputChannel'
                name:
                  $ref: '#/components/schemas/NameString'
                retentionInDays:
                  $ref: '#/components/schemas/Integer'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
                kmsKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have exceeded your service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListMLInputChannels
      description: |-
        Returns a list of ML input channels.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /memberships/{membershipIdentifier}/trained-models:
    post:
      operationId: CreateTrainedModel
      description: |-
        Creates a trained model from an associated configured model algorithm using data from any member of the collaboration.
      parameters:
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NameString'
                configuredModelAlgorithmAssociationArn:
                  $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
                hyperparameters:
                  $ref: '#/components/schemas/HyperParameters'
                environment:
                  $ref: '#/components/schemas/Environment'
                resourceConfig:
                  $ref: '#/components/schemas/ResourceConfig'
                stoppingCondition:
                  $ref: '#/components/schemas/StoppingCondition'
                dataChannels:
                  $ref: '#/components/schemas/ModelTrainingDataChannels'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
                kmsKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have exceeded your service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListTrainedModels
      description: |-
        Returns a list of trained models.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /training-dataset:
    post:
      operationId: CreateTrainingDataset
      description: |-
        Defines the information necessary to create a training dataset. In Clean Rooms ML, the `TrainingDataset` is metadata that points to a Glue table, which is read only during `AudienceModel` creation.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NameString'
                roleArn:
                  $ref: '#/components/schemas/IamRoleArn'
                trainingData:
                  $ref: '#/components/schemas/DatasetList'
                tags:
                  $ref: '#/components/schemas/TagMap'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListTrainingDatasets
      description: |-
        Returns a list of training datasets.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /audience-generation-job/{audienceGenerationJobArn}:
    delete:
      operationId: DeleteAudienceGenerationJob
      description: |-
        Deletes the specified audience generation job, and removes all data associated with the job.
      parameters:
      - name: audienceGenerationJobArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AudienceGenerationJobArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAudienceGenerationJob
      description: |-
        Returns information about an audience generation job.
      parameters:
      - name: audienceGenerationJobArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AudienceGenerationJobArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /audience-model/{audienceModelArn}:
    delete:
      operationId: DeleteAudienceModel
      description: |-
        Specifies an audience model that you want to delete. You can't delete an audience model if there are any configured audience models that depend on the audience model.
      parameters:
      - name: audienceModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AudienceModelArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAudienceModel
      description: |-
        Returns information about an audience model
      parameters:
      - name: audienceModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AudienceModelArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /configured-audience-model/{configuredAudienceModelArn}:
    delete:
      operationId: DeleteConfiguredAudienceModel
      description: |-
        Deletes the specified configured audience model. You can't delete a configured audience model if there are any lookalike models that use the configured audience model. If you delete a configured audience model, it will be removed from any collaborations that it is associated to.
      parameters:
      - name: configuredAudienceModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredAudienceModelArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetConfiguredAudienceModel
      description: |-
        Returns information about a specified configured audience model.
      parameters:
      - name: configuredAudienceModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredAudienceModelArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateConfiguredAudienceModel
      description: |-
        Provides the information necessary to update a configured audience model. Updates that impact audience generation jobs take effect when a new job starts, but do not impact currently running jobs.
      parameters:
      - name: configuredAudienceModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredAudienceModelArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                outputConfig:
                  $ref: '#/components/schemas/ConfiguredAudienceModelOutputConfig'
                audienceModelArn:
                  $ref: '#/components/schemas/AudienceModelArn'
                sharedAudienceMetrics:
                  $ref: '#/components/schemas/MetricsList'
                minMatchingSeedSize:
                  $ref: '#/components/schemas/MinMatchingSeedSize'
                audienceSizeConfig:
                  $ref: '#/components/schemas/AudienceSizeConfig'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /configured-audience-model/{configuredAudienceModelArn}/policy:
    delete:
      operationId: DeleteConfiguredAudienceModelPolicy
      description: |-
        Deletes the specified configured audience model policy.
      parameters:
      - name: configuredAudienceModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredAudienceModelArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetConfiguredAudienceModelPolicy
      description: |-
        Returns information about a configured audience model policy.
      parameters:
      - name: configuredAudienceModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredAudienceModelArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutConfiguredAudienceModelPolicy
      description: |-
        Create or update the resource policy for a configured audience model.
      parameters:
      - name: configuredAudienceModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredAudienceModelArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                configuredAudienceModelPolicy:
                  $ref: '#/components/schemas/ResourcePolicy'
                previousPolicyHash:
                  $ref: '#/components/schemas/Hash'
                policyExistenceCondition:
                  $ref: '#/components/schemas/PolicyExistenceCondition'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /configured-model-algorithms/{configuredModelAlgorithmArn}:
    delete:
      operationId: DeleteConfiguredModelAlgorithm
      description: |-
        Deletes a configured model algorithm.
      parameters:
      - name: configuredModelAlgorithmArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetConfiguredModelAlgorithm
      description: |-
        Returns information about a configured model algorithm.
      parameters:
      - name: configuredModelAlgorithmArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /memberships/{membershipIdentifier}/configured-model-algorithm-associations/{configuredModelAlgorithmAssociationArn}:
    delete:
      operationId: DeleteConfiguredModelAlgorithmAssociation
      description: |-
        Deletes a configured model algorithm association.
      parameters:
      - name: configuredModelAlgorithmAssociationArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetConfiguredModelAlgorithmAssociation
      description: |-
        Returns information about a configured model algorithm association.
      parameters:
      - name: configuredModelAlgorithmAssociationArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /memberships/{membershipIdentifier}/ml-configurations:
    delete:
      operationId: DeleteMLConfiguration
      description: |-
        Deletes a ML modeling configuration.
      parameters:
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetMLConfiguration
      description: |-
        Returns information about a specific ML configuration.
      parameters:
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutMLConfiguration
      description: |-
        Assigns information about an ML configuration.
      parameters:
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                defaultOutputLocation:
                  $ref: '#/components/schemas/MLOutputConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /memberships/{membershipIdentifier}/ml-input-channels/{mlInputChannelArn}:
    delete:
      operationId: DeleteMLInputChannelData
      description: |-
        Provides the information necessary to delete an ML input channel.
      parameters:
      - name: mlInputChannelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MLInputChannelArn'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetMLInputChannel
      description: |-
        Returns information about an ML input channel.
      parameters:
      - name: mlInputChannelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MLInputChannelArn'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /training-dataset/{trainingDatasetArn}:
    delete:
      operationId: DeleteTrainingDataset
      description: |-
        Specifies a training dataset that you want to delete. You can't delete a training dataset if there are any audience models that depend on the training dataset. In Clean Rooms ML, the `TrainingDataset` is metadata that points to a Glue table, which is read only during `AudienceModel` creation. This action deletes the metadata.
      parameters:
      - name: trainingDatasetArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TrainingDatasetArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetTrainingDataset
      description: |-
        Returns information about a training dataset.
      parameters:
      - name: trainingDatasetArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TrainingDatasetArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /collaborations/{collaborationIdentifier}/configured-model-algorithm-associations/{configuredModelAlgorithmAssociationArn}:
    get:
      operationId: GetCollaborationConfiguredModelAlgorithmAssociation
      description: |-
        Returns information about the configured model algorithm association in a collaboration.
      parameters:
      - name: configuredModelAlgorithmAssociationArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
      - name: collaborationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /collaborations/{collaborationIdentifier}/ml-input-channels/{mlInputChannelArn}:
    get:
      operationId: GetCollaborationMLInputChannel
      description: |-
        Returns information about a specific ML input channel in a collaboration.
      parameters:
      - name: mlInputChannelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MLInputChannelArn'
      - name: collaborationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /collaborations/{collaborationIdentifier}/trained-models/{trainedModelArn}:
    get:
      operationId: GetCollaborationTrainedModel
      description: |-
        Returns information about a trained model in a collaboration.
      parameters:
      - name: trainedModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TrainedModelArn'
      - name: collaborationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /audience-export-job:
    get:
      operationId: ListAudienceExportJobs
      description: |-
        Returns a list of the audience export jobs.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: audienceGenerationJobArn
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AudienceGenerationJobArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartAudienceExportJob
      description: |-
        Export an audience of a specified size after you have generated an audience.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NameString'
                audienceGenerationJobArn:
                  $ref: '#/components/schemas/AudienceGenerationJobArn'
                audienceSize:
                  $ref: '#/components/schemas/AudienceSize'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have exceeded your service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /audience-generation-job:
    get:
      operationId: ListAudienceGenerationJobs
      description: |-
        Returns a list of audience generation jobs.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: configuredAudienceModelArn
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ConfiguredAudienceModelArn'
      - name: collaborationId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartAudienceGenerationJob
      description: |-
        Information necessary to start the audience generation job.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NameString'
                configuredAudienceModelArn:
                  $ref: '#/components/schemas/ConfiguredAudienceModelArn'
                seedAudience:
                  $ref: '#/components/schemas/AudienceGenerationJobDataSource'
                includeSeedInOutput:
                  $ref: '#/components/schemas/Boolean'
                collaborationId:
                  $ref: '#/components/schemas/UUID'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have exceeded your service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /collaborations/{collaborationIdentifier}/configured-model-algorithm-associations:
    get:
      operationId: ListCollaborationConfiguredModelAlgorithmAssociations
      description: |-
        Returns a list of the configured model algorithm associations in a collaboration.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: collaborationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /collaborations/{collaborationIdentifier}/ml-input-channels:
    get:
      operationId: ListCollaborationMLInputChannels
      description: |-
        Returns a list of the ML input channels in a collaboration.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: collaborationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /collaborations/{collaborationIdentifier}/trained-models/{trainedModelArn}/export-jobs:
    get:
      operationId: ListCollaborationTrainedModelExportJobs
      description: |-
        Returns a list of the export jobs for a trained model in a collaboration.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: collaborationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      - name: trainedModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TrainedModelArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /collaborations/{collaborationIdentifier}/trained-model-inference-jobs:
    get:
      operationId: ListCollaborationTrainedModelInferenceJobs
      description: |-
        Returns a list of trained model inference jobs in a specified collaboration.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: collaborationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      - name: trainedModelArn
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/TrainedModelArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /collaborations/{collaborationIdentifier}/trained-models:
    get:
      operationId: ListCollaborationTrainedModels
      description: |-
        Returns a list of the trained models in a collaboration.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: collaborationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Returns a list of tags for a provided resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaggableArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Adds metadata tags to a specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaggableArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes metadata tags from a specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaggableArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeys'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /memberships/{membershipIdentifier}/trained-model-inference-jobs:
    get:
      operationId: ListTrainedModelInferenceJobs
      description: |-
        Returns a list of trained model inference jobs that match the request parameters.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      - name: trainedModelArn
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/TrainedModelArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartTrainedModelInferenceJob
      description: |-
        Defines the information necessary to begin a trained model inference job.
      parameters:
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NameString'
                trainedModelArn:
                  $ref: '#/components/schemas/TrainedModelArn'
                configuredModelAlgorithmAssociationArn:
                  $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
                resourceConfig:
                  $ref: '#/components/schemas/InferenceResourceConfig'
                outputConfiguration:
                  $ref: '#/components/schemas/InferenceOutputConfiguration'
                dataSource:
                  $ref: '#/components/schemas/ModelInferenceDataSource'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
                containerExecutionParameters:
                  $ref: '#/components/schemas/InferenceContainerExecutionParameters'
                environment:
                  $ref: '#/components/schemas/InferenceEnvironmentMap'
                kmsKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            You have exceeded your service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /memberships/{membershipIdentifier}/trained-models/{trainedModelArn}/export-jobs:
    post:
      operationId: StartTrainedModelExportJob
      description: |-
        Provides the information necessary to start a trained model export job.
      parameters:
      - name: trainedModelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TrainedModelArn'
      - name: membershipIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NameString'
                outputConfiguration:
                  $ref: '#/components/schemas/TrainedModelExportOutputConfiguration'
                description:
                  $ref: '#/components/schemas/ResourceDescription'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            You can't complete this action because another resource depends on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource you are requesting does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request parameters for this request are incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: You do not have sufficient access to perform this action.
    AccountId:
      type: string
      pattern: ^[0-9]{12}$
      minLength: 12
      maxLength: 12
    AccountIdList:
      type: array
      items:
        type: string
    AlgorithmImage:
      type: string
      pattern: ^.*$
      minLength: 1
      maxLength: 255
    AnalysisTemplateArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms:[\w]{2}-[\w]{4,9}-[\d]:[\d]{12}:membership/[\d\w-]+/analysistemplate/[\d\w-]+$
      minLength: 0
      maxLength: 200
    AudienceDestination:
      type: object
      properties:
        s3Destination:
          allOf:
          - $ref: '#/components/schemas/S3ConfigMap'
          description: The Amazon S3 bucket and path for the configured audience.
      required:
      - s3Destination
      description: Defines the Amazon S3 bucket where the configured audience is stored.
    AudienceExportJobArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:audience-export-job/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    AudienceExportJobList:
      type: array
      items:
        $ref: '#/components/schemas/AudienceExportJobSummary'
    AudienceExportJobStatus:
      type: string
      enum:
      - CREATE_PENDING
      - CREATE_IN_PROGRESS
      - CREATE_FAILED
      - ACTIVE
    AudienceExportJobSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the audience export job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the audience export job was updated.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the audience export job.
        audienceGenerationJobArn:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobArn'
          description: The Amazon Resource Name (ARN) of the audience generation job
            that was exported.
        audienceSize:
          $ref: '#/components/schemas/AudienceSize'
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the audience export job.
        status:
          allOf:
          - $ref: '#/components/schemas/AudienceExportJobStatus'
          description: The status of the audience export job.
        statusDetails:
          $ref: '#/components/schemas/StatusDetails'
        outputLocation:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: The Amazon S3 bucket where the audience export is stored.
      required:
      - createTime
      - updateTime
      - name
      - audienceGenerationJobArn
      - audienceSize
      - status
      description: Provides information about the audience export job.
    AudienceGenerationJobArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:audience-generation-job/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    AudienceGenerationJobDataSource:
      type: object
      properties:
        dataSource:
          allOf:
          - $ref: '#/components/schemas/S3ConfigMap'
          description: 'Defines the Amazon S3 bucket where the seed audience for the
            generating audience is stored. A valid data source is a JSON line file
            in the following format:


            `{"user_id": "111111"}`


            `{"user_id": "222222"}`


            `...`'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The ARN of the IAM role that can read the Amazon S3 bucket
            where the seed audience is stored.
        sqlParameters:
          allOf:
          - $ref: '#/components/schemas/ProtectedQuerySQLParameters'
          description: The protected SQL query parameters.
        sqlComputeConfiguration:
          $ref: '#/components/schemas/ComputeConfiguration'
      required:
      - roleArn
      description: Defines the Amazon S3 bucket where the seed audience for the generating
        audience is stored.
    AudienceGenerationJobList:
      type: array
      items:
        $ref: '#/components/schemas/AudienceGenerationJobSummary'
    AudienceGenerationJobStatus:
      type: string
      enum:
      - CREATE_PENDING
      - CREATE_IN_PROGRESS
      - CREATE_FAILED
      - ACTIVE
      - DELETE_PENDING
      - DELETE_IN_PROGRESS
      - DELETE_FAILED
    AudienceGenerationJobSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the audience generation job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the audience generation job was
            updated.
        audienceGenerationJobArn:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobArn'
          description: The Amazon Resource Name (ARN) of the audience generation job.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the audience generation job.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the audience generation job.
        status:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobStatus'
          description: The status of the audience generation job.
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            that was used for this audience generation job.
        collaborationId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The identifier of the collaboration that contains this audience
            generation job.
        startedBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The AWS Account that submitted the job.
      required:
      - createTime
      - updateTime
      - audienceGenerationJobArn
      - name
      - status
      - configuredAudienceModelArn
      description: Provides information about the configured audience generation job.
    AudienceModelArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:audience-model/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    AudienceModelList:
      type: array
      items:
        $ref: '#/components/schemas/AudienceModelSummary'
    AudienceModelStatus:
      type: string
      enum:
      - CREATE_PENDING
      - CREATE_IN_PROGRESS
      - CREATE_FAILED
      - ACTIVE
      - DELETE_PENDING
      - DELETE_IN_PROGRESS
      - DELETE_FAILED
    AudienceModelSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the audience model was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the audience model was updated.
        audienceModelArn:
          allOf:
          - $ref: '#/components/schemas/AudienceModelArn'
          description: The Amazon Resource Name (ARN) of the audience model.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the audience model.
        trainingDatasetArn:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetArn'
          description: The Amazon Resource Name (ARN) of the training dataset that
            was used for the audience model.
        status:
          allOf:
          - $ref: '#/components/schemas/AudienceModelStatus'
          description: The status of the audience model.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the audience model.
      required:
      - createTime
      - updateTime
      - audienceModelArn
      - name
      - trainingDatasetArn
      - status
      description: Information about the audience model.
    AudienceQualityMetrics:
      type: object
      properties:
        relevanceMetrics:
          allOf:
          - $ref: '#/components/schemas/RelevanceMetrics'
          description: The relevance scores of the generated audience.
        recallMetric:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The recall score of the generated audience. Recall is the percentage
            of the most similar users (by default, the most similar 20%) from a sample
            of the training data that are included in the seed audience by the audience
            generation job. Values range from 0-1, larger values indicate a better
            audience. A recall value approximately equal to the maximum bin size indicates
            that the audience model is equivalent to random selection.
      required:
      - relevanceMetrics
      description: Metrics that describe the quality of the generated audience.
    AudienceSize:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/AudienceSizeType'
          description: Whether the audience size is defined in absolute terms or as
            a percentage. You can use the `ABSOLUTE` AudienceSize to configure out
            audience sizes using the count of identifiers in the output. You can use
            the `Percentage` AudienceSize to configure sizes in the range 1-100 percent.
        value:
          allOf:
          - $ref: '#/components/schemas/AudienceSizeValue'
          description: Specify an audience size value.
      required:
      - type
      - value
      description: The size of the generated audience. Must match one of the sizes
        in the configured audience model.
    AudienceSizeBins:
      type: array
      items:
        $ref: '#/components/schemas/AudienceSizeValue'
    AudienceSizeConfig:
      type: object
      properties:
        audienceSizeType:
          allOf:
          - $ref: '#/components/schemas/AudienceSizeType'
          description: Whether the audience output sizes are defined as an absolute
            number or a percentage.
        audienceSizeBins:
          allOf:
          - $ref: '#/components/schemas/AudienceSizeBins'
          description: An array of the different audience output sizes.
      required:
      - audienceSizeType
      - audienceSizeBins
      description: 'Returns the relevance scores at these audience sizes when used
        in the GetAudienceGenerationJob for a specified audience generation job and
        configured audience model.


        Specifies the list of allowed `audienceSize` values when used in the StartAudienceExportJob
        for an audience generation job. You can use the `ABSOLUTE` AudienceSize to
        configure out audience sizes using the count of identifiers in the output.
        You can use the `Percentage` AudienceSize to configure sizes in the range
        1-100 percent.'
    AudienceSizeType:
      type: string
      enum:
      - ABSOLUTE
      - PERCENTAGE
    AudienceSizeValue:
      type: integer
      minimum: 1
      maximum: 20000000
    CancelTrainedModelInferenceJobRequest:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the trained model inference job that you
            want to cancel.
        trainedModelInferenceJobArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobArn'
          description: The Amazon Resource Name (ARN) of the trained model inference
            job that you want to cancel.
      required:
      - membershipIdentifier
      - trainedModelInferenceJobArn
    CancelTrainedModelRequest:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the trained model job that you want to
            cancel.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model job that
            you want to cancel.
      required:
      - membershipIdentifier
      - trainedModelArn
    CollaborationConfiguredModelAlgorithmAssociationList:
      type: array
      items:
        $ref: '#/components/schemas/CollaborationConfiguredModelAlgorithmAssociationSummary'
    CollaborationConfiguredModelAlgorithmAssociationSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the configured model algorithm association
            was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the configured model algorithm
            association was updated.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured model algorithm association.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured model algorithm association.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the configured
            model algorithm association.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            configured model algorithm association.
        configuredModelAlgorithmArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            that is associated to the collaboration.
        creatorAccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID of the member that created the configured model
            algorithm association.
      required:
      - createTime
      - updateTime
      - configuredModelAlgorithmAssociationArn
      - name
      - membershipIdentifier
      - collaborationIdentifier
      - configuredModelAlgorithmArn
      - creatorAccountId
      description: Provides summary information about a configured model algorithm
        in a collaboration.
    CollaborationMLInputChannelSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the ML input channel was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the ML input channel was updated.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the ML input
            channel.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            ML input channel.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the ML input channel.
        configuredModelAlgorithmAssociations:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArnList'
          description: The associated configured model algorithms used to create the
            ML input channel.
        mlInputChannelArn:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelArn'
          description: The Amazon Resource Name (ARN) of the ML input channel.
        status:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelStatus'
          description: The status of the ML input channel.
        creatorAccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID of the member who created the ML input channel.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the ML input channel.
      required:
      - createTime
      - updateTime
      - membershipIdentifier
      - collaborationIdentifier
      - name
      - configuredModelAlgorithmAssociations
      - mlInputChannelArn
      - status
      - creatorAccountId
      description: Provides summary information about an ML input channel in a collaboration.
    CollaborationMLInputChannelsList:
      type: array
      items:
        $ref: '#/components/schemas/CollaborationMLInputChannelSummary'
    CollaborationTrainedModelExportJobList:
      type: array
      items:
        $ref: '#/components/schemas/CollaborationTrainedModelExportJobSummary'
    CollaborationTrainedModelExportJobSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the trained model export job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the trained model export job
            was updated.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model export job.
        outputConfiguration:
          $ref: '#/components/schemas/TrainedModelExportOutputConfiguration'
        status:
          allOf:
          - $ref: '#/components/schemas/TrainedModelExportJobStatus'
          description: The status of the trained model.
        statusDetails:
          $ref: '#/components/schemas/StatusDetails'
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model.
        creatorAccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID of the member that created the trained model.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model that is
            being exported.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the trained model
            export job.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            trained model export job.
      required:
      - createTime
      - updateTime
      - name
      - outputConfiguration
      - status
      - creatorAccountId
      - trainedModelArn
      - membershipIdentifier
      - collaborationIdentifier
      description: Provides summary information about a trained model export job in
        a collaboration.
    CollaborationTrainedModelInferenceJobList:
      type: array
      items:
        $ref: '#/components/schemas/CollaborationTrainedModelInferenceJobSummary'
    CollaborationTrainedModelInferenceJobSummary:
      type: object
      properties:
        trainedModelInferenceJobArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobArn'
          description: The Amazon Resource Name (ARN) of the trained model inference
            job.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that is used for the trained model inference job.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the trained
            model inference job.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model that is
            used for the trained model inference job.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            trained model inference job.
        status:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobStatus'
          description: The status of the trained model inference job.
        outputConfiguration:
          allOf:
          - $ref: '#/components/schemas/InferenceOutputConfiguration'
          description: Returns output configuration information for the trained model
            inference job.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model inference job.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model inference job.
        metricsStatus:
          allOf:
          - $ref: '#/components/schemas/MetricsStatus'
          description: the trained model inference job metrics status.
        metricsStatusDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the metrics status for trained model inference
            job.
        logsStatus:
          allOf:
          - $ref: '#/components/schemas/LogsStatus'
          description: The trained model inference job logs status.
        logsStatusDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the logs status for the trained model inference
            job.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the trained model inference job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the trained model inference job
            was updated.
        creatorAccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID that created the trained model inference job.
      required:
      - trainedModelInferenceJobArn
      - membershipIdentifier
      - trainedModelArn
      - collaborationIdentifier
      - status
      - outputConfiguration
      - name
      - createTime
      - updateTime
      - creatorAccountId
      description: Provides summary information about a trained model inference job
        in a collaboration.
    CollaborationTrainedModelList:
      type: array
      items:
        $ref: '#/components/schemas/CollaborationTrainedModelSummary'
    CollaborationTrainedModelSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the trained model was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the trained model was updated.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the trained model.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            trained model.
        status:
          allOf:
          - $ref: '#/components/schemas/TrainedModelStatus'
          description: The status of the trained model.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that is used for this trained model.
        creatorAccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID of the member that created the trained model.
      required:
      - createTime
      - updateTime
      - trainedModelArn
      - name
      - membershipIdentifier
      - collaborationIdentifier
      - status
      - configuredModelAlgorithmAssociationArn
      - creatorAccountId
      description: Provides summary information about a trained model in a collaboration.
    ColumnName:
      type: string
      pattern: ^[a-zA-Z0-9_](([a-zA-Z0-9_ ]+-)*([a-zA-Z0-9_ ]+))?$
      minLength: 1
      maxLength: 128
    ColumnSchema:
      type: object
      properties:
        columnName:
          allOf:
          - $ref: '#/components/schemas/ColumnName'
          description: The name of a column.
        columnTypes:
          allOf:
          - $ref: '#/components/schemas/ColumnTypeList'
          description: The data type of column.
      required:
      - columnName
      - columnTypes
      description: Metadata for a column.
    ColumnType:
      type: string
      enum:
      - USER_ID
      - ITEM_ID
      - TIMESTAMP
      - CATEGORICAL_FEATURE
      - NUMERICAL_FEATURE
    ColumnTypeList:
      type: array
      items:
        $ref: '#/components/schemas/ColumnType'
    ComputeConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/WorkerComputeConfiguration'
        description: |-
          The worker instances that will perform the compute work.
      description: |-
        Provides configuration information for the instances that will perform the compute work.
    ConfiguredAudienceModelArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:configured-audience-model/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    ConfiguredAudienceModelList:
      type: array
      items:
        $ref: '#/components/schemas/ConfiguredAudienceModelSummary'
    ConfiguredAudienceModelOutputConfig:
      type: object
      properties:
        destination:
          $ref: '#/components/schemas/AudienceDestination'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The ARN of the IAM role that can write the Amazon S3 bucket.
      required:
      - destination
      - roleArn
      description: Configuration information necessary for the configure audience
        model output.
    ConfiguredAudienceModelStatus:
      type: string
      enum:
      - ACTIVE
    ConfiguredAudienceModelSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the configured audience model was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the configured audience model
            was updated.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured audience model.
        audienceModelArn:
          allOf:
          - $ref: '#/components/schemas/AudienceModelArn'
          description: The Amazon Resource Name (ARN) of the audience model that was
            used to create the configured audience model.
        outputConfig:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelOutputConfig'
          description: The output configuration of the configured audience model.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured audience model.
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            that you are interested in.
        status:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelStatus'
          description: The status of the configured audience model.
      required:
      - createTime
      - updateTime
      - name
      - audienceModelArn
      - outputConfig
      - configuredAudienceModelArn
      - status
      description: Information about the configured audience model.
    ConfiguredModelAlgorithmArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:configured-model-algorithm/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    ConfiguredModelAlgorithmAssociationArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:(membership/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/)?configured-model-algorithm-association/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    ConfiguredModelAlgorithmAssociationArnList:
      type: array
      items:
        $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
    ConfiguredModelAlgorithmAssociationList:
      type: array
      items:
        $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationSummary'
    ConfiguredModelAlgorithmAssociationSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the configured model algorithm association
            was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the configured model algorithm
            association was updated.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association.
        configuredModelAlgorithmArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            that is being associated.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured model algorithm association.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured model algorithm association.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the configured
            model algorithm association.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            configured model algorithm association.
      required:
      - createTime
      - updateTime
      - configuredModelAlgorithmAssociationArn
      - configuredModelAlgorithmArn
      - name
      - membershipIdentifier
      - collaborationIdentifier
      description: Provides summary information about the configured model algorithm
        association.
    ConfiguredModelAlgorithmList:
      type: array
      items:
        $ref: '#/components/schemas/ConfiguredModelAlgorithmSummary'
    ConfiguredModelAlgorithmSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the configured model algorithm was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the configured model algorithm
            was updated.
        configuredModelAlgorithmArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured model algorithm.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured model algorithm.
      required:
      - createTime
      - updateTime
      - configuredModelAlgorithmArn
      - name
      description: Provides summary information about a configured model algorithm.
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: You can't complete this action because another resource depends
        on this resource.
    ContainerArgument:
      type: string
      pattern: ^.*$
      minLength: 1
      maxLength: 256
    ContainerArguments:
      type: array
      items:
        $ref: '#/components/schemas/ContainerArgument'
    ContainerConfig:
      type: object
      properties:
        imageUri:
          allOf:
          - $ref: '#/components/schemas/AlgorithmImage'
          description: The registry path of the docker image that contains the algorithm.
            Clean Rooms ML supports both `registry/repository[:tag]` and `registry/repositry[@digest]`
            image path formats. For more information about using images in Clean Rooms
            ML, see the [Sagemaker API reference](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html#sagemaker-Type-AlgorithmSpecification-TrainingImage).
        entrypoint:
          allOf:
          - $ref: '#/components/schemas/ContainerEntrypoint'
          description: The entrypoint script for a Docker container used to run a
            training job. This script takes precedence over the default train processing
            instructions. See How Amazon SageMaker Runs Your Training Image for additional
            information. For more information, see [How Sagemaker runs your training
            image](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html).
        arguments:
          allOf:
          - $ref: '#/components/schemas/ContainerArguments'
          description: The arguments for a container used to run a training job. See
            How Amazon SageMaker Runs Your Training Image for additional information.
            For more information, see [How Sagemaker runs your training image](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html).
        metricDefinitions:
          allOf:
          - $ref: '#/components/schemas/MetricDefinitionList'
          description: A list of metric definition objects. Each object specifies
            the metric name and regular expressions used to parse algorithm logs.
            Amazon Web Services Clean Rooms ML publishes each metric to all members'
            Amazon CloudWatch using IAM role configured in PutMLConfiguration.
      required:
      - imageUri
      description: Provides configuration information for the dockerized container
        where the model algorithm is stored.
    ContainerEntrypoint:
      type: array
      items:
        $ref: '#/components/schemas/ContainerEntrypointString'
    ContainerEntrypointString:
      type: string
      pattern: ^.*$
      minLength: 1
      maxLength: 256
    CreateAudienceModelRequest:
      type: object
      properties:
        trainingDataStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The start date and time of the training window.
        trainingDataEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The end date and time of the training window.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the audience model resource.
        trainingDatasetArn:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetArn'
          description: The Amazon Resource Name (ARN) of the training dataset for
            this audience model.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key. This key is
            used to encrypt and decrypt customer-owned data in the trained ML model
            and the associated data.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you apply to the resource to help\
            \ you categorize and organize them. Each tag consists of a key and an\
            \ optional value, both of which you define.\n\nThe following basic restrictions\
            \ apply to tags:\n\n  * Maximum number of tags per resource - 50.\n\n\
            \  * For each resource, each tag key must be unique, and each tag key\
            \ can have only one value.\n\n  * Maximum key length - 128 Unicode characters\
            \ in UTF-8.\n\n  * Maximum value length - 256 Unicode characters in UTF-8.\n\
            \n  * If your tagging schema is used across multiple services and resources,\
            \ remember that other services may have restrictions on allowed characters.\
            \ Generally allowed characters are: letters, numbers, and spaces representable\
            \ in UTF-8, and the following characters: + - = . _ : / @.\n\n  * Tag\
            \ keys and values are case sensitive.\n\n  * Do not use aws:, AWS:, or\
            \ any upper or lowercase combination of such as a prefix for keys as it\
            \ is reserved for AWS use. You cannot edit or delete tag keys with this\
            \ prefix. Values can have this prefix. If a tag value has aws as its prefix\
            \ but the key does not, then Clean Rooms ML considers it to be a user\
            \ tag and will count against the limit of 50 tags. Tags with only the\
            \ key prefix of aws do not count against your tags per resource limit."
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the audience model.
      required:
      - name
      - trainingDatasetArn
    CreateAudienceModelResponse:
      type: object
      properties:
        audienceModelArn:
          allOf:
          - $ref: '#/components/schemas/AudienceModelArn'
          description: The Amazon Resource Name (ARN) of the audience model.
      required:
      - audienceModelArn
    CreateConfiguredAudienceModelRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured audience model.
        audienceModelArn:
          allOf:
          - $ref: '#/components/schemas/AudienceModelArn'
          description: The Amazon Resource Name (ARN) of the audience model to use
            for the configured audience model.
        outputConfig:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelOutputConfig'
          description: Configure the Amazon S3 location and IAM Role for audiences
            created using this configured audience model. Each audience will have
            a unique location. The IAM Role must have `s3:PutObject` permission on
            the destination Amazon S3 location. If the destination is protected with
            Amazon S3 KMS-SSE, then the Role must also have the required KMS permissions.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured audience model.
        sharedAudienceMetrics:
          allOf:
          - $ref: '#/components/schemas/MetricsList'
          description: Whether audience metrics are shared.
        minMatchingSeedSize:
          allOf:
          - $ref: '#/components/schemas/MinMatchingSeedSize'
          description: The minimum number of users from the seed audience that must
            match with users in the training data of the audience model. The default
            value is 500.
        audienceSizeConfig:
          allOf:
          - $ref: '#/components/schemas/AudienceSizeConfig'
          description: Configure the list of output sizes of audiences that can be
            created using this configured audience model. A request to StartAudienceGenerationJob
            that uses this configured audience model must have an `audienceSize` selected
            from this list. You can use the `ABSOLUTE` AudienceSize to configure out
            audience sizes using the count of identifiers in the output. You can use
            the `Percentage` AudienceSize to configure sizes in the range 1-100 percent.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you apply to the resource to help\
            \ you categorize and organize them. Each tag consists of a key and an\
            \ optional value, both of which you define.\n\nThe following basic restrictions\
            \ apply to tags:\n\n  * Maximum number of tags per resource - 50.\n\n\
            \  * For each resource, each tag key must be unique, and each tag key\
            \ can have only one value.\n\n  * Maximum key length - 128 Unicode characters\
            \ in UTF-8.\n\n  * Maximum value length - 256 Unicode characters in UTF-8.\n\
            \n  * If your tagging schema is used across multiple services and resources,\
            \ remember that other services may have restrictions on allowed characters.\
            \ Generally allowed characters are: letters, numbers, and spaces representable\
            \ in UTF-8, and the following characters: + - = . _ : / @.\n\n  * Tag\
            \ keys and values are case sensitive.\n\n  * Do not use aws:, AWS:, or\
            \ any upper or lowercase combination of such as a prefix for keys as it\
            \ is reserved for AWS use. You cannot edit or delete tag keys with this\
            \ prefix. Values can have this prefix. If a tag value has aws as its prefix\
            \ but the key does not, then Clean Rooms ML considers it to be a user\
            \ tag and will count against the limit of 50 tags. Tags with only the\
            \ key prefix of aws do not count against your tags per resource limit."
        childResourceTagOnCreatePolicy:
          allOf:
          - $ref: '#/components/schemas/TagOnCreatePolicy'
          description: 'Configure how the service tags audience generation jobs created
            using this configured audience model. If you specify `NONE`, the tags
            from the StartAudienceGenerationJob request determine the tags of the
            audience generation job. If you specify `FROM_PARENT_RESOURCE`, the audience
            generation job inherits the tags from the configured audience model, by
            default. Tags in the StartAudienceGenerationJob will override the default.


            When the client is in a different account than the configured audience
            model, the tags from the client are never applied to a resource in the
            caller''s account.'
      required:
      - name
      - audienceModelArn
      - outputConfig
      - sharedAudienceMetrics
    CreateConfiguredAudienceModelResponse:
      type: object
      properties:
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model.
      required:
      - configuredAudienceModelArn
    CreateConfiguredModelAlgorithmAssociationRequest:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member who is associating this configured
            model algorithm.
        configuredModelAlgorithmArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            that you want to associate.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured model algorithm association.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured model algorithm association.
        privacyConfiguration:
          allOf:
          - $ref: '#/components/schemas/PrivacyConfiguration'
          description: Specifies the privacy configuration information for the configured
            model algorithm association. This information includes the maximum data
            size that can be exported.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you apply to the resource to help\
            \ you categorize and organize them. Each tag consists of a key and an\
            \ optional value, both of which you define.\n\nThe following basic restrictions\
            \ apply to tags:\n\n  * Maximum number of tags per resource - 50.\n\n\
            \  * For each resource, each tag key must be unique, and each tag key\
            \ can have only one value.\n\n  * Maximum key length - 128 Unicode characters\
            \ in UTF-8.\n\n  * Maximum value length - 256 Unicode characters in UTF-8.\n\
            \n  * If your tagging schema is used across multiple services and resources,\
            \ remember that other services may have restrictions on allowed characters.\
            \ Generally allowed characters are: letters, numbers, and spaces representable\
            \ in UTF-8, and the following characters: + - = . _ : / @.\n\n  * Tag\
            \ keys and values are case sensitive.\n\n  * Do not use aws:, AWS:, or\
            \ any upper or lowercase combination of such as a prefix for keys as it\
            \ is reserved for AWS use. You cannot edit or delete tag keys with this\
            \ prefix. Values can have this prefix. If a tag value has aws as its prefix\
            \ but the key does not, then Clean Rooms ML considers it to be a user\
            \ tag and will count against the limit of 50 tags. Tags with only the\
            \ key prefix of aws do not count against your tags per resource limit."
      required:
      - membershipIdentifier
      - configuredModelAlgorithmArn
      - name
    CreateConfiguredModelAlgorithmAssociationResponse:
      type: object
      properties:
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association.
      required:
      - configuredModelAlgorithmAssociationArn
    CreateConfiguredModelAlgorithmRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured model algorithm.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured model algorithm.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The Amazon Resource Name (ARN) of the role that is used to
            access the repository.
        trainingContainerConfig:
          allOf:
          - $ref: '#/components/schemas/ContainerConfig'
          description: Configuration information for the training container, including
            entrypoints and arguments.
        inferenceContainerConfig:
          allOf:
          - $ref: '#/components/schemas/InferenceContainerConfig'
          description: Configuration information for the inference container that
            is used when you run an inference job on a configured model algorithm.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you apply to the resource to help\
            \ you categorize and organize them. Each tag consists of a key and an\
            \ optional value, both of which you define.\n\nThe following basic restrictions\
            \ apply to tags:\n\n  * Maximum number of tags per resource - 50.\n\n\
            \  * For each resource, each tag key must be unique, and each tag key\
            \ can have only one value.\n\n  * Maximum key length - 128 Unicode characters\
            \ in UTF-8.\n\n  * Maximum value length - 256 Unicode characters in UTF-8.\n\
            \n  * If your tagging schema is used across multiple services and resources,\
            \ remember that other services may have restrictions on allowed characters.\
            \ Generally allowed characters are: letters, numbers, and spaces representable\
            \ in UTF-8, and the following characters: + - = . _ : / @.\n\n  * Tag\
            \ keys and values are case sensitive.\n\n  * Do not use aws:, AWS:, or\
            \ any upper or lowercase combination of such as a prefix for keys as it\
            \ is reserved for AWS use. You cannot edit or delete tag keys with this\
            \ prefix. Values can have this prefix. If a tag value has aws as its prefix\
            \ but the key does not, then Clean Rooms ML considers it to be a user\
            \ tag and will count against the limit of 50 tags. Tags with only the\
            \ key prefix of aws do not count against your tags per resource limit."
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key. This key is
            used to encrypt and decrypt customer-owned data in the configured ML model
            algorithm and associated data.
      required:
      - name
      - roleArn
    CreateConfiguredModelAlgorithmResponse:
      type: object
      properties:
        configuredModelAlgorithmArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm.
      required:
      - configuredModelAlgorithmArn
    CreateMLInputChannelRequest:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that is creating the ML input
            channel.
        configuredModelAlgorithmAssociations:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArnList'
          description: The associated configured model algorithms that are necessary
            to create this ML input channel.
        inputChannel:
          allOf:
          - $ref: '#/components/schemas/InputChannel'
          description: The input data that is used to create this ML input channel.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the ML input channel.
        retentionInDays:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of days that the data in the ML input channel is
            retained.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the ML input channel.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key that is used
            to access the input channel.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you apply to the resource to help\
            \ you categorize and organize them. Each tag consists of a key and an\
            \ optional value, both of which you define.\n\nThe following basic restrictions\
            \ apply to tags:\n\n  * Maximum number of tags per resource - 50.\n\n\
            \  * For each resource, each tag key must be unique, and each tag key\
            \ can have only one value.\n\n  * Maximum key length - 128 Unicode characters\
            \ in UTF-8.\n\n  * Maximum value length - 256 Unicode characters in UTF-8.\n\
            \n  * If your tagging schema is used across multiple services and resources,\
            \ remember that other services may have restrictions on allowed characters.\
            \ Generally allowed characters are: letters, numbers, and spaces representable\
            \ in UTF-8, and the following characters: + - = . _ : / @.\n\n  * Tag\
            \ keys and values are case sensitive.\n\n  * Do not use aws:, AWS:, or\
            \ any upper or lowercase combination of such as a prefix for keys as it\
            \ is reserved for AWS use. You cannot edit or delete tag keys with this\
            \ prefix. Values can have this prefix. If a tag value has aws as its prefix\
            \ but the key does not, then Clean Rooms ML considers it to be a user\
            \ tag and will count against the limit of 50 tags. Tags with only the\
            \ key prefix of aws do not count against your tags per resource limit."
      required:
      - membershipIdentifier
      - configuredModelAlgorithmAssociations
      - inputChannel
      - name
      - retentionInDays
    CreateMLInputChannelResponse:
      type: object
      properties:
        mlInputChannelArn:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelArn'
          description: The Amazon Resource Name (ARN) of the ML input channel.
      required:
      - mlInputChannelArn
    CreateTrainedModelRequest:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that is creating the trained
            model.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The associated configured model algorithm used to train this
            model.
        hyperparameters:
          allOf:
          - $ref: '#/components/schemas/HyperParameters'
          description: Algorithm-specific parameters that influence the quality of
            the model. You set hyperparameters before you start the learning process.
        environment:
          allOf:
          - $ref: '#/components/schemas/Environment'
          description: The environment variables to set in the Docker container.
        resourceConfig:
          allOf:
          - $ref: '#/components/schemas/ResourceConfig'
          description: Information about the EC2 resources that are used to train
            this model.
        stoppingCondition:
          allOf:
          - $ref: '#/components/schemas/StoppingCondition'
          description: The criteria that is used to stop model training.
        dataChannels:
          allOf:
          - $ref: '#/components/schemas/ModelTrainingDataChannels'
          description: Defines the data channels that are used as input for the trained
            model request.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key. This key is
            used to encrypt and decrypt customer-owned data in the trained ML model
            and the associated data.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you apply to the resource to help\
            \ you categorize and organize them. Each tag consists of a key and an\
            \ optional value, both of which you define.\n\nThe following basic restrictions\
            \ apply to tags:\n\n  * Maximum number of tags per resource - 50.\n\n\
            \  * For each resource, each tag key must be unique, and each tag key\
            \ can have only one value.\n\n  * Maximum key length - 128 Unicode characters\
            \ in UTF-8.\n\n  * Maximum value length - 256 Unicode characters in UTF-8.\n\
            \n  * If your tagging schema is used across multiple services and resources,\
            \ remember that other services may have restrictions on allowed characters.\
            \ Generally allowed characters are: letters, numbers, and spaces representable\
            \ in UTF-8, and the following characters: + - = . _ : / @.\n\n  * Tag\
            \ keys and values are case sensitive.\n\n  * Do not use aws:, AWS:, or\
            \ any upper or lowercase combination of such as a prefix for keys as it\
            \ is reserved for AWS use. You cannot edit or delete tag keys with this\
            \ prefix. Values can have this prefix. If a tag value has aws as its prefix\
            \ but the key does not, then Clean Rooms ML considers it to be a user\
            \ tag and will count against the limit of 50 tags. Tags with only the\
            \ key prefix of aws do not count against your tags per resource limit."
      required:
      - membershipIdentifier
      - name
      - configuredModelAlgorithmAssociationArn
      - resourceConfig
      - dataChannels
    CreateTrainedModelResponse:
      type: object
      properties:
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model.
      required:
      - trainedModelArn
    CreateTrainingDatasetRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the training dataset. This name must be unique
            in your account and region.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: 'The ARN of the IAM role that Clean Rooms ML can assume to
            read the data referred to in the `dataSource` field of each dataset.


            Passing a role across AWS accounts is not allowed. If you pass a role
            that isn''t in your account, you get an `AccessDeniedException` error.'
        trainingData:
          allOf:
          - $ref: '#/components/schemas/DatasetList'
          description: An array of information that lists the Dataset objects, which
            specifies the dataset type and details on its location and schema. You
            must provide a role that has read access to these tables.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you apply to the resource to help\
            \ you categorize and organize them. Each tag consists of a key and an\
            \ optional value, both of which you define.\n\nThe following basic restrictions\
            \ apply to tags:\n\n  * Maximum number of tags per resource - 50.\n\n\
            \  * For each resource, each tag key must be unique, and each tag key\
            \ can have only one value.\n\n  * Maximum key length - 128 Unicode characters\
            \ in UTF-8.\n\n  * Maximum value length - 256 Unicode characters in UTF-8.\n\
            \n  * If your tagging schema is used across multiple services and resources,\
            \ remember that other services may have restrictions on allowed characters.\
            \ Generally allowed characters are: letters, numbers, and spaces representable\
            \ in UTF-8, and the following characters: + - = . _ : / @.\n\n  * Tag\
            \ keys and values are case sensitive.\n\n  * Do not use aws:, AWS:, or\
            \ any upper or lowercase combination of such as a prefix for keys as it\
            \ is reserved for AWS use. You cannot edit or delete tag keys with this\
            \ prefix. Values can have this prefix. If a tag value has aws as its prefix\
            \ but the key does not, then Clean Rooms ML considers it to be a user\
            \ tag and will count against the limit of 50 tags. Tags with only the\
            \ key prefix of aws do not count against your tags per resource limit."
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the training dataset.
      required:
      - name
      - roleArn
      - trainingData
    CreateTrainingDatasetResponse:
      type: object
      properties:
        trainingDatasetArn:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetArn'
          description: The Amazon Resource Name (ARN) of the training dataset resource.
      required:
      - trainingDatasetArn
    DataSource:
      type: object
      properties:
        glueDataSource:
          allOf:
          - $ref: '#/components/schemas/GlueDataSource'
          description: A GlueDataSource object that defines the catalog ID, database
            name, and table name for the training data.
      required:
      - glueDataSource
      description: Defines information about the Glue data source that contains the
        training data.
    Dataset:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          description: What type of information is found in the dataset.
        inputConfig:
          allOf:
          - $ref: '#/components/schemas/DatasetInputConfig'
          description: A DatasetInputConfig object that defines the data source and
            schema mapping.
      required:
      - type
      - inputConfig
      description: Defines where the training dataset is located, what type of data
        it contains, and how to access the data.
    DatasetInputConfig:
      type: object
      properties:
        schema:
          allOf:
          - $ref: '#/components/schemas/DatasetSchemaList'
          description: The schema information for the training data.
        dataSource:
          allOf:
          - $ref: '#/components/schemas/DataSource'
          description: A DataSource object that specifies the Glue data source for
            the training data.
      required:
      - schema
      - dataSource
      description: Defines the Glue data source and schema mapping information.
    DatasetList:
      type: array
      items:
        $ref: '#/components/schemas/Dataset'
    DatasetSchemaList:
      type: array
      items:
        $ref: '#/components/schemas/ColumnSchema'
    DatasetType:
      type: string
      enum:
      - INTERACTIONS
    DeleteAudienceGenerationJobRequest:
      type: object
      properties:
        audienceGenerationJobArn:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobArn'
          description: The Amazon Resource Name (ARN) of the audience generation job
            that you want to delete.
      required:
      - audienceGenerationJobArn
    DeleteAudienceModelRequest:
      type: object
      properties:
        audienceModelArn:
          allOf:
          - $ref: '#/components/schemas/AudienceModelArn'
          description: The Amazon Resource Name (ARN) of the audience model that you
            want to delete.
      required:
      - audienceModelArn
    DeleteConfiguredAudienceModelPolicyRequest:
      type: object
      properties:
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            policy that you want to delete.
      required:
      - configuredAudienceModelArn
    DeleteConfiguredAudienceModelRequest:
      type: object
      properties:
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            that you want to delete.
      required:
      - configuredAudienceModelArn
    DeleteConfiguredModelAlgorithmAssociationRequest:
      type: object
      properties:
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that you want to delete.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that is deleting the configured
            model algorithm association.
      required:
      - configuredModelAlgorithmAssociationArn
      - membershipIdentifier
    DeleteConfiguredModelAlgorithmRequest:
      type: object
      properties:
        configuredModelAlgorithmArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            that you want to delete.
      required:
      - configuredModelAlgorithmArn
    DeleteMLConfigurationRequest:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the of the member that is deleting the
            ML modeling configuration.
      required:
      - membershipIdentifier
    DeleteMLInputChannelDataRequest:
      type: object
      properties:
        mlInputChannelArn:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelArn'
          description: The Amazon Resource Name (ARN) of the ML input channel that
            you want to delete.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the ML input
            channel you want to delete.
      required:
      - mlInputChannelArn
      - membershipIdentifier
    DeleteTrainedModelOutputRequest:
      type: object
      properties:
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model whose output
            you want to delete.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that is deleting the trained
            model output.
      required:
      - trainedModelArn
      - membershipIdentifier
    DeleteTrainingDatasetRequest:
      type: object
      properties:
        trainingDatasetArn:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetArn'
          description: The Amazon Resource Name (ARN) of the training dataset that
            you want to delete.
      required:
      - trainingDatasetArn
    Destination:
      type: object
      properties:
        s3Destination:
          $ref: '#/components/schemas/S3ConfigMap'
      required:
      - s3Destination
      description: The Amazon S3 location where the exported model artifacts are stored.
    Environment:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    GetAudienceGenerationJobRequest:
      type: object
      properties:
        audienceGenerationJobArn:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobArn'
          description: The Amazon Resource Name (ARN) of the audience generation job
            that you are interested in.
      required:
      - audienceGenerationJobArn
    GetAudienceGenerationJobResponse:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the audience generation job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the audience generation job was
            updated.
        audienceGenerationJobArn:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobArn'
          description: The Amazon Resource Name (ARN) of the audience generation job.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the audience generation job.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the audience generation job.
        status:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobStatus'
          description: The status of the audience generation job.
        statusDetails:
          allOf:
          - $ref: '#/components/schemas/StatusDetails'
          description: Details about the status of the audience generation job.
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            used for this audience generation job.
        seedAudience:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobDataSource'
          description: The seed audience that was used for this audience generation
            job. This field will be null if the account calling the API is the account
            that started this audience generation job.
        includeSeedInOutput:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Configure whether the seed users are included in the output
            audience. By default, Clean Rooms ML removes seed users from the output
            audience. If you specify `TRUE`, the seed users will appear first in the
            output. Clean Rooms ML does not explicitly reveal whether a user was in
            the seed, but the recipient of the audience will know that the first `minimumSeedSize`
            count of users are from the seed.
        collaborationId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The identifier of the collaboration that this audience generation
            job is associated with.
        metrics:
          allOf:
          - $ref: '#/components/schemas/AudienceQualityMetrics'
          description: The relevance scores for different audience sizes and the recall
            score of the generated audience.
        startedBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The AWS account that started this audience generation job.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that are associated to this audience generation job.
        protectedQueryIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique identifier of the protected query for this audience
            generation job.
      required:
      - createTime
      - updateTime
      - audienceGenerationJobArn
      - name
      - status
      - configuredAudienceModelArn
    GetAudienceModelRequest:
      type: object
      properties:
        audienceModelArn:
          allOf:
          - $ref: '#/components/schemas/AudienceModelArn'
          description: The Amazon Resource Name (ARN) of the audience model that you
            are interested in.
      required:
      - audienceModelArn
    GetAudienceModelResponse:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the audience model was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the audience model was updated.
        trainingDataStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The start date specified for the training window.
        trainingDataEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The end date specified for the training window.
        audienceModelArn:
          allOf:
          - $ref: '#/components/schemas/AudienceModelArn'
          description: The Amazon Resource Name (ARN) of the audience model.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the audience model.
        trainingDatasetArn:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetArn'
          description: The Amazon Resource Name (ARN) of the training dataset that
            was used for this audience model.
        status:
          allOf:
          - $ref: '#/components/schemas/AudienceModelStatus'
          description: The status of the audience model.
        statusDetails:
          allOf:
          - $ref: '#/components/schemas/StatusDetails'
          description: Details about the status of the audience model.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key ARN used for the audience model.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that are assigned to the audience model.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the audience model.
      required:
      - createTime
      - updateTime
      - audienceModelArn
      - name
      - trainingDatasetArn
      - status
    GetCollaborationConfiguredModelAlgorithmAssociationRequest:
      type: object
      properties:
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that you want to return information about.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID for the collaboration that contains the
            configured model algorithm association that you want to return information
            about.
      required:
      - configuredModelAlgorithmAssociationArn
      - collaborationIdentifier
    GetCollaborationConfiguredModelAlgorithmAssociationResponse:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the configured model algorithm association
            was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the configured model algorithm
            association was updated.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the configured
            model algorithm association.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            configured model algorithm association.
        configuredModelAlgorithmArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured model algorithm association.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured model algorithm association.
        creatorAccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID of the member that created the configured model
            algorithm association.
        privacyConfiguration:
          $ref: '#/components/schemas/PrivacyConfiguration'
      required:
      - createTime
      - updateTime
      - configuredModelAlgorithmAssociationArn
      - membershipIdentifier
      - collaborationIdentifier
      - configuredModelAlgorithmArn
      - name
      - creatorAccountId
    GetCollaborationMLInputChannelRequest:
      type: object
      properties:
        mlInputChannelArn:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelArn'
          description: The Amazon Resource Name (ARN) of the ML input channel that
            you want to get.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            ML input channel that you want to get.
      required:
      - mlInputChannelArn
      - collaborationIdentifier
    GetCollaborationMLInputChannelResponse:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the ML input channel was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the ML input channel was updated.
        creatorAccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID of the member who created the ML input channel.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the ML input
            channel.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            ML input channel.
        mlInputChannelArn:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelArn'
          description: The Amazon Resource Name (ARN) of the ML input channel.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the ML input channel.
        configuredModelAlgorithmAssociations:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArnList'
          description: The configured model algorithm associations that were used
            to create the ML input channel.
        status:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelStatus'
          description: The status of the ML input channel.
        statusDetails:
          $ref: '#/components/schemas/StatusDetails'
        retentionInDays:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of days to retain the data for the ML input channel.
        numberOfRecords:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of records in the ML input channel.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the ML input channel.
      required:
      - createTime
      - updateTime
      - creatorAccountId
      - membershipIdentifier
      - collaborationIdentifier
      - mlInputChannelArn
      - name
      - configuredModelAlgorithmAssociations
      - status
      - retentionInDays
    GetCollaborationTrainedModelRequest:
      type: object
      properties:
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model that you
            want to return information about.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID that contains the trained model that you
            want to return information about.
      required:
      - trainedModelArn
      - collaborationIdentifier
    GetCollaborationTrainedModelResponse:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the trained model.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            trained model.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model.
        status:
          allOf:
          - $ref: '#/components/schemas/TrainedModelStatus'
          description: The status of the trained model.
        statusDetails:
          $ref: '#/components/schemas/StatusDetails'
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that was used to create this trained model.
        resourceConfig:
          allOf:
          - $ref: '#/components/schemas/ResourceConfig'
          description: The EC2 resource configuration that was used to train this
            model.
        stoppingCondition:
          allOf:
          - $ref: '#/components/schemas/StoppingCondition'
          description: The stopping condition that determined when model training
            ended.
        metricsStatus:
          allOf:
          - $ref: '#/components/schemas/MetricsStatus'
          description: The status of the model metrics.
        metricsStatusDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the status information for the model metrics.
        logsStatus:
          allOf:
          - $ref: '#/components/schemas/LogsStatus'
          description: Status information for the logs.
        logsStatusDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the status information for the logs.
        trainingContainerImageDigest:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Information about the training container image.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the trained model was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the trained model was updated.
        creatorAccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID of the member that created the trained model.
      required:
      - membershipIdentifier
      - collaborationIdentifier
      - trainedModelArn
      - name
      - status
      - configuredModelAlgorithmAssociationArn
      - createTime
      - updateTime
      - creatorAccountId
    GetConfiguredAudienceModelPolicyRequest:
      type: object
      properties:
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            that you are interested in.
      required:
      - configuredAudienceModelArn
    GetConfiguredAudienceModelPolicyResponse:
      type: object
      properties:
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model.
        configuredAudienceModelPolicy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicy'
          description: The configured audience model policy. This is a JSON IAM resource
            policy.
        policyHash:
          allOf:
          - $ref: '#/components/schemas/Hash'
          description: A cryptographic hash of the contents of the policy used to
            prevent unexpected concurrent modification of the policy.
      required:
      - configuredAudienceModelArn
      - configuredAudienceModelPolicy
      - policyHash
    GetConfiguredAudienceModelRequest:
      type: object
      properties:
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            that you are interested in.
      required:
      - configuredAudienceModelArn
    GetConfiguredAudienceModelResponse:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the configured audience model was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the configured audience model
            was updated.
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured audience model.
        audienceModelArn:
          allOf:
          - $ref: '#/components/schemas/AudienceModelArn'
          description: The Amazon Resource Name (ARN) of the audience model used for
            this configured audience model.
        outputConfig:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelOutputConfig'
          description: The output configuration of the configured audience model
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured audience model.
        status:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelStatus'
          description: The status of the configured audience model.
        sharedAudienceMetrics:
          allOf:
          - $ref: '#/components/schemas/MetricsList'
          description: Whether audience metrics are shared.
        minMatchingSeedSize:
          allOf:
          - $ref: '#/components/schemas/MinMatchingSeedSize'
          description: The minimum number of users from the seed audience that must
            match with users in the training data of the audience model.
        audienceSizeConfig:
          allOf:
          - $ref: '#/components/schemas/AudienceSizeConfig'
          description: The list of output sizes of audiences that can be created using
            this configured audience model. A request to StartAudienceGenerationJob
            that uses this configured audience model must have an `audienceSize` selected
            from this list. You can use the `ABSOLUTE` AudienceSize to configure out
            audience sizes using the count of identifiers in the output. You can use
            the `Percentage` AudienceSize to configure sizes in the range 1-100 percent.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that are associated to this configured audience model.
        childResourceTagOnCreatePolicy:
          allOf:
          - $ref: '#/components/schemas/TagOnCreatePolicy'
          description: Provides the `childResourceTagOnCreatePolicy` that was used
            for this configured audience model.
      required:
      - createTime
      - updateTime
      - configuredAudienceModelArn
      - name
      - audienceModelArn
      - outputConfig
      - status
      - sharedAudienceMetrics
    GetConfiguredModelAlgorithmAssociationRequest:
      type: object
      properties:
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that you want to return information about.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the configured
            model algorithm association.
      required:
      - configuredModelAlgorithmAssociationArn
      - membershipIdentifier
    GetConfiguredModelAlgorithmAssociationResponse:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the configured model algorithm association
            was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the configured model algorithm
            association was updated.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the configured
            model algorithm association.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            configured model algorithm association.
        configuredModelAlgorithmArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            that was associated to the collaboration.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured model algorithm association.
        privacyConfiguration:
          allOf:
          - $ref: '#/components/schemas/PrivacyConfiguration'
          description: The privacy configuration information for the configured model
            algorithm association.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured model algorithm association.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you applied to the resource to\
            \ help you categorize and organize them. Each tag consists of a key and\
            \ an optional value, both of which you define.\n\nThe following basic\
            \ restrictions apply to tags:\n\n  * Maximum number of tags per resource\
            \ - 50.\n\n  * For each resource, each tag key must be unique, and each\
            \ tag key can have only one value.\n\n  * Maximum key length - 128 Unicode\
            \ characters in UTF-8.\n\n  * Maximum value length - 256 Unicode characters\
            \ in UTF-8.\n\n  * If your tagging schema is used across multiple services\
            \ and resources, remember that other services may have restrictions on\
            \ allowed characters. Generally allowed characters are: letters, numbers,\
            \ and spaces representable in UTF-8, and the following characters: + -\
            \ = . _ : / @.\n\n  * Tag keys and values are case sensitive.\n\n  * Do\
            \ not use aws:, AWS:, or any upper or lowercase combination of such as\
            \ a prefix for keys as it is reserved for AWS use. You cannot edit or\
            \ delete tag keys with this prefix. Values can have this prefix. If a\
            \ tag value has aws as its prefix but the key does not, then Clean Rooms\
            \ ML considers it to be a user tag and will count against the limit of\
            \ 50 tags. Tags with only the key prefix of aws do not count against your\
            \ tags per resource limit."
      required:
      - createTime
      - updateTime
      - configuredModelAlgorithmAssociationArn
      - membershipIdentifier
      - collaborationIdentifier
      - configuredModelAlgorithmArn
      - name
    GetConfiguredModelAlgorithmRequest:
      type: object
      properties:
        configuredModelAlgorithmArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            that you want to return information about.
      required:
      - configuredModelAlgorithmArn
    GetConfiguredModelAlgorithmResponse:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the configured model algorithm was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the configured model algorithm
            was updated.
        configuredModelAlgorithmArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the configured model algorithm.
        trainingContainerConfig:
          allOf:
          - $ref: '#/components/schemas/ContainerConfig'
          description: The configuration information of the training container for
            the configured model algorithm.
        inferenceContainerConfig:
          allOf:
          - $ref: '#/components/schemas/InferenceContainerConfig'
          description: Configuration information for the inference container.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The Amazon Resource Name (ARN) of the service role that was
            used to create the configured model algorithm.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the configured model algorithm.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you applied to the resource to\
            \ help you categorize and organize them. Each tag consists of a key and\
            \ an optional value, both of which you define.\n\nThe following basic\
            \ restrictions apply to tags:\n\n  * Maximum number of tags per resource\
            \ - 50.\n\n  * For each resource, each tag key must be unique, and each\
            \ tag key can have only one value.\n\n  * Maximum key length - 128 Unicode\
            \ characters in UTF-8.\n\n  * Maximum value length - 256 Unicode characters\
            \ in UTF-8.\n\n  * If your tagging schema is used across multiple services\
            \ and resources, remember that other services may have restrictions on\
            \ allowed characters. Generally allowed characters are: letters, numbers,\
            \ and spaces representable in UTF-8, and the following characters: + -\
            \ = . _ : / @.\n\n  * Tag keys and values are case sensitive.\n\n  * Do\
            \ not use aws:, AWS:, or any upper or lowercase combination of such as\
            \ a prefix for keys as it is reserved for AWS use. You cannot edit or\
            \ delete tag keys with this prefix. Values can have this prefix. If a\
            \ tag value has aws as its prefix but the key does not, then Clean Rooms\
            \ ML considers it to be a user tag and will count against the limit of\
            \ 50 tags. Tags with only the key prefix of aws do not count against your\
            \ tags per resource limit."
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key. This key is
            used to encrypt and decrypt customer-owned data in the configured ML model
            and associated data.
      required:
      - createTime
      - updateTime
      - configuredModelAlgorithmArn
      - name
      - roleArn
    GetMLConfigurationRequest:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that owns the ML configuration
            you want to return information about.
      required:
      - membershipIdentifier
    GetMLConfigurationResponse:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that owns the ML configuration
            you requested.
        defaultOutputLocation:
          allOf:
          - $ref: '#/components/schemas/MLOutputConfiguration'
          description: The Amazon S3 location where ML model output is stored.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the ML configuration was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the ML configuration was updated.
      required:
      - membershipIdentifier
      - defaultOutputLocation
      - createTime
      - updateTime
    GetMLInputChannelRequest:
      type: object
      properties:
        mlInputChannelArn:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelArn'
          description: The Amazon Resource Name (ARN) of the ML input channel that
            you want to get.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the ML input
            channel that you want to get.
      required:
      - mlInputChannelArn
      - membershipIdentifier
    GetMLInputChannelResponse:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the ML input channel was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the ML input channel was updated.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the ML input
            channel.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            ML input channel.
        inputChannel:
          allOf:
          - $ref: '#/components/schemas/InputChannel'
          description: The input channel that was used to create the ML input channel.
        protectedQueryIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The ID of the protected query that was used to create the ML
            input channel.
        mlInputChannelArn:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelArn'
          description: The Amazon Resource Name (ARN) of the ML input channel.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the ML input channel.
        configuredModelAlgorithmAssociations:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArnList'
          description: The configured model algorithm associations that were used
            to create the ML input channel.
        status:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelStatus'
          description: The status of the ML input channel.
        statusDetails:
          $ref: '#/components/schemas/StatusDetails'
        retentionInDays:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of days to keep the data in the ML input channel.
        numberOfRecords:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of records in the ML input channel.
        numberOfFiles:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The number of files in the ML input channel.
        sizeInGb:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The size, in GB, of the ML input channel.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the ML input channel.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key that was used
            to create the ML input channel.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you applied to the resource to\
            \ help you categorize and organize them. Each tag consists of a key and\
            \ an optional value, both of which you define.\n\nThe following basic\
            \ restrictions apply to tags:\n\n  * Maximum number of tags per resource\
            \ - 50.\n\n  * For each resource, each tag key must be unique, and each\
            \ tag key can have only one value.\n\n  * Maximum key length - 128 Unicode\
            \ characters in UTF-8.\n\n  * Maximum value length - 256 Unicode characters\
            \ in UTF-8.\n\n  * If your tagging schema is used across multiple services\
            \ and resources, remember that other services may have restrictions on\
            \ allowed characters. Generally allowed characters are: letters, numbers,\
            \ and spaces representable in UTF-8, and the following characters: + -\
            \ = . _ : / @.\n\n  * Tag keys and values are case sensitive.\n\n  * Do\
            \ not use aws:, AWS:, or any upper or lowercase combination of such as\
            \ a prefix for keys as it is reserved for AWS use. You cannot edit or\
            \ delete tag keys with this prefix. Values can have this prefix. If a\
            \ tag value has aws as its prefix but the key does not, then Clean Rooms\
            \ ML considers it to be a user tag and will count against the limit of\
            \ 50 tags. Tags with only the key prefix of aws do not count against your\
            \ tags per resource limit."
      required:
      - createTime
      - updateTime
      - membershipIdentifier
      - collaborationIdentifier
      - inputChannel
      - mlInputChannelArn
      - name
      - configuredModelAlgorithmAssociations
      - status
      - retentionInDays
    GetTrainedModelInferenceJobRequest:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: Provides the membership ID of the membership that contains
            the trained model inference job that you are interested in.
        trainedModelInferenceJobArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobArn'
          description: Provides the Amazon Resource Name (ARN) of the trained model
            inference job that you are interested in.
      required:
      - membershipIdentifier
      - trainedModelInferenceJobArn
    GetTrainedModelInferenceJobResponse:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the trained model inference job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the trained model inference job
            was updated.
        trainedModelInferenceJobArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobArn'
          description: The Amazon Resource Name (ARN) of the trained model inference
            job.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that was used for the trained model inference job.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model inference job.
        status:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobStatus'
          description: The status of the trained model inference job.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) for the trained model that was
            used for the trained model inference job.
        resourceConfig:
          allOf:
          - $ref: '#/components/schemas/InferenceResourceConfig'
          description: The resource configuration information for the trained model
            inference job.
        outputConfiguration:
          allOf:
          - $ref: '#/components/schemas/InferenceOutputConfiguration'
          description: The output configuration information for the trained model
            inference job.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the trained
            model inference job.
        dataSource:
          allOf:
          - $ref: '#/components/schemas/ModelInferenceDataSource'
          description: The data source that was used for the trained model inference
            job.
        containerExecutionParameters:
          allOf:
          - $ref: '#/components/schemas/InferenceContainerExecutionParameters'
          description: The execution parameters for the model inference job container.
        statusDetails:
          $ref: '#/components/schemas/StatusDetails'
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model inference job.
        inferenceContainerImageDigest:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Information about the training container image.
        environment:
          allOf:
          - $ref: '#/components/schemas/InferenceEnvironmentMap'
          description: The environment variables to set in the Docker container.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key. This key is
            used to encrypt and decrypt customer-owned data in the ML inference job
            and associated data.
        metricsStatus:
          allOf:
          - $ref: '#/components/schemas/MetricsStatus'
          description: The metrics status for the trained model inference job.
        metricsStatusDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the metrics status for the trained model inference
            job.
        logsStatus:
          allOf:
          - $ref: '#/components/schemas/LogsStatus'
          description: The logs status for the trained model inference job.
        logsStatusDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the logs status for the trained model inference
            job.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you applied to the resource to\
            \ help you categorize and organize them. Each tag consists of a key and\
            \ an optional value, both of which you define.\n\nThe following basic\
            \ restrictions apply to tags:\n\n  * Maximum number of tags per resource\
            \ - 50.\n\n  * For each resource, each tag key must be unique, and each\
            \ tag key can have only one value.\n\n  * Maximum key length - 128 Unicode\
            \ characters in UTF-8.\n\n  * Maximum value length - 256 Unicode characters\
            \ in UTF-8.\n\n  * If your tagging schema is used across multiple services\
            \ and resources, remember that other services may have restrictions on\
            \ allowed characters. Generally allowed characters are: letters, numbers,\
            \ and spaces representable in UTF-8, and the following characters: + -\
            \ = . _ : / @.\n\n  * Tag keys and values are case sensitive.\n\n  * Do\
            \ not use aws:, AWS:, or any upper or lowercase combination of such as\
            \ a prefix for keys as it is reserved for AWS use. You cannot edit or\
            \ delete tag keys with this prefix. Values can have this prefix. If a\
            \ tag value has aws as its prefix but the key does not, then Clean Rooms\
            \ ML considers it to be a user tag and will count against the limit of\
            \ 50 tags. Tags with only the key prefix of aws do not count against your\
            \ tags per resource limit."
      required:
      - createTime
      - updateTime
      - trainedModelInferenceJobArn
      - name
      - status
      - trainedModelArn
      - resourceConfig
      - outputConfiguration
      - membershipIdentifier
      - dataSource
    GetTrainedModelRequest:
      type: object
      properties:
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model that you
            are interested in.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the trained model
            that you are interested in.
      required:
      - trainedModelArn
      - membershipIdentifier
    GetTrainedModelResponse:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the trained model.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            trained model.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model.
        status:
          allOf:
          - $ref: '#/components/schemas/TrainedModelStatus'
          description: The status of the trained model.
        statusDetails:
          $ref: '#/components/schemas/StatusDetails'
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that was used to create the trained model.
        resourceConfig:
          allOf:
          - $ref: '#/components/schemas/ResourceConfig'
          description: The EC2 resource configuration that was used to create the
            trained model.
        stoppingCondition:
          allOf:
          - $ref: '#/components/schemas/StoppingCondition'
          description: The stopping condition that was used to terminate model training.
        metricsStatus:
          allOf:
          - $ref: '#/components/schemas/MetricsStatus'
          description: The status of the model metrics.
        metricsStatusDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the metrics status for the trained model.
        logsStatus:
          allOf:
          - $ref: '#/components/schemas/LogsStatus'
          description: The logs status for the trained model.
        logsStatusDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the logs status for the trained model.
        trainingContainerImageDigest:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Information about the training image container.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the trained model was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the trained model was updated.
        hyperparameters:
          allOf:
          - $ref: '#/components/schemas/HyperParameters'
          description: The hyperparameters that were used to create the trained model.
        environment:
          allOf:
          - $ref: '#/components/schemas/Environment'
          description: The EC2 environment that was used to create the trained model.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key. This key is
            used to encrypt and decrypt customer-owned data in the trained ML model
            and associated data.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you applied to the resource to\
            \ help you categorize and organize them. Each tag consists of a key and\
            \ an optional value, both of which you define.\n\nThe following basic\
            \ restrictions apply to tags:\n\n  * Maximum number of tags per resource\
            \ - 50.\n\n  * For each resource, each tag key must be unique, and each\
            \ tag key can have only one value.\n\n  * Maximum key length - 128 Unicode\
            \ characters in UTF-8.\n\n  * Maximum value length - 256 Unicode characters\
            \ in UTF-8.\n\n  * If your tagging schema is used across multiple services\
            \ and resources, remember that other services may have restrictions on\
            \ allowed characters. Generally allowed characters are: letters, numbers,\
            \ and spaces representable in UTF-8, and the following characters: + -\
            \ = . _ : / @.\n\n  * Tag keys and values are case sensitive.\n\n  * Do\
            \ not use aws:, AWS:, or any upper or lowercase combination of such as\
            \ a prefix for keys as it is reserved for AWS use. You cannot edit or\
            \ delete tag keys with this prefix. Values can have this prefix. If a\
            \ tag value has aws as its prefix but the key does not, then Clean Rooms\
            \ ML considers it to be a user tag and will count against the limit of\
            \ 50 tags. Tags with only the key prefix of aws do not count against your\
            \ tags per resource limit."
        dataChannels:
          allOf:
          - $ref: '#/components/schemas/ModelTrainingDataChannels'
          description: The data channels that were used for the trained model.
      required:
      - membershipIdentifier
      - collaborationIdentifier
      - trainedModelArn
      - name
      - status
      - configuredModelAlgorithmAssociationArn
      - createTime
      - updateTime
      - dataChannels
    GetTrainingDatasetRequest:
      type: object
      properties:
        trainingDatasetArn:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetArn'
          description: The Amazon Resource Name (ARN) of the training dataset that
            you are interested in.
      required:
      - trainingDatasetArn
    GetTrainingDatasetResponse:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the training dataset was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the training dataset was updated.
        trainingDatasetArn:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetArn'
          description: The Amazon Resource Name (ARN) of the training dataset.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the training dataset.
        trainingData:
          allOf:
          - $ref: '#/components/schemas/DatasetList'
          description: Metadata about the requested training data.
        status:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetStatus'
          description: The status of the training dataset.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The IAM role used to read the training data.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that are assigned to this training dataset.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the training dataset.
      required:
      - createTime
      - updateTime
      - trainingDatasetArn
      - name
      - trainingData
      - status
      - roleArn
    GlueDataSource:
      type: object
      properties:
        tableName:
          allOf:
          - $ref: '#/components/schemas/GlueTableName'
          description: The Glue table that contains the training data.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/GlueDatabaseName'
          description: The Glue database that contains the training data.
        catalogId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Glue catalog that contains the training data.
      required:
      - tableName
      - databaseName
      description: Defines the Glue data source that contains the training data.
    GlueDatabaseName:
      type: string
      pattern: ^[a-zA-Z0-9_](([a-zA-Z0-9_]+-)*([a-zA-Z0-9_]+))?$
      minLength: 1
      maxLength: 128
    GlueTableName:
      type: string
      pattern: ^[a-zA-Z0-9_](([a-zA-Z0-9_ ]+-)*([a-zA-Z0-9_ ]+))?$
      minLength: 1
      maxLength: 128
    Hash:
      type: string
      pattern: ^[0-9a-f]+$
      minLength: 64
      maxLength: 128
    HyperParameters:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    IamRoleArn:
      type: string
      pattern: ^arn:aws[-a-z]*:iam::[0-9]{12}:role/.+$
      minLength: 20
      maxLength: 2048
    InferenceContainerConfig:
      type: object
      properties:
        imageUri:
          allOf:
          - $ref: '#/components/schemas/AlgorithmImage'
          description: The registry path of the docker image that contains the inference
            algorithm. Clean Rooms ML supports both `registry/repository[:tag]` and
            `registry/repositry[@digest]` image path formats. For more information
            about using images in Clean Rooms ML, see the [Sagemaker API reference](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html#sagemaker-Type-AlgorithmSpecification-TrainingImage).
      required:
      - imageUri
      description: Provides configuration information for the inference container.
    InferenceContainerExecutionParameters:
      type: object
      properties:
        maxPayloadInMB:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum size of the inference container payload, specified
            in MB.
      description: Provides execution parameters for the inference container.
    InferenceEnvironmentMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    InferenceInstanceType:
      type: string
      enum:
      - ml.r7i.48xlarge
      - ml.r6i.16xlarge
      - ml.m6i.xlarge
      - ml.m5.4xlarge
      - ml.p2.xlarge
      - ml.m4.16xlarge
      - ml.r7i.16xlarge
      - ml.m7i.xlarge
      - ml.m6i.12xlarge
      - ml.r7i.8xlarge
      - ml.r7i.large
      - ml.m7i.12xlarge
      - ml.m6i.24xlarge
      - ml.m7i.24xlarge
      - ml.r6i.8xlarge
      - ml.r6i.large
      - ml.g5.2xlarge
      - ml.m5.large
      - ml.p3.16xlarge
      - ml.m7i.48xlarge
      - ml.m6i.16xlarge
      - ml.p2.16xlarge
      - ml.g5.4xlarge
      - ml.m7i.16xlarge
      - ml.c4.2xlarge
      - ml.c5.2xlarge
      - ml.c6i.32xlarge
      - ml.c4.4xlarge
      - ml.g5.8xlarge
      - ml.c6i.xlarge
      - ml.c5.4xlarge
      - ml.g4dn.xlarge
      - ml.c7i.xlarge
      - ml.c6i.12xlarge
      - ml.g4dn.12xlarge
      - ml.c7i.12xlarge
      - ml.c6i.24xlarge
      - ml.g4dn.2xlarge
      - ml.c7i.24xlarge
      - ml.c7i.2xlarge
      - ml.c4.8xlarge
      - ml.c6i.2xlarge
      - ml.g4dn.4xlarge
      - ml.c7i.48xlarge
      - ml.c7i.4xlarge
      - ml.c6i.16xlarge
      - ml.c5.9xlarge
      - ml.g4dn.16xlarge
      - ml.c7i.16xlarge
      - ml.c6i.4xlarge
      - ml.c5.xlarge
      - ml.c4.xlarge
      - ml.g4dn.8xlarge
      - ml.c7i.8xlarge
      - ml.c7i.large
      - ml.g5.xlarge
      - ml.c6i.8xlarge
      - ml.c6i.large
      - ml.g5.12xlarge
      - ml.g5.24xlarge
      - ml.m7i.2xlarge
      - ml.c5.18xlarge
      - ml.g5.48xlarge
      - ml.m6i.2xlarge
      - ml.g5.16xlarge
      - ml.m7i.4xlarge
      - ml.p3.2xlarge
      - ml.r6i.32xlarge
      - ml.m6i.4xlarge
      - ml.m5.xlarge
      - ml.m4.10xlarge
      - ml.r6i.xlarge
      - ml.m5.12xlarge
      - ml.m4.xlarge
      - ml.r7i.2xlarge
      - ml.r7i.xlarge
      - ml.r6i.12xlarge
      - ml.m5.24xlarge
      - ml.r7i.12xlarge
      - ml.m7i.8xlarge
      - ml.m7i.large
      - ml.r6i.24xlarge
      - ml.r6i.2xlarge
      - ml.m4.2xlarge
      - ml.r7i.24xlarge
      - ml.r7i.4xlarge
      - ml.m6i.8xlarge
      - ml.m6i.large
      - ml.m5.2xlarge
      - ml.p2.8xlarge
      - ml.r6i.4xlarge
      - ml.m6i.32xlarge
      - ml.p3.8xlarge
      - ml.m4.4xlarge
    InferenceOutputConfiguration:
      type: object
      properties:
        accept:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The MIME type used to specify the output data.
        members:
          allOf:
          - $ref: '#/components/schemas/InferenceReceiverMembers'
          description: Defines the members that can receive inference output.
      required:
      - members
      description: Configuration information about how the inference output is stored.
    InferenceReceiverMember:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID of the member that can receive inference results.
      required:
      - accountId
      description: Defines who will receive inference results.
    InferenceReceiverMembers:
      type: array
      items:
        $ref: '#/components/schemas/InferenceReceiverMember'
    InferenceResourceConfig:
      type: object
      properties:
        instanceType:
          allOf:
          - $ref: '#/components/schemas/InferenceInstanceType'
          description: The type of instance that is used to perform model inference.
        instanceCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of instances to use.
      required:
      - instanceType
      description: Defines the resources used to perform model inference.
    InputChannel:
      type: object
      properties:
        dataSource:
          allOf:
          - $ref: '#/components/schemas/InputChannelDataSource'
          description: The data source that is used to create the ML input channel.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: 'The ARN of the IAM role that Clean Rooms ML can assume to
            read the data referred to in the `dataSource` field the input channel.


            Passing a role across AWS accounts is not allowed. If you pass a role
            that isn''t in your account, you get an `AccessDeniedException` error.'
      required:
      - dataSource
      - roleArn
      description: Provides information about the data source that is used to create
        an ML input channel.
    InputChannelDataSource:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ProtectedQueryInputParameters'
      description: |-
        Provides the data source that is used to define an input channel.
    InstanceType:
      type: string
      enum:
      - ml.m4.xlarge
      - ml.m4.2xlarge
      - ml.m4.4xlarge
      - ml.m4.10xlarge
      - ml.m4.16xlarge
      - ml.g4dn.xlarge
      - ml.g4dn.2xlarge
      - ml.g4dn.4xlarge
      - ml.g4dn.8xlarge
      - ml.g4dn.12xlarge
      - ml.g4dn.16xlarge
      - ml.m5.large
      - ml.m5.xlarge
      - ml.m5.2xlarge
      - ml.m5.4xlarge
      - ml.m5.12xlarge
      - ml.m5.24xlarge
      - ml.c4.xlarge
      - ml.c4.2xlarge
      - ml.c4.4xlarge
      - ml.c4.8xlarge
      - ml.p2.xlarge
      - ml.p2.8xlarge
      - ml.p2.16xlarge
      - ml.p3.2xlarge
      - ml.p3.8xlarge
      - ml.p3.16xlarge
      - ml.p3dn.24xlarge
      - ml.p4d.24xlarge
      - ml.p4de.24xlarge
      - ml.p5.48xlarge
      - ml.c5.xlarge
      - ml.c5.2xlarge
      - ml.c5.4xlarge
      - ml.c5.9xlarge
      - ml.c5.18xlarge
      - ml.c5n.xlarge
      - ml.c5n.2xlarge
      - ml.c5n.4xlarge
      - ml.c5n.9xlarge
      - ml.c5n.18xlarge
      - ml.g5.xlarge
      - ml.g5.2xlarge
      - ml.g5.4xlarge
      - ml.g5.8xlarge
      - ml.g5.16xlarge
      - ml.g5.12xlarge
      - ml.g5.24xlarge
      - ml.g5.48xlarge
      - ml.trn1.2xlarge
      - ml.trn1.32xlarge
      - ml.trn1n.32xlarge
      - ml.m6i.large
      - ml.m6i.xlarge
      - ml.m6i.2xlarge
      - ml.m6i.4xlarge
      - ml.m6i.8xlarge
      - ml.m6i.12xlarge
      - ml.m6i.16xlarge
      - ml.m6i.24xlarge
      - ml.m6i.32xlarge
      - ml.c6i.xlarge
      - ml.c6i.2xlarge
      - ml.c6i.8xlarge
      - ml.c6i.4xlarge
      - ml.c6i.12xlarge
      - ml.c6i.16xlarge
      - ml.c6i.24xlarge
      - ml.c6i.32xlarge
      - ml.r5d.large
      - ml.r5d.xlarge
      - ml.r5d.2xlarge
      - ml.r5d.4xlarge
      - ml.r5d.8xlarge
      - ml.r5d.12xlarge
      - ml.r5d.16xlarge
      - ml.r5d.24xlarge
      - ml.t3.medium
      - ml.t3.large
      - ml.t3.xlarge
      - ml.t3.2xlarge
      - ml.r5.large
      - ml.r5.xlarge
      - ml.r5.2xlarge
      - ml.r5.4xlarge
      - ml.r5.8xlarge
      - ml.r5.12xlarge
      - ml.r5.16xlarge
      - ml.r5.24xlarge
    KmsKeyArn:
      type: string
      pattern: ^arn:aws[-a-z]*:kms:[-a-z0-9]+:[0-9]{12}:key/.+$
      minLength: 20
      maxLength: 2048
    ListAudienceExportJobsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
        audienceGenerationJobArn:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobArn'
          description: The Amazon Resource Name (ARN) of the audience generation job
            that you are interested in.
    ListAudienceExportJobsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        audienceExportJobs:
          allOf:
          - $ref: '#/components/schemas/AudienceExportJobList'
          description: The audience export jobs that match the request.
      required:
      - audienceExportJobs
    ListAudienceGenerationJobsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            that was used for the audience generation jobs that you are interested
            in.
        collaborationId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The identifier of the collaboration that contains the audience
            generation jobs that you are interested in.
    ListAudienceGenerationJobsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        audienceGenerationJobs:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobList'
          description: The audience generation jobs that match the request.
      required:
      - audienceGenerationJobs
    ListAudienceModelsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
    ListAudienceModelsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        audienceModels:
          allOf:
          - $ref: '#/components/schemas/AudienceModelList'
          description: The audience models that match the request.
      required:
      - audienceModels
    ListCollaborationConfiguredModelAlgorithmAssociationsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            configured model algorithm associations that you are interested in.
      required:
      - collaborationIdentifier
    ListCollaborationConfiguredModelAlgorithmAssociationsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        collaborationConfiguredModelAlgorithmAssociations:
          allOf:
          - $ref: '#/components/schemas/CollaborationConfiguredModelAlgorithmAssociationList'
          description: The configured model algorithm associations that belong to
            this collaboration.
      required:
      - collaborationConfiguredModelAlgorithmAssociations
    ListCollaborationMLInputChannelsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            ML input channels that you want to list.
      required:
      - collaborationIdentifier
    ListCollaborationMLInputChannelsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        collaborationMLInputChannelsList:
          allOf:
          - $ref: '#/components/schemas/CollaborationMLInputChannelsList'
          description: The list of ML input channels that you wanted.
      required:
      - collaborationMLInputChannelsList
    ListCollaborationTrainedModelExportJobsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            trained model export jobs that you are interested in.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model that was
            used to create the export jobs that you are interested in.
      required:
      - collaborationIdentifier
      - trainedModelArn
    ListCollaborationTrainedModelExportJobsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        collaborationTrainedModelExportJobs:
          allOf:
          - $ref: '#/components/schemas/CollaborationTrainedModelExportJobList'
          description: The exports jobs that exist for the requested trained model
            in the requested collaboration.
      required:
      - collaborationTrainedModelExportJobs
    ListCollaborationTrainedModelInferenceJobsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            trained model inference jobs that you are interested in.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model that was
            used to create the trained model inference jobs that you are interested
            in.
      required:
      - collaborationIdentifier
    ListCollaborationTrainedModelInferenceJobsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        collaborationTrainedModelInferenceJobs:
          allOf:
          - $ref: '#/components/schemas/CollaborationTrainedModelInferenceJobList'
          description: The trained model inference jobs that you are interested in.
      required:
      - collaborationTrainedModelInferenceJobs
    ListCollaborationTrainedModelsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            trained models you are interested in.
      required:
      - collaborationIdentifier
    ListCollaborationTrainedModelsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        collaborationTrainedModels:
          allOf:
          - $ref: '#/components/schemas/CollaborationTrainedModelList'
          description: The trained models in the collaboration that you requested.
      required:
      - collaborationTrainedModels
    ListConfiguredAudienceModelsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
    ListConfiguredAudienceModelsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        configuredAudienceModels:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelList'
          description: The configured audience models.
      required:
      - configuredAudienceModels
    ListConfiguredModelAlgorithmAssociationsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the configured
            model algorithm associations you are interested in.
      required:
      - membershipIdentifier
    ListConfiguredModelAlgorithmAssociationsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        configuredModelAlgorithmAssociations:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationList'
          description: The list of configured model algorithm associations.
      required:
      - configuredModelAlgorithmAssociations
    ListConfiguredModelAlgorithmsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
    ListConfiguredModelAlgorithmsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        configuredModelAlgorithms:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmList'
          description: The list of configured model algorithms.
      required:
      - configuredModelAlgorithms
    ListMLInputChannelsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of ML input channels to return.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the ML input
            channels that you want to list.
      required:
      - membershipIdentifier
    ListMLInputChannelsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        mlInputChannelsList:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelsList'
          description: The list of ML input channels that you wanted.
      required:
      - mlInputChannelsList
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TaggableArn'
          description: The Amazon Resource Name (ARN) of the resource that you are
            interested in.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that are associated with the resource.
      required:
      - tags
    ListTrainedModelInferenceJobsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of a trained model that was
            used to create the trained model inference jobs that you are interested
            in.
      required:
      - membershipIdentifier
    ListTrainedModelInferenceJobsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        trainedModelInferenceJobs:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobList'
          description: Returns the requested trained model inference jobs.
      required:
      - trainedModelInferenceJobs
    ListTrainedModelsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the trained models
            you are interested in.
      required:
      - membershipIdentifier
    ListTrainedModelsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        trainedModels:
          allOf:
          - $ref: '#/components/schemas/TrainedModelList'
          description: The list of trained models.
      required:
      - trainedModels
    ListTrainingDatasetsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum size of the results that is returned per call.
    ListTrainingDatasetsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value used to access the next page of results.
        trainingDatasets:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetList'
          description: The training datasets that match the request.
      required:
      - trainingDatasets
    LogsConfigurationPolicy:
      type: object
      properties:
        allowedAccountIds:
          allOf:
          - $ref: '#/components/schemas/AccountIdList'
          description: A list of account IDs that are allowed to access the logs.
        filterPattern:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A regular expression pattern that is used to parse the logs
            and return information that matches the pattern.
      required:
      - allowedAccountIds
      description: Provides the information necessary for a user to access the logs.
    LogsConfigurationPolicyList:
      type: array
      items:
        $ref: '#/components/schemas/LogsConfigurationPolicy'
    LogsStatus:
      type: string
      enum:
      - PUBLISH_SUCCEEDED
      - PUBLISH_FAILED
    MLInputChannelArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:membership/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/ml-input-channel/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    MLInputChannelStatus:
      type: string
      enum:
      - CREATE_PENDING
      - CREATE_IN_PROGRESS
      - CREATE_FAILED
      - ACTIVE
      - DELETE_PENDING
      - DELETE_IN_PROGRESS
      - DELETE_FAILED
      - INACTIVE
    MLInputChannelSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the ML input channel was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the ML input channel was updated.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the ML input
            channel.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            ML input channel.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the ML input channel.
        configuredModelAlgorithmAssociations:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArnList'
          description: The associated configured model algorithms used to create the
            ML input channel.
        protectedQueryIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The ID of the protected query that was used to create the ML
            input channel.
        mlInputChannelArn:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelArn'
          description: The Amazon Resource Name (ARN) of the ML input channel.
        status:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelStatus'
          description: The status of the ML input channel.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the ML input channel.
      required:
      - createTime
      - updateTime
      - membershipIdentifier
      - collaborationIdentifier
      - name
      - configuredModelAlgorithmAssociations
      - mlInputChannelArn
      - status
      description: Provides summary information about the ML input channel.
    MLInputChannelsList:
      type: array
      items:
        $ref: '#/components/schemas/MLInputChannelSummary'
    MLOutputConfiguration:
      type: object
      properties:
        destination:
          allOf:
          - $ref: '#/components/schemas/Destination'
          description: The Amazon S3 location where exported model artifacts are stored.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The Amazon Resource Name (ARN) of the service access role that
            is used to store the model artifacts.
      required:
      - roleArn
      description: Configuration information about how the exported model artifacts
        are stored.
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    MetricDefinition:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/MetricName'
          description: The name of the model metric.
        regex:
          allOf:
          - $ref: '#/components/schemas/MetricRegex'
          description: The regular expression statement that defines how the model
            metric is reported.
      required:
      - name
      - regex
      description: Information about the model metric that is reported for a trained
        model.
    MetricDefinitionList:
      type: array
      items:
        $ref: '#/components/schemas/MetricDefinition'
    MetricName:
      type: string
      pattern: ^.+$
      minLength: 1
      maxLength: 255
    MetricRegex:
      type: string
      pattern: ^.+$
      minLength: 1
      maxLength: 500
    MetricsConfigurationPolicy:
      type: object
      properties:
        noiseLevel:
          allOf:
          - $ref: '#/components/schemas/NoiseLevelType'
          description: The noise level for the generated metrics.
      required:
      - noiseLevel
      description: Provides the configuration policy for metrics generation.
    MetricsList:
      type: array
      items:
        $ref: '#/components/schemas/SharedAudienceMetrics'
    MetricsStatus:
      type: string
      enum:
      - PUBLISH_SUCCEEDED
      - PUBLISH_FAILED
    MinMatchingSeedSize:
      type: integer
      minimum: 25
      maximum: 500000
    ModelInferenceDataSource:
      type: object
      properties:
        mlInputChannelArn:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelArn'
          description: The Amazon Resource Name (ARN) of the ML input channel for
            this model inference data source.
      required:
      - mlInputChannelArn
      description: Defines information about the data source used for model inference.
    ModelTrainingDataChannel:
      type: object
      properties:
        mlInputChannelArn:
          allOf:
          - $ref: '#/components/schemas/MLInputChannelArn'
          description: The Amazon Resource Name (ARN) of the ML input channel for
            this model training data channel.
        channelName:
          allOf:
          - $ref: '#/components/schemas/ModelTrainingDataChannelName'
          description: The name of the training data channel.
      required:
      - mlInputChannelArn
      - channelName
      description: Information about the model training data channel. A training data
        channel is a named data source that the training algorithms can consume.
    ModelTrainingDataChannelName:
      type: string
      pattern: ^[A-Za-z0-9\.\-_]+$
      minLength: 1
      maxLength: 64
    ModelTrainingDataChannels:
      type: array
      items:
        $ref: '#/components/schemas/ModelTrainingDataChannel'
    NameString:
      type: string
      pattern: ^(?!\s*$)[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t]*$
      minLength: 1
      maxLength: 63
    NextToken:
      type: string
      minLength: 1
      maxLength: 10240
    NoiseLevelType:
      type: string
      enum:
      - HIGH
      - MEDIUM
      - LOW
      - NONE
    ParameterKey:
      type: string
      pattern: ^[0-9a-zA-Z_]+$
      minLength: 1
      maxLength: 100
    ParameterMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ParameterValue'
    ParameterValue:
      type: string
      minLength: 0
      maxLength: 250
    PolicyExistenceCondition:
      type: string
      enum:
      - POLICY_MUST_EXIST
      - POLICY_MUST_NOT_EXIST
    PrivacyConfiguration:
      type: object
      properties:
        policies:
          allOf:
          - $ref: '#/components/schemas/PrivacyConfigurationPolicies'
          description: The privacy configuration policies for a configured model algorithm
            association.
      required:
      - policies
      description: Information about the privacy configuration for a configured model
        algorithm association.
    PrivacyConfigurationPolicies:
      type: object
      properties:
        trainedModels:
          allOf:
          - $ref: '#/components/schemas/TrainedModelsConfigurationPolicy'
          description: Specifies who will receive the trained models.
        trainedModelExports:
          allOf:
          - $ref: '#/components/schemas/TrainedModelExportsConfigurationPolicy'
          description: Specifies who will receive the trained model export.
        trainedModelInferenceJobs:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobsConfigurationPolicy'
          description: Specifies who will receive the trained model inference jobs.
      description: Information about the privacy configuration policies for a configured
        model algorithm association.
    ProtectedQueryInputParameters:
      type: object
      properties:
        sqlParameters:
          $ref: '#/components/schemas/ProtectedQuerySQLParameters'
        computeConfiguration:
          allOf:
          - $ref: '#/components/schemas/ComputeConfiguration'
          description: Provides configuration information for the workers that will
            perform the protected query.
      required:
      - sqlParameters
      description: Provides information necessary to perform the protected query.
    ProtectedQuerySQLParameters:
      type: object
      properties:
        queryString:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The query string to be submitted.
        analysisTemplateArn:
          allOf:
          - $ref: '#/components/schemas/AnalysisTemplateArn'
          description: The Amazon Resource Name (ARN) associated with the analysis
            template within a collaboration.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ParameterMap'
          description: The protected query SQL parameters.
      description: The parameters for the SQL type Protected Query.
    PutConfiguredAudienceModelPolicyRequest:
      type: object
      properties:
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            that the resource policy will govern.
        configuredAudienceModelPolicy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicy'
          description: The IAM resource policy.
        previousPolicyHash:
          allOf:
          - $ref: '#/components/schemas/Hash'
          description: A cryptographic hash of the contents of the policy used to
            prevent unexpected concurrent modification of the policy.
        policyExistenceCondition:
          allOf:
          - $ref: '#/components/schemas/PolicyExistenceCondition'
          description: Use this to prevent unexpected concurrent modification of the
            policy.
      required:
      - configuredAudienceModelArn
      - configuredAudienceModelPolicy
    PutConfiguredAudienceModelPolicyResponse:
      type: object
      properties:
        configuredAudienceModelPolicy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicy'
          description: The IAM resource policy.
        policyHash:
          allOf:
          - $ref: '#/components/schemas/Hash'
          description: A cryptographic hash of the contents of the policy used to
            prevent unexpected concurrent modification of the policy.
      required:
      - configuredAudienceModelPolicy
      - policyHash
    PutMLConfigurationRequest:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that is being configured.
        defaultOutputLocation:
          allOf:
          - $ref: '#/components/schemas/MLOutputConfiguration'
          description: The default Amazon S3 location where ML output is stored for
            the specified member.
      required:
      - membershipIdentifier
      - defaultOutputLocation
    RelevanceMetric:
      type: object
      properties:
        audienceSize:
          $ref: '#/components/schemas/AudienceSize'
        score:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The relevance score of the generated audience.
      required:
      - audienceSize
      description: The relevance score of a generated audience.
    RelevanceMetrics:
      type: array
      items:
        $ref: '#/components/schemas/RelevanceMetric'
    ResourceConfig:
      type: object
      properties:
        instanceCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of resources that are used to train the model.
        instanceType:
          allOf:
          - $ref: '#/components/schemas/InstanceType'
          description: The instance type that is used to train the model.
        volumeSizeInGB:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum size of the instance that is used to train the
            model.
      required:
      - instanceType
      - volumeSizeInGB
      description: Information about the EC2 resources that are used to train the
        model.
    ResourceDescription:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t\r\n]*$
      maxLength: 255
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The resource you are requesting does not exist.
    ResourcePolicy:
      type: string
      minLength: 1
      maxLength: 20480
    S3ConfigMap:
      type: object
      properties:
        s3Uri:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: The Amazon S3 location URI.
      required:
      - s3Uri
      description: Provides information about an Amazon S3 bucket and path.
    S3Path:
      type: string
      pattern: ^s3://.+$
      minLength: 1
      maxLength: 1285
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: You have exceeded your service quota.
    SharedAudienceMetrics:
      type: string
      enum:
      - ALL
      - NONE
    StartAudienceExportJobRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the audience export job.
        audienceGenerationJobArn:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobArn'
          description: The Amazon Resource Name (ARN) of the audience generation job
            that you want to export.
        audienceSize:
          $ref: '#/components/schemas/AudienceSize'
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the audience export job.
      required:
      - name
      - audienceGenerationJobArn
      - audienceSize
    StartAudienceGenerationJobRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the audience generation job.
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            that is used for this audience generation job.
        seedAudience:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobDataSource'
          description: The seed audience that is used to generate the audience.
        includeSeedInOutput:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Whether the seed audience is included in the audience generation
            output.
        collaborationId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The identifier of the collaboration that contains the audience
            generation job.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the audience generation job.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you apply to the resource to help\
            \ you categorize and organize them. Each tag consists of a key and an\
            \ optional value, both of which you define.\n\nThe following basic restrictions\
            \ apply to tags:\n\n  * Maximum number of tags per resource - 50.\n\n\
            \  * For each resource, each tag key must be unique, and each tag key\
            \ can have only one value.\n\n  * Maximum key length - 128 Unicode characters\
            \ in UTF-8.\n\n  * Maximum value length - 256 Unicode characters in UTF-8.\n\
            \n  * If your tagging schema is used across multiple services and resources,\
            \ remember that other services may have restrictions on allowed characters.\
            \ Generally allowed characters are: letters, numbers, and spaces representable\
            \ in UTF-8, and the following characters: + - = . _ : / @.\n\n  * Tag\
            \ keys and values are case sensitive.\n\n  * Do not use aws:, AWS:, or\
            \ any upper or lowercase combination of such as a prefix for keys as it\
            \ is reserved for AWS use. You cannot edit or delete tag keys with this\
            \ prefix. Values can have this prefix. If a tag value has aws as its prefix\
            \ but the key does not, then Clean Rooms ML considers it to be a user\
            \ tag and will count against the limit of 50 tags. Tags with only the\
            \ key prefix of aws do not count against your tags per resource limit."
      required:
      - name
      - configuredAudienceModelArn
      - seedAudience
    StartAudienceGenerationJobResponse:
      type: object
      properties:
        audienceGenerationJobArn:
          allOf:
          - $ref: '#/components/schemas/AudienceGenerationJobArn'
          description: The Amazon Resource Name (ARN) of the audience generation job.
      required:
      - audienceGenerationJobArn
    StartTrainedModelExportJobRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model export job.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model that you
            want to export.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that is receiving the exported
            trained model artifacts.
        outputConfiguration:
          allOf:
          - $ref: '#/components/schemas/TrainedModelExportOutputConfiguration'
          description: The output configuration information for the trained model
            export job.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model export job.
      required:
      - name
      - trainedModelArn
      - membershipIdentifier
      - outputConfiguration
    StartTrainedModelInferenceJobRequest:
      type: object
      properties:
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the trained
            model inference job.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model inference job.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model that is
            used for this trained model inference job.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that is used for this trained model inference job.
        resourceConfig:
          allOf:
          - $ref: '#/components/schemas/InferenceResourceConfig'
          description: Defines the resource configuration for the trained model inference
            job.
        outputConfiguration:
          allOf:
          - $ref: '#/components/schemas/InferenceOutputConfiguration'
          description: Defines the output configuration information for the trained
            model inference job.
        dataSource:
          allOf:
          - $ref: '#/components/schemas/ModelInferenceDataSource'
          description: Defines the data source that is used for the trained model
            inference job.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model inference job.
        containerExecutionParameters:
          allOf:
          - $ref: '#/components/schemas/InferenceContainerExecutionParameters'
          description: The execution parameters for the container.
        environment:
          allOf:
          - $ref: '#/components/schemas/InferenceEnvironmentMap'
          description: The environment variables to set in the Docker container.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key. This key is
            used to encrypt and decrypt customer-owned data in the ML inference job
            and associated data.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you apply to the resource to help\
            \ you categorize and organize them. Each tag consists of a key and an\
            \ optional value, both of which you define.\n\nThe following basic restrictions\
            \ apply to tags:\n\n  * Maximum number of tags per resource - 50.\n\n\
            \  * For each resource, each tag key must be unique, and each tag key\
            \ can have only one value.\n\n  * Maximum key length - 128 Unicode characters\
            \ in UTF-8.\n\n  * Maximum value length - 256 Unicode characters in UTF-8.\n\
            \n  * If your tagging schema is used across multiple services and resources,\
            \ remember that other services may have restrictions on allowed characters.\
            \ Generally allowed characters are: letters, numbers, and spaces representable\
            \ in UTF-8, and the following characters: + - = . _ : / @.\n\n  * Tag\
            \ keys and values are case sensitive.\n\n  * Do not use aws:, AWS:, or\
            \ any upper or lowercase combination of such as a prefix for keys as it\
            \ is reserved for AWS use. You cannot edit or delete tag keys with this\
            \ prefix. Values can have this prefix. If a tag value has aws as its prefix\
            \ but the key does not, then Clean Rooms ML considers it to be a user\
            \ tag and will count against the limit of 50 tags. Tags with only the\
            \ key prefix of aws do not count against your tags per resource limit."
      required:
      - membershipIdentifier
      - name
      - trainedModelArn
      - resourceConfig
      - outputConfiguration
      - dataSource
    StartTrainedModelInferenceJobResponse:
      type: object
      properties:
        trainedModelInferenceJobArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobArn'
          description: The Amazon Resource Name (ARN) of the trained model inference
            job.
      required:
      - trainedModelInferenceJobArn
    StatusDetails:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The status code that was returned. The status code is intended
            for programmatic error handling. Clean Rooms ML will not change the status
            code for existing error conditions.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message that was returned. The message is intended
            for human consumption and can change at any time. Use the `statusCode`
            for programmatic error handling.
      description: Details about the status of a resource.
    StoppingCondition:
      type: object
      properties:
        maxRuntimeInSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum amount of time, in seconds, that model training
            can run before it is terminated.
      description: The criteria used to stop model training.
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeys:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagOnCreatePolicy:
      type: string
      enum:
      - FROM_PARENT_RESOURCE
      - NONE
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TaggableArn'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to assign tags.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: "The optional metadata that you apply to the resource to help\
            \ you categorize and organize them. Each tag consists of a key and an\
            \ optional value, both of which you define.\n\nThe following basic restrictions\
            \ apply to tags:\n\n  * Maximum number of tags per resource - 50.\n\n\
            \  * For each resource, each tag key must be unique, and each tag key\
            \ can have only one value.\n\n  * Maximum key length - 128 Unicode characters\
            \ in UTF-8.\n\n  * Maximum value length - 256 Unicode characters in UTF-8.\n\
            \n  * If your tagging schema is used across multiple services and resources,\
            \ remember that other services may have restrictions on allowed characters.\
            \ Generally allowed characters are: letters, numbers, and spaces representable\
            \ in UTF-8, and the following characters: + - = . _ : / @.\n\n  * Tag\
            \ keys and values are case sensitive.\n\n  * Do not use aws:, AWS:, or\
            \ any upper or lowercase combination of such as a prefix for keys as it\
            \ is reserved for AWS use. You cannot edit or delete tag keys with this\
            \ prefix. Values can have this prefix. If a tag value has aws as its prefix\
            \ but the key does not, then Clean Rooms considers it to be a user tag\
            \ and will count against the limit of 50 tags. Tags with only the key\
            \ prefix of aws do not count against your tags per resource limit."
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TaggableArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:(membership/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/(configured-model-algorithm-association|trained-model|trained-model-inference-job|ml-input-channel)|training-dataset|audience-model|configured-audience-model|audience-generation-job|configured-model-algorithm|configured-model-algorithm-association|trained-model|trained-model-inference-job)/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    TrainedModelArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:(membership/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/)?trained-model/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    TrainedModelExportFileType:
      type: string
      enum:
      - MODEL
      - OUTPUT
    TrainedModelExportFileTypeList:
      type: array
      items:
        $ref: '#/components/schemas/TrainedModelExportFileType'
    TrainedModelExportJobArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:trained-model-export-job/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    TrainedModelExportJobStatus:
      type: string
      enum:
      - CREATE_PENDING
      - CREATE_IN_PROGRESS
      - CREATE_FAILED
      - ACTIVE
    TrainedModelExportOutputConfiguration:
      type: object
      properties:
        members:
          allOf:
          - $ref: '#/components/schemas/TrainedModelExportReceiverMembers'
          description: The members that will received the exported trained model output.
      required:
      - members
      description: Information about the output of the trained model export job.
    TrainedModelExportReceiverMember:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account ID of the member who will receive trained model
            exports.
      required:
      - accountId
      description: Provides information about the member who will receive trained
        model exports.
    TrainedModelExportReceiverMembers:
      type: array
      items:
        $ref: '#/components/schemas/TrainedModelExportReceiverMember'
    TrainedModelExportsConfigurationPolicy:
      type: object
      properties:
        maxSize:
          allOf:
          - $ref: '#/components/schemas/TrainedModelExportsMaxSize'
          description: The maximum size of the data that can be exported.
        filesToExport:
          allOf:
          - $ref: '#/components/schemas/TrainedModelExportFileTypeList'
          description: The files that are exported during the trained model export
            job.
      required:
      - maxSize
      - filesToExport
      description: Information about how the trained model exports are configured.
    TrainedModelExportsMaxSize:
      type: object
      properties:
        unit:
          allOf:
          - $ref: '#/components/schemas/TrainedModelExportsMaxSizeUnitType'
          description: The unit of measurement for the data size.
        value:
          allOf:
          - $ref: '#/components/schemas/TrainedModelExportsMaxSizeValue'
          description: The maximum size of the dataset to export.
      required:
      - unit
      - value
      description: The maximum size of the trained model metrics that can be exported.
        If the trained model metrics dataset is larger than this value, it will not
        be exported.
    TrainedModelExportsMaxSizeUnitType:
      type: string
      enum:
      - GB
    TrainedModelExportsMaxSizeValue:
      type: number
      format: double
      minimum: 0.01
      maximum: 10.0
    TrainedModelInferenceJobArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:(membership/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/)?trained-model-inference-job/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    TrainedModelInferenceJobList:
      type: array
      items:
        $ref: '#/components/schemas/TrainedModelInferenceJobSummary'
    TrainedModelInferenceJobStatus:
      type: string
      enum:
      - CREATE_PENDING
      - CREATE_IN_PROGRESS
      - CREATE_FAILED
      - ACTIVE
      - CANCEL_PENDING
      - CANCEL_IN_PROGRESS
      - CANCEL_FAILED
      - INACTIVE
    TrainedModelInferenceJobSummary:
      type: object
      properties:
        trainedModelInferenceJobArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobArn'
          description: The Amazon Resource Name (ARN) of the trained model inference
            job.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that is used for the trained model inference job.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the membership that contains the trained
            model inference job.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model that is
            used for the trained model inference job.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            trained model inference job.
        status:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceJobStatus'
          description: The status of the trained model inference job.
        outputConfiguration:
          allOf:
          - $ref: '#/components/schemas/InferenceOutputConfiguration'
          description: The output configuration information of the trained model job.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model inference job.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model inference job.
        metricsStatus:
          allOf:
          - $ref: '#/components/schemas/MetricsStatus'
          description: The metric status of the trained model inference job.
        metricsStatusDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the metrics status for the trained model inference
            job.
        logsStatus:
          allOf:
          - $ref: '#/components/schemas/LogsStatus'
          description: The log status of the trained model inference job.
        logsStatusDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Details about the log status for the trained model inference
            job.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the trained model inference job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the trained model inference job
            was updated.
      required:
      - trainedModelInferenceJobArn
      - membershipIdentifier
      - trainedModelArn
      - collaborationIdentifier
      - status
      - outputConfiguration
      - name
      - createTime
      - updateTime
      description: Provides information about the trained model inference job.
    TrainedModelInferenceJobsConfigurationPolicy:
      type: object
      properties:
        containerLogs:
          allOf:
          - $ref: '#/components/schemas/LogsConfigurationPolicyList'
          description: The logs container for the trained model inference job.
        maxOutputSize:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceMaxOutputSize'
          description: The maximum allowed size of the output of the trained model
            inference job.
      description: Provides configuration information for the trained model inference
        job.
    TrainedModelInferenceMaxOutputSize:
      type: object
      properties:
        unit:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceMaxOutputSizeUnitType'
          description: The measurement unit to use.
        value:
          allOf:
          - $ref: '#/components/schemas/TrainedModelInferenceMaxOutputSizeValue'
          description: The maximum output size value.
      required:
      - unit
      - value
      description: Information about the maximum output size for a trained model inference
        job.
    TrainedModelInferenceMaxOutputSizeUnitType:
      type: string
      enum:
      - GB
    TrainedModelInferenceMaxOutputSizeValue:
      type: number
      format: double
      minimum: 0.01
      maximum: 10.0
    TrainedModelList:
      type: array
      items:
        $ref: '#/components/schemas/TrainedModelSummary'
    TrainedModelStatus:
      type: string
      enum:
      - CREATE_PENDING
      - CREATE_IN_PROGRESS
      - CREATE_FAILED
      - ACTIVE
      - DELETE_PENDING
      - DELETE_IN_PROGRESS
      - DELETE_FAILED
      - INACTIVE
      - CANCEL_PENDING
      - CANCEL_IN_PROGRESS
      - CANCEL_FAILED
    TrainedModelSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the trained model was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the trained model was updated.
        trainedModelArn:
          allOf:
          - $ref: '#/components/schemas/TrainedModelArn'
          description: The Amazon Resource Name (ARN) of the trained model.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the trained model.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the trained model.
        membershipIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The membership ID of the member that created the trained model.
        collaborationIdentifier:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The collaboration ID of the collaboration that contains the
            trained model.
        status:
          allOf:
          - $ref: '#/components/schemas/TrainedModelStatus'
          description: The status of the trained model.
        configuredModelAlgorithmAssociationArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredModelAlgorithmAssociationArn'
          description: The Amazon Resource Name (ARN) of the configured model algorithm
            association that was used to create this trained model.
      required:
      - createTime
      - updateTime
      - trainedModelArn
      - name
      - membershipIdentifier
      - collaborationIdentifier
      - status
      - configuredModelAlgorithmAssociationArn
      description: Summary information about the trained model.
    TrainedModelsConfigurationPolicy:
      type: object
      properties:
        containerLogs:
          allOf:
          - $ref: '#/components/schemas/LogsConfigurationPolicyList'
          description: The container for the logs of the trained model.
        containerMetrics:
          allOf:
          - $ref: '#/components/schemas/MetricsConfigurationPolicy'
          description: The container for the metrics of the trained model.
      description: The configuration policy for the trained models.
    TrainingDatasetArn:
      type: string
      pattern: ^arn:aws[-a-z]*:cleanrooms-ml:[-a-z0-9]+:[0-9]{12}:training-dataset/[-a-zA-Z0-9_/.]+$
      minLength: 20
      maxLength: 2048
    TrainingDatasetList:
      type: array
      items:
        $ref: '#/components/schemas/TrainingDatasetSummary'
    TrainingDatasetStatus:
      type: string
      enum:
      - ACTIVE
    TrainingDatasetSummary:
      type: object
      properties:
        createTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the training dataset was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent time at which the training dataset was updated.
        trainingDatasetArn:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetArn'
          description: The Amazon Resource Name (ARN) of the training dataset.
        name:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The name of the training dataset.
        status:
          allOf:
          - $ref: '#/components/schemas/TrainingDatasetStatus'
          description: The status of the training dataset.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The description of the training dataset.
      required:
      - createTime
      - updateTime
      - trainingDatasetArn
      - name
      - status
      description: Provides information about the training dataset.
    UUID:
      type: string
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      minLength: 36
      maxLength: 36
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TaggableArn'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to remove tags from.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeys'
          description: The key values of tags that you want to remove.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateConfiguredAudienceModelRequest:
      type: object
      properties:
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            that you want to update.
        outputConfig:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelOutputConfig'
          description: The new output configuration.
        audienceModelArn:
          allOf:
          - $ref: '#/components/schemas/AudienceModelArn'
          description: The Amazon Resource Name (ARN) of the new audience model that
            you want to use.
        sharedAudienceMetrics:
          allOf:
          - $ref: '#/components/schemas/MetricsList'
          description: The new value for whether to share audience metrics.
        minMatchingSeedSize:
          allOf:
          - $ref: '#/components/schemas/MinMatchingSeedSize'
          description: The minimum number of users from the seed audience that must
            match with users in the training data of the audience model.
        audienceSizeConfig:
          allOf:
          - $ref: '#/components/schemas/AudienceSizeConfig'
          description: The new audience size configuration.
        description:
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
          description: The new description of the configured audience model.
      required:
      - configuredAudienceModelArn
    UpdateConfiguredAudienceModelResponse:
      type: object
      properties:
        configuredAudienceModelArn:
          allOf:
          - $ref: '#/components/schemas/ConfiguredAudienceModelArn'
          description: The Amazon Resource Name (ARN) of the configured audience model
            that was updated.
      required:
      - configuredAudienceModelArn
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The request parameters for this request are incorrect.
    WorkerComputeConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/WorkerComputeType'
          description: The instance type of the compute workers that are used.
        number:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of compute workers that are used.
      description: Configuration information about the compute workers that perform
        the transform job.
    WorkerComputeType:
      type: string
      enum:
      - CR.1X
      - CR.4X
