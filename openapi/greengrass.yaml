openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: greengrass
  x-aws-serviceName: greengrass
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2017-06-07'
  title: AWS Greengrass
  description: |-
    AWS IoT Greengrass seamlessly extends AWS onto physical devices so they can act locally on the data they generate, while still using the cloud for management, analytics, and durable storage. AWS IoT Greengrass ensures your devices can respond quickly to local events and operate with intermittent connectivity. AWS IoT Greengrass minimizes the cost of transmitting data to the cloud by allowing you to author AWS Lambda functions that execute locally.
servers:
- description: The AWS Greengrass regional endpoint
  url: https://greengrass.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /greengrass/groups/{GroupId}/role:
    put:
      operationId: AssociateRoleToGroup
      description: |-
        Associates a role with a group. Your Greengrass core will use the role to access AWS cloud services. The role's permissions should allow Greengrass core Lambda functions to perform actions against the cloud.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                RoleArn:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
    delete:
      operationId: DisassociateRoleFromGroup
      description: |-
        Disassociates the role from a group.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
    get:
      operationId: GetAssociatedRole
      description: |-
        Retrieves the role associated with a particular group.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
  /greengrass/servicerole:
    put:
      operationId: AssociateServiceRoleToAccount
      description: |-
        Associates a role with your account. AWS IoT Greengrass will use the role to access your Lambda functions and AWS IoT resources. This is necessary for deployments to succeed. The role must have at least minimum permissions in the policy ''AWSGreengrassResourceAccessRolePolicy''.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                RoleArn:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
    delete:
      operationId: DisassociateServiceRoleFromAccount
      description: |-
        Disassociates the service role from your account. Without a service role, deployments will not work.
      parameters: []
      responses:
        '200': {}
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
    get:
      operationId: GetServiceRoleForAccount
      description: |-
        Retrieves the service role that is attached to your account.
      parameters: []
      responses:
        '200': {}
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
  /greengrass/definition/connectors:
    post:
      operationId: CreateConnectorDefinition
      description: |-
        Creates a connector definition. You may provide the initial version of the connector definition now or use ''CreateConnectorDefinitionVersion'' at a later time.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                InitialVersion:
                  $ref: '#/components/schemas/ConnectorDefinitionVersion'
                Name:
                  $ref: '#/components/schemas/__string'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListConnectorDefinitions
      description: |-
        Retrieves a list of connector definitions.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
  /greengrass/definition/connectors/{ConnectorDefinitionId}/versions:
    post:
      operationId: CreateConnectorDefinitionVersion
      description: |-
        Creates a version of a connector definition which has already been defined.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: ConnectorDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Connectors:
                  $ref: '#/components/schemas/__listOfConnector'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListConnectorDefinitionVersions
      description: |-
        Lists the versions of a connector definition, which are containers for connectors. Connectors run on the Greengrass core and contain built-in integration with local infrastructure, device protocols, AWS, and other cloud services.
      parameters:
      - name: ConnectorDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/cores:
    post:
      operationId: CreateCoreDefinition
      description: |-
        Creates a core definition. You may provide the initial version of the core definition now or use ''CreateCoreDefinitionVersion'' at a later time. Greengrass groups must each contain exactly one Greengrass core.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                InitialVersion:
                  $ref: '#/components/schemas/CoreDefinitionVersion'
                Name:
                  $ref: '#/components/schemas/__string'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListCoreDefinitions
      description: |-
        Retrieves a list of core definitions.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
  /greengrass/definition/cores/{CoreDefinitionId}/versions:
    post:
      operationId: CreateCoreDefinitionVersion
      description: |-
        Creates a version of a core definition that has already been defined. Greengrass groups must each contain exactly one Greengrass core.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: CoreDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Cores:
                  $ref: '#/components/schemas/__listOfCore'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListCoreDefinitionVersions
      description: |-
        Lists the versions of a core definition.
      parameters:
      - name: CoreDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/groups/{GroupId}/deployments:
    post:
      operationId: CreateDeployment
      description: |-
        Creates a deployment. ''CreateDeployment'' requests are idempotent with respect to the ''X-Amzn-Client-Token'' token and the request parameters.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DeploymentId:
                  $ref: '#/components/schemas/__string'
                DeploymentType:
                  $ref: '#/components/schemas/DeploymentType'
                GroupVersionId:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListDeployments
      description: |-
        Returns a history of deployments for the group.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/devices:
    post:
      operationId: CreateDeviceDefinition
      description: |-
        Creates a device definition. You may provide the initial version of the device definition now or use ''CreateDeviceDefinitionVersion'' at a later time.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                InitialVersion:
                  $ref: '#/components/schemas/DeviceDefinitionVersion'
                Name:
                  $ref: '#/components/schemas/__string'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListDeviceDefinitions
      description: |-
        Retrieves a list of device definitions.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
  /greengrass/definition/devices/{DeviceDefinitionId}/versions:
    post:
      operationId: CreateDeviceDefinitionVersion
      description: |-
        Creates a version of a device definition that has already been defined.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: DeviceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Devices:
                  $ref: '#/components/schemas/__listOfDevice'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListDeviceDefinitionVersions
      description: |-
        Lists the versions of a device definition.
      parameters:
      - name: DeviceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/functions:
    post:
      operationId: CreateFunctionDefinition
      description: |-
        Creates a Lambda function definition which contains a list of Lambda functions and their configurations to be used in a group. You can create an initial version of the definition by providing a list of Lambda functions and their configurations now, or use ''CreateFunctionDefinitionVersion'' later.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                InitialVersion:
                  $ref: '#/components/schemas/FunctionDefinitionVersion'
                Name:
                  $ref: '#/components/schemas/__string'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListFunctionDefinitions
      description: |-
        Retrieves a list of Lambda function definitions.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
  /greengrass/definition/functions/{FunctionDefinitionId}/versions:
    post:
      operationId: CreateFunctionDefinitionVersion
      description: |-
        Creates a version of a Lambda function definition that has already been defined.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: FunctionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DefaultConfig:
                  $ref: '#/components/schemas/FunctionDefaultConfig'
                Functions:
                  $ref: '#/components/schemas/__listOfFunction'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListFunctionDefinitionVersions
      description: |-
        Lists the versions of a Lambda function definition.
      parameters:
      - name: FunctionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/groups:
    post:
      operationId: CreateGroup
      description: |-
        Creates a group. You may provide the initial version of the group or use ''CreateGroupVersion'' at a later time. Tip: You can use the ''gg_group_setup'' package (https://github.com/awslabs/aws-greengrass-group-setup) as a library or command-line application to create and deploy Greengrass groups.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                InitialVersion:
                  $ref: '#/components/schemas/GroupVersion'
                Name:
                  $ref: '#/components/schemas/__string'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListGroups
      description: |-
        Retrieves a list of groups.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
  /greengrass/groups/{GroupId}/certificateauthorities:
    post:
      operationId: CreateGroupCertificateAuthority
      description: |-
        Creates a CA for the group. If a CA already exists, it will rotate the existing CA.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
    get:
      operationId: ListGroupCertificateAuthorities
      description: |-
        Retrieves the current CAs for a group.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
  /greengrass/groups/{GroupId}/versions:
    post:
      operationId: CreateGroupVersion
      description: |-
        Creates a version of a group which has already been defined.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ConnectorDefinitionVersionArn:
                  $ref: '#/components/schemas/__string'
                CoreDefinitionVersionArn:
                  $ref: '#/components/schemas/__string'
                DeviceDefinitionVersionArn:
                  $ref: '#/components/schemas/__string'
                FunctionDefinitionVersionArn:
                  $ref: '#/components/schemas/__string'
                LoggerDefinitionVersionArn:
                  $ref: '#/components/schemas/__string'
                ResourceDefinitionVersionArn:
                  $ref: '#/components/schemas/__string'
                SubscriptionDefinitionVersionArn:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListGroupVersions
      description: |-
        Lists the versions of a group.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/loggers:
    post:
      operationId: CreateLoggerDefinition
      description: |-
        Creates a logger definition. You may provide the initial version of the logger definition now or use ''CreateLoggerDefinitionVersion'' at a later time.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                InitialVersion:
                  $ref: '#/components/schemas/LoggerDefinitionVersion'
                Name:
                  $ref: '#/components/schemas/__string'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListLoggerDefinitions
      description: |-
        Retrieves a list of logger definitions.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
  /greengrass/definition/loggers/{LoggerDefinitionId}/versions:
    post:
      operationId: CreateLoggerDefinitionVersion
      description: |-
        Creates a version of a logger definition that has already been defined.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: LoggerDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Loggers:
                  $ref: '#/components/schemas/__listOfLogger'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListLoggerDefinitionVersions
      description: |-
        Lists the versions of a logger definition.
      parameters:
      - name: LoggerDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/resources:
    post:
      operationId: CreateResourceDefinition
      description: |-
        Creates a resource definition which contains a list of resources to be used in a group. You can create an initial version of the definition by providing a list of resources now, or use ''CreateResourceDefinitionVersion'' later.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                InitialVersion:
                  $ref: '#/components/schemas/ResourceDefinitionVersion'
                Name:
                  $ref: '#/components/schemas/__string'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListResourceDefinitions
      description: |-
        Retrieves a list of resource definitions.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
  /greengrass/definition/resources/{ResourceDefinitionId}/versions:
    post:
      operationId: CreateResourceDefinitionVersion
      description: |-
        Creates a version of a resource definition that has already been defined.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: ResourceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Resources:
                  $ref: '#/components/schemas/__listOfResource'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListResourceDefinitionVersions
      description: |-
        Lists the versions of a resource definition.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: ResourceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/updates:
    post:
      operationId: CreateSoftwareUpdateJob
      description: |-
        Creates a software update for a core or group of cores (specified as an IoT thing group.) Use this to update the OTA Agent as well as the Greengrass core software. It makes use of the IoT Jobs feature which provides additional commands to manage a Greengrass core software update job.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                S3UrlSignerRole:
                  $ref: '#/components/schemas/S3UrlSignerRole'
                SoftwareToUpdate:
                  $ref: '#/components/schemas/SoftwareToUpdate'
                UpdateAgentLogLevel:
                  $ref: '#/components/schemas/UpdateAgentLogLevel'
                UpdateTargets:
                  $ref: '#/components/schemas/UpdateTargets'
                UpdateTargetsArchitecture:
                  $ref: '#/components/schemas/UpdateTargetsArchitecture'
                UpdateTargetsOperatingSystem:
                  $ref: '#/components/schemas/UpdateTargetsOperatingSystem'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
  /greengrass/definition/subscriptions:
    post:
      operationId: CreateSubscriptionDefinition
      description: |-
        Creates a subscription definition. You may provide the initial version of the subscription definition now or use ''CreateSubscriptionDefinitionVersion'' at a later time.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                InitialVersion:
                  $ref: '#/components/schemas/SubscriptionDefinitionVersion'
                Name:
                  $ref: '#/components/schemas/__string'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListSubscriptionDefinitions
      description: |-
        Retrieves a list of subscription definitions.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
  /greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions:
    post:
      operationId: CreateSubscriptionDefinitionVersion
      description: |-
        Creates a version of a subscription definition which has already been defined.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: SubscriptionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Subscriptions:
                  $ref: '#/components/schemas/__listOfSubscription'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: ListSubscriptionDefinitionVersions
      description: |-
        Lists the versions of a subscription definition.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: SubscriptionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/connectors/{ConnectorDefinitionId}:
    delete:
      operationId: DeleteConnectorDefinition
      description: |-
        Deletes a connector definition.
      parameters:
      - name: ConnectorDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: GetConnectorDefinition
      description: |-
        Retrieves information about a connector definition.
      parameters:
      - name: ConnectorDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    put:
      operationId: UpdateConnectorDefinition
      description: |-
        Updates a connector definition.
      parameters:
      - name: ConnectorDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/cores/{CoreDefinitionId}:
    delete:
      operationId: DeleteCoreDefinition
      description: |-
        Deletes a core definition.
      parameters:
      - name: CoreDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: GetCoreDefinition
      description: |-
        Retrieves information about a core definition version.
      parameters:
      - name: CoreDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    put:
      operationId: UpdateCoreDefinition
      description: |-
        Updates a core definition.
      parameters:
      - name: CoreDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/devices/{DeviceDefinitionId}:
    delete:
      operationId: DeleteDeviceDefinition
      description: |-
        Deletes a device definition.
      parameters:
      - name: DeviceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: GetDeviceDefinition
      description: |-
        Retrieves information about a device definition.
      parameters:
      - name: DeviceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    put:
      operationId: UpdateDeviceDefinition
      description: |-
        Updates a device definition.
      parameters:
      - name: DeviceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/functions/{FunctionDefinitionId}:
    delete:
      operationId: DeleteFunctionDefinition
      description: |-
        Deletes a Lambda function definition.
      parameters:
      - name: FunctionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: GetFunctionDefinition
      description: |-
        Retrieves information about a Lambda function definition, including its creation time and latest version.
      parameters:
      - name: FunctionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    put:
      operationId: UpdateFunctionDefinition
      description: |-
        Updates a Lambda function definition.
      parameters:
      - name: FunctionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/groups/{GroupId}:
    delete:
      operationId: DeleteGroup
      description: |-
        Deletes a group.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: GetGroup
      description: |-
        Retrieves information about a group.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    put:
      operationId: UpdateGroup
      description: |-
        Updates a group.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/loggers/{LoggerDefinitionId}:
    delete:
      operationId: DeleteLoggerDefinition
      description: |-
        Deletes a logger definition.
      parameters:
      - name: LoggerDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: GetLoggerDefinition
      description: |-
        Retrieves information about a logger definition.
      parameters:
      - name: LoggerDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    put:
      operationId: UpdateLoggerDefinition
      description: |-
        Updates a logger definition.
      parameters:
      - name: LoggerDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/resources/{ResourceDefinitionId}:
    delete:
      operationId: DeleteResourceDefinition
      description: |-
        Deletes a resource definition.
      parameters:
      - name: ResourceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: GetResourceDefinition
      description: |-
        Retrieves information about a resource definition, including its creation time and latest version.
      parameters:
      - name: ResourceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    put:
      operationId: UpdateResourceDefinition
      description: |-
        Updates a resource definition.
      parameters:
      - name: ResourceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/subscriptions/{SubscriptionDefinitionId}:
    delete:
      operationId: DeleteSubscriptionDefinition
      description: |-
        Deletes a subscription definition.
      parameters:
      - name: SubscriptionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    get:
      operationId: GetSubscriptionDefinition
      description: |-
        Retrieves information about a subscription definition.
      parameters:
      - name: SubscriptionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    put:
      operationId: UpdateSubscriptionDefinition
      description: |-
        Updates a subscription definition.
      parameters:
      - name: SubscriptionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/bulk/deployments/{BulkDeploymentId}/status:
    get:
      operationId: GetBulkDeploymentStatus
      description: |-
        Returns the status of a bulk deployment.
      parameters:
      - name: BulkDeploymentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/things/{ThingName}/connectivityInfo:
    get:
      operationId: GetConnectivityInfo
      description: |-
        Retrieves the connectivity information for a core.
      parameters:
      - name: ThingName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
    put:
      operationId: UpdateConnectivityInfo
      description: |-
        Updates the connectivity information for the core. Any devices that belong to the group which has this core will receive this information in order to find the location of the core and connect to it.
      parameters:
      - name: ThingName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ConnectivityInfo:
                  $ref: '#/components/schemas/__listOfConnectivityInfo'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
  /greengrass/definition/connectors/{ConnectorDefinitionId}/versions/{ConnectorDefinitionVersionId}:
    get:
      operationId: GetConnectorDefinitionVersion
      description: |-
        Retrieves information about a connector definition version, including the connectors that the version contains. Connectors are prebuilt modules that interact with local infrastructure, device protocols, AWS, and other cloud services.
      parameters:
      - name: ConnectorDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: ConnectorDefinitionVersionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}:
    get:
      operationId: GetCoreDefinitionVersion
      description: |-
        Retrieves information about a core definition version.
      parameters:
      - name: CoreDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: CoreDefinitionVersionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/groups/{GroupId}/deployments/{DeploymentId}/status:
    get:
      operationId: GetDeploymentStatus
      description: |-
        Returns the status of a deployment.
      parameters:
      - name: DeploymentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}:
    get:
      operationId: GetDeviceDefinitionVersion
      description: |-
        Retrieves information about a device definition version.
      parameters:
      - name: DeviceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: DeviceDefinitionVersionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}:
    get:
      operationId: GetFunctionDefinitionVersion
      description: |-
        Retrieves information about a Lambda function definition version, including which Lambda functions are included in the version and their configurations.
      parameters:
      - name: FunctionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: FunctionDefinitionVersionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}:
    get:
      operationId: GetGroupCertificateAuthority
      description: |-
        Retreives the CA associated with a group. Returns the public key of the CA.
      parameters:
      - name: CertificateAuthorityId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
  /greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry:
    get:
      operationId: GetGroupCertificateConfiguration
      description: |-
        Retrieves the current configuration for the CA used by the group.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
    put:
      operationId: UpdateGroupCertificateConfiguration
      description: |-
        Updates the Certificate expiry time for a group.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CertificateExpiryInMilliseconds:
                  $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
  /greengrass/groups/{GroupId}/versions/{GroupVersionId}:
    get:
      operationId: GetGroupVersion
      description: |-
        Retrieves information about a group version.
      parameters:
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: GroupVersionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}:
    get:
      operationId: GetLoggerDefinitionVersion
      description: |-
        Retrieves information about a logger definition version.
      parameters:
      - name: LoggerDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: LoggerDefinitionVersionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/resources/{ResourceDefinitionId}/versions/{ResourceDefinitionVersionId}:
    get:
      operationId: GetResourceDefinitionVersion
      description: |-
        Retrieves information about a resource definition version, including which resources are included in the version.
      parameters:
      - name: ResourceDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: ResourceDefinitionVersionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}:
    get:
      operationId: GetSubscriptionDefinitionVersion
      description: |-
        Retrieves information about a subscription definition version.
      parameters:
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: SubscriptionDefinitionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: SubscriptionDefinitionVersionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/things/{ThingName}/runtimeconfig:
    get:
      operationId: GetThingRuntimeConfiguration
      description: |-
        Get the runtime configuration of a thing.
      parameters:
      - name: ThingName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
    put:
      operationId: UpdateThingRuntimeConfiguration
      description: |-
        Updates the runtime configuration of a thing.
      parameters:
      - name: ThingName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TelemetryConfiguration:
                  $ref: '#/components/schemas/TelemetryConfigurationUpdate'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
  /greengrass/bulk/deployments/{BulkDeploymentId}/detailed-reports:
    get:
      operationId: ListBulkDeploymentDetailedReports
      description: |-
        Gets a paginated list of the deployments that have been started in a bulk deployment operation, and their current deployment status.
      parameters:
      - name: BulkDeploymentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/bulk/deployments:
    get:
      operationId: ListBulkDeployments
      description: |-
        Returns a list of bulk deployments.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    post:
      operationId: StartBulkDeployment
      description: |-
        Deploys multiple groups in one operation. This action starts the bulk deployment of a specified set of group versions. Each group version deployment will be triggered with an adaptive rate that has a fixed upper limit. We recommend that you include an ''X-Amzn-Client-Token'' token in every ''StartBulkDeployment'' request. These requests are idempotent with respect to the token and the request parameters.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ExecutionRoleArn:
                  $ref: '#/components/schemas/__string'
                InputFileUri:
                  $ref: '#/components/schemas/__string'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /tags/{ResourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Retrieves a list of resource tags for a resource arn.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    post:
      operationId: TagResource
      description: |-
        Adds tags to a Greengrass resource. Valid resources are 'Group', 'ConnectorDefinition', 'CoreDefinition', 'DeviceDefinition', 'FunctionDefinition', 'LoggerDefinition', 'SubscriptionDefinition', 'ResourceDefinition', and 'BulkDeployment'.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '204': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
    delete:
      operationId: UntagResource
      description: |-
        Remove resource tags from a Greengrass Resource.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/__listOf__string'
      responses:
        '204': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/groups/{GroupId}/deployments/$reset:
    post:
      operationId: ResetDeployments
      description: |-
        Resets a group's deployments.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: GroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Force:
                  $ref: '#/components/schemas/__boolean'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
  /greengrass/bulk/deployments/{BulkDeploymentId}/$stop:
    put:
      operationId: StopBulkDeployment
      description: |-
        Stops the execution of a bulk deployment. This action returns a status of ''Stopping'' until the deployment is stopped. You cannot start a new bulk deployment while a previous deployment is in the ''Stopping'' state. This action doesn't rollback completed deployments or cancel pending deployments.
      parameters:
      - name: BulkDeploymentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            General error information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
components:
  schemas:
    AssociateRoleToGroupRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the role you wish to associate with this group.
            The existence of the role is not validated.
      required:
      - GroupId
      - RoleArn
    AssociateRoleToGroupResponse:
      type: object
      properties:
        AssociatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the role ARN
            was associated with the group.
    AssociateServiceRoleToAccountRequest:
      type: object
      properties:
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the service role you wish to associate with your
            account.
      required:
      - RoleArn
    AssociateServiceRoleToAccountResponse:
      type: object
      properties:
        AssociatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time when the service role was associated with the account.
    BadRequestException:
      type: object
      properties:
        ErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: Details about the error.
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A message containing information about the error.
      description: General error information.
    BulkDeployment:
      type: object
      properties:
        BulkDeploymentArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the bulk deployment.
        BulkDeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the bulk deployment.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in ISO format, when the deployment was created.
      description: Information about a bulk deployment. You cannot start a new bulk
        deployment while another one is still running or in a non-terminal state.
    BulkDeploymentMetrics:
      type: object
      properties:
        InvalidInputRecords:
          allOf:
          - $ref: '#/components/schemas/__integer'
          description: The total number of records that returned a non-retryable error.
            For example, this can occur if a group record from the input file uses
            an invalid format or specifies a nonexistent group version, or if the
            execution role doesn't grant permission to deploy a group or group version.
        RecordsProcessed:
          allOf:
          - $ref: '#/components/schemas/__integer'
          description: The total number of group records from the input file that
            have been processed so far, or attempted.
        RetryAttempts:
          allOf:
          - $ref: '#/components/schemas/__integer'
          description: The total number of deployment attempts that returned a retryable
            error. For example, a retry is triggered if the attempt to deploy a group
            returns a throttling error. ''StartBulkDeployment'' retries a group deployment
            up to five times.
      description: Relevant metrics on input records processed during bulk deployment.
    BulkDeploymentResult:
      type: object
      properties:
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in ISO format, when the deployment was created.
        DeploymentArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the group deployment.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the group deployment.
        DeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: 'The current status of the group deployment: ''''InProgress'''',
            ''''Building'''', ''''Success'''', or ''''Failure''''.'
        DeploymentType:
          allOf:
          - $ref: '#/components/schemas/DeploymentType'
          description: The type of the deployment.
        ErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: Details about the error.
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The error message for a failed deployment
        GroupArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the Greengrass group.
      description: Information about an individual group deployment in a bulk deployment
        operation.
    BulkDeploymentResults:
      type: array
      items:
        $ref: '#/components/schemas/BulkDeploymentResult'
    BulkDeploymentStatus:
      type: string
      enum:
      - Initializing
      - Running
      - Completed
      - Stopping
      - Stopped
      - Failed
      description: The current status of the bulk deployment.
    BulkDeployments:
      type: array
      items:
        $ref: '#/components/schemas/BulkDeployment'
    ConfigurationSyncStatus:
      type: string
      enum:
      - InSync
      - OutOfSync
    ConnectivityInfo:
      type: object
      properties:
        HostAddress:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The endpoint for the Greengrass core. Can be an IP address
            or DNS.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the connectivity information.
        Metadata:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Metadata for this endpoint.
        PortNumber:
          allOf:
          - $ref: '#/components/schemas/__integer'
          description: The port of the Greengrass core. Usually 8883.
      description: Information about a Greengrass core's connectivity.
    Connector:
      type: object
      properties:
        ConnectorArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the connector.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A descriptive or arbitrary ID for the connector. This value
            must be unique within the connector definition version. Max length is
            128 characters with pattern [a-zA-Z0-9:_-]+.
        Parameters:
          allOf:
          - $ref: '#/components/schemas/__mapOf__string'
          description: The parameters or configuration that the connector uses.
      required:
      - ConnectorArn
      - Id
      description: Information about a connector. Connectors run on the Greengrass
        core and contain built-in integration with local infrastructure, device protocols,
        AWS, and other cloud services.
    ConnectorDefinitionVersion:
      type: object
      properties:
        Connectors:
          allOf:
          - $ref: '#/components/schemas/__listOfConnector'
          description: A list of references to connectors in this version, with their
            corresponding configuration settings.
      description: Information about the connector definition version, which is a
        container for connectors.
    Core:
      type: object
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the certificate associated with the core.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A descriptive or arbitrary ID for the core. This value must
            be unique within the core definition version. Max length is 128 characters
            with pattern ''[a-zA-Z0-9:_-]+''.
        SyncShadow:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: If true, the core's local shadow is automatically synced with
            the cloud.
        ThingArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the thing which is the core.
      required:
      - CertificateArn
      - Id
      - ThingArn
      description: Information about a core.
    CoreDefinitionVersion:
      type: object
      properties:
        Cores:
          allOf:
          - $ref: '#/components/schemas/__listOfCore'
          description: A list of cores in the core definition version.
      description: Information about a core definition version.
    CreateConnectorDefinitionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        InitialVersion:
          allOf:
          - $ref: '#/components/schemas/ConnectorDefinitionVersion'
          description: Information about the initial version of the connector definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the connector definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) to add to the new resource.
    CreateConnectorDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
    CreateConnectorDefinitionVersionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        ConnectorDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the connector definition.
        Connectors:
          allOf:
          - $ref: '#/components/schemas/__listOfConnector'
          description: A list of references to connectors in this version, with their
            corresponding configuration settings.
      required:
      - ConnectorDefinitionId
    CreateConnectorDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the version
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the parent definition that the version is associated
            with.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the version.
    CreateCoreDefinitionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        InitialVersion:
          allOf:
          - $ref: '#/components/schemas/CoreDefinitionVersion'
          description: Information about the initial version of the core definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the core definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) to add to the new resource.
      description: Information needed to create a core definition.
    CreateCoreDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
    CreateCoreDefinitionVersionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        CoreDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the core definition.
        Cores:
          allOf:
          - $ref: '#/components/schemas/__listOfCore'
          description: A list of cores in the core definition version.
      required:
      - CoreDefinitionId
    CreateCoreDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the version
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the parent definition that the version is associated
            with.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the version.
    CreateDeploymentRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the deployment if you wish to redeploy a previous
            deployment.
        DeploymentType:
          allOf:
          - $ref: '#/components/schemas/DeploymentType'
          description: The type of deployment. When used for ''CreateDeployment'',
            only ''NewDeployment'' and ''Redeployment'' are valid.
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
        GroupVersionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the group version to be deployed.
      required:
      - DeploymentType
      - GroupId
    CreateDeploymentResponse:
      type: object
      properties:
        DeploymentArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the deployment.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the deployment.
    CreateDeviceDefinitionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        InitialVersion:
          allOf:
          - $ref: '#/components/schemas/DeviceDefinitionVersion'
          description: Information about the initial version of the device definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the device definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) to add to the new resource.
    CreateDeviceDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
    CreateDeviceDefinitionVersionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        DeviceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the device definition.
        Devices:
          allOf:
          - $ref: '#/components/schemas/__listOfDevice'
          description: A list of devices in the definition version.
      required:
      - DeviceDefinitionId
    CreateDeviceDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the version
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the parent definition that the version is associated
            with.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the version.
    CreateFunctionDefinitionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        InitialVersion:
          allOf:
          - $ref: '#/components/schemas/FunctionDefinitionVersion'
          description: Information about the initial version of the function definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the function definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) to add to the new resource.
    CreateFunctionDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
    CreateFunctionDefinitionVersionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        DefaultConfig:
          allOf:
          - $ref: '#/components/schemas/FunctionDefaultConfig'
          description: The default configuration that applies to all Lambda functions
            in this function definition version. Individual Lambda functions can override
            these settings.
        FunctionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Lambda function definition.
        Functions:
          allOf:
          - $ref: '#/components/schemas/__listOfFunction'
          description: A list of Lambda functions in this function definition version.
      required:
      - FunctionDefinitionId
      description: Information needed to create a function definition version.
    CreateFunctionDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the version
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the parent definition that the version is associated
            with.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the version.
    CreateGroupCertificateAuthorityRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - GroupId
    CreateGroupCertificateAuthorityResponse:
      type: object
      properties:
        GroupCertificateAuthorityArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the group certificate authority.
    CreateGroupRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        InitialVersion:
          allOf:
          - $ref: '#/components/schemas/GroupVersion'
          description: Information about the initial version of the group.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the group.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) to add to the new resource.
      required:
      - Name
    CreateGroupResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
    CreateGroupVersionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        ConnectorDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the connector definition version for this group.
        CoreDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the core definition version for this group.
        DeviceDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the device definition version for this group.
        FunctionDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the function definition version for this group.
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
        LoggerDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the logger definition version for this group.
        ResourceDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the resource definition version for this group.
        SubscriptionDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the subscription definition version for this group.
      required:
      - GroupId
    CreateGroupVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the version
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the parent definition that the version is associated
            with.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the version.
    CreateLoggerDefinitionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        InitialVersion:
          allOf:
          - $ref: '#/components/schemas/LoggerDefinitionVersion'
          description: Information about the initial version of the logger definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the logger definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) to add to the new resource.
    CreateLoggerDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
    CreateLoggerDefinitionVersionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        LoggerDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the logger definition.
        Loggers:
          allOf:
          - $ref: '#/components/schemas/__listOfLogger'
          description: A list of loggers.
      required:
      - LoggerDefinitionId
    CreateLoggerDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the version
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the parent definition that the version is associated
            with.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the version.
    CreateResourceDefinitionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        InitialVersion:
          allOf:
          - $ref: '#/components/schemas/ResourceDefinitionVersion'
          description: Information about the initial version of the resource definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the resource definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) to add to the new resource.
    CreateResourceDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
    CreateResourceDefinitionVersionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        ResourceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the resource definition.
        Resources:
          allOf:
          - $ref: '#/components/schemas/__listOfResource'
          description: A list of resources.
      required:
      - ResourceDefinitionId
    CreateResourceDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the version
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the parent definition that the version is associated
            with.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the version.
    CreateSoftwareUpdateJobRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        S3UrlSignerRole:
          $ref: '#/components/schemas/S3UrlSignerRole'
        SoftwareToUpdate:
          $ref: '#/components/schemas/SoftwareToUpdate'
        UpdateAgentLogLevel:
          $ref: '#/components/schemas/UpdateAgentLogLevel'
        UpdateTargets:
          $ref: '#/components/schemas/UpdateTargets'
        UpdateTargetsArchitecture:
          $ref: '#/components/schemas/UpdateTargetsArchitecture'
        UpdateTargetsOperatingSystem:
          $ref: '#/components/schemas/UpdateTargetsOperatingSystem'
      required:
      - S3UrlSignerRole
      - SoftwareToUpdate
      - UpdateTargets
      - UpdateTargetsArchitecture
      - UpdateTargetsOperatingSystem
    CreateSoftwareUpdateJobResponse:
      type: object
      properties:
        IotJobArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The IoT Job ARN corresponding to this update.
        IotJobId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The IoT Job Id corresponding to this update.
        PlatformSoftwareVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The software version installed on the device or devices after
            the update.
    CreateSubscriptionDefinitionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        InitialVersion:
          allOf:
          - $ref: '#/components/schemas/SubscriptionDefinitionVersion'
          description: Information about the initial version of the subscription definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the subscription definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) to add to the new resource.
    CreateSubscriptionDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
    CreateSubscriptionDefinitionVersionRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        SubscriptionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the subscription definition.
        Subscriptions:
          allOf:
          - $ref: '#/components/schemas/__listOfSubscription'
          description: A list of subscriptions.
      required:
      - SubscriptionDefinitionId
    CreateSubscriptionDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the version
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the parent definition that the version is associated
            with.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the version.
    DefinitionInformation:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) attached to the resource arn.
      description: Information about a definition.
    DeleteConnectorDefinitionRequest:
      type: object
      properties:
        ConnectorDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the connector definition.
      required:
      - ConnectorDefinitionId
    DeleteConnectorDefinitionResponse:
      type: object
      properties: {}
    DeleteCoreDefinitionRequest:
      type: object
      properties:
        CoreDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the core definition.
      required:
      - CoreDefinitionId
    DeleteCoreDefinitionResponse:
      type: object
      properties: {}
    DeleteDeviceDefinitionRequest:
      type: object
      properties:
        DeviceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the device definition.
      required:
      - DeviceDefinitionId
    DeleteDeviceDefinitionResponse:
      type: object
      properties: {}
    DeleteFunctionDefinitionRequest:
      type: object
      properties:
        FunctionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Lambda function definition.
      required:
      - FunctionDefinitionId
    DeleteFunctionDefinitionResponse:
      type: object
      properties: {}
    DeleteGroupRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - GroupId
    DeleteGroupResponse:
      type: object
      properties: {}
    DeleteLoggerDefinitionRequest:
      type: object
      properties:
        LoggerDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the logger definition.
      required:
      - LoggerDefinitionId
    DeleteLoggerDefinitionResponse:
      type: object
      properties: {}
    DeleteResourceDefinitionRequest:
      type: object
      properties:
        ResourceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the resource definition.
      required:
      - ResourceDefinitionId
    DeleteResourceDefinitionResponse:
      type: object
      properties: {}
    DeleteSubscriptionDefinitionRequest:
      type: object
      properties:
        SubscriptionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the subscription definition.
      required:
      - SubscriptionDefinitionId
    DeleteSubscriptionDefinitionResponse:
      type: object
      properties: {}
    Deployment:
      type: object
      properties:
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the deployment
            was created.
        DeploymentArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the deployment.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the deployment.
        DeploymentType:
          allOf:
          - $ref: '#/components/schemas/DeploymentType'
          description: The type of the deployment.
        GroupArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the group for this deployment.
      description: Information about a deployment.
    DeploymentType:
      type: string
      enum:
      - NewDeployment
      - Redeployment
      - ResetDeployment
      - ForceResetDeployment
      description: The type of deployment. When used for ''CreateDeployment'', only
        ''NewDeployment'' and ''Redeployment'' are valid.
    Deployments:
      type: array
      items:
        $ref: '#/components/schemas/Deployment'
    Device:
      type: object
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the certificate associated with the device.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A descriptive or arbitrary ID for the device. This value must
            be unique within the device definition version. Max length is 128 characters
            with pattern ''[a-zA-Z0-9:_-]+''.
        SyncShadow:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: If true, the device's local shadow will be automatically synced
            with the cloud.
        ThingArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The thing ARN of the device.
      required:
      - CertificateArn
      - Id
      - ThingArn
      description: Information about a device.
    DeviceDefinitionVersion:
      type: object
      properties:
        Devices:
          allOf:
          - $ref: '#/components/schemas/__listOfDevice'
          description: A list of devices in the definition version.
      description: Information about a device definition version.
    DisassociateRoleFromGroupRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - GroupId
    DisassociateRoleFromGroupResponse:
      type: object
      properties:
        DisassociatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the role was
            disassociated from the group.
    DisassociateServiceRoleFromAccountRequest:
      type: object
      properties: {}
    DisassociateServiceRoleFromAccountResponse:
      type: object
      properties:
        DisassociatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time when the service role was disassociated from the account.
    EncodingType:
      type: string
      enum:
      - binary
      - json
    ErrorDetail:
      type: object
      properties:
        DetailedErrorCode:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A detailed error code.
        DetailedErrorMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A detailed error message.
      description: Details about the error.
    ErrorDetails:
      type: array
      items:
        $ref: '#/components/schemas/ErrorDetail'
      description: A list of error details.
    Function:
      type: object
      properties:
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the Lambda function.
        FunctionConfiguration:
          allOf:
          - $ref: '#/components/schemas/FunctionConfiguration'
          description: The configuration of the Lambda function.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A descriptive or arbitrary ID for the function. This value
            must be unique within the function definition version. Max length is 128
            characters with pattern ''[a-zA-Z0-9:_-]+''.
      required:
      - Id
      description: Information about a Lambda function.
    FunctionConfiguration:
      type: object
      properties:
        EncodingType:
          allOf:
          - $ref: '#/components/schemas/EncodingType'
          description: The expected encoding type of the input payload for the function.
            The default is ''json''.
        Environment:
          allOf:
          - $ref: '#/components/schemas/FunctionConfigurationEnvironment'
          description: The environment configuration of the function.
        ExecArgs:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The execution arguments.
        Executable:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the function executable.
        MemorySize:
          allOf:
          - $ref: '#/components/schemas/__integer'
          description: The memory size, in KB, which the function requires. This setting
            is not applicable and should be cleared when you run the Lambda function
            without containerization.
        Pinned:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: True if the function is pinned. Pinned means the function is
            long-lived and starts when the core starts.
        Timeout:
          allOf:
          - $ref: '#/components/schemas/__integer'
          description: The allowed function execution time, after which Lambda should
            terminate the function. This timeout still applies to pinned Lambda functions
            for each request.
        FunctionRuntimeOverride:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Lambda runtime supported by Greengrass which is to be used
            instead of the one specified in the Lambda function.
      description: The configuration of the Lambda function.
    FunctionConfigurationEnvironment:
      type: object
      properties:
        AccessSysfs:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: If true, the Lambda function is allowed to access the host's
            /sys folder. Use this when the Lambda function needs to read device information
            from /sys. This setting applies only when you run the Lambda function
            in a Greengrass container.
        Execution:
          allOf:
          - $ref: '#/components/schemas/FunctionExecutionConfig'
          description: Configuration related to executing the Lambda function
        ResourceAccessPolicies:
          allOf:
          - $ref: '#/components/schemas/__listOfResourceAccessPolicy'
          description: A list of the resources, with their permissions, to which the
            Lambda function will be granted access. A Lambda function can have at
            most 10 resources. ResourceAccessPolicies apply only when you run the
            Lambda function in a Greengrass container.
        Variables:
          allOf:
          - $ref: '#/components/schemas/__mapOf__string'
          description: Environment variables for the Lambda function's configuration.
      description: The environment configuration of the function.
    FunctionDefaultConfig:
      type: object
      properties:
        Execution:
          $ref: '#/components/schemas/FunctionDefaultExecutionConfig'
      description: The default configuration that applies to all Lambda functions
        in the group. Individual Lambda functions can override these settings.
    FunctionDefaultExecutionConfig:
      type: object
      properties:
        IsolationMode:
          $ref: '#/components/schemas/FunctionIsolationMode'
        RunAs:
          $ref: '#/components/schemas/FunctionRunAsConfig'
      description: Configuration information that specifies how a Lambda function
        runs.
    FunctionDefinitionVersion:
      type: object
      properties:
        DefaultConfig:
          allOf:
          - $ref: '#/components/schemas/FunctionDefaultConfig'
          description: The default configuration that applies to all Lambda functions
            in this function definition version. Individual Lambda functions can override
            these settings.
        Functions:
          allOf:
          - $ref: '#/components/schemas/__listOfFunction'
          description: A list of Lambda functions in this function definition version.
      description: Information about a function definition version.
    FunctionExecutionConfig:
      type: object
      properties:
        IsolationMode:
          $ref: '#/components/schemas/FunctionIsolationMode'
        RunAs:
          $ref: '#/components/schemas/FunctionRunAsConfig'
      description: Configuration information that specifies how a Lambda function
        runs.
    FunctionIsolationMode:
      type: string
      enum:
      - GreengrassContainer
      - NoContainer
      description: Specifies whether the Lambda function runs in a Greengrass container
        (default) or without containerization. Unless your scenario requires that
        you run without containerization, we recommend that you run in a Greengrass
        container. Omit this value to run the Lambda function with the default containerization
        for the group.
    FunctionRunAsConfig:
      type: object
      properties:
        Gid:
          allOf:
          - $ref: '#/components/schemas/__integer'
          description: The group ID whose permissions are used to run a Lambda function.
        Uid:
          allOf:
          - $ref: '#/components/schemas/__integer'
          description: The user ID whose permissions are used to run a Lambda function.
      description: Specifies the user and group whose permissions are used when running
        the Lambda function. You can specify one or both values to override the default
        values. We recommend that you avoid running as root unless absolutely necessary
        to minimize the risk of unintended changes or malicious attacks. To run as
        root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json
        in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
    GetAssociatedRoleRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - GroupId
    GetAssociatedRoleResponse:
      type: object
      properties:
        AssociatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time when the role was associated with the group.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the role that is associated with the group.
    GetBulkDeploymentStatusRequest:
      type: object
      properties:
        BulkDeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the bulk deployment.
      required:
      - BulkDeploymentId
    GetBulkDeploymentStatusResponse:
      type: object
      properties:
        BulkDeploymentMetrics:
          allOf:
          - $ref: '#/components/schemas/BulkDeploymentMetrics'
          description: Relevant metrics on input records processed during bulk deployment.
        BulkDeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/BulkDeploymentStatus'
          description: The status of the bulk deployment.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in ISO format, when the deployment was created.
        ErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: Error details
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Error message
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) attached to the resource arn.
    GetConnectivityInfoRequest:
      type: object
      properties:
        ThingName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The thing name.
      required:
      - ThingName
    GetConnectivityInfoResponse:
      type: object
      properties:
        ConnectivityInfo:
          allOf:
          - $ref: '#/components/schemas/__listOfConnectivityInfo'
          description: Connectivity info list.
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A message about the connectivity info request.
    GetConnectorDefinitionRequest:
      type: object
      properties:
        ConnectorDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the connector definition.
      required:
      - ConnectorDefinitionId
    GetConnectorDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) attached to the resource arn.
    GetConnectorDefinitionVersionRequest:
      type: object
      properties:
        ConnectorDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the connector definition.
        ConnectorDefinitionVersionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the connector definition version. This value maps
            to the ''Version'' property of the corresponding ''VersionInformation''
            object, which is returned by ''ListConnectorDefinitionVersions'' requests.
            If the version is the last one that was associated with a connector definition,
            the value also maps to the ''LatestVersion'' property of the corresponding
            ''DefinitionInformation'' object.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - ConnectorDefinitionId
      - ConnectorDefinitionVersionId
    GetConnectorDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the connector definition version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the connector
            definition version was created.
        Definition:
          allOf:
          - $ref: '#/components/schemas/ConnectorDefinitionVersion'
          description: Information about the connector definition version.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the connector definition version.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The version of the connector definition version.
    GetCoreDefinitionRequest:
      type: object
      properties:
        CoreDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the core definition.
      required:
      - CoreDefinitionId
    GetCoreDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) attached to the resource arn.
    GetCoreDefinitionVersionRequest:
      type: object
      properties:
        CoreDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the core definition.
        CoreDefinitionVersionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the core definition version. This value maps to the
            ''Version'' property of the corresponding ''VersionInformation'' object,
            which is returned by ''ListCoreDefinitionVersions'' requests. If the version
            is the last one that was associated with a core definition, the value
            also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation''
            object.
      required:
      - CoreDefinitionId
      - CoreDefinitionVersionId
    GetCoreDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the core definition version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the core definition
            version was created.
        Definition:
          allOf:
          - $ref: '#/components/schemas/CoreDefinitionVersion'
          description: Information about the core definition version.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the core definition version.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The version of the core definition version.
    GetDeploymentStatusRequest:
      type: object
      properties:
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the deployment.
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - DeploymentId
      - GroupId
    GetDeploymentStatusResponse:
      type: object
      properties:
        DeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: 'The status of the deployment: ''''InProgress'''', ''''Building'''',
            ''''Success'''', or ''''Failure''''.'
        DeploymentType:
          allOf:
          - $ref: '#/components/schemas/DeploymentType'
          description: The type of the deployment.
        ErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: Error details
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Error message
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the deployment
            status was updated.
    GetDeviceDefinitionRequest:
      type: object
      properties:
        DeviceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the device definition.
      required:
      - DeviceDefinitionId
    GetDeviceDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) attached to the resource arn.
    GetDeviceDefinitionVersionRequest:
      type: object
      properties:
        DeviceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the device definition.
        DeviceDefinitionVersionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the device definition version. This value maps to
            the ''Version'' property of the corresponding ''VersionInformation'' object,
            which is returned by ''ListDeviceDefinitionVersions'' requests. If the
            version is the last one that was associated with a device definition,
            the value also maps to the ''LatestVersion'' property of the corresponding
            ''DefinitionInformation'' object.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - DeviceDefinitionId
      - DeviceDefinitionVersionId
    GetDeviceDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the device definition version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the device
            definition version was created.
        Definition:
          allOf:
          - $ref: '#/components/schemas/DeviceDefinitionVersion'
          description: Information about the device definition version.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the device definition version.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The version of the device definition version.
    GetFunctionDefinitionRequest:
      type: object
      properties:
        FunctionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Lambda function definition.
      required:
      - FunctionDefinitionId
    GetFunctionDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) attached to the resource arn.
    GetFunctionDefinitionVersionRequest:
      type: object
      properties:
        FunctionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Lambda function definition.
        FunctionDefinitionVersionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the function definition version. This value maps
            to the ''Version'' property of the corresponding ''VersionInformation''
            object, which is returned by ''ListFunctionDefinitionVersions'' requests.
            If the version is the last one that was associated with a function definition,
            the value also maps to the ''LatestVersion'' property of the corresponding
            ''DefinitionInformation'' object.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - FunctionDefinitionId
      - FunctionDefinitionVersionId
    GetFunctionDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the function definition version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the function
            definition version was created.
        Definition:
          allOf:
          - $ref: '#/components/schemas/FunctionDefinitionVersion'
          description: Information on the definition.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the function definition version.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The version of the function definition version.
    GetGroupCertificateAuthorityRequest:
      type: object
      properties:
        CertificateAuthorityId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the certificate authority.
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - CertificateAuthorityId
      - GroupId
    GetGroupCertificateAuthorityResponse:
      type: object
      properties:
        GroupCertificateAuthorityArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the certificate authority for the group.
        GroupCertificateAuthorityId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the certificate authority for the group.
        PemEncodedCertificate:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The PEM encoded certificate for the group.
    GetGroupCertificateConfigurationRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - GroupId
    GetGroupCertificateConfigurationResponse:
      type: object
      properties:
        CertificateAuthorityExpiryInMilliseconds:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The amount of time remaining before the certificate authority
            expires, in milliseconds.
        CertificateExpiryInMilliseconds:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The amount of time remaining before the certificate expires,
            in milliseconds.
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the group certificate configuration.
    GetGroupRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - GroupId
    GetGroupResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) attached to the resource arn.
    GetGroupVersionRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
        GroupVersionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the group version. This value maps to the ''Version''
            property of the corresponding ''VersionInformation'' object, which is
            returned by ''ListGroupVersions'' requests. If the version is the last
            one that was associated with a group, the value also maps to the ''LatestVersion''
            property of the corresponding ''GroupInformation'' object.
      required:
      - GroupId
      - GroupVersionId
    GetGroupVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the group version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the group version
            was created.
        Definition:
          allOf:
          - $ref: '#/components/schemas/GroupVersion'
          description: Information about the group version definition.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the group that the version is associated with.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the group version.
    GetLoggerDefinitionRequest:
      type: object
      properties:
        LoggerDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the logger definition.
      required:
      - LoggerDefinitionId
    GetLoggerDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) attached to the resource arn.
    GetLoggerDefinitionVersionRequest:
      type: object
      properties:
        LoggerDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the logger definition.
        LoggerDefinitionVersionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the logger definition version. This value maps to
            the ''Version'' property of the corresponding ''VersionInformation'' object,
            which is returned by ''ListLoggerDefinitionVersions'' requests. If the
            version is the last one that was associated with a logger definition,
            the value also maps to the ''LatestVersion'' property of the corresponding
            ''DefinitionInformation'' object.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - LoggerDefinitionId
      - LoggerDefinitionVersionId
    GetLoggerDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the logger definition version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the logger
            definition version was created.
        Definition:
          allOf:
          - $ref: '#/components/schemas/LoggerDefinitionVersion'
          description: Information about the logger definition version.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the logger definition version.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The version of the logger definition version.
    GetResourceDefinitionRequest:
      type: object
      properties:
        ResourceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the resource definition.
      required:
      - ResourceDefinitionId
    GetResourceDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) attached to the resource arn.
    GetResourceDefinitionVersionRequest:
      type: object
      properties:
        ResourceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the resource definition.
        ResourceDefinitionVersionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the resource definition version. This value maps
            to the ''Version'' property of the corresponding ''VersionInformation''
            object, which is returned by ''ListResourceDefinitionVersions'' requests.
            If the version is the last one that was associated with a resource definition,
            the value also maps to the ''LatestVersion'' property of the corresponding
            ''DefinitionInformation'' object.
      required:
      - ResourceDefinitionId
      - ResourceDefinitionVersionId
    GetResourceDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Arn of the resource definition version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the resource
            definition version was created.
        Definition:
          allOf:
          - $ref: '#/components/schemas/ResourceDefinitionVersion'
          description: Information about the definition.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the resource definition version.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The version of the resource definition version.
    GetServiceRoleForAccountRequest:
      type: object
      properties: {}
    GetServiceRoleForAccountResponse:
      type: object
      properties:
        AssociatedAt:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time when the service role was associated with the account.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the role which is associated with the account.
    GetSubscriptionDefinitionRequest:
      type: object
      properties:
        SubscriptionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the subscription definition.
      required:
      - SubscriptionDefinitionId
    GetSubscriptionDefinitionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the definition.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the definition.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the definition
            was last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the definition.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) attached to the resource arn.
    GetSubscriptionDefinitionVersionRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        SubscriptionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the subscription definition.
        SubscriptionDefinitionVersionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the subscription definition version. This value maps
            to the ''Version'' property of the corresponding ''VersionInformation''
            object, which is returned by ''ListSubscriptionDefinitionVersions'' requests.
            If the version is the last one that was associated with a subscription
            definition, the value also maps to the ''LatestVersion'' property of the
            corresponding ''DefinitionInformation'' object.
      required:
      - SubscriptionDefinitionId
      - SubscriptionDefinitionVersionId
    GetSubscriptionDefinitionVersionResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the subscription definition version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the subscription
            definition version was created.
        Definition:
          allOf:
          - $ref: '#/components/schemas/SubscriptionDefinitionVersion'
          description: Information about the subscription definition version.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the subscription definition version.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The version of the subscription definition version.
    GetThingRuntimeConfigurationRequest:
      type: object
      properties:
        ThingName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The thing name.
      required:
      - ThingName
    GetThingRuntimeConfigurationResponse:
      type: object
      properties:
        RuntimeConfiguration:
          allOf:
          - $ref: '#/components/schemas/RuntimeConfiguration'
          description: Runtime configuration for a thing.
    GroupCertificateAuthorityProperties:
      type: object
      properties:
        GroupCertificateAuthorityArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the certificate authority for the group.
        GroupCertificateAuthorityId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the certificate authority for the group.
      description: Information about a certificate authority for a group.
    GroupInformation:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the group.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the group was
            created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the group.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the group was
            last updated.
        LatestVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the latest version associated with the group.
        LatestVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the latest version associated with the group.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the group.
      description: Information about a group.
    GroupOwnerSetting:
      type: object
      properties:
        AutoAddGroupOwner:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: If true, AWS IoT Greengrass automatically adds the specified
            Linux OS group owner of the resource to the Lambda process privileges.
            Thus the Lambda process will have the file access permissions of the added
            Linux group.
        GroupOwner:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the Linux OS group whose privileges will be added
            to the Lambda process. This field is optional.
      description: Group owner related settings for local resources.
    GroupVersion:
      type: object
      properties:
        ConnectorDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the connector definition version for this group.
        CoreDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the core definition version for this group.
        DeviceDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the device definition version for this group.
        FunctionDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the function definition version for this group.
        LoggerDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the logger definition version for this group.
        ResourceDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the resource definition version for this group.
        SubscriptionDefinitionVersionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the subscription definition version for this group.
      description: Information about a group version.
    InternalServerErrorException:
      type: object
      properties:
        ErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: Details about the error.
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A message containing information about the error.
      description: General error information.
    ListBulkDeploymentDetailedReportsRequest:
      type: object
      properties:
        BulkDeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the bulk deployment.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - BulkDeploymentId
    ListBulkDeploymentDetailedReportsResponse:
      type: object
      properties:
        Deployments:
          allOf:
          - $ref: '#/components/schemas/BulkDeploymentResults'
          description: A list of the individual group deployments in the bulk deployment
            operation.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListBulkDeploymentsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListBulkDeploymentsResponse:
      type: object
      properties:
        BulkDeployments:
          allOf:
          - $ref: '#/components/schemas/BulkDeployments'
          description: A list of bulk deployments.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListConnectorDefinitionVersionsRequest:
      type: object
      properties:
        ConnectorDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the connector definition.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - ConnectorDefinitionId
    ListConnectorDefinitionVersionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Versions:
          allOf:
          - $ref: '#/components/schemas/__listOfVersionInformation'
          description: Information about a version.
    ListConnectorDefinitionsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListConnectorDefinitionsResponse:
      type: object
      properties:
        Definitions:
          allOf:
          - $ref: '#/components/schemas/__listOfDefinitionInformation'
          description: Information about a definition.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListCoreDefinitionVersionsRequest:
      type: object
      properties:
        CoreDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the core definition.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - CoreDefinitionId
    ListCoreDefinitionVersionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Versions:
          allOf:
          - $ref: '#/components/schemas/__listOfVersionInformation'
          description: Information about a version.
    ListCoreDefinitionsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListCoreDefinitionsResponse:
      type: object
      properties:
        Definitions:
          allOf:
          - $ref: '#/components/schemas/__listOfDefinitionInformation'
          description: Information about a definition.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListDeploymentsRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - GroupId
    ListDeploymentsResponse:
      type: object
      properties:
        Deployments:
          allOf:
          - $ref: '#/components/schemas/Deployments'
          description: A list of deployments for the requested groups.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListDeviceDefinitionVersionsRequest:
      type: object
      properties:
        DeviceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the device definition.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - DeviceDefinitionId
    ListDeviceDefinitionVersionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Versions:
          allOf:
          - $ref: '#/components/schemas/__listOfVersionInformation'
          description: Information about a version.
    ListDeviceDefinitionsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListDeviceDefinitionsResponse:
      type: object
      properties:
        Definitions:
          allOf:
          - $ref: '#/components/schemas/__listOfDefinitionInformation'
          description: Information about a definition.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListFunctionDefinitionVersionsRequest:
      type: object
      properties:
        FunctionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Lambda function definition.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - FunctionDefinitionId
    ListFunctionDefinitionVersionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Versions:
          allOf:
          - $ref: '#/components/schemas/__listOfVersionInformation'
          description: Information about a version.
    ListFunctionDefinitionsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListFunctionDefinitionsResponse:
      type: object
      properties:
        Definitions:
          allOf:
          - $ref: '#/components/schemas/__listOfDefinitionInformation'
          description: Information about a definition.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListGroupCertificateAuthoritiesRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - GroupId
    ListGroupCertificateAuthoritiesResponse:
      type: object
      properties:
        GroupCertificateAuthorities:
          allOf:
          - $ref: '#/components/schemas/__listOfGroupCertificateAuthorityProperties'
          description: A list of certificate authorities associated with the group.
    ListGroupVersionsRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - GroupId
    ListGroupVersionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Versions:
          allOf:
          - $ref: '#/components/schemas/__listOfVersionInformation'
          description: Information about a version.
    ListGroupsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListGroupsResponse:
      type: object
      properties:
        Groups:
          allOf:
          - $ref: '#/components/schemas/__listOfGroupInformation'
          description: Information about a group.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListLoggerDefinitionVersionsRequest:
      type: object
      properties:
        LoggerDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the logger definition.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
      required:
      - LoggerDefinitionId
    ListLoggerDefinitionVersionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Versions:
          allOf:
          - $ref: '#/components/schemas/__listOfVersionInformation'
          description: Information about a version.
    ListLoggerDefinitionsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListLoggerDefinitionsResponse:
      type: object
      properties:
        Definitions:
          allOf:
          - $ref: '#/components/schemas/__listOfDefinitionInformation'
          description: Information about a definition.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListResourceDefinitionVersionsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        ResourceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the resource definition.
      required:
      - ResourceDefinitionId
    ListResourceDefinitionVersionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Versions:
          allOf:
          - $ref: '#/components/schemas/__listOfVersionInformation'
          description: Information about a version.
    ListResourceDefinitionsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListResourceDefinitionsResponse:
      type: object
      properties:
        Definitions:
          allOf:
          - $ref: '#/components/schemas/__listOfDefinitionInformation'
          description: Information about a definition.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListSubscriptionDefinitionVersionsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        SubscriptionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the subscription definition.
      required:
      - SubscriptionDefinitionId
    ListSubscriptionDefinitionVersionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
        Versions:
          allOf:
          - $ref: '#/components/schemas/__listOfVersionInformation'
          description: Information about a version.
    ListSubscriptionDefinitionsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of results to be returned per request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListSubscriptionDefinitionsResponse:
      type: object
      properties:
        Definitions:
          allOf:
          - $ref: '#/components/schemas/__listOfDefinitionInformation'
          description: Information about a definition.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The token for the next set of results, or ''null'' if there
            are no additional results.
    ListTagsForResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon Resource Name (ARN) of the resource.
      required:
      - ResourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/Tags'
    LocalDeviceResourceData:
      type: object
      properties:
        GroupOwnerSetting:
          allOf:
          - $ref: '#/components/schemas/GroupOwnerSetting'
          description: Group/owner related settings for local resources.
        SourcePath:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The local absolute path of the device resource. The source
            path for a device resource can refer only to a character device or block
            device under ''/dev''.
      description: Attributes that define a local device resource.
    LocalVolumeResourceData:
      type: object
      properties:
        DestinationPath:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The absolute local path of the resource inside the Lambda environment.
        GroupOwnerSetting:
          allOf:
          - $ref: '#/components/schemas/GroupOwnerSetting'
          description: Allows you to configure additional group privileges for the
            Lambda process. This field is optional.
        SourcePath:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The local absolute path of the volume resource on the host.
            The source path for a volume resource type cannot start with ''/sys''.
      description: Attributes that define a local volume resource.
    Logger:
      type: object
      properties:
        Component:
          allOf:
          - $ref: '#/components/schemas/LoggerComponent'
          description: The component that will be subject to logging.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A descriptive or arbitrary ID for the logger. This value must
            be unique within the logger definition version. Max length is 128 characters
            with pattern ''[a-zA-Z0-9:_-]+''.
        Level:
          allOf:
          - $ref: '#/components/schemas/LoggerLevel'
          description: The level of the logs.
        Space:
          allOf:
          - $ref: '#/components/schemas/__integer'
          description: The amount of file space, in KB, to use if the local file system
            is used for logging purposes.
        Type:
          allOf:
          - $ref: '#/components/schemas/LoggerType'
          description: The type of log output which will be used.
      required:
      - Component
      - Id
      - Level
      - Type
      description: Information about a logger
    LoggerComponent:
      type: string
      enum:
      - GreengrassSystem
      - Lambda
    LoggerDefinitionVersion:
      type: object
      properties:
        Loggers:
          allOf:
          - $ref: '#/components/schemas/__listOfLogger'
          description: A list of loggers.
      description: Information about a logger definition version.
    LoggerLevel:
      type: string
      enum:
      - DEBUG
      - INFO
      - WARN
      - ERROR
      - FATAL
    LoggerType:
      type: string
      enum:
      - FileSystem
      - AWSCloudWatch
    Permission:
      type: string
      enum:
      - ro
      - rw
      description: The type of permission a function has to access a resource.
    ResetDeploymentsRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        Force:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: If true, performs a best-effort only core reset.
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - GroupId
      description: Information needed to reset deployments.
    ResetDeploymentsResponse:
      type: object
      properties:
        DeploymentArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the deployment.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the deployment.
    Resource:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The resource ID, used to refer to a resource in the Lambda
            function configuration. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
            This must be unique within a Greengrass group.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The descriptive resource name, which is displayed on the AWS
            IoT Greengrass console. Max length 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
            This must be unique within a Greengrass group.
        ResourceDataContainer:
          allOf:
          - $ref: '#/components/schemas/ResourceDataContainer'
          description: A container of data for all resource types.
      required:
      - Id
      - Name
      - ResourceDataContainer
      description: Information about a resource.
    ResourceAccessPolicy:
      type: object
      properties:
        Permission:
          allOf:
          - $ref: '#/components/schemas/Permission'
          description: The permissions that the Lambda function has to the resource.
            Can be one of ''rw'' (read/write) or ''ro'' (read-only).
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the resource. (This ID is assigned to the resource
            when you create the resource definiton.)
      required:
      - ResourceId
      description: A policy used by the function to access a resource.
    ResourceDataContainer:
      type: object
      properties:
        LocalDeviceResourceData:
          allOf:
          - $ref: '#/components/schemas/LocalDeviceResourceData'
          description: Attributes that define the local device resource.
        LocalVolumeResourceData:
          allOf:
          - $ref: '#/components/schemas/LocalVolumeResourceData'
          description: Attributes that define the local volume resource.
        S3MachineLearningModelResourceData:
          allOf:
          - $ref: '#/components/schemas/S3MachineLearningModelResourceData'
          description: Attributes that define an Amazon S3 machine learning resource.
        SageMakerMachineLearningModelResourceData:
          allOf:
          - $ref: '#/components/schemas/SageMakerMachineLearningModelResourceData'
          description: Attributes that define an Amazon SageMaker machine learning
            resource.
        SecretsManagerSecretResourceData:
          allOf:
          - $ref: '#/components/schemas/SecretsManagerSecretResourceData'
          description: Attributes that define a secret resource, which references
            a secret from AWS Secrets Manager.
      description: 'A container for resource data. The container takes only one of
        the following supported resource data types: ''''LocalDeviceResourceData'''',
        ''''LocalVolumeResourceData'''', ''''SageMakerMachineLearningModelResourceData'''',
        ''''S3MachineLearningModelResourceData'''', ''''SecretsManagerSecretResourceData''''.'
    ResourceDefinitionVersion:
      type: object
      properties:
        Resources:
          allOf:
          - $ref: '#/components/schemas/__listOfResource'
          description: A list of resources.
      description: Information about a resource definition version.
    ResourceDownloadOwnerSetting:
      type: object
      properties:
        GroupOwner:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The group owner of the resource. This is the name of an existing
            Linux OS group on the system or a GID. The group's permissions are added
            to the Lambda process.
        GroupPermission:
          allOf:
          - $ref: '#/components/schemas/Permission'
          description: The permissions that the group owner has to the resource. Valid
            values are ''rw'' (read/write) or ''ro'' (read-only).
      required:
      - GroupOwner
      - GroupPermission
      description: The owner setting for downloaded machine learning resources.
    RuntimeConfiguration:
      type: object
      properties:
        TelemetryConfiguration:
          allOf:
          - $ref: '#/components/schemas/TelemetryConfiguration'
          description: Configuration for telemetry service.
      description: Runtime configuration for a thing.
    S3MachineLearningModelResourceData:
      type: object
      properties:
        DestinationPath:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The absolute local path of the resource inside the Lambda environment.
        OwnerSetting:
          $ref: '#/components/schemas/ResourceDownloadOwnerSetting'
        S3Uri:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The URI of the source model in an S3 bucket. The model package
            must be in tar.gz or .zip format.
      description: Attributes that define an Amazon S3 machine learning resource.
    S3UrlSignerRole:
      type: string
    SageMakerMachineLearningModelResourceData:
      type: object
      properties:
        DestinationPath:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The absolute local path of the resource inside the Lambda environment.
        OwnerSetting:
          $ref: '#/components/schemas/ResourceDownloadOwnerSetting'
        SageMakerJobArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the Amazon SageMaker training job that represents
            the source model.
      description: Attributes that define an Amazon SageMaker machine learning resource.
    SecretsManagerSecretResourceData:
      type: object
      properties:
        ARN:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the Secrets Manager secret to make available on
            the core. The value of the secret's latest version (represented by the
            ''AWSCURRENT'' staging label) is included by default.
        AdditionalStagingLabelsToDownload:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: Optional. The staging labels whose values you want to make
            available on the core, in addition to ''AWSCURRENT''.
      description: Attributes that define a secret resource, which references a secret
        from AWS Secrets Manager. AWS IoT Greengrass stores a local, encrypted copy
        of the secret on the Greengrass core, where it can be securely accessed by
        connectors and Lambda functions.
    SoftwareToUpdate:
      type: string
      enum:
      - core
      - ota_agent
      description: The piece of software on the Greengrass core that will be updated.
    StartBulkDeploymentRequest:
      type: object
      properties:
        AmznClientToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A client token used to correlate requests and responses.
        ExecutionRoleArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the execution role to associate with the bulk deployment
            operation. This IAM role must allow the ''greengrass:CreateDeployment''
            action for all group versions that are listed in the input file. This
            IAM role must have access to the S3 bucket containing the input file.
        InputFileUri:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The URI of the input file contained in the S3 bucket. The execution
            role must have ''getObject'' permissions on this bucket to access the
            input file. The input file is a JSON-serialized, line delimited file with
            UTF-8 encoding that provides a list of group and version IDs and the deployment
            type. This file must be less than 100 MB. Currently, AWS IoT Greengrass
            supports only ''NewDeployment'' deployment types.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tag(s) to add to the new resource.
      required:
      - ExecutionRoleArn
      - InputFileUri
    StartBulkDeploymentResponse:
      type: object
      properties:
        BulkDeploymentArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the bulk deployment.
        BulkDeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the bulk deployment.
    StopBulkDeploymentRequest:
      type: object
      properties:
        BulkDeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the bulk deployment.
      required:
      - BulkDeploymentId
    StopBulkDeploymentResponse:
      type: object
      properties: {}
    Subscription:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A descriptive or arbitrary ID for the subscription. This value
            must be unique within the subscription definition version. Max length
            is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
        Source:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The source of the subscription. Can be a thing ARN, a Lambda
            function ARN, a connector ARN, 'cloud' (which represents the AWS IoT cloud),
            or 'GGShadowService'.
        Subject:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The MQTT topic used to route the message.
        Target:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Where the message is sent to. Can be a thing ARN, a Lambda
            function ARN, a connector ARN, 'cloud' (which represents the AWS IoT cloud),
            or 'GGShadowService'.
      required:
      - Id
      - Source
      - Subject
      - Target
      description: Information about a subscription.
    SubscriptionDefinitionVersion:
      type: object
      properties:
        Subscriptions:
          allOf:
          - $ref: '#/components/schemas/__listOfSubscription'
          description: A list of subscriptions.
      description: Information about a subscription definition version.
    TagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon Resource Name (ARN) of the resource.
        tags:
          $ref: '#/components/schemas/Tags'
      required:
      - ResourceArn
      description: A map of the key-value pairs for the resource tag.
    Tags:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/__string'
      description: The key-value pair for the resource tag.
    Telemetry:
      type: string
      enum:
      - 'On'
      - 'Off'
    TelemetryConfiguration:
      type: object
      properties:
        ConfigurationSyncStatus:
          allOf:
          - $ref: '#/components/schemas/ConfigurationSyncStatus'
          description: Synchronization status of the device reported configuration
            with the desired configuration.
        Telemetry:
          allOf:
          - $ref: '#/components/schemas/Telemetry'
          description: Configure telemetry to be on or off.
      required:
      - Telemetry
      description: Configuration settings for running telemetry.
    TelemetryConfigurationUpdate:
      type: object
      properties:
        Telemetry:
          allOf:
          - $ref: '#/components/schemas/Telemetry'
          description: Configure telemetry to be on or off.
      required:
      - Telemetry
      description: Configuration settings for running telemetry.
    UntagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon Resource Name (ARN) of the resource.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: An array of tag keys to delete
      required:
      - ResourceArn
      - TagKeys
    UpdateAgentLogLevel:
      type: string
      enum:
      - NONE
      - TRACE
      - DEBUG
      - VERBOSE
      - INFO
      - WARN
      - ERROR
      - FATAL
      description: The minimum level of log statements that should be logged by the
        OTA Agent during an update.
    UpdateConnectivityInfoRequest:
      type: object
      properties:
        ConnectivityInfo:
          allOf:
          - $ref: '#/components/schemas/__listOfConnectivityInfo'
          description: A list of connectivity info.
        ThingName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The thing name.
      required:
      - ThingName
      description: Connectivity information.
    UpdateConnectivityInfoResponse:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A message about the connectivity info update request.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The new version of the connectivity info.
    UpdateConnectorDefinitionRequest:
      type: object
      properties:
        ConnectorDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the connector definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
      required:
      - ConnectorDefinitionId
    UpdateConnectorDefinitionResponse:
      type: object
      properties: {}
    UpdateCoreDefinitionRequest:
      type: object
      properties:
        CoreDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the core definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
      required:
      - CoreDefinitionId
    UpdateCoreDefinitionResponse:
      type: object
      properties: {}
    UpdateDeviceDefinitionRequest:
      type: object
      properties:
        DeviceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the device definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
      required:
      - DeviceDefinitionId
    UpdateDeviceDefinitionResponse:
      type: object
      properties: {}
    UpdateFunctionDefinitionRequest:
      type: object
      properties:
        FunctionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Lambda function definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
      required:
      - FunctionDefinitionId
    UpdateFunctionDefinitionResponse:
      type: object
      properties: {}
    UpdateGroupCertificateConfigurationRequest:
      type: object
      properties:
        CertificateExpiryInMilliseconds:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The amount of time remaining before the certificate expires,
            in milliseconds.
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
      required:
      - GroupId
    UpdateGroupCertificateConfigurationResponse:
      type: object
      properties:
        CertificateAuthorityExpiryInMilliseconds:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The amount of time remaining before the certificate authority
            expires, in milliseconds.
        CertificateExpiryInMilliseconds:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The amount of time remaining before the certificate expires,
            in milliseconds.
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the group certificate configuration.
    UpdateGroupRequest:
      type: object
      properties:
        GroupId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the Greengrass group.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
      required:
      - GroupId
    UpdateGroupResponse:
      type: object
      properties: {}
    UpdateLoggerDefinitionRequest:
      type: object
      properties:
        LoggerDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the logger definition.
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
      required:
      - LoggerDefinitionId
    UpdateLoggerDefinitionResponse:
      type: object
      properties: {}
    UpdateResourceDefinitionRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        ResourceDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the resource definition.
      required:
      - ResourceDefinitionId
    UpdateResourceDefinitionResponse:
      type: object
      properties: {}
    UpdateSubscriptionDefinitionRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the definition.
        SubscriptionDefinitionId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the subscription definition.
      required:
      - SubscriptionDefinitionId
    UpdateSubscriptionDefinitionResponse:
      type: object
      properties: {}
    UpdateTargets:
      type: array
      items:
        $ref: '#/components/schemas/__string'
      description: The ARNs of the targets (IoT things or IoT thing groups) that this
        update will be applied to.
    UpdateTargetsArchitecture:
      type: string
      enum:
      - armv6l
      - armv7l
      - x86_64
      - aarch64
      description: The architecture of the cores which are the targets of an update.
    UpdateTargetsOperatingSystem:
      type: string
      enum:
      - ubuntu
      - raspbian
      - amazon_linux
      - openwrt
      description: The operating system of the cores which are the targets of an update.
    UpdateThingRuntimeConfigurationRequest:
      type: object
      properties:
        TelemetryConfiguration:
          allOf:
          - $ref: '#/components/schemas/TelemetryConfigurationUpdate'
          description: Configuration for telemetry service.
        ThingName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The thing name.
      required:
      - ThingName
    UpdateThingRuntimeConfigurationResponse:
      type: object
      properties: {}
    VersionInformation:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ARN of the version.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The time, in milliseconds since the epoch, when the version
            was created.
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the parent definition that the version is associated
            with.
        Version:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the version.
      description: Information about a version.
    __boolean:
      type: boolean
    __integer:
      type: integer
    __listOfConnectivityInfo:
      type: array
      items:
        $ref: '#/components/schemas/ConnectivityInfo'
    __listOfConnector:
      type: array
      items:
        $ref: '#/components/schemas/Connector'
    __listOfCore:
      type: array
      items:
        $ref: '#/components/schemas/Core'
    __listOfDefinitionInformation:
      type: array
      items:
        $ref: '#/components/schemas/DefinitionInformation'
    __listOfDevice:
      type: array
      items:
        $ref: '#/components/schemas/Device'
    __listOfFunction:
      type: array
      items:
        $ref: '#/components/schemas/Function'
    __listOfGroupCertificateAuthorityProperties:
      type: array
      items:
        $ref: '#/components/schemas/GroupCertificateAuthorityProperties'
    __listOfGroupInformation:
      type: array
      items:
        $ref: '#/components/schemas/GroupInformation'
    __listOfLogger:
      type: array
      items:
        $ref: '#/components/schemas/Logger'
    __listOfResource:
      type: array
      items:
        $ref: '#/components/schemas/Resource'
    __listOfResourceAccessPolicy:
      type: array
      items:
        $ref: '#/components/schemas/ResourceAccessPolicy'
    __listOfSubscription:
      type: array
      items:
        $ref: '#/components/schemas/Subscription'
    __listOfVersionInformation:
      type: array
      items:
        $ref: '#/components/schemas/VersionInformation'
    __listOf__string:
      type: array
      items:
        $ref: '#/components/schemas/__string'
    __mapOf__string:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/__string'
    __string:
      type: string
