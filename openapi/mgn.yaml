openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: mgn
  x-aws-serviceName: mgn
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-02-26'
  title: Application Migration Service
  description: |-
    The Application Migration Service service.
servers:
- description: The Application Migration Service regional endpoint
  url: https://mgn.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /ArchiveApplication:
    post:
      operationId: ArchiveApplication
      description: |-
        Archive application.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationID:
                  $ref: '#/components/schemas/ApplicationID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /ArchiveWave:
    post:
      operationId: ArchiveWave
      description: |-
        Archive wave.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                waveID:
                  $ref: '#/components/schemas/WaveID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /AssociateApplications:
    post:
      operationId: AssociateApplications
      description: |-
        Associate applications to wave.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                waveID:
                  $ref: '#/components/schemas/WaveID'
                applicationIDs:
                  $ref: '#/components/schemas/ApplicationIDs'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /AssociateSourceServers:
    post:
      operationId: AssociateSourceServers
      description: |-
        Associate source servers to application.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationID:
                  $ref: '#/components/schemas/ApplicationID'
                sourceServerIDs:
                  $ref: '#/components/schemas/AssociateSourceServersRequestSourceServerIDs'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /ChangeServerLifeCycleState:
    post:
      operationId: ChangeServerLifeCycleState
      description: |-
        Allows the user to set the SourceServer.LifeCycle.state property for specific Source Server IDs to one of the following: READY_FOR_TEST or READY_FOR_CUTOVER. This command only works if the Source Server is already launchable (dataReplicationInfo.lagDuration is not null.)
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                lifeCycle:
                  $ref: '#/components/schemas/ChangeServerLifeCycleStateSourceServerLifecycle'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CreateApplication:
    post:
      operationId: CreateApplication
      description: |-
        Create application.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ApplicationName'
                description:
                  $ref: '#/components/schemas/ApplicationDescription'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '201': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /CreateConnector:
    post:
      operationId: CreateConnector
      description: |-
        Create Connector.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ConnectorName'
                ssmInstanceID:
                  $ref: '#/components/schemas/SsmInstanceID'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                ssmCommandConfig:
                  $ref: '#/components/schemas/ConnectorSsmCommandConfig'
      responses:
        '201': {}
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CreateLaunchConfigurationTemplate:
    post:
      operationId: CreateLaunchConfigurationTemplate
      description: |-
        Creates a new Launch Configuration Template.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postLaunchActions:
                  $ref: '#/components/schemas/PostLaunchActions'
                enableMapAutoTagging:
                  $ref: '#/components/schemas/Boolean'
                mapAutoTaggingMpeID:
                  $ref: '#/components/schemas/TagValue'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                launchDisposition:
                  $ref: '#/components/schemas/LaunchDisposition'
                targetInstanceTypeRightSizingMethod:
                  $ref: '#/components/schemas/TargetInstanceTypeRightSizingMethod'
                copyPrivateIp:
                  $ref: '#/components/schemas/Boolean'
                associatePublicIpAddress:
                  $ref: '#/components/schemas/Boolean'
                copyTags:
                  $ref: '#/components/schemas/Boolean'
                licensing:
                  $ref: '#/components/schemas/Licensing'
                bootMode:
                  $ref: '#/components/schemas/BootMode'
                smallVolumeMaxSize:
                  $ref: '#/components/schemas/PositiveInteger'
                smallVolumeConf:
                  $ref: '#/components/schemas/LaunchTemplateDiskConf'
                largeVolumeConf:
                  $ref: '#/components/schemas/LaunchTemplateDiskConf'
      responses:
        '201': {}
        '403':
          description: |-
            Operating denied due to a file permission or access check error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CreateReplicationConfigurationTemplate:
    post:
      operationId: CreateReplicationConfigurationTemplate
      description: |-
        Creates a new ReplicationConfigurationTemplate.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stagingAreaSubnetId:
                  $ref: '#/components/schemas/SubnetID'
                associateDefaultSecurityGroup:
                  $ref: '#/components/schemas/Boolean'
                replicationServersSecurityGroupsIDs:
                  $ref: '#/components/schemas/ReplicationServersSecurityGroupsIDs'
                replicationServerInstanceType:
                  $ref: '#/components/schemas/EC2InstanceType'
                useDedicatedReplicationServer:
                  $ref: '#/components/schemas/Boolean'
                defaultLargeStagingDiskType:
                  $ref: '#/components/schemas/ReplicationConfigurationDefaultLargeStagingDiskType'
                ebsEncryption:
                  $ref: '#/components/schemas/ReplicationConfigurationEbsEncryption'
                ebsEncryptionKeyArn:
                  $ref: '#/components/schemas/ARN'
                bandwidthThrottling:
                  $ref: '#/components/schemas/BandwidthThrottling'
                dataPlaneRouting:
                  $ref: '#/components/schemas/ReplicationConfigurationDataPlaneRouting'
                createPublicIP:
                  $ref: '#/components/schemas/Boolean'
                stagingAreaTags:
                  $ref: '#/components/schemas/TagsMap'
                useFipsEndpoint:
                  $ref: '#/components/schemas/Boolean'
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            Operating denied due to a file permission or access check error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CreateWave:
    post:
      operationId: CreateWave
      description: |-
        Create wave.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/WaveName'
                description:
                  $ref: '#/components/schemas/WaveDescription'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '201': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /DeleteApplication:
    post:
      operationId: DeleteApplication
      description: |-
        Delete application.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationID:
                  $ref: '#/components/schemas/ApplicationID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '204': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /DeleteConnector:
    post:
      operationId: DeleteConnector
      description: |-
        Delete Connector.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorID:
                  $ref: '#/components/schemas/ConnectorID'
      responses:
        '204': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeleteJob:
    post:
      operationId: DeleteJob
      description: |-
        Deletes a single Job by ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobID:
                  $ref: '#/components/schemas/JobID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '204': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /DeleteLaunchConfigurationTemplate:
    post:
      operationId: DeleteLaunchConfigurationTemplate
      description: |-
        Deletes a single Launch Configuration Template by ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                launchConfigurationTemplateID:
                  $ref: '#/components/schemas/LaunchConfigurationTemplateID'
      responses:
        '204': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /DeleteReplicationConfigurationTemplate:
    post:
      operationId: DeleteReplicationConfigurationTemplate
      description: |-
        Deletes a single Replication Configuration Template by ID
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                replicationConfigurationTemplateID:
                  $ref: '#/components/schemas/ReplicationConfigurationTemplateID'
      responses:
        '204': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /DeleteSourceServer:
    post:
      operationId: DeleteSourceServer
      description: |-
        Deletes a single source server by ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '204': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /DeleteVcenterClient:
    post:
      operationId: DeleteVcenterClient
      description: |-
        Deletes a given vCenter client by ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vcenterClientID:
                  $ref: '#/components/schemas/VcenterClientID'
      responses:
        '204': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeleteWave:
    post:
      operationId: DeleteWave
      description: |-
        Delete wave.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                waveID:
                  $ref: '#/components/schemas/WaveID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '204': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /DescribeJobLogItems:
    post:
      operationId: DescribeJobLogItems
      description: |-
        Retrieves detailed job log items with paging.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobID:
                  $ref: '#/components/schemas/JobID'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DescribeJobs:
    post:
      operationId: DescribeJobs
      description: |-
        Returns a list of Jobs. Use the JobsID and fromDate and toData filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are normally created by the StartTest, StartCutover, and TerminateTargetInstances APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/DescribeJobsRequestFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DescribeLaunchConfigurationTemplates:
    post:
      operationId: DescribeLaunchConfigurationTemplates
      description: |-
        Lists all Launch Configuration Templates, filtered by Launch Configuration Template IDs
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                launchConfigurationTemplateIDs:
                  $ref: '#/components/schemas/LaunchConfigurationTemplateIDs'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DescribeReplicationConfigurationTemplates:
    post:
      operationId: DescribeReplicationConfigurationTemplates
      description: |-
        Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                replicationConfigurationTemplateIDs:
                  $ref: '#/components/schemas/ReplicationConfigurationTemplateIDs'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DescribeSourceServers:
    post:
      operationId: DescribeSourceServers
      description: |-
        Retrieves all SourceServers or multiple SourceServers by ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/DescribeSourceServersRequestFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DescribeVcenterClients:
    get:
      operationId: DescribeVcenterClients
      description: |-
        Returns a list of the installed vCenter clients.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResultsType'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DisassociateApplications:
    post:
      operationId: DisassociateApplications
      description: |-
        Disassociate applications from wave.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                waveID:
                  $ref: '#/components/schemas/WaveID'
                applicationIDs:
                  $ref: '#/components/schemas/ApplicationIDs'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /DisassociateSourceServers:
    post:
      operationId: DisassociateSourceServers
      description: |-
        Disassociate source servers from application.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationID:
                  $ref: '#/components/schemas/ApplicationID'
                sourceServerIDs:
                  $ref: '#/components/schemas/DisassociateSourceServersRequestSourceServerIDs'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /DisconnectFromService:
    post:
      operationId: DisconnectFromService
      description: |-
        Disconnects specific Source Servers from Application Migration Service. Data replication is stopped immediately. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. If the agent on the source server has not been prevented from communicating with the Application Migration Service service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /FinalizeCutover:
    post:
      operationId: FinalizeCutover
      description: |-
        Finalizes the cutover immediately for specific Source Servers. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. The AWS Replication Agent will receive a command to uninstall itself (within 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be changed to DISCONNECTED; The SourceServer.lifeCycle.state will be changed to CUTOVER; The totalStorageBytes property fo each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetLaunchConfiguration:
    post:
      operationId: GetLaunchConfiguration
      description: |-
        Lists all LaunchConfigurations available, filtered by Source Server IDs.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /GetReplicationConfiguration:
    post:
      operationId: GetReplicationConfiguration
      description: |-
        Lists all ReplicationConfigurations, filtered by Source Server ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /InitializeService:
    post:
      operationId: InitializeService
      description: |-
        Initialize Application Migration Service.
      parameters: []
      responses:
        '204': {}
        '403':
          description: |-
            Operating denied due to a file permission or access check error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListApplications:
    post:
      operationId: ListApplications
      description: |-
        Retrieves all applications or multiple applications by ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/ListApplicationsRequestFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /ListConnectors:
    post:
      operationId: ListConnectors
      description: |-
        List Connectors.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/ListConnectorsRequestFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListExportErrors:
    post:
      operationId: ListExportErrors
      description: |-
        List export errors.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exportID:
                  $ref: '#/components/schemas/ExportID'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListExports:
    post:
      operationId: ListExports
      description: |-
        List exports.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/ListExportsRequestFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /ListImportErrors:
    post:
      operationId: ListImportErrors
      description: |-
        List import errors.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                importID:
                  $ref: '#/components/schemas/ImportID'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListImports:
    post:
      operationId: ListImports
      description: |-
        List imports.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/ListImportsRequestFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListManagedAccounts:
    post:
      operationId: ListManagedAccounts
      description: |-
        List Managed Accounts.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListSourceServerActions:
    post:
      operationId: ListSourceServerActions
      description: |-
        List source server post migration custom actions.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                filters:
                  $ref: '#/components/schemas/SourceServerActionsRequestFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        List all tags for your Application Migration Service resources.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ARN'
      responses:
        '200': {}
        '403':
          description: |-
            Operating denied due to a file permission or access check error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Reached throttling quota exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Adds or overwrites only the specified tags for the specified Application Migration Service resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ARN'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '200': {}
        '403':
          description: |-
            Operating denied due to a file permission or access check error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Reached throttling quota exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Deletes the specified set of tags from the specified set of Application Migration Service resources.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ARN'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeys'
      responses:
        '200': {}
        '403':
          description: |-
            Operating denied due to a file permission or access check error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The server encountered an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Reached throttling quota exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListTemplateActions:
    post:
      operationId: ListTemplateActions
      description: |-
        List template post migration custom actions.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                launchConfigurationTemplateID:
                  $ref: '#/components/schemas/LaunchConfigurationTemplateID'
                filters:
                  $ref: '#/components/schemas/TemplateActionsRequestFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /ListWaves:
    post:
      operationId: ListWaves
      description: |-
        Retrieves all waves or multiple waves by ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/ListWavesRequestFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResultsType'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /MarkAsArchived:
    post:
      operationId: MarkAsArchived
      description: |-
        Archives specific Source Servers by setting the SourceServer.isArchived property to true for specified SourceServers by ID. This command only works for SourceServers with a lifecycle. state which equals DISCONNECTED or CUTOVER.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /PauseReplication:
    post:
      operationId: PauseReplication
      description: |-
        Pause Replication.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /PutSourceServerAction:
    post:
      operationId: PutSourceServerAction
      description: |-
        Put source server post migration custom action.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                actionName:
                  $ref: '#/components/schemas/ActionName'
                documentIdentifier:
                  $ref: '#/components/schemas/BoundedString'
                order:
                  $ref: '#/components/schemas/OrderType'
                actionID:
                  $ref: '#/components/schemas/ActionID'
                documentVersion:
                  $ref: '#/components/schemas/DocumentVersion'
                active:
                  $ref: '#/components/schemas/Boolean'
                timeoutSeconds:
                  $ref: '#/components/schemas/StrictlyPositiveInteger'
                mustSucceedForCutover:
                  $ref: '#/components/schemas/Boolean'
                parameters:
                  $ref: '#/components/schemas/SsmDocumentParameters'
                externalParameters:
                  $ref: '#/components/schemas/SsmDocumentExternalParameters'
                description:
                  $ref: '#/components/schemas/ActionDescription'
                category:
                  $ref: '#/components/schemas/ActionCategory'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /PutTemplateAction:
    post:
      operationId: PutTemplateAction
      description: |-
        Put template post migration custom action.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                launchConfigurationTemplateID:
                  $ref: '#/components/schemas/LaunchConfigurationTemplateID'
                actionName:
                  $ref: '#/components/schemas/BoundedString'
                documentIdentifier:
                  $ref: '#/components/schemas/BoundedString'
                order:
                  $ref: '#/components/schemas/OrderType'
                actionID:
                  $ref: '#/components/schemas/ActionID'
                documentVersion:
                  $ref: '#/components/schemas/DocumentVersion'
                active:
                  $ref: '#/components/schemas/Boolean'
                timeoutSeconds:
                  $ref: '#/components/schemas/StrictlyPositiveInteger'
                mustSucceedForCutover:
                  $ref: '#/components/schemas/Boolean'
                parameters:
                  $ref: '#/components/schemas/SsmDocumentParameters'
                operatingSystem:
                  $ref: '#/components/schemas/OperatingSystemString'
                externalParameters:
                  $ref: '#/components/schemas/SsmDocumentExternalParameters'
                description:
                  $ref: '#/components/schemas/ActionDescription'
                category:
                  $ref: '#/components/schemas/ActionCategory'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /RemoveSourceServerAction:
    post:
      operationId: RemoveSourceServerAction
      description: |-
        Remove source server post migration custom action.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                actionID:
                  $ref: '#/components/schemas/ActionID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '204': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /RemoveTemplateAction:
    post:
      operationId: RemoveTemplateAction
      description: |-
        Remove template post migration custom action.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                launchConfigurationTemplateID:
                  $ref: '#/components/schemas/LaunchConfigurationTemplateID'
                actionID:
                  $ref: '#/components/schemas/ActionID'
      responses:
        '204': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ResumeReplication:
    post:
      operationId: ResumeReplication
      description: |-
        Resume Replication.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /RetryDataReplication:
    post:
      operationId: RetryDataReplication
      description: |-
        Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /StartCutover:
    post:
      operationId: StartCutover
      description: |-
        Launches a Cutover Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartCutover and changes the SourceServer.lifeCycle.state property to CUTTING_OVER.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerIDs:
                  $ref: '#/components/schemas/StartCutoverRequestSourceServerIDs'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '202': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /StartExport:
    post:
      operationId: StartExport
      description: |-
        Start export.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                s3Bucket:
                  $ref: '#/components/schemas/S3BucketName'
                s3Key:
                  $ref: '#/components/schemas/S3Key'
                s3BucketOwner:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '202': {}
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /StartImport:
    post:
      operationId: StartImport
      description: |-
        Start import.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientIdempotencyToken'
                s3BucketSource:
                  $ref: '#/components/schemas/S3BucketSource'
      responses:
        '202': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /StartReplication:
    post:
      operationId: StartReplication
      description: |-
        Starts replication for SNAPSHOT_SHIPPING agents.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /StartTest:
    post:
      operationId: StartTest
      description: |-
        Launches a Test Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartTest and changes the SourceServer.lifeCycle.state property to TESTING.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerIDs:
                  $ref: '#/components/schemas/StartTestRequestSourceServerIDs'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '202': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /StopReplication:
    post:
      operationId: StopReplication
      description: |-
        Stop Replication.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /TerminateTargetInstances:
    post:
      operationId: TerminateTargetInstances
      description: |-
        Starts a job that terminates specific launched EC2 Test and Cutover instances. This command will not work for any Source Server with a lifecycle.state of TESTING, CUTTING_OVER, or CUTOVER.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerIDs:
                  $ref: '#/components/schemas/TerminateTargetInstancesRequestSourceServerIDs'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '202': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UnarchiveApplication:
    post:
      operationId: UnarchiveApplication
      description: |-
        Unarchive application.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationID:
                  $ref: '#/components/schemas/ApplicationID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /UnarchiveWave:
    post:
      operationId: UnarchiveWave
      description: |-
        Unarchive wave.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                waveID:
                  $ref: '#/components/schemas/WaveID'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request could not be completed because its exceeded the service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /UpdateApplication:
    post:
      operationId: UpdateApplication
      description: |-
        Update application.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationID:
                  $ref: '#/components/schemas/ApplicationID'
                name:
                  $ref: '#/components/schemas/ApplicationName'
                description:
                  $ref: '#/components/schemas/ApplicationDescription'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /UpdateConnector:
    post:
      operationId: UpdateConnector
      description: |-
        Update Connector.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorID:
                  $ref: '#/components/schemas/ConnectorID'
                name:
                  $ref: '#/components/schemas/ConnectorName'
                ssmCommandConfig:
                  $ref: '#/components/schemas/ConnectorSsmCommandConfig'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UpdateLaunchConfiguration:
    post:
      operationId: UpdateLaunchConfiguration
      description: |-
        Updates multiple LaunchConfigurations by Source Server ID.

        bootMode valid values are `LEGACY_BIOS | UEFI`
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                name:
                  $ref: '#/components/schemas/SmallBoundedString'
                launchDisposition:
                  $ref: '#/components/schemas/LaunchDisposition'
                targetInstanceTypeRightSizingMethod:
                  $ref: '#/components/schemas/TargetInstanceTypeRightSizingMethod'
                copyPrivateIp:
                  $ref: '#/components/schemas/Boolean'
                copyTags:
                  $ref: '#/components/schemas/Boolean'
                licensing:
                  $ref: '#/components/schemas/Licensing'
                bootMode:
                  $ref: '#/components/schemas/BootMode'
                postLaunchActions:
                  $ref: '#/components/schemas/PostLaunchActions'
                enableMapAutoTagging:
                  $ref: '#/components/schemas/Boolean'
                mapAutoTaggingMpeID:
                  $ref: '#/components/schemas/TagValue'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UpdateLaunchConfigurationTemplate:
    post:
      operationId: UpdateLaunchConfigurationTemplate
      description: |-
        Updates an existing Launch Configuration Template by ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                launchConfigurationTemplateID:
                  $ref: '#/components/schemas/LaunchConfigurationTemplateID'
                postLaunchActions:
                  $ref: '#/components/schemas/PostLaunchActions'
                enableMapAutoTagging:
                  $ref: '#/components/schemas/Boolean'
                mapAutoTaggingMpeID:
                  $ref: '#/components/schemas/TagValue'
                launchDisposition:
                  $ref: '#/components/schemas/LaunchDisposition'
                targetInstanceTypeRightSizingMethod:
                  $ref: '#/components/schemas/TargetInstanceTypeRightSizingMethod'
                copyPrivateIp:
                  $ref: '#/components/schemas/Boolean'
                associatePublicIpAddress:
                  $ref: '#/components/schemas/Boolean'
                copyTags:
                  $ref: '#/components/schemas/Boolean'
                licensing:
                  $ref: '#/components/schemas/Licensing'
                bootMode:
                  $ref: '#/components/schemas/BootMode'
                smallVolumeMaxSize:
                  $ref: '#/components/schemas/PositiveInteger'
                smallVolumeConf:
                  $ref: '#/components/schemas/LaunchTemplateDiskConf'
                largeVolumeConf:
                  $ref: '#/components/schemas/LaunchTemplateDiskConf'
      responses:
        '200': {}
        '403':
          description: |-
            Operating denied due to a file permission or access check error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UpdateReplicationConfiguration:
    post:
      operationId: UpdateReplicationConfiguration
      description: |-
        Allows you to update multiple ReplicationConfigurations by Source Server ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                name:
                  $ref: '#/components/schemas/SmallBoundedString'
                stagingAreaSubnetId:
                  $ref: '#/components/schemas/SubnetID'
                associateDefaultSecurityGroup:
                  $ref: '#/components/schemas/Boolean'
                replicationServersSecurityGroupsIDs:
                  $ref: '#/components/schemas/ReplicationServersSecurityGroupsIDs'
                replicationServerInstanceType:
                  $ref: '#/components/schemas/EC2InstanceType'
                useDedicatedReplicationServer:
                  $ref: '#/components/schemas/Boolean'
                defaultLargeStagingDiskType:
                  $ref: '#/components/schemas/ReplicationConfigurationDefaultLargeStagingDiskType'
                replicatedDisks:
                  $ref: '#/components/schemas/ReplicationConfigurationReplicatedDisks'
                ebsEncryption:
                  $ref: '#/components/schemas/ReplicationConfigurationEbsEncryption'
                ebsEncryptionKeyArn:
                  $ref: '#/components/schemas/ARN'
                bandwidthThrottling:
                  $ref: '#/components/schemas/BandwidthThrottling'
                dataPlaneRouting:
                  $ref: '#/components/schemas/ReplicationConfigurationDataPlaneRouting'
                createPublicIP:
                  $ref: '#/components/schemas/Boolean'
                stagingAreaTags:
                  $ref: '#/components/schemas/TagsMap'
                useFipsEndpoint:
                  $ref: '#/components/schemas/Boolean'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '403':
          description: |-
            Operating denied due to a file permission or access check error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UpdateReplicationConfigurationTemplate:
    post:
      operationId: UpdateReplicationConfigurationTemplate
      description: |-
        Updates multiple ReplicationConfigurationTemplates by ID.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                replicationConfigurationTemplateID:
                  $ref: '#/components/schemas/ReplicationConfigurationTemplateID'
                arn:
                  $ref: '#/components/schemas/ARN'
                stagingAreaSubnetId:
                  $ref: '#/components/schemas/SubnetID'
                associateDefaultSecurityGroup:
                  $ref: '#/components/schemas/Boolean'
                replicationServersSecurityGroupsIDs:
                  $ref: '#/components/schemas/ReplicationServersSecurityGroupsIDs'
                replicationServerInstanceType:
                  $ref: '#/components/schemas/EC2InstanceType'
                useDedicatedReplicationServer:
                  $ref: '#/components/schemas/Boolean'
                defaultLargeStagingDiskType:
                  $ref: '#/components/schemas/ReplicationConfigurationDefaultLargeStagingDiskType'
                ebsEncryption:
                  $ref: '#/components/schemas/ReplicationConfigurationEbsEncryption'
                ebsEncryptionKeyArn:
                  $ref: '#/components/schemas/ARN'
                bandwidthThrottling:
                  $ref: '#/components/schemas/BandwidthThrottling'
                dataPlaneRouting:
                  $ref: '#/components/schemas/ReplicationConfigurationDataPlaneRouting'
                createPublicIP:
                  $ref: '#/components/schemas/Boolean'
                stagingAreaTags:
                  $ref: '#/components/schemas/TagsMap'
                useFipsEndpoint:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            Operating denied due to a file permission or access check error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UpdateSourceServer:
    post:
      operationId: UpdateSourceServer
      description: |-
        Update Source Server.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountID:
                  $ref: '#/components/schemas/AccountID'
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                connectorAction:
                  $ref: '#/components/schemas/SourceServerConnectorAction'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
  /UpdateSourceServerReplicationType:
    post:
      operationId: UpdateSourceServerReplicationType
      description: |-
        Allows you to change between the AGENT_BASED replication type and the SNAPSHOT_SHIPPING replication type.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceServerID:
                  $ref: '#/components/schemas/SourceServerID'
                replicationType:
                  $ref: '#/components/schemas/ReplicationType'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Validate exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UpdateWave:
    post:
      operationId: UpdateWave
      description: |-
        Update wave.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                waveID:
                  $ref: '#/components/schemas/WaveID'
                name:
                  $ref: '#/components/schemas/WaveName'
                description:
                  $ref: '#/components/schemas/WaveDescription'
                accountID:
                  $ref: '#/components/schemas/AccountID'
      responses:
        '200': {}
        '409':
          description: |-
            The request could not be completed due to a conflict with the current state of the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            Resource not found exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            Uninitialized account exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UninitializedAccountException'
components:
  schemas:
    ARN:
      type: string
      minLength: 20
      maxLength: 2048
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/LargeBoundedString'
        code:
          $ref: '#/components/schemas/LargeBoundedString'
      description: Operating denied due to a file permission or access check error.
    AccountID:
      type: string
      pattern: '[0-9]{12,}'
      minLength: 12
      maxLength: 12
    ActionCategory:
      type: string
      enum:
      - DISASTER_RECOVERY
      - OPERATING_SYSTEM
      - LICENSE_AND_SUBSCRIPTION
      - VALIDATION
      - OBSERVABILITY
      - REFACTORING
      - SECURITY
      - NETWORKING
      - CONFIGURATION
      - BACKUP
      - OTHER
    ActionDescription:
      type: string
      pattern: '^[0-9a-zA-Z ():/.,''-_#*;

        ]*$'
      minLength: 0
      maxLength: 256
    ActionID:
      type: string
      pattern: '[0-9a-zA-Z]$'
      minLength: 1
      maxLength: 64
    ActionIDs:
      type: array
      items:
        $ref: '#/components/schemas/ActionID'
    ActionName:
      type: string
      pattern: ^[^\s\x00]( *[^\s\x00])*$
      minLength: 1
      maxLength: 256
    ApplianceID:
      type: string
      pattern: ^appliance-[0-9a-zA-Z]{17}$
      minLength: 27
      maxLength: 27
    Application:
      type: object
      properties:
        applicationID:
          allOf:
          - $ref: '#/components/schemas/ApplicationID'
          description: Application ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Application ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/ApplicationName'
          description: Application name.
        description:
          allOf:
          - $ref: '#/components/schemas/ApplicationDescription'
          description: Application description.
        isArchived:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Application archival status.
        applicationAggregatedStatus:
          allOf:
          - $ref: '#/components/schemas/ApplicationAggregatedStatus'
          description: Application aggregated status.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Application creation dateTime.
        lastModifiedDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Application last modified dateTime.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Application tags.
        waveID:
          allOf:
          - $ref: '#/components/schemas/WaveID'
          description: Application wave ID.
    ApplicationAggregatedStatus:
      type: object
      properties:
        lastUpdateDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Application aggregated status last update dateTime.
        healthStatus:
          allOf:
          - $ref: '#/components/schemas/ApplicationHealthStatus'
          description: Application aggregated status health status.
        progressStatus:
          allOf:
          - $ref: '#/components/schemas/ApplicationProgressStatus'
          description: Application aggregated status progress status.
        totalSourceServers:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Application aggregated status total source servers amount.
      description: Application aggregated status.
    ApplicationDescription:
      type: string
      pattern: ^[^\x00]*$
      minLength: 0
      maxLength: 600
    ApplicationHealthStatus:
      type: string
      enum:
      - HEALTHY
      - LAGGING
      - ERROR
    ApplicationID:
      type: string
      pattern: ^app-[0-9a-zA-Z]{17}$
      minLength: 21
      maxLength: 21
    ApplicationIDs:
      type: array
      items:
        $ref: '#/components/schemas/ApplicationID'
    ApplicationIDsFilter:
      type: array
      items:
        $ref: '#/components/schemas/ApplicationID'
    ApplicationName:
      type: string
      pattern: ^[^\s\x00]( *[^\s\x00])*$
      minLength: 1
      maxLength: 256
    ApplicationProgressStatus:
      type: string
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - COMPLETED
    ApplicationsList:
      type: array
      items:
        $ref: '#/components/schemas/Application'
    ArchiveApplicationRequest:
      type: object
      properties:
        applicationID:
          allOf:
          - $ref: '#/components/schemas/ApplicationID'
          description: Application ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - applicationID
    ArchiveWaveRequest:
      type: object
      properties:
        waveID:
          allOf:
          - $ref: '#/components/schemas/WaveID'
          description: Wave ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - waveID
    AssociateApplicationsRequest:
      type: object
      properties:
        waveID:
          allOf:
          - $ref: '#/components/schemas/WaveID'
          description: Wave ID.
        applicationIDs:
          allOf:
          - $ref: '#/components/schemas/ApplicationIDs'
          description: Application IDs list.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - waveID
      - applicationIDs
    AssociateApplicationsResponse:
      type: object
      properties: {}
    AssociateSourceServersRequest:
      type: object
      properties:
        applicationID:
          allOf:
          - $ref: '#/components/schemas/ApplicationID'
          description: Application ID.
        sourceServerIDs:
          allOf:
          - $ref: '#/components/schemas/AssociateSourceServersRequestSourceServerIDs'
          description: Source server IDs list.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - applicationID
      - sourceServerIDs
    AssociateSourceServersRequestSourceServerIDs:
      type: array
      items:
        $ref: '#/components/schemas/SourceServerID'
    AssociateSourceServersResponse:
      type: object
      properties: {}
    BandwidthThrottling:
      type: integer
      format: int64
      default: 0
      minimum: 0
      maximum: 10000
    BootMode:
      type: string
      enum:
      - LEGACY_BIOS
      - UEFI
      - USE_SOURCE
    BoundedString:
      type: string
      minLength: 0
      maxLength: 256
    CPU:
      type: object
      properties:
        cores:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: The number of CPU cores on the source server.
        modelName:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: The source server's CPU model name.
      description: Source server CPU information.
    ChangeServerLifeCycleStateRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: The request to change the source server migration lifecycle
            state by source server ID.
        lifeCycle:
          allOf:
          - $ref: '#/components/schemas/ChangeServerLifeCycleStateSourceServerLifecycle'
          description: The request to change the source server migration lifecycle
            state.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: The request to change the source server migration account ID.
      required:
      - sourceServerID
      - lifeCycle
    ChangeServerLifeCycleStateSourceServerLifecycle:
      type: object
      properties:
        state:
          allOf:
          - $ref: '#/components/schemas/ChangeServerLifeCycleStateSourceServerLifecycleState'
          description: The request to change the source server migration lifecycle
            state.
      required:
      - state
      description: The request to change the source server migration lifecycle state.
    ChangeServerLifeCycleStateSourceServerLifecycleState:
      type: string
      enum:
      - READY_FOR_TEST
      - READY_FOR_CUTOVER
      - CUTOVER
    ClientIdempotencyToken:
      type: string
      minLength: 0
      maxLength: 64
    CloudWatchLogGroupName:
      type: string
      pattern: ^[\.\-_/#A-Za-z0-9]+$
      minLength: 1
      maxLength: 512
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/LargeBoundedString'
        code:
          $ref: '#/components/schemas/LargeBoundedString'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: A conflict occurred when prompting for the Resource ID.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: A conflict occurred when prompting for resource type.
        errors:
          allOf:
          - $ref: '#/components/schemas/ConflictExceptionErrors'
          description: Conflict Exception specific errors.
      description: The request could not be completed due to a conflict with the current
        state of the target resource.
    ConflictExceptionErrors:
      type: array
      items:
        $ref: '#/components/schemas/ErrorDetails'
    Connector:
      type: object
      properties:
        connectorID:
          allOf:
          - $ref: '#/components/schemas/ConnectorID'
          description: Connector ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ConnectorName'
          description: Connector name.
        ssmInstanceID:
          allOf:
          - $ref: '#/components/schemas/SsmInstanceID'
          description: Connector SSM instance ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Connector arn.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Connector tags.
        ssmCommandConfig:
          allOf:
          - $ref: '#/components/schemas/ConnectorSsmCommandConfig'
          description: Connector SSM command config.
    ConnectorArn:
      type: string
      pattern: ^arn:[\w-]+:mgn:([a-z]{2}-(gov-)?[a-z]+-\d{1})?:(\d{12})?:connector\/(connector-[0-9a-zA-Z]{17})$
      minLength: 27
      maxLength: 100
    ConnectorID:
      type: string
      pattern: ^connector-[0-9a-zA-Z]{17}$
      minLength: 27
      maxLength: 27
    ConnectorIDsFilter:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorID'
    ConnectorName:
      type: string
      pattern: ^[A-Za-z0-9_-]+$
      minLength: 1
      maxLength: 256
    ConnectorSsmCommandConfig:
      type: object
      properties:
        s3OutputEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Connector SSM command config S3 output enabled.
        outputS3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: Connector SSM command config output S3 bucket name.
        cloudWatchOutputEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Connector SSM command config CloudWatch output enabled.
        cloudWatchLogGroupName:
          allOf:
          - $ref: '#/components/schemas/CloudWatchLogGroupName'
          description: Connector SSM command config CloudWatch log group name.
      required:
      - s3OutputEnabled
      - cloudWatchOutputEnabled
      description: Connector SSM command config.
    ConnectorsList:
      type: array
      items:
        $ref: '#/components/schemas/Connector'
    Cpus:
      type: array
      items:
        $ref: '#/components/schemas/CPU'
    CreateApplicationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ApplicationName'
          description: Application name.
        description:
          allOf:
          - $ref: '#/components/schemas/ApplicationDescription'
          description: Application description.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Application tags.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - name
    CreateConnectorRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ConnectorName'
          description: Create Connector request name.
        ssmInstanceID:
          allOf:
          - $ref: '#/components/schemas/SsmInstanceID'
          description: Create Connector request SSM instance ID.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Create Connector request tags.
        ssmCommandConfig:
          allOf:
          - $ref: '#/components/schemas/ConnectorSsmCommandConfig'
          description: Create Connector request SSM command config.
      required:
      - name
      - ssmInstanceID
    CreateLaunchConfigurationTemplateRequest:
      type: object
      properties:
        postLaunchActions:
          allOf:
          - $ref: '#/components/schemas/PostLaunchActions'
          description: Launch configuration template post launch actions.
        enableMapAutoTagging:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Enable map auto tagging.
        mapAutoTaggingMpeID:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: Launch configuration template map auto tagging MPE ID.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Request to associate tags during creation of a Launch Configuration
            Template.
        launchDisposition:
          allOf:
          - $ref: '#/components/schemas/LaunchDisposition'
          description: Launch disposition.
        targetInstanceTypeRightSizingMethod:
          allOf:
          - $ref: '#/components/schemas/TargetInstanceTypeRightSizingMethod'
          description: Target instance type right-sizing method.
        copyPrivateIp:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Copy private Ip.
        associatePublicIpAddress:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Associate public Ip address.
        copyTags:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Copy tags.
        licensing:
          $ref: '#/components/schemas/Licensing'
        bootMode:
          allOf:
          - $ref: '#/components/schemas/BootMode'
          description: Launch configuration template boot mode.
        smallVolumeMaxSize:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Small volume maximum size.
        smallVolumeConf:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateDiskConf'
          description: Small volume config.
        largeVolumeConf:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateDiskConf'
          description: Large volume config.
    CreateReplicationConfigurationTemplateRequest:
      type: object
      properties:
        stagingAreaSubnetId:
          allOf:
          - $ref: '#/components/schemas/SubnetID'
          description: Request to configure the Staging Area subnet ID during Replication
            Settings template creation.
        associateDefaultSecurityGroup:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Request to associate the default Application Migration Service
            Security group with the Replication Settings template.
        replicationServersSecurityGroupsIDs:
          allOf:
          - $ref: '#/components/schemas/ReplicationServersSecurityGroupsIDs'
          description: Request to configure the Replication Server Security group
            ID during Replication Settings template creation.
        replicationServerInstanceType:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceType'
          description: Request to configure the Replication Server instance type during
            Replication Settings template creation.
        useDedicatedReplicationServer:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Request to use Dedicated Replication Servers during Replication
            Settings template creation.
        defaultLargeStagingDiskType:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationDefaultLargeStagingDiskType'
          description: Request to configure the default large staging disk EBS volume
            type during Replication Settings template creation.
        ebsEncryption:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationEbsEncryption'
          description: Request to configure EBS encryption during Replication Settings
            template creation.
        ebsEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Request to configure an EBS encryption key during Replication
            Settings template creation.
        bandwidthThrottling:
          allOf:
          - $ref: '#/components/schemas/BandwidthThrottling'
          description: Request to configure bandwidth throttling during Replication
            Settings template creation.
        dataPlaneRouting:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationDataPlaneRouting'
          description: Request to configure data plane routing during Replication
            Settings template creation.
        createPublicIP:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Request to create Public IP during Replication Settings template
            creation.
        stagingAreaTags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Request to configure Staging Area tags during Replication Settings
            template creation.
        useFipsEndpoint:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Request to use Fips Endpoint during Replication Settings template
            creation.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Request to configure tags during Replication Settings template
            creation.
      required:
      - stagingAreaSubnetId
      - associateDefaultSecurityGroup
      - replicationServersSecurityGroupsIDs
      - replicationServerInstanceType
      - useDedicatedReplicationServer
      - defaultLargeStagingDiskType
      - ebsEncryption
      - bandwidthThrottling
      - dataPlaneRouting
      - createPublicIP
      - stagingAreaTags
    CreateWaveRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/WaveName'
          description: Wave name.
        description:
          allOf:
          - $ref: '#/components/schemas/WaveDescription'
          description: Wave description.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Wave tags.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - name
    DataReplicationError:
      type: object
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/DataReplicationErrorString'
          description: Error in data replication.
        rawError:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Error in data replication.
      description: Error in data replication.
    DataReplicationErrorString:
      type: string
      enum:
      - AGENT_NOT_SEEN
      - SNAPSHOTS_FAILURE
      - NOT_CONVERGING
      - UNSTABLE_NETWORK
      - FAILED_TO_CREATE_SECURITY_GROUP
      - FAILED_TO_LAUNCH_REPLICATION_SERVER
      - FAILED_TO_BOOT_REPLICATION_SERVER
      - FAILED_TO_AUTHENTICATE_WITH_SERVICE
      - FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE
      - FAILED_TO_CREATE_STAGING_DISKS
      - FAILED_TO_ATTACH_STAGING_DISKS
      - FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT
      - FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER
      - FAILED_TO_START_DATA_TRANSFER
      - UNSUPPORTED_VM_CONFIGURATION
      - LAST_SNAPSHOT_JOB_FAILED
    DataReplicationInfo:
      type: object
      properties:
        lagDuration:
          allOf:
          - $ref: '#/components/schemas/ISO8601DurationString'
          description: Request to query data replication lag duration.
        etaDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Request to query the time when data replication will be complete.
        replicatedDisks:
          allOf:
          - $ref: '#/components/schemas/DataReplicationInfoReplicatedDisks'
          description: Request to query disks replicated.
        dataReplicationState:
          allOf:
          - $ref: '#/components/schemas/DataReplicationState'
          description: Request to query the data replication state.
        dataReplicationInitiation:
          allOf:
          - $ref: '#/components/schemas/DataReplicationInitiation'
          description: Request to query whether data replication has been initiated.
        dataReplicationError:
          allOf:
          - $ref: '#/components/schemas/DataReplicationError'
          description: Error in obtaining data replication info.
        lastSnapshotDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Request to query data replication last snapshot time.
      description: Request data replication info.
    DataReplicationInfoReplicatedDisk:
      type: object
      properties:
        deviceName:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Request to query device name.
        totalStorageBytes:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Request to query total amount of data replicated in bytes.
        replicatedStorageBytes:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Request to query amount of data replicated in bytes.
        rescannedStorageBytes:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Request to query amount of data rescanned in bytes.
        backloggedStorageBytes:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Request to query data replication backlog size in bytes.
      description: Request to query disks replicated.
    DataReplicationInfoReplicatedDisks:
      type: array
      items:
        $ref: '#/components/schemas/DataReplicationInfoReplicatedDisk'
    DataReplicationInitiation:
      type: object
      properties:
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Request to query data initiation start date and time.
        nextAttemptDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Request to query next data initiation date and time.
        steps:
          allOf:
          - $ref: '#/components/schemas/DataReplicationInitiationSteps'
          description: Request to query data initiation steps.
      description: Data replication initiation.
    DataReplicationInitiationStep:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/DataReplicationInitiationStepName'
          description: Request to query data initiation step name.
        status:
          allOf:
          - $ref: '#/components/schemas/DataReplicationInitiationStepStatus'
          description: Request to query data initiation status.
      description: Data replication initiation step.
    DataReplicationInitiationStepName:
      type: string
      enum:
      - WAIT
      - CREATE_SECURITY_GROUP
      - LAUNCH_REPLICATION_SERVER
      - BOOT_REPLICATION_SERVER
      - AUTHENTICATE_WITH_SERVICE
      - DOWNLOAD_REPLICATION_SOFTWARE
      - CREATE_STAGING_DISKS
      - ATTACH_STAGING_DISKS
      - PAIR_REPLICATION_SERVER_WITH_AGENT
      - CONNECT_AGENT_TO_REPLICATION_SERVER
      - START_DATA_TRANSFER
    DataReplicationInitiationStepStatus:
      type: string
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - SUCCEEDED
      - FAILED
      - SKIPPED
    DataReplicationInitiationSteps:
      type: array
      items:
        $ref: '#/components/schemas/DataReplicationInitiationStep'
    DataReplicationState:
      type: string
      enum:
      - STOPPED
      - INITIATING
      - INITIAL_SYNC
      - BACKLOG
      - CREATING_SNAPSHOT
      - CONTINUOUS
      - PAUSED
      - RESCAN
      - STALLED
      - DISCONNECTED
      - PENDING_SNAPSHOT_SHIPPING
      - SHIPPING_SNAPSHOT
    DeleteApplicationRequest:
      type: object
      properties:
        applicationID:
          allOf:
          - $ref: '#/components/schemas/ApplicationID'
          description: Application ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - applicationID
    DeleteApplicationResponse:
      type: object
      properties: {}
    DeleteConnectorRequest:
      type: object
      properties:
        connectorID:
          allOf:
          - $ref: '#/components/schemas/ConnectorID'
          description: Delete Connector request connector ID.
      required:
      - connectorID
    DeleteJobRequest:
      type: object
      properties:
        jobID:
          allOf:
          - $ref: '#/components/schemas/JobID'
          description: Request to delete Job from service by Job ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Request to delete Job from service by Account ID.
      required:
      - jobID
    DeleteJobResponse:
      type: object
      properties: {}
    DeleteLaunchConfigurationTemplateRequest:
      type: object
      properties:
        launchConfigurationTemplateID:
          allOf:
          - $ref: '#/components/schemas/LaunchConfigurationTemplateID'
          description: ID of resource to be deleted.
      required:
      - launchConfigurationTemplateID
    DeleteLaunchConfigurationTemplateResponse:
      type: object
      properties: {}
    DeleteReplicationConfigurationTemplateRequest:
      type: object
      properties:
        replicationConfigurationTemplateID:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationTemplateID'
          description: Request to delete Replication Configuration Template from service
            by Replication Configuration Template ID.
      required:
      - replicationConfigurationTemplateID
    DeleteReplicationConfigurationTemplateResponse:
      type: object
      properties: {}
    DeleteSourceServerRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Request to delete Source Server from service by Server ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Request to delete Source Server from service by Account ID.
      required:
      - sourceServerID
    DeleteSourceServerResponse:
      type: object
      properties: {}
    DeleteVcenterClientRequest:
      type: object
      properties:
        vcenterClientID:
          allOf:
          - $ref: '#/components/schemas/VcenterClientID'
          description: ID of resource to be deleted.
      required:
      - vcenterClientID
    DeleteWaveRequest:
      type: object
      properties:
        waveID:
          allOf:
          - $ref: '#/components/schemas/WaveID'
          description: Wave ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - waveID
    DeleteWaveResponse:
      type: object
      properties: {}
    DescribeJobLogItemsRequest:
      type: object
      properties:
        jobID:
          allOf:
          - $ref: '#/components/schemas/JobID'
          description: Request to describe Job log job ID.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: Request to describe Job log item maximum results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Request to describe Job log next token.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Request to describe Job log Account ID.
      required:
      - jobID
    DescribeJobLogItemsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/JobLogs'
          description: Request to describe Job log response items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Request to describe Job log response next token.
    DescribeJobsRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/DescribeJobsRequestFilters'
          description: Request to describe Job log filters.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: Request to describe job log items by max results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Request to describe job log items by next token.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Request to describe job log items by Account ID.
    DescribeJobsRequestFilters:
      type: object
      properties:
        jobIDs:
          allOf:
          - $ref: '#/components/schemas/DescribeJobsRequestFiltersJobIDs'
          description: Request to describe Job log filters by job ID.
        fromDate:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Request to describe Job log filters by date.
        toDate:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Request to describe job log items by last date.
      description: Request to describe Job log filters.
    DescribeJobsRequestFiltersJobIDs:
      type: array
      items:
        $ref: '#/components/schemas/JobID'
    DescribeJobsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/JobsList'
          description: Request to describe Job log items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Request to describe Job response by next token.
    DescribeLaunchConfigurationTemplatesRequest:
      type: object
      properties:
        launchConfigurationTemplateIDs:
          allOf:
          - $ref: '#/components/schemas/LaunchConfigurationTemplateIDs'
          description: Request to filter Launch Configuration Templates list by Launch
            Configuration Template ID.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: Maximum results to be returned in DescribeLaunchConfigurationTemplates.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Next pagination token returned from DescribeLaunchConfigurationTemplates.
    DescribeLaunchConfigurationTemplatesResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/LaunchConfigurationTemplates'
          description: List of items returned by DescribeLaunchConfigurationTemplates.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Next pagination token returned from DescribeLaunchConfigurationTemplates.
    DescribeReplicationConfigurationTemplatesRequest:
      type: object
      properties:
        replicationConfigurationTemplateIDs:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationTemplateIDs'
          description: Request to describe Replication Configuration template by template
            IDs.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: Request to describe Replication Configuration template by max
            results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Request to describe Replication Configuration template by next
            token.
    DescribeReplicationConfigurationTemplatesResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationTemplates'
          description: Request to describe Replication Configuration template by items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Request to describe Replication Configuration template by next
            token.
    DescribeSourceServersRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/DescribeSourceServersRequestFilters'
          description: Request to filter Source Servers list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: Request to filter Source Servers list by maximum results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Request to filter Source Servers list by next token.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Request to filter Source Servers list by Accoun ID.
    DescribeSourceServersRequestApplicationIDs:
      type: array
      items:
        $ref: '#/components/schemas/ApplicationID'
    DescribeSourceServersRequestFilters:
      type: object
      properties:
        sourceServerIDs:
          allOf:
          - $ref: '#/components/schemas/DescribeSourceServersRequestFiltersIDs'
          description: Request to filter Source Servers list by Source Server ID.
        isArchived:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Request to filter Source Servers list by archived.
        replicationTypes:
          allOf:
          - $ref: '#/components/schemas/ReplicationTypes'
          description: Request to filter Source Servers list by replication type.
        lifeCycleStates:
          allOf:
          - $ref: '#/components/schemas/LifeCycleStates'
          description: Request to filter Source Servers list by life cycle states.
        applicationIDs:
          allOf:
          - $ref: '#/components/schemas/DescribeSourceServersRequestApplicationIDs'
          description: Request to filter Source Servers list by application IDs.
      description: Request to filter Source Servers list.
    DescribeSourceServersRequestFiltersIDs:
      type: array
      items:
        $ref: '#/components/schemas/SourceServerID'
    DescribeSourceServersResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/SourceServersList'
          description: Request to filter Source Servers list by item.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Request to filter Source Servers next token.
    DescribeVcenterClientsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: Maximum results to be returned in DescribeVcenterClients.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Next pagination token to be provided for DescribeVcenterClients.
    DescribeVcenterClientsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/VcenterClientList'
          description: List of items returned by DescribeVcenterClients.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Next pagination token returned from DescribeVcenterClients.
    DisassociateApplicationsRequest:
      type: object
      properties:
        waveID:
          allOf:
          - $ref: '#/components/schemas/WaveID'
          description: Wave ID.
        applicationIDs:
          allOf:
          - $ref: '#/components/schemas/ApplicationIDs'
          description: Application IDs list.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - waveID
      - applicationIDs
    DisassociateApplicationsResponse:
      type: object
      properties: {}
    DisassociateSourceServersRequest:
      type: object
      properties:
        applicationID:
          allOf:
          - $ref: '#/components/schemas/ApplicationID'
          description: Application ID.
        sourceServerIDs:
          allOf:
          - $ref: '#/components/schemas/DisassociateSourceServersRequestSourceServerIDs'
          description: Source server IDs list.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - applicationID
      - sourceServerIDs
    DisassociateSourceServersRequestSourceServerIDs:
      type: array
      items:
        $ref: '#/components/schemas/SourceServerID'
    DisassociateSourceServersResponse:
      type: object
      properties: {}
    DisconnectFromServiceRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Request to disconnect Source Server from service by Server
            ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Request to disconnect Source Server from service by Account
            ID.
      required:
      - sourceServerID
    Disk:
      type: object
      properties:
        deviceName:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: The disk or device name.
        bytes:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: The amount of storage on the disk in bytes.
      description: The disk identifier.
    Disks:
      type: array
      items:
        $ref: '#/components/schemas/Disk'
    DocumentVersion:
      type: string
      pattern: ^(\$DEFAULT|\$LATEST|[0-9]+)$
    EC2InstanceID:
      type: string
      pattern: ^i-[0-9a-fA-F]{8,}$
      minLength: 0
      maxLength: 255
    EC2InstanceType:
      type: string
      minLength: 0
      maxLength: 255
    EC2LaunchConfigurationTemplateID:
      type: string
      pattern: ^lt-[0-9a-z]{17}$
      minLength: 20
      maxLength: 20
    ErrorDetails:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Error details message.
        code:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Error details code.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Error details resourceId.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Error details resourceType.
      description: Error details.
    ExportErrorData:
      type: object
      properties:
        rawError:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Export errors data raw error.
      description: Export errors data.
    ExportErrors:
      type: array
      items:
        $ref: '#/components/schemas/ExportTaskError'
    ExportID:
      type: string
      pattern: ^export-[0-9a-zA-Z]{17}$
      minLength: 24
      maxLength: 24
    ExportStatus:
      type: string
      enum:
      - PENDING
      - STARTED
      - FAILED
      - SUCCEEDED
    ExportTask:
      type: object
      properties:
        exportID:
          allOf:
          - $ref: '#/components/schemas/ExportID'
          description: Export task id.
        s3Bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: Export task s3 bucket.
        s3Key:
          allOf:
          - $ref: '#/components/schemas/S3Key'
          description: Export task s3 key.
        s3BucketOwner:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Export task s3 bucket owner.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Export task creation datetime.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Export task end datetime.
        status:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          description: Export task status.
        progressPercentage:
          allOf:
          - $ref: '#/components/schemas/Float'
          description: Export task progress percentage.
        summary:
          allOf:
          - $ref: '#/components/schemas/ExportTaskSummary'
          description: Export task summary.
      description: Export task.
    ExportTaskError:
      type: object
      properties:
        errorDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Export task error datetime.
        errorData:
          allOf:
          - $ref: '#/components/schemas/ExportErrorData'
          description: Export task error data.
      description: Export task error.
    ExportTaskSummary:
      type: object
      properties:
        serversCount:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Export task summary servers count.
        applicationsCount:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Export task summary applications count.
        wavesCount:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Export task summary waves count.
      description: Export task summary.
    ExportsList:
      type: array
      items:
        $ref: '#/components/schemas/ExportTask'
    FinalizeCutoverRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Request to finalize Cutover by Source Server ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Request to finalize Cutover by Source Account ID.
      required:
      - sourceServerID
    FirstBoot:
      type: string
      enum:
      - WAITING
      - SUCCEEDED
      - UNKNOWN
      - STOPPED
    GetLaunchConfigurationRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Request to get Launch Configuration information by Source Server
            ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Request to get Launch Configuration information by Account
            ID.
      required:
      - sourceServerID
    GetReplicationConfigurationRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Request to get Replication Configuration by Source Server ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Request to get Replication Configuration by Account ID.
      required:
      - sourceServerID
    IPsList:
      type: array
      items:
        $ref: '#/components/schemas/BoundedString'
    ISO8601DatetimeString:
      type: string
      pattern: ^[1-9][0-9]*-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]+)?Z$
      minLength: 19
      maxLength: 32
    ISO8601DurationString:
      type: string
      minLength: 1
      maxLength: 64
    IdentificationHints:
      type: object
      properties:
        fqdn:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: FQDN address identification hint.
        hostname:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Hostname identification hint.
        vmWareUuid:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: vmWare UUID identification hint.
        awsInstanceID:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceID'
          description: AWS Instance ID identification hint.
        vmPath:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: vCenter VM path identification hint.
      description: Identification hints.
    ImportErrorData:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Import error data source server ID.
        applicationID:
          allOf:
          - $ref: '#/components/schemas/ApplicationID'
          description: Import error data application ID.
        waveID:
          allOf:
          - $ref: '#/components/schemas/WaveID'
          description: Import error data wave id.
        ec2LaunchTemplateID:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Import error data ec2 LaunchTemplate ID.
        rowNumber:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Import error data row number.
        rawError:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Import error data raw error.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Import error data source account ID.
      description: Import error data.
    ImportErrorType:
      type: string
      enum:
      - VALIDATION_ERROR
      - PROCESSING_ERROR
    ImportErrors:
      type: array
      items:
        $ref: '#/components/schemas/ImportTaskError'
    ImportID:
      type: string
      pattern: ^import-[0-9a-zA-Z]{17}$
      minLength: 24
      maxLength: 24
    ImportIDsFilter:
      type: array
      items:
        $ref: '#/components/schemas/ImportID'
    ImportList:
      type: array
      items:
        $ref: '#/components/schemas/ImportTask'
    ImportStatus:
      type: string
      enum:
      - PENDING
      - STARTED
      - FAILED
      - SUCCEEDED
    ImportTask:
      type: object
      properties:
        importID:
          allOf:
          - $ref: '#/components/schemas/ImportID'
          description: Import task id.
        s3BucketSource:
          allOf:
          - $ref: '#/components/schemas/S3BucketSource'
          description: Import task s3 bucket source.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Import task creation datetime.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Import task end datetime.
        status:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          description: Import task status.
        progressPercentage:
          allOf:
          - $ref: '#/components/schemas/Float'
          description: Import task progress percentage.
        summary:
          allOf:
          - $ref: '#/components/schemas/ImportTaskSummary'
          description: Import task summary.
      description: Import task.
    ImportTaskError:
      type: object
      properties:
        errorDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Import task error datetime.
        errorType:
          allOf:
          - $ref: '#/components/schemas/ImportErrorType'
          description: Import task error type.
        errorData:
          allOf:
          - $ref: '#/components/schemas/ImportErrorData'
          description: Import task error data.
      description: Import task error.
    ImportTaskSummary:
      type: object
      properties:
        waves:
          allOf:
          - $ref: '#/components/schemas/ImportTaskSummaryWaves'
          description: Import task summary waves.
        applications:
          allOf:
          - $ref: '#/components/schemas/ImportTaskSummaryApplications'
          description: Import task summary applications.
        servers:
          allOf:
          - $ref: '#/components/schemas/ImportTaskSummaryServers'
          description: Import task summary servers.
      description: Import task summary.
    ImportTaskSummaryApplications:
      type: object
      properties:
        createdCount:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Import task summary applications created count.
        modifiedCount:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Import task summary applications modified count.
      description: Import task summary applications.
    ImportTaskSummaryServers:
      type: object
      properties:
        createdCount:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Import task summary servers created count.
        modifiedCount:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Import task summary servers modified count.
      description: Import task summary servers.
    ImportTaskSummaryWaves:
      type: object
      properties:
        createdCount:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Import task summery waves created count.
        modifiedCount:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Import task summery waves modified count.
      description: Import task summery waves.
    InitializeServiceRequest:
      type: object
      properties: {}
    InitializeServiceResponse:
      type: object
      properties: {}
    InitiatedBy:
      type: string
      enum:
      - START_TEST
      - START_CUTOVER
      - DIAGNOSTIC
      - TERMINATE
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/LargeBoundedString'
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: The server encountered an unexpected condition that prevented
            it from fulfilling the request. The request will be retried again after
            x seconds.
      required:
      - message
      description: The server encountered an unexpected condition that prevented it
        from fulfilling the request.
    Iops:
      type: integer
      format: int64
      minimum: 100
      maximum: 64000
    JmesPathString:
      type: string
      pattern: ^[a-zA-Z0-9_]+(\.[a-zA-Z0-9_\[\]]+)*$
      minLength: 1
      maxLength: 1011
    Job:
      type: object
      properties:
        jobID:
          allOf:
          - $ref: '#/components/schemas/JobID'
          description: Job ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: the ARN of the specific Job.
        type:
          allOf:
          - $ref: '#/components/schemas/JobType'
          description: Job type.
        initiatedBy:
          allOf:
          - $ref: '#/components/schemas/InitiatedBy'
          description: Job initiated by field.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Job creation time.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Job end time.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: Job status.
        participatingServers:
          allOf:
          - $ref: '#/components/schemas/ParticipatingServers'
          description: Servers participating in a specific Job.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Tags associated with specific Job.
      required:
      - jobID
      description: Job.
    JobID:
      type: string
      pattern: ^mgnjob-[0-9a-zA-Z]{17}$
      minLength: 24
      maxLength: 24
    JobLog:
      type: object
      properties:
        logDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Job log event date and time.
        event:
          allOf:
          - $ref: '#/components/schemas/JobLogEvent'
          description: Job log event.
        eventData:
          allOf:
          - $ref: '#/components/schemas/JobLogEventData'
          description: Job event data
      description: Job log.
    JobLogEvent:
      type: string
      enum:
      - JOB_START
      - SERVER_SKIPPED
      - CLEANUP_START
      - CLEANUP_END
      - CLEANUP_FAIL
      - SNAPSHOT_START
      - SNAPSHOT_END
      - SNAPSHOT_FAIL
      - USING_PREVIOUS_SNAPSHOT
      - CONVERSION_START
      - CONVERSION_END
      - CONVERSION_FAIL
      - LAUNCH_START
      - LAUNCH_FAILED
      - JOB_CANCEL
      - JOB_END
    JobLogEventData:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Job Event Source Server ID.
        conversionServerID:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceID'
          description: Job Event conversion Server ID.
        targetInstanceID:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceID'
          description: Job Event Target instance ID.
        rawError:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Job error.
      description: Job log data
    JobLogs:
      type: array
      items:
        $ref: '#/components/schemas/JobLog'
    JobPostLaunchActionsLaunchStatus:
      type: object
      properties:
        ssmDocument:
          allOf:
          - $ref: '#/components/schemas/SsmDocument'
          description: AWS Systems Manager's Document of the of the Job Post Launch
            Actions.
        ssmDocumentType:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentType'
          description: AWS Systems Manager Document type.
        executionID:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: AWS Systems Manager Document's execution ID of the of the Job
            Post Launch Actions.
        executionStatus:
          allOf:
          - $ref: '#/components/schemas/PostLaunchActionExecutionStatus'
          description: AWS Systems Manager Document's execution status.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: AWS Systems Manager Document's failure reason.
      description: Launch Status of the Job Post Launch Actions.
    JobStatus:
      type: string
      enum:
      - PENDING
      - STARTED
      - COMPLETED
    JobType:
      type: string
      enum:
      - LAUNCH
      - TERMINATE
    JobsList:
      type: array
      items:
        $ref: '#/components/schemas/Job'
    LargeBoundedString:
      type: string
      minLength: 0
      maxLength: 65536
    LaunchConfiguration:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Launch configuration Source Server ID.
        name:
          allOf:
          - $ref: '#/components/schemas/SmallBoundedString'
          description: Launch configuration name.
        ec2LaunchTemplateID:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Launch configuration EC2 Launch template ID.
        launchDisposition:
          allOf:
          - $ref: '#/components/schemas/LaunchDisposition'
          description: Launch disposition for launch configuration.
        targetInstanceTypeRightSizingMethod:
          allOf:
          - $ref: '#/components/schemas/TargetInstanceTypeRightSizingMethod'
          description: Launch configuration Target instance type right sizing method.
        copyPrivateIp:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Copy Private IP during Launch Configuration.
        copyTags:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Copy Tags during Launch Configuration.
        licensing:
          allOf:
          - $ref: '#/components/schemas/Licensing'
          description: Launch configuration OS licensing.
        bootMode:
          allOf:
          - $ref: '#/components/schemas/BootMode'
          description: Launch configuration boot mode.
        postLaunchActions:
          $ref: '#/components/schemas/PostLaunchActions'
        enableMapAutoTagging:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Enable map auto tagging.
        mapAutoTaggingMpeID:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: Map auto tagging MPE ID.
    LaunchConfigurationTemplate:
      type: object
      properties:
        launchConfigurationTemplateID:
          allOf:
          - $ref: '#/components/schemas/LaunchConfigurationTemplateID'
          description: ID of the Launch Configuration Template.
        arn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: ARN of the Launch Configuration Template.
        postLaunchActions:
          allOf:
          - $ref: '#/components/schemas/PostLaunchActions'
          description: Post Launch Actions of the Launch Configuration Template.
        enableMapAutoTagging:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Enable map auto tagging.
        mapAutoTaggingMpeID:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: Launch configuration template map auto tagging MPE ID.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Tags of the Launch Configuration Template.
        ec2LaunchTemplateID:
          allOf:
          - $ref: '#/components/schemas/EC2LaunchConfigurationTemplateID'
          description: EC2 launch template ID.
        launchDisposition:
          allOf:
          - $ref: '#/components/schemas/LaunchDisposition'
          description: Launch disposition.
        targetInstanceTypeRightSizingMethod:
          allOf:
          - $ref: '#/components/schemas/TargetInstanceTypeRightSizingMethod'
          description: Target instance type right-sizing method.
        copyPrivateIp:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Copy private Ip.
        associatePublicIpAddress:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Associate public Ip address.
        copyTags:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Copy tags.
        licensing:
          $ref: '#/components/schemas/Licensing'
        bootMode:
          allOf:
          - $ref: '#/components/schemas/BootMode'
          description: Launch configuration template boot mode.
        smallVolumeMaxSize:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Small volume maximum size.
        smallVolumeConf:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateDiskConf'
          description: Small volume config.
        largeVolumeConf:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateDiskConf'
          description: Large volume config.
      required:
      - launchConfigurationTemplateID
    LaunchConfigurationTemplateID:
      type: string
      pattern: ^lct-[0-9a-zA-Z]{17}$
      minLength: 21
      maxLength: 21
    LaunchConfigurationTemplateIDs:
      type: array
      items:
        $ref: '#/components/schemas/LaunchConfigurationTemplateID'
    LaunchConfigurationTemplates:
      type: array
      items:
        $ref: '#/components/schemas/LaunchConfigurationTemplate'
    LaunchDisposition:
      type: string
      enum:
      - STOPPED
      - STARTED
    LaunchStatus:
      type: string
      enum:
      - PENDING
      - IN_PROGRESS
      - LAUNCHED
      - FAILED
      - TERMINATED
    LaunchTemplateDiskConf:
      type: object
      properties:
        volumeType:
          allOf:
          - $ref: '#/components/schemas/VolumeType'
          description: Launch template disk volume type configuration.
        iops:
          allOf:
          - $ref: '#/components/schemas/Iops'
          description: Launch template disk iops configuration.
        throughput:
          allOf:
          - $ref: '#/components/schemas/Throughput'
          description: Launch template disk throughput configuration.
      description: Launch template disk configuration.
    LaunchedInstance:
      type: object
      properties:
        ec2InstanceID:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceID'
          description: Launched instance EC2 ID.
        jobID:
          allOf:
          - $ref: '#/components/schemas/JobID'
          description: Launched instance Job ID.
        firstBoot:
          allOf:
          - $ref: '#/components/schemas/FirstBoot'
          description: Launched instance first boot.
      description: Launched instance.
    Licensing:
      type: object
      properties:
        osByol:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Configure BYOL OS licensing.
      description: Configure Licensing.
    LifeCycle:
      type: object
      properties:
        addedToServiceDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Lifecycle added to service data and time.
        firstByteDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Lifecycle replication initiation date and time.
        elapsedReplicationDuration:
          allOf:
          - $ref: '#/components/schemas/ISO8601DurationString'
          description: Lifecycle elapsed time and duration.
        lastSeenByServiceDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Lifecycle last seen date and time.
        lastTest:
          allOf:
          - $ref: '#/components/schemas/LifeCycleLastTest'
          description: Lifecycle last Test.
        lastCutover:
          allOf:
          - $ref: '#/components/schemas/LifeCycleLastCutover'
          description: Lifecycle last Cutover.
        state:
          allOf:
          - $ref: '#/components/schemas/LifeCycleState'
          description: Lifecycle state.
      description: Lifecycle.
    LifeCycleLastCutover:
      type: object
      properties:
        initiated:
          allOf:
          - $ref: '#/components/schemas/LifeCycleLastCutoverInitiated'
          description: Lifecycle last Cutover initiated.
        reverted:
          allOf:
          - $ref: '#/components/schemas/LifeCycleLastCutoverReverted'
          description: Lifecycle last Cutover reverted.
        finalized:
          allOf:
          - $ref: '#/components/schemas/LifeCycleLastCutoverFinalized'
          description: Lifecycle Cutover finalized date and time.
      description: Lifecycle last Cutover .
    LifeCycleLastCutoverFinalized:
      type: object
      properties:
        apiCallDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Lifecycle Cutover finalized date and time.
      description: Lifecycle Cutover finalized
    LifeCycleLastCutoverInitiated:
      type: object
      properties:
        apiCallDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: ''
        jobID:
          allOf:
          - $ref: '#/components/schemas/JobID'
          description: Lifecycle last Cutover initiated by Job ID.
      description: Lifecycle last Cutover initiated.
    LifeCycleLastCutoverReverted:
      type: object
      properties:
        apiCallDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Lifecycle last Cutover reverted API call date time.
      description: Lifecycle last Cutover reverted.
    LifeCycleLastTest:
      type: object
      properties:
        initiated:
          allOf:
          - $ref: '#/components/schemas/LifeCycleLastTestInitiated'
          description: Lifecycle last Test initiated.
        reverted:
          allOf:
          - $ref: '#/components/schemas/LifeCycleLastTestReverted'
          description: Lifecycle last Test reverted.
        finalized:
          allOf:
          - $ref: '#/components/schemas/LifeCycleLastTestFinalized'
          description: Lifecycle last Test finalized.
      description: Lifecycle last Test.
    LifeCycleLastTestFinalized:
      type: object
      properties:
        apiCallDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Lifecycle Test failed API call date and time.
      description: Lifecycle last Test finalized.
    LifeCycleLastTestInitiated:
      type: object
      properties:
        apiCallDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Lifecycle last Test initiated API call date and time.
        jobID:
          allOf:
          - $ref: '#/components/schemas/JobID'
          description: Lifecycle last Test initiated Job ID.
      description: Lifecycle last Test initiated.
    LifeCycleLastTestReverted:
      type: object
      properties:
        apiCallDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Lifecycle last Test reverted API call date and time.
      description: Lifecycle last Test reverted.
    LifeCycleState:
      type: string
      enum:
      - STOPPED
      - NOT_READY
      - READY_FOR_TEST
      - TESTING
      - READY_FOR_CUTOVER
      - CUTTING_OVER
      - CUTOVER
      - DISCONNECTED
      - DISCOVERED
      - PENDING_INSTALLATION
    LifeCycleStates:
      type: array
      items:
        $ref: '#/components/schemas/LifeCycleState'
    ListApplicationsRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/ListApplicationsRequestFilters'
          description: Applications list filters.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: Maximum results to return when listing applications.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Request next token.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Applications list Account ID.
    ListApplicationsRequestFilters:
      type: object
      properties:
        applicationIDs:
          allOf:
          - $ref: '#/components/schemas/ApplicationIDsFilter'
          description: Filter applications list by application ID.
        isArchived:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Filter applications list by archival status.
        waveIDs:
          allOf:
          - $ref: '#/components/schemas/WaveIDsFilter'
          description: Filter applications list by wave ID.
      description: Applications list filters.
    ListApplicationsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ApplicationsList'
          description: Applications list.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Response next token.
    ListConnectorsRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/ListConnectorsRequestFilters'
          description: List Connectors Request filters.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: List Connectors Request max results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List Connectors Request next token.
    ListConnectorsRequestFilters:
      type: object
      properties:
        connectorIDs:
          allOf:
          - $ref: '#/components/schemas/ConnectorIDsFilter'
          description: List Connectors Request Filters connector IDs.
      description: List Connectors Request Filters.
    ListConnectorsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ConnectorsList'
          description: List connectors response items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List connectors response next token.
    ListExportErrorsRequest:
      type: object
      properties:
        exportID:
          allOf:
          - $ref: '#/components/schemas/ExportID'
          description: List export errors request export id.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: List export errors request max results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List export errors request next token.
      required:
      - exportID
      description: List export errors request.
    ListExportErrorsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ExportErrors'
          description: List export errors response items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List export errors response next token.
      description: List export errors response.
    ListExportsRequest:
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ListExportsRequestFilters'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: List export request max results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List export request next token.
      description: List export request.
    ListExportsRequestFilters:
      type: object
      properties:
        exportIDs:
          allOf:
          - $ref: '#/components/schemas/ListExportsRequestFiltersExportIDs'
          description: List exports request filters export ids.
      description: List exports request filters.
    ListExportsRequestFiltersExportIDs:
      type: array
      items:
        $ref: '#/components/schemas/ExportID'
    ListExportsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ExportsList'
          description: List export response items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List export response next token.
      description: List export response.
    ListImportErrorsRequest:
      type: object
      properties:
        importID:
          allOf:
          - $ref: '#/components/schemas/ImportID'
          description: List import errors request import id.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: List import errors request max results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List import errors request next token.
      required:
      - importID
      description: List import errors request.
    ListImportErrorsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ImportErrors'
          description: List imports errors response items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List imports errors response next token.
      description: List imports errors response.
    ListImportsRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/ListImportsRequestFilters'
          description: List imports request filters.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: List imports request max results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List imports request next token.
      description: List imports request.
    ListImportsRequestFilters:
      type: object
      properties:
        importIDs:
          allOf:
          - $ref: '#/components/schemas/ImportIDsFilter'
          description: List imports request filters import IDs.
      description: List imports request filters.
    ListImportsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ImportList'
          description: List import response items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List import response next token.
      description: List import response.
    ListManagedAccountsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: List managed accounts request max results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List managed accounts request next token.
      description: List managed accounts request.
    ListManagedAccountsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ManagedAccounts'
          description: List managed accounts response items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: List managed accounts response next token.
      required:
      - items
      description: List managed accounts response.
    ListSourceServerActionsRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Source server ID.
        filters:
          allOf:
          - $ref: '#/components/schemas/SourceServerActionsRequestFilters'
          description: Filters to apply when listing source server post migration
            custom actions.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: Maximum amount of items to return when listing source server
            post migration custom actions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Next token to use when listing source server post migration
            custom actions.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID to return when listing source server post migration
            custom actions.
      required:
      - sourceServerID
    ListSourceServerActionsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/SourceServerActionDocuments'
          description: List of source server post migration custom actions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Next token returned when listing source server post migration
            custom actions.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: List tags for resource request by ARN.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: List tags for resource response.
    ListTemplateActionsRequest:
      type: object
      properties:
        launchConfigurationTemplateID:
          allOf:
          - $ref: '#/components/schemas/LaunchConfigurationTemplateID'
          description: Launch configuration template ID.
        filters:
          allOf:
          - $ref: '#/components/schemas/TemplateActionsRequestFilters'
          description: Filters to apply when listing template post migration custom
            actions.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: Maximum amount of items to return when listing template post
            migration custom actions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Next token to use when listing template post migration custom
            actions.
      required:
      - launchConfigurationTemplateID
    ListTemplateActionsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/TemplateActionDocuments'
          description: List of template post migration custom actions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Next token returned when listing template post migration custom
            actions.
    ListWavesRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/ListWavesRequestFilters'
          description: Waves list filters.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResultsType'
          description: Maximum results to return when listing waves.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Request next token.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Request account ID.
    ListWavesRequestFilters:
      type: object
      properties:
        waveIDs:
          allOf:
          - $ref: '#/components/schemas/WaveIDsFilter'
          description: Filter waves list by wave ID.
        isArchived:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Filter waves list by archival status.
      description: Waves list filters.
    ListWavesResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/WavesList'
          description: Waves list.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: Response next token.
    ManagedAccount:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Managed account, account ID.
      description: Managed account.
    ManagedAccounts:
      type: array
      items:
        $ref: '#/components/schemas/ManagedAccount'
    MarkAsArchivedRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Mark as archived by Source Server ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Mark as archived by Account ID.
      required:
      - sourceServerID
    MaxResultsType:
      type: integer
      minimum: 1
      maximum: 1000
    NetworkInterface:
      type: object
      properties:
        macAddress:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Network interface Mac address.
        ips:
          allOf:
          - $ref: '#/components/schemas/IPsList'
          description: Network interface IPs.
        isPrimary:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Network interface primary IP.
      description: Network interface.
    NetworkInterfaces:
      type: array
      items:
        $ref: '#/components/schemas/NetworkInterface'
    OS:
      type: object
      properties:
        fullString:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: OS full string.
      description: Operating System.
    OperatingSystemString:
      type: string
      pattern: ^(linux|windows)$
    OrderType:
      type: integer
      minimum: 1001
      maximum: 10000
    PaginationToken:
      type: string
      minLength: 0
      maxLength: 2048
    ParticipatingServer:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Participating server Source Server ID.
        launchStatus:
          allOf:
          - $ref: '#/components/schemas/LaunchStatus'
          description: Participating server launch status.
        launchedEc2InstanceID:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceID'
          description: Participating server's launched ec2 instance ID.
        postLaunchActionsStatus:
          allOf:
          - $ref: '#/components/schemas/PostLaunchActionsStatus'
          description: Participating server's Post Launch Actions Status.
      required:
      - sourceServerID
      description: Server participating in Job.
    ParticipatingServers:
      type: array
      items:
        $ref: '#/components/schemas/ParticipatingServer'
    PauseReplicationRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Pause Replication Request source server ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Pause Replication Request account ID.
      required:
      - sourceServerID
    PositiveInteger:
      type: integer
      format: int64
      default: 0
      minimum: 0
    PostLaunchActionExecutionStatus:
      type: string
      enum:
      - IN_PROGRESS
      - SUCCESS
      - FAILED
    PostLaunchActions:
      type: object
      properties:
        deployment:
          allOf:
          - $ref: '#/components/schemas/PostLaunchActionsDeploymentType'
          description: Deployment type in which AWS Systems Manager Documents will
            be executed.
        s3LogBucket:
          allOf:
          - $ref: '#/components/schemas/S3LogBucketName'
          description: AWS Systems Manager Command's logs S3 log bucket.
        s3OutputKeyPrefix:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: AWS Systems Manager Command's logs S3 output key prefix.
        cloudWatchLogGroupName:
          allOf:
          - $ref: '#/components/schemas/CloudWatchLogGroupName'
          description: AWS Systems Manager Command's CloudWatch log group name.
        ssmDocuments:
          allOf:
          - $ref: '#/components/schemas/SsmDocuments'
          description: AWS Systems Manager Documents.
      description: Post Launch Actions to executed on the Test or Cutover instance.
    PostLaunchActionsDeploymentType:
      type: string
      enum:
      - TEST_AND_CUTOVER
      - CUTOVER_ONLY
      - TEST_ONLY
    PostLaunchActionsLaunchStatusList:
      type: array
      items:
        $ref: '#/components/schemas/JobPostLaunchActionsLaunchStatus'
    PostLaunchActionsStatus:
      type: object
      properties:
        ssmAgentDiscoveryDatetime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Time where the AWS Systems Manager was detected as running
            on the Test or Cutover instance.
        postLaunchActionsLaunchStatusList:
          allOf:
          - $ref: '#/components/schemas/PostLaunchActionsLaunchStatusList'
          description: List of Post Launch Action status.
      description: Status of the Post Launch Actions running on the Test or Cutover
        instance.
    PutSourceServerActionRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Source server ID.
        actionName:
          allOf:
          - $ref: '#/components/schemas/ActionName'
          description: Source server post migration custom action name.
        documentIdentifier:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Source server post migration custom action document identifier.
        order:
          allOf:
          - $ref: '#/components/schemas/OrderType'
          description: Source server post migration custom action order.
        actionID:
          allOf:
          - $ref: '#/components/schemas/ActionID'
          description: Source server post migration custom action ID.
        documentVersion:
          allOf:
          - $ref: '#/components/schemas/DocumentVersion'
          description: Source server post migration custom action document version.
        active:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Source server post migration custom action active status.
        timeoutSeconds:
          allOf:
          - $ref: '#/components/schemas/StrictlyPositiveInteger'
          description: Source server post migration custom action timeout in seconds.
        mustSucceedForCutover:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Source server post migration custom action must succeed for
            cutover.
        parameters:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentParameters'
          description: Source server post migration custom action parameters.
        externalParameters:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentExternalParameters'
          description: Source server post migration custom action external parameters.
        description:
          allOf:
          - $ref: '#/components/schemas/ActionDescription'
          description: Source server post migration custom action description.
        category:
          allOf:
          - $ref: '#/components/schemas/ActionCategory'
          description: Source server post migration custom action category.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Source server post migration custom account ID.
      required:
      - sourceServerID
      - actionName
      - documentIdentifier
      - order
      - actionID
    PutTemplateActionRequest:
      type: object
      properties:
        launchConfigurationTemplateID:
          allOf:
          - $ref: '#/components/schemas/LaunchConfigurationTemplateID'
          description: Launch configuration template ID.
        actionName:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Template post migration custom action name.
        documentIdentifier:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Template post migration custom action document identifier.
        order:
          allOf:
          - $ref: '#/components/schemas/OrderType'
          description: Template post migration custom action order.
        actionID:
          allOf:
          - $ref: '#/components/schemas/ActionID'
          description: Template post migration custom action ID.
        documentVersion:
          allOf:
          - $ref: '#/components/schemas/DocumentVersion'
          description: Template post migration custom action document version.
        active:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Template post migration custom action active status.
        timeoutSeconds:
          allOf:
          - $ref: '#/components/schemas/StrictlyPositiveInteger'
          description: Template post migration custom action timeout in seconds.
        mustSucceedForCutover:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Template post migration custom action must succeed for cutover.
        parameters:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentParameters'
          description: Template post migration custom action parameters.
        operatingSystem:
          allOf:
          - $ref: '#/components/schemas/OperatingSystemString'
          description: Operating system eligible for this template post migration
            custom action.
        externalParameters:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentExternalParameters'
          description: Template post migration custom action external parameters.
        description:
          allOf:
          - $ref: '#/components/schemas/ActionDescription'
          description: Template post migration custom action description.
        category:
          allOf:
          - $ref: '#/components/schemas/ActionCategory'
          description: Template post migration custom action category.
      required:
      - launchConfigurationTemplateID
      - actionName
      - documentIdentifier
      - order
      - actionID
    RemoveSourceServerActionRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Source server ID of the post migration custom action to remove.
        actionID:
          allOf:
          - $ref: '#/components/schemas/ActionID'
          description: Source server post migration custom action ID to remove.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Source server post migration account ID.
      required:
      - sourceServerID
      - actionID
    RemoveSourceServerActionResponse:
      type: object
      properties: {}
    RemoveTemplateActionRequest:
      type: object
      properties:
        launchConfigurationTemplateID:
          allOf:
          - $ref: '#/components/schemas/LaunchConfigurationTemplateID'
          description: Launch configuration template ID of the post migration custom
            action to remove.
        actionID:
          allOf:
          - $ref: '#/components/schemas/ActionID'
          description: Template post migration custom action ID to remove.
      required:
      - launchConfigurationTemplateID
      - actionID
    RemoveTemplateActionResponse:
      type: object
      properties: {}
    ReplicationConfiguration:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Replication Configuration Source Server ID.
        name:
          allOf:
          - $ref: '#/components/schemas/SmallBoundedString'
          description: Replication Configuration name.
        stagingAreaSubnetId:
          allOf:
          - $ref: '#/components/schemas/SubnetID'
          description: Replication Configuration Staging Area subnet ID.
        associateDefaultSecurityGroup:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Replication Configuration associate default Application Migration
            Service Security Group.
        replicationServersSecurityGroupsIDs:
          allOf:
          - $ref: '#/components/schemas/ReplicationServersSecurityGroupsIDs'
          description: Replication Configuration Replication Server Security Group
            IDs.
        replicationServerInstanceType:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceType'
          description: Replication Configuration Replication Server instance type.
        useDedicatedReplicationServer:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Replication Configuration use Dedicated Replication Server.
        defaultLargeStagingDiskType:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationDefaultLargeStagingDiskType'
          description: Replication Configuration use default large Staging Disks.
        replicatedDisks:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationReplicatedDisks'
          description: Replication Configuration replicated disks.
        ebsEncryption:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationEbsEncryption'
          description: Replication Configuration EBS encryption.
        ebsEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Replication Configuration EBS encryption key ARN.
        bandwidthThrottling:
          allOf:
          - $ref: '#/components/schemas/BandwidthThrottling'
          description: Replication Configuration set bandwidth throttling.
        dataPlaneRouting:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationDataPlaneRouting'
          description: Replication Configuration data plane routing.
        createPublicIP:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Replication Configuration create Public IP.
        stagingAreaTags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Replication Configuration Staging Area tags.
        useFipsEndpoint:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Replication Configuration use Fips Endpoint.
    ReplicationConfigurationDataPlaneRouting:
      type: string
      enum:
      - PRIVATE_IP
      - PUBLIC_IP
    ReplicationConfigurationDefaultLargeStagingDiskType:
      type: string
      enum:
      - GP2
      - ST1
      - GP3
    ReplicationConfigurationEbsEncryption:
      type: string
      enum:
      - DEFAULT
      - CUSTOM
    ReplicationConfigurationReplicatedDisk:
      type: object
      properties:
        deviceName:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Replication Configuration replicated disk device name.
        isBootDisk:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Replication Configuration replicated disk boot disk.
        stagingDiskType:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationReplicatedDiskStagingDiskType'
          description: Replication Configuration replicated disk staging disk type.
        iops:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Replication Configuration replicated disk IOPs.
        throughput:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Replication Configuration replicated disk throughput.
      description: Replication Configuration replicated disk.
    ReplicationConfigurationReplicatedDiskStagingDiskType:
      type: string
      enum:
      - AUTO
      - GP2
      - IO1
      - SC1
      - ST1
      - STANDARD
      - GP3
      - IO2
    ReplicationConfigurationReplicatedDisks:
      type: array
      items:
        $ref: '#/components/schemas/ReplicationConfigurationReplicatedDisk'
    ReplicationConfigurationTemplate:
      type: object
      properties:
        replicationConfigurationTemplateID:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationTemplateID'
          description: Replication Configuration template ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Replication Configuration template ARN.
        stagingAreaSubnetId:
          allOf:
          - $ref: '#/components/schemas/SubnetID'
          description: Replication Configuration template Staging Area subnet ID.
        associateDefaultSecurityGroup:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Replication Configuration template associate default Application
            Migration Service Security group.
        replicationServersSecurityGroupsIDs:
          allOf:
          - $ref: '#/components/schemas/ReplicationServersSecurityGroupsIDs'
          description: Replication Configuration template server Security Groups IDs.
        replicationServerInstanceType:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceType'
          description: Replication Configuration template server instance type.
        useDedicatedReplicationServer:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Replication Configuration template use Dedicated Replication
            Server.
        defaultLargeStagingDiskType:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationDefaultLargeStagingDiskType'
          description: Replication Configuration template use default large Staging
            Disk type.
        ebsEncryption:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationEbsEncryption'
          description: Replication Configuration template EBS encryption.
        ebsEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Replication Configuration template EBS encryption key ARN.
        bandwidthThrottling:
          allOf:
          - $ref: '#/components/schemas/BandwidthThrottling'
          description: Replication Configuration template bandwidth throttling.
        dataPlaneRouting:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationDataPlaneRouting'
          description: Replication Configuration template data plane routing.
        createPublicIP:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Replication Configuration template create Public IP.
        stagingAreaTags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Replication Configuration template Staging Area Tags.
        useFipsEndpoint:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Replication Configuration template use Fips Endpoint.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Replication Configuration template Tags.
      required:
      - replicationConfigurationTemplateID
    ReplicationConfigurationTemplateID:
      type: string
      pattern: ^rct-[0-9a-zA-Z]{17}$
      minLength: 21
      maxLength: 21
    ReplicationConfigurationTemplateIDs:
      type: array
      items:
        $ref: '#/components/schemas/ReplicationConfigurationTemplateID'
    ReplicationConfigurationTemplates:
      type: array
      items:
        $ref: '#/components/schemas/ReplicationConfigurationTemplate'
    ReplicationServersSecurityGroupsIDs:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupID'
    ReplicationType:
      type: string
      enum:
      - AGENT_BASED
      - SNAPSHOT_SHIPPING
    ReplicationTypes:
      type: array
      items:
        $ref: '#/components/schemas/ReplicationType'
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/LargeBoundedString'
        code:
          $ref: '#/components/schemas/LargeBoundedString'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Resource ID not found error.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Resource type not found error.
      description: Resource not found exception.
    ResumeReplicationRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Resume Replication Request source server ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Resume Replication Request account ID.
      required:
      - sourceServerID
    RetryDataReplicationRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Retry data replication for Source Server ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Retry data replication for Account ID.
      required:
      - sourceServerID
    S3BucketName:
      type: string
      pattern: ^[a-zA-Z0-9.\-_]{1,255}$
    S3BucketSource:
      type: object
      properties:
        s3Bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: S3 bucket source s3 bucket.
        s3Key:
          allOf:
          - $ref: '#/components/schemas/S3Key'
          description: S3 bucket source s3 key.
        s3BucketOwner:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: S3 bucket source s3 bucket owner.
      required:
      - s3Bucket
      - s3Key
      description: S3 bucket source.
    S3Key:
      type: string
      pattern: ^[^\x00]{1,1020}\.csv$
    S3LogBucketName:
      type: string
      minLength: 3
      maxLength: 63
    SecretArn:
      type: string
      pattern: ^arn:[\w-]+:secretsmanager:([a-z]{2}-(gov-)?[a-z]+-\d{1})?:(\d{12})?:secret:(.+)$
      minLength: 20
      maxLength: 100
    SecurityGroupID:
      type: string
      pattern: ^sg-[0-9a-fA-F]{8,}$
      minLength: 0
      maxLength: 255
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/LargeBoundedString'
        code:
          $ref: '#/components/schemas/LargeBoundedString'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Exceeded the service quota resource ID.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Exceeded the service quota resource type.
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Exceeded the service quota service code.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Exceeded the service quota code.
        quotaValue:
          allOf:
          - $ref: '#/components/schemas/StrictlyPositiveInteger'
          description: Exceeded the service quota value.
      description: The request could not be completed because its exceeded the service
        quota.
    SmallBoundedString:
      type: string
      minLength: 0
      maxLength: 128
    SourceProperties:
      type: object
      properties:
        lastUpdatedDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Source server last update date and time.
        recommendedInstanceType:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceType'
          description: Source server recommended instance type.
        identificationHints:
          allOf:
          - $ref: '#/components/schemas/IdentificationHints'
          description: Source server identification hints.
        networkInterfaces:
          allOf:
          - $ref: '#/components/schemas/NetworkInterfaces'
          description: Source server network interfaces.
        disks:
          allOf:
          - $ref: '#/components/schemas/Disks'
          description: Source Server disks.
        cpus:
          allOf:
          - $ref: '#/components/schemas/Cpus'
          description: Source Server CPUs.
        ramBytes:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Source server RAM in bytes.
        os:
          allOf:
          - $ref: '#/components/schemas/OS'
          description: Source server OS.
      description: Source server properties.
    SourceServer:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Source server ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Source server ARN.
        isArchived:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Source server archived status.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Source server Tags.
        launchedInstance:
          allOf:
          - $ref: '#/components/schemas/LaunchedInstance'
          description: Source server launched instance.
        dataReplicationInfo:
          allOf:
          - $ref: '#/components/schemas/DataReplicationInfo'
          description: Source server data replication info.
        lifeCycle:
          allOf:
          - $ref: '#/components/schemas/LifeCycle'
          description: Source server lifecycle state.
        sourceProperties:
          allOf:
          - $ref: '#/components/schemas/SourceProperties'
          description: Source server properties.
        replicationType:
          allOf:
          - $ref: '#/components/schemas/ReplicationType'
          description: Source server replication type.
        vcenterClientID:
          allOf:
          - $ref: '#/components/schemas/VcenterClientID'
          description: Source server vCenter client id.
        applicationID:
          allOf:
          - $ref: '#/components/schemas/ApplicationID'
          description: Source server application ID.
        userProvidedID:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Source server user provided ID.
        fqdnForActionFramework:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Source server fqdn for action framework.
        connectorAction:
          allOf:
          - $ref: '#/components/schemas/SourceServerConnectorAction'
          description: Source Server connector action.
    SourceServerActionDocument:
      type: object
      properties:
        actionID:
          allOf:
          - $ref: '#/components/schemas/ActionID'
          description: Source server post migration custom action ID.
        actionName:
          allOf:
          - $ref: '#/components/schemas/ActionName'
          description: Source server post migration custom action name.
        documentIdentifier:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Source server post migration custom action document identifier.
        order:
          allOf:
          - $ref: '#/components/schemas/OrderType'
          description: Source server post migration custom action order.
        documentVersion:
          allOf:
          - $ref: '#/components/schemas/DocumentVersion'
          description: Source server post migration custom action document version.
        active:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Source server post migration custom action active status.
        timeoutSeconds:
          allOf:
          - $ref: '#/components/schemas/StrictlyPositiveInteger'
          description: Source server post migration custom action timeout in seconds.
        mustSucceedForCutover:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Source server post migration custom action must succeed for
            cutover.
        parameters:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentParameters'
          description: Source server post migration custom action parameters.
        externalParameters:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentExternalParameters'
          description: Source server post migration custom action external parameters.
        description:
          allOf:
          - $ref: '#/components/schemas/ActionDescription'
          description: Source server post migration custom action description.
        category:
          allOf:
          - $ref: '#/components/schemas/ActionCategory'
          description: Source server post migration custom action category.
    SourceServerActionDocuments:
      type: array
      items:
        $ref: '#/components/schemas/SourceServerActionDocument'
    SourceServerActionsRequestFilters:
      type: object
      properties:
        actionIDs:
          allOf:
          - $ref: '#/components/schemas/ActionIDs'
          description: Action IDs to filter source server post migration custom actions
            by.
      description: Source server post migration custom action filters.
    SourceServerConnectorAction:
      type: object
      properties:
        credentialsSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretArn'
          description: Source Server connector action credentials secret arn.
        connectorArn:
          allOf:
          - $ref: '#/components/schemas/ConnectorArn'
          description: Source Server connector action connector arn.
      description: Source Server connector action.
    SourceServerID:
      type: string
      pattern: ^s-[0-9a-zA-Z]{17}$
      minLength: 19
      maxLength: 19
    SourceServersList:
      type: array
      items:
        $ref: '#/components/schemas/SourceServer'
    SsmDocument:
      type: object
      properties:
        actionName:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: User-friendly name for the AWS Systems Manager Document.
        ssmDocumentName:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentName'
          description: AWS Systems Manager Document name or full ARN.
        timeoutSeconds:
          allOf:
          - $ref: '#/components/schemas/StrictlyPositiveInteger'
          description: AWS Systems Manager Document timeout seconds.
        mustSucceedForCutover:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If true, Cutover will not be enabled if the document has failed.
        parameters:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentParameters'
          description: AWS Systems Manager Document parameters.
        externalParameters:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentExternalParameters'
          description: AWS Systems Manager Document external parameters.
      required:
      - actionName
      - ssmDocumentName
      description: AWS Systems Manager Document.
    SsmDocumentExternalParameters:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SsmExternalParameter'
    SsmDocumentName:
      type: string
      pattern: ^([A-Za-z0-9/:_\.-])+$
      minLength: 3
      maxLength: 172
    SsmDocumentParameterName:
      type: string
      pattern: ^([A-Za-z0-9])+$
      minLength: 1
      maxLength: 1011
    SsmDocumentParameters:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SsmParameterStoreParameters'
    SsmDocumentType:
      type: string
      enum:
      - AUTOMATION
      - COMMAND
    SsmDocuments:
      type: array
      items:
        $ref: '#/components/schemas/SsmDocument'
    SsmExternalParameter:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/JmesPathString'
        description: |-
          AWS Systems Manager Document external parameters dynamic path.
      description: |-
        AWS Systems Manager Document external parameter.
    SsmInstanceID:
      type: string
      pattern: (^i-[0-9a-zA-Z]{17}$)|(^mi-[0-9a-zA-Z]{17}$)
      minLength: 19
      maxLength: 20
    SsmParameterStoreParameter:
      type: object
      properties:
        parameterType:
          allOf:
          - $ref: '#/components/schemas/SsmParameterStoreParameterType'
          description: AWS Systems Manager Parameter Store parameter type.
        parameterName:
          allOf:
          - $ref: '#/components/schemas/SsmParameterStoreParameterName'
          description: AWS Systems Manager Parameter Store parameter name.
      required:
      - parameterType
      - parameterName
      description: AWS Systems Manager Parameter Store parameter.
    SsmParameterStoreParameterName:
      type: string
      pattern: ^([A-Za-z0-9_\.-])+$
      minLength: 1
      maxLength: 1011
    SsmParameterStoreParameterType:
      type: string
      enum:
      - STRING
    SsmParameterStoreParameters:
      type: array
      items:
        $ref: '#/components/schemas/SsmParameterStoreParameter'
    StartCutoverRequest:
      type: object
      properties:
        sourceServerIDs:
          allOf:
          - $ref: '#/components/schemas/StartCutoverRequestSourceServerIDs'
          description: Start Cutover by Source Server IDs.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Start Cutover by Tags.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Start Cutover by Account IDs
      required:
      - sourceServerIDs
    StartCutoverRequestSourceServerIDs:
      type: array
      items:
        $ref: '#/components/schemas/SourceServerID'
    StartCutoverResponse:
      type: object
      properties:
        job:
          allOf:
          - $ref: '#/components/schemas/Job'
          description: Start Cutover Job response.
    StartExportRequest:
      type: object
      properties:
        s3Bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: Start export request s3 bucket.
        s3Key:
          allOf:
          - $ref: '#/components/schemas/S3Key'
          description: Start export request s3key.
        s3BucketOwner:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Start export request s3 bucket owner.
      required:
      - s3Bucket
      - s3Key
      description: Start export request.
    StartExportResponse:
      type: object
      properties:
        exportTask:
          allOf:
          - $ref: '#/components/schemas/ExportTask'
          description: Start export response export task.
      description: Start export response.
    StartImportRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientIdempotencyToken'
          description: Start import request client token.
        s3BucketSource:
          allOf:
          - $ref: '#/components/schemas/S3BucketSource'
          description: Start import request s3 bucket source.
      required:
      - s3BucketSource
      description: Start import request.
    StartImportResponse:
      type: object
      properties:
        importTask:
          allOf:
          - $ref: '#/components/schemas/ImportTask'
          description: Start import response import task.
      description: Start import response.
    StartReplicationRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: ID of source server on which to start replication.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID on which to start replication.
      required:
      - sourceServerID
    StartTestRequest:
      type: object
      properties:
        sourceServerIDs:
          allOf:
          - $ref: '#/components/schemas/StartTestRequestSourceServerIDs'
          description: Start Test for Source Server IDs.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Start Test by Tags.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Start Test for Account ID.
      required:
      - sourceServerIDs
    StartTestRequestSourceServerIDs:
      type: array
      items:
        $ref: '#/components/schemas/SourceServerID'
    StartTestResponse:
      type: object
      properties:
        job:
          allOf:
          - $ref: '#/components/schemas/Job'
          description: Start Test Job response.
    StopReplicationRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Stop Replication Request source server ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Stop Replication Request account ID.
      required:
      - sourceServerID
    StrictlyPositiveInteger:
      type: integer
      minimum: 1
    SubnetID:
      type: string
      pattern: ^subnet-[0-9a-fA-F]{8,}$
      minLength: 0
      maxLength: 255
    TagKey:
      type: string
      minLength: 0
      maxLength: 256
    TagKeys:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      x-sensitive: true
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Tag resource by ARN.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Tag resource by Tags.
      required:
      - resourceArn
      - tags
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TargetInstanceTypeRightSizingMethod:
      type: string
      enum:
      - NONE
      - BASIC
    TemplateActionDocument:
      type: object
      properties:
        actionID:
          allOf:
          - $ref: '#/components/schemas/ActionID'
          description: Template post migration custom action ID.
        actionName:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Template post migration custom action name.
        documentIdentifier:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Template post migration custom action document identifier.
        order:
          allOf:
          - $ref: '#/components/schemas/OrderType'
          description: Template post migration custom action order.
        documentVersion:
          allOf:
          - $ref: '#/components/schemas/DocumentVersion'
          description: Template post migration custom action document version.
        active:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Template post migration custom action active status.
        timeoutSeconds:
          allOf:
          - $ref: '#/components/schemas/StrictlyPositiveInteger'
          description: Template post migration custom action timeout in seconds.
        mustSucceedForCutover:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Template post migration custom action must succeed for cutover.
        parameters:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentParameters'
          description: Template post migration custom action parameters.
        operatingSystem:
          allOf:
          - $ref: '#/components/schemas/OperatingSystemString'
          description: Operating system eligible for this template post migration
            custom action.
        externalParameters:
          allOf:
          - $ref: '#/components/schemas/SsmDocumentExternalParameters'
          description: Template post migration custom action external parameters.
        description:
          allOf:
          - $ref: '#/components/schemas/ActionDescription'
          description: Template post migration custom action description.
        category:
          allOf:
          - $ref: '#/components/schemas/ActionCategory'
          description: Template post migration custom action category.
    TemplateActionDocuments:
      type: array
      items:
        $ref: '#/components/schemas/TemplateActionDocument'
    TemplateActionsRequestFilters:
      type: object
      properties:
        actionIDs:
          allOf:
          - $ref: '#/components/schemas/ActionIDs'
          description: Action IDs to filter template post migration custom actions
            by.
      description: Template post migration custom action filters.
    TerminateTargetInstancesRequest:
      type: object
      properties:
        sourceServerIDs:
          allOf:
          - $ref: '#/components/schemas/TerminateTargetInstancesRequestSourceServerIDs'
          description: Terminate Target instance by Source Server IDs.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Terminate Target instance by Tags.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Terminate Target instance by Account ID
      required:
      - sourceServerIDs
    TerminateTargetInstancesRequestSourceServerIDs:
      type: array
      items:
        $ref: '#/components/schemas/SourceServerID'
    TerminateTargetInstancesResponse:
      type: object
      properties:
        job:
          allOf:
          - $ref: '#/components/schemas/Job'
          description: Terminate Target instance Job response.
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/LargeBoundedString'
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Reached throttling quota exception service code.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Reached throttling quota exception.
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Reached throttling quota exception will retry after x seconds.
      required:
      - message
      description: Reached throttling quota exception.
    Throughput:
      type: integer
      format: int64
      minimum: 125
      maximum: 1000
    UnarchiveApplicationRequest:
      type: object
      properties:
        applicationID:
          allOf:
          - $ref: '#/components/schemas/ApplicationID'
          description: Application ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - applicationID
    UnarchiveWaveRequest:
      type: object
      properties:
        waveID:
          allOf:
          - $ref: '#/components/schemas/WaveID'
          description: Wave ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - waveID
    UninitializedAccountException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/LargeBoundedString'
        code:
          $ref: '#/components/schemas/LargeBoundedString'
      description: Uninitialized account exception.
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Untag resource by ARN.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeys'
          description: Untag resource by Keys.
      required:
      - resourceArn
      - tagKeys
    UpdateApplicationRequest:
      type: object
      properties:
        applicationID:
          allOf:
          - $ref: '#/components/schemas/ApplicationID'
          description: Application ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ApplicationName'
          description: Application name.
        description:
          allOf:
          - $ref: '#/components/schemas/ApplicationDescription'
          description: Application description.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - applicationID
    UpdateConnectorRequest:
      type: object
      properties:
        connectorID:
          allOf:
          - $ref: '#/components/schemas/ConnectorID'
          description: Update Connector request connector ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ConnectorName'
          description: Update Connector request name.
        ssmCommandConfig:
          allOf:
          - $ref: '#/components/schemas/ConnectorSsmCommandConfig'
          description: Update Connector request SSM command config.
      required:
      - connectorID
    UpdateLaunchConfigurationRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Update Launch configuration by Source Server ID request.
        name:
          allOf:
          - $ref: '#/components/schemas/SmallBoundedString'
          description: Update Launch configuration name request.
        launchDisposition:
          allOf:
          - $ref: '#/components/schemas/LaunchDisposition'
          description: Update Launch configuration launch disposition request.
        targetInstanceTypeRightSizingMethod:
          allOf:
          - $ref: '#/components/schemas/TargetInstanceTypeRightSizingMethod'
          description: Update Launch configuration Target instance right sizing request.
        copyPrivateIp:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Update Launch configuration copy Private IP request.
        copyTags:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Update Launch configuration copy Tags request.
        licensing:
          allOf:
          - $ref: '#/components/schemas/Licensing'
          description: Update Launch configuration licensing request.
        bootMode:
          allOf:
          - $ref: '#/components/schemas/BootMode'
          description: Update Launch configuration boot mode request.
        postLaunchActions:
          $ref: '#/components/schemas/PostLaunchActions'
        enableMapAutoTagging:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Enable map auto tagging.
        mapAutoTaggingMpeID:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: Launch configuration map auto tagging MPE ID.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Update Launch configuration Account ID.
      required:
      - sourceServerID
    UpdateLaunchConfigurationTemplateRequest:
      type: object
      properties:
        launchConfigurationTemplateID:
          allOf:
          - $ref: '#/components/schemas/LaunchConfigurationTemplateID'
          description: Launch Configuration Template ID.
        postLaunchActions:
          allOf:
          - $ref: '#/components/schemas/PostLaunchActions'
          description: Post Launch Action to execute on the Test or Cutover instance.
        enableMapAutoTagging:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Enable map auto tagging.
        mapAutoTaggingMpeID:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: Launch configuration template map auto tagging MPE ID.
        launchDisposition:
          allOf:
          - $ref: '#/components/schemas/LaunchDisposition'
          description: Launch disposition.
        targetInstanceTypeRightSizingMethod:
          allOf:
          - $ref: '#/components/schemas/TargetInstanceTypeRightSizingMethod'
          description: Target instance type right-sizing method.
        copyPrivateIp:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Copy private Ip.
        associatePublicIpAddress:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Associate public Ip address.
        copyTags:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Copy tags.
        licensing:
          $ref: '#/components/schemas/Licensing'
        bootMode:
          allOf:
          - $ref: '#/components/schemas/BootMode'
          description: Launch configuration template boot mode.
        smallVolumeMaxSize:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Small volume maximum size.
        smallVolumeConf:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateDiskConf'
          description: Small volume config.
        largeVolumeConf:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateDiskConf'
          description: Large volume config.
      required:
      - launchConfigurationTemplateID
    UpdateReplicationConfigurationRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Update replication configuration Source Server ID request.
        name:
          allOf:
          - $ref: '#/components/schemas/SmallBoundedString'
          description: Update replication configuration name request.
        stagingAreaSubnetId:
          allOf:
          - $ref: '#/components/schemas/SubnetID'
          description: Update replication configuration Staging Area subnet request.
        associateDefaultSecurityGroup:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Update replication configuration associate default Application
            Migration Service Security group request.
        replicationServersSecurityGroupsIDs:
          allOf:
          - $ref: '#/components/schemas/ReplicationServersSecurityGroupsIDs'
          description: Update replication configuration Replication Server Security
            Groups IDs request.
        replicationServerInstanceType:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceType'
          description: Update replication configuration Replication Server instance
            type request.
        useDedicatedReplicationServer:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Update replication configuration use dedicated Replication
            Server request.
        defaultLargeStagingDiskType:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationDefaultLargeStagingDiskType'
          description: Update replication configuration use default large Staging
            Disk type request.
        replicatedDisks:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationReplicatedDisks'
          description: Update replication configuration replicated disks request.
        ebsEncryption:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationEbsEncryption'
          description: Update replication configuration EBS encryption request.
        ebsEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Update replication configuration EBS encryption key ARN request.
        bandwidthThrottling:
          allOf:
          - $ref: '#/components/schemas/BandwidthThrottling'
          description: Update replication configuration bandwidth throttling request.
        dataPlaneRouting:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationDataPlaneRouting'
          description: Update replication configuration data plane routing request.
        createPublicIP:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Update replication configuration create Public IP request.
        stagingAreaTags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Update replication configuration Staging Area Tags request.
        useFipsEndpoint:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Update replication configuration use Fips Endpoint.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Update replication configuration Account ID request.
      required:
      - sourceServerID
    UpdateReplicationConfigurationTemplateRequest:
      type: object
      properties:
        replicationConfigurationTemplateID:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationTemplateID'
          description: Update replication configuration template template ID request.
        arn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Update replication configuration template ARN request.
        stagingAreaSubnetId:
          allOf:
          - $ref: '#/components/schemas/SubnetID'
          description: Update replication configuration template Staging Area subnet
            ID request.
        associateDefaultSecurityGroup:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Update replication configuration template associate default
            Application Migration Service Security group request.
        replicationServersSecurityGroupsIDs:
          allOf:
          - $ref: '#/components/schemas/ReplicationServersSecurityGroupsIDs'
          description: Update replication configuration template Replication Server
            Security groups IDs request.
        replicationServerInstanceType:
          allOf:
          - $ref: '#/components/schemas/EC2InstanceType'
          description: Update replication configuration template Replication Server
            instance type request.
        useDedicatedReplicationServer:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Update replication configuration template use dedicated Replication
            Server request.
        defaultLargeStagingDiskType:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationDefaultLargeStagingDiskType'
          description: Update replication configuration template use default large
            Staging Disk type request.
        ebsEncryption:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationEbsEncryption'
          description: Update replication configuration template EBS encryption request.
        ebsEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Update replication configuration template EBS encryption key
            ARN request.
        bandwidthThrottling:
          allOf:
          - $ref: '#/components/schemas/BandwidthThrottling'
          description: Update replication configuration template bandwidth throttling
            request.
        dataPlaneRouting:
          allOf:
          - $ref: '#/components/schemas/ReplicationConfigurationDataPlaneRouting'
          description: Update replication configuration template data plane routing
            request.
        createPublicIP:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Update replication configuration template create Public IP
            request.
        stagingAreaTags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Update replication configuration template Staging Area Tags
            request.
        useFipsEndpoint:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Update replication configuration template use Fips Endpoint
            request.
      required:
      - replicationConfigurationTemplateID
    UpdateSourceServerReplicationTypeRequest:
      type: object
      properties:
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: ID of source server on which to update replication type.
        replicationType:
          allOf:
          - $ref: '#/components/schemas/ReplicationType'
          description: Replication type to which to update source server.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID on which to update replication type.
      required:
      - sourceServerID
      - replicationType
    UpdateSourceServerRequest:
      type: object
      properties:
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Update Source Server request account ID.
        sourceServerID:
          allOf:
          - $ref: '#/components/schemas/SourceServerID'
          description: Update Source Server request source server ID.
        connectorAction:
          allOf:
          - $ref: '#/components/schemas/SourceServerConnectorAction'
          description: Update Source Server request connector action.
      required:
      - sourceServerID
    UpdateWaveRequest:
      type: object
      properties:
        waveID:
          allOf:
          - $ref: '#/components/schemas/WaveID'
          description: Wave ID.
        name:
          allOf:
          - $ref: '#/components/schemas/WaveName'
          description: Wave name.
        description:
          allOf:
          - $ref: '#/components/schemas/WaveDescription'
          description: Wave description.
        accountID:
          allOf:
          - $ref: '#/components/schemas/AccountID'
          description: Account ID.
      required:
      - waveID
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/LargeBoundedString'
        code:
          $ref: '#/components/schemas/LargeBoundedString'
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: Validate exception reason.
        fieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: Validate exception field list.
      description: Validate exception.
    ValidationExceptionField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Validate exception field name.
        message:
          allOf:
          - $ref: '#/components/schemas/LargeBoundedString'
          description: Validate exception field message.
      description: Validate exception field.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - unknownOperation
      - cannotParse
      - fieldValidationFailed
      - other
    VcenterClient:
      type: object
      properties:
        vcenterClientID:
          allOf:
          - $ref: '#/components/schemas/VcenterClientID'
          description: ID of vCenter client.
        arn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Arn of vCenter client.
        hostname:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Hostname of vCenter client .
        vcenterUUID:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Vcenter UUID of vCenter client.
        datacenterName:
          allOf:
          - $ref: '#/components/schemas/BoundedString'
          description: Datacenter name of vCenter client.
        lastSeenDatetime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Last seen time of vCenter client.
        sourceServerTags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Tags for Source Server of vCenter client.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Tags for vCenter client.
      description: vCenter client.
    VcenterClientID:
      type: string
      pattern: ^vcc-[0-9a-zA-Z]{17}$
      minLength: 21
      maxLength: 21
    VcenterClientList:
      type: array
      items:
        $ref: '#/components/schemas/VcenterClient'
    VolumeType:
      type: string
      enum:
      - io1
      - io2
      - gp3
      - gp2
      - st1
      - sc1
      - standard
    Wave:
      type: object
      properties:
        waveID:
          allOf:
          - $ref: '#/components/schemas/WaveID'
          description: Wave ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Wave ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/WaveName'
          description: Wave name.
        description:
          allOf:
          - $ref: '#/components/schemas/WaveDescription'
          description: Wave description.
        isArchived:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Wave archival status.
        waveAggregatedStatus:
          allOf:
          - $ref: '#/components/schemas/WaveAggregatedStatus'
          description: Wave aggregated status.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Wave creation dateTime.
        lastModifiedDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Wave last modified dateTime.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Wave tags.
    WaveAggregatedStatus:
      type: object
      properties:
        lastUpdateDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: Wave aggregated status last update dateTime.
        replicationStartedDateTime:
          allOf:
          - $ref: '#/components/schemas/ISO8601DatetimeString'
          description: DateTime marking when the first source server in the wave started
            replication.
        healthStatus:
          allOf:
          - $ref: '#/components/schemas/WaveHealthStatus'
          description: Wave aggregated status health status.
        progressStatus:
          allOf:
          - $ref: '#/components/schemas/WaveProgressStatus'
          description: Wave aggregated status progress status.
        totalApplications:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: Wave aggregated status total applications amount.
      description: Wave aggregated status.
    WaveDescription:
      type: string
      pattern: ^[^\x00]*$
      minLength: 0
      maxLength: 600
    WaveHealthStatus:
      type: string
      enum:
      - HEALTHY
      - LAGGING
      - ERROR
    WaveID:
      type: string
      pattern: ^wave-[0-9a-zA-Z]{17}$
      minLength: 22
      maxLength: 22
    WaveIDsFilter:
      type: array
      items:
        $ref: '#/components/schemas/WaveID'
    WaveName:
      type: string
      pattern: ^[^\s\x00]( *[^\s\x00])*$
      minLength: 1
      maxLength: 256
    WaveProgressStatus:
      type: string
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - COMPLETED
    WavesList:
      type: array
      items:
        $ref: '#/components/schemas/Wave'
