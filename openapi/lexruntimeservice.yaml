openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: lex_runtime_service
  x-aws-serviceName: lexruntimeservice
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2016-11-28'
  title: Amazon Lex Runtime Service
  description: |-
    Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says "I want pizza", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, .
servers:
- description: The Amazon Lex Runtime Service regional endpoint
  url: https://runtime.lex.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /bot/{botName}/alias/{botAlias}/user/{userId}/session:
    delete:
      operationId: DeleteSession
      description: |-
        Removes session information for a specified bot, alias, and user ID.
      parameters:
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: botAlias
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotAlias'
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      responses:
        '200': {}
        '400':
          description: |-
            Request validation failed, there is no usable message in the context, or the bot build failed, is still in progress, or contains unbuilt changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service error. Retry the call.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            Exceeded a limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    get:
      operationId: GetSession
      description: |-
        Returns session information for a specified bot, alias, and user ID.
      parameters:
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: botAlias
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotAlias'
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - name: checkpointLabelFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IntentSummaryCheckpointLabel'
      responses:
        '200': {}
        '400':
          description: |-
            Request validation failed, there is no usable message in the context, or the bot build failed, is still in progress, or contains unbuilt changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            Internal service error. Retry the call.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            Exceeded a limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      operationId: PutSession
      description: |-
        Creates a new session or modifies an existing session with an Amazon Lex bot. Use this operation to enable your application to set the state of the bot.

        For more information, see [Managing Sessions](https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html).
      parameters:
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: botAlias
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotAlias'
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - name: Accept
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/Accept'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionAttributes:
                  $ref: '#/components/schemas/StringMap'
                dialogAction:
                  $ref: '#/components/schemas/DialogAction'
                recentIntentSummaryView:
                  $ref: '#/components/schemas/IntentSummaryList'
                activeContexts:
                  $ref: '#/components/schemas/ActiveContextsList'
      responses:
        '200': {}
        '502':
          description: |-
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon Polly, AWS Lambda) failed with an internal service error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayException'
        '400':
          description: |-
            Request validation failed, there is no usable message in the context, or the bot build failed, is still in progress, or contains unbuilt changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '424':
          description: |-
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception. For example,

              * If Amazon Lex does not have sufficient permissions to call a Lambda function.

              * If a Lambda function takes longer than 30 seconds to execute.

              * If a fulfillment Lambda function returns a `Delegate` dialog action without removing any slot values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyFailedException'
        '500':
          description: |-
            Internal service error. Retry the call.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            Exceeded a limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '406':
          description: |-
            The accept header in the request does not have a valid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableException'
        '404':
          description: |-
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /bot/{botName}/alias/{botAlias}/user/{userId}/content:
    post:
      operationId: PostContent
      description: "Sends user input (text or speech) to Amazon Lex. Clients use this\
        \ API to send text and audio requests to Amazon Lex at runtime. Amazon Lex\
        \ interprets the user input using the machine learning model that it built\
        \ for the bot.\n\nThe `PostContent` operation supports audio input at 8kHz\
        \ and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy\
        \ in telephone audio applications.\n\nIn response, Amazon Lex returns the\
        \ next message to convey to the user. Consider the following example messages:\n\
        \n  * For a user input \"I would like a pizza,\" Amazon Lex might return a\
        \ response with a message eliciting slot data (for example, `PizzaSize`):\
        \ \"What size pizza would you like?\". \n\n  * After the user provides all\
        \ of the pizza order information, Amazon Lex might return a response with\
        \ a message to get user confirmation: \"Order the pizza?\". \n\n  * After\
        \ the user replies \"Yes\" to the confirmation prompt, Amazon Lex might return\
        \ a conclusion statement: \"Thank you, your cheese pizza has been ordered.\"\
        . \n\nNot all Amazon Lex messages require a response from the user. For example,\
        \ conclusion statements do not require a response. Some messages require only\
        \ a yes or no response. In addition to the `message`, Amazon Lex provides\
        \ additional context about the message in the response that you can use to\
        \ enhance client behavior, such as displaying the appropriate client user\
        \ interface. Consider the following examples:\n\n  * If the message is to\
        \ elicit slot data, Amazon Lex returns the following context information:\
        \ \n\n    * `x-amz-lex-dialog-state` header set to `ElicitSlot`\n\n    * `x-amz-lex-intent-name`\
        \ header set to the intent name in the current context \n\n    * `x-amz-lex-slot-to-elicit`\
        \ header set to the slot name for which the `message` is eliciting information\
        \ \n\n    * `x-amz-lex-slots` header set to a map of slots configured for\
        \ the intent with their current values \n\n  * If the message is a confirmation\
        \ prompt, the `x-amz-lex-dialog-state` header is set to `Confirmation` and\
        \ the `x-amz-lex-slot-to-elicit` header is omitted. \n\n  * If the message\
        \ is a clarification prompt configured for the intent, indicating that the\
        \ user intent is not understood, the `x-amz-dialog-state` header is set to\
        \ `ElicitIntent` and the `x-amz-slot-to-elicit` header is omitted. \n\nIn\
        \ addition, Amazon Lex also returns your application-specific `sessionAttributes`.\
        \ For more information, see [Managing Conversation Context](https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html)."
      parameters:
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: botAlias
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotAlias'
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - name: x-amz-lex-session-attributes
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/SynthesizedJsonAttributesString'
      - name: x-amz-lex-request-attributes
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/SynthesizedJsonAttributesString'
      - name: Content-Type
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/HttpContentType'
      - name: Accept
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/Accept'
      - name: x-amz-lex-active-contexts
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/SynthesizedJsonActiveContextsString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inputStream:
                  $ref: '#/components/schemas/BlobStream'
      responses:
        '200': {}
        '502':
          description: |-
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon Polly, AWS Lambda) failed with an internal service error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayException'
        '400':
          description: |-
            Request validation failed, there is no usable message in the context, or the bot build failed, is still in progress, or contains unbuilt changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '424':
          description: |-
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception. For example,

              * If Amazon Lex does not have sufficient permissions to call a Lambda function.

              * If a Lambda function takes longer than 30 seconds to execute.

              * If a fulfillment Lambda function returns a `Delegate` dialog action without removing any slot values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyFailedException'
        '500':
          description: |-
            Internal service error. Retry the call.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            Exceeded a limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '508':
          description: |-
            This exception is not used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoopDetectedException'
        '406':
          description: |-
            The accept header in the request does not have a valid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableException'
        '404':
          description: |-
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '408':
          description: |-
            The input speech is too long.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '415':
          description: |-
            The Content-Type header (`PostContent` API) has an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaTypeException'
  /bot/{botName}/alias/{botAlias}/user/{userId}/text:
    post:
      operationId: PostText
      description: "Sends user input to Amazon Lex. Client applications can use this\
        \ API to send requests to Amazon Lex at runtime. Amazon Lex then interprets\
        \ the user input using the machine learning model it built for the bot.\n\n\
        In response, Amazon Lex returns the next `message` to convey to the user an\
        \ optional `responseCard` to display. Consider the following example messages:\n\
        \n  * For a user input \"I would like a pizza\", Amazon Lex might return a\
        \ response with a message eliciting slot data (for example, PizzaSize): \"\
        What size pizza would you like?\" \n\n  * After the user provides all of the\
        \ pizza order information, Amazon Lex might return a response with a message\
        \ to obtain user confirmation \"Proceed with the pizza order?\". \n\n  * After\
        \ the user replies to a confirmation prompt with a \"yes\", Amazon Lex might\
        \ return a conclusion statement: \"Thank you, your cheese pizza has been ordered.\"\
        . \n\nNot all Amazon Lex messages require a user response. For example, a\
        \ conclusion statement does not require a response. Some messages require\
        \ only a \"yes\" or \"no\" user response. In addition to the `message`, Amazon\
        \ Lex provides additional context about the message in the response that you\
        \ might use to enhance client behavior, for example, to display the appropriate\
        \ client user interface. These are the `slotToElicit`, `dialogState`, `intentName`,\
        \ and `slots` fields in the response. Consider the following examples:\n\n\
        \  * If the message is to elicit slot data, Amazon Lex returns the following\
        \ context information:\n\n    * `dialogState` set to ElicitSlot \n\n    *\
        \ `intentName` set to the intent name in the current context \n\n    * `slotToElicit`\
        \ set to the slot name for which the `message` is eliciting information \n\
        \n    * `slots` set to a map of slots, configured for the intent, with currently\
        \ known values \n\n  * If the message is a confirmation prompt, the `dialogState`\
        \ is set to ConfirmIntent and `SlotToElicit` is set to null. \n\n  * If the\
        \ message is a clarification prompt (configured for the intent) that indicates\
        \ that user intent is not understood, the `dialogState` is set to ElicitIntent\
        \ and `slotToElicit` is set to null. \n\nIn addition, Amazon Lex also returns\
        \ your application-specific `sessionAttributes`. For more information, see\
        \ [Managing Conversation Context](https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html)."
      parameters:
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: botAlias
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotAlias'
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionAttributes:
                  $ref: '#/components/schemas/StringMap'
                requestAttributes:
                  $ref: '#/components/schemas/StringMap'
                inputText:
                  $ref: '#/components/schemas/Text'
                activeContexts:
                  $ref: '#/components/schemas/ActiveContextsList'
      responses:
        '200': {}
        '502':
          description: |-
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon Polly, AWS Lambda) failed with an internal service error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayException'
        '400':
          description: |-
            Request validation failed, there is no usable message in the context, or the bot build failed, is still in progress, or contains unbuilt changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '424':
          description: |-
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception. For example,

              * If Amazon Lex does not have sufficient permissions to call a Lambda function.

              * If a Lambda function takes longer than 30 seconds to execute.

              * If a fulfillment Lambda function returns a `Delegate` dialog action without removing any slot values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyFailedException'
        '500':
          description: |-
            Internal service error. Retry the call.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            Exceeded a limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '508':
          description: |-
            This exception is not used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoopDetectedException'
        '404':
          description: |-
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
components:
  schemas:
    Accept:
      type: string
    ActiveContext:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ActiveContextName'
          description: The name of the context.
        timeToLive:
          allOf:
          - $ref: '#/components/schemas/ActiveContextTimeToLive'
          description: The length of time or number of turns that a context remains
            active.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ActiveContextParametersMap'
          description: State variables for the current context. You can use these
            values as default values for slots in subsequent events.
      required:
      - name
      - timeToLive
      - parameters
      description: A context is a variable that contains information about the current
        state of the conversation between a user and Amazon Lex. Context can be set
        automatically by Amazon Lex when an intent is fulfilled, or it can be set
        at runtime using the `PutContent`, `PutText`, or `PutSession` operation.
    ActiveContextName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    ActiveContextParametersMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Text'
    ActiveContextTimeToLive:
      type: object
      properties:
        timeToLiveInSeconds:
          allOf:
          - $ref: '#/components/schemas/ActiveContextTimeToLiveInSeconds'
          description: The number of seconds that the context should be active after
            it is first sent in a `PostContent` or `PostText` response. You can set
            the value between 5 and 86,400 seconds (24 hours).
        turnsToLive:
          allOf:
          - $ref: '#/components/schemas/ActiveContextTurnsToLive'
          description: The number of conversation turns that the context should be
            active. A conversation turn is one `PostContent` or `PostText` request
            and the corresponding response from Amazon Lex.
      description: The length of time or number of turns that a context remains active.
    ActiveContextTimeToLiveInSeconds:
      type: integer
      minimum: 5
      maximum: 86400
    ActiveContextTurnsToLive:
      type: integer
      minimum: 1
      maximum: 20
    ActiveContextsList:
      type: array
      items:
        $ref: '#/components/schemas/ActiveContext'
      x-sensitive: true
    BadGatewayException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: Either the Amazon Lex bot is still building, or one of the dependent
        services (Amazon Polly, AWS Lambda) failed with an internal service error.
    BadRequestException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Request validation failed, there is no usable message in the context,
        or the bot build failed, is still in progress, or contains unbuilt changes.
    BlobStream:
      type: string
      format: byte
    BotAlias:
      type: string
    BotName:
      type: string
    BotVersion:
      type: string
      pattern: ^[0-9]+|\$LATEST$
      minLength: 1
      maxLength: 64
    Button:
      type: object
      properties:
        text:
          allOf:
          - $ref: '#/components/schemas/ButtonTextStringWithLength'
          description: Text that is visible to the user on the button.
        value:
          allOf:
          - $ref: '#/components/schemas/ButtonValueStringWithLength'
          description: The value sent to Amazon Lex when a user chooses the button.
            For example, consider button text "NYC." When the user chooses the button,
            the value sent can be "New York City."
      required:
      - text
      - value
      description: Represents an option to be shown on the client platform (Facebook,
        Slack, etc.)
    ButtonTextStringWithLength:
      type: string
      minLength: 1
      maxLength: 15
    ButtonValueStringWithLength:
      type: string
      minLength: 1
      maxLength: 1000
    ConfirmationStatus:
      type: string
      enum:
      - None
      - Confirmed
      - Denied
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Two clients are using the same AWS account, Amazon Lex bot, and
        user ID.
    ContentType:
      type: string
      enum:
      - application/vnd.amazonaws.card.generic
    DeleteSessionRequest:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot that contains the session data.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/BotAlias'
          description: The alias in use for the bot that contains the session data.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The identifier of the user associated with the session data.
      required:
      - botName
      - botAlias
      - userId
    DeleteSessionResponse:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot associated with the session data.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/BotAlias'
          description: The alias in use for the bot associated with the session data.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The ID of the client application user.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique identifier for the session.
    DependencyFailedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: "One of the dependencies, such as AWS Lambda or Amazon Polly, threw\
        \ an exception. For example,\n\n  * If Amazon Lex does not have sufficient\
        \ permissions to call a Lambda function.\n\n  * If a Lambda function takes\
        \ longer than 30 seconds to execute.\n\n  * If a fulfillment Lambda function\
        \ returns a `Delegate` dialog action without removing any slot values."
    DialogAction:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DialogActionType'
          description: "The next action that the bot should take in its interaction\
            \ with the user. The possible values are:\n\n  * `ConfirmIntent` \\- The\
            \ next action is asking the user if the intent is complete and ready to\
            \ be fulfilled. This is a yes/no question such as \"Place the order?\"\
            \n\n  * `Close` \\- Indicates that the there will not be a response from\
            \ the user. For example, the statement \"Your order has been placed\"\
            \ does not require a response.\n\n  * `Delegate` \\- The next action is\
            \ determined by Amazon Lex.\n\n  * `ElicitIntent` \\- The next action\
            \ is to determine the intent that the user wants to fulfill.\n\n  * `ElicitSlot`\
            \ \\- The next action is to elicit a slot value from the user."
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: Map of the slots that have been gathered and their values.
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the slot that should be elicited from the user.
        fulfillmentState:
          allOf:
          - $ref: '#/components/schemas/FulfillmentState'
          description: "The fulfillment state of the intent. The possible values are:\n\
            \n  * `Failed` \\- The Lambda function associated with the intent failed\
            \ to fulfill the intent.\n\n  * `Fulfilled` \\- The intent has fulfilled\
            \ by the Lambda function associated with the intent. \n\n  * `ReadyForFulfillment`\
            \ \\- All of the information necessary for the intent is present and the\
            \ intent ready to be fulfilled by the client application."
        message:
          allOf:
          - $ref: '#/components/schemas/Text'
          description: The message that should be shown to the user. If you don't
            specify a message, Amazon Lex will use the message configured for the
            intent.
        messageFormat:
          allOf:
          - $ref: '#/components/schemas/MessageFormatType'
          description: "* `PlainText` \\- The message contains plain UTF-8 text.\n\
            \n  * `CustomPayload` \\- The message is a custom format for the client.\n\
            \n  * `SSML` \\- The message contains text formatted for voice output.\n\
            \n  * `Composite` \\- The message contains an escaped JSON object containing\
            \ one or more messages. For more information, see [Message Groups](https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html)."
      required:
      - type
      description: Describes the next action that the bot should take in its interaction
        with the user and provides information about the context in which the action
        takes place. Use the `DialogAction` data type to set the interaction to a
        specific state, or to return the interaction to a previous state.
    DialogActionType:
      type: string
      enum:
      - ElicitIntent
      - ConfirmIntent
      - ElicitSlot
      - Close
      - Delegate
    DialogState:
      type: string
      enum:
      - ElicitIntent
      - ConfirmIntent
      - ElicitSlot
      - Fulfilled
      - ReadyForFulfillment
      - Failed
    Double:
      type: number
      format: double
      default: 0
    ErrorMessage:
      type: string
    FulfillmentState:
      type: string
      enum:
      - Fulfilled
      - Failed
      - ReadyForFulfillment
    GenericAttachment:
      type: object
      properties:
        title:
          allOf:
          - $ref: '#/components/schemas/StringWithLength'
          description: The title of the option.
        subTitle:
          allOf:
          - $ref: '#/components/schemas/StringWithLength'
          description: The subtitle shown below the title.
        attachmentLinkUrl:
          allOf:
          - $ref: '#/components/schemas/StringUrlWithLength'
          description: The URL of an attachment to the response card.
        imageUrl:
          allOf:
          - $ref: '#/components/schemas/StringUrlWithLength'
          description: The URL of an image that is displayed to the user.
        buttons:
          allOf:
          - $ref: '#/components/schemas/listOfButtons'
          description: The list of options to show to the user.
      description: Represents an option rendered to the user when a prompt is shown.
        It could be an image, a button, a link, or text.
    GetSessionRequest:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot that contains the session data.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/BotAlias'
          description: The alias in use for the bot that contains the session data.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The ID of the client application user. Amazon Lex uses this
            to identify a user's conversation with your bot.
        checkpointLabelFilter:
          allOf:
          - $ref: '#/components/schemas/IntentSummaryCheckpointLabel'
          description: 'A string used to filter the intents returned in the `recentIntentSummaryView`
            structure.


            When you specify a filter, only intents with their `checkpointLabel` field
            set to that string are returned.'
      required:
      - botName
      - botAlias
      - userId
    GetSessionResponse:
      type: object
      properties:
        recentIntentSummaryView:
          allOf:
          - $ref: '#/components/schemas/IntentSummaryList'
          description: 'An array of information about the intents used in the session.
            The array can contain a maximum of three summaries. If more than three
            intents are used in the session, the `recentIntentSummaryView` operation
            contains information about the last three intents used.


            If you set the `checkpointLabelFilter` parameter in the request, the array
            contains only the intents with the specified label.'
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: Map of key/value pairs representing the session-specific context
            information. It contains application information passed between Amazon
            Lex and a client application.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique identifier for the session.
        dialogAction:
          allOf:
          - $ref: '#/components/schemas/DialogAction'
          description: Describes the current state of the bot.
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextsList'
          description: 'A list of active contexts for the session. A context can be
            set when an intent is fulfilled or by calling the `PostContent`, `PostText`,
            or `PutSession` operation.


            You can use a context to control the intents that can follow up an intent,
            or to modify the operation of your application.'
    HttpContentType:
      type: string
    IntentConfidence:
      type: object
      properties:
        score:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: A score that indicates how confident Amazon Lex is that an
            intent satisfies the user's intent. Ranges between 0.00 and 1.00. Higher
            scores indicate higher confidence.
      description: Provides a score that indicates the confidence that Amazon Lex
        has that an intent is the one that satisfies the user's intent.
    IntentList:
      type: array
      items:
        $ref: '#/components/schemas/PredictedIntent'
    IntentName:
      type: string
    IntentSummary:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent.
        checkpointLabel:
          allOf:
          - $ref: '#/components/schemas/IntentSummaryCheckpointLabel'
          description: 'A user-defined label that identifies a particular intent.
            You can use this label to return to a previous intent.


            Use the `checkpointLabelFilter` parameter of the `GetSessionRequest` operation
            to filter the intents returned by the operation to those with only the
            specified label.'
        slots:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: Map of the slots that have been gathered and their values.
        confirmationStatus:
          allOf:
          - $ref: '#/components/schemas/ConfirmationStatus'
          description: "The status of the intent after the user responds to the confirmation\
            \ prompt. If the user confirms the intent, Amazon Lex sets this field\
            \ to `Confirmed`. If the user denies the intent, Amazon Lex sets this\
            \ value to `Denied`. The possible values are:\n\n  * `Confirmed` \\- The\
            \ user has responded \"Yes\" to the confirmation prompt, confirming that\
            \ the intent is complete and that it is ready to be fulfilled.\n\n  *\
            \ `Denied` \\- The user has responded \"No\" to the confirmation prompt.\n\
            \n  * `None` \\- The user has never been prompted for confirmation; or,\
            \ the user was prompted but did not confirm or deny the prompt."
        dialogActionType:
          allOf:
          - $ref: '#/components/schemas/DialogActionType'
          description: "The next action that the bot should take in its interaction\
            \ with the user. The possible values are:\n\n  * `ConfirmIntent` \\- The\
            \ next action is asking the user if the intent is complete and ready to\
            \ be fulfilled. This is a yes/no question such as \"Place the order?\"\
            \n\n  * `Close` \\- Indicates that the there will not be a response from\
            \ the user. For example, the statement \"Your order has been placed\"\
            \ does not require a response.\n\n  * `ElicitIntent` \\- The next action\
            \ is to determine the intent that the user wants to fulfill.\n\n  * `ElicitSlot`\
            \ \\- The next action is to elicit a slot value from the user."
        fulfillmentState:
          allOf:
          - $ref: '#/components/schemas/FulfillmentState'
          description: "The fulfillment state of the intent. The possible values are:\n\
            \n  * `Failed` \\- The Lambda function associated with the intent failed\
            \ to fulfill the intent.\n\n  * `Fulfilled` \\- The intent has fulfilled\
            \ by the Lambda function associated with the intent. \n\n  * `ReadyForFulfillment`\
            \ \\- All of the information necessary for the intent is present and the\
            \ intent ready to be fulfilled by the client application."
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The next slot to elicit from the user. If there is not slot
            to elicit, the field is blank.
      required:
      - dialogActionType
      description: Provides information about the state of an intent. You can use
        this information to get the current state of an intent so that you can process
        the intent, or so that you can return the intent to its previous state.
    IntentSummaryCheckpointLabel:
      type: string
      pattern: ^[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 255
    IntentSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/IntentSummary'
    InternalFailureException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Internal service error. Retry the call.
    LimitExceededException:
      type: object
      properties:
        retryAfterSeconds:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: Exceeded a limit.
    LoopDetectedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: This exception is not used.
    MessageFormatType:
      type: string
      enum:
      - PlainText
      - CustomPayload
      - SSML
      - Composite
    NotAcceptableException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The accept header in the request does not have a valid value.
    NotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The resource (such as the Amazon Lex bot or an alias) that is referred
        to is not found.
    ParameterName:
      type: string
      minLength: 1
      maxLength: 100
    PostContentRequest:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: Name of the Amazon Lex bot.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/BotAlias'
          description: Alias of the Amazon Lex bot.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: "The ID of the client application user. Amazon Lex uses this\
            \ to identify a user's conversation with your bot. At runtime, each request\
            \ must contain the `userID` field.\n\nTo decide the user ID to use for\
            \ your application, consider the following factors.\n\n  * The `userID`\
            \ field must not contain any personally identifiable information of the\
            \ user, for example, name, personal identification numbers, or other end\
            \ user personal information.\n\n  * If you want a user to start a conversation\
            \ on one device and continue on another device, use a user-specific identifier.\n\
            \n  * If you want the same user to be able to have two independent conversations\
            \ on two different devices, choose a device-specific identifier.\n\n \
            \ * A user can't have two independent conversations with two different\
            \ versions of the same bot. For example, a user can't have a conversation\
            \ with the PROD and BETA versions of the same bot. If you anticipate that\
            \ a user will need to have conversation with two different versions, for\
            \ example, while testing, include the bot alias in the user ID to separate\
            \ the two conversations."
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonAttributesString'
          description: 'You pass this value as the `x-amz-lex-session-attributes`
            HTTP header.


            Application-specific information passed between Amazon Lex and a client
            application. The value must be a JSON serialized and base64 encoded map
            with string keys and values. The total size of the `sessionAttributes`
            and `requestAttributes` headers is limited to 12 KB.


            For more information, see [Setting Session Attributes](https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs).'
        requestAttributes:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonAttributesString'
          description: 'You pass this value as the `x-amz-lex-request-attributes`
            HTTP header.


            Request-specific information passed between Amazon Lex and a client application.
            The value must be a JSON serialized and base64 encoded map with string
            keys and values. The total size of the `requestAttributes` and `sessionAttributes`
            headers is limited to 12 KB.


            The namespace `x-amz-lex:` is reserved for special attributes. Don''t
            create any request attributes with the prefix `x-amz-lex:`.


            For more information, see [Setting Request Attributes](https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs).'
        contentType:
          allOf:
          - $ref: '#/components/schemas/HttpContentType'
          description: "You pass this value as the `Content-Type` HTTP header.\n\n\
            Indicates the audio format or text. The header value must start with one\
            \ of the following prefixes:\n\n  * PCM format, audio data must be in\
            \ little-endian byte order.\n\n    * audio/l16; rate=16000; channels=1\n\
            \n    * audio/x-l16; sample-rate=16000; channel-count=1\n\n    * audio/lpcm;\
            \ sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false\
            \ \n\n  * Opus format\n\n    * audio/x-cbr-opus-with-preamble; preamble-size=0;\
            \ bit-rate=256000; frame-size-milliseconds=4\n\n  * Text format\n\n  \
            \  * text/plain; charset=utf-8"
        accept:
          allOf:
          - $ref: '#/components/schemas/Accept'
          description: "You pass this value as the `Accept` HTTP header.\n\nThe message\
            \ Amazon Lex returns in the response can be either text or speech based\
            \ on the `Accept` HTTP header value in the request.\n\n  * If the value\
            \ is `text/plain; charset=utf-8`, Amazon Lex returns text in the response.\
            \ \n\n  * If the value begins with `audio/`, Amazon Lex returns speech\
            \ in the response. Amazon Lex uses Amazon Polly to generate the speech\
            \ (using the configuration you specified in the `Accept` header). For\
            \ example, if you specify `audio/mpeg` as the value, Amazon Lex returns\
            \ speech in the MPEG format.\n\n  * If the value is `audio/pcm`, the speech\
            \ returned is `audio/pcm` in 16-bit, little endian format. \n\n  * The\
            \ following are the accepted values:\n\n    * audio/mpeg\n\n    * audio/ogg\n\
            \n    * audio/pcm\n\n    * text/plain; charset=utf-8\n\n    * audio/*\
            \ (defaults to mpeg)"
        inputStream:
          allOf:
          - $ref: '#/components/schemas/BlobStream'
          description: 'User input in PCM or Opus audio format or text format as described
            in the `Content-Type` HTTP header.


            You can stream audio data to Amazon Lex or you can create a local buffer
            that captures all of the audio data before sending. In general, you get
            better performance if you stream audio data rather than buffering the
            data locally.'
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonActiveContextsString'
          description: 'A list of contexts active for the request. A context can be
            activated when a previous intent is fulfilled, or by including the context
            in the request,


            If you don''t specify a list of contexts, Amazon Lex will use the current
            list of contexts for the session. If you specify an empty list, all contexts
            for the session are cleared.'
      required:
      - botName
      - botAlias
      - userId
      - contentType
      - inputStream
    PostContentResponse:
      type: object
      properties:
        contentType:
          allOf:
          - $ref: '#/components/schemas/HttpContentType'
          description: Content type as specified in the `Accept` HTTP header in the
            request.
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: Current user intent that Amazon Lex is aware of.
        nluIntentConfidence:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonString'
          description: 'Provides a score that indicates how confident Amazon Lex is
            that the returned intent is the one that matches the user''s intent. The
            score is between 0.0 and 1.0.


            The score is a relative score, not an absolute score. The score may change
            based on improvements to Amazon Lex.'
        alternativeIntents:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonString'
          description: 'One to four alternative intents that may be applicable to
            the user''s intent.


            Each alternative includes a score that indicates how confident Amazon
            Lex is that the intent matches the user''s intent. The intents are sorted
            by the confidence score.'
        slots:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonString'
          description: 'Map of zero or more intent slots (name/value pairs) Amazon
            Lex detected from the user input during the conversation. The field is
            base-64 encoded.


            Amazon Lex creates a resolution list containing likely values for a slot.
            The value that it returns is determined by the `valueSelectionStrategy`
            selected when the slot type was created or updated. If `valueSelectionStrategy`
            is set to `ORIGINAL_VALUE`, the value provided by the user is returned,
            if the user value is similar to the slot values. If `valueSelectionStrategy`
            is set to `TOP_RESOLUTION` Amazon Lex returns the first value in the resolution
            list or, if there is no resolution list, null. If you don''t specify a
            `valueSelectionStrategy`, the default is `ORIGINAL_VALUE`.'
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonString'
          description: Map of key/value pairs representing the session-specific context
            information.
        sentimentResponse:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The sentiment expressed in an utterance.


            When the bot is configured to send utterances to Amazon Comprehend for
            sentiment analysis, this field contains the result of the analysis.'
        message:
          allOf:
          - $ref: '#/components/schemas/Text'
          description: 'You can only use this field in the de-DE, en-AU, en-GB, en-US,
            es-419, es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
            the `message` field is null. You should use the `encodedMessage` field
            instead.


            The message to convey to the user. The message can come from the bot''s
            configuration or from a Lambda function.


            If the intent is not configured with a Lambda function, or if the Lambda
            function returned `Delegate` as the `dialogAction.type` in its response,
            Amazon Lex decides on the next course of action and selects an appropriate
            message from the bot''s configuration based on the current interaction
            context. For example, if Amazon Lex isn''t able to understand user input,
            it uses a clarification prompt message.


            When you create an intent you can assign messages to groups. When messages
            are assigned to groups Amazon Lex returns one message from each group
            in the response. The message field is an escaped JSON string containing
            the messages. For more information about the structure of the JSON string
            returned, see msg-prompts-formats.


            If the Lambda function returns a message, Amazon Lex passes it to the
            client in its response.'
        encodedMessage:
          allOf:
          - $ref: '#/components/schemas/SensitiveString'
          description: 'The message to convey to the user. The message can come from
            the bot''s configuration or from a Lambda function.


            If the intent is not configured with a Lambda function, or if the Lambda
            function returned `Delegate` as the `dialogAction.type` in its response,
            Amazon Lex decides on the next course of action and selects an appropriate
            message from the bot''s configuration based on the current interaction
            context. For example, if Amazon Lex isn''t able to understand user input,
            it uses a clarification prompt message.


            When you create an intent you can assign messages to groups. When messages
            are assigned to groups Amazon Lex returns one message from each group
            in the response. The message field is an escaped JSON string containing
            the messages. For more information about the structure of the JSON string
            returned, see msg-prompts-formats.


            If the Lambda function returns a message, Amazon Lex passes it to the
            client in its response.


            The `encodedMessage` field is base-64 encoded. You must decode the field
            before you can use the value.'
        messageFormat:
          allOf:
          - $ref: '#/components/schemas/MessageFormatType'
          description: "The format of the response message. One of the following values:\n\
            \n  * `PlainText` \\- The message contains plain UTF-8 text.\n\n  * `CustomPayload`\
            \ \\- The message is a custom format for the client.\n\n  * `SSML` \\\
            - The message contains text formatted for voice output.\n\n  * `Composite`\
            \ \\- The message contains an escaped JSON object containing one or more\
            \ messages from the groups that messages were assigned to when the intent\
            \ was created."
        dialogState:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: "Identifies the current state of the user interaction. Amazon\
            \ Lex returns one of the following values as `dialogState`. The client\
            \ can optionally use this information to customize the user interface.\n\
            \n  * `ElicitIntent` \\- Amazon Lex wants to elicit the user's intent.\
            \ Consider the following examples: \n\nFor example, a user might utter\
            \ an intent (\"I want to order a pizza\"). If Amazon Lex cannot infer\
            \ the user intent from this utterance, it will return this dialog state.\n\
            \n  * `ConfirmIntent` \\- Amazon Lex is expecting a \"yes\" or \"no\"\
            \ response. \n\nFor example, Amazon Lex wants user confirmation before\
            \ fulfilling an intent. Instead of a simple \"yes\" or \"no\" response,\
            \ a user might respond with additional information. For example, \"yes,\
            \ but make it a thick crust pizza\" or \"no, I want to order a drink.\"\
            \ Amazon Lex can process such additional information (in these examples,\
            \ update the crust type slot or change the intent from OrderPizza to OrderDrink).\n\
            \n  * `ElicitSlot` \\- Amazon Lex is expecting the value of a slot for\
            \ the current intent. \n\nFor example, suppose that in the response Amazon\
            \ Lex sends this message: \"What size pizza would you like?\". A user\
            \ might reply with the slot value (e.g., \"medium\"). The user might also\
            \ provide additional information in the response (e.g., \"medium thick\
            \ crust pizza\"). Amazon Lex can process such additional information appropriately.\n\
            \n  * `Fulfilled` \\- Conveys that the Lambda function has successfully\
            \ fulfilled the intent. \n\n  * `ReadyForFulfillment` \\- Conveys that\
            \ the client has to fulfill the request. \n\n  * `Failed` \\- Conveys\
            \ that the conversation with the user failed. \n\nThis can happen for\
            \ various reasons, including that the user does not provide an appropriate\
            \ response to prompts from the service (you can configure how many times\
            \ Amazon Lex can prompt a user for specific information), or if the Lambda\
            \ function fails to fulfill the intent."
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If the `dialogState` value is `ElicitSlot`, returns the name
            of the slot for which Amazon Lex is eliciting a value.
        inputTranscript:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The text used to process the request.


            You can use this field only in the de-DE, en-AU, en-GB, en-US, es-419,
            es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales, the
            `inputTranscript` field is null. You should use the `encodedInputTranscript`
            field instead.


            If the input was an audio stream, the `inputTranscript` field contains
            the text extracted from the audio stream. This is the text that is actually
            processed to recognize intents and slot values. You can use this information
            to determine if Amazon Lex is correctly processing the audio that you
            send.'
        encodedInputTranscript:
          allOf:
          - $ref: '#/components/schemas/SensitiveStringUnbounded'
          description: 'The text used to process the request.


            If the input was an audio stream, the `encodedInputTranscript` field contains
            the text extracted from the audio stream. This is the text that is actually
            processed to recognize intents and slot values. You can use this information
            to determine if Amazon Lex is correctly processing the audio that you
            send.


            The `encodedInputTranscript` field is base-64 encoded. You must decode
            the field before you can use the value.'
        audioStream:
          allOf:
          - $ref: '#/components/schemas/BlobStream'
          description: 'The prompt (or statement) to convey to the user. This is based
            on the bot configuration and context. For example, if Amazon Lex did not
            understand the user intent, it sends the `clarificationPrompt` configured
            for the bot. If the intent requires confirmation before taking the fulfillment
            action, it sends the `confirmationPrompt`. Another example: Suppose that
            the Lambda function successfully fulfilled the intent, and sent a message
            to convey to the user. Then Amazon Lex sends that message in the response.'
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that responded to the conversation.
            You can use this information to help determine if one version of a bot
            is performing better than another version.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique identifier for the session.
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonActiveContextsString'
          description: 'A list of active contexts for the session. A context can be
            set when an intent is fulfilled or by calling the `PostContent`, `PostText`,
            or `PutSession` operation.


            You can use a context to control the intents that can follow up an intent,
            or to modify the operation of your application.'
    PostTextRequest:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the Amazon Lex bot.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/BotAlias'
          description: The alias of the Amazon Lex bot.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: "The ID of the client application user. Amazon Lex uses this\
            \ to identify a user's conversation with your bot. At runtime, each request\
            \ must contain the `userID` field.\n\nTo decide the user ID to use for\
            \ your application, consider the following factors.\n\n  * The `userID`\
            \ field must not contain any personally identifiable information of the\
            \ user, for example, name, personal identification numbers, or other end\
            \ user personal information.\n\n  * If you want a user to start a conversation\
            \ on one device and continue on another device, use a user-specific identifier.\n\
            \n  * If you want the same user to be able to have two independent conversations\
            \ on two different devices, choose a device-specific identifier.\n\n \
            \ * A user can't have two independent conversations with two different\
            \ versions of the same bot. For example, a user can't have a conversation\
            \ with the PROD and BETA versions of the same bot. If you anticipate that\
            \ a user will need to have conversation with two different versions, for\
            \ example, while testing, include the bot alias in the user ID to separate\
            \ the two conversations."
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: 'Application-specific information passed between Amazon Lex
            and a client application.


            For more information, see [Setting Session Attributes](https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs).'
        requestAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: 'Request-specific information passed between Amazon Lex and
            a client application.


            The namespace `x-amz-lex:` is reserved for special attributes. Don''t
            create any request attributes with the prefix `x-amz-lex:`.


            For more information, see [Setting Request Attributes](https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs).'
        inputText:
          allOf:
          - $ref: '#/components/schemas/Text'
          description: The text that the user entered (Amazon Lex interprets this
            text).
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextsList'
          description: 'A list of contexts active for the request. A context can be
            activated when a previous intent is fulfilled, or by including the context
            in the request,


            If you don''t specify a list of contexts, Amazon Lex will use the current
            list of contexts for the session. If you specify an empty list, all contexts
            for the session are cleared.'
      required:
      - botName
      - botAlias
      - userId
      - inputText
    PostTextResponse:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The current user intent that Amazon Lex is aware of.
        nluIntentConfidence:
          allOf:
          - $ref: '#/components/schemas/IntentConfidence'
          description: 'Provides a score that indicates how confident Amazon Lex is
            that the returned intent is the one that matches the user''s intent. The
            score is between 0.0 and 1.0. For more information, see [Confidence Scores](https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html).


            The score is a relative score, not an absolute score. The score may change
            based on improvements to Amazon Lex.'
        alternativeIntents:
          allOf:
          - $ref: '#/components/schemas/IntentList'
          description: 'One to four alternative intents that may be applicable to
            the user''s intent.


            Each alternative includes a score that indicates how confident Amazon
            Lex is that the intent matches the user''s intent. The intents are sorted
            by the confidence score.'
        slots:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: 'The intent slots that Amazon Lex detected from the user input
            in the conversation.


            Amazon Lex creates a resolution list containing likely values for a slot.
            The value that it returns is determined by the `valueSelectionStrategy`
            selected when the slot type was created or updated. If `valueSelectionStrategy`
            is set to `ORIGINAL_VALUE`, the value provided by the user is returned,
            if the user value is similar to the slot values. If `valueSelectionStrategy`
            is set to `TOP_RESOLUTION` Amazon Lex returns the first value in the resolution
            list or, if there is no resolution list, null. If you don''t specify a
            `valueSelectionStrategy`, the default is `ORIGINAL_VALUE`.'
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: A map of key-value pairs representing the session-specific
            context information.
        message:
          allOf:
          - $ref: '#/components/schemas/Text'
          description: 'The message to convey to the user. The message can come from
            the bot''s configuration or from a Lambda function.


            If the intent is not configured with a Lambda function, or if the Lambda
            function returned `Delegate` as the `dialogAction.type` its response,
            Amazon Lex decides on the next course of action and selects an appropriate
            message from the bot''s configuration based on the current interaction
            context. For example, if Amazon Lex isn''t able to understand user input,
            it uses a clarification prompt message.


            When you create an intent you can assign messages to groups. When messages
            are assigned to groups Amazon Lex returns one message from each group
            in the response. The message field is an escaped JSON string containing
            the messages. For more information about the structure of the JSON string
            returned, see msg-prompts-formats.


            If the Lambda function returns a message, Amazon Lex passes it to the
            client in its response.'
        sentimentResponse:
          allOf:
          - $ref: '#/components/schemas/SentimentResponse'
          description: 'The sentiment expressed in and utterance.


            When the bot is configured to send utterances to Amazon Comprehend for
            sentiment analysis, this field contains the result of the analysis.'
        messageFormat:
          allOf:
          - $ref: '#/components/schemas/MessageFormatType'
          description: "The format of the response message. One of the following values:\n\
            \n  * `PlainText` \\- The message contains plain UTF-8 text.\n\n  * `CustomPayload`\
            \ \\- The message is a custom format defined by the Lambda function.\n\
            \n  * `SSML` \\- The message contains text formatted for voice output.\n\
            \n  * `Composite` \\- The message contains an escaped JSON object containing\
            \ one or more messages from the groups that messages were assigned to\
            \ when the intent was created."
        dialogState:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: "Identifies the current state of the user interaction. Amazon\
            \ Lex returns one of the following values as `dialogState`. The client\
            \ can optionally use this information to customize the user interface.\n\
            \n  * `ElicitIntent` \\- Amazon Lex wants to elicit user intent. \n\n\
            For example, a user might utter an intent (\"I want to order a pizza\"\
            ). If Amazon Lex cannot infer the user intent from this utterance, it\
            \ will return this dialogState.\n\n  * `ConfirmIntent` \\- Amazon Lex\
            \ is expecting a \"yes\" or \"no\" response. \n\nFor example, Amazon Lex\
            \ wants user confirmation before fulfilling an intent.\n\nInstead of a\
            \ simple \"yes\" or \"no,\" a user might respond with additional information.\
            \ For example, \"yes, but make it thick crust pizza\" or \"no, I want\
            \ to order a drink\". Amazon Lex can process such additional information\
            \ (in these examples, update the crust type slot value, or change intent\
            \ from OrderPizza to OrderDrink).\n\n  * `ElicitSlot` \\- Amazon Lex is\
            \ expecting a slot value for the current intent. \n\nFor example, suppose\
            \ that in the response Amazon Lex sends this message: \"What size pizza\
            \ would you like?\". A user might reply with the slot value (e.g., \"\
            medium\"). The user might also provide additional information in the response\
            \ (e.g., \"medium thick crust pizza\"). Amazon Lex can process such additional\
            \ information appropriately.\n\n  * `Fulfilled` \\- Conveys that the Lambda\
            \ function configured for the intent has successfully fulfilled the intent.\
            \ \n\n  * `ReadyForFulfillment` \\- Conveys that the client has to fulfill\
            \ the intent. \n\n  * `Failed` \\- Conveys that the conversation with\
            \ the user failed. \n\nThis can happen for various reasons including that\
            \ the user did not provide an appropriate response to prompts from the\
            \ service (you can configure how many times Amazon Lex can prompt a user\
            \ for specific information), or the Lambda function failed to fulfill\
            \ the intent."
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If the `dialogState` value is `ElicitSlot`, returns the name
            of the slot for which Amazon Lex is eliciting a value.
        responseCard:
          allOf:
          - $ref: '#/components/schemas/ResponseCard'
          description: Represents the options that the user has to respond to the
            current prompt. Response Card can come from the bot configuration (in
            the Amazon Lex console, choose the settings button next to a slot) or
            from a code hook (Lambda function).
        sessionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique identifier for the session.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          description: The version of the bot that responded to the conversation.
            You can use this information to help determine if one version of a bot
            is performing better than another version.
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextsList'
          description: 'A list of active contexts for the session. A context can be
            set when an intent is fulfilled or by calling the `PostContent`, `PostText`,
            or `PutSession` operation.


            You can use a context to control the intents that can follow up an intent,
            or to modify the operation of your application.'
    PredictedIntent:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent that Amazon Lex suggests satisfies the
            user's intent.
        nluIntentConfidence:
          allOf:
          - $ref: '#/components/schemas/IntentConfidence'
          description: Indicates how confident Amazon Lex is that an intent satisfies
            the user's intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: The slot and slot values associated with the predicted intent.
      description: An intent that Amazon Lex suggests satisfies the user's intent.
        Includes the name of the intent, the confidence that Amazon Lex has that the
        user's intent is satisfied, and the slots defined for the intent.
    PutSessionRequest:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot that contains the session data.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/BotAlias'
          description: The alias in use for the bot that contains the session data.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The ID of the client application user. Amazon Lex uses this
            to identify a user's conversation with your bot.
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: Map of key/value pairs representing the session-specific context
            information. It contains application information passed between Amazon
            Lex and a client application.
        dialogAction:
          allOf:
          - $ref: '#/components/schemas/DialogAction'
          description: Sets the next action that the bot should take to fulfill the
            conversation.
        recentIntentSummaryView:
          allOf:
          - $ref: '#/components/schemas/IntentSummaryList'
          description: "A summary of the recent intents for the bot. You can use the\
            \ intent summary view to set a checkpoint label on an intent and modify\
            \ attributes of intents. You can also use it to remove or add intent summary\
            \ objects to the list.\n\nAn intent that you modify or add to the list\
            \ must make sense for the bot. For example, the intent name must be valid\
            \ for the bot. You must provide valid values for:\n\n  * `intentName`\n\
            \n  * slot names\n\n  * `slotToElict`\n\nIf you send the `recentIntentSummaryView`\
            \ parameter in a `PutSession` request, the contents of the new summary\
            \ view replaces the old summary view. For example, if a `GetSession` request\
            \ returns three intents in the summary view and you call `PutSession`\
            \ with one intent in the summary view, the next call to `GetSession` will\
            \ only return one intent."
        accept:
          allOf:
          - $ref: '#/components/schemas/Accept'
          description: "The message that Amazon Lex returns in the response can be\
            \ either text or speech based depending on the value of this field.\n\n\
            \  * If the value is `text/plain; charset=utf-8`, Amazon Lex returns text\
            \ in the response.\n\n  * If the value begins with `audio/`, Amazon Lex\
            \ returns speech in the response. Amazon Lex uses Amazon Polly to generate\
            \ the speech in the configuration that you specify. For example, if you\
            \ specify `audio/mpeg` as the value, Amazon Lex returns speech in the\
            \ MPEG format.\n\n  * If the value is `audio/pcm`, the speech is returned\
            \ as `audio/pcm` in 16-bit, little endian format.\n\n  * The following\
            \ are the accepted values:\n\n    * `audio/mpeg`\n\n    * `audio/ogg`\n\
            \n    * `audio/pcm`\n\n    * `audio/*` (defaults to mpeg)\n\n    * `text/plain;\
            \ charset=utf-8`"
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextsList'
          description: 'A list of contexts active for the request. A context can be
            activated when a previous intent is fulfilled, or by including the context
            in the request,


            If you don''t specify a list of contexts, Amazon Lex will use the current
            list of contexts for the session. If you specify an empty list, all contexts
            for the session are cleared.'
      required:
      - botName
      - botAlias
      - userId
    PutSessionResponse:
      type: object
      properties:
        contentType:
          allOf:
          - $ref: '#/components/schemas/HttpContentType'
          description: Content type as specified in the `Accept` HTTP header in the
            request.
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the current intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonString'
          description: 'Map of zero or more intent slots Amazon Lex detected from
            the user input during the conversation.


            Amazon Lex creates a resolution list containing likely values for a slot.
            The value that it returns is determined by the `valueSelectionStrategy`
            selected when the slot type was created or updated. If `valueSelectionStrategy`
            is set to `ORIGINAL_VALUE`, the value provided by the user is returned,
            if the user value is similar to the slot values. If `valueSelectionStrategy`
            is set to `TOP_RESOLUTION` Amazon Lex returns the first value in the resolution
            list or, if there is no resolution list, null. If you don''t specify a
            `valueSelectionStrategy` the default is `ORIGINAL_VALUE`.'
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonString'
          description: Map of key/value pairs representing session-specific context
            information.
        message:
          allOf:
          - $ref: '#/components/schemas/Text'
          description: 'The next message that should be presented to the user.


            You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,
            es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales, the
            `message` field is null. You should use the `encodedMessage` field instead.'
        encodedMessage:
          allOf:
          - $ref: '#/components/schemas/SensitiveString'
          description: 'The next message that should be presented to the user.


            The `encodedMessage` field is base-64 encoded. You must decode the field
            before you can use the value.'
        messageFormat:
          allOf:
          - $ref: '#/components/schemas/MessageFormatType'
          description: "The format of the response message. One of the following values:\n\
            \n  * `PlainText` \\- The message contains plain UTF-8 text.\n\n  * `CustomPayload`\
            \ \\- The message is a custom format for the client.\n\n  * `SSML` \\\
            - The message contains text formatted for voice output.\n\n  * `Composite`\
            \ \\- The message contains an escaped JSON object containing one or more\
            \ messages from the groups that messages were assigned to when the intent\
            \ was created."
        dialogState:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          description: "* `ConfirmIntent` \\- Amazon Lex is expecting a \"yes\" or\
            \ \"no\" response to confirm the intent before fulfilling an intent.\n\
            \n  * `ElicitIntent` \\- Amazon Lex wants to elicit the user's intent.\n\
            \n  * `ElicitSlot` \\- Amazon Lex is expecting the value of a slot for\
            \ the current intent.\n\n  * `Failed` \\- Conveys that the conversation\
            \ with the user has failed. This can happen for various reasons, including\
            \ the user does not provide an appropriate response to prompts from the\
            \ service, or if the Lambda function fails to fulfill the intent.\n\n\
            \  * `Fulfilled` \\- Conveys that the Lambda function has sucessfully\
            \ fulfilled the intent.\n\n  * `ReadyForFulfillment` \\- Conveys that\
            \ the client has to fulfill the intent."
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If the `dialogState` is `ElicitSlot`, returns the name of the
            slot for which Amazon Lex is eliciting a value.
        audioStream:
          allOf:
          - $ref: '#/components/schemas/BlobStream'
          description: The audio version of the message to convey to the user.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique identifier for the session.
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/SynthesizedJsonActiveContextsString'
          description: A list of active contexts for the session.
    RequestTimeoutException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The input speech is too long.
    ResponseCard:
      type: object
      properties:
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the response card format.
        contentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          description: The content type of the response.
        genericAttachments:
          allOf:
          - $ref: '#/components/schemas/genericAttachmentList'
          description: An array of attachment objects representing options.
      description: If you configure a response card when creating your bots, Amazon
        Lex substitutes the session attributes and slot values that are available,
        and then returns it. The response card can also come from a Lambda function
        ( `dialogCodeHook` and `fulfillmentActivity` on an intent).
    SensitiveString:
      type: string
      minLength: 1
      maxLength: 1366
    SensitiveStringUnbounded:
      type: string
    SentimentLabel:
      type: string
    SentimentResponse:
      type: object
      properties:
        sentimentLabel:
          allOf:
          - $ref: '#/components/schemas/SentimentLabel'
          description: The inferred sentiment that Amazon Comprehend has the highest
            confidence in.
        sentimentScore:
          allOf:
          - $ref: '#/components/schemas/SentimentScore'
          description: The likelihood that the sentiment was correctly inferred.
      description: 'The sentiment expressed in an utterance.


        When the bot is configured to send utterances to Amazon Comprehend for sentiment
        analysis, this field structure contains the result of the analysis.'
    SentimentScore:
      type: string
    String:
      type: string
    StringMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    StringUrlWithLength:
      type: string
      minLength: 1
      maxLength: 2048
    StringWithLength:
      type: string
      minLength: 1
      maxLength: 80
    SynthesizedJsonActiveContextsString:
      type: string
    SynthesizedJsonAttributesString:
      type: string
    SynthesizedJsonString:
      type: string
    Text:
      type: string
      minLength: 1
      maxLength: 1024
    UnsupportedMediaTypeException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The Content-Type header (`PostContent` API) has an invalid value.
    UserId:
      type: string
      pattern: ^[0-9a-zA-Z._:-]+$
      minLength: 2
      maxLength: 100
    genericAttachmentList:
      type: array
      items:
        $ref: '#/components/schemas/GenericAttachment'
    listOfButtons:
      type: array
      items:
        $ref: '#/components/schemas/Button'
