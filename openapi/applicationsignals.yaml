openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: application_signals
  x-aws-serviceName: applicationsignals
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2024-04-15'
  title: Amazon CloudWatch Application Signals
  description: "Use CloudWatch Application Signals for comprehensive observability\
    \ of your cloud-based applications. It enables real-time service health dashboards\
    \ and helps you track long-term performance trends against your business goals.\
    \ The application-centric view provides you with unified visibility across your\
    \ applications, services, and dependencies, so you can proactively monitor and\
    \ efficiently triage any issues that may arise, ensuring optimal customer experience.\n\
    \nApplication Signals provides the following benefits:\n\n  * Automatically collect\
    \ metrics and traces from your applications, and display key metrics such as call\
    \ volume, availability, latency, faults, and errors. \n\n  * Create and monitor\
    \ service level objectives (SLOs). \n\n  * See a map of your application topology\
    \ that Application Signals automatically discovers, that gives you a visual representation\
    \ of your applications, dependencies, and their connectivity.\n\nApplication Signals\
    \ works with CloudWatch RUM, CloudWatch Synthetics canaries, and Amazon Web Services\
    \ Service Catalog AppRegistry, to display your client pages, Synthetics canaries,\
    \ and application names within dashboards and maps."
servers:
- description: The Amazon CloudWatch Application Signals regional endpoint
  url: https://application-signals.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /budget-report:
    post:
      operationId: BatchGetServiceLevelObjectiveBudgetReport
      description: |-
        Use this operation to retrieve one or more _service level objective (SLO) budget reports_.

        An _error budget_ is the amount of time or requests in an unhealthy state that your service can accumulate during an interval before your overall SLO budget health is breached and the SLO is considered to be unmet. For example, an SLO with a threshold of 99.95% and a monthly interval translates to an error budget of 21.9 minutes of downtime in a 30-day month.

        Budget reports include a health indicator, the attainment value, and remaining budget.

        For more information about SLO error budgets, see [ SLO concepts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-ServiceLevelObjectives.html#CloudWatch-ServiceLevelObjectives-concepts).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Timestamp:
                  $ref: '#/components/schemas/Timestamp'
                SloIds:
                  $ref: '#/components/schemas/ServiceLevelObjectiveIds'
      responses:
        '200': {}
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /exclusion-windows:
    patch:
      operationId: BatchUpdateExclusionWindows
      description: |-
        Add or remove time window exclusions for one or more Service Level Objectives (SLOs).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                SloIds:
                  $ref: '#/components/schemas/ServiceLevelObjectiveIds'
                AddExclusionWindows:
                  $ref: '#/components/schemas/ExclusionWindows'
                RemoveExclusionWindows:
                  $ref: '#/components/schemas/ExclusionWindows'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /slo:
    post:
      operationId: CreateServiceLevelObjective
      description: |-
        Creates a service level objective (SLO), which can help you ensure that your critical business operations are meeting customer expectations. Use SLOs to set and track specific target levels for the reliability and availability of your applications and services. SLOs use service level indicators (SLIs) to calculate whether the application is performing at the level that you want.

        Create an SLO to set a target for a service or operationâ€™s availability or latency. CloudWatch measures this target frequently you can find whether it has been breached.

        The target performance quality that is defined for an SLO is the _attainment goal_.

        You can set SLO targets for your applications that are discovered by Application Signals, using critical metrics such as latency and availability. You can also set SLOs against any CloudWatch metric or math expression that produces a time series.

        You can't create an SLO for a service operation that was discovered by Application Signals until after that operation has reported standard metrics to Application Signals.

        When you create an SLO, you specify whether it is a _period-based SLO_ or a _request-based SLO_. Each type of SLO has a different way of evaluating your application's performance against its attainment goal.

          * A _period-based SLO_ uses defined _periods_ of time within a specified total time interval. For each period of time, Application Signals determines whether the application met its goal. The attainment rate is calculated as the `number of good periods/number of total periods`.

        For example, for a period-based SLO, meeting an attainment goal of 99.9% means that within your interval, your application must meet its performance goal during at least 99.9% of the time periods.

          * A _request-based SLO_ doesn't use pre-defined periods of time. Instead, the SLO measures `number of good requests/number of total requests` during the interval. At any time, you can find the ratio of good requests to total requests for the interval up to the time stamp that you specify, and measure that ratio against the goal set in your SLO.

        After you have created an SLO, you can retrieve error budget reports for it. An _error budget_ is the amount of time or amount of requests that your application can be non-compliant with the SLO's goal, and still have your application meet the goal.

          * For a period-based SLO, the error budget starts at a number defined by the highest number of periods that can fail to meet the threshold, while still meeting the overall goal. The _remaining error budget_ decreases with every failed period that is recorded. The error budget within one interval can never increase.

        For example, an SLO with a threshold that 99.95% of requests must be completed under 2000ms every month translates to an error budget of 21.9 minutes of downtime per month.

          * For a request-based SLO, the remaining error budget is dynamic and can increase or decrease, depending on the ratio of good requests to total requests.

        For more information about SLOs, see [ Service level objectives (SLOs)](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-ServiceLevelObjectives.html).

        When you perform a `CreateServiceLevelObjective` operation, Application Signals creates the _AWSServiceRoleForCloudWatchApplicationSignals_ service-linked role, if it doesn't already exist in your account. This service- linked role has the following permissions:

          * `xray:GetServiceGraph`

          * `logs:StartQuery`

          * `logs:GetQueryResults`

          * `cloudwatch:GetMetricData`

          * `cloudwatch:ListMetrics`

          * `tag:GetResources`

          * `autoscaling:DescribeAutoScalingGroups`
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/ServiceLevelObjectiveName'
                Description:
                  $ref: '#/components/schemas/ServiceLevelObjectiveDescription'
                SliConfig:
                  $ref: '#/components/schemas/ServiceLevelIndicatorConfig'
                RequestBasedSliConfig:
                  $ref: '#/components/schemas/RequestBasedServiceLevelIndicatorConfig'
                Goal:
                  $ref: '#/components/schemas/Goal'
                Tags:
                  $ref: '#/components/schemas/TagList'
                BurnRateConfigurations:
                  $ref: '#/components/schemas/BurnRateConfigurations'
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            This operation attempted to create a resource that already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '402':
          description: |-
            This request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /slo/{Id}:
    delete:
      operationId: DeleteServiceLevelObjective
      description: |-
        Deletes the specified service level objective.
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceLevelObjectiveId'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetServiceLevelObjective
      description: |-
        Returns information about one SLO created in the account.
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceLevelObjectiveId'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateServiceLevelObjective
      description: |-
        Updates an existing service level objective (SLO). If you omit parameters, the previous values of those parameters are retained.

        You cannot change from a period-based SLO to a request-based SLO, or change from a request-based SLO to a period-based SLO.
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceLevelObjectiveId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/ServiceLevelObjectiveDescription'
                SliConfig:
                  $ref: '#/components/schemas/ServiceLevelIndicatorConfig'
                RequestBasedSliConfig:
                  $ref: '#/components/schemas/RequestBasedServiceLevelIndicatorConfig'
                Goal:
                  $ref: '#/components/schemas/Goal'
                BurnRateConfigurations:
                  $ref: '#/components/schemas/BurnRateConfigurations'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /service:
    post:
      operationId: GetService
      description: |-
        Returns information about a service discovered by Application Signals.
      parameters:
      - name: StartTime
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: EndTime
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                KeyAttributes:
                  $ref: '#/components/schemas/Attributes'
      responses:
        '200': {}
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /service-dependencies:
    post:
      operationId: ListServiceDependencies
      description: |-
        Returns a list of service dependencies of the service that you specify. A dependency is an infrastructure component that an operation of this service connects with. Dependencies can include Amazon Web Services services, Amazon Web Services resources, and third-party services.
      parameters:
      - name: StartTime
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: EndTime
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListServiceDependenciesMaxResults'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                KeyAttributes:
                  $ref: '#/components/schemas/Attributes'
      responses:
        '200': {}
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /service-dependents:
    post:
      operationId: ListServiceDependents
      description: |-
        Returns the list of dependents that invoked the specified service during the provided time range. Dependents include other services, CloudWatch Synthetics canaries, and clients that are instrumented with CloudWatch RUM app monitors.
      parameters:
      - name: StartTime
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: EndTime
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListServiceDependentsMaxResults'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                KeyAttributes:
                  $ref: '#/components/schemas/Attributes'
      responses:
        '200': {}
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /slo/{Id}/exclusion-windows:
    get:
      operationId: ListServiceLevelObjectiveExclusionWindows
      description: |-
        Retrieves all exclusion windows configured for a specific SLO.
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceLevelObjectiveId'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListServiceLevelObjectiveExclusionWindowsMaxResults'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /slos:
    post:
      operationId: ListServiceLevelObjectives
      description: |-
        Returns a list of SLOs created in this account.
      parameters:
      - name: OperationName
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/OperationName'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListServiceLevelObjectivesMaxResults'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: IncludeLinkedAccounts
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      - name: SloOwnerAwsAccountId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AwsAccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                KeyAttributes:
                  $ref: '#/components/schemas/Attributes'
                DependencyConfig:
                  $ref: '#/components/schemas/DependencyConfig'
                MetricSourceTypes:
                  $ref: '#/components/schemas/MetricSourceTypes'
      responses:
        '200': {}
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /service-operations:
    post:
      operationId: ListServiceOperations
      description: |-
        Returns a list of the _operations_ of this service that have been discovered by Application Signals. Only the operations that were invoked during the specified time range are returned.
      parameters:
      - name: StartTime
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: EndTime
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListServiceOperationMaxResults'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                KeyAttributes:
                  $ref: '#/components/schemas/Attributes'
      responses:
        '200': {}
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /services:
    get:
      operationId: ListServices
      description: |-
        Returns a list of services that have been discovered by Application Signals. A service represents a minimum logical and transactional unit that completes a business function. Services are discovered through Application Signals instrumentation.
      parameters:
      - name: StartTime
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: EndTime
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListServicesMaxResults'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: IncludeLinkedAccounts
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      - name: AwsAccountId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AwsAccountId'
      responses:
        '200': {}
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags:
    get:
      operationId: ListTagsForResource
      description: |-
        Displays the tags associated with a CloudWatch resource. Tags can be assigned to service level objectives.
      parameters:
      - name: ResourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /start-discovery:
    post:
      operationId: StartDiscovery
      description: |-
        Enables this Amazon Web Services account to be able to use CloudWatch Application Signals by creating the _AWSServiceRoleForCloudWatchApplicationSignals_ service-linked role. This service- linked role has the following permissions:

          * `xray:GetServiceGraph`

          * `logs:StartQuery`

          * `logs:GetQueryResults`

          * `cloudwatch:GetMetricData`

          * `cloudwatch:ListMetrics`

          * `tag:GetResources`

          * `autoscaling:DescribeAutoScalingGroups`

        After completing this step, you still need to instrument your Java and Python applications to send data to Application Signals. For more information, see [ Enabling Application Signals](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Application-Signals-Enable.html).
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            You don't have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tag-resource:
    post:
      operationId: TagResource
      description: |-
        Assigns one or more tags (key-value pairs) to the specified CloudWatch resource, such as a service level objective.

        Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.

        Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.

        You can use the `TagResource` action with an alarm that already has tags. If you specify a new tag key for the alarm, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag.

        You can associate as many as 50 tags with a CloudWatch resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ResourceArn:
                  $ref: '#/components/schemas/AmazonResourceName'
                Tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            This request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /untag-resource:
    post:
      operationId: UntagResource
      description: |-
        Removes one or more tags from the specified resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ResourceArn:
                  $ref: '#/components/schemas/AmazonResourceName'
                TagKeys:
                  $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '404':
          description: |-
            Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was throttled because of quota limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ServiceErrorMessage'
      description: You don't have sufficient permissions to perform this action.
    AccountId:
      type: string
      minLength: 1
      maxLength: 255
    AmazonResourceName:
      type: string
      minLength: 1
      maxLength: 1024
    Attainment:
      type: number
      format: double
    AttainmentGoal:
      type: number
      format: double
    AttributeMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    AttributeMaps:
      type: array
      items:
        $ref: '#/components/schemas/AttributeMap'
    Attributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/KeyAttributeValue'
    AwsAccountId:
      type: string
      pattern: ^[0-9]{12}$
    BatchGetServiceLevelObjectiveBudgetReportInput:
      type: object
      properties:
        Timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that you want the report to be for. It is
            expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        SloIds:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveIds'
          description: An array containing the IDs of the service level objectives
            that you want to include in the report.
      required:
      - Timestamp
      - SloIds
    BatchGetServiceLevelObjectiveBudgetReportOutput:
      type: object
      properties:
        Timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the report is for. It is expressed as
            the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        Reports:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveBudgetReports'
          description: An array of structures, where each structure is one budget
            report.
        Errors:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveBudgetReportErrors'
          description: An array of structures, where each structure includes an error
            indicating that one of the requests in the array was not valid.
      required:
      - Timestamp
      - Reports
      - Errors
    BatchUpdateExclusionWindowsError:
      type: object
      properties:
        SloId:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveId'
          description: The SLO ID in the error.
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/ExclusionWindowErrorCode'
          description: The error code.
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/ExclusionWindowErrorMessage'
          description: The error message.
      required:
      - SloId
      - ErrorCode
      - ErrorMessage
      description: An array of structures, where each structure includes an error
        indicating that one of the requests in the array was not valid.
    BatchUpdateExclusionWindowsErrors:
      type: array
      items:
        $ref: '#/components/schemas/BatchUpdateExclusionWindowsError'
    BatchUpdateExclusionWindowsInput:
      type: object
      properties:
        SloIds:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveIds'
          description: The list of SLO IDs to add or remove exclusion windows from.
        AddExclusionWindows:
          allOf:
          - $ref: '#/components/schemas/ExclusionWindows'
          description: A list of exclusion windows to add to the specified SLOs. You
            can add up to 10 exclusion windows per SLO.
        RemoveExclusionWindows:
          allOf:
          - $ref: '#/components/schemas/ExclusionWindows'
          description: A list of exclusion windows to remove from the specified SLOs.
            The window configuration must match an existing exclusion window.
      required:
      - SloIds
    BatchUpdateExclusionWindowsOutput:
      type: object
      properties:
        SloIds:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveIds'
          description: The list of SLO IDs that were successfully processed.
        Errors:
          allOf:
          - $ref: '#/components/schemas/BatchUpdateExclusionWindowsErrors'
          description: A list of errors that occurred while processing the request.
      required:
      - SloIds
      - Errors
    BudgetRequestsRemaining:
      type: integer
    BudgetSecondsRemaining:
      type: integer
    BurnRateConfiguration:
      type: object
      properties:
        LookBackWindowMinutes:
          allOf:
          - $ref: '#/components/schemas/BurnRateLookBackWindowMinutes'
          description: The number of minutes to use as the look-back window.
      required:
      - LookBackWindowMinutes
      description: 'This object defines the length of the look-back window used to
        calculate one burn rate metric for this SLO. The burn rate measures how fast
        the service is consuming the error budget, relative to the attainment goal
        of the SLO. A burn rate of exactly 1 indicates that the SLO goal will be met
        exactly.


        For example, if you specify 60 as the number of minutes in the look-back window,
        the burn rate is calculated as the following:


        _burn rate = error rate over the look-back window / (100% - attainment goal
        percentage)_


        For more information about burn rates, see [Calculate burn rates](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-ServiceLevelObjectives.html#CloudWatch-ServiceLevelObjectives-burn).'
    BurnRateConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/BurnRateConfiguration'
    BurnRateLookBackWindowMinutes:
      type: integer
      minimum: 1
      maximum: 10080
    CalendarInterval:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The date and time when you want the first interval to start.
            Be sure to choose a time that configures the intervals the way that you
            want. For example, if you want weekly intervals starting on Mondays at
            6 a.m., be sure to specify a start time that is a Monday at 6 a.m.


            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            As soon as one calendar interval ends, another automatically begins.'
        DurationUnit:
          allOf:
          - $ref: '#/components/schemas/DurationUnit'
          description: Specifies the calendar interval unit.
        Duration:
          allOf:
          - $ref: '#/components/schemas/CalendarIntervalDuration'
          description: Specifies the duration of each calendar interval. For example,
            if `Duration` is `1` and `DurationUnit` is `MONTH`, each interval is one
            month, aligned with the calendar.
      required:
      - StartTime
      - DurationUnit
      - Duration
      description: If the interval for this service level objective is a calendar
        interval, this structure contains the interval specifications.
    CalendarIntervalDuration:
      type: integer
      minimum: 1
    ConflictException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: This operation attempted to create a resource that already exists.
    CreateServiceLevelObjectiveInput:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveName'
          description: A name for this SLO.
        Description:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveDescription'
          description: An optional description for this SLO.
        SliConfig:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorConfig'
          description: 'If this SLO is a period-based SLO, this structure defines
            the information about what performance metric this SLO will monitor.


            You can''t specify both `RequestBasedSliConfig` and `SliConfig` in the
            same operation.'
        RequestBasedSliConfig:
          allOf:
          - $ref: '#/components/schemas/RequestBasedServiceLevelIndicatorConfig'
          description: 'If this SLO is a request-based SLO, this structure defines
            the information about what performance metric this SLO will monitor.


            You can''t specify both `RequestBasedSliConfig` and `SliConfig` in the
            same operation.'
        Goal:
          allOf:
          - $ref: '#/components/schemas/Goal'
          description: This structure contains the attributes that determine the goal
            of the SLO.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: 'A list of key-value pairs to associate with the SLO. You can
            associate as many as 50 tags with an SLO. To be able to associate tags
            with the SLO when you create the SLO, you must have the `cloudwatch:TagResource`
            permission.


            Tags can help you organize and categorize your resources. You can also
            use them to scope user permissions by granting a user permission to access
            or change only resources with certain tag values.'
        BurnRateConfigurations:
          allOf:
          - $ref: '#/components/schemas/BurnRateConfigurations'
          description: Use this array to create _burn rates_ for this SLO. Each burn
            rate is a metric that indicates how fast the service is consuming the
            error budget, relative to the attainment goal of the SLO.
      required:
      - Name
    CreateServiceLevelObjectiveOutput:
      type: object
      properties:
        Slo:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjective'
          description: A structure that contains information about the SLO that you
            just created.
      required:
      - Slo
    DeleteServiceLevelObjectiveInput:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveId'
          description: The ARN or name of the service level objective to delete.
      required:
      - Id
    DeleteServiceLevelObjectiveOutput:
      type: object
      properties: {}
    DependencyConfig:
      type: object
      properties:
        DependencyKeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "This is a string-to-string map. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object this is.\n\n  *\
            \ `ResourceType` specifies the type of the resource. This field is used\
            \ only when the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Name` specifies the name of the object. This is used only if the\
            \ value of the `Type` field is `Service`, `RemoteService`, or `AWS::Service`.\n\
            \n  * `Identifier` identifies the resource objects of this resource. This\
            \ is used only if the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Environment` specifies the location where this object is hosted,\
            \ or what it belongs to."
        DependencyOperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: The name of the called operation in the dependency.
      required:
      - DependencyKeyAttributes
      - DependencyOperationName
      description: 'Identifies the dependency using the `DependencyKeyAttributes`
        and `DependencyOperationName`.


        When creating a service dependency SLO, you must specify the `KeyAttributes`
        of the service, and the `DependencyConfig` for the dependency. You can specify
        the `OperationName` of the service, from which it calls the dependency. Alternatively,
        you can exclude `OperationName` and the SLO will monitor all of the service''s
        operations that call the dependency.'
    Dimension:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DimensionName'
          description: The name of the dimension. Dimension names must contain only
            ASCII characters, must include at least one non-whitespace character,
            and cannot start with a colon (`:`). ASCII control characters are not
            supported as part of dimension names.
        Value:
          allOf:
          - $ref: '#/components/schemas/DimensionValue'
          description: The value of the dimension. Dimension values must contain only
            ASCII characters and must include at least one non-whitespace character.
            ASCII control characters are not supported as part of dimension values.
      required:
      - Name
      - Value
      description: 'A dimension is a name/value pair that is part of the identity
        of a metric. Because dimensions are part of the unique identifier for a metric,
        whenever you add a unique name/value pair to one of your metrics, you are
        creating a new variation of that metric. For example, many Amazon EC2 metrics
        publish `InstanceId` as a dimension name, and the actual instance ID as the
        value for that dimension.


        You can assign up to 30 dimensions to a metric.'
    DimensionName:
      type: string
      minLength: 1
      maxLength: 255
    DimensionValue:
      type: string
      minLength: 1
      maxLength: 1024
    Dimensions:
      type: array
      items:
        $ref: '#/components/schemas/Dimension'
    DurationUnit:
      type: string
      enum:
      - MINUTE
      - HOUR
      - DAY
      - MONTH
    EvaluationType:
      type: string
      enum:
      - PeriodBased
      - RequestBased
    ExclusionDuration:
      type: integer
      minimum: 1
    ExclusionReason:
      type: string
      minLength: 1
      maxLength: 1024
    ExclusionWindow:
      type: object
      properties:
        Window:
          allOf:
          - $ref: '#/components/schemas/Window'
          description: The SLO time window exclusion .
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The start of the SLO time window exclusion. Defaults to current
            time if not specified.
        RecurrenceRule:
          allOf:
          - $ref: '#/components/schemas/RecurrenceRule'
          description: The recurrence rule for the SLO time window exclusion. Supports
            both cron and rate expressions.
        Reason:
          allOf:
          - $ref: '#/components/schemas/ExclusionReason'
          description: A description explaining why this time period should be excluded
            from SLO calculations.
      required:
      - Window
      description: The core SLO time window exclusion object that includes Window,
        StartTime, RecurrenceRule, and Reason.
    ExclusionWindowErrorCode:
      type: string
    ExclusionWindowErrorMessage:
      type: string
    ExclusionWindows:
      type: array
      items:
        $ref: '#/components/schemas/ExclusionWindow'
    Expression:
      type: string
      minLength: 1
      maxLength: 1024
    FaultDescription:
      type: string
    GetServiceInput:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time period to retrieve information about.
            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            Your requested start time will be rounded to the nearest hour.'
        EndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time period to retrieve information about.
            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            Your requested start time will be rounded to the nearest hour.'
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "Use this field to specify which service you want to retrieve\
            \ information for. You must specify at least the `Type`, `Name`, and `Environment`\
            \ attributes.\n\nThis is a string-to-string map. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object this is.\n\n  *\
            \ `ResourceType` specifies the type of the resource. This field is used\
            \ only when the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Name` specifies the name of the object. This is used only if the\
            \ value of the `Type` field is `Service`, `RemoteService`, or `AWS::Service`.\n\
            \n  * `Identifier` identifies the resource objects of this resource. This\
            \ is used only if the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Environment` specifies the location where this object is hosted,\
            \ or what it belongs to."
      required:
      - StartTime
      - EndTime
      - KeyAttributes
    GetServiceLevelObjectiveInput:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveId'
          description: The ARN or name of the SLO that you want to retrieve information
            about. You can find the ARNs of SLOs by using the [ListServiceLevelObjectives](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListServiceLevelObjectives.html)
            operation.
      required:
      - Id
    GetServiceLevelObjectiveOutput:
      type: object
      properties:
        Slo:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjective'
          description: A structure containing the information about the SLO.
      required:
      - Slo
    GetServiceOutput:
      type: object
      properties:
        Service:
          allOf:
          - $ref: '#/components/schemas/Service'
          description: A structure containing information about the service.
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start time of the data included in the response. In a
            raw HTTP Query API, it is formatted as be epoch time in seconds. For example:
            `1698778057`.


            This displays the time that Application Signals used for the request.
            It might not match your request exactly, because it was rounded to the
            nearest hour.'
        EndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end time of the data included in the response. In a raw
            HTTP Query API, it is formatted as be epoch time in seconds. For example:
            `1698778057`.


            This displays the time that Application Signals used for the request.
            It might not match your request exactly, because it was rounded to the
            nearest hour.'
        LogGroupReferences:
          allOf:
          - $ref: '#/components/schemas/LogGroupReferences'
          description: "An array of string-to-string maps that each contain information\
            \ about one log group associated with this service. Each string-to-string\
            \ map includes the following fields:\n\n  * `\"Type\": \"AWS::Resource\"\
            `\n\n  * `\"ResourceType\": \"AWS::Logs::LogGroup\"`\n\n  * `\"Identifier\"\
            : \"_name-of-log-group_ \"`"
      required:
      - Service
      - StartTime
      - EndTime
    Goal:
      type: object
      properties:
        Interval:
          allOf:
          - $ref: '#/components/schemas/Interval'
          description: 'The time period used to evaluate the SLO. It can be either
            a calendar interval or rolling interval.


            If you omit this parameter, a rolling interval of 7 days is used.'
        AttainmentGoal:
          allOf:
          - $ref: '#/components/schemas/AttainmentGoal'
          description: 'The threshold that determines if the goal is being met.


            If this is a period-based SLO, the attainment goal is the percentage of
            good periods that meet the threshold requirements to the total periods
            within the interval. For example, an attainment goal of 99.9% means that
            within your interval, you are targeting 99.9% of the periods to be in
            healthy state.


            If this is a request-based SLO, the attainment goal is the percentage
            of requests that must be successful to meet the attainment goal.


            If you omit this parameter, 99 is used to represent 99% as the attainment
            goal.'
        WarningThreshold:
          allOf:
          - $ref: '#/components/schemas/WarningThreshold'
          description: The percentage of remaining budget over total budget that you
            want to get warnings for. If you omit this parameter, the default of 50.0
            is used.
      description: This structure contains the attributes that determine the goal
        of an SLO. This includes the time period for evaluation and the attainment
        threshold.
    Interval:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/RollingInterval'
        description: |-
          If the interval is a rolling interval, this structure contains the interval specifications.
      - allOf:
        - $ref: '#/components/schemas/CalendarInterval'
        description: |-
          If the interval is a calendar interval, this structure contains the interval specifications.
      description: |-
        The time period used to evaluate the SLO. It can be either a calendar interval or rolling interval.
    KeyAttributeName:
      type: string
      pattern: ^[a-zA-Z]{1,50}$
    KeyAttributeValue:
      type: string
      pattern: ^[ -~]*[!-~]+[ -~]*$
      minLength: 1
      maxLength: 1024
    ListServiceDependenciesInput:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time period to retrieve information about.
            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            Your requested start time will be rounded to the nearest hour.'
        EndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time period to retrieve information about.
            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            Your requested end time will be rounded to the nearest hour.'
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "Use this field to specify which service you want to retrieve\
            \ information for. You must specify at least the `Type`, `Name`, and `Environment`\
            \ attributes.\n\nThis is a string-to-string map. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object this is.\n\n  *\
            \ `ResourceType` specifies the type of the resource. This field is used\
            \ only when the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Name` specifies the name of the object. This is used only if the\
            \ value of the `Type` field is `Service`, `RemoteService`, or `AWS::Service`.\n\
            \n  * `Identifier` identifies the resource objects of this resource. This\
            \ is used only if the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Environment` specifies the location where this object is hosted,\
            \ or what it belongs to."
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListServiceDependenciesMaxResults'
          description: The maximum number of results to return in one operation. If
            you omit this parameter, the default of 50 is used.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value, if it was returned by the previous operation,
            to get the next set of service dependencies.
      required:
      - StartTime
      - EndTime
      - KeyAttributes
    ListServiceDependenciesMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    ListServiceDependenciesOutput:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time period that the returned information
            applies to. When used in a raw HTTP Query API, it is formatted as be epoch
            time in seconds. For example: `1698778057`


            This displays the time that Application Signals used for the request.
            It might not match your request exactly, because it was rounded to the
            nearest hour.'
        EndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time period that the returned information applies
            to. When used in a raw HTTP Query API, it is formatted as be epoch time
            in seconds. For example: `1698778057`


            This displays the time that Application Signals used for the request.
            It might not match your request exactly, because it was rounded to the
            nearest hour.'
        ServiceDependencies:
          allOf:
          - $ref: '#/components/schemas/ServiceDependencies'
          description: An array, where each object in the array contains information
            about one of the dependencies of this service.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value in your next use of this API to get next
            set of service dependencies.
      required:
      - StartTime
      - EndTime
      - ServiceDependencies
    ListServiceDependentsInput:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time period to retrieve information about.
            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            Your requested start time will be rounded to the nearest hour.'
        EndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time period to retrieve information about.
            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            Your requested start time will be rounded to the nearest hour.'
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "Use this field to specify which service you want to retrieve\
            \ information for. You must specify at least the `Type`, `Name`, and `Environment`\
            \ attributes.\n\nThis is a string-to-string map. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object this is.\n\n  *\
            \ `ResourceType` specifies the type of the resource. This field is used\
            \ only when the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Name` specifies the name of the object. This is used only if the\
            \ value of the `Type` field is `Service`, `RemoteService`, or `AWS::Service`.\n\
            \n  * `Identifier` identifies the resource objects of this resource. This\
            \ is used only if the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Environment` specifies the location where this object is hosted,\
            \ or what it belongs to."
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListServiceDependentsMaxResults'
          description: The maximum number of results to return in one operation. If
            you omit this parameter, the default of 50 is used.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value, if it was returned by the previous operation,
            to get the next set of service dependents.
      required:
      - StartTime
      - EndTime
      - KeyAttributes
    ListServiceDependentsMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    ListServiceDependentsOutput:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time period that the returned information
            applies to. When used in a raw HTTP Query API, it is formatted as be epoch
            time in seconds. For example: `1698778057`


            This displays the time that Application Signals used for the request.
            It might not match your request exactly, because it was rounded to the
            nearest hour.'
        EndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time period that the returned information applies
            to. When used in a raw HTTP Query API, it is formatted as be epoch time
            in seconds. For example: `1698778057`


            This displays the time that Application Signals used for the request.
            It might not match your request exactly, because it was rounded to the
            nearest hour.'
        ServiceDependents:
          allOf:
          - $ref: '#/components/schemas/ServiceDependents'
          description: An array, where each object in the array contains information
            about one of the dependents of this service.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value in your next use of this API to get next
            set of service dependents.
      required:
      - StartTime
      - EndTime
      - ServiceDependents
    ListServiceLevelObjectiveExclusionWindowsInput:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveId'
          description: The ID of the SLO to list exclusion windows for.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListServiceLevelObjectiveExclusionWindowsMaxResults'
          description: The maximum number of results to return in one operation. If
            you omit this parameter, the default of 50 is used.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value, if it was returned by the previous operation,
            to get the next set of service level objectives.
      required:
      - Id
    ListServiceLevelObjectiveExclusionWindowsMaxResults:
      type: integer
      minimum: 1
      maximum: 10
    ListServiceLevelObjectiveExclusionWindowsOutput:
      type: object
      properties:
        ExclusionWindows:
          allOf:
          - $ref: '#/components/schemas/ExclusionWindows'
          description: A list of exclusion windows configured for the SLO.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value, if it was returned by the previous operation,
            to get the next set of service level objectives.
      required:
      - ExclusionWindows
    ListServiceLevelObjectivesInput:
      type: object
      properties:
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "You can use this optional field to specify which services\
            \ you want to retrieve SLO information for.\n\nThis is a string-to-string\
            \ map. It can include the following fields.\n\n  * `Type` designates the\
            \ type of object this is.\n\n  * `ResourceType` specifies the type of\
            \ the resource. This field is used only when the value of the `Type` field\
            \ is `Resource` or `AWS::Resource`.\n\n  * `Name` specifies the name of\
            \ the object. This is used only if the value of the `Type` field is `Service`,\
            \ `RemoteService`, or `AWS::Service`.\n\n  * `Identifier` identifies the\
            \ resource objects of this resource. This is used only if the value of\
            \ the `Type` field is `Resource` or `AWS::Resource`.\n\n  * `Environment`\
            \ specifies the location where this object is hosted, or what it belongs\
            \ to."
        OperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: The name of the operation that this SLO is associated with.
        DependencyConfig:
          allOf:
          - $ref: '#/components/schemas/DependencyConfig'
          description: Identifies the dependency using the `DependencyKeyAttributes`
            and `DependencyOperationName`.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListServiceLevelObjectivesMaxResults'
          description: The maximum number of results to return in one operation. If
            you omit this parameter, the default of 50 is used.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value, if it was returned by the previous operation,
            to get the next set of service level objectives.
        MetricSourceTypes:
          allOf:
          - $ref: '#/components/schemas/MetricSourceTypes'
          description: "Use this optional field to only include SLOs with the specified\
            \ metric source types in the output. Supported types are:\n\n  * Service\
            \ operation\n\n  * Service dependency\n\n  * CloudWatch metric"
        IncludeLinkedAccounts:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'If you are using this operation in a monitoring account, specify
            `true` to include SLO from source accounts in the returned data.


            When you are monitoring an account, you can use Amazon Web Services account
            ID in `KeyAttribute` filter for service source account and `SloOwnerawsaccountID`
            for SLO source account with `IncludeLinkedAccounts` to filter the returned
            data to only a single source account.'
        SloOwnerAwsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: SLO's Amazon Web Services account ID.
    ListServiceLevelObjectivesMaxResults:
      type: integer
      minimum: 1
      maximum: 50
    ListServiceLevelObjectivesOutput:
      type: object
      properties:
        SloSummaries:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveSummaries'
          description: An array of structures, where each structure contains information
            about one SLO.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value in your next use of this API to get next
            set of service level objectives.
    ListServiceOperationMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    ListServiceOperationsInput:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time period to retrieve information about.
            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            Your requested start time will be rounded to the nearest hour.'
        EndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time period to retrieve information about.
            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            Your requested end time will be rounded to the nearest hour.'
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "Use this field to specify which service you want to retrieve\
            \ information for. You must specify at least the `Type`, `Name`, and `Environment`\
            \ attributes.\n\nThis is a string-to-string map. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object this is.\n\n  *\
            \ `ResourceType` specifies the type of the resource. This field is used\
            \ only when the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Name` specifies the name of the object. This is used only if the\
            \ value of the `Type` field is `Service`, `RemoteService`, or `AWS::Service`.\n\
            \n  * `Identifier` identifies the resource objects of this resource. This\
            \ is used only if the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Environment` specifies the location where this object is hosted,\
            \ or what it belongs to."
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListServiceOperationMaxResults'
          description: The maximum number of results to return in one operation. If
            you omit this parameter, the default of 50 is used.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value, if it was returned by the previous operation,
            to get the next set of service operations.
      required:
      - StartTime
      - EndTime
      - KeyAttributes
    ListServiceOperationsOutput:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time period that the returned information
            applies to. When used in a raw HTTP Query API, it is formatted as be epoch
            time in seconds. For example: `1698778057`


            This displays the time that Application Signals used for the request.
            It might not match your request exactly, because it was rounded to the
            nearest hour.'
        EndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time period that the returned information applies
            to. When used in a raw HTTP Query API, it is formatted as be epoch time
            in seconds. For example: `1698778057`


            This displays the time that Application Signals used for the request.
            It might not match your request exactly, because it was rounded to the
            nearest hour.'
        ServiceOperations:
          allOf:
          - $ref: '#/components/schemas/ServiceOperations'
          description: An array of structures that each contain information about
            one operation of this service.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value in your next use of this API to get next
            set of service operations.
      required:
      - StartTime
      - EndTime
      - ServiceOperations
    ListServicesInput:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time period to retrieve information about.
            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            Your requested start time will be rounded to the nearest hour.'
        EndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time period to retrieve information about.
            When used in a raw HTTP Query API, it is formatted as be epoch time in
            seconds. For example: `1698778057`


            Your requested start time will be rounded to the nearest hour.'
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListServicesMaxResults'
          description: The maximum number of results to return in one operation. If
            you omit this parameter, the default of 50 is used.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value, if it was returned by the previous operation,
            to get the next set of services.
        IncludeLinkedAccounts:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If you are using this operation in a monitoring account, specify
            `true` to include services from source accounts in the returned data.
        AwsAccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: Amazon Web Services Account ID.
      required:
      - StartTime
      - EndTime
    ListServicesMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    ListServicesOutput:
      type: object
      properties:
        StartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the time period that the returned information
            applies to. When used in a raw HTTP Query API, it is formatted as be epoch
            time in seconds. For example: `1698778057`


            This displays the time that Application Signals used for the request.
            It might not match your request exactly, because it was rounded to the
            nearest hour.'
        EndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the time period that the returned information applies
            to. When used in a raw HTTP Query API, it is formatted as be epoch time
            in seconds. For example: `1698778057`


            This displays the time that Application Signals used for the request.
            It might not match your request exactly, because it was rounded to the
            nearest hour.'
        ServiceSummaries:
          allOf:
          - $ref: '#/components/schemas/ServiceSummaries'
          description: An array of structures, where each structure contains some
            information about a service. To get complete information about a service,
            use [GetService](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetService.html).
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Include this value in your next use of this API to get next
            set of services.
      required:
      - StartTime
      - EndTime
      - ServiceSummaries
    ListTagsForResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: 'The Amazon Resource Name (ARN) of the CloudWatch resource
            that you want to view tags for.


            The ARN format of an Application Signals SLO is `arn:aws:cloudwatch:_Region_
            :_account-id_ :slo:_slo-name_ `


            For more information about ARN format, see [ Resource Types Defined by
            Amazon CloudWatch](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies)
            in the _Amazon Web Services General Reference_.'
      required:
      - ResourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: The list of tag keys and values associated with the resource
            you specified.
    LogGroupReferences:
      type: array
      items:
        $ref: '#/components/schemas/Attributes'
    Metric:
      type: object
      properties:
        Namespace:
          allOf:
          - $ref: '#/components/schemas/Namespace'
          description: The namespace of the metric. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
        MetricName:
          allOf:
          - $ref: '#/components/schemas/MetricName'
          description: The name of the metric to use.
        Dimensions:
          allOf:
          - $ref: '#/components/schemas/Dimensions'
          description: An array of one or more dimensions to use to define the metric
            that you want to use. For more information, see [Dimensions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension).
      description: This structure defines the metric used for a service level indicator,
        including the metric name, namespace, and dimensions
    MetricDataQueries:
      type: array
      items:
        $ref: '#/components/schemas/MetricDataQuery'
    MetricDataQuery:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/MetricId'
          description: A short name used to tie this object to the results in the
            response. This `Id` must be unique within a `MetricDataQueries` array.
            If you are performing math expressions on this set of data, this name
            represents that data and can serve as a variable in the metric math expression.
            The valid characters are letters, numbers, and underscore. The first character
            must be a lowercase letter.
        MetricStat:
          allOf:
          - $ref: '#/components/schemas/MetricStat'
          description: 'A metric to be used directly for the SLO, or to be used in
            the math expression that will be used for the SLO.


            Within one `MetricDataQuery` object, you must specify either `Expression`
            or `MetricStat` but not both.'
        Expression:
          allOf:
          - $ref: '#/components/schemas/MetricExpression'
          description: 'This field can contain a metric math expression to be performed
            on the other metrics that you are retrieving within this `MetricDataQueries`
            structure.


            A math expression can use the `Id` of the other metrics or queries to
            refer to those metrics, and can also use the `Id` of other expressions
            to use the result of those expressions. For more information about metric
            math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax)
            in the _Amazon CloudWatch User Guide_.


            Within each `MetricDataQuery` object, you must specify either `Expression`
            or `MetricStat` but not both.'
        Label:
          allOf:
          - $ref: '#/components/schemas/MetricLabel'
          description: 'A human-readable label for this metric or expression. This
            is especially useful if this is an expression, so that you know what the
            value represents. If the metric or expression is shown in a CloudWatch
            dashboard widget, the label is shown. If `Label` is omitted, CloudWatch
            generates a default.


            You can put dynamic expressions into a label, so that it is more descriptive.
            For more information, see [Using Dynamic Labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html).'
        ReturnData:
          allOf:
          - $ref: '#/components/schemas/ReturnData'
          description: Use this only if you are using a metric math expression for
            the SLO. Specify `true` for `ReturnData` for only the one expression result
            to use as the alarm. For all other metrics and expressions in the same
            `CreateServiceLevelObjective` operation, specify `ReturnData` as `false`.
        Period:
          allOf:
          - $ref: '#/components/schemas/Period'
          description: "The granularity, in seconds, of the returned data points for\
            \ this metric. For metrics with regular resolution, a period can be as\
            \ short as one minute (60 seconds) and must be a multiple of 60. For high-resolution\
            \ metrics that are collected at intervals of less than one minute, the\
            \ period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution\
            \ metrics are those metrics stored by a `PutMetricData` call that includes\
            \ a `StorageResolution` of 1 second.\n\nIf the `StartTime` parameter specifies\
            \ a time stamp that is greater than 3 hours ago, you must specify the\
            \ period as follows or no data points in that time range is returned:\n\
            \n  * Start time between 3 hours and 15 days ago - Use a multiple of 60\
            \ seconds (1 minute).\n\n  * Start time between 15 and 63 days ago - Use\
            \ a multiple of 300 seconds (5 minutes).\n\n  * Start time greater than\
            \ 63 days ago - Use a multiple of 3600 seconds (1 hour)."
        AccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The ID of the account where this metric is located. If you
            are performing this operation in a monitoring account, use this to specify
            which source account to retrieve this metric from.
      required:
      - Id
      description: 'Use this structure to define a metric or metric math expression
        that you want to use as for a service level objective.


        Each `MetricDataQuery` in the `MetricDataQueries` array specifies either a
        metric to retrieve, or a metric math expression to be performed on retrieved
        metrics. A single `MetricDataQueries` array can include as many as 20 `MetricDataQuery`
        structures in the array. The 20 structures can include as many as 10 structures
        that contain a `MetricStat` parameter to retrieve a metric, and as many as
        10 structures that contain the `Expression` parameter to perform a math expression.
        Of those `Expression` structures, exactly one must have true as the value
        for `ReturnData`. The result of this expression used for the SLO.


        For more information about metric math expressions, see [CloudWatchUse metric
        math](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html).


        Within each `MetricDataQuery` object, you must specify either `Expression`
        or `MetricStat` but not both.'
    MetricExpression:
      type: string
      minLength: 1
      maxLength: 2048
    MetricId:
      type: string
      minLength: 1
      maxLength: 255
    MetricLabel:
      type: string
    MetricName:
      type: string
      minLength: 1
      maxLength: 255
    MetricReference:
      type: object
      properties:
        Namespace:
          allOf:
          - $ref: '#/components/schemas/Namespace'
          description: The namespace of the metric. For more information, see [CloudWatchNamespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
        MetricType:
          allOf:
          - $ref: '#/components/schemas/MetricType'
          description: Used to display the appropriate statistics in the CloudWatch
            console.
        Dimensions:
          allOf:
          - $ref: '#/components/schemas/Dimensions'
          description: An array of one or more dimensions that further define the
            metric. For more information, see [CloudWatchDimensions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension).
        MetricName:
          allOf:
          - $ref: '#/components/schemas/MetricName'
          description: The name of the metric.
        AccountId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: Amazon Web Services account ID.
      required:
      - Namespace
      - MetricType
      - MetricName
      description: This structure contains information about one CloudWatch metric
        associated with this entity discovered by Application Signals.
    MetricReferences:
      type: array
      items:
        $ref: '#/components/schemas/MetricReference'
    MetricSourceType:
      type: string
      enum:
      - ServiceOperation
      - CloudWatchMetric
      - ServiceDependency
    MetricSourceTypes:
      type: array
      items:
        $ref: '#/components/schemas/MetricSourceType'
    MetricStat:
      type: object
      properties:
        Metric:
          allOf:
          - $ref: '#/components/schemas/Metric'
          description: The metric to use as the service level indicator, including
            the metric name, namespace, and dimensions.
        Period:
          allOf:
          - $ref: '#/components/schemas/Period'
          description: The granularity, in seconds, to be used for the metric. For
            metrics with regular resolution, a period can be as short as one minute
            (60 seconds) and must be a multiple of 60. For high-resolution metrics
            that are collected at intervals of less than one minute, the period can
            be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are
            those metrics stored by a `PutMetricData` call that includes a `StorageResolution`
            of 1 second.
        Stat:
          allOf:
          - $ref: '#/components/schemas/Stat'
          description: The statistic to use for comparison to the threshold. It can
            be any CloudWatch statistic or extended statistic. For more information
            about statistics, see [CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html).
        Unit:
          allOf:
          - $ref: '#/components/schemas/StandardUnit'
          description: If you omit `Unit` then all data that was collected with any
            unit is returned, along with the corresponding units that were specified
            when the data was reported to CloudWatch. If you specify a unit, the operation
            returns only data that was collected with that unit specified. If you
            specify a unit that does not match the data collected, the results of
            the operation are null. CloudWatch does not perform unit conversions.
      required:
      - Metric
      - Period
      - Stat
      description: This structure defines the metric to be used as the service level
        indicator, along with the statistics, period, and unit.
    MetricType:
      type: string
      pattern: ^[A-Za-z0-9 -]+$
    MonitoredRequestCountMetricDataQueries:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/MetricDataQueries'
        description: |-
          If you want to count "good requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "good requests" in this structure.
      - allOf:
        - $ref: '#/components/schemas/MetricDataQueries'
        description: |-
          If you want to count "bad requests" to determine the percentage of successful requests for this request-based SLO, specify the metric to use as "bad requests" in this structure.
      description: |-
        This structure defines the metric that is used as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in `TotalRequestCountMetric` is divided by the number found for `MonitoredRequestCountMetric` to determine the percentage of successful requests that this SLO tracks.
    Namespace:
      type: string
      pattern: '[^:].*'
      minLength: 1
      maxLength: 255
    NextToken:
      type: string
    OperationName:
      type: string
      minLength: 1
      maxLength: 255
    Period:
      type: integer
      minimum: 1
    RecurrenceRule:
      type: object
      properties:
        Expression:
          allOf:
          - $ref: '#/components/schemas/Expression'
          description: A cron or rate expression that specifies the schedule for the
            exclusion window.
      required:
      - Expression
      description: The recurrence rule for the SLO time window exclusion .
    RequestBasedServiceLevelIndicator:
      type: object
      properties:
        RequestBasedSliMetric:
          allOf:
          - $ref: '#/components/schemas/RequestBasedServiceLevelIndicatorMetric'
          description: A structure that contains information about the metric that
            the SLO monitors.
        MetricThreshold:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorMetricThreshold'
          description: This value is the threshold that the observed metric values
            of the SLI metric are compared to.
        ComparisonOperator:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorComparisonOperator'
          description: The arithmetic operation used when comparing the specified
            metric to the threshold.
      required:
      - RequestBasedSliMetric
      description: This structure contains information about the performance metric
        that a request-based SLO monitors.
    RequestBasedServiceLevelIndicatorConfig:
      type: object
      properties:
        RequestBasedSliMetricConfig:
          allOf:
          - $ref: '#/components/schemas/RequestBasedServiceLevelIndicatorMetricConfig'
          description: Use this structure to specify the metric to be used for the
            SLO.
        MetricThreshold:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorMetricThreshold'
          description: The value that the SLI metric is compared to. This parameter
            is required if this SLO is tracking the `Latency` metric.
        ComparisonOperator:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorComparisonOperator'
          description: The arithmetic operation to use when comparing the specified
            metric to the threshold. This parameter is required if this SLO is tracking
            the `Latency` metric.
      required:
      - RequestBasedSliMetricConfig
      description: This structure specifies the information about the service and
        the performance metric that a request-based SLO is to monitor.
    RequestBasedServiceLevelIndicatorMetric:
      type: object
      properties:
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "This is a string-to-string map that contains information about\
            \ the type of object that this SLO is related to. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object that this SLO is\
            \ related to.\n\n  * `ResourceType` specifies the type of the resource.\
            \ This field is used only when the value of the `Type` field is `Resource`\
            \ or `AWS::Resource`.\n\n  * `Name` specifies the name of the object.\
            \ This is used only if the value of the `Type` field is `Service`, `RemoteService`,\
            \ or `AWS::Service`.\n\n  * `Identifier` identifies the resource objects\
            \ of this resource. This is used only if the value of the `Type` field\
            \ is `Resource` or `AWS::Resource`.\n\n  * `Environment` specifies the\
            \ location where this object is hosted, or what it belongs to."
        OperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: If the SLO monitors a specific operation of the service, this
            field displays that operation name.
        MetricType:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorMetricType'
          description: If the SLO monitors either the `LATENCY` or `AVAILABILITY`
            metric that Application Signals collects, this field displays which of
            those metrics is used.
        TotalRequestCountMetric:
          allOf:
          - $ref: '#/components/schemas/MetricDataQueries'
          description: This structure defines the metric that is used as the "total
            requests" number for a request-based SLO. The number observed for this
            metric is divided by the number of "good requests" or "bad requests" that
            is observed for the metric defined in `MonitoredRequestCountMetric`.
        MonitoredRequestCountMetric:
          allOf:
          - $ref: '#/components/schemas/MonitoredRequestCountMetricDataQueries'
          description: This structure defines the metric that is used as the "good
            request" or "bad request" value for a request-based SLO. This value observed
            for the metric defined in `TotalRequestCountMetric` is divided by the
            number found for `MonitoredRequestCountMetric` to determine the percentage
            of successful requests that this SLO tracks.
        DependencyConfig:
          allOf:
          - $ref: '#/components/schemas/DependencyConfig'
          description: Identifies the dependency using the `DependencyKeyAttributes`
            and `DependencyOperationName`.
      required:
      - TotalRequestCountMetric
      - MonitoredRequestCountMetric
      description: This structure contains the information about the metric that is
        used for a request-based SLO.
    RequestBasedServiceLevelIndicatorMetricConfig:
      type: object
      properties:
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "If this SLO is related to a metric collected by Application\
            \ Signals, you must use this field to specify which service the SLO metric\
            \ is related to. To do so, you must specify at least the `Type`, `Name`,\
            \ and `Environment` attributes.\n\nThis is a string-to-string map. It\
            \ can include the following fields.\n\n  * `Type` designates the type\
            \ of object this is.\n\n  * `ResourceType` specifies the type of the resource.\
            \ This field is used only when the value of the `Type` field is `Resource`\
            \ or `AWS::Resource`.\n\n  * `Name` specifies the name of the object.\
            \ This is used only if the value of the `Type` field is `Service`, `RemoteService`,\
            \ or `AWS::Service`.\n\n  * `Identifier` identifies the resource objects\
            \ of this resource. This is used only if the value of the `Type` field\
            \ is `Resource` or `AWS::Resource`.\n\n  * `Environment` specifies the\
            \ location where this object is hosted, or what it belongs to."
        OperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: If the SLO is to monitor a specific operation of the service,
            use this field to specify the name of that operation.
        MetricType:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorMetricType'
          description: If the SLO is to monitor either the `LATENCY` or `AVAILABILITY`
            metric that Application Signals collects, use this field to specify which
            of those metrics is used.
        TotalRequestCountMetric:
          allOf:
          - $ref: '#/components/schemas/MetricDataQueries'
          description: Use this structure to define the metric that you want to use
            as the "total requests" number for a request-based SLO. This result will
            be divided by the "good request" or "bad request" value defined in `MonitoredRequestCountMetric`.
        MonitoredRequestCountMetric:
          allOf:
          - $ref: '#/components/schemas/MonitoredRequestCountMetricDataQueries'
          description: Use this structure to define the metric that you want to use
            as the "good request" or "bad request" value for a request-based SLO.
            This value observed for the metric defined in `TotalRequestCountMetric`
            will be divided by the number found for `MonitoredRequestCountMetric`
            to determine the percentage of successful requests that this SLO tracks.
        DependencyConfig:
          allOf:
          - $ref: '#/components/schemas/DependencyConfig'
          description: Identifies the dependency using the `DependencyKeyAttributes`
            and `DependencyOperationName`.
      description: Use this structure to specify the information for the metric that
        a period-based SLO will monitor.
    ResourceId:
      type: string
    ResourceNotFoundException:
      type: object
      properties:
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The resource type is not valid.
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: Can't find the resource id.
        Message:
          $ref: '#/components/schemas/FaultDescription'
      required:
      - ResourceType
      - ResourceId
      - Message
      description: Resource not found.
    ResourceType:
      type: string
    ReturnData:
      type: boolean
    RollingInterval:
      type: object
      properties:
        DurationUnit:
          allOf:
          - $ref: '#/components/schemas/DurationUnit'
          description: Specifies the rolling interval unit.
        Duration:
          allOf:
          - $ref: '#/components/schemas/RollingIntervalDuration'
          description: Specifies the duration of each rolling interval. For example,
            if `Duration` is `7` and `DurationUnit` is `DAY`, each rolling interval
            is seven days.
      required:
      - DurationUnit
      - Duration
      description: If the interval for this SLO is a rolling interval, this structure
        contains the interval specifications.
    RollingIntervalDuration:
      type: integer
      minimum: 1
    SLIPeriodSeconds:
      type: integer
      minimum: 60
      maximum: 900
    Service:
      type: object
      properties:
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "This is a string-to-string map. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object this is.\n\n  *\
            \ `ResourceType` specifies the type of the resource. This field is used\
            \ only when the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Name` specifies the name of the object. This is used only if the\
            \ value of the `Type` field is `Service`, `RemoteService`, or `AWS::Service`.\n\
            \n  * `Identifier` identifies the resource objects of this resource. This\
            \ is used only if the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Environment` specifies the location where this object is hosted,\
            \ or what it belongs to."
        AttributeMaps:
          allOf:
          - $ref: '#/components/schemas/AttributeMaps'
          description: "This structure contains one or more string-to-string maps\
            \ that help identify this service. It can include _platform attributes_\
            \ , _application attributes_ , and _telemetry attributes_.\n\nPlatform\
            \ attributes contain information the service's platform.\n\n  * `PlatformType`\
            \ defines the hosted-in platform.\n\n  * `EKS.Cluster` is the name of\
            \ the Amazon EKS cluster.\n\n  * `K8s.Cluster` is the name of the self-hosted\
            \ Kubernetes cluster.\n\n  * `K8s.Namespace` is the name of the Kubernetes\
            \ namespace in either Amazon EKS or Kubernetes clusters.\n\n  * `K8s.Workload`\
            \ is the name of the Kubernetes workload in either Amazon EKS or Kubernetes\
            \ clusters.\n\n  * `K8s.Node` is the name of the Kubernetes node in either\
            \ Amazon EKS or Kubernetes clusters.\n\n  * `K8s.Pod` is the name of the\
            \ Kubernetes pod in either Amazon EKS or Kubernetes clusters.\n\n  * `EC2.AutoScalingGroup`\
            \ is the name of the Amazon EC2 Auto Scaling group.\n\n  * `EC2.InstanceId`\
            \ is the ID of the Amazon EC2 instance.\n\n  * `Host` is the name of the\
            \ host, for all platform types.\n\nApplication attributes contain information\
            \ about the application.\n\n  * `AWS.Application` is the application's\
            \ name in Amazon Web Services Service Catalog AppRegistry.\n\n  * `AWS.Application.ARN`\
            \ is the application's ARN in Amazon Web Services Service Catalog AppRegistry.\n\
            \nTelemetry attributes contain telemetry information.\n\n  * `Telemetry.SDK`\
            \ is the fingerprint of the OpenTelemetry SDK version for instrumented\
            \ services.\n\n  * `Telemetry.Agent` is the fingerprint of the agent used\
            \ to collect and send telemetry data.\n\n  * `Telemetry.Source` Specifies\
            \ the point of application where the telemetry was collected or specifies\
            \ what was used for the source of telemetry data."
        MetricReferences:
          allOf:
          - $ref: '#/components/schemas/MetricReferences'
          description: An array of structures that each contain information about
            one metric associated with this service.
        LogGroupReferences:
          allOf:
          - $ref: '#/components/schemas/LogGroupReferences'
          description: "An array of string-to-string maps that each contain information\
            \ about one log group associated with this service. Each string-to-string\
            \ map includes the following fields:\n\n  * `\"Type\": \"AWS::Resource\"\
            `\n\n  * `\"ResourceType\": \"AWS::Logs::LogGroup\"`\n\n  * `\"Identifier\"\
            : \"_name-of-log-group_ \"`"
      required:
      - KeyAttributes
      - MetricReferences
      description: This structure contains information about one of your services
        that was discovered by Application Signals.
    ServiceDependencies:
      type: array
      items:
        $ref: '#/components/schemas/ServiceDependency'
    ServiceDependency:
      type: object
      properties:
        OperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: The name of the operation in this service that calls the dependency.
        DependencyKeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "This is a string-to-string map. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object this is.\n\n  *\
            \ `ResourceType` specifies the type of the resource. This field is used\
            \ only when the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Name` specifies the name of the object. This is used only if the\
            \ value of the `Type` field is `Service`, `RemoteService`, or `AWS::Service`.\n\
            \n  * `Identifier` identifies the resource objects of this resource. This\
            \ is used only if the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Environment` specifies the location where this object is hosted,\
            \ or what it belongs to."
        DependencyOperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: The name of the called operation in the dependency.
        MetricReferences:
          allOf:
          - $ref: '#/components/schemas/MetricReferences'
          description: An array of structures that each contain information about
            one metric associated with this service dependency that was discovered
            by Application Signals.
      required:
      - OperationName
      - DependencyKeyAttributes
      - DependencyOperationName
      - MetricReferences
      description: This structure contains information about one dependency of this
        service.
    ServiceDependent:
      type: object
      properties:
        OperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: If the invoked entity is an operation on an entity, the name
            of that dependent operation is displayed here.
        DependentKeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "This is a string-to-string map. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object this is.\n\n  *\
            \ `ResourceType` specifies the type of the resource. This field is used\
            \ only when the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Name` specifies the name of the object. This is used only if the\
            \ value of the `Type` field is `Service`, `RemoteService`, or `AWS::Service`.\n\
            \n  * `Identifier` identifies the resource objects of this resource. This\
            \ is used only if the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Environment` specifies the location where this object is hosted,\
            \ or what it belongs to."
        DependentOperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: If the dependent invoker was a service that invoked it from
            an operation, the name of that dependent operation is displayed here.
        MetricReferences:
          allOf:
          - $ref: '#/components/schemas/MetricReferences'
          description: An array of structures that each contain information about
            one metric associated with this service dependent that was discovered
            by Application Signals.
      required:
      - DependentKeyAttributes
      - MetricReferences
      description: This structure contains information about a service dependent that
        was discovered by Application Signals. A dependent is an entity that invoked
        the specified service during the provided time range. Dependents include other
        services, CloudWatch Synthetics canaries, and clients that are instrumented
        with CloudWatch RUM app monitors.
    ServiceDependents:
      type: array
      items:
        $ref: '#/components/schemas/ServiceDependent'
    ServiceErrorMessage:
      type: string
    ServiceLevelIndicator:
      type: object
      properties:
        SliMetric:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorMetric'
          description: A structure that contains information about the metric that
            the SLO monitors.
        MetricThreshold:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorMetricThreshold'
          description: The value that the SLI metric is compared to.
        ComparisonOperator:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorComparisonOperator'
          description: The arithmetic operation used when comparing the specified
            metric to the threshold.
      required:
      - SliMetric
      - MetricThreshold
      - ComparisonOperator
      description: This structure contains information about the performance metric
        that a period-based SLO monitors.
    ServiceLevelIndicatorComparisonOperator:
      type: string
      enum:
      - GreaterThanOrEqualTo
      - GreaterThan
      - LessThan
      - LessThanOrEqualTo
    ServiceLevelIndicatorConfig:
      type: object
      properties:
        SliMetricConfig:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorMetricConfig'
          description: Use this structure to specify the metric to be used for the
            SLO.
        MetricThreshold:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorMetricThreshold'
          description: This parameter is used only when a request-based SLO tracks
            the `Latency` metric. Specify the threshold value that the observed `Latency`
            metric values are to be compared to.
        ComparisonOperator:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorComparisonOperator'
          description: The arithmetic operation to use when comparing the specified
            metric to the threshold.
      required:
      - SliMetricConfig
      - MetricThreshold
      - ComparisonOperator
      description: This structure specifies the information about the service and
        the performance metric that a period-based SLO is to monitor.
    ServiceLevelIndicatorMetric:
      type: object
      properties:
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "This is a string-to-string map that contains information about\
            \ the type of object that this SLO is related to. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object that this SLO is\
            \ related to.\n\n  * `ResourceType` specifies the type of the resource.\
            \ This field is used only when the value of the `Type` field is `Resource`\
            \ or `AWS::Resource`.\n\n  * `Name` specifies the name of the object.\
            \ This is used only if the value of the `Type` field is `Service`, `RemoteService`,\
            \ or `AWS::Service`.\n\n  * `Identifier` identifies the resource objects\
            \ of this resource. This is used only if the value of the `Type` field\
            \ is `Resource` or `AWS::Resource`.\n\n  * `Environment` specifies the\
            \ location where this object is hosted, or what it belongs to."
        OperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: If the SLO monitors a specific operation of the service, this
            field displays that operation name.
        MetricType:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorMetricType'
          description: If the SLO monitors either the `LATENCY` or `AVAILABILITY`
            metric that Application Signals collects, this field displays which of
            those metrics is used.
        MetricDataQueries:
          allOf:
          - $ref: '#/components/schemas/MetricDataQueries'
          description: If this SLO monitors a CloudWatch metric or the result of a
            CloudWatch metric math expression, this structure includes the information
            about that metric or expression.
        DependencyConfig:
          allOf:
          - $ref: '#/components/schemas/DependencyConfig'
          description: Identifies the dependency using the `DependencyKeyAttributes`
            and `DependencyOperationName`.
      required:
      - MetricDataQueries
      description: This structure contains the information about the metric that is
        used for a period-based SLO.
    ServiceLevelIndicatorMetricConfig:
      type: object
      properties:
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "If this SLO is related to a metric collected by Application\
            \ Signals, you must use this field to specify which service the SLO metric\
            \ is related to. To do so, you must specify at least the `Type`, `Name`,\
            \ and `Environment` attributes.\n\nThis is a string-to-string map. It\
            \ can include the following fields.\n\n  * `Type` designates the type\
            \ of object this is.\n\n  * `ResourceType` specifies the type of the resource.\
            \ This field is used only when the value of the `Type` field is `Resource`\
            \ or `AWS::Resource`.\n\n  * `Name` specifies the name of the object.\
            \ This is used only if the value of the `Type` field is `Service`, `RemoteService`,\
            \ or `AWS::Service`.\n\n  * `Identifier` identifies the resource objects\
            \ of this resource. This is used only if the value of the `Type` field\
            \ is `Resource` or `AWS::Resource`.\n\n  * `Environment` specifies the\
            \ location where this object is hosted, or what it belongs to."
        OperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: If the SLO is to monitor a specific operation of the service,
            use this field to specify the name of that operation.
        MetricType:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorMetricType'
          description: If the SLO is to monitor either the `LATENCY` or `AVAILABILITY`
            metric that Application Signals collects, use this field to specify which
            of those metrics is used.
        Statistic:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorStatistic'
          description: The statistic to use for comparison to the threshold. It can
            be any CloudWatch statistic or extended statistic. For more information
            about statistics, see [CloudWatch statistics definitions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html).
        PeriodSeconds:
          allOf:
          - $ref: '#/components/schemas/SLIPeriodSeconds'
          description: The number of seconds to use as the period for SLO evaluation.
            Your application's performance is compared to the SLI during each period.
            For each period, the application is determined to have either achieved
            or not achieved the necessary performance.
        MetricDataQueries:
          allOf:
          - $ref: '#/components/schemas/MetricDataQueries'
          description: If this SLO monitors a CloudWatch metric or the result of a
            CloudWatch metric math expression, use this structure to specify that
            metric or expression.
        DependencyConfig:
          allOf:
          - $ref: '#/components/schemas/DependencyConfig'
          description: Identifies the dependency using the `DependencyKeyAttributes`
            and `DependencyOperationName`.
      description: Use this structure to specify the information for the metric that
        a period-based SLO will monitor.
    ServiceLevelIndicatorMetricThreshold:
      type: number
      format: double
    ServiceLevelIndicatorMetricType:
      type: string
      enum:
      - LATENCY
      - AVAILABILITY
    ServiceLevelIndicatorStatistic:
      type: string
      pattern: ^[a-zA-Z0-9.]+$
      minLength: 1
      maxLength: 20
    ServiceLevelObjective:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveArn'
          description: The ARN of this SLO.
        Name:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveName'
          description: The name of this SLO.
        Description:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveDescription'
          description: The description that you created for this SLO.
        CreatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that this SLO was created. When used in a
            raw HTTP Query API, it is formatted as `yyyy-MM-dd'T'HH:mm:ss`. For example,
            `2019-07-01T23:59:59`.
        LastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time that this SLO was most recently updated. When used
            in a raw HTTP Query API, it is formatted as `yyyy-MM-dd'T'HH:mm:ss`. For
            example, `2019-07-01T23:59:59`.
        Sli:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicator'
          description: A structure containing information about the performance metric
            that this SLO monitors, if this is a period-based SLO.
        RequestBasedSli:
          allOf:
          - $ref: '#/components/schemas/RequestBasedServiceLevelIndicator'
          description: A structure containing information about the performance metric
            that this SLO monitors, if this is a request-based SLO.
        EvaluationType:
          allOf:
          - $ref: '#/components/schemas/EvaluationType'
          description: Displays whether this is a period-based SLO or a request-based
            SLO.
        Goal:
          $ref: '#/components/schemas/Goal'
        BurnRateConfigurations:
          allOf:
          - $ref: '#/components/schemas/BurnRateConfigurations'
          description: Each object in this array defines the length of the look-back
            window used to calculate one burn rate metric for this SLO. The burn rate
            measures how fast the service is consuming the error budget, relative
            to the attainment goal of the SLO.
        MetricSourceType:
          allOf:
          - $ref: '#/components/schemas/MetricSourceType'
          description: "Displays the SLI metric source type for this SLO. Supported\
            \ types are:\n\n  * Service operation\n\n  * Service dependency\n\n  *\
            \ CloudWatch metric"
      required:
      - Arn
      - Name
      - CreatedTime
      - LastUpdatedTime
      - Goal
      description: A structure containing information about one service level objective
        (SLO) that has been created in Application Signals. Creating SLOs can help
        you ensure your services are performing to the level that you expect. SLOs
        help you set and track a specific target level for the reliability and availability
        of your applications and services. Each SLO uses a service level indicator
        (SLI), which is a key performance metric, to calculate how much underperformance
        can be tolerated before the goal that you set for the SLO is not achieved.
    ServiceLevelObjectiveArn:
      type: string
      pattern: ^arn:aws:application-signals:[^:]*:[^:]*:slo/[0-9A-Za-z][-._0-9A-Za-z
        ]{0,126}[0-9A-Za-z]$
      minLength: 1
      maxLength: 2048
    ServiceLevelObjectiveBudgetReport:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveArn'
          description: The ARN of the SLO that this report is for.
        Name:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveName'
          description: The name of the SLO that this report is for.
        EvaluationType:
          allOf:
          - $ref: '#/components/schemas/EvaluationType'
          description: Displays whether this budget report is for a period-based SLO
            or a request-based SLO.
        BudgetStatus:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveBudgetStatus'
          description: "The status of this SLO, as it relates to the error budget\
            \ for the entire time interval.\n\n  * `OK` means that the SLO had remaining\
            \ budget above the warning threshold, as of the time that you specified\
            \ in `TimeStamp`.\n\n  * `WARNING` means that the SLO's remaining budget\
            \ was below the warning threshold, as of the time that you specified in\
            \ `TimeStamp`.\n\n  * `BREACHED` means that the SLO's budget was exhausted,\
            \ as of the time that you specified in `TimeStamp`.\n\n  * `INSUFFICIENT_DATA`\
            \ means that the specified start and end times were before the SLO was\
            \ created, or that attainment data is missing."
        Attainment:
          allOf:
          - $ref: '#/components/schemas/Attainment'
          description: 'A number between 0 and 100 that represents the success percentage
            of your application compared to the goal set by the SLO.


            If this is a period-based SLO, the number is the percentage of time periods
            that the service has attained the SLO''s attainment goal, as of the time
            of the request.


            If this is a request-based SLO, the number is the number of successful
            requests divided by the number of total requests, multiplied by 100, during
            the time range that you specified in your request.'
        TotalBudgetSeconds:
          allOf:
          - $ref: '#/components/schemas/TotalBudgetSeconds'
          description: The total number of seconds in the error budget for the interval.
            This field is included only if the SLO is a period-based SLO.
        BudgetSecondsRemaining:
          allOf:
          - $ref: '#/components/schemas/BudgetSecondsRemaining'
          description: 'The budget amount remaining before the SLO status becomes
            `BREACHING`, at the time specified in the `Timestemp` parameter of the
            request. If this value is negative, then the SLO is already in `BREACHING`
            status.


            This field is included only if the SLO is a period-based SLO.'
        TotalBudgetRequests:
          allOf:
          - $ref: '#/components/schemas/TotalBudgetRequests'
          description: 'This field is displayed only for request-based SLOs. It displays
            the total number of failed requests that can be tolerated during the time
            range between the start of the interval and the time stamp supplied in
            the budget report request. It is based on the total number of requests
            that occurred, and the percentage specified in the attainment goal. If
            the number of failed requests matches this number or is higher, then this
            SLO is currently breaching.


            This number can go up and down between reports with different time stamps,
            based on both how many total requests occur.'
        BudgetRequestsRemaining:
          allOf:
          - $ref: '#/components/schemas/BudgetRequestsRemaining'
          description: 'This field is displayed only for request-based SLOs. It displays
            the number of failed requests that can be tolerated before any more successful
            requests occur, and still have the application meet its SLO goal.


            This number can go up and down between different reports, based on both
            how many successful requests and how many failed requests occur in that
            time.'
        Sli:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicator'
          description: A structure that contains information about the performance
            metric that this SLO monitors.
        RequestBasedSli:
          $ref: '#/components/schemas/RequestBasedServiceLevelIndicator'
        Goal:
          $ref: '#/components/schemas/Goal'
      required:
      - Arn
      - Name
      - BudgetStatus
      description: A structure containing an SLO budget report that you have requested.
    ServiceLevelObjectiveBudgetReportError:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveName'
          description: The name of the SLO that this error is related to.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveArn'
          description: The ARN of the SLO that this error is related to.
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveBudgetReportErrorCode'
          description: The error code for this error.
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveBudgetReportErrorMessage'
          description: The message for this error.
      required:
      - Name
      - Arn
      - ErrorCode
      - ErrorMessage
      description: A structure containing information about one error that occurred
        during a [BatchGetServiceLevelObjectiveBudgetReport](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_BatchGetServiceLevelObjectiveBudgetReport.html)
        operation.
    ServiceLevelObjectiveBudgetReportErrorCode:
      type: string
    ServiceLevelObjectiveBudgetReportErrorMessage:
      type: string
    ServiceLevelObjectiveBudgetReportErrors:
      type: array
      items:
        $ref: '#/components/schemas/ServiceLevelObjectiveBudgetReportError'
    ServiceLevelObjectiveBudgetReports:
      type: array
      items:
        $ref: '#/components/schemas/ServiceLevelObjectiveBudgetReport'
    ServiceLevelObjectiveBudgetStatus:
      type: string
      enum:
      - OK
      - WARNING
      - BREACHED
      - INSUFFICIENT_DATA
    ServiceLevelObjectiveDescription:
      type: string
      minLength: 1
      maxLength: 1024
    ServiceLevelObjectiveId:
      type: string
      pattern: ^[0-9A-Za-z][-._0-9A-Za-z ]{0,126}[0-9A-Za-z]$|^arn:aws:application-signals:[^:]*:[^:]*:slo/[0-9A-Za-z][-._0-9A-Za-z
        ]{0,126}[0-9A-Za-z]$
    ServiceLevelObjectiveIds:
      type: array
      items:
        type: string
    ServiceLevelObjectiveName:
      type: string
      pattern: ^[0-9A-Za-z][-._0-9A-Za-z ]{0,126}[0-9A-Za-z]$
    ServiceLevelObjectiveSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ServiceLevelObjectiveSummary'
    ServiceLevelObjectiveSummary:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveArn'
          description: The ARN of this service level objective.
        Name:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveName'
          description: The name of the service level objective.
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "This is a string-to-string map. It can include the following\
            \ fields.\n\n  * `Type` designates the type of object this service level\
            \ objective is for.\n\n  * `ResourceType` specifies the type of the resource.\
            \ This field is used only when the value of the `Type` field is `Resource`\
            \ or `AWS::Resource`.\n\n  * `Name` specifies the name of the object.\
            \ This is used only if the value of the `Type` field is `Service`, `RemoteService`,\
            \ or `AWS::Service`.\n\n  * `Identifier` identifies the resource objects\
            \ of this resource. This is used only if the value of the `Type` field\
            \ is `Resource` or `AWS::Resource`.\n\n  * `Environment` specifies the\
            \ location where this object is hosted, or what it belongs to."
        OperationName:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: If this service level objective is specific to a single operation,
            this field displays the name of that operation.
        DependencyConfig:
          allOf:
          - $ref: '#/components/schemas/DependencyConfig'
          description: Identifies the dependency using the `DependencyKeyAttributes`
            and `DependencyOperationName`.
        CreatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that this service level objective was created.
            It is expressed as the number of milliseconds since Jan 1, 1970 00:00:00
            UTC.
        EvaluationType:
          allOf:
          - $ref: '#/components/schemas/EvaluationType'
          description: Displays whether this is a period-based SLO or a request-based
            SLO.
        MetricSourceType:
          allOf:
          - $ref: '#/components/schemas/MetricSourceType'
          description: "Displays the SLI metric source type for this SLO. Supported\
            \ types are:\n\n  * Service operation\n\n  * Service dependency\n\n  *\
            \ CloudWatch metric"
      required:
      - Arn
      - Name
      description: A structure that contains information about one service level objective
        (SLO) created in Application Signals.
    ServiceOperation:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/OperationName'
          description: The name of the operation, discovered by Application Signals.
        MetricReferences:
          allOf:
          - $ref: '#/components/schemas/MetricReferences'
          description: An array of structures that each contain information about
            one metric associated with this service operation that was discovered
            by Application Signals.
      required:
      - Name
      - MetricReferences
      description: This structure contains information about an operation discovered
        by Application Signals. An operation is a specific function performed by a
        service that was discovered by Application Signals, and is often an API that
        is called by an upstream dependent.
    ServiceOperations:
      type: array
      items:
        $ref: '#/components/schemas/ServiceOperation'
    ServiceQuotaExceededException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: This request exceeds a service quota.
    ServiceSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ServiceSummary'
    ServiceSummary:
      type: object
      properties:
        KeyAttributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "This is a string-to-string map that help identify the objects\
            \ discovered by Application Signals. It can include the following fields.\n\
            \n  * `Type` designates the type of object this is.\n\n  * `ResourceType`\
            \ specifies the type of the resource. This field is used only when the\
            \ value of the `Type` field is `Resource` or `AWS::Resource`.\n\n  * `Name`\
            \ specifies the name of the object. This is used only if the value of\
            \ the `Type` field is `Service`, `RemoteService`, or `AWS::Service`.\n\
            \n  * `Identifier` identifies the resource objects of this resource. This\
            \ is used only if the value of the `Type` field is `Resource` or `AWS::Resource`.\n\
            \n  * `Environment` specifies the location where this object is hosted,\
            \ or what it belongs to."
        AttributeMaps:
          allOf:
          - $ref: '#/components/schemas/AttributeMaps'
          description: "This structure contains one or more string-to-string maps\
            \ that help identify this service. It can include _platform attributes_\
            \ , _application attributes_ , and _telemetry attributes_.\n\nPlatform\
            \ attributes contain information the service's platform.\n\n  * `PlatformType`\
            \ defines the hosted-in platform.\n\n  * `EKS.Cluster` is the name of\
            \ the Amazon EKS cluster.\n\n  * `K8s.Cluster` is the name of the self-hosted\
            \ Kubernetes cluster.\n\n  * `K8s.Namespace` is the name of the Kubernetes\
            \ namespace in either Amazon EKS or Kubernetes clusters.\n\n  * `K8s.Workload`\
            \ is the name of the Kubernetes workload in either Amazon EKS or Kubernetes\
            \ clusters.\n\n  * `K8s.Node` is the name of the Kubernetes node in either\
            \ Amazon EKS or Kubernetes clusters.\n\n  * `K8s.Pod` is the name of the\
            \ Kubernetes pod in either Amazon EKS or Kubernetes clusters.\n\n  * `EC2.AutoScalingGroup`\
            \ is the name of the Amazon EC2 Auto Scaling group.\n\n  * `EC2.InstanceId`\
            \ is the ID of the Amazon EC2 instance.\n\n  * `Host` is the name of the\
            \ host, for all platform types.\n\nApplication attributes contain information\
            \ about the application.\n\n  * `AWS.Application` is the application's\
            \ name in Amazon Web Services Service Catalog AppRegistry.\n\n  * `AWS.Application.ARN`\
            \ is the application's ARN in Amazon Web Services Service Catalog AppRegistry.\n\
            \nTelemetry attributes contain telemetry information.\n\n  * `Telemetry.SDK`\
            \ is the fingerprint of the OpenTelemetry SDK version for instrumented\
            \ services.\n\n  * `Telemetry.Agent` is the fingerprint of the agent used\
            \ to collect and send telemetry data.\n\n  * `Telemetry.Source` Specifies\
            \ the point of application where the telemetry was collected or specifies\
            \ what was used for the source of telemetry data."
        MetricReferences:
          allOf:
          - $ref: '#/components/schemas/MetricReferences'
          description: An array of structures that each contain information about
            one metric associated with this service.
      required:
      - KeyAttributes
      - MetricReferences
      description: This structure contains information about one of your services
        that was discovered by Application Signals
    StandardUnit:
      type: string
      enum:
      - Microseconds
      - Milliseconds
      - Seconds
      - Bytes
      - Kilobytes
      - Megabytes
      - Gigabytes
      - Terabytes
      - Bits
      - Kilobits
      - Megabits
      - Gigabits
      - Terabits
      - Percent
      - Count
      - Bytes/Second
      - Kilobytes/Second
      - Megabytes/Second
      - Gigabytes/Second
      - Terabytes/Second
      - Bits/Second
      - Kilobits/Second
      - Megabits/Second
      - Gigabits/Second
      - Terabits/Second
      - Count/Second
      - None
    StartDiscoveryInput:
      type: object
      properties: {}
    StartDiscoveryOutput:
      type: object
      properties: {}
    Stat:
      type: string
    Tag:
      type: object
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          description: A string that you can use to assign a value. The combination
            of tag keys and values can help you organize and categorize your resources.
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: The value for the specified tag key.
      required:
      - Key
      - Value
      description: A key-value pair associated with a resource. Tags can help you
        organize and categorize your resources.
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    TagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: 'The Amazon Resource Name (ARN) of the CloudWatch resource
            that you want to set tags for.


            The ARN format of an Application Signals SLO is `arn:aws:cloudwatch:_Region_
            :_account-id_ :slo:_slo-name_ `


            For more information about ARN format, see [ Resource Types Defined by
            Amazon CloudWatch](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies)
            in the _Amazon Web Services General Reference_.'
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: The list of key-value pairs to associate with the alarm.
      required:
      - ResourceArn
      - Tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    ThrottlingException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/String'
      required:
      - Message
      description: The request was throttled because of quota limits.
    TotalBudgetRequests:
      type: integer
    TotalBudgetSeconds:
      type: integer
    UntagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: 'The Amazon Resource Name (ARN) of the CloudWatch resource
            that you want to delete tags from.


            The ARN format of an Application Signals SLO is `arn:aws:cloudwatch:_Region_
            :_account-id_ :slo:_slo-name_ `


            For more information about ARN format, see [ Resource Types Defined by
            Amazon CloudWatch](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies)
            in the _Amazon Web Services General Reference_.'
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The list of tag keys to remove from the resource.
      required:
      - ResourceArn
      - TagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateServiceLevelObjectiveInput:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveId'
          description: The Amazon Resource Name (ARN) or name of the service level
            objective that you want to update.
        Description:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjectiveDescription'
          description: An optional description for the SLO.
        SliConfig:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelIndicatorConfig'
          description: If this SLO is a period-based SLO, this structure defines the
            information about what performance metric this SLO will monitor.
        RequestBasedSliConfig:
          allOf:
          - $ref: '#/components/schemas/RequestBasedServiceLevelIndicatorConfig'
          description: 'If this SLO is a request-based SLO, this structure defines
            the information about what performance metric this SLO will monitor.


            You can''t specify both `SliConfig` and `RequestBasedSliConfig` in the
            same operation.'
        Goal:
          allOf:
          - $ref: '#/components/schemas/Goal'
          description: A structure that contains the attributes that determine the
            goal of the SLO. This includes the time period for evaluation and the
            attainment threshold.
        BurnRateConfigurations:
          allOf:
          - $ref: '#/components/schemas/BurnRateConfigurations'
          description: Use this array to create _burn rates_ for this SLO. Each burn
            rate is a metric that indicates how fast the service is consuming the
            error budget, relative to the attainment goal of the SLO.
      required:
      - Id
    UpdateServiceLevelObjectiveOutput:
      type: object
      properties:
        Slo:
          allOf:
          - $ref: '#/components/schemas/ServiceLevelObjective'
          description: A structure that contains information about the SLO that you
            just updated.
      required:
      - Slo
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ValidationExceptionMessage'
      description: The resource is not valid.
    ValidationExceptionMessage:
      type: string
    WarningThreshold:
      type: number
      format: double
    Window:
      type: object
      properties:
        DurationUnit:
          allOf:
          - $ref: '#/components/schemas/DurationUnit'
          description: 'The unit of time for the exclusion window duration. Valid
            values: MINUTE, HOUR, DAY, MONTH.'
        Duration:
          allOf:
          - $ref: '#/components/schemas/ExclusionDuration'
          description: The number of time units for the exclusion window length.
      required:
      - DurationUnit
      - Duration
      description: The object that defines the time length of an exclusion window.
