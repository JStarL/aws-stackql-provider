openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: lookoutvision
  x-aws-serviceName: lookoutvision
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-11-20'
  title: Amazon Lookout for Vision
  description: |-
    This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.

    Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.
servers:
- description: The Amazon Lookout for Vision regional endpoint
  url: https://lookoutvision.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /2020-11-20/projects/{ProjectName}/datasets:
    post:
      operationId: CreateDataset
      description: |-
        Creates a new dataset in an Amazon Lookout for Vision project. `CreateDataset` can create a training or a test dataset from a valid dataset source (`DatasetSource`).

        If you want a single dataset project, specify `train` for the value of `DatasetType`.

        To have a project with separate training and test datasets, call `CreateDataset` twice. On the first call, specify `train` for the value of `DatasetType`. On the second call, specify `test` for the value of `DatasetType`.

        This operation requires permissions to perform the `lookoutvision:CreateDataset` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DatasetType:
                  $ref: '#/components/schemas/DatasetType'
                DatasetSource:
                  $ref: '#/components/schemas/DatasetSource'
      responses:
        '202': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            A service quota was exceeded the allowed limit. For more information, see Limits in Amazon Lookout for Vision in the Amazon Lookout for Vision Developer Guide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects/{ProjectName}/models:
    post:
      operationId: CreateModel
      description: |-
        Creates a new version of a model within an an Amazon Lookout for Vision project. `CreateModel` is an asynchronous operation in which Amazon Lookout for Vision trains, tests, and evaluates a new version of a model.

        To get the current status, check the `Status` field returned in the response from DescribeModel.

        If the project has a single dataset, Amazon Lookout for Vision internally splits the dataset to create a training and a test dataset. If the project has a training and a test dataset, Lookout for Vision uses the respective datasets to train and test the model.

        After training completes, the evaluation metrics are stored at the location specified in `OutputConfig`.

        This operation requires permissions to perform the `lookoutvision:CreateModel` operation. If you want to tag your model, you also require permission to the `lookoutvision:TagResource` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/ModelDescriptionMessage'
                OutputConfig:
                  $ref: '#/components/schemas/OutputConfig'
                KmsKeyId:
                  $ref: '#/components/schemas/KmsKeyId'
                Tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '202': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            A service quota was exceeded the allowed limit. For more information, see Limits in Amazon Lookout for Vision in the Amazon Lookout for Vision Developer Guide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListModels
      description: |-
        Lists the versions of a model in an Amazon Lookout for Vision project.

        The `ListModels` operation is eventually consistent. Recent calls to `CreateModel` might take a while to appear in the response from `ListProjects`.

        This operation requires permissions to perform the `lookoutvision:ListModels` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PageSize'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects:
    post:
      operationId: CreateProject
      description: |-
        Creates an empty Amazon Lookout for Vision project. After you create the project, add a dataset by calling CreateDataset.

        This operation requires permissions to perform the `lookoutvision:CreateProject` operation.
      parameters:
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProjectName:
                  $ref: '#/components/schemas/ProjectName'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            A service quota was exceeded the allowed limit. For more information, see Limits in Amazon Lookout for Vision in the Amazon Lookout for Vision Developer Guide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListProjects
      description: |-
        Lists the Amazon Lookout for Vision projects in your AWS account that are in the AWS Region in which you call `ListProjects`.

        The `ListProjects` operation is eventually consistent. Recent calls to `CreateProject` and `DeleteProject` might take a while to appear in the response from `ListProjects`.

        This operation requires permissions to perform the `lookoutvision:ListProjects` operation.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PageSize'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects/{ProjectName}/datasets/{DatasetType}:
    delete:
      operationId: DeleteDataset
      description: |-
        Deletes an existing Amazon Lookout for Vision `dataset`.

        If your the project has a single dataset, you must create a new dataset before you can create a model.

        If you project has a training dataset and a test dataset consider the following.

          * If you delete the test dataset, your project reverts to a single dataset project. If you then train the model, Amazon Lookout for Vision internally splits the remaining dataset into a training and test dataset.

          * If you delete the training dataset, you must create a training dataset before you can create a model.

        This operation requires permissions to perform the `lookoutvision:DeleteDataset` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: DatasetType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetType'
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '202': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeDataset
      description: |-
        Describe an Amazon Lookout for Vision dataset.

        This operation requires permissions to perform the `lookoutvision:DescribeDataset` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: DatasetType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetType'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects/{ProjectName}/models/{ModelVersion}:
    delete:
      operationId: DeleteModel
      description: |-
        Deletes an Amazon Lookout for Vision model. You can't delete a running model. To stop a running model, use the StopModel operation.

        It might take a few seconds to delete a model. To determine if a model has been deleted, call ListModels and check if the version of the model (`ModelVersion`) is in the `Models` array.

        This operation requires permissions to perform the `lookoutvision:DeleteModel` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: ModelVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelVersionNoLatest'
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '202': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeModel
      description: |-
        Describes a version of an Amazon Lookout for Vision model.

        This operation requires permissions to perform the `lookoutvision:DescribeModel` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: ModelVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelVersion'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects/{ProjectName}:
    delete:
      operationId: DeleteProject
      description: |-
        Deletes an Amazon Lookout for Vision project.

        To delete a project, you must first delete each version of the model associated with the project. To delete a model use the DeleteModel operation.

        You also have to delete the dataset(s) associated with the model. For more information, see DeleteDataset. The images referenced by the training and test datasets aren't deleted.

        This operation requires permissions to perform the `lookoutvision:DeleteProject` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeProject
      description: |-
        Describes an Amazon Lookout for Vision project.

        This operation requires permissions to perform the `lookoutvision:DescribeProject` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects/{ProjectName}/modelpackagingjobs/{JobName}:
    get:
      operationId: DescribeModelPackagingJob
      description: |-
        Describes an Amazon Lookout for Vision model packaging job.

        This operation requires permissions to perform the `lookoutvision:DescribeModelPackagingJob` operation.

        For more information, see _Using your Amazon Lookout for Vision model on an edge device_ in the Amazon Lookout for Vision Developer Guide.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: JobName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelPackagingJobName'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects/{ProjectName}/models/{ModelVersion}/detect:
    post:
      operationId: DetectAnomalies
      description: |-
        Detects anomalies in an image that you supply.

        The response from `DetectAnomalies` includes a boolean prediction that the image contains one or more anomalies and a confidence value for the prediction. If the model is an image segmentation model, the response also includes segmentation information for each type of anomaly found in the image.

        Before calling `DetectAnomalies`, you must first start your model with the StartModel operation. You are charged for the amount of time, in minutes, that a model runs and for the number of anomaly detection units that your model uses. If you are not using a model, use the StopModel operation to stop your model.

        For more information, see _Detecting anomalies in an image_ in the Amazon Lookout for Vision developer guide.

        This operation requires permissions to perform the `lookoutvision:DetectAnomalies` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: ModelVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelVersion'
      - name: Content-Type
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/ContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Body:
                  $ref: '#/components/schemas/Stream'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects/{ProjectName}/datasets/{DatasetType}/entries:
    get:
      operationId: ListDatasetEntries
      description: |-
        Lists the JSON Lines within a dataset. An Amazon Lookout for Vision JSON Line contains the anomaly information for a single image, including the image location and the assigned label.

        This operation requires permissions to perform the `lookoutvision:ListDatasetEntries` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: DatasetType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetType'
      - name: labeled
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IsLabeled'
      - name: anomalyClass
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AnomalyClassFilter'
      - name: createdBefore
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DateTime'
      - name: createdAfter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DateTime'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PageSize'
      - name: sourceRefContains
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/QueryString'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateDatasetEntries
      description: |-
        Adds or updates one or more JSON Line entries in a dataset. A JSON Line includes information about an image used for training or testing an Amazon Lookout for Vision model.

        To update an existing JSON Line, use the `source-ref` field to identify the JSON Line. The JSON line that you supply replaces the existing JSON line. Any existing annotations that are not in the new JSON line are removed from the dataset.

        For more information, see _Defining JSON lines for anomaly classification_ in the Amazon Lookout for Vision Developer Guide.

        The images you reference in the `source-ref` field of a JSON line, must be in the same S3 bucket as the existing images in the dataset.

        Updating a dataset might take a while to complete. To check the current status, call DescribeDataset and check the `Status` field in the response.

        This operation requires permissions to perform the `lookoutvision:UpdateDatasetEntries` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: DatasetType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetType'
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Changes:
                  $ref: '#/components/schemas/DatasetChanges'
      responses:
        '202': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects/{ProjectName}/modelpackagingjobs:
    get:
      operationId: ListModelPackagingJobs
      description: |-
        Lists the model packaging jobs created for an Amazon Lookout for Vision project.

        This operation requires permissions to perform the `lookoutvision:ListModelPackagingJobs` operation.

        For more information, see _Using your Amazon Lookout for Vision model on an edge device_ in the Amazon Lookout for Vision Developer Guide.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PageSize'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartModelPackagingJob
      description: |-
        Starts an Amazon Lookout for Vision model packaging job. A model packaging job creates an AWS IoT Greengrass component for a Lookout for Vision model. You can use the component to deploy your model to an edge device managed by Greengrass.

        Use the DescribeModelPackagingJob API to determine the current status of the job. The model packaging job is complete if the value of `Status` is `SUCCEEDED`.

        To deploy the component to the target device, use the component name and component version with the AWS IoT Greengrass [CreateDeployment](https://docs.aws.amazon.com/greengrass/v2/APIReference/API_CreateDeployment.html) API.

        This operation requires the following permissions:

          * `lookoutvision:StartModelPackagingJob`

          * `s3:PutObject`

          * `s3:GetBucketLocation`

          * `kms:GenerateDataKey`

          * `greengrass:CreateComponentVersion`

          * `greengrass:DescribeComponent`

          * (Optional) `greengrass:TagResource`. Only required if you want to tag the component.

        For more information, see _Using your Amazon Lookout for Vision model on an edge device_ in the Amazon Lookout for Vision Developer Guide.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ModelVersion:
                  $ref: '#/components/schemas/ModelVersion'
                JobName:
                  $ref: '#/components/schemas/ModelPackagingJobName'
                Configuration:
                  $ref: '#/components/schemas/ModelPackagingConfiguration'
                Description:
                  $ref: '#/components/schemas/ModelPackagingJobDescription'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            A service quota was exceeded the allowed limit. For more information, see Limits in Amazon Lookout for Vision in the Amazon Lookout for Vision Developer Guide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/tags/{ResourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Returns a list of tags attached to the specified Amazon Lookout for Vision model.

        This operation requires permissions to perform the `lookoutvision:ListTagsForResource` operation.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TagArn'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Adds one or more key-value tags to an Amazon Lookout for Vision model. For more information, see _Tagging a model_ in the _Amazon Lookout for Vision Developer Guide_.

        This operation requires permissions to perform the `lookoutvision:TagResource` operation.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TagArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            A service quota was exceeded the allowed limit. For more information, see Limits in Amazon Lookout for Vision in the Amazon Lookout for Vision Developer Guide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes one or more tags from an Amazon Lookout for Vision model. For more information, see _Tagging a model_ in the _Amazon Lookout for Vision Developer Guide_.

        This operation requires permissions to perform the `lookoutvision:UntagResource` operation.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TagArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects/{ProjectName}/models/{ModelVersion}/start:
    post:
      operationId: StartModel
      description: |-
        Starts the running of the version of an Amazon Lookout for Vision model. Starting a model takes a while to complete. To check the current state of the model, use DescribeModel.

        A model is ready to use when its status is `HOSTED`.

        Once the model is running, you can detect custom labels in new images by calling DetectAnomalies.

        You are charged for the amount of time that the model is running. To stop a running model, call StopModel.

        This operation requires permissions to perform the `lookoutvision:StartModel` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: ModelVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelVersion'
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                MinInferenceUnits:
                  $ref: '#/components/schemas/InferenceUnits'
                MaxInferenceUnits:
                  $ref: '#/components/schemas/InferenceUnits'
      responses:
        '202': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            A service quota was exceeded the allowed limit. For more information, see Limits in Amazon Lookout for Vision in the Amazon Lookout for Vision Developer Guide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2020-11-20/projects/{ProjectName}/models/{ModelVersion}/stop:
    post:
      operationId: StopModel
      description: |-
        Stops the hosting of a running model. The operation might take a while to complete. To check the current status, call DescribeModel.

        After the model hosting stops, the `Status` of the model is `TRAINED`.

        This operation requires permissions to perform the `lookoutvision:StopModel` operation.
      parameters:
      - name: ProjectName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectName'
      - name: ModelVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelVersion'
      - name: X-Amzn-Client-Token
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '202': {}
        '403':
          description: |-
            You are not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The update or deletion of a resource caused an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Amazon Lookout for Vision experienced a service issue. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionString'
      required:
      - Message
      description: You are not authorized to perform the action.
    Anomaly:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/AnomalyName'
          description: The name of an anomaly type found in an image. `Name` maps
            to an anomaly type in the training dataset, apart from the anomaly type
            `background`. The service automatically inserts the `background` anomaly
            type into the response from `DetectAnomalies`.
        PixelAnomaly:
          allOf:
          - $ref: '#/components/schemas/PixelAnomaly'
          description: Information about the pixel mask that covers an anomaly type.
      description: Information about an anomaly type found on an image by an image
        segmentation model. For more information, see DetectAnomalies.
    AnomalyClassFilter:
      type: string
      pattern: ^(normal|anomaly)$
      minLength: 1
      maxLength: 10
    AnomalyList:
      type: array
      items:
        $ref: '#/components/schemas/Anomaly'
    AnomalyMask:
      type: string
      format: byte
      minLength: 1
      maxLength: 5242880
    AnomalyName:
      type: string
      pattern: ^[a-zA-Z0-9]*$
      minLength: 1
      maxLength: 256
    Boolean:
      type: boolean
    ClientToken:
      type: string
      pattern: ^[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 64
    Color:
      type: string
      pattern: ^\#[a-zA-Z0-9]{6}$
      minLength: 7
      maxLength: 7
    CompilerOptions:
      type: string
      pattern: .*
      minLength: 3
      maxLength: 1024
    ComponentDescription:
      type: string
      pattern: ^[a-zA-Z0-9-_. ()':,;?]+$
      minLength: 1
      maxLength: 256
    ComponentName:
      type: string
      pattern: ^[a-zA-Z0-9-_.]+$
      minLength: 1
      maxLength: 128
    ComponentVersion:
      type: string
      pattern: ^([0-9]{1,6})\.([0-9]{1,6})\.([0-9]{1,6})$
      minLength: 1
      maxLength: 64
    ComponentVersionArn:
      type: string
      pattern: ^arn:[^:]*:greengrass:[^:]*:aws:components:[^:]+$
    ConflictException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionString'
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/ExceptionString'
          description: The ID of the resource.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of the resource.
      required:
      - Message
      - ResourceId
      - ResourceType
      description: The update or deletion of a resource caused an inconsistent state.
    ContentType:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 255
    CreateDatasetRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project in which you want to create a dataset.
        DatasetType:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          description: The type of the dataset. Specify `train` for a training dataset.
            Specify `test` for a test dataset.
        DatasetSource:
          allOf:
          - $ref: '#/components/schemas/DatasetSource'
          description: 'The location of the manifest file that Amazon Lookout for
            Vision uses to create the dataset.


            If you don''t specify `DatasetSource`, an empty dataset is created and
            the operation synchronously returns. Later, you can add JSON Lines by
            calling UpdateDatasetEntries.


            If you specify a value for `DataSource`, the manifest at the S3 location
            is validated and used to create the dataset. The call to `CreateDataset`
            is asynchronous and might take a while to complete. To find out the current
            status, Check the value of `Status` returned in a call to DescribeDataset.'
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'ClientToken is an idempotency token that ensures a call to
            `CreateDataset` completes only once. You choose the value to pass. For
            example, An issue might prevent you from getting a response from `CreateDataset`.
            In this case, safely retry your call to `CreateDataset` by using the same
            `ClientToken` parameter value.


            If you don''t supply a value for `ClientToken`, the AWS SDK you are using
            inserts a value for you. This prevents retries after a network error from
            making multiple dataset creation requests. You''ll need to provide your
            own value for other use cases.


            An error occurs if the other input parameters are not the same as in the
            first request. Using a different value for `ClientToken` is considered
            a new call to `CreateDataset`. An idempotency token is active for 8 hours.'
      required:
      - ProjectName
      - DatasetType
    CreateDatasetResponse:
      type: object
      properties:
        DatasetMetadata:
          allOf:
          - $ref: '#/components/schemas/DatasetMetadata'
          description: Information about the dataset.
    CreateModelRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project in which you want to create a model
            version.
        Description:
          allOf:
          - $ref: '#/components/schemas/ModelDescriptionMessage'
          description: A description for the version of the model.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'ClientToken is an idempotency token that ensures a call to
            `CreateModel` completes only once. You choose the value to pass. For example,
            An issue might prevent you from getting a response from `CreateModel`.
            In this case, safely retry your call to `CreateModel` by using the same
            `ClientToken` parameter value.


            If you don''t supply a value for `ClientToken`, the AWS SDK you are using
            inserts a value for you. This prevents retries after a network error from
            starting multiple training jobs. You''ll need to provide your own value
            for other use cases.


            An error occurs if the other input parameters are not the same as in the
            first request. Using a different value for `ClientToken` is considered
            a new call to `CreateModel`. An idempotency token is active for 8 hours.'
        OutputConfig:
          allOf:
          - $ref: '#/components/schemas/OutputConfig'
          description: The location where Amazon Lookout for Vision saves the training
            results.
        KmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          description: The identifier for your AWS KMS key. The key is used to encrypt
            training and test images copied into the service for model training. Your
            source images are unaffected. If this parameter is not specified, the
            copied images are encrypted by a key that AWS owns and manages.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A set of tags (key-value pairs) that you want to attach to
            the model.
      required:
      - ProjectName
      - OutputConfig
    CreateModelResponse:
      type: object
      properties:
        ModelMetadata:
          allOf:
          - $ref: '#/components/schemas/ModelMetadata'
          description: The response from a call to `CreateModel`.
    CreateProjectRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name for the project.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'ClientToken is an idempotency token that ensures a call to
            `CreateProject` completes only once. You choose the value to pass. For
            example, An issue might prevent you from getting a response from `CreateProject`.
            In this case, safely retry your call to `CreateProject` by using the same
            `ClientToken` parameter value.


            If you don''t supply a value for `ClientToken`, the AWS SDK you are using
            inserts a value for you. This prevents retries after a network error from
            making multiple project creation requests. You''ll need to provide your
            own value for other use cases.


            An error occurs if the other input parameters are not the same as in the
            first request. Using a different value for `ClientToken` is considered
            a new call to `CreateProject`. An idempotency token is active for 8 hours.'
      required:
      - ProjectName
    CreateProjectResponse:
      type: object
      properties:
        ProjectMetadata:
          allOf:
          - $ref: '#/components/schemas/ProjectMetadata'
          description: Information about the project.
    DatasetChanges:
      type: string
      format: byte
      minLength: 1
      maxLength: 10485760
    DatasetDescription:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the dataset.
        DatasetType:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          description: The type of the dataset. The value `train` represents a training
            dataset or single dataset project. The value `test` represents a test
            dataset.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The Unix timestamp for the time and date that the dataset was
            created.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The Unix timestamp for the date and time that the dataset was
            last updated.
        Status:
          allOf:
          - $ref: '#/components/schemas/DatasetStatus'
          description: The status of the dataset.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/DatasetStatusMessage'
          description: The status message for the dataset.
        ImageStats:
          allOf:
          - $ref: '#/components/schemas/DatasetImageStats'
          description: Statistics about the images in a dataset.
      description: The description for a dataset. For more information, see DescribeDataset.
    DatasetEntry:
      type: string
      pattern: ^\{.*\}$
      minLength: 2
      maxLength: 8192
    DatasetEntryList:
      type: array
      items:
        $ref: '#/components/schemas/DatasetEntry'
    DatasetGroundTruthManifest:
      type: object
      properties:
        S3Object:
          allOf:
          - $ref: '#/components/schemas/InputS3Object'
          description: The S3 bucket location for the manifest file.
      description: Location information about a manifest file. You can use a manifest
        file to create a dataset.
    DatasetImageStats:
      type: object
      properties:
        Total:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of images in the dataset.
        Labeled:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of labeled images.
        Normal:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of images labeled as normal.
        Anomaly:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: the total number of images labeled as an anomaly.
      description: Statistics about the images in a dataset.
    DatasetMetadata:
      type: object
      properties:
        DatasetType:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          description: The type of the dataset.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The Unix timestamp for the date and time that the dataset was
            created.
        Status:
          allOf:
          - $ref: '#/components/schemas/DatasetStatus'
          description: The status for the dataset.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/DatasetStatusMessage'
          description: The status message for the dataset.
      description: Summary information for an Amazon Lookout for Vision dataset. For
        more information, see DescribeDataset and ProjectDescription.
    DatasetMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/DatasetMetadata'
    DatasetSource:
      type: object
      properties:
        GroundTruthManifest:
          allOf:
          - $ref: '#/components/schemas/DatasetGroundTruthManifest'
          description: Location information for the manifest file.
      description: Information about the location of a manifest file that Amazon Lookout
        for Vision uses to to create a dataset.
    DatasetStatus:
      type: string
      enum:
      - CREATE_IN_PROGRESS
      - CREATE_COMPLETE
      - CREATE_FAILED
      - UPDATE_IN_PROGRESS
      - UPDATE_COMPLETE
      - UPDATE_FAILED_ROLLBACK_IN_PROGRESS
      - UPDATE_FAILED_ROLLBACK_COMPLETE
      - DELETE_IN_PROGRESS
      - DELETE_COMPLETE
      - DELETE_FAILED
    DatasetStatusMessage:
      type: string
    DatasetType:
      type: string
      pattern: ^train|test$
      minLength: 1
      maxLength: 10
    DateTime:
      type: string
      format: date-time
    DeleteDatasetRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the dataset that you
            want to delete.
        DatasetType:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          description: The type of the dataset to delete. Specify `train` to delete
            the training dataset. Specify `test` to delete the test dataset. To delete
            the dataset in a single dataset project, specify `train`.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'ClientToken is an idempotency token that ensures a call to
            `DeleteDataset` completes only once. You choose the value to pass. For
            example, An issue might prevent you from getting a response from `DeleteDataset`.
            In this case, safely retry your call to `DeleteDataset` by using the same
            `ClientToken` parameter value.


            If you don''t supply a value for `ClientToken`, the AWS SDK you are using
            inserts a value for you. This prevents retries after a network error from
            making multiple deletetion requests. You''ll need to provide your own
            value for other use cases.


            An error occurs if the other input parameters are not the same as in the
            first request. Using a different value for `ClientToken` is considered
            a new call to `DeleteDataset`. An idempotency token is active for 8 hours.'
      required:
      - ProjectName
      - DatasetType
    DeleteDatasetResponse:
      type: object
      properties: {}
    DeleteModelRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the model that you want
            to delete.
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersionNoLatest'
          description: The version of the model that you want to delete.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'ClientToken is an idempotency token that ensures a call to
            `DeleteModel` completes only once. You choose the value to pass. For example,
            an issue might prevent you from getting a response from `DeleteModel`.
            In this case, safely retry your call to `DeleteModel` by using the same
            `ClientToken` parameter value.


            If you don''t supply a value for ClientToken, the AWS SDK you are using
            inserts a value for you. This prevents retries after a network error from
            making multiple model deletion requests. You''ll need to provide your
            own value for other use cases.


            An error occurs if the other input parameters are not the same as in the
            first request. Using a different value for `ClientToken` is considered
            a new call to `DeleteModel`. An idempotency token is active for 8 hours.'
      required:
      - ProjectName
      - ModelVersion
    DeleteModelResponse:
      type: object
      properties:
        ModelArn:
          allOf:
          - $ref: '#/components/schemas/ModelArn'
          description: The Amazon Resource Name (ARN) of the model that was deleted.
    DeleteProjectRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project to delete.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'ClientToken is an idempotency token that ensures a call to
            `DeleteProject` completes only once. You choose the value to pass. For
            example, An issue might prevent you from getting a response from `DeleteProject`.
            In this case, safely retry your call to `DeleteProject` by using the same
            `ClientToken` parameter value.


            If you don''t supply a value for `ClientToken`, the AWS SDK you are using
            inserts a value for you. This prevents retries after a network error from
            making multiple project deletion requests. You''ll need to provide your
            own value for other use cases.


            An error occurs if the other input parameters are not the same as in the
            first request. Using a different value for `ClientToken` is considered
            a new call to `DeleteProject`. An idempotency token is active for 8 hours.'
      required:
      - ProjectName
    DeleteProjectResponse:
      type: object
      properties:
        ProjectArn:
          allOf:
          - $ref: '#/components/schemas/ProjectArn'
          description: The Amazon Resource Name (ARN) of the project that was deleted.
    DescribeDatasetRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the dataset that you
            want to describe.
        DatasetType:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          description: The type of the dataset to describe. Specify `train` to describe
            the training dataset. Specify `test` to describe the test dataset. If
            you have a single dataset project, specify `train`
      required:
      - ProjectName
      - DatasetType
    DescribeDatasetResponse:
      type: object
      properties:
        DatasetDescription:
          allOf:
          - $ref: '#/components/schemas/DatasetDescription'
          description: The description of the requested dataset.
    DescribeModelPackagingJobRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the model packaging job
            that you want to describe.
        JobName:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobName'
          description: The job name for the model packaging job.
      required:
      - ProjectName
      - JobName
    DescribeModelPackagingJobResponse:
      type: object
      properties:
        ModelPackagingDescription:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingDescription'
          description: The description of the model packaging job.
    DescribeModelRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The project that contains the version of a model that you want
            to describe.
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          description: The version of the model that you want to describe.
      required:
      - ProjectName
      - ModelVersion
    DescribeModelResponse:
      type: object
      properties:
        ModelDescription:
          allOf:
          - $ref: '#/components/schemas/ModelDescription'
          description: Contains the description of the model.
    DescribeProjectRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that you want to describe.
      required:
      - ProjectName
    DescribeProjectResponse:
      type: object
      properties:
        ProjectDescription:
          allOf:
          - $ref: '#/components/schemas/ProjectDescription'
          description: The description of the project.
    DetectAnomaliesRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the model version that
            you want to use.
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          description: The version of the model that you want to use.
        Body:
          allOf:
          - $ref: '#/components/schemas/Stream'
          description: The unencrypted image bytes that you want to analyze.
        ContentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          description: The type of the image passed in `Body`. Valid values are `image/png`
            (PNG format images) and `image/jpeg` (JPG format images).
      required:
      - ProjectName
      - ModelVersion
      - Body
      - ContentType
    DetectAnomaliesResponse:
      type: object
      properties:
        DetectAnomalyResult:
          allOf:
          - $ref: '#/components/schemas/DetectAnomalyResult'
          description: The results of the `DetectAnomalies` operation.
    DetectAnomalyResult:
      type: object
      properties:
        Source:
          allOf:
          - $ref: '#/components/schemas/ImageSource'
          description: The source of the image that was analyzed. `direct` means that
            the images was supplied from the local computer. No other values are supported.
        IsAnomalous:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: True if Amazon Lookout for Vision classifies the image as containing
            an anomaly, otherwise false.
        Confidence:
          allOf:
          - $ref: '#/components/schemas/Float'
          description: The confidence that Lookout for Vision has in the accuracy
            of the classification in `IsAnomalous`.
        Anomalies:
          allOf:
          - $ref: '#/components/schemas/AnomalyList'
          description: 'If the model is an image segmentation model, `Anomalies` contains
            a list of anomaly types found in the image. There is one entry for each
            type of anomaly found (even if multiple instances of an anomaly type exist
            on the image). The first element in the list is always an anomaly type
            representing the image background (''background'') and shouldn''t be considered
            an anomaly. Amazon Lookout for Vision automatically add the background
            anomaly type to the response, and you don''t need to declare a background
            anomaly type in your dataset.


            If the list has one entry (''background''), no anomalies were found on
            the image.


            An image classification model doesn''t return an `Anomalies` list.'
        AnomalyMask:
          allOf:
          - $ref: '#/components/schemas/AnomalyMask'
          description: 'If the model is an image segmentation model, `AnomalyMask`
            contains pixel masks that covers all anomaly types found on the image.
            Each anomaly type has a different mask color. To map a color to an anomaly
            type, see the `color` field of the PixelAnomaly object.


            An image classification model doesn''t return an `Anomalies` list.'
      description: The prediction results from a call to DetectAnomalies. `DetectAnomalyResult`
        includes classification information for the prediction (`IsAnomalous` and
        `Confidence`). If the model you use is an image segementation model, `DetectAnomalyResult`
        also includes segmentation information (`Anomalies` and `AnomalyMask`). Classification
        information is calculated separately from segmentation information and you
        shouldn't assume a relationship between them.
    ExceptionString:
      type: string
    Float:
      type: number
      format: float
    GreengrassConfiguration:
      type: object
      properties:
        CompilerOptions:
          allOf:
          - $ref: '#/components/schemas/CompilerOptions'
          description: 'Additional compiler options for the Greengrass component.
            Currently, only NVIDIA Graphics Processing Units (GPU) and CPU accelerators
            are supported. If you specify `TargetDevice`, don''t specify `CompilerOptions`.


            For more information, see _Compiler options_ in the Amazon Lookout for
            Vision Developer Guide.'
        TargetDevice:
          allOf:
          - $ref: '#/components/schemas/TargetDevice'
          description: The target device for the model. Currently the only supported
            value is `jetson_xavier`. If you specify `TargetDevice`, you can't specify
            `TargetPlatform`.
        TargetPlatform:
          allOf:
          - $ref: '#/components/schemas/TargetPlatform'
          description: The target platform for the model. If you specify `TargetPlatform`,
            you can't specify `TargetDevice`.
        S3OutputLocation:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: An S3 location in which Lookout for Vision stores the component
            artifacts.
        ComponentName:
          allOf:
          - $ref: '#/components/schemas/ComponentName'
          description: A name for the AWS IoT Greengrass component.
        ComponentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersion'
          description: A Version for the AWS IoT Greengrass component. If you don't
            provide a value, a default value of ` _Model Version_.0.0` is used.
        ComponentDescription:
          allOf:
          - $ref: '#/components/schemas/ComponentDescription'
          description: A description for the AWS IoT Greengrass component.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A set of tags (key-value pairs) that you want to attach to
            the AWS IoT Greengrass component.
      required:
      - S3OutputLocation
      - ComponentName
      description: 'Configuration information for the AWS IoT Greengrass component
        created in a model packaging job. For more information, see StartModelPackagingJob.


        You can''t specify a component with the same `ComponentName` and `Componentversion`
        as an existing component with the same component name and component version.'
    GreengrassOutputDetails:
      type: object
      properties:
        ComponentVersionArn:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionArn'
          description: The Amazon Resource Name (ARN) of the component.
        ComponentName:
          allOf:
          - $ref: '#/components/schemas/ComponentName'
          description: The name of the component.
        ComponentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersion'
          description: The version of the component.
      description: Information about the AWS IoT Greengrass component created by a
        model packaging job.
    ImageSource:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/ImageSourceType'
          description: The type of the image.
      description: The source for an image.
    ImageSourceType:
      type: string
      pattern: ^direct$
    InferenceUnits:
      type: integer
      minimum: 1
    InputS3Object:
      type: object
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The Amazon S3 bucket that contains the manifest.
        Key:
          allOf:
          - $ref: '#/components/schemas/S3ObjectKey'
          description: The name and location of the manifest file withiin the bucket.
        VersionId:
          allOf:
          - $ref: '#/components/schemas/S3ObjectVersion'
          description: The version ID of the bucket.
      required:
      - Bucket
      - Key
      description: Amazon S3 Location information for an input manifest file.
    Integer:
      type: integer
    InternalServerException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionString'
        RetryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/RetryAfterSeconds'
          description: The period of time, in seconds, before the operation can be
            retried.
      required:
      - Message
      description: Amazon Lookout for Vision experienced a service issue. Try your
        call again.
    IsLabeled:
      type: boolean
    KmsKeyId:
      type: string
      pattern: ^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$
      minLength: 1
      maxLength: 2048
    ListDatasetEntriesRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the dataset that you
            want to list.
        DatasetType:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          description: The type of the dataset that you want to list. Specify `train`
            to list the training dataset. Specify `test` to list the test dataset.
            If you have a single dataset project, specify `train`.
        Labeled:
          allOf:
          - $ref: '#/components/schemas/IsLabeled'
          description: Specify `true` to include labeled entries, otherwise specify
            `false`. If you don't specify a value, Lookout for Vision returns all
            entries.
        AnomalyClass:
          allOf:
          - $ref: '#/components/schemas/AnomalyClassFilter'
          description: Specify `normal` to include only normal images. Specify `anomaly`
            to only include anomalous entries. If you don't specify a value, Amazon
            Lookout for Vision returns normal and anomalous images.
        BeforeCreationDate:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: Only includes entries before the specified date in the response.
            For example, `2020-06-23T00:00:00`.
        AfterCreationDate:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: Only includes entries after the specified date in the response.
            For example, `2020-06-23T00:00:00`.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If the previous response was incomplete (because there is more
            data to retrieve), Amazon Lookout for Vision returns a pagination token
            in the response. You can use this pagination token to retrieve the next
            set of dataset entries.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of results to return per paginated call.
            The largest value you can specify is 100. If you specify a value greater
            than 100, a ValidationException error occurs. The default value is 100.
        SourceRefContains:
          allOf:
          - $ref: '#/components/schemas/QueryString'
          description: Perform a "contains" search on the values of the `source-ref`
            key within the dataset. For example a value of "IMG_17" returns all JSON
            Lines where the `source-ref` key value matches _*IMG_17*_.
      required:
      - ProjectName
      - DatasetType
    ListDatasetEntriesResponse:
      type: object
      properties:
        DatasetEntries:
          allOf:
          - $ref: '#/components/schemas/DatasetEntryList'
          description: A list of the entries (JSON Lines) within the dataset.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If the response is truncated, Amazon Lookout for Vision returns
            this token that you can use in the subsequent request to retrieve the
            next set ofdataset entries.
    ListModelPackagingJobsRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project for which you want to list the model
            packaging jobs.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If the previous response was incomplete (because there is more
            results to retrieve), Amazon Lookout for Vision returns a pagination token
            in the response. You can use this pagination token to retrieve the next
            set of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of results to return per paginated call.
            The largest value you can specify is 100. If you specify a value greater
            than 100, a ValidationException error occurs. The default value is 100.
      required:
      - ProjectName
    ListModelPackagingJobsResponse:
      type: object
      properties:
        ModelPackagingJobs:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobsList'
          description: A list of the model packaging jobs created for the specified
            Amazon Lookout for Vision project.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If the previous response was incomplete (because there is more
            results to retrieve), Amazon Lookout for Vision returns a pagination token
            in the response. You can use this pagination token to retrieve the next
            set of results.
    ListModelsRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the model versions that
            you want to list.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If the previous response was incomplete (because there is more
            data to retrieve), Amazon Lookout for Vision returns a pagination token
            in the response. You can use this pagination token to retrieve the next
            set of models.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of results to return per paginated call.
            The largest value you can specify is 100. If you specify a value greater
            than 100, a ValidationException error occurs. The default value is 100.
      required:
      - ProjectName
    ListModelsResponse:
      type: object
      properties:
        Models:
          allOf:
          - $ref: '#/components/schemas/ModelMetadataList'
          description: A list of model versions in the specified project.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If the response is truncated, Amazon Lookout for Vision returns
            this token that you can use in the subsequent request to retrieve the
            next set of models.
    ListProjectsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If the previous response was incomplete (because there is more
            data to retrieve), Amazon Lookout for Vision returns a pagination token
            in the response. You can use this pagination token to retrieve the next
            set of projects.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/PageSize'
          description: The maximum number of results to return per paginated call.
            The largest value you can specify is 100. If you specify a value greater
            than 100, a ValidationException error occurs. The default value is 100.
    ListProjectsResponse:
      type: object
      properties:
        Projects:
          allOf:
          - $ref: '#/components/schemas/ProjectMetadataList'
          description: A list of projects in your AWS account.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If the response is truncated, Amazon Lookout for Vision returns
            this token that you can use in the subsequent request to retrieve the
            next set of projects.
    ListTagsForResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/TagArn'
          description: The Amazon Resource Name (ARN) of the model for which you want
            to list tags.
      required:
      - ResourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A map of tag keys and values attached to the specified model.
    ModelArn:
      type: string
    ModelDescription:
      type: object
      properties:
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          description: The version of the model
        ModelArn:
          allOf:
          - $ref: '#/components/schemas/ModelArn'
          description: The Amazon Resource Name (ARN) of the model.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The unix timestamp for the date and time that the model was
            created.
        Description:
          allOf:
          - $ref: '#/components/schemas/ModelDescriptionMessage'
          description: The description for the model.
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelStatus'
          description: The status of the model.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/ModelStatusMessage'
          description: The status message for the model.
        Performance:
          allOf:
          - $ref: '#/components/schemas/ModelPerformance'
          description: Performance metrics for the model. Created during training.
        OutputConfig:
          allOf:
          - $ref: '#/components/schemas/OutputConfig'
          description: The S3 location where Amazon Lookout for Vision saves model
            training files.
        EvaluationManifest:
          allOf:
          - $ref: '#/components/schemas/OutputS3Object'
          description: The S3 location where Amazon Lookout for Vision saves the manifest
            file that was used to test the trained model and generate the performance
            scores.
        EvaluationResult:
          allOf:
          - $ref: '#/components/schemas/OutputS3Object'
          description: The S3 location where Amazon Lookout for Vision saves the performance
            metrics.
        EvaluationEndTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The unix timestamp for the date and time that the evaluation
            ended.
        KmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          description: The identifer for the AWS Key Management Service (AWS KMS)
            key that was used to encrypt the model during training.
        MinInferenceUnits:
          allOf:
          - $ref: '#/components/schemas/InferenceUnits'
          description: The minimum number of inference units used by the model. For
            more information, see StartModel
        MaxInferenceUnits:
          allOf:
          - $ref: '#/components/schemas/InferenceUnits'
          description: The maximum number of inference units Amazon Lookout for Vision
            uses to auto-scale the model. For more information, see StartModel.
      description: Describes an Amazon Lookout for Vision model.
    ModelDescriptionMessage:
      type: string
      pattern: ^[0-9A-Za-z\.\-_]*$
      minLength: 1
      maxLength: 500
    ModelHostingStatus:
      type: string
      enum:
      - STARTING_HOSTING
      - HOSTED
      - HOSTING_FAILED
      - STOPPING_HOSTING
      - SYSTEM_UPDATING
    ModelMetadata:
      type: object
      properties:
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The unix timestamp for the date and time that the model was
            created.
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          description: The version of the model.
        ModelArn:
          allOf:
          - $ref: '#/components/schemas/ModelArn'
          description: The Amazon Resource Name (ARN) of the model.
        Description:
          allOf:
          - $ref: '#/components/schemas/ModelDescriptionMessage'
          description: The description for the model.
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelStatus'
          description: The status of the model.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/ModelStatusMessage'
          description: The status message for the model.
        Performance:
          allOf:
          - $ref: '#/components/schemas/ModelPerformance'
          description: Performance metrics for the model. Not available until training
            has successfully completed.
      description: Describes an Amazon Lookout for Vision model.
    ModelMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/ModelMetadata'
    ModelPackagingConfiguration:
      type: object
      properties:
        Greengrass:
          allOf:
          - $ref: '#/components/schemas/GreengrassConfiguration'
          description: Configuration information for the AWS IoT Greengrass component
            in a model packaging job.
      required:
      - Greengrass
      description: Configuration information for a Amazon Lookout for Vision model
        packaging job. For more information, see StartModelPackagingJob.
    ModelPackagingDescription:
      type: object
      properties:
        JobName:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobName'
          description: The name of the model packaging job.
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that's associated with a model that's
            in the model package.
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          description: The version of the model used in the model packaging job.
        ModelPackagingConfiguration:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingConfiguration'
          description: The configuration information used in the model packaging job.
        ModelPackagingJobDescription:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobDescription'
          description: The description for the model packaging job.
        ModelPackagingMethod:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingMethod'
          description: The AWS service used to package the job. Currently Lookout
            for Vision can package jobs with AWS IoT Greengrass.
        ModelPackagingOutputDetails:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingOutputDetails'
          description: Information about the output of the model packaging job. For
            more information, see DescribeModelPackagingJob.
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobStatus'
          description: The status of the model packaging job.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingStatusMessage'
          description: The status message for the model packaging job.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The Unix timestamp for the time and date that the model packaging
            job was created.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The Unix timestamp for the time and date that the model packaging
            job was last updated.
      description: Information about a model packaging job. For more information,
        see DescribeModelPackagingJob.
    ModelPackagingJobDescription:
      type: string
      pattern: ^[a-zA-Z0-9-_. ()':,;?]+$
      minLength: 1
      maxLength: 256
    ModelPackagingJobMetadata:
      type: object
      properties:
        JobName:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobName'
          description: The name of the model packaging job.
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The project that contains the model that is in the model package.
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          description: The version of the model that is in the model package.
        ModelPackagingJobDescription:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobDescription'
          description: The description for the model packaging job.
        ModelPackagingMethod:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingMethod'
          description: The AWS service used to package the job. Currently Lookout
            for Vision can package jobs with AWS IoT Greengrass.
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobStatus'
          description: The status of the model packaging job.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingStatusMessage'
          description: The status message for the model packaging job.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The Unix timestamp for the time and date that the model packaging
            job was created.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The Unix timestamp for the time and date that the model packaging
            job was last updated.
      description: Metadata for a model packaging job. For more information, see ListModelPackagingJobs.
    ModelPackagingJobName:
      type: string
      pattern: ^[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 64
    ModelPackagingJobStatus:
      type: string
      enum:
      - CREATED
      - RUNNING
      - SUCCEEDED
      - FAILED
    ModelPackagingJobsList:
      type: array
      items:
        $ref: '#/components/schemas/ModelPackagingJobMetadata'
    ModelPackagingMethod:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 1
      maxLength: 32
    ModelPackagingOutputDetails:
      type: object
      properties:
        Greengrass:
          allOf:
          - $ref: '#/components/schemas/GreengrassOutputDetails'
          description: Information about the AWS IoT Greengrass component in a model
            packaging job.
      description: Information about the output from a model packaging job.
    ModelPackagingStatusMessage:
      type: string
    ModelPerformance:
      type: object
      properties:
        F1Score:
          allOf:
          - $ref: '#/components/schemas/Float'
          description: The overall F1 score metric for the trained model.
        Recall:
          allOf:
          - $ref: '#/components/schemas/Float'
          description: The overall recall metric value for the trained model.
        Precision:
          allOf:
          - $ref: '#/components/schemas/Float'
          description: The overall precision metric value for the trained model.
      description: Information about the evaluation performance of a trained model.
    ModelStatus:
      type: string
      enum:
      - TRAINING
      - TRAINED
      - TRAINING_FAILED
      - STARTING_HOSTING
      - HOSTED
      - HOSTING_FAILED
      - STOPPING_HOSTING
      - SYSTEM_UPDATING
      - DELETING
    ModelStatusMessage:
      type: string
    ModelVersion:
      type: string
      pattern: ^([1-9][0-9]*|latest)$
      minLength: 1
      maxLength: 10
    ModelVersionNoLatest:
      type: string
      pattern: ^([1-9][0-9]*)$
      minLength: 1
      maxLength: 10
    OutputConfig:
      type: object
      properties:
        S3Location:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: The S3 location for the output.
      required:
      - S3Location
      description: The S3 location where Amazon Lookout for Vision saves model training
        files.
    OutputS3Object:
      type: object
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The bucket that contains the training output.
        Key:
          allOf:
          - $ref: '#/components/schemas/S3ObjectKey'
          description: The location of the training output in the bucket.
      required:
      - Bucket
      - Key
      description: The S3 location where Amazon Lookout for Vision saves training
        output.
    PageSize:
      type: integer
      minimum: 1
      maximum: 100
    PaginationToken:
      type: string
      pattern: ^[a-zA-Z0-9\/\+\=]{0,2048}$
      minLength: 0
      maxLength: 2048
    PixelAnomaly:
      type: object
      properties:
        TotalPercentageArea:
          allOf:
          - $ref: '#/components/schemas/Float'
          description: The percentage area of the image that the anomaly type covers.
        Color:
          allOf:
          - $ref: '#/components/schemas/Color'
          description: A hex color value for the mask that covers an anomaly type.
            Each anomaly type has a different mask color. The color maps to the color
            of the anomaly type used in the training dataset.
      description: Information about the pixels in an anomaly mask. For more information,
        see Anomaly. `PixelAnomaly` is only returned by image segmentation models.
    ProjectArn:
      type: string
    ProjectDescription:
      type: object
      properties:
        ProjectArn:
          allOf:
          - $ref: '#/components/schemas/ProjectArn'
          description: The Amazon Resource Name (ARN) of the project.
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The unix timestamp for the date and time that the project was
            created.
        Datasets:
          allOf:
          - $ref: '#/components/schemas/DatasetMetadataList'
          description: A list of datasets in the project.
      description: Describe an Amazon Lookout for Vision project. For more information,
        see DescribeProject.
    ProjectMetadata:
      type: object
      properties:
        ProjectArn:
          allOf:
          - $ref: '#/components/schemas/ProjectArn'
          description: The Amazon Resource Name (ARN) of the project.
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The unix timestamp for the date and time that the project was
            created.
      description: Metadata about an Amazon Lookout for Vision project.
    ProjectMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/ProjectMetadata'
    ProjectName:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9_\-]*$
      minLength: 1
      maxLength: 255
    QueryString:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 2048
    ResourceNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionString'
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/ExceptionString'
          description: The ID of the resource.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of the resource.
      required:
      - Message
      - ResourceId
      - ResourceType
      description: The resource could not be found.
    ResourceType:
      type: string
      enum:
      - PROJECT
      - DATASET
      - MODEL
      - TRIAL
      - MODEL_PACKAGE_JOB
    RetryAfterSeconds:
      type: integer
    S3BucketName:
      type: string
      pattern: ^[0-9A-Za-z\.\-_]*$
      minLength: 3
      maxLength: 63
    S3KeyPrefix:
      type: string
      pattern: ^([a-zA-Z0-9!_.*'()-][/a-zA-Z0-9!_.*'()-]*)?$
      minLength: 0
      maxLength: 1024
    S3Location:
      type: object
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The S3 bucket that contains the training or model packaging
            job output. If you are training a model, the bucket must in your AWS account.
            If you use an S3 bucket for a model packaging job, the S3 bucket must
            be in the same AWS Region and AWS account in which you use AWS IoT Greengrass.
        Prefix:
          allOf:
          - $ref: '#/components/schemas/S3KeyPrefix'
          description: The path of the folder, within the S3 bucket, that contains
            the output.
      required:
      - Bucket
      description: Information about the location of training output or the output
        of a model packaging job.
    S3ObjectKey:
      type: string
      pattern: ^([a-zA-Z0-9!_.*'()-][/a-zA-Z0-9!_.*'()-]*)?$
      minLength: 1
      maxLength: 1024
    S3ObjectVersion:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 1024
    ServiceQuotaExceededException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionString'
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/ExceptionString'
          description: The ID of the resource.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of the resource.
        QuotaCode:
          allOf:
          - $ref: '#/components/schemas/ExceptionString'
          description: The quota code.
        ServiceCode:
          allOf:
          - $ref: '#/components/schemas/ExceptionString'
          description: The service code.
      required:
      - Message
      - QuotaCode
      - ServiceCode
      description: A service quota was exceeded the allowed limit. For more information,
        see Limits in Amazon Lookout for Vision in the Amazon Lookout for Vision Developer
        Guide.
    StartModelPackagingJobRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project which contains the version of the model
            that you want to package.
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          description: The version of the model within the project that you want to
            package.
        JobName:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobName'
          description: A name for the model packaging job. If you don't supply a value,
            the service creates a job name for you.
        Configuration:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingConfiguration'
          description: The configuration for the model packaging job.
        Description:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobDescription'
          description: A description for the model packaging job.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'ClientToken is an idempotency token that ensures a call to
            `StartModelPackagingJob` completes only once. You choose the value to
            pass. For example, An issue might prevent you from getting a response
            from `StartModelPackagingJob`. In this case, safely retry your call to
            `StartModelPackagingJob` by using the same `ClientToken` parameter value.


            If you don''t supply a value for `ClientToken`, the AWS SDK you are using
            inserts a value for you. This prevents retries after a network error from
            making multiple dataset creation requests. You''ll need to provide your
            own value for other use cases.


            An error occurs if the other input parameters are not the same as in the
            first request. Using a different value for `ClientToken` is considered
            a new call to `StartModelPackagingJob`. An idempotency token is active
            for 8 hours.'
      required:
      - ProjectName
      - ModelVersion
      - Configuration
    StartModelPackagingJobResponse:
      type: object
      properties:
        JobName:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobName'
          description: The job name for the model packaging job. If you don't supply
            a job name in the `JobName` input parameter, the service creates a job
            name for you.
    StartModelRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the model that you want
            to start.
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          description: The version of the model that you want to start.
        MinInferenceUnits:
          allOf:
          - $ref: '#/components/schemas/InferenceUnits'
          description: The minimum number of inference units to use. A single inference
            unit represents 1 hour of processing. Use a higher number to increase
            the TPS throughput of your model. You are charged for the number of inference
            units that you use.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'ClientToken is an idempotency token that ensures a call to
            `StartModel` completes only once. You choose the value to pass. For example,
            An issue might prevent you from getting a response from `StartModel`.
            In this case, safely retry your call to `StartModel` by using the same
            `ClientToken` parameter value.


            If you don''t supply a value for `ClientToken`, the AWS SDK you are using
            inserts a value for you. This prevents retries after a network error from
            making multiple start requests. You''ll need to provide your own value
            for other use cases.


            An error occurs if the other input parameters are not the same as in the
            first request. Using a different value for `ClientToken` is considered
            a new call to `StartModel`. An idempotency token is active for 8 hours.'
        MaxInferenceUnits:
          allOf:
          - $ref: '#/components/schemas/InferenceUnits'
          description: The maximum number of inference units to use for auto-scaling
            the model. If you don't specify a value, Amazon Lookout for Vision doesn't
            auto-scale the model.
      required:
      - ProjectName
      - ModelVersion
      - MinInferenceUnits
    StartModelResponse:
      type: object
      properties:
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelHostingStatus'
          description: The current running status of the model.
    StopModelRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the model that you want
            to stop.
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          description: The version of the model that you want to stop.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'ClientToken is an idempotency token that ensures a call to
            `StopModel` completes only once. You choose the value to pass. For example,
            An issue might prevent you from getting a response from `StopModel`. In
            this case, safely retry your call to `StopModel` by using the same `ClientToken`
            parameter value.


            If you don''t supply a value for `ClientToken`, the AWS SDK you are using
            inserts a value for you. This prevents retries after a network error from
            making multiple stop requests. You''ll need to provide your own value
            for other use cases.


            An error occurs if the other input parameters are not the same as in the
            first request. Using a different value for `ClientToken` is considered
            a new call to `StopModel`. An idempotency token is active for 8 hours.'
      required:
      - ProjectName
      - ModelVersion
    StopModelResponse:
      type: object
      properties:
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelHostingStatus'
          description: The status of the model.
    Stream:
      type: string
      format: byte
    Tag:
      type: object
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          description: The key of the tag that is attached to the specified model.
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: The value of the tag that is attached to the specified model.
      required:
      - Key
      - Value
      description: A key and value pair that is attached to the specified Amazon Lookout
        for Vision model.
    TagArn:
      type: string
      minLength: 1
      maxLength: 1011
    TagKey:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    TagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/TagArn'
          description: The Amazon Resource Name (ARN) of the model to assign the tags.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: The key-value tags to assign to the model.
      required:
      - ResourceArn
      - Tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 0
      maxLength: 256
    TargetDevice:
      type: string
      enum:
      - jetson_xavier
    TargetPlatform:
      type: object
      properties:
        Os:
          allOf:
          - $ref: '#/components/schemas/TargetPlatformOs'
          description: The target operating system for the model. Linux is the only
            operating system that is currently supported.
        Arch:
          allOf:
          - $ref: '#/components/schemas/TargetPlatformArch'
          description: The target architecture for the model. The currently supported
            architectures are X86_64 (64-bit version of the x86 instruction set) and
            ARM_64 (ARMv8 64-bit CPU).
        Accelerator:
          allOf:
          - $ref: '#/components/schemas/TargetPlatformAccelerator'
          description: "The target accelerator for the model. Currently, Amazon Lookout\
            \ for Vision only supports NVIDIA (Nvidia graphics processing unit) and\
            \ CPU accelerators. If you specify NVIDIA as an accelerator, you must\
            \ also specify the `gpu-code`, `trt-ver`, and `cuda-ver` compiler options.\
            \ If you don't specify an accelerator, Lookout for Vision uses the CPU\
            \ for compilation and we highly recommend that you use the GreengrassConfiguration$CompilerOptions\
            \ field. For example, you can use the following compiler options for CPU:\n\
            \n  * `mcpu`: CPU micro-architecture. For example, `{'mcpu': 'skylake-avx512'}`\n\
            \n  * `mattr`: CPU flags. For example, `{'mattr': ['+neon', '+vfpv4']}`"
      required:
      - Os
      - Arch
      description: The platform on which a model runs on an AWS IoT Greengrass core
        device.
    TargetPlatformAccelerator:
      type: string
      enum:
      - NVIDIA
    TargetPlatformArch:
      type: string
      enum:
      - ARM64
      - X86_64
    TargetPlatformOs:
      type: string
      enum:
      - LINUX
    ThrottlingException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionString'
        QuotaCode:
          allOf:
          - $ref: '#/components/schemas/ExceptionString'
          description: The quota code.
        ServiceCode:
          allOf:
          - $ref: '#/components/schemas/ExceptionString'
          description: The service code.
        RetryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/RetryAfterSeconds'
          description: The period of time, in seconds, before the operation can be
            retried.
      required:
      - Message
      description: Amazon Lookout for Vision is temporarily unable to process the
        request. Try your call again.
    UntagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/TagArn'
          description: The Amazon Resource Name (ARN) of the model from which you
            want to remove tags.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of the keys of the tags that you want to remove.
      required:
      - ResourceArn
      - TagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateDatasetEntriesRequest:
      type: object
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project that contains the dataset that you
            want to update.
        DatasetType:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          description: The type of the dataset that you want to update. Specify `train`
            to update the training dataset. Specify `test` to update the test dataset.
            If you have a single dataset project, specify `train`.
        Changes:
          allOf:
          - $ref: '#/components/schemas/DatasetChanges'
          description: The entries to add to the dataset.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'ClientToken is an idempotency token that ensures a call to
            `UpdateDatasetEntries` completes only once. You choose the value to pass.
            For example, An issue might prevent you from getting a response from `UpdateDatasetEntries`.
            In this case, safely retry your call to `UpdateDatasetEntries` by using
            the same `ClientToken` parameter value.


            If you don''t supply a value for `ClientToken`, the AWS SDK you are using
            inserts a value for you. This prevents retries after a network error from
            making multiple updates with the same dataset entries. You''ll need to
            provide your own value for other use cases.


            An error occurs if the other input parameters are not the same as in the
            first request. Using a different value for `ClientToken` is considered
            a new call to `UpdateDatasetEntries`. An idempotency token is active for
            8 hours.'
      required:
      - ProjectName
      - DatasetType
      - Changes
    UpdateDatasetEntriesResponse:
      type: object
      properties:
        Status:
          allOf:
          - $ref: '#/components/schemas/DatasetStatus'
          description: The status of the dataset update.
    ValidationException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionString'
      required:
      - Message
      description: An input validation error occured. For example, invalid characters
        in a project name, or if a pagination token is invalid.
