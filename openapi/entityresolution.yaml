openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: entityresolution
  x-aws-serviceName: entityresolution
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-05-10'
  title: AWS EntityResolution
  description: |-
    Welcome to the _Entity Resolution API Reference_.

    Entity Resolution is an Amazon Web Services service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.

    With Entity Resolution, you can match source records containing consumer identifiers, such as name, email address, and phone number. This is true even when these records have incomplete or conflicting identifiers. For example, Entity Resolution can effectively match a source record from a customer relationship management (CRM) system with a source record from a marketing system containing campaign information.

    To learn more about Entity Resolution concepts, procedures, and best practices, see the [Entity Resolution User Guide](https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html).
servers:
- description: The AWS EntityResolution regional endpoint
  url: https://entityresolution.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /policies/{arn}/{statementId}:
    post:
      operationId: AddPolicyStatement
      description: |-
        Adds a policy statement object. To retrieve a list of existing policy statements, use the `GetPolicy` API.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VeniceGlobalArn'
      - name: statementId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatementId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                effect:
                  $ref: '#/components/schemas/StatementEffect'
                action:
                  $ref: '#/components/schemas/StatementActionList'
                principal:
                  $ref: '#/components/schemas/StatementPrincipalList'
                condition:
                  $ref: '#/components/schemas/StatementCondition'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    delete:
      operationId: DeletePolicyStatement
      description: |-
        Deletes the policy statement.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VeniceGlobalArn'
      - name: statementId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatementId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /matchingworkflows/{workflowName}/uniqueids:
    delete:
      operationId: BatchDeleteUniqueId
      description: |-
        Deletes multiple unique IDs in a matching workflow.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      - name: inputSource
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: uniqueIds
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/UniqueIdList'
      responses:
        '200': {}
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /idmappingworkflows:
    post:
      operationId: CreateIdMappingWorkflow
      description: |-
        Creates an `IdMappingWorkflow` object which stores the configuration of the data processing job to be run. Each `IdMappingWorkflow` must have a unique workflow name. To modify an existing workflow, use the `UpdateIdMappingWorkflow` API.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workflowName:
                  $ref: '#/components/schemas/EntityName'
                description:
                  $ref: '#/components/schemas/Description'
                inputSourceConfig:
                  $ref: '#/components/schemas/IdMappingWorkflowInputSourceConfig'
                outputSourceConfig:
                  $ref: '#/components/schemas/IdMappingWorkflowOutputSourceConfig'
                idMappingTechniques:
                  $ref: '#/components/schemas/IdMappingTechniques'
                roleArn:
                  $ref: '#/components/schemas/IdMappingRoleArn'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '402':
          description: |-
            The request was rejected because it attempted to create resources beyond the current Entity Resolution account limits. The error message describes the limit exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceedsLimitException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListIdMappingWorkflows
      description: |-
        Returns a list of all the `IdMappingWorkflows` that have been created for an Amazon Web Services account.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /idnamespaces:
    post:
      operationId: CreateIdNamespace
      description: |-
        Creates an ID namespace object which will help customers provide metadata explaining their dataset and how to use it. Each ID namespace must have a unique name. To modify an existing ID namespace, use the `UpdateIdNamespace` API.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idNamespaceName:
                  $ref: '#/components/schemas/EntityName'
                description:
                  $ref: '#/components/schemas/Description'
                inputSourceConfig:
                  $ref: '#/components/schemas/IdNamespaceInputSourceConfig'
                idMappingWorkflowProperties:
                  $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowPropertiesList'
                type:
                  $ref: '#/components/schemas/IdNamespaceType'
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '402':
          description: |-
            The request was rejected because it attempted to create resources beyond the current Entity Resolution account limits. The error message describes the limit exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceedsLimitException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListIdNamespaces
      description: |-
        Returns a list of all ID namespaces.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /matchingworkflows:
    post:
      operationId: CreateMatchingWorkflow
      description: |-
        Creates a `MatchingWorkflow` object which stores the configuration of the data processing job to be run. It is important to note that there should not be a pre-existing `MatchingWorkflow` with the same name. To modify an existing workflow, utilize the `UpdateMatchingWorkflow` API.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workflowName:
                  $ref: '#/components/schemas/EntityName'
                description:
                  $ref: '#/components/schemas/Description'
                inputSourceConfig:
                  $ref: '#/components/schemas/InputSourceConfig'
                outputSourceConfig:
                  $ref: '#/components/schemas/OutputSourceConfig'
                resolutionTechniques:
                  $ref: '#/components/schemas/ResolutionTechniques'
                incrementalRunConfig:
                  $ref: '#/components/schemas/IncrementalRunConfig'
                roleArn:
                  $ref: '#/components/schemas/String'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '402':
          description: |-
            The request was rejected because it attempted to create resources beyond the current Entity Resolution account limits. The error message describes the limit exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceedsLimitException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListMatchingWorkflows
      description: |-
        Returns a list of all the `MatchingWorkflows` that have been created for an Amazon Web Services account.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /schemas:
    post:
      operationId: CreateSchemaMapping
      description: |-
        Creates a schema mapping, which defines the schema of the input customer records table. The `SchemaMapping` also provides Entity Resolution with some metadata about the table, such as the attribute types of the columns and which columns to match on.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                schemaName:
                  $ref: '#/components/schemas/EntityName'
                description:
                  $ref: '#/components/schemas/Description'
                mappedInputFields:
                  $ref: '#/components/schemas/SchemaInputAttributes'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '402':
          description: |-
            The request was rejected because it attempted to create resources beyond the current Entity Resolution account limits. The error message describes the limit exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceedsLimitException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListSchemaMappings
      description: |-
        Returns a list of all the `SchemaMappings` that have been created for an Amazon Web Services account.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /idmappingworkflows/{workflowName}:
    delete:
      operationId: DeleteIdMappingWorkflow
      description: |-
        Deletes the `IdMappingWorkflow` with a given name. This operation will succeed even if a workflow with the given name does not exist.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetIdMappingWorkflow
      description: |-
        Returns the `IdMappingWorkflow` with a given name, if it exists.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateIdMappingWorkflow
      description: |-
        Updates an existing `IdMappingWorkflow`. This method is identical to `CreateIdMappingWorkflow`, except it uses an HTTP `PUT` request instead of a `POST` request, and the `IdMappingWorkflow` must already exist for the method to succeed.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                inputSourceConfig:
                  $ref: '#/components/schemas/IdMappingWorkflowInputSourceConfig'
                outputSourceConfig:
                  $ref: '#/components/schemas/IdMappingWorkflowOutputSourceConfig'
                idMappingTechniques:
                  $ref: '#/components/schemas/IdMappingTechniques'
                roleArn:
                  $ref: '#/components/schemas/IdMappingRoleArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /idnamespaces/{idNamespaceName}:
    delete:
      operationId: DeleteIdNamespace
      description: |-
        Deletes the `IdNamespace` with a given name.
      parameters:
      - name: idNamespaceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetIdNamespace
      description: |-
        Returns the `IdNamespace` with a given name, if it exists.
      parameters:
      - name: idNamespaceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityNameOrIdNamespaceArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateIdNamespace
      description: |-
        Updates an existing ID namespace.
      parameters:
      - name: idNamespaceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                inputSourceConfig:
                  $ref: '#/components/schemas/IdNamespaceInputSourceConfig'
                idMappingWorkflowProperties:
                  $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowPropertiesList'
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /matchingworkflows/{workflowName}:
    delete:
      operationId: DeleteMatchingWorkflow
      description: |-
        Deletes the `MatchingWorkflow` with a given name. This operation will succeed even if a workflow with the given name does not exist.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetMatchingWorkflow
      description: |-
        Returns the `MatchingWorkflow` with a given name, if it exists.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateMatchingWorkflow
      description: |-
        Updates an existing `MatchingWorkflow`. This method is identical to `CreateMatchingWorkflow`, except it uses an HTTP `PUT` request instead of a `POST` request, and the `MatchingWorkflow` must already exist for the method to succeed.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                inputSourceConfig:
                  $ref: '#/components/schemas/InputSourceConfig'
                outputSourceConfig:
                  $ref: '#/components/schemas/OutputSourceConfig'
                resolutionTechniques:
                  $ref: '#/components/schemas/ResolutionTechniques'
                incrementalRunConfig:
                  $ref: '#/components/schemas/IncrementalRunConfig'
                roleArn:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /schemas/{schemaName}:
    delete:
      operationId: DeleteSchemaMapping
      description: |-
        Deletes the `SchemaMapping` with a given name. This operation will succeed even if a schema with the given name does not exist. This operation will fail if there is a `MatchingWorkflow` object that references the `SchemaMapping` in the workflow's `InputSourceConfig`.
      parameters:
      - name: schemaName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetSchemaMapping
      description: |-
        Returns the SchemaMapping of a given name.
      parameters:
      - name: schemaName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateSchemaMapping
      description: |-
        Updates a schema mapping.

        A schema is immutable if it is being used by a workflow. Therefore, you can't update a schema mapping if it's associated with a workflow.
      parameters:
      - name: schemaName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                mappedInputFields:
                  $ref: '#/components/schemas/SchemaInputAttributes'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /idmappingworkflows/{workflowName}/jobs/{jobId}:
    get:
      operationId: GetIdMappingJob
      description: |-
        Gets the status, metrics, and errors (if there are any) that are associated with a job.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityNameOrIdMappingWorkflowArn'
      - name: jobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/JobId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /matchingworkflows/{workflowName}/matches:
    post:
      operationId: GetMatchId
      description: |-
        Returns the corresponding Match ID of a customer record if the record has been processed in a rule-based matching workflow or ML matching workflow.

        You can call this API as a dry run of an incremental load on the rule-based matching workflow.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                record:
                  $ref: '#/components/schemas/RecordAttributeMap'
                applyNormalization:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /matchingworkflows/{workflowName}/jobs/{jobId}:
    get:
      operationId: GetMatchingJob
      description: |-
        Gets the status, metrics, and errors (if there are any) that are associated with a job.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      - name: jobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/JobId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /policies/{arn}:
    get:
      operationId: GetPolicy
      description: |-
        Returns the resource-based policy.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VeniceGlobalArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutPolicy
      description: |-
        Updates the resource-based policy.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VeniceGlobalArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  $ref: '#/components/schemas/PolicyToken'
                policy:
                  $ref: '#/components/schemas/PolicyDocument'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /providerservices/{providerName}/{providerServiceName}:
    get:
      operationId: GetProviderService
      description: |-
        Returns the `ProviderService` of a given name.
      parameters:
      - name: providerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      - name: providerServiceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProviderServiceArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /idmappingworkflows/{workflowName}/jobs:
    get:
      operationId: ListIdMappingJobs
      description: |-
        Lists all ID mapping jobs for a given workflow.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityNameOrIdMappingWorkflowArn'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartIdMappingJob
      description: |-
        Starts the `IdMappingJob` of a workflow. The workflow must have previously been created using the `CreateIdMappingWorkflow` endpoint.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityNameOrIdMappingWorkflowArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                outputSourceConfig:
                  $ref: '#/components/schemas/IdMappingJobOutputSourceConfig'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '402':
          description: |-
            The request was rejected because it attempted to create resources beyond the current Entity Resolution account limits. The error message describes the limit exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceedsLimitException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /matchingworkflows/{workflowName}/jobs:
    get:
      operationId: ListMatchingJobs
      description: |-
        Lists all jobs for a given workflow.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartMatchingJob
      description: |-
        Starts the `MatchingJob` of a workflow. The workflow must have previously been created using the `CreateMatchingWorkflow` endpoint.
      parameters:
      - name: workflowName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '402':
          description: |-
            The request was rejected because it attempted to create resources beyond the current Entity Resolution account limits. The error message describes the limit exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceedsLimitException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /providerservices:
    get:
      operationId: ListProviderServices
      description: |-
        Returns a list of all the `ProviderServices` that are available in this Amazon Web Services Region.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: providerName
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EntityName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Displays the tags associated with an Entity Resolution resource. In Entity Resolution, `SchemaMapping`, and `MatchingWorkflow` can be tagged.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VeniceGlobalArn'
      responses:
        '200': {}
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Assigns one or more tags (key-value pairs) to the specified Entity Resolution resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Entity Resolution, `SchemaMapping` and `MatchingWorkflow` can be tagged. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can use the `TagResource` action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VeniceGlobalArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by Entity Resolution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes one or more tags from the specified Entity Resolution resource. In Entity Resolution, `SchemaMapping`, and `MatchingWorkflow` can be tagged.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VeniceGlobalArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: |-
            This exception occurs when there is an internal failure in the Entity Resolution service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You do not have sufficient access to perform this action.
    AddPolicyStatementInput:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The Amazon Resource Name (ARN) of the resource that will be
            accessed by the principal.
        statementId:
          allOf:
          - $ref: '#/components/schemas/StatementId'
          description: A statement identifier that differentiates the statement from
            others in the same policy.
        effect:
          allOf:
          - $ref: '#/components/schemas/StatementEffect'
          description: 'Determines whether the permissions specified in the policy
            are to be allowed (`Allow`) or denied (`Deny`).


            If you set the value of the `effect` parameter to `Deny` for the `AddPolicyStatement`
            operation, you must also set the value of the `effect` parameter in the
            `policy` to `Deny` for the `PutPolicy` operation.'
        action:
          allOf:
          - $ref: '#/components/schemas/StatementActionList'
          description: 'The action that the principal can use on the resource.


            For example, `entityresolution:GetIdMappingJob`, `entityresolution:GetMatchingJob`.'
        principal:
          allOf:
          - $ref: '#/components/schemas/StatementPrincipalList'
          description: The Amazon Web Services service or Amazon Web Services account
            that can access the resource defined as ARN.
        condition:
          allOf:
          - $ref: '#/components/schemas/StatementCondition'
          description: A set of condition keys that you can use in key policies.
      required:
      - arn
      - statementId
      - effect
      - action
      - principal
    AddPolicyStatementOutput:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The Amazon Resource Name (ARN) of the resource that will be
            accessed by the principal.
        token:
          allOf:
          - $ref: '#/components/schemas/PolicyToken'
          description: A unique identifier for the current revision of the policy.
        policy:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: The resource-based policy.
      required:
      - arn
      - token
    AttributeMatchingModel:
      type: string
      enum:
      - ONE_TO_ONE
      - MANY_TO_MANY
    AttributeName:
      type: string
      pattern: ^[a-zA-Z_0-9- ]*$
      maxLength: 255
    AwsAccountId:
      type: string
      pattern: ^\d{12}$
    AwsAccountIdList:
      type: array
      items:
        $ref: '#/components/schemas/AwsAccountId'
    BatchDeleteUniqueIdInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        inputSource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The input source for the batch delete unique ID operation.
        uniqueIds:
          allOf:
          - $ref: '#/components/schemas/UniqueIdList'
          description: The unique IDs to delete.
      required:
      - workflowName
      - uniqueIds
    BatchDeleteUniqueIdOutput:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/DeleteUniqueIdStatus'
          description: The status of the batch delete unique ID operation.
        errors:
          allOf:
          - $ref: '#/components/schemas/DeleteUniqueIdErrorsList'
          description: The errors from deleting multiple unique IDs.
        deleted:
          allOf:
          - $ref: '#/components/schemas/DeletedUniqueIdList'
          description: The unique IDs that were deleted.
        disconnectedUniqueIds:
          allOf:
          - $ref: '#/components/schemas/DisconnectedUniqueIdsList'
          description: The unique IDs that were disconnected.
      required:
      - status
      - errors
      - deleted
      - disconnectedUniqueIds
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: 'The request could not be processed because of conflict in the
        current state of the resource. Example: Workflow already exists, Schema already
        exists, Workflow is currently running, etc.'
    CreateIdMappingWorkflowInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow. There can't be multiple `IdMappingWorkflows`
            with the same name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the workflow.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowInputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowOutputSourceConfig'
          description: A list of `IdMappingWorkflowOutputSource` objects, each of
            which contains fields `OutputS3Path` and `Output`.
        idMappingTechniques:
          allOf:
          - $ref: '#/components/schemas/IdMappingTechniques'
          description: An object which defines the ID mapping technique and any additional
            configurations.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IdMappingRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to create resources on your behalf as part of workflow
            execution.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - workflowName
      - inputSourceConfig
      - idMappingTechniques
    CreateIdMappingWorkflowOutput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        workflowArn:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the `IDMappingWorkflow`.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the workflow.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowInputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowOutputSourceConfig'
          description: A list of `IdMappingWorkflowOutputSource` objects, each of
            which contains fields `OutputS3Path` and `Output`.
        idMappingTechniques:
          allOf:
          - $ref: '#/components/schemas/IdMappingTechniques'
          description: An object which defines the ID mapping technique and any additional
            configurations.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IdMappingRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to create resources on your behalf as part of workflow
            execution.
      required:
      - workflowName
      - workflowArn
      - inputSourceConfig
      - idMappingTechniques
    CreateIdNamespaceInput:
      type: object
      properties:
        idNamespaceName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the ID namespace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the ID namespace.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceInputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        idMappingWorkflowProperties:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowPropertiesList'
          description: Determines the properties of `IdMappingWorflow` where this
            `IdNamespace` can be used as a `Source` or a `Target`.
        type:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceType'
          description: 'The type of ID namespace. There are two types: `SOURCE` and
            `TARGET`.


            The `SOURCE` contains configurations for `sourceId` data that will be
            processed in an ID mapping workflow.


            The `TARGET` contains a configuration of `targetId` to which all `sourceIds`
            will resolve to.'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access the resources defined in this `IdNamespace`
            on your behalf as part of the workflow run.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - idNamespaceName
      - type
    CreateIdNamespaceOutput:
      type: object
      properties:
        idNamespaceName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the ID namespace.
        idNamespaceArn:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceArn'
          description: The Amazon Resource Name (ARN) of the ID namespace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the ID namespace.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceInputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        idMappingWorkflowProperties:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowPropertiesList'
          description: Determines the properties of `IdMappingWorkflow` where this
            `IdNamespace` can be used as a `Source` or a `Target`.
        type:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceType'
          description: 'The type of ID namespace. There are two types: `SOURCE` and
            `TARGET`.


            The `SOURCE` contains configurations for `sourceId` data that will be
            processed in an ID mapping workflow.


            The `TARGET` contains a configuration of `targetId` to which all `sourceIds`
            will resolve to.'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access the resources defined in `inputSourceConfig`
            on your behalf as part of the workflow run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the ID namespace was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the ID namespace was last updated.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - idNamespaceName
      - idNamespaceArn
      - type
      - createdAt
      - updatedAt
    CreateMatchingWorkflowInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow. There can't be multiple `MatchingWorkflows`
            with the same name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the workflow.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/InputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/OutputSourceConfig'
          description: A list of `OutputSource` objects, each of which contains fields
            `OutputS3Path`, `ApplyNormalization`, and `Output`.
        resolutionTechniques:
          allOf:
          - $ref: '#/components/schemas/ResolutionTechniques'
          description: An object which defines the `resolutionType` and the `ruleBasedProperties`.
        incrementalRunConfig:
          allOf:
          - $ref: '#/components/schemas/IncrementalRunConfig'
          description: An object which defines an incremental run type and has only
            `incrementalRunType` as a field.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to create resources on your behalf as part of workflow
            execution.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - workflowName
      - inputSourceConfig
      - outputSourceConfig
      - resolutionTechniques
      - roleArn
    CreateMatchingWorkflowOutput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        workflowArn:
          allOf:
          - $ref: '#/components/schemas/MatchingWorkflowArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the `MatchingWorkflow`.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the workflow.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/InputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/OutputSourceConfig'
          description: A list of `OutputSource` objects, each of which contains fields
            `OutputS3Path`, `ApplyNormalization`, and `Output`.
        resolutionTechniques:
          allOf:
          - $ref: '#/components/schemas/ResolutionTechniques'
          description: An object which defines the `resolutionType` and the `ruleBasedProperties`.
        incrementalRunConfig:
          allOf:
          - $ref: '#/components/schemas/IncrementalRunConfig'
          description: An object which defines an incremental run type and has only
            `incrementalRunType` as a field.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to create resources on your behalf as part of workflow
            execution.
      required:
      - workflowName
      - workflowArn
      - inputSourceConfig
      - outputSourceConfig
      - resolutionTechniques
      - roleArn
    CreateSchemaMappingInput:
      type: object
      properties:
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema. There can't be multiple `SchemaMappings`
            with the same name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the schema.
        mappedInputFields:
          allOf:
          - $ref: '#/components/schemas/SchemaInputAttributes'
          description: A list of `MappedInputFields`. Each `MappedInputField` corresponds
            to a column the source data table, and contains column name plus additional
            information that Entity Resolution uses for matching.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - schemaName
      - mappedInputFields
    CreateSchemaMappingOutput:
      type: object
      properties:
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema.
        schemaArn:
          allOf:
          - $ref: '#/components/schemas/SchemaMappingArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the `SchemaMapping`.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the schema.
        mappedInputFields:
          allOf:
          - $ref: '#/components/schemas/SchemaInputAttributes'
          description: A list of `MappedInputFields`. Each `MappedInputField` corresponds
            to a column the source data table, and contains column name plus additional
            information that Entity Resolution uses for matching.
      required:
      - schemaName
      - schemaArn
      - description
      - mappedInputFields
    DeleteIdMappingWorkflowInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow to be deleted.
      required:
      - workflowName
    DeleteIdMappingWorkflowOutput:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A successful operation message.
      required:
      - message
    DeleteIdNamespaceInput:
      type: object
      properties:
        idNamespaceName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the ID namespace.
      required:
      - idNamespaceName
    DeleteIdNamespaceOutput:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A successful operation message.
      required:
      - message
    DeleteMatchingWorkflowInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow to be retrieved.
      required:
      - workflowName
    DeleteMatchingWorkflowOutput:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A successful operation message.
      required:
      - message
    DeletePolicyStatementInput:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The ARN of the resource for which the policy need to be deleted.
        statementId:
          allOf:
          - $ref: '#/components/schemas/StatementId'
          description: A statement identifier that differentiates the statement from
            others in the same policy.
      required:
      - arn
      - statementId
    DeletePolicyStatementOutput:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The ARN of the resource for which the policy need to be deleted.
        token:
          allOf:
          - $ref: '#/components/schemas/PolicyToken'
          description: A unique identifier for the deleted policy.
        policy:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: The resource-based policy.
      required:
      - arn
      - token
    DeleteSchemaMappingInput:
      type: object
      properties:
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema to delete.
      required:
      - schemaName
    DeleteSchemaMappingOutput:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A successful operation message.
      required:
      - message
    DeleteUniqueIdError:
      type: object
      properties:
        uniqueId:
          allOf:
          - $ref: '#/components/schemas/HeaderSafeUniqueId'
          description: The unique ID that could not be deleted.
        errorType:
          allOf:
          - $ref: '#/components/schemas/DeleteUniqueIdErrorType'
          description: The error type for the batch delete unique ID operation.
      required:
      - uniqueId
      - errorType
      description: The Delete Unique Id error.
    DeleteUniqueIdErrorType:
      type: string
      enum:
      - SERVICE_ERROR
      - VALIDATION_ERROR
    DeleteUniqueIdErrorsList:
      type: array
      items:
        $ref: '#/components/schemas/DeleteUniqueIdError'
    DeleteUniqueIdStatus:
      type: string
      enum:
      - COMPLETED
      - ACCEPTED
    DeletedUniqueId:
      type: object
      properties:
        uniqueId:
          allOf:
          - $ref: '#/components/schemas/HeaderSafeUniqueId'
          description: The unique ID of the deleted item.
      required:
      - uniqueId
      description: The deleted unique ID.
    DeletedUniqueIdList:
      type: array
      items:
        $ref: '#/components/schemas/DeletedUniqueId'
    Description:
      type: string
      maxLength: 255
    DisconnectedUniqueIdsList:
      type: array
      items:
        $ref: '#/components/schemas/HeaderSafeUniqueId'
    EntityName:
      type: string
      pattern: ^[a-zA-Z_0-9-]*$
      minLength: 1
      maxLength: 255
    EntityNameOrIdMappingWorkflowArn:
      type: string
      pattern: ^[a-zA-Z_0-9-=+/]*$|^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(idmappingworkflow/[a-zA-Z_0-9-]{1,255})$
    EntityNameOrIdNamespaceArn:
      type: string
      pattern: ^[a-zA-Z_0-9-=+/]*$|^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(idnamespace/[a-zA-Z_0-9-]{1,255})$
    ErrorDetails:
      type: object
      properties:
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The error message from the job, if there is one.
      description: An object containing an error message, if there was an error.
    ErrorMessage:
      type: string
      minLength: 1
      maxLength: 2048
    ExceedsLimitException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        quotaName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the quota that has been breached.
        quotaValue:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The current quota value for the customers.
      description: The request was rejected because it attempted to create resources
        beyond the current Entity Resolution account limits. The error message describes
        the limit exceeded.
    GetIdMappingJobInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityNameOrIdMappingWorkflowArn'
          description: The name of the workflow.
        jobId:
          allOf:
          - $ref: '#/components/schemas/JobId'
          description: The ID of the job.
      required:
      - workflowName
      - jobId
    GetIdMappingJobOutput:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/JobId'
          description: The ID of the job.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The current status of the job.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the job was started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the job has finished.
        metrics:
          allOf:
          - $ref: '#/components/schemas/IdMappingJobMetrics'
          description: Metrics associated with the execution, specifically total records
            processed, unique IDs generated, and records the execution skipped.
        errorDetails:
          $ref: '#/components/schemas/ErrorDetails'
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingJobOutputSourceConfig'
          description: A list of `OutputSource` objects.
      required:
      - jobId
      - status
      - startTime
    GetIdMappingWorkflowInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
      required:
      - workflowName
    GetIdMappingWorkflowOutput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        workflowArn:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the `IdMappingWorkflow` .
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the workflow.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowInputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowOutputSourceConfig'
          description: A list of `OutputSource` objects, each of which contains fields
            `OutputS3Path` and `KMSArn`.
        idMappingTechniques:
          allOf:
          - $ref: '#/components/schemas/IdMappingTechniques'
          description: An object which defines the ID mapping technique and any additional
            configurations.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the workflow was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the workflow was last updated.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IdMappingRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access Amazon Web Services resources on your behalf.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - workflowName
      - workflowArn
      - inputSourceConfig
      - idMappingTechniques
      - createdAt
      - updatedAt
    GetIdNamespaceInput:
      type: object
      properties:
        idNamespaceName:
          allOf:
          - $ref: '#/components/schemas/EntityNameOrIdNamespaceArn'
          description: The name of the ID namespace.
      required:
      - idNamespaceName
    GetIdNamespaceOutput:
      type: object
      properties:
        idNamespaceName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the ID namespace.
        idNamespaceArn:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceArn'
          description: The Amazon Resource Name (ARN) of the ID namespace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the ID namespace.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceInputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        idMappingWorkflowProperties:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowPropertiesList'
          description: Determines the properties of `IdMappingWorkflow` where this
            `IdNamespace` can be used as a `Source` or a `Target`.
        type:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceType'
          description: 'The type of ID namespace. There are two types: `SOURCE` and
            `TARGET`.


            The `SOURCE` contains configurations for `sourceId` data that will be
            processed in an ID mapping workflow.


            The `TARGET` contains a configuration of `targetId` to which all `sourceIds`
            will resolve to.'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access the resources defined in this `IdNamespace`
            on your behalf as part of a workflow run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the ID namespace was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the ID namespace was last updated.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - idNamespaceName
      - idNamespaceArn
      - type
      - createdAt
      - updatedAt
    GetMatchIdInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        record:
          allOf:
          - $ref: '#/components/schemas/RecordAttributeMap'
          description: The record to fetch the Match ID for.
        applyNormalization:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Normalizes the attributes defined in the schema in the input
            data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER`,
            and the data in the input table is in a format of 1234567890, Entity Resolution
            will normalize this field in the output to (123)-456-7890.
      required:
      - workflowName
      - record
    GetMatchIdOutput:
      type: object
      properties:
        matchId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique identifiers for this group of match records.
        matchRule:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The rule the record matched on.
    GetMatchingJobInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        jobId:
          allOf:
          - $ref: '#/components/schemas/JobId'
          description: The ID of the job.
      required:
      - workflowName
      - jobId
    GetMatchingJobOutput:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/JobId'
          description: The ID of the job.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The current status of the job.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the job was started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the job has finished.
        metrics:
          allOf:
          - $ref: '#/components/schemas/JobMetrics'
          description: Metrics associated with the execution, specifically total records
            processed, unique IDs generated, and records the execution skipped.
        errorDetails:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: An object containing an error message, if there was an error.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/JobOutputSourceConfig'
          description: A list of `OutputSource` objects.
      required:
      - jobId
      - status
      - startTime
    GetMatchingWorkflowInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
      required:
      - workflowName
    GetMatchingWorkflowOutput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        workflowArn:
          allOf:
          - $ref: '#/components/schemas/MatchingWorkflowArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the `MatchingWorkflow`.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the workflow.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/InputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/OutputSourceConfig'
          description: A list of `OutputSource` objects, each of which contains fields
            `OutputS3Path`, `ApplyNormalization`, and `Output`.
        resolutionTechniques:
          allOf:
          - $ref: '#/components/schemas/ResolutionTechniques'
          description: An object which defines the `resolutionType` and the `ruleBasedProperties`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the workflow was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the workflow was last updated.
        incrementalRunConfig:
          allOf:
          - $ref: '#/components/schemas/IncrementalRunConfig'
          description: An object which defines an incremental run type and has only
            `incrementalRunType` as a field.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access Amazon Web Services resources on your behalf.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - workflowName
      - workflowArn
      - inputSourceConfig
      - outputSourceConfig
      - resolutionTechniques
      - createdAt
      - updatedAt
      - roleArn
    GetPolicyInput:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The Amazon Resource Name (ARN) of the resource for which the
            policy need to be returned.
      required:
      - arn
    GetPolicyOutput:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The Entity Resolution resource ARN.
        token:
          allOf:
          - $ref: '#/components/schemas/PolicyToken'
          description: A unique identifier for the current revision of the policy.
        policy:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: The resource-based policy.
      required:
      - arn
      - token
    GetProviderServiceInput:
      type: object
      properties:
        providerName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the provider. This name is typically the company
            name.
        providerServiceName:
          allOf:
          - $ref: '#/components/schemas/ProviderServiceArn'
          description: The ARN (Amazon Resource Name) of the product that the provider
            service provides.
      required:
      - providerName
      - providerServiceName
    GetProviderServiceOutput:
      type: object
      properties:
        providerName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the provider. This name is typically the company
            name.
        providerServiceName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the product that the provider service provides.
        providerServiceDisplayName:
          allOf:
          - $ref: '#/components/schemas/ProviderServiceDisplayName'
          description: The display name of the provider service.
        providerServiceType:
          allOf:
          - $ref: '#/components/schemas/ServiceType'
          description: The type of provider service.
        providerServiceArn:
          allOf:
          - $ref: '#/components/schemas/ProviderServiceArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the provider service.
        providerConfigurationDefinition:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: The definition of the provider configuration.
        providerIdNameSpaceConfiguration:
          allOf:
          - $ref: '#/components/schemas/ProviderIdNameSpaceConfiguration'
          description: The provider configuration required for different ID namespace
            types.
        providerJobConfiguration:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: Provider service job configurations.
        providerEndpointConfiguration:
          allOf:
          - $ref: '#/components/schemas/ProviderEndpointConfiguration'
          description: The required configuration fields to use with the provider
            service.
        anonymizedOutput:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether output data from the provider is anonymized.
            A value of `TRUE` means the output will be anonymized and you can't relate
            the data that comes back from the provider to the identifying input. A
            value of `FALSE` means the output won't be anonymized and you can relate
            the data that comes back from the provider to your source data.
        providerEntityOutputDefinition:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: The definition of the provider entity output.
        providerIntermediateDataAccessConfiguration:
          allOf:
          - $ref: '#/components/schemas/ProviderIntermediateDataAccessConfiguration'
          description: The Amazon Web Services accounts and the S3 permissions that
            are required by some providers to create an S3 bucket for intermediate
            data storage.
        providerComponentSchema:
          allOf:
          - $ref: '#/components/schemas/ProviderComponentSchema'
          description: Input schema for the provider service.
      required:
      - providerName
      - providerServiceName
      - providerServiceDisplayName
      - providerServiceType
      - providerServiceArn
      - providerEndpointConfiguration
      - anonymizedOutput
      - providerEntityOutputDefinition
    GetSchemaMappingInput:
      type: object
      properties:
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema to be retrieved.
      required:
      - schemaName
    GetSchemaMappingOutput:
      type: object
      properties:
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema.
        schemaArn:
          allOf:
          - $ref: '#/components/schemas/SchemaMappingArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the SchemaMapping.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the schema.
        mappedInputFields:
          allOf:
          - $ref: '#/components/schemas/SchemaInputAttributes'
          description: A list of `MappedInputFields`. Each `MappedInputField` corresponds
            to a column the source data table, and contains column name plus additional
            information Venice uses for matching.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the `SchemaMapping` was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the `SchemaMapping` was last updated.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
        hasWorkflows:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the schema mapping has been applied to a
            workflow.
      required:
      - schemaName
      - schemaArn
      - mappedInputFields
      - createdAt
      - updatedAt
      - hasWorkflows
    HeaderSafeUniqueId:
      type: string
      pattern: ^[a-zA-Z_0-9-+=/,]*$
      minLength: 1
      maxLength: 780
    IdMappingJobMetrics:
      type: object
      properties:
        inputRecords:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of records that were input for processing.
        totalRecordsProcessed:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of records that were processed.
        recordsNotProcessed:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of records that did not get processed.
        totalMappedRecords:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of records that were mapped.
        totalMappedSourceRecords:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of mapped source records.
        totalMappedTargetRecords:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of distinct mapped target records.
        uniqueRecordsLoaded:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of records remaining after loading and aggregating
            duplicate records. Duplicates are determined by the field marked as UNIQUE_ID
            in your schema mapping - records sharing the same value in this field
            are considered duplicates. For example, if you specified "customer_id"
            as a UNIQUE_ID field and had three records with the same customer_id value,
            they would count as one unique record in this metric.
      description: An object that contains metrics about an ID mapping job, including
        counts of input records, processed records, and mapped records between source
        and target identifiers.
    IdMappingJobOutputSource:
      type: object
      properties:
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access Amazon Web Services resources on your behalf
            as part of workflow execution.
        outputS3Path:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: The S3 path to which Entity Resolution will write the output
            table.
        KMSArn:
          allOf:
          - $ref: '#/components/schemas/KMSArn'
          description: Customer KMS ARN for encryption at rest. If not provided, system
            will use an Entity Resolution managed KMS key.
      required:
      - roleArn
      - outputS3Path
      description: An object containing `KMSArn`, `OutputS3Path`, and `RoleARN`.
    IdMappingJobOutputSourceConfig:
      type: array
      items:
        $ref: '#/components/schemas/IdMappingJobOutputSource'
    IdMappingRoleArn:
      type: string
      pattern: ^$|^arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
      minLength: 0
      maxLength: 512
    IdMappingRuleBasedProperties:
      type: object
      properties:
        rules:
          allOf:
          - $ref: '#/components/schemas/RuleList'
          description: The rules that can be used for ID mapping.
        ruleDefinitionType:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowRuleDefinitionType'
          description: The set of rules you can use in an ID mapping workflow. The
            limitations specified for the source or target to define the match rules
            must be compatible.
        attributeMatchingModel:
          allOf:
          - $ref: '#/components/schemas/AttributeMatchingModel'
          description: 'The comparison type. You can either choose `ONE_TO_ONE` or
            `MANY_TO_MANY` as the `attributeMatchingModel`.


            If you choose `MANY_TO_MANY`, the system can match attributes across the
            sub-types of an attribute type. For example, if the value of the `Email`
            field of Profile A matches the value of the `BusinessEmail` field of Profile
            B, the two profiles are matched on the `Email` attribute type.


            If you choose `ONE_TO_ONE`, the system can only match attributes if the
            sub-types are an exact match. For example, for the `Email` attribute type,
            the system will only consider it a match if the value of the `Email` field
            of Profile A matches the value of the `Email` field of Profile B.'
        recordMatchingModel:
          allOf:
          - $ref: '#/components/schemas/RecordMatchingModel'
          description: 'The type of matching record that is allowed to be used in
            an ID mapping workflow.


            If the value is set to `ONE_SOURCE_TO_ONE_TARGET`, only one record in
            the source can be matched to the same record in the target.


            If the value is set to `MANY_SOURCE_TO_ONE_TARGET`, multiple records in
            the source can be matched to one record in the target.'
      required:
      - ruleDefinitionType
      - attributeMatchingModel
      - recordMatchingModel
      description: An object that defines the list of matching rules to run in an
        ID mapping workflow.
    IdMappingTechniques:
      type: object
      properties:
        idMappingType:
          allOf:
          - $ref: '#/components/schemas/IdMappingType'
          description: The type of ID mapping.
        ruleBasedProperties:
          allOf:
          - $ref: '#/components/schemas/IdMappingRuleBasedProperties'
          description: An object which defines any additional configurations required
            by rule-based matching.
        providerProperties:
          allOf:
          - $ref: '#/components/schemas/ProviderProperties'
          description: An object which defines any additional configurations required
            by the provider service.
      required:
      - idMappingType
      description: An object which defines the ID mapping technique and any additional
        configurations.
    IdMappingType:
      type: string
      enum:
      - PROVIDER
      - RULE_BASED
    IdMappingWorkflowArn:
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(idmappingworkflow/[a-zA-Z_0-9-]{1,255})$
    IdMappingWorkflowInputSource:
      type: object
      properties:
        inputSourceARN:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An Glue table Amazon Resource Name (ARN) or a matching workflow
            ARN for the input source table.
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema to be retrieved.
        type:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceType'
          description: 'The type of ID namespace. There are two types: `SOURCE` and
            `TARGET`.


            The `SOURCE` contains configurations for `sourceId` data that will be
            processed in an ID mapping workflow.


            The `TARGET` contains a configuration of `targetId` which all `sourceIds`
            will resolve to.'
      required:
      - inputSourceARN
      description: An object containing `InputSourceARN`, `SchemaName`, and `Type`.
    IdMappingWorkflowInputSourceConfig:
      type: array
      items:
        $ref: '#/components/schemas/IdMappingWorkflowInputSource'
    IdMappingWorkflowList:
      type: array
      items:
        $ref: '#/components/schemas/IdMappingWorkflowSummary'
    IdMappingWorkflowOutputSource:
      type: object
      properties:
        outputS3Path:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: The S3 path to which Entity Resolution will write the output
            table.
        KMSArn:
          allOf:
          - $ref: '#/components/schemas/KMSArn'
          description: Customer KMS ARN for encryption at rest. If not provided, system
            will use an Entity Resolution managed KMS key.
      required:
      - outputS3Path
      description: The output source for the ID mapping workflow.
    IdMappingWorkflowOutputSourceConfig:
      type: array
      items:
        $ref: '#/components/schemas/IdMappingWorkflowOutputSource'
    IdMappingWorkflowRuleDefinitionType:
      type: string
      enum:
      - SOURCE
      - TARGET
    IdMappingWorkflowRuleDefinitionTypeList:
      type: array
      items:
        $ref: '#/components/schemas/IdMappingWorkflowRuleDefinitionType'
    IdMappingWorkflowSummary:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        workflowArn:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the `IdMappingWorkflow`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the workflow was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the workflow was last updated.
      required:
      - workflowName
      - workflowArn
      - createdAt
      - updatedAt
      description: A list of `IdMappingWorkflowSummary` objects, each of which contain
        the fields `WorkflowName`, `WorkflowArn`, `CreatedAt`, and `UpdatedAt`.
    IdNamespaceArn:
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(idnamespace/[a-zA-Z_0-9-]{1,255})$
    IdNamespaceIdMappingWorkflowMetadata:
      type: object
      properties:
        idMappingType:
          allOf:
          - $ref: '#/components/schemas/IdMappingType'
          description: The type of ID mapping.
      required:
      - idMappingType
      description: The settings for the ID namespace for the ID mapping workflow job.
    IdNamespaceIdMappingWorkflowMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowMetadata'
    IdNamespaceIdMappingWorkflowProperties:
      type: object
      properties:
        idMappingType:
          allOf:
          - $ref: '#/components/schemas/IdMappingType'
          description: The type of ID mapping.
        ruleBasedProperties:
          allOf:
          - $ref: '#/components/schemas/NamespaceRuleBasedProperties'
          description: An object which defines any additional configurations required
            by rule-based matching.
        providerProperties:
          allOf:
          - $ref: '#/components/schemas/NamespaceProviderProperties'
          description: An object which defines any additional configurations required
            by the provider service.
      required:
      - idMappingType
      description: An object containing `IdMappingType`, `ProviderProperties`, and
        `RuleBasedProperties`.
    IdNamespaceIdMappingWorkflowPropertiesList:
      type: array
      items:
        $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowProperties'
    IdNamespaceInputSource:
      type: object
      properties:
        inputSourceARN:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An Glue table Amazon Resource Name (ARN) or a matching workflow
            ARN for the input source table.
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema.
      required:
      - inputSourceARN
      description: An object containing `InputSourceARN` and `SchemaName`.
    IdNamespaceInputSourceConfig:
      type: array
      items:
        $ref: '#/components/schemas/IdNamespaceInputSource'
    IdNamespaceList:
      type: array
      items:
        $ref: '#/components/schemas/IdNamespaceSummary'
    IdNamespaceSummary:
      type: object
      properties:
        idNamespaceName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the ID namespace.
        idNamespaceArn:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceArn'
          description: The Amazon Resource Name (ARN) of the ID namespace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the ID namespace.
        idMappingWorkflowProperties:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowMetadataList'
          description: An object which defines any additional configurations required
            by the ID mapping workflow.
        type:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceType'
          description: 'The type of ID namespace. There are two types: `SOURCE` and
            `TARGET`.


            The `SOURCE` contains configurations for `sourceId` data that will be
            processed in an ID mapping workflow.


            The `TARGET` contains a configuration of `targetId` which all `sourceIds`
            will resolve to.'
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the ID namespace was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the ID namespace was last updated.
      required:
      - idNamespaceName
      - idNamespaceArn
      - type
      - createdAt
      - updatedAt
      description: A summary of ID namespaces.
    IdNamespaceType:
      type: string
      enum:
      - SOURCE
      - TARGET
    IncrementalRunConfig:
      type: object
      properties:
        incrementalRunType:
          allOf:
          - $ref: '#/components/schemas/IncrementalRunType'
          description: 'The type of incremental run. It takes only one value: `IMMEDIATE`.'
      description: An object which defines an incremental run type and has only `incrementalRunType`
        as a field.
    IncrementalRunType:
      type: string
      enum:
      - IMMEDIATE
    InputSource:
      type: object
      properties:
        inputSourceARN:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An Glue table Amazon Resource Name (ARN) for the input source
            table.
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema to be retrieved.
        applyNormalization:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Normalizes the attributes defined in the schema in the input
            data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER`,
            and the data in the input table is in a format of 1234567890, Entity Resolution
            will normalize this field in the output to (123)-456-7890.
      required:
      - inputSourceARN
      - schemaName
      description: An object containing `InputSourceARN`, `SchemaName`, and `ApplyNormalization`.
    InputSourceConfig:
      type: array
      items:
        $ref: '#/components/schemas/InputSource'
    IntermediateSourceConfiguration:
      type: object
      properties:
        intermediateS3Path:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: 'The Amazon S3 location (bucket and prefix). For example: `s3://provider_bucket/DOC-EXAMPLE-BUCKET`'
      required:
      - intermediateS3Path
      description: The Amazon S3 location that temporarily stores your data while
        it processes. Your information won't be saved permanently.
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: This exception occurs when there is an internal failure in the
        Entity Resolution service.
    JobId:
      type: string
      pattern: ^[a-f0-9]{32}$
    JobList:
      type: array
      items:
        $ref: '#/components/schemas/JobSummary'
    JobMetrics:
      type: object
      properties:
        inputRecords:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of input records.
        totalRecordsProcessed:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of records processed.
        recordsNotProcessed:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of records that did not get processed.
        matchIDs:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total number of `matchID`s generated.
      description: An object containing `InputRecords`, `TotalRecordsProcessed`, `MatchIDs`,
        and `RecordsNotProcessed`.
    JobOutputSource:
      type: object
      properties:
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access Amazon Web Services resources on your behalf
            as part of workflow execution.
        outputS3Path:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: The S3 path to which Entity Resolution will write the output
            table.
        KMSArn:
          allOf:
          - $ref: '#/components/schemas/KMSArn'
          description: Customer KMS ARN for encryption at rest. If not provided, system
            will use an Entity Resolution managed KMS key.
      required:
      - roleArn
      - outputS3Path
      description: An object containing `KMSArn`, `OutputS3Path`, and `RoleArn`.
    JobOutputSourceConfig:
      type: array
      items:
        $ref: '#/components/schemas/JobOutputSource'
    JobStatus:
      type: string
      enum:
      - RUNNING
      - SUCCEEDED
      - FAILED
      - QUEUED
    JobSummary:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/JobId'
          description: The ID of the job.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The current status of the job.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the job was started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the job has finished.
      required:
      - jobId
      - status
      - startTime
      description: An object containing the `JobId`, `Status`, `StartTime`, and `EndTime`
        of a job.
    KMSArn:
      type: string
      pattern: ^arn:aws:kms:.*:[0-9]+:.*$
    ListIdMappingJobsInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityNameOrIdMappingWorkflowArn'
          description: The name of the workflow to be retrieved.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of objects returned per page.
      required:
      - workflowName
    ListIdMappingJobsOutput:
      type: object
      properties:
        jobs:
          allOf:
          - $ref: '#/components/schemas/JobList'
          description: A list of `JobSummary` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
    ListIdMappingWorkflowsInput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of objects returned per page.
    ListIdMappingWorkflowsOutput:
      type: object
      properties:
        workflowSummaries:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowList'
          description: A list of `IdMappingWorkflowSummary` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
    ListIdNamespacesInput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of `IdNamespace` objects returned per page.
    ListIdNamespacesOutput:
      type: object
      properties:
        idNamespaceSummaries:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceList'
          description: A list of `IdNamespaceSummaries` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
    ListMatchingJobsInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow to be retrieved.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of objects returned per page.
      required:
      - workflowName
    ListMatchingJobsOutput:
      type: object
      properties:
        jobs:
          allOf:
          - $ref: '#/components/schemas/JobList'
          description: A list of `JobSummary` objects, each of which contain the ID,
            status, start time, and end time of a job.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
    ListMatchingWorkflowsInput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of objects returned per page.
    ListMatchingWorkflowsOutput:
      type: object
      properties:
        workflowSummaries:
          allOf:
          - $ref: '#/components/schemas/MatchingWorkflowList'
          description: A list of `MatchingWorkflowSummary` objects, each of which
            contain the fields `WorkflowName`, `WorkflowArn`, `CreatedAt`, and `UpdatedAt`.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
    ListProviderServicesInput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of objects returned per page.
        providerName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the provider. This name is typically the company
            name.
    ListProviderServicesOutput:
      type: object
      properties:
        providerServiceSummaries:
          allOf:
          - $ref: '#/components/schemas/ProviderServiceList'
          description: A list of `ProviderServices` objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
    ListSchemaMappingsInput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of objects returned per page.
    ListSchemaMappingsOutput:
      type: object
      properties:
        schemaList:
          allOf:
          - $ref: '#/components/schemas/SchemaMappingList'
          description: A list of `SchemaMappingSummary` objects, each of which contain
            the fields `SchemaName`, `SchemaArn`, `CreatedAt`, `UpdatedAt`.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token from the previous API call.
    ListTagsForResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The ARN of the resource for which you want to view tags.
      required:
      - resourceArn
    ListTagsForResourceOutput:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - tags
    MatchPurpose:
      type: string
      enum:
      - IDENTIFIER_GENERATION
      - INDEXING
    MatchingKeys:
      type: array
      items:
        $ref: '#/components/schemas/AttributeName'
    MatchingWorkflowArn:
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(matchingworkflow/[a-zA-Z_0-9-]{1,255})$
    MatchingWorkflowList:
      type: array
      items:
        $ref: '#/components/schemas/MatchingWorkflowSummary'
    MatchingWorkflowSummary:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        workflowArn:
          allOf:
          - $ref: '#/components/schemas/MatchingWorkflowArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the `MatchingWorkflow`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the workflow was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the workflow was last updated.
        resolutionType:
          allOf:
          - $ref: '#/components/schemas/ResolutionType'
          description: The method that has been specified for data matching, either
            using matching provided by Entity Resolution or through a provider service.
      required:
      - workflowName
      - workflowArn
      - createdAt
      - updatedAt
      - resolutionType
      description: A list of `MatchingWorkflowSummary` objects, each of which contain
        the fields `WorkflowName`, `WorkflowArn`, `CreatedAt`, `UpdatedAt`.
    NamespaceProviderProperties:
      type: object
      properties:
        providerServiceArn:
          allOf:
          - $ref: '#/components/schemas/ProviderServiceArn'
          description: The Amazon Resource Name (ARN) of the provider service.
        providerConfiguration:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: An object which defines any additional configurations required
            by the provider service.
      required:
      - providerServiceArn
      description: An object containing `ProviderConfiguration` and `ProviderServiceArn`.
    NamespaceRuleBasedProperties:
      type: object
      properties:
        rules:
          allOf:
          - $ref: '#/components/schemas/RuleList'
          description: The rules for the ID namespace.
        ruleDefinitionTypes:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowRuleDefinitionTypeList'
          description: The sets of rules you can use in an ID mapping workflow. The
            limitations specified for the source and target must be compatible.
        attributeMatchingModel:
          allOf:
          - $ref: '#/components/schemas/AttributeMatchingModel'
          description: 'The comparison type. You can either choose `ONE_TO_ONE` or
            `MANY_TO_MANY` as the `attributeMatchingModel`.


            If you choose `MANY_TO_MANY`, the system can match attributes across the
            sub-types of an attribute type. For example, if the value of the `Email`
            field of Profile A matches the value of `BusinessEmail` field of Profile
            B, the two profiles are matched on the `Email` attribute type.


            If you choose `ONE_TO_ONE`, the system can only match attributes if the
            sub-types are an exact match. For example, for the `Email` attribute type,
            the system will only consider it a match if the value of the `Email` field
            of Profile A matches the value of the `Email` field of Profile B.'
        recordMatchingModels:
          allOf:
          - $ref: '#/components/schemas/RecordMatchingModelList'
          description: 'The type of matching record that is allowed to be used in
            an ID mapping workflow.


            If the value is set to `ONE_SOURCE_TO_ONE_TARGET`, only one record in
            the source is matched to one record in the target.


            If the value is set to `MANY_SOURCE_TO_ONE_TARGET`, all matching records
            in the source are matched to one record in the target.'
      description: The rule-based properties of an ID namespace. These properties
        define how the ID namespace can be used in an ID mapping workflow.
    NextToken:
      type: string
      pattern: ^[a-zA-Z_0-9-=+/]*$
      minLength: 1
      maxLength: 1024
    OutputAttribute:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AttributeName'
          description: A name of a column to be written to the output. This must be
            an `InputField` name in the schema mapping.
        hashed:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Enables the ability to hash the column values in the output.
      required:
      - name
      description: A list of `OutputAttribute` objects, each of which have the fields
        `Name` and `Hashed`. Each of these objects selects a column to be included
        in the output table, and whether the values of the column should be hashed.
    OutputAttributes:
      type: array
      items:
        $ref: '#/components/schemas/OutputAttribute'
    OutputSource:
      type: object
      properties:
        outputS3Path:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: The S3 path to which Entity Resolution will write the output
            table.
        KMSArn:
          allOf:
          - $ref: '#/components/schemas/KMSArn'
          description: Customer KMS ARN for encryption at rest. If not provided, system
            will use an Entity Resolution managed KMS key.
        output:
          allOf:
          - $ref: '#/components/schemas/OutputAttributes'
          description: A list of `OutputAttribute` objects, each of which have the
            fields `Name` and `Hashed`. Each of these objects selects a column to
            be included in the output table, and whether the values of the column
            should be hashed.
        applyNormalization:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Normalizes the attributes defined in the schema in the input
            data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER`,
            and the data in the input table is in a format of 1234567890, Entity Resolution
            will normalize this field in the output to (123)-456-7890.
      required:
      - outputS3Path
      - output
      description: A list of `OutputAttribute` objects, each of which have the fields
        `Name` and `Hashed`. Each of these objects selects a column to be included
        in the output table, and whether the values of the column should be hashed.
    OutputSourceConfig:
      type: array
      items:
        $ref: '#/components/schemas/OutputSource'
    PolicyDocument:
      type: string
      minLength: 1
      maxLength: 40960
    PolicyToken:
      type: string
      pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
      minLength: 36
      maxLength: 36
    ProviderComponentSchema:
      type: object
      properties:
        schemas:
          allOf:
          - $ref: '#/components/schemas/Schemas'
          description: Input schema for the provider service.
        providerSchemaAttributes:
          allOf:
          - $ref: '#/components/schemas/ProviderSchemaAttributes'
          description: The provider schema attributes.
      description: The input schema supported by provider service.
    ProviderEndpointConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ProviderMarketplaceConfiguration'
        description: |-
          The identifiers of the provider service, from Data Exchange.
      description: |-
        The required configuration fields to use with the provider service.
    ProviderIdNameSpaceConfiguration:
      type: object
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the ID namespace.
        providerTargetConfigurationDefinition:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: Configurations required for the target ID namespace.
        providerSourceConfigurationDefinition:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: Configurations required for the source ID namespace.
      description: The provider configuration required for different ID namespace
        types.
    ProviderIntermediateDataAccessConfiguration:
      type: object
      properties:
        awsAccountIds:
          allOf:
          - $ref: '#/components/schemas/AwsAccountIdList'
          description: The Amazon Web Services account that provider can use to read
            or write data into the customer's intermediate S3 bucket.
        requiredBucketActions:
          allOf:
          - $ref: '#/components/schemas/RequiredBucketActionsList'
          description: The S3 bucket actions that the provider requires permission
            for.
      description: The required configuration fields to give intermediate access to
        a provider service.
    ProviderMarketplaceConfiguration:
      type: object
      properties:
        dataSetId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The dataset ID on Data Exchange.
        revisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The revision ID on Data Exchange.
        assetId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The asset ID on Data Exchange.
        listingId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The listing ID on Data Exchange.
      required:
      - dataSetId
      - revisionId
      - assetId
      - listingId
      description: The identifiers of the provider service, from Data Exchange.
    ProviderProperties:
      type: object
      properties:
        providerServiceArn:
          allOf:
          - $ref: '#/components/schemas/ProviderServiceArn'
          description: The ARN of the provider service.
        providerConfiguration:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: The required configuration fields to use with the provider
            service.
        intermediateSourceConfiguration:
          allOf:
          - $ref: '#/components/schemas/IntermediateSourceConfiguration'
          description: The Amazon S3 location that temporarily stores your data while
            it processes. Your information won't be saved permanently.
      required:
      - providerServiceArn
      description: An object containing the `providerServiceARN`, `intermediateSourceConfiguration`,
        and `providerConfiguration`.
    ProviderSchemaAttribute:
      type: object
      properties:
        fieldName:
          allOf:
          - $ref: '#/components/schemas/AttributeName'
          description: The field name.
        type:
          allOf:
          - $ref: '#/components/schemas/SchemaAttributeType'
          description: 'The type of the provider schema attribute.


            LiveRamp supports: `NAME` | `NAME_FIRST` | `NAME_MIDDLE` | `NAME_LAST`
            | `ADDRESS` | `ADDRESS_STREET1` | `ADDRESS_STREET2` | `ADDRESS_STREET3`
            | `ADDRESS_CITY` | `ADDRESS_STATE` | `ADDRESS_COUNTRY` | `ADDRESS_POSTALCODE`
            | `PHONE` | `PHONE_NUMBER` | `EMAIL_ADDRESS` | `UNIQUE_ID` | `PROVIDER_ID`


            TransUnion supports: `NAME` | `NAME_FIRST` | `NAME_LAST` | `ADDRESS` |
            `ADDRESS_CITY` | `ADDRESS_STATE` | `ADDRESS_COUNTRY` | `ADDRESS_POSTALCODE`
            | `PHONE_NUMBER` | `EMAIL_ADDRESS` | `UNIQUE_ID` | `DATE` | `IPV4` | `IPV6`
            | `MAID`


            Unified ID 2.0 supports: `PHONE_NUMBER` | `EMAIL_ADDRESS` | `UNIQUE_ID`'
        subType:
          allOf:
          - $ref: '#/components/schemas/AttributeName'
          description: The sub type of the provider schema attribute.
        hashing:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The hashing attribute of the provider schema.
      required:
      - fieldName
      - type
      description: The provider schema attribute.
    ProviderSchemaAttributes:
      type: array
      items:
        $ref: '#/components/schemas/ProviderSchemaAttribute'
    ProviderServiceArn:
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):(entityresolution):([a-z]{2}-[a-z]{1,10}-[0-9])::providerservice/([a-zA-Z0-9_-]{1,255})/([a-zA-Z0-9_-]{1,255})$
      minLength: 20
      maxLength: 255
    ProviderServiceDisplayName:
      type: string
      maxLength: 255
    ProviderServiceList:
      type: array
      items:
        $ref: '#/components/schemas/ProviderServiceSummary'
    ProviderServiceSummary:
      type: object
      properties:
        providerServiceArn:
          allOf:
          - $ref: '#/components/schemas/ProviderServiceArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the `providerService`.
        providerName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the provider. This name is typically the company
            name.
        providerServiceDisplayName:
          allOf:
          - $ref: '#/components/schemas/ProviderServiceDisplayName'
          description: The display name of the provider service.
        providerServiceName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the product that the provider service provides.
        providerServiceType:
          allOf:
          - $ref: '#/components/schemas/ServiceType'
          description: The type of provider service.
      required:
      - providerServiceArn
      - providerName
      - providerServiceDisplayName
      - providerServiceName
      - providerServiceType
      description: A list of `ProviderService` objects, each of which contain the
        fields `providerName`, `providerServiceArn`, `providerServiceName`, and `providerServiceType`.
    PutPolicyInput:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The Amazon Resource Name (ARN) of the resource for which the
            policy needs to be updated.
        token:
          allOf:
          - $ref: '#/components/schemas/PolicyToken'
          description: A unique identifier for the current revision of the policy.
        policy:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: 'The resource-based policy.


            If you set the value of the `effect` parameter in the `policy` to `Deny`
            for the `PutPolicy` operation, you must also set the value of the `effect`
            parameter to `Deny` for the `AddPolicyStatement` operation.'
      required:
      - arn
      - policy
    PutPolicyOutput:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The Entity Resolution resource ARN.
        token:
          allOf:
          - $ref: '#/components/schemas/PolicyToken'
          description: A unique identifier for the current revision of the policy.
        policy:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: The resource-based policy.
      required:
      - arn
      - token
    RecordAttributeMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    RecordMatchingModel:
      type: string
      enum:
      - ONE_SOURCE_TO_ONE_TARGET
      - MANY_SOURCE_TO_ONE_TARGET
    RecordMatchingModelList:
      type: array
      items:
        $ref: '#/components/schemas/RecordMatchingModel'
    RequiredBucketActionsList:
      type: array
      items:
        type: string
    ResolutionTechniques:
      type: object
      properties:
        resolutionType:
          allOf:
          - $ref: '#/components/schemas/ResolutionType'
          description: 'The type of matching. There are three types of matching: `RULE_MATCHING`,
            `ML_MATCHING`, and `PROVIDER`.'
        ruleBasedProperties:
          allOf:
          - $ref: '#/components/schemas/RuleBasedProperties'
          description: An object which defines the list of matching rules to run and
            has a field `Rules`, which is a list of rule objects.
        providerProperties:
          allOf:
          - $ref: '#/components/schemas/ProviderProperties'
          description: The properties of the provider service.
      required:
      - resolutionType
      description: An object which defines the `resolutionType` and the `ruleBasedProperties`.
    ResolutionType:
      type: string
      enum:
      - RULE_MATCHING
      - ML_MATCHING
      - PROVIDER
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The resource could not be found.
    RoleArn:
      type: string
      pattern: ^arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
      minLength: 32
      maxLength: 512
    Rule:
      type: object
      properties:
        ruleName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A name for the matching rule.
        matchingKeys:
          allOf:
          - $ref: '#/components/schemas/MatchingKeys'
          description: A list of `MatchingKeys`. The `MatchingKeys` must have been
            defined in the `SchemaMapping`. Two records are considered to match according
            to this rule if all of the `MatchingKeys` match.
      required:
      - ruleName
      - matchingKeys
      description: An object containing `RuleName`, and `MatchingKeys`.
    RuleBasedProperties:
      type: object
      properties:
        rules:
          allOf:
          - $ref: '#/components/schemas/RuleList'
          description: A list of `Rule` objects, each of which have fields `RuleName`
            and `MatchingKeys`.
        attributeMatchingModel:
          allOf:
          - $ref: '#/components/schemas/AttributeMatchingModel'
          description: 'The comparison type. You can either choose `ONE_TO_ONE` or
            `MANY_TO_MANY` as the `attributeMatchingModel`.


            If you choose `MANY_TO_MANY`, the system can match attributes across the
            sub-types of an attribute type. For example, if the value of the `Email`
            field of Profile A and the value of `BusinessEmail` field of Profile B
            matches, the two profiles are matched on the `Email` attribute type.


            If you choose `ONE_TO_ONE`, the system can only match attributes if the
            sub-types are an exact match. For example, for the `Email` attribute type,
            the system will only consider it a match if the value of the `Email` field
            of Profile A matches the value of the `Email` field of Profile B.'
        matchPurpose:
          allOf:
          - $ref: '#/components/schemas/MatchPurpose'
          description: 'An indicator of whether to generate IDs and index the data
            or not.


            If you choose `IDENTIFIER_GENERATION`, the process generates IDs and indexes
            the data.


            If you choose `INDEXING`, the process indexes the data without generating
            IDs.'
      required:
      - rules
      - attributeMatchingModel
      description: An object which defines the list of matching rules to run in a
        matching workflow. RuleBasedProperties contain a `Rules` field, which is a
        list of rule objects.
    RuleList:
      type: array
      items:
        $ref: '#/components/schemas/Rule'
    S3Path:
      type: string
      pattern: ^s3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?$
      minLength: 1
      maxLength: 1024
    SchemaAttributeType:
      type: string
      enum:
      - NAME
      - NAME_FIRST
      - NAME_MIDDLE
      - NAME_LAST
      - ADDRESS
      - ADDRESS_STREET1
      - ADDRESS_STREET2
      - ADDRESS_STREET3
      - ADDRESS_CITY
      - ADDRESS_STATE
      - ADDRESS_COUNTRY
      - ADDRESS_POSTALCODE
      - PHONE
      - PHONE_NUMBER
      - PHONE_COUNTRYCODE
      - EMAIL_ADDRESS
      - UNIQUE_ID
      - DATE
      - STRING
      - PROVIDER_ID
      - IPV4
      - IPV6
      - MAID
    SchemaInputAttribute:
      type: object
      properties:
        fieldName:
          allOf:
          - $ref: '#/components/schemas/AttributeName'
          description: A string containing the field name.
        type:
          allOf:
          - $ref: '#/components/schemas/SchemaAttributeType'
          description: 'The type of the attribute, selected from a list of values.


            LiveRamp supports: `NAME` | `NAME_FIRST` | `NAME_MIDDLE` | `NAME_LAST`
            | `ADDRESS` | `ADDRESS_STREET1` | `ADDRESS_STREET2` | `ADDRESS_STREET3`
            | `ADDRESS_CITY` | `ADDRESS_STATE` | `ADDRESS_COUNTRY` | `ADDRESS_POSTALCODE`
            | `PHONE` | `PHONE_NUMBER` | `EMAIL_ADDRESS` | `UNIQUE_ID` | `PROVIDER_ID`


            TransUnion supports: `NAME` | `NAME_FIRST` | `NAME_LAST` | `ADDRESS` |
            `ADDRESS_CITY` | `ADDRESS_STATE` | `ADDRESS_COUNTRY` | `ADDRESS_POSTALCODE`
            | `PHONE_NUMBER` | `EMAIL_ADDRESS` | `UNIQUE_ID` | `IPV4` | `IPV6` | `MAID`


            Unified ID 2.0 supports: `PHONE_NUMBER` | `EMAIL_ADDRESS` | `UNIQUE_ID`


            Normalization is only supported for `NAME`, `ADDRESS`, `PHONE`, and `EMAIL_ADDRESS`.


            If you want to normalize `NAME_FIRST`, `NAME_MIDDLE`, and `NAME_LAST`,
            you must group them by assigning them to the `NAME` `groupName`.


            If you want to normalize `ADDRESS_STREET1`, `ADDRESS_STREET2`, `ADDRESS_STREET3`,
            `ADDRESS_CITY`, `ADDRESS_STATE`, `ADDRESS_COUNTRY`, and `ADDRESS_POSTALCODE`,
            you must group them by assigning them to the `ADDRESS` `groupName`.


            If you want to normalize `PHONE_NUMBER` and `PHONE_COUNTRYCODE`, you must
            group them by assigning them to the `PHONE` `groupName`.'
        groupName:
          allOf:
          - $ref: '#/components/schemas/AttributeName'
          description: 'A string that instructs Entity Resolution to combine several
            columns into a unified column with the identical attribute type.


            For example, when working with columns such as `NAME_FIRST`, `NAME_MIDDLE`,
            and `NAME_LAST`, assigning them a common `groupName` will prompt Entity
            Resolution to concatenate them into a single value.'
        matchKey:
          allOf:
          - $ref: '#/components/schemas/AttributeName'
          description: 'A key that allows grouping of multiple input attributes into
            a unified matching group.


            For example, consider a scenario where the source table contains various
            addresses, such as `business_address` and `shipping_address`. By assigning
            a `matchKey` called `address` to both attributes, Entity Resolution will
            match records across these fields to create a consolidated matching group.


            If no `matchKey` is specified for a column, it won''t be utilized for
            matching purposes but will still be included in the output table.'
        subType:
          allOf:
          - $ref: '#/components/schemas/AttributeName'
          description: The subtype of the attribute, selected from a list of values.
        hashed:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Indicates if the column values are hashed in the schema input.


            If the value is set to `TRUE`, the column values are hashed.


            If the value is set to `FALSE`, the column values are cleartext.'
      required:
      - fieldName
      - type
      description: A configuration object for defining input data fields in Entity
        Resolution. The `SchemaInputAttribute` specifies how individual fields in
        your input data should be processed and matched.
    SchemaInputAttributes:
      type: array
      items:
        $ref: '#/components/schemas/SchemaInputAttribute'
    SchemaList:
      type: array
      items:
        type: string
    SchemaMappingArn:
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(schemamapping/[a-zA-Z_0-9-]{1,255})$
    SchemaMappingList:
      type: array
      items:
        $ref: '#/components/schemas/SchemaMappingSummary'
    SchemaMappingSummary:
      type: object
      properties:
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema.
        schemaArn:
          allOf:
          - $ref: '#/components/schemas/SchemaMappingArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the `SchemaMapping`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the `SchemaMapping` was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the `SchemaMapping` was last updated.
        hasWorkflows:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the schema mapping has been applied to a
            workflow.
      required:
      - schemaName
      - schemaArn
      - createdAt
      - updatedAt
      - hasWorkflows
      description: An object containing `SchemaName`, `SchemaArn`, `CreatedAt`, and`UpdatedAt`.
    Schemas:
      type: array
      items:
        $ref: '#/components/schemas/SchemaList'
    ServiceType:
      type: string
      enum:
      - ASSIGNMENT
      - ID_MAPPING
    StartIdMappingJobInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityNameOrIdMappingWorkflowArn'
          description: The name of the ID mapping job to be retrieved.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingJobOutputSourceConfig'
          description: A list of `OutputSource` objects.
      required:
      - workflowName
    StartIdMappingJobOutput:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/JobId'
          description: The ID of the job.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingJobOutputSourceConfig'
          description: A list of `OutputSource` objects.
      required:
      - jobId
    StartMatchingJobInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the matching job to be retrieved.
      required:
      - workflowName
    StartMatchingJobOutput:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/JobId'
          description: The ID of the job.
      required:
      - jobId
    StatementAction:
      type: string
      pattern: ^(entityresolution:[a-zA-Z0-9]+)$
      minLength: 3
      maxLength: 64
    StatementActionList:
      type: array
      items:
        $ref: '#/components/schemas/StatementAction'
    StatementCondition:
      type: string
      minLength: 1
      maxLength: 40960
    StatementEffect:
      type: string
      enum:
      - Allow
      - Deny
    StatementId:
      type: string
      pattern: ^[0-9A-Za-z]+$
      minLength: 1
      maxLength: 64
    StatementPrincipal:
      type: string
      pattern: ^(\d{12})|([a-z0-9\.]+)$
      minLength: 12
      maxLength: 64
    StatementPrincipalList:
      type: array
      items:
        $ref: '#/components/schemas/StatementPrincipal'
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The ARN of the resource for which you want to view tags.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for this
            resource.
      required:
      - resourceArn
      - tags
    TagResourceOutput:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The request was denied due to request throttling.
    UniqueIdList:
      type: array
      items:
        $ref: '#/components/schemas/HeaderSafeUniqueId'
    UntagResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/VeniceGlobalArn'
          description: The ARN of the resource for which you want to untag.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The list of tag keys to remove from the resource.
      required:
      - resourceArn
      - tagKeys
    UntagResourceOutput:
      type: object
      properties: {}
    UpdateIdMappingWorkflowInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the workflow.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowInputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowOutputSourceConfig'
          description: A list of `OutputSource` objects, each of which contains fields
            `OutputS3Path` and `KMSArn`.
        idMappingTechniques:
          allOf:
          - $ref: '#/components/schemas/IdMappingTechniques'
          description: An object which defines the ID mapping technique and any additional
            configurations.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IdMappingRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access Amazon Web Services resources on your behalf.
      required:
      - workflowName
      - inputSourceConfig
      - idMappingTechniques
    UpdateIdMappingWorkflowOutput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        workflowArn:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowArn'
          description: The Amazon Resource Name (ARN) of the workflow role. Entity
            Resolution assumes this role to access Amazon Web Services resources on
            your behalf.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the workflow.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowInputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdMappingWorkflowOutputSourceConfig'
          description: A list of `OutputSource` objects, each of which contains fields
            `OutputS3Path` and `KMSArn`.
        idMappingTechniques:
          allOf:
          - $ref: '#/components/schemas/IdMappingTechniques'
          description: An object which defines the ID mapping technique and any additional
            configurations.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IdMappingRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access Amazon Web Services resources on your behalf.
      required:
      - workflowName
      - workflowArn
      - inputSourceConfig
      - idMappingTechniques
    UpdateIdNamespaceInput:
      type: object
      properties:
        idNamespaceName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the ID namespace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the ID namespace.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceInputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        idMappingWorkflowProperties:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowPropertiesList'
          description: Determines the properties of `IdMappingWorkflow` where this
            `IdNamespace` can be used as a `Source` or a `Target`.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access the resources defined in this `IdNamespace`
            on your behalf as part of a workflow run.
      required:
      - idNamespaceName
    UpdateIdNamespaceOutput:
      type: object
      properties:
        idNamespaceName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the ID namespace.
        idNamespaceArn:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceArn'
          description: The Amazon Resource Name (ARN) of the ID namespace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the ID namespace.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceInputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        idMappingWorkflowProperties:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceIdMappingWorkflowPropertiesList'
          description: Determines the properties of `IdMappingWorkflow` where this
            `IdNamespace` can be used as a `Source` or a `Target`.
        type:
          allOf:
          - $ref: '#/components/schemas/IdNamespaceType'
          description: 'The type of ID namespace. There are two types: `SOURCE` and
            `TARGET`.


            The `SOURCE` contains configurations for `sourceId` data that will be
            processed in an ID mapping workflow.


            The `TARGET` contains a configuration of `targetId` to which all `sourceIds`
            will resolve to.'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to access the resources defined in this `IdNamespace`
            on your behalf as part of a workflow run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the ID namespace was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of when the ID namespace was last updated.
      required:
      - idNamespaceName
      - idNamespaceArn
      - type
      - createdAt
      - updatedAt
    UpdateMatchingWorkflowInput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow to be retrieved.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the workflow.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/InputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/OutputSourceConfig'
          description: A list of `OutputSource` objects, each of which contains fields
            `OutputS3Path`, `ApplyNormalization`, and `Output`.
        resolutionTechniques:
          allOf:
          - $ref: '#/components/schemas/ResolutionTechniques'
          description: An object which defines the `resolutionType` and the `ruleBasedProperties`.
        incrementalRunConfig:
          allOf:
          - $ref: '#/components/schemas/IncrementalRunConfig'
          description: An object which defines an incremental run type and has only
            `incrementalRunType` as a field.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to create resources on your behalf as part of workflow
            execution.
      required:
      - workflowName
      - inputSourceConfig
      - outputSourceConfig
      - resolutionTechniques
      - roleArn
    UpdateMatchingWorkflowOutput:
      type: object
      properties:
        workflowName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the workflow.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the workflow.
        inputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/InputSourceConfig'
          description: A list of `InputSource` objects, which have the fields `InputSourceARN`
            and `SchemaName`.
        outputSourceConfig:
          allOf:
          - $ref: '#/components/schemas/OutputSourceConfig'
          description: A list of `OutputSource` objects, each of which contains fields
            `OutputS3Path`, `ApplyNormalization`, and `Output`.
        resolutionTechniques:
          allOf:
          - $ref: '#/components/schemas/ResolutionTechniques'
          description: An object which defines the `resolutionType` and the `ruleBasedProperties`
        incrementalRunConfig:
          allOf:
          - $ref: '#/components/schemas/IncrementalRunConfig'
          description: An object which defines an incremental run type and has only
            `incrementalRunType` as a field.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the IAM role. Entity Resolution
            assumes this role to create resources on your behalf as part of workflow
            execution.
      required:
      - workflowName
      - inputSourceConfig
      - outputSourceConfig
      - resolutionTechniques
      - roleArn
    UpdateSchemaMappingInput:
      type: object
      properties:
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema. There can't be multiple `SchemaMappings`
            with the same name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the schema.
        mappedInputFields:
          allOf:
          - $ref: '#/components/schemas/SchemaInputAttributes'
          description: A list of `MappedInputFields`. Each `MappedInputField` corresponds
            to a column the source data table, and contains column name plus additional
            information that Entity Resolution uses for matching.
      required:
      - schemaName
      - mappedInputFields
    UpdateSchemaMappingOutput:
      type: object
      properties:
        schemaName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the schema.
        schemaArn:
          allOf:
          - $ref: '#/components/schemas/SchemaMappingArn'
          description: The ARN (Amazon Resource Name) that Entity Resolution generated
            for the `SchemaMapping`.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the schema.
        mappedInputFields:
          allOf:
          - $ref: '#/components/schemas/SchemaInputAttributes'
          description: A list of `MappedInputFields`. Each `MappedInputField` corresponds
            to a column the source data table, and contains column name plus additional
            information that Entity Resolution uses for matching.
      required:
      - schemaName
      - schemaArn
      - mappedInputFields
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The input fails to satisfy the constraints specified by Entity
        Resolution.
    VeniceGlobalArn:
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:((schemamapping|matchingworkflow|idmappingworkflow|idnamespace)/[a-zA-Z_0-9-]{1,255})$
