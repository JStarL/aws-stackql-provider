openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: bedrock_agent
  x-aws-serviceName: bedrockagent
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2023-06-05'
  title: Agents for Amazon Bedrock
  description: |-
    Describes the API operations for creating and managing Amazon Bedrock agents.
servers:
- description: The Agents for Amazon Bedrock regional endpoint
  url: https://bedrock-agent.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /agents/{agentId}/agentversions/{agentVersion}/agentcollaborators/:
    put:
      operationId: AssociateAgentCollaborator
      description: |-
        Makes an agent a collaborator for another agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentDescriptor:
                  $ref: '#/components/schemas/AgentDescriptor'
                collaboratorName:
                  $ref: '#/components/schemas/Name'
                collaborationInstruction:
                  $ref: '#/components/schemas/CollaborationInstruction'
                relayConversationHistory:
                  $ref: '#/components/schemas/RelayConversationHistory'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListAgentCollaborators
      description: |-
        Retrieve a list of an agent's collaborators.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Version'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/{agentId}/agentversions/{agentVersion}/knowledgebases/:
    put:
      operationId: AssociateAgentKnowledgeBase
      description: |-
        Associates a knowledge base with an agent. If a knowledge base is associated and its `indexState` is set to `Enabled`, the agent queries the knowledge base for information to augment its response to the user.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                knowledgeBaseId:
                  $ref: '#/components/schemas/Id'
                description:
                  $ref: '#/components/schemas/Description'
                knowledgeBaseState:
                  $ref: '#/components/schemas/KnowledgeBaseState'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListAgentKnowledgeBases
      description: |-
        Lists knowledge bases associated with an agent and information about each one.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Version'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/:
    put:
      operationId: CreateAgent
      description: |-
        Creates an agent that orchestrates interactions between foundation models, data sources, software applications, user conversations, and APIs to carry out tasks to help customers.

          * Specify the following fields for security purposes.

            * `agentResourceRoleArn` – The Amazon Resource Name (ARN) of the role with permissions to invoke API operations on an agent.

            * (Optional) `customerEncryptionKeyArn` – The Amazon Resource Name (ARN) of a KMS key to encrypt the creation of the agent.

            * (Optional) `idleSessionTTLinSeconds` – Specify the number of seconds for which the agent should maintain session information. After this time expires, the subsequent `InvokeAgent` request begins a new session.

          * To enable your agent to retain conversational context across multiple sessions, include a `memoryConfiguration` object. For more information, see [Configure memory](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-configure-memory.html).

          * To override the default prompt behavior for agent orchestration and to use advanced prompts, include a `promptOverrideConfiguration` object. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html).

          * If your agent fails to be created, the response returns a list of `failureReasons` alongside a list of `recommendedActions` for you to troubleshoot.

          * The agent instructions will not be honored if your agent has only one knowledge base, uses default prompts, has no action group, and user input is disabled.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentName:
                  $ref: '#/components/schemas/Name'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                instruction:
                  $ref: '#/components/schemas/Instruction'
                foundationModel:
                  $ref: '#/components/schemas/ModelIdentifier'
                description:
                  $ref: '#/components/schemas/Description'
                orchestrationType:
                  $ref: '#/components/schemas/OrchestrationType'
                customOrchestration:
                  $ref: '#/components/schemas/CustomOrchestration'
                idleSessionTTLInSeconds:
                  $ref: '#/components/schemas/SessionTTL'
                agentResourceRoleArn:
                  $ref: '#/components/schemas/AgentRoleArn'
                customerEncryptionKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                promptOverrideConfiguration:
                  $ref: '#/components/schemas/PromptOverrideConfiguration'
                guardrailConfiguration:
                  $ref: '#/components/schemas/GuardrailConfiguration'
                memoryConfiguration:
                  $ref: '#/components/schemas/MemoryConfiguration'
                agentCollaboration:
                  $ref: '#/components/schemas/AgentCollaboration'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListAgents
      description: |-
        Lists the agents belonging to an account and information about each agent.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/{agentId}/agentversions/{agentVersion}/actiongroups/:
    put:
      operationId: CreateAgentActionGroup
      description: |-
        Creates an action group for an agent. An action group represents the actions that an agent can carry out for the customer by defining the APIs that an agent can call and the logic for calling them.

        To allow your agent to request the user for additional information when trying to complete a task, add an action group with the `parentActionGroupSignature` field set to `AMAZON.UserInput`.

        To allow your agent to generate, run, and troubleshoot code when trying to complete a task, add an action group with the `parentActionGroupSignature` field set to `AMAZON.CodeInterpreter`.

        You must leave the `description`, `apiSchema`, and `actionGroupExecutor` fields blank for this action group. During orchestration, if your agent determines that it needs to invoke an API in an action group, but doesn't have enough information to complete the API request, it will invoke this action group instead and return an [Observation](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Observation.html) reprompting the user for more information.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actionGroupName:
                  $ref: '#/components/schemas/Name'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                description:
                  $ref: '#/components/schemas/Description'
                parentActionGroupSignature:
                  $ref: '#/components/schemas/ActionGroupSignature'
                parentActionGroupSignatureParams:
                  $ref: '#/components/schemas/ActionGroupSignatureParams'
                actionGroupExecutor:
                  $ref: '#/components/schemas/ActionGroupExecutor'
                apiSchema:
                  $ref: '#/components/schemas/APISchema'
                actionGroupState:
                  $ref: '#/components/schemas/ActionGroupState'
                functionSchema:
                  $ref: '#/components/schemas/FunctionSchema'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListAgentActionGroups
      description: |-
        Lists the action groups for an agent and information about each one.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Version'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/{agentId}/agentaliases/:
    put:
      operationId: CreateAgentAlias
      description: |-
        Creates an alias of an agent that can be used to deploy the agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentAliasName:
                  $ref: '#/components/schemas/Name'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                description:
                  $ref: '#/components/schemas/Description'
                routingConfiguration:
                  $ref: '#/components/schemas/AgentAliasRoutingConfiguration'
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListAgentAliases
      description: |-
        Lists the aliases of an agent and information about each one.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /knowledgebases/{knowledgeBaseId}/datasources/:
    put:
      operationId: CreateDataSource
      description: |-
        Connects a knowledge base to a data source. You specify the configuration for the specific data source service in the `dataSourceConfiguration` field.

        You can't change the `chunkingConfiguration` after you create the data source connector.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                name:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                dataSourceConfiguration:
                  $ref: '#/components/schemas/DataSourceConfiguration'
                dataDeletionPolicy:
                  $ref: '#/components/schemas/DataDeletionPolicy'
                serverSideEncryptionConfiguration:
                  $ref: '#/components/schemas/ServerSideEncryptionConfiguration'
                vectorIngestionConfiguration:
                  $ref: '#/components/schemas/VectorIngestionConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListDataSources
      description: |-
        Lists the data sources in a knowledge base and information about each one.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /flows/:
    post:
      operationId: CreateFlow
      description: |-
        Creates a prompt flow that you can use to send an input through various steps to yield an output. Configure nodes, each of which corresponds to a step of the flow, and create connections between the nodes to create paths to different outputs. For more information, see [How it works](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-how-it-works.html) and [Create a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-create.html) in the Amazon Bedrock User Guide.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/FlowName'
                description:
                  $ref: '#/components/schemas/FlowDescription'
                executionRoleArn:
                  $ref: '#/components/schemas/FlowExecutionRoleArn'
                customerEncryptionKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                definition:
                  $ref: '#/components/schemas/FlowDefinition'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListFlows
      description: |-
        Returns a list of flows and information about each flow. For more information, see [Manage a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-manage.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /flows/{flowIdentifier}/aliases:
    post:
      operationId: CreateFlowAlias
      description: |-
        Creates an alias of a flow for deployment. For more information, see [Deploy a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-deploy.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                routingConfiguration:
                  $ref: '#/components/schemas/FlowAliasRoutingConfiguration'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListFlowAliases
      description: |-
        Returns a list of aliases for a flow.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /flows/{flowIdentifier}/versions:
    post:
      operationId: CreateFlowVersion
      description: |-
        Creates a version of the flow that you can deploy. For more information, see [Deploy a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-deploy.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/FlowDescription'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListFlowVersions
      description: |-
        Returns a list of information about each flow. For more information, see [Deploy a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-deploy.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /knowledgebases/:
    put:
      operationId: CreateKnowledgeBase
      description: |-
        Creates a knowledge base. A knowledge base contains your data sources so that Large Language Models (LLMs) can use your data. To create a knowledge base, you must first set up your data sources and configure a supported vector store. For more information, see [Set up a knowledge base](https://docs.aws.amazon.com/bedrock/latest/userguide/knowlege-base-prereq.html).

        If you prefer to let Amazon Bedrock create and manage a vector store for you in Amazon OpenSearch Service, use the console. For more information, see [Create a knowledge base](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-create).

          * Provide the `name` and an optional `description`.

          * Provide the Amazon Resource Name (ARN) with permissions to create a knowledge base in the `roleArn` field.

          * Provide the embedding model to use in the `embeddingModelArn` field in the `knowledgeBaseConfiguration` object.

          * Provide the configuration for your vector store in the `storageConfiguration` object.

            * For an Amazon OpenSearch Service database, use the `opensearchServerlessConfiguration` object. For more information, see [Create a vector store in Amazon OpenSearch Service](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-oss.html).

            * For an Amazon Aurora database, use the `RdsConfiguration` object. For more information, see [Create a vector store in Amazon Aurora](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-rds.html).

            * For a Pinecone database, use the `pineconeConfiguration` object. For more information, see [Create a vector store in Pinecone](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-pinecone.html).

            * For a Redis Enterprise Cloud database, use the `redisEnterpriseCloudConfiguration` object. For more information, see [Create a vector store in Redis Enterprise Cloud](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-redis.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                name:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                roleArn:
                  $ref: '#/components/schemas/KnowledgeBaseRoleArn'
                knowledgeBaseConfiguration:
                  $ref: '#/components/schemas/KnowledgeBaseConfiguration'
                storageConfiguration:
                  $ref: '#/components/schemas/StorageConfiguration'
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListKnowledgeBases
      description: |-
        Lists the knowledge bases in an account. The list also includesinformation about each knowledge base.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /prompts/:
    post:
      operationId: CreatePrompt
      description: |-
        Creates a prompt in your prompt library that you can add to a flow. For more information, see [Prompt management in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management.html), [Create a prompt using Prompt management](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-create.html) and [Prompt flows in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows.html) in the Amazon Bedrock User Guide.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/PromptName'
                description:
                  $ref: '#/components/schemas/PromptDescription'
                customerEncryptionKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                defaultVariant:
                  $ref: '#/components/schemas/PromptVariantName'
                variants:
                  $ref: '#/components/schemas/PromptVariantList'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListPrompts
      description: |-
        Returns either information about the working draft (`DRAFT` version) of each prompt in an account, or information about of all versions of a prompt, depending on whether you include the `promptIdentifier` field or not. For more information, see [View information about prompts using Prompt management](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-manage.html#prompt-management-view.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: promptIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PromptIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /prompts/{promptIdentifier}/versions:
    post:
      operationId: CreatePromptVersion
      description: |-
        Creates a static snapshot of your prompt that can be deployed to production. For more information, see [Deploy prompts using Prompt management by creating versions](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-deploy.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: promptIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PromptIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/PromptDescription'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/{agentId}/:
    delete:
      operationId: DeleteAgent
      description: |-
        Deletes an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: skipResourceInUseCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAgent
      description: |-
        Gets information about an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: PrepareAgent
      description: |-
        Creates a `DRAFT` version of the agent that can be used for internal testing.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateAgent
      description: |-
        Updates the configuration of an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentName:
                  $ref: '#/components/schemas/Name'
                instruction:
                  $ref: '#/components/schemas/Instruction'
                foundationModel:
                  $ref: '#/components/schemas/ModelIdentifier'
                description:
                  $ref: '#/components/schemas/Description'
                orchestrationType:
                  $ref: '#/components/schemas/OrchestrationType'
                customOrchestration:
                  $ref: '#/components/schemas/CustomOrchestration'
                idleSessionTTLInSeconds:
                  $ref: '#/components/schemas/SessionTTL'
                agentResourceRoleArn:
                  $ref: '#/components/schemas/AgentRoleArn'
                customerEncryptionKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                promptOverrideConfiguration:
                  $ref: '#/components/schemas/PromptOverrideConfiguration'
                guardrailConfiguration:
                  $ref: '#/components/schemas/GuardrailConfiguration'
                memoryConfiguration:
                  $ref: '#/components/schemas/MemoryConfiguration'
                agentCollaboration:
                  $ref: '#/components/schemas/AgentCollaboration'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}/:
    delete:
      operationId: DeleteAgentActionGroup
      description: |-
        Deletes an action group in an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftVersion'
      - name: actionGroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: skipResourceInUseCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '204': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAgentActionGroup
      description: |-
        Gets information about an action group for an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Version'
      - name: actionGroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateAgentActionGroup
      description: |-
        Updates the configuration for an action group for an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftVersion'
      - name: actionGroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actionGroupName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                parentActionGroupSignature:
                  $ref: '#/components/schemas/ActionGroupSignature'
                parentActionGroupSignatureParams:
                  $ref: '#/components/schemas/ActionGroupSignatureParams'
                actionGroupExecutor:
                  $ref: '#/components/schemas/ActionGroupExecutor'
                actionGroupState:
                  $ref: '#/components/schemas/ActionGroupState'
                apiSchema:
                  $ref: '#/components/schemas/APISchema'
                functionSchema:
                  $ref: '#/components/schemas/FunctionSchema'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/{agentId}/agentaliases/{agentAliasId}/:
    delete:
      operationId: DeleteAgentAlias
      description: |-
        Deletes an alias of an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentAliasId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AgentAliasId'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAgentAlias
      description: |-
        Gets information about an alias of an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentAliasId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AgentAliasId'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateAgentAlias
      description: |-
        Updates configurations for an alias of an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentAliasId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AgentAliasId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentAliasName:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                routingConfiguration:
                  $ref: '#/components/schemas/AgentAliasRoutingConfiguration'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/{agentId}/agentversions/{agentVersion}/:
    delete:
      operationId: DeleteAgentVersion
      description: |-
        Deletes a version of an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NumericalVersion'
      - name: skipResourceInUseCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAgentVersion
      description: |-
        Gets details about a version of an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NumericalVersion'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}:
    delete:
      operationId: DeleteDataSource
      description: |-
        Deletes a data source from a knowledge base.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetDataSource
      description: |-
        Gets information about a data source.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateDataSource
      description: |-
        Updates the configurations for a data source connector.

        You can't change the `chunkingConfiguration` after you create the data source connector. Specify the existing `chunkingConfiguration`.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                dataSourceConfiguration:
                  $ref: '#/components/schemas/DataSourceConfiguration'
                dataDeletionPolicy:
                  $ref: '#/components/schemas/DataDeletionPolicy'
                serverSideEncryptionConfiguration:
                  $ref: '#/components/schemas/ServerSideEncryptionConfiguration'
                vectorIngestionConfiguration:
                  $ref: '#/components/schemas/VectorIngestionConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /flows/{flowIdentifier}/:
    delete:
      operationId: DeleteFlow
      description: |-
        Deletes a flow.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      - name: skipResourceInUseCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetFlow
      description: |-
        Retrieves information about a flow. For more information, see [Manage a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-manage.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: PrepareFlow
      description: |-
        Prepares the `DRAFT` version of a flow so that it can be invoked. For more information, see [Test a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-test.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateFlow
      description: |-
        Modifies a flow. Include both fields that you want to keep and fields that you want to change. For more information, see [How it works](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-how-it-works.html) and [Create a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-create.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/FlowName'
                description:
                  $ref: '#/components/schemas/FlowDescription'
                executionRoleArn:
                  $ref: '#/components/schemas/FlowExecutionRoleArn'
                customerEncryptionKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                definition:
                  $ref: '#/components/schemas/FlowDefinition'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /flows/{flowIdentifier}/aliases/{aliasIdentifier}:
    delete:
      operationId: DeleteFlowAlias
      description: |-
        Deletes an alias of a flow.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      - name: aliasIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowAliasIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetFlowAlias
      description: |-
        Retrieves information about a flow. For more information, see [Deploy a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-deploy.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      - name: aliasIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowAliasIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateFlowAlias
      description: |-
        Modifies the alias of a flow. Include both fields that you want to keep and ones that you want to change. For more information, see [Deploy a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-deploy.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      - name: aliasIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowAliasIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                routingConfiguration:
                  $ref: '#/components/schemas/FlowAliasRoutingConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /flows/{flowIdentifier}/versions/{flowVersion}/:
    delete:
      operationId: DeleteFlowVersion
      description: |-
        Deletes a version of a flow.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      - name: flowVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NumericalVersion'
      - name: skipResourceInUseCheck
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetFlowVersion
      description: |-
        Retrieves information about a version of a flow. For more information, see [Deploy a flow in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-deploy.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: flowIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FlowIdentifier'
      - name: flowVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NumericalVersion'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /knowledgebases/{knowledgeBaseId}:
    delete:
      operationId: DeleteKnowledgeBase
      description: |-
        Deletes a knowledge base. Before deleting a knowledge base, you should disassociate the knowledge base from any agents that it is associated with by making a [DisassociateAgentKnowledgeBase](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_DisassociateAgentKnowledgeBase.html) request.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetKnowledgeBase
      description: |-
        Gets information about a knoweldge base.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateKnowledgeBase
      description: |-
        Updates the configuration of a knowledge base with the fields that you specify. Because all fields will be overwritten, you must include the same values for fields that you want to keep the same.

        You can change the following fields:

          * `name`

          * `description`

          * `roleArn`

        You can't change the `knowledgeBaseConfiguration` or `storageConfiguration` fields, so you must specify the same configurations as when you created the knowledge base. You can send a [GetKnowledgeBase](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_GetKnowledgeBase.html) request and copy the same configurations.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Name'
                description:
                  $ref: '#/components/schemas/Description'
                roleArn:
                  $ref: '#/components/schemas/KnowledgeBaseRoleArn'
                knowledgeBaseConfiguration:
                  $ref: '#/components/schemas/KnowledgeBaseConfiguration'
                storageConfiguration:
                  $ref: '#/components/schemas/StorageConfiguration'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/documents/deleteDocuments:
    post:
      operationId: DeleteKnowledgeBaseDocuments
      description: |-
        Deletes documents from a data source and syncs the changes to the knowledge base that is connected to it. For more information, see [Ingest changes directly into a knowledge base](https://docs.aws.amazon.com/bedrock/latest/userguide/kb-direct-ingestion.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                documentIdentifiers:
                  $ref: '#/components/schemas/DocumentIdentifiers'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /prompts/{promptIdentifier}/:
    delete:
      operationId: DeletePrompt
      description: |-
        Deletes a prompt or a version of it, depending on whether you include the `promptVersion` field or not. For more information, see [Delete prompts from the Prompt management tool](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-manage.html#prompt-management-delete.html) and [Delete a version of a prompt from the Prompt management tool](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-deploy.html#prompt-management-versions-delete.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: promptIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PromptIdentifier'
      - name: promptVersion
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NumericalVersion'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetPrompt
      description: |-
        Retrieves information about the working draft (`DRAFT` version) of a prompt or a version of it, depending on whether you include the `promptVersion` field or not. For more information, see [View information about prompts using Prompt management](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-manage.html#prompt-management-view.html) and [View information about a version of your prompt](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-deploy.html#prompt-management-versions-view.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: promptIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PromptIdentifier'
      - name: promptVersion
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Version'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdatePrompt
      description: |-
        Modifies a prompt in your prompt library. Include both fields that you want to keep and fields that you want to replace. For more information, see [Prompt management in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management.html) and [Edit prompts in your prompt library](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-manage.html#prompt-management-edit) in the Amazon Bedrock User Guide.
      parameters:
      - name: promptIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PromptIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/PromptName'
                description:
                  $ref: '#/components/schemas/PromptDescription'
                customerEncryptionKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                defaultVariant:
                  $ref: '#/components/schemas/PromptVariantName'
                variants:
                  $ref: '#/components/schemas/PromptVariantList'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/{agentId}/agentversions/{agentVersion}/agentcollaborators/{collaboratorId}/:
    delete:
      operationId: DisassociateAgentCollaborator
      description: |-
        Disassociates an agent collaborator.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftVersion'
      - name: collaboratorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '204': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAgentCollaborator
      description: |-
        Retrieves information about an agent's collaborator.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Version'
      - name: collaboratorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateAgentCollaborator
      description: |-
        Updates an agent's collaborator.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftVersion'
      - name: collaboratorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentDescriptor:
                  $ref: '#/components/schemas/AgentDescriptor'
                collaboratorName:
                  $ref: '#/components/schemas/Name'
                collaborationInstruction:
                  $ref: '#/components/schemas/CollaborationInstruction'
                relayConversationHistory:
                  $ref: '#/components/schemas/RelayConversationHistory'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}/:
    delete:
      operationId: DisassociateAgentKnowledgeBase
      description: |-
        Disassociates a knowledge base from an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftVersion'
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '204': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAgentKnowledgeBase
      description: |-
        Gets information about a knowledge base associated with an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Version'
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateAgentKnowledgeBase
      description: |-
        Updates the configuration for a knowledge base that has been associated with an agent.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: agentVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DraftVersion'
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                knowledgeBaseState:
                  $ref: '#/components/schemas/KnowledgeBaseState'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/{ingestionJobId}:
    get:
      operationId: GetIngestionJob
      description: |-
        Gets information about a data ingestion job. Data sources are ingested into your knowledge base so that Large Language Models (LLMs) can use your data.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: ingestionJobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/documents/getDocuments:
    post:
      operationId: GetKnowledgeBaseDocuments
      description: |-
        Retrieves specific documents from a data source that is connected to a knowledge base. For more information, see [Ingest changes directly into a knowledge base](https://docs.aws.amazon.com/bedrock/latest/userguide/kb-direct-ingestion.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                documentIdentifiers:
                  $ref: '#/components/schemas/DocumentIdentifiers'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/documents:
    put:
      operationId: IngestKnowledgeBaseDocuments
      description: |-
        Ingests documents directly into the knowledge base that is connected to the data source. The `dataSourceType` specified in the content for each document must match the type of the data source that you specify in the header. For more information, see [Ingest changes directly into a knowledge base](https://docs.aws.amazon.com/bedrock/latest/userguide/kb-direct-ingestion.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                documents:
                  $ref: '#/components/schemas/KnowledgeBaseDocuments'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: ListKnowledgeBaseDocuments
      description: |-
        Retrieves all the documents contained in a data source that is connected to a knowledge base. For more information, see [Ingest changes directly into a knowledge base](https://docs.aws.amazon.com/bedrock/latest/userguide/kb-direct-ingestion.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /agents/{agentId}/agentversions/:
    post:
      operationId: ListAgentVersions
      description: |-
        Lists the versions of an agent and information about each version.
      parameters:
      - name: agentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/:
    post:
      operationId: ListIngestionJobs
      description: |-
        Lists the data ingestion jobs for a data source. The list also includes information about each job.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/IngestionJobFilters'
                sortBy:
                  $ref: '#/components/schemas/IngestionJobSortBy'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: StartIngestionJob
      description: |-
        Begins a data ingestion job. Data sources are ingested into your knowledge base so that Large Language Models (LLMs) can use your data.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                description:
                  $ref: '#/components/schemas/Description'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        List all the tags for the resource you specify.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaggableResourcesArn'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Associate tags with a resource. For more information, see [Tagging resources](https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html) in the Amazon Bedrock User Guide.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaggableResourcesArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The number of requests exceeds the service quota. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Remove tags from a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaggableResourcesArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/{ingestionJobId}/stop:
    post:
      operationId: StopIngestionJob
      description: |-
        Stops a currently running data ingestion job. You can send a `StartIngestionJob` request again to ingest the rest of your data when you are ready.
      parameters:
      - name: knowledgeBaseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: dataSourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: ingestionJobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '202': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict performing an operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /flows/validate-definition:
    post:
      operationId: ValidateFlowDefinition
      description: |-
        Validates the definition of a flow.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                definition:
                  $ref: '#/components/schemas/FlowDefinition'
      responses:
        '200': {}
        '403':
          description: |-
            The request is denied because of missing access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal server error occurred. Retry your request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The number of requests exceeds the limit. Resubmit your request later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Input validation failed. Check your request parameters and retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    APISchema:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/S3Identifier'
        description: |-
          Contains details about the S3 object containing the OpenAPI schema for the action group. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html).
      - allOf:
        - $ref: '#/components/schemas/Payload'
        description: |-
          The JSON or YAML-formatted payload defining the OpenAPI schema for the action group. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html).
      description: |-
        Contains details about the OpenAPI schema for the action group. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html). You can either include the schema directly in the `payload` field or you can upload it to an S3 bucket and specify the S3 bucket location in the `s3` field.
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/NonBlankString'
      description: The request is denied because of missing access permissions.
    ActionGroupExecutor:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/LambdaArn'
        description: |-
          The Amazon Resource Name (ARN) of the Lambda function containing the business logic that is carried out upon invoking the action.
      - allOf:
        - $ref: '#/components/schemas/CustomControlMethod'
        description: |-
          To return the action group invocation results directly in the `InvokeAgent` response, specify `RETURN_CONTROL`.
      description: |-
        Contains details about the Lambda function containing the business logic that is carried out upon invoking the action or the custom control method for handling the information elicited from the user.
    ActionGroupSignature:
      type: string
      enum:
      - AMAZON.UserInput
      - AMAZON.CodeInterpreter
      - ANTHROPIC.Computer
      - ANTHROPIC.Bash
      - ANTHROPIC.TextEditor
    ActionGroupSignatureParams:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    ActionGroupState:
      type: string
      enum:
      - ENABLED
      - DISABLED
    ActionGroupSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ActionGroupSummary'
    ActionGroupSummary:
      type: object
      properties:
        actionGroupId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the action group.
        actionGroupName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the action group.
        actionGroupState:
          allOf:
          - $ref: '#/components/schemas/ActionGroupState'
          description: Specifies whether the action group is available for the agent
            to invoke or not when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html)
            request.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the action group.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the action group was last updated.
      required:
      - actionGroupId
      - actionGroupName
      - actionGroupState
      - updatedAt
      description: Contains details about an action group.
    Agent:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
        agentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the agent.
        agentArn:
          allOf:
          - $ref: '#/components/schemas/AgentArn'
          description: The Amazon Resource Name (ARN) of the agent.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The version of the agent.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        instruction:
          allOf:
          - $ref: '#/components/schemas/Instruction'
          description: Instructions that tell the agent what it should do and how
            it should interact with users.
        agentStatus:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          description: "The status of the agent and whether it is ready for use. The\
            \ following statuses are possible:\n\n  * CREATING – The agent is being\
            \ created.\n\n  * PREPARING – The agent is being prepared.\n\n  * PREPARED\
            \ – The agent is prepared and ready to be invoked.\n\n  * NOT_PREPARED\
            \ – The agent has been created but not yet prepared.\n\n  * FAILED – The\
            \ agent API operation failed.\n\n  * UPDATING – The agent is being updated.\n\
            \n  * DELETING – The agent is being deleted."
        foundationModel:
          allOf:
          - $ref: '#/components/schemas/ModelIdentifier'
          description: The foundation model used for orchestration by the agent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the agent.
        orchestrationType:
          allOf:
          - $ref: '#/components/schemas/OrchestrationType'
          description: Specifies the orchestration strategy for the agent.
        customOrchestration:
          allOf:
          - $ref: '#/components/schemas/CustomOrchestration'
          description: Contains custom orchestration configurations for the agent.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: 'The number of seconds for which Amazon Bedrock keeps information
            about a user''s conversation with the agent.


            A user interaction remains active for the amount of time specified. If
            no conversation occurs during this time, the session expires and Amazon
            Bedrock deletes any data provided before the timeout.'
        agentResourceRoleArn:
          allOf:
          - $ref: '#/components/schemas/AgentRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role with permissions
            to invoke API operations on the agent.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key that encrypts
            the agent.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the agent was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the agent was last updated.
        preparedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the agent was last prepared.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: Contains reasons that the agent-related API that you invoked
            failed.
        recommendedActions:
          allOf:
          - $ref: '#/components/schemas/RecommendedActions'
          description: Contains recommended actions to take for the agent-related
            API that you invoked to succeed.
        promptOverrideConfiguration:
          allOf:
          - $ref: '#/components/schemas/PromptOverrideConfiguration'
          description: Contains configurations to override prompt templates in different
            parts of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html).
        guardrailConfiguration:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfiguration'
          description: Details about the guardrail associated with the agent.
        memoryConfiguration:
          allOf:
          - $ref: '#/components/schemas/MemoryConfiguration'
          description: Contains memory configuration for the agent.
        agentCollaboration:
          allOf:
          - $ref: '#/components/schemas/AgentCollaboration'
          description: The agent's collaboration settings.
      required:
      - agentId
      - agentName
      - agentArn
      - agentVersion
      - agentStatus
      - idleSessionTTLInSeconds
      - agentResourceRoleArn
      - createdAt
      - updatedAt
      description: Contains details about an agent.
    AgentActionGroup:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent to which the action group
            belongs.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the agent to which the action group belongs.
        actionGroupId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the action group.
        actionGroupName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the action group.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the action group.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the action group was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the action group was last updated.
        parentActionSignature:
          allOf:
          - $ref: '#/components/schemas/ActionGroupSignature'
          description: 'If this field is set as `AMAZON.UserInput`, the agent can
            request the user for additional information when trying to complete a
            task. The `description`, `apiSchema`, and `actionGroupExecutor` fields
            must be blank for this action group.


            During orchestration, if the agent determines that it needs to invoke
            an API in an action group, but doesn''t have enough information to complete
            the API request, it will invoke this action group instead and return an
            [Observation](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Observation.html)
            reprompting the user for more information.'
        parentActionGroupSignatureParams:
          allOf:
          - $ref: '#/components/schemas/ActionGroupSignatureParams'
          description: 'The configuration settings for a computer use action.


            Computer use is a new Anthropic Claude model capability (in beta) available
            with Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. For more information,
            see [Configure an Amazon Bedrock Agent to complete tasks with computer
            use tools](https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html).'
        actionGroupExecutor:
          allOf:
          - $ref: '#/components/schemas/ActionGroupExecutor'
          description: The Amazon Resource Name (ARN) of the Lambda function containing
            the business logic that is carried out upon invoking the action or the
            custom control method for handling the information elicited from the user.
        apiSchema:
          allOf:
          - $ref: '#/components/schemas/APISchema'
          description: Contains either details about the S3 object containing the
            OpenAPI schema for the action group or the JSON or YAML-formatted payload
            defining the schema. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html).
        functionSchema:
          allOf:
          - $ref: '#/components/schemas/FunctionSchema'
          description: Defines functions that each define parameters that the agent
            needs to invoke from the user. Each function represents an action in an
            action group.
        actionGroupState:
          allOf:
          - $ref: '#/components/schemas/ActionGroupState'
          description: Specifies whether the action group is available for the agent
            to invoke or not when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html)
            request.
      required:
      - agentId
      - agentVersion
      - actionGroupId
      - actionGroupName
      - createdAt
      - updatedAt
      - actionGroupState
      description: Contains details about an action group.
    AgentAlias:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
        agentAliasId:
          allOf:
          - $ref: '#/components/schemas/AgentAliasId'
          description: The unique identifier of the alias of the agent.
        agentAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the alias of the agent.
        agentAliasArn:
          allOf:
          - $ref: '#/components/schemas/AgentAliasArn'
          description: The Amazon Resource Name (ARN) of the alias of the agent.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the alias of the agent.
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AgentAliasRoutingConfiguration'
          description: Contains details about the routing configuration of the alias.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the alias of the agent was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the alias was last updated.
        agentAliasHistoryEvents:
          allOf:
          - $ref: '#/components/schemas/AgentAliasHistoryEvents'
          description: Contains details about the history of the alias.
        agentAliasStatus:
          allOf:
          - $ref: '#/components/schemas/AgentAliasStatus'
          description: "The status of the alias of the agent and whether it is ready\
            \ for use. The following statuses are possible:\n\n  * CREATING – The\
            \ agent alias is being created.\n\n  * PREPARED – The agent alias is finished\
            \ being created or updated and is ready to be invoked.\n\n  * FAILED –\
            \ The agent alias API operation failed.\n\n  * UPDATING – The agent alias\
            \ is being updated.\n\n  * DELETING – The agent alias is being deleted.\n\
            \n  * DISSOCIATED - The agent alias has no version associated with it."
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: Information on the failure of Provisioned Throughput assigned
            to an agent alias.
      required:
      - agentId
      - agentAliasId
      - agentAliasName
      - agentAliasArn
      - routingConfiguration
      - createdAt
      - updatedAt
      - agentAliasStatus
      description: Contains details about an alias of an agent.
    AgentAliasArn:
      type: string
      pattern: ^arn:aws:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:agent-alias/[0-9a-zA-Z]{10}/[0-9a-zA-Z]{10}$
      maxLength: 2048
    AgentAliasHistoryEvent:
      type: object
      properties:
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AgentAliasRoutingConfiguration'
          description: Contains details about the version of the agent with which
            the alias is associated.
        endDate:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The date that the alias stopped being associated to the version
            in the `routingConfiguration` object
        startDate:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The date that the alias began being associated to the version
            in the `routingConfiguration` object.
      description: Contains details about the history of the alias.
    AgentAliasHistoryEvents:
      type: array
      items:
        $ref: '#/components/schemas/AgentAliasHistoryEvent'
    AgentAliasId:
      type: string
      pattern: ^(\bTSTALIASID\b|[0-9a-zA-Z]+)$
      minLength: 10
      maxLength: 10
    AgentAliasRoutingConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/AgentAliasRoutingConfigurationListItem'
    AgentAliasRoutingConfigurationListItem:
      type: object
      properties:
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the agent with which the alias is associated.
        provisionedThroughput:
          allOf:
          - $ref: '#/components/schemas/ProvisionedModelIdentifier'
          description: Information on the Provisioned Throughput assigned to an agent
            alias.
      description: Contains details about the routing configuration of the alias.
    AgentAliasStatus:
      type: string
      enum:
      - CREATING
      - PREPARED
      - FAILED
      - UPDATING
      - DELETING
      - DISSOCIATED
    AgentAliasSummaries:
      type: array
      items:
        $ref: '#/components/schemas/AgentAliasSummary'
    AgentAliasSummary:
      type: object
      properties:
        agentAliasId:
          allOf:
          - $ref: '#/components/schemas/AgentAliasId'
          description: Contains details about
        agentAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the alias.
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AgentAliasRoutingConfiguration'
          description: Contains details about the version of the agent with which
            the alias is associated.
        agentAliasStatus:
          allOf:
          - $ref: '#/components/schemas/AgentAliasStatus'
          description: The status of the alias.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the alias of the agent was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the alias was last updated.
      required:
      - agentAliasId
      - agentAliasName
      - agentAliasStatus
      - createdAt
      - updatedAt
      description: Contains details about an alias of an agent.
    AgentArn:
      type: string
      pattern: ^arn:aws:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:agent/[0-9a-zA-Z]{10}$
      maxLength: 2048
    AgentCollaboration:
      type: string
      enum:
      - SUPERVISOR
      - SUPERVISOR_ROUTER
      - DISABLED
    AgentCollaborator:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The collaborator's agent ID.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The collaborator's agent version.
        agentDescriptor:
          allOf:
          - $ref: '#/components/schemas/AgentDescriptor'
          description: The collaborator's agent descriptor.
        collaboratorId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The collaborator's collaborator ID.
        collaborationInstruction:
          allOf:
          - $ref: '#/components/schemas/CollaborationInstruction'
          description: The collaborator's instructions.
        collaboratorName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The collaborator's collaborator name.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: When the collaborator was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: When the collaborator was updated.
        relayConversationHistory:
          allOf:
          - $ref: '#/components/schemas/RelayConversationHistory'
          description: The collaborator's relay conversation history.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The collaborator's client token.
      required:
      - agentId
      - agentVersion
      - agentDescriptor
      - collaboratorId
      - collaborationInstruction
      - collaboratorName
      - createdAt
      - lastUpdatedAt
      description: An agent collaborator.
    AgentCollaboratorSummaries:
      type: array
      items:
        $ref: '#/components/schemas/AgentCollaboratorSummary'
    AgentCollaboratorSummary:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The collaborator's agent ID.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The collaborator's agent version.
        collaboratorId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The collaborator's ID.
        agentDescriptor:
          allOf:
          - $ref: '#/components/schemas/AgentDescriptor'
          description: The collaborator's agent descriptor.
        collaborationInstruction:
          allOf:
          - $ref: '#/components/schemas/CollaborationInstruction'
          description: The collaborator's collaboration instruction.
        relayConversationHistory:
          allOf:
          - $ref: '#/components/schemas/RelayConversationHistory'
          description: The collaborator's relay conversation history.
        collaboratorName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The collaborator's name.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: When the collaborator was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: When the collaborator was last updated.
      required:
      - agentId
      - agentVersion
      - collaboratorId
      - agentDescriptor
      - collaborationInstruction
      - relayConversationHistory
      - collaboratorName
      - createdAt
      - lastUpdatedAt
      description: An agent collaborator summary.
    AgentDescriptor:
      type: object
      properties:
        aliasArn:
          allOf:
          - $ref: '#/components/schemas/AgentAliasArn'
          description: The agent's alias ARN.
      description: An agent descriptor.
    AgentFlowNodeConfiguration:
      type: object
      properties:
        agentAliasArn:
          allOf:
          - $ref: '#/components/schemas/AgentAliasArn'
          description: The Amazon Resource Name (ARN) of the alias of the agent to
            invoke.
      required:
      - agentAliasArn
      description: Defines an agent node in your flow. You specify the agent to invoke
        at this point in the flow. For more information, see [Node types in Amazon
        Bedrock works](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html)
        in the Amazon Bedrock User Guide.
    AgentKnowledgeBase:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent with which the knowledge
            base is associated.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the agent with which the knowledge base is associated.
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the association between the agent
            and the knowledge base.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the association between the agent and the
            knowledge base.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the association between the agent and the
            knowledge base was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the association between the agent and the
            knowledge base was last updated.
        knowledgeBaseState:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseState'
          description: Specifies whether to use the knowledge base or not when sending
            an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html)
            request.
      required:
      - agentId
      - agentVersion
      - knowledgeBaseId
      - description
      - createdAt
      - updatedAt
      - knowledgeBaseState
      description: Contains details about a knowledge base that is associated with
        an agent.
    AgentKnowledgeBaseSummaries:
      type: array
      items:
        $ref: '#/components/schemas/AgentKnowledgeBaseSummary'
    AgentKnowledgeBaseSummary:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base associated with
            an agent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the knowledge base associated with an agent.
        knowledgeBaseState:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseState'
          description: Specifies whether the agent uses the knowledge base or not
            when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html)
            request.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the knowledge base associated with an agent
            was last updated.
      required:
      - knowledgeBaseId
      - knowledgeBaseState
      - updatedAt
      description: Contains details about a knowledge base associated with an agent.
    AgentRoleArn:
      type: string
      pattern: ^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+$
      maxLength: 2048
    AgentStatus:
      type: string
      enum:
      - CREATING
      - PREPARING
      - PREPARED
      - NOT_PREPARED
      - DELETING
      - FAILED
      - VERSIONING
      - UPDATING
    AgentSummaries:
      type: array
      items:
        $ref: '#/components/schemas/AgentSummary'
    AgentSummary:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
        agentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the agent.
        agentStatus:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          description: The status of the agent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the agent.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the agent was last updated.
        latestAgentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The latest version of the agent.
        guardrailConfiguration:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfiguration'
          description: Details about the guardrail associated with the agent.
      required:
      - agentId
      - agentName
      - agentStatus
      - updatedAt
      description: Contains details about an agent.
    AgentVersion:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent that the version belongs
            to.
        agentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the agent that the version belongs to.
        agentArn:
          allOf:
          - $ref: '#/components/schemas/AgentArn'
          description: The Amazon Resource Name (ARN) of the agent that the version
            belongs to.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version number.
        instruction:
          allOf:
          - $ref: '#/components/schemas/Instruction'
          description: The instructions provided to the agent.
        agentStatus:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          description: The status of the agent that the version belongs to.
        foundationModel:
          allOf:
          - $ref: '#/components/schemas/ModelIdentifier'
          description: The foundation model that the version invokes.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the version.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: 'The number of seconds for which Amazon Bedrock keeps information
            about a user''s conversation with the agent.


            A user interaction remains active for the amount of time specified. If
            no conversation occurs during this time, the session expires and Amazon
            Bedrock deletes any data provided before the timeout.'
        agentResourceRoleArn:
          allOf:
          - $ref: '#/components/schemas/AgentRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role with permissions
            to invoke API operations on the agent.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key that encrypts
            the agent.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the version was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the version was last updated.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: A list of reasons that the API operation on the version failed.
        recommendedActions:
          allOf:
          - $ref: '#/components/schemas/RecommendedActions'
          description: A list of recommended actions to take for the failed API operation
            on the version to succeed.
        promptOverrideConfiguration:
          allOf:
          - $ref: '#/components/schemas/PromptOverrideConfiguration'
          description: Contains configurations to override prompt templates in different
            parts of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html).
        guardrailConfiguration:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfiguration'
          description: Details about the guardrail associated with the agent.
        memoryConfiguration:
          allOf:
          - $ref: '#/components/schemas/MemoryConfiguration'
          description: Contains details of the memory configuration on the version
            of the agent.
        agentCollaboration:
          allOf:
          - $ref: '#/components/schemas/AgentCollaboration'
          description: The agent's collaboration settings.
      required:
      - agentId
      - agentName
      - agentArn
      - version
      - agentStatus
      - idleSessionTTLInSeconds
      - agentResourceRoleArn
      - createdAt
      - updatedAt
      description: Contains details about a version of an agent.
    AgentVersionSummaries:
      type: array
      items:
        $ref: '#/components/schemas/AgentVersionSummary'
    AgentVersionSummary:
      type: object
      properties:
        agentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the agent to which the version belongs.
        agentStatus:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          description: The status of the agent to which the version belongs.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the agent.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the version was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the version was last updated.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the version of the agent.
        guardrailConfiguration:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfiguration'
          description: Details about the guardrail associated with the agent.
      required:
      - agentName
      - agentStatus
      - agentVersion
      - createdAt
      - updatedAt
      description: Contains details about a version of an agent.
    AnyToolChoice:
      type: object
      properties: {}
      description: Defines tools, at least one of which must be requested by the model.
        No text is generated but the results of tool use are sent back to the model
        to help generate a response. For more information, see [Use a tool to complete
        an Amazon Bedrock model response](https://docs.aws.amazon.com/bedrock/latest/userguide/tool-use.html).
    AssociateAgentCollaboratorRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The agent's ID.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: An agent version.
        agentDescriptor:
          allOf:
          - $ref: '#/components/schemas/AgentDescriptor'
          description: The alias of the collaborator agent.
        collaboratorName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: A name for the collaborator.
        collaborationInstruction:
          allOf:
          - $ref: '#/components/schemas/CollaborationInstruction'
          description: Instruction for the collaborator.
        relayConversationHistory:
          allOf:
          - $ref: '#/components/schemas/RelayConversationHistory'
          description: A relay conversation history for the collaborator.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A client token.
      required:
      - agentId
      - agentVersion
      - agentDescriptor
      - collaboratorName
      - collaborationInstruction
    AssociateAgentCollaboratorResponse:
      type: object
      properties:
        agentCollaborator:
          allOf:
          - $ref: '#/components/schemas/AgentCollaborator'
          description: Details about the collaborator.
      required:
      - agentCollaborator
    AssociateAgentKnowledgeBaseRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent with which you want to associate
            the knowledge base.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The version of the agent with which you want to associate the
            knowledge base.
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base to associate with
            the agent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of what the agent should use the knowledge base
            for.
        knowledgeBaseState:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseState'
          description: Specifies whether to use the knowledge base or not when sending
            an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html)
            request.
      required:
      - agentId
      - agentVersion
      - knowledgeBaseId
      - description
    AssociateAgentKnowledgeBaseResponse:
      type: object
      properties:
        agentKnowledgeBase:
          allOf:
          - $ref: '#/components/schemas/AgentKnowledgeBase'
          description: Contains details about the knowledge base that has been associated
            with the agent.
      required:
      - agentKnowledgeBase
    AutoToolChoice:
      type: object
      properties: {}
      description: Defines tools. The model automatically decides whether to call
        a tool or to generate text instead. For more information, see [Use a tool
        to complete an Amazon Bedrock model response](https://docs.aws.amazon.com/bedrock/latest/userguide/tool-use.html).
    AwsDataCatalogTableName:
      type: string
      pattern: ^.*\.*$
      minLength: 1
      maxLength: 200
    AwsDataCatalogTableNames:
      type: array
      items:
        $ref: '#/components/schemas/AwsDataCatalogTableName'
    BasePromptTemplate:
      type: string
      minLength: 1
      maxLength: 100000
    BedrockDataAutomationConfiguration:
      type: object
      properties:
        parsingModality:
          allOf:
          - $ref: '#/components/schemas/ParsingModality'
          description: Specifies whether to enable parsing of multimodal data, including
            both text and/or images.
      description: Contains configurations for using Amazon Bedrock Data Automation
        as the parser for ingesting your data sources.
    BedrockEmbeddingModelArn:
      type: string
      pattern: ^(arn:aws(-[^:]{1,12})?:(bedrock|sagemaker):[a-z0-9-]{1,20}:([0-9]{12})?:([a-z-]+/)?)?([a-zA-Z0-9.-]{1,63}){0,2}(([:][a-z0-9-]{1,63}){0,2})?(/[a-z0-9]{1,12})?$
      minLength: 20
      maxLength: 2048
    BedrockEmbeddingModelConfiguration:
      type: object
      properties:
        dimensions:
          allOf:
          - $ref: '#/components/schemas/Dimensions'
          description: The dimensions details for the vector configuration used on
            the Bedrock embeddings model.
        embeddingDataType:
          allOf:
          - $ref: '#/components/schemas/EmbeddingDataType'
          description: The data type for the vectors when using a model to convert
            text into vector embeddings. The model must support the specified data
            type for vector embeddings. Floating-point (float32) is the default data
            type, and is supported by most models for vector embeddings. See [Supported
            embeddings models](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-supported.html)
            for information on the available models and their vector data types.
      description: The vector configuration details for the Bedrock embeddings model.
    BedrockFoundationModelConfiguration:
      type: object
      properties:
        modelArn:
          allOf:
          - $ref: '#/components/schemas/BedrockModelArn'
          description: The ARN of the foundation model to use for parsing.
        parsingPrompt:
          allOf:
          - $ref: '#/components/schemas/ParsingPrompt'
          description: Instructions for interpreting the contents of a document.
        parsingModality:
          allOf:
          - $ref: '#/components/schemas/ParsingModality'
          description: Specifies whether to enable parsing of multimodal data, including
            both text and/or images.
      required:
      - modelArn
      description: Settings for a foundation model used to parse documents for a data
        source.
    BedrockFoundationModelContextEnrichmentConfiguration:
      type: object
      properties:
        enrichmentStrategyConfiguration:
          allOf:
          - $ref: '#/components/schemas/EnrichmentStrategyConfiguration'
          description: The enrichment stategy used to provide additional context.
            For example, Neptune GraphRAG uses Amazon Bedrock foundation models to
            perform chunk entity extraction.
        modelArn:
          allOf:
          - $ref: '#/components/schemas/BedrockModelArn'
          description: The Amazon Resource Name (ARN) of the model used to create
            vector embeddings for the knowledge base.
      required:
      - enrichmentStrategyConfiguration
      - modelArn
      description: Context enrichment configuration is used to provide additional
        context to the RAG application using Amazon Bedrock foundation models.
    BedrockModelArn:
      type: string
      pattern: ^(arn:aws(-[^:]{1,12})?:(bedrock):[a-z0-9-]{1,20}:([0-9]{12})?:([a-z-]+/)?)?([a-zA-Z0-9.-]{1,63}){0,2}(([:][a-z0-9-]{1,63}){0,2})?(/[a-z0-9]{1,12})?$
      minLength: 1
      maxLength: 2048
    BucketOwnerAccountId:
      type: string
      pattern: ^[0-9]{12}$
      minLength: 12
      maxLength: 12
    ByteContentBlob:
      type: string
      format: byte
      minLength: 1
      maxLength: 5242880
      x-sensitive: true
    ByteContentDoc:
      type: object
      properties:
        mimeType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The MIME type of the content. For a list of MIME types, see\
            \ [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml).\
            \ The following MIME types are supported:\n\n  * text/plain\n\n  * text/html\n\
            \n  * text/csv\n\n  * text/vtt\n\n  * message/rfc822\n\n  * application/xhtml+xml\n\
            \n  * application/pdf\n\n  * application/msword\n\n  * application/vnd.ms-word.document.macroenabled.12\n\
            \n  * application/vnd.ms-word.template.macroenabled.12\n\n  * application/vnd.ms-excel\n\
            \n  * application/vnd.ms-excel.addin.macroenabled.12\n\n  * application/vnd.ms-excel.sheet.macroenabled.12\n\
            \n  * application/vnd.ms-excel.template.macroenabled.12\n\n  * application/vnd.ms-excel.sheet.binary.macroenabled.12\n\
            \n  * application/vnd.ms-spreadsheetml\n\n  * application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\n\
            \n  * application/vnd.openxmlformats-officedocument.spreadsheetml.template\n\
            \n  * application/vnd.openxmlformats-officedocument.wordprocessingml.document\n\
            \n  * application/vnd.openxmlformats-officedocument.wordprocessingml.template"
        data:
          allOf:
          - $ref: '#/components/schemas/ByteContentBlob'
          description: The base64-encoded string of the content.
      required:
      - mimeType
      - data
      description: Contains information about content defined inline in bytes.
    CachePointBlock:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/CachePointType'
          description: Indicates that the CachePointBlock is of the default type
      required:
      - type
      description: Indicates where a cache checkpoint is located. All information
        before this checkpoint is cached to be accessed on subsequent requests.
    CachePointType:
      type: string
      enum:
      - default
    ChatPromptTemplateConfiguration:
      type: object
      properties:
        messages:
          allOf:
          - $ref: '#/components/schemas/Messages'
          description: Contains messages in the chat for the prompt.
        system:
          allOf:
          - $ref: '#/components/schemas/SystemContentBlocks'
          description: Contains system prompts to provide context to the model or
            to describe how it should behave.
        inputVariables:
          allOf:
          - $ref: '#/components/schemas/PromptInputVariablesList'
          description: An array of the variables in the prompt template.
        toolConfiguration:
          allOf:
          - $ref: '#/components/schemas/ToolConfiguration'
          description: Configuration information for the tools that the model can
            use when generating a response.
      required:
      - messages
      description: Contains configurations to use a prompt in a conversational format.
        For more information, see [Create a prompt using Prompt management](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-create.html).
    ChunkingConfiguration:
      type: object
      properties:
        chunkingStrategy:
          allOf:
          - $ref: '#/components/schemas/ChunkingStrategy'
          description: "Knowledge base can split your source data into chunks. A _chunk_\
            \ refers to an excerpt from a data source that is returned when the knowledge\
            \ base that it belongs to is queried. You have the following options for\
            \ chunking your data. If you opt for `NONE`, then you may want to pre-process\
            \ your files by splitting them up such that each file corresponds to a\
            \ chunk.\n\n  * `FIXED_SIZE` – Amazon Bedrock splits your source data\
            \ into chunks of the approximate size that you set in the `fixedSizeChunkingConfiguration`.\n\
            \n  * `HIERARCHICAL` – Split documents into layers of chunks where the\
            \ first layer contains large chunks, and the second layer contains smaller\
            \ chunks derived from the first layer.\n\n  * `SEMANTIC` – Split documents\
            \ into chunks based on groups of similar content derived with natural\
            \ language processing.\n\n  * `NONE` – Amazon Bedrock treats each file\
            \ as one chunk. If you choose this option, you may want to pre-process\
            \ your documents by splitting them into separate files."
        fixedSizeChunkingConfiguration:
          allOf:
          - $ref: '#/components/schemas/FixedSizeChunkingConfiguration'
          description: Configurations for when you choose fixed-size chunking. If
            you set the `chunkingStrategy` as `NONE`, exclude this field.
        hierarchicalChunkingConfiguration:
          allOf:
          - $ref: '#/components/schemas/HierarchicalChunkingConfiguration'
          description: Settings for hierarchical document chunking for a data source.
            Hierarchical chunking splits documents into layers of chunks where the
            first layer contains large chunks, and the second layer contains smaller
            chunks derived from the first layer.
        semanticChunkingConfiguration:
          allOf:
          - $ref: '#/components/schemas/SemanticChunkingConfiguration'
          description: Settings for semantic document chunking for a data source.
            Semantic chunking splits a document into into smaller documents based
            on groups of similar content derived from the text with natural language
            processing.
      required:
      - chunkingStrategy
      description: Details about how to chunk the documents in the data source. A
        _chunk_ refers to an excerpt from a data source that is returned when the
        knowledge base that it belongs to is queried.
    ChunkingStrategy:
      type: string
      enum:
      - FIXED_SIZE
      - NONE
      - HIERARCHICAL
      - SEMANTIC
    ClientToken:
      type: string
      pattern: ^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,256}$
      minLength: 33
      maxLength: 256
    CollaborationInstruction:
      type: string
      minLength: 1
      maxLength: 4000
    CollectorFlowNodeConfiguration:
      type: object
      properties: {}
      description: Defines a collector node in your flow. This node takes an iteration
        of inputs and consolidates them into an array in the output. For more information,
        see [Node types in Amazon Bedrock works](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html)
        in the Amazon Bedrock User Guide.
    ColumnName:
      type: string
      pattern: ^[a-zA-Z0-9_\-]+$
      maxLength: 63
    ConditionFlowNodeConfiguration:
      type: object
      properties:
        conditions:
          allOf:
          - $ref: '#/components/schemas/FlowConditions'
          description: An array of conditions. Each member contains the name of a
            condition and an expression that defines the condition.
      required:
      - conditions
      description: Defines a condition node in your flow. You can specify conditions
        that determine which node comes next in the flow. For more information, see
        [Node types in Amazon Bedrock works](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html)
        in the Amazon Bedrock User Guide.
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/NonBlankString'
      description: There was a conflict performing an operation.
    ConfluenceAuthType:
      type: string
      enum:
      - BASIC
      - OAUTH2_CLIENT_CREDENTIALS
    ConfluenceCrawlerConfiguration:
      type: object
      properties:
        filterConfiguration:
          allOf:
          - $ref: '#/components/schemas/CrawlFilterConfiguration'
          description: The configuration of filtering the Confluence content. For
            example, configuring regular expression patterns to include or exclude
            certain content.
      description: The configuration of the Confluence content. For example, configuring
        specific types of Confluence content.
    ConfluenceDataSourceConfiguration:
      type: object
      properties:
        sourceConfiguration:
          allOf:
          - $ref: '#/components/schemas/ConfluenceSourceConfiguration'
          description: The endpoint information to connect to your Confluence data
            source.
        crawlerConfiguration:
          allOf:
          - $ref: '#/components/schemas/ConfluenceCrawlerConfiguration'
          description: The configuration of the Confluence content. For example, configuring
            specific types of Confluence content.
      required:
      - sourceConfiguration
      description: The configuration information to connect to Confluence as your
        data source.
    ConfluenceHostType:
      type: string
      enum:
      - SAAS
    ConfluenceSourceConfiguration:
      type: object
      properties:
        hostUrl:
          allOf:
          - $ref: '#/components/schemas/HttpsUrl'
          description: The Confluence host URL or instance URL.
        hostType:
          allOf:
          - $ref: '#/components/schemas/ConfluenceHostType'
          description: The supported host type, whether online/cloud or server/on-premises.
        authType:
          allOf:
          - $ref: '#/components/schemas/ConfluenceAuthType'
          description: The supported authentication type to authenticate and connect
            to your Confluence instance.
        credentialsSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretArn'
          description: The Amazon Resource Name of an Secrets Manager secret that
            stores your authentication credentials for your Confluence instance URL.
            For more information on the key-value pairs that must be included in your
            secret, depending on your authentication type, see [Confluence connection
            configuration](https://docs.aws.amazon.com/bedrock/latest/userguide/confluence-data-source-connector.html#configuration-confluence-connector).
      required:
      - hostUrl
      - hostType
      - authType
      - credentialsSecretArn
      description: The endpoint information to connect to your Confluence data source.
    ContentBlock:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The text in the message.
      - allOf:
        - $ref: '#/components/schemas/CachePointBlock'
        description: |-
          Creates a cache checkpoint within a message.
      description: |-
        Contains the content for the message you pass to, or receive from a model. For more information, see [Create a prompt using Prompt management](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-create.html).
      x-sensitive: true
    ContentBlocks:
      type: array
      items:
        $ref: '#/components/schemas/ContentBlock'
    ContentDataSourceType:
      type: string
      enum:
      - CUSTOM
      - S3
    ContextEnrichmentConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ContextEnrichmentType'
          description: The method used for context enrichment. It must be Amazon Bedrock
            foundation models.
        bedrockFoundationModelConfiguration:
          allOf:
          - $ref: '#/components/schemas/BedrockFoundationModelContextEnrichmentConfiguration'
          description: The configuration of the Amazon Bedrock foundation model used
            for context enrichment.
      required:
      - type
      description: Context enrichment configuration is used to provide additional
        context to the RAG application.
    ContextEnrichmentType:
      type: string
      enum:
      - BEDROCK_FOUNDATION_MODEL
    ConversationRole:
      type: string
      enum:
      - user
      - assistant
    CrawlFilterConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/CrawlFilterConfigurationType'
          description: The type of filtering that you want to apply to certain objects
            or content of the data source. For example, the `PATTERN` type is regular
            expression patterns you can apply to filter your content.
        patternObjectFilter:
          allOf:
          - $ref: '#/components/schemas/PatternObjectFilterConfiguration'
          description: The configuration of filtering certain objects or content types
            of the data source.
      required:
      - type
      description: The configuration of filtering the data source content. For example,
        configuring regular expression patterns to include or exclude certain content.
    CrawlFilterConfigurationType:
      type: string
      enum:
      - PATTERN
    CreateAgentActionGroupRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent for which to create the
            action group.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The version of the agent for which to create the action group.
        actionGroupName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name to give the action group.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the action group.
        parentActionGroupSignature:
          allOf:
          - $ref: '#/components/schemas/ActionGroupSignature'
          description: "Specify a built-in or computer use action for this action\
            \ group. If you specify a value, you must leave the `description`, `apiSchema`,\
            \ and `actionGroupExecutor` fields empty for this action group.\n\n  *\
            \ To allow your agent to request the user for additional information when\
            \ trying to complete a task, set this field to `AMAZON.UserInput`. \n\n\
            \  * To allow your agent to generate, run, and troubleshoot code when\
            \ trying to complete a task, set this field to `AMAZON.CodeInterpreter`.\n\
            \n  * To allow your agent to use an Anthropic computer use tool, specify\
            \ one of the following values. \n\nComputer use is a new Anthropic Claude\
            \ model capability (in beta) available with Anthropic Claude 3.7 Sonnet\
            \ and Claude 3.5 Sonnet v2 only. When operating computer use functionality,\
            \ we recommend taking additional security precautions, such as executing\
            \ computer actions in virtual environments with restricted data access\
            \ and limited internet connectivity. For more information, see [Configure\
            \ an Amazon Bedrock Agent to complete tasks with computer use tools](https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html).\n\
            \n    * `ANTHROPIC.Computer` \\- Gives the agent permission to use the\
            \ mouse and keyboard and take screenshots.\n\n    * `ANTHROPIC.TextEditor`\
            \ \\- Gives the agent permission to view, create and edit files.\n\n \
            \   * `ANTHROPIC.Bash` \\- Gives the agent permission to run commands\
            \ in a bash shell."
        parentActionGroupSignatureParams:
          allOf:
          - $ref: '#/components/schemas/ActionGroupSignatureParams'
          description: 'The configuration settings for a computer use action.


            Computer use is a new Anthropic Claude model capability (in beta) available
            with Anthropic Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. For more
            information, see [Configure an Amazon Bedrock Agent to complete tasks
            with computer use tools](https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html).'
        actionGroupExecutor:
          allOf:
          - $ref: '#/components/schemas/ActionGroupExecutor'
          description: The Amazon Resource Name (ARN) of the Lambda function containing
            the business logic that is carried out upon invoking the action or the
            custom control method for handling the information elicited from the user.
        apiSchema:
          allOf:
          - $ref: '#/components/schemas/APISchema'
          description: Contains either details about the S3 object containing the
            OpenAPI schema for the action group or the JSON or YAML-formatted payload
            defining the schema. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html).
        actionGroupState:
          allOf:
          - $ref: '#/components/schemas/ActionGroupState'
          description: Specifies whether the action group is available for the agent
            to invoke or not when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html)
            request.
        functionSchema:
          allOf:
          - $ref: '#/components/schemas/FunctionSchema'
          description: Contains details about the function schema for the action group
            or the JSON or YAML-formatted payload defining the schema.
      required:
      - agentId
      - agentVersion
      - actionGroupName
    CreateAgentActionGroupResponse:
      type: object
      properties:
        agentActionGroup:
          allOf:
          - $ref: '#/components/schemas/AgentActionGroup'
          description: Contains details about the action group that was created.
      required:
      - agentActionGroup
    CreateAgentAliasRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
        agentAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the alias.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the alias of the agent.
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AgentAliasRoutingConfiguration'
          description: Contains details about the routing configuration of the alias.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Any tags that you want to attach to the alias of the agent.
      required:
      - agentId
      - agentAliasName
    CreateAgentAliasResponse:
      type: object
      properties:
        agentAlias:
          allOf:
          - $ref: '#/components/schemas/AgentAlias'
          description: Contains details about the alias that was created.
      required:
      - agentAlias
    CreateAgentRequest:
      type: object
      properties:
        agentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: A name for the agent that you create.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        instruction:
          allOf:
          - $ref: '#/components/schemas/Instruction'
          description: Instructions that tell the agent what it should do and how
            it should interact with users.
        foundationModel:
          allOf:
          - $ref: '#/components/schemas/ModelIdentifier'
          description: "The identifier for the model that you want to be used for\
            \ orchestration by the agent you create.\n\nThe `modelId` to provide depends\
            \ on the type of model or throughput that you use:\n\n  * If you use a\
            \ base model, specify the model ID or its ARN. For a list of model IDs\
            \ for base models, see [Amazon Bedrock base model IDs (on-demand throughput)](https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns)\
            \ in the Amazon Bedrock User Guide.\n\n  * If you use an inference profile,\
            \ specify the inference profile ID or its ARN. For a list of inference\
            \ profile IDs, see [Supported Regions and models for cross-region inference](https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference-support.html)\
            \ in the Amazon Bedrock User Guide.\n\n  * If you use a provisioned model,\
            \ specify the ARN of the Provisioned Throughput. For more information,\
            \ see [Run inference using a Provisioned Throughput](https://docs.aws.amazon.com/bedrock/latest/userguide/prov-thru-use.html)\
            \ in the Amazon Bedrock User Guide.\n\n  * If you use a custom model,\
            \ first purchase Provisioned Throughput for it. Then specify the ARN of\
            \ the resulting provisioned model. For more information, see [Use a custom\
            \ model in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-use.html)\
            \ in the Amazon Bedrock User Guide.\n\n  * If you use an [imported model](https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-import-model.html),\
            \ specify the ARN of the imported model. You can get the model ARN from\
            \ a successful call to [CreateModelImportJob](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_CreateModelImportJob.html)\
            \ or from the Imported models page in the Amazon Bedrock console."
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the agent.
        orchestrationType:
          allOf:
          - $ref: '#/components/schemas/OrchestrationType'
          description: Specifies the type of orchestration strategy for the agent.
            This is set to `DEFAULT` orchestration type, by default.
        customOrchestration:
          allOf:
          - $ref: '#/components/schemas/CustomOrchestration'
          description: Contains details of the custom orchestration configured for
            the agent.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: 'The number of seconds for which Amazon Bedrock keeps information
            about a user''s conversation with the agent.


            A user interaction remains active for the amount of time specified. If
            no conversation occurs during this time, the session expires and Amazon
            Bedrock deletes any data provided before the timeout.'
        agentResourceRoleArn:
          allOf:
          - $ref: '#/components/schemas/AgentRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role with permissions
            to invoke API operations on the agent.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key with which to
            encrypt the agent.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Any tags that you want to attach to the agent.
        promptOverrideConfiguration:
          allOf:
          - $ref: '#/components/schemas/PromptOverrideConfiguration'
          description: Contains configurations to override prompts in different parts
            of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html).
        guardrailConfiguration:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfiguration'
          description: The unique Guardrail configuration assigned to the agent when
            it is created.
        memoryConfiguration:
          allOf:
          - $ref: '#/components/schemas/MemoryConfiguration'
          description: Contains the details of the memory configured for the agent.
        agentCollaboration:
          allOf:
          - $ref: '#/components/schemas/AgentCollaboration'
          description: The agent's collaboration role.
      required:
      - agentName
    CreateAgentResponse:
      type: object
      properties:
        agent:
          allOf:
          - $ref: '#/components/schemas/Agent'
          description: Contains details about the agent created.
      required:
      - agent
    CreateDataSourceRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base to which to add
            the data source.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data source.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the data source.
        dataSourceConfiguration:
          allOf:
          - $ref: '#/components/schemas/DataSourceConfiguration'
          description: The connection configuration for the data source.
        dataDeletionPolicy:
          allOf:
          - $ref: '#/components/schemas/DataDeletionPolicy'
          description: "The data deletion policy for the data source.\n\nYou can set\
            \ the data deletion policy to:\n\n  * DELETE: Deletes all data from your\
            \ data source that’s converted into vector embeddings upon deletion of\
            \ a knowledge base or data source resource. Note that the **vector store\
            \ itself is not deleted** , only the data. This flag is ignored if an\
            \ Amazon Web Services account is deleted.\n\n  * RETAIN: Retains all data\
            \ from your data source that’s converted into vector embeddings upon deletion\
            \ of a knowledge base or data source resource. Note that the **vector\
            \ store itself is not deleted** if you delete a knowledge base or data\
            \ source resource."
        serverSideEncryptionConfiguration:
          allOf:
          - $ref: '#/components/schemas/ServerSideEncryptionConfiguration'
          description: Contains details about the server-side encryption for the data
            source.
        vectorIngestionConfiguration:
          allOf:
          - $ref: '#/components/schemas/VectorIngestionConfiguration'
          description: Contains details about how to ingest the documents in the data
            source.
      required:
      - knowledgeBaseId
      - name
      - dataSourceConfiguration
    CreateDataSourceResponse:
      type: object
      properties:
        dataSource:
          allOf:
          - $ref: '#/components/schemas/DataSource'
          description: Contains details about the data source.
      required:
      - dataSource
    CreateFlowAliasRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: A name for the alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the alias.
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/FlowAliasRoutingConfiguration'
          description: Contains information about the version to which to map the
            alias.
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow for which to create an alias.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Any tags that you want to attach to the alias of the flow.
            For more information, see [Tagging resources in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/tagging.html).
      required:
      - name
      - routingConfiguration
      - flowIdentifier
    CreateFlowAliasResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the alias.
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/FlowAliasRoutingConfiguration'
          description: Contains information about the version that the alias is mapped
            to.
        flowId:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow that the alias belongs to.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowAliasId'
          description: The unique identifier of the alias.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowAliasArn'
          description: The Amazon Resource Name (ARN) of the alias.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the alias was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the alias of the flow was last updated.
      required:
      - name
      - routingConfiguration
      - flowId
      - id
      - arn
      - createdAt
      - updatedAt
    CreateFlowRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: A name for the flow.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: A description for the flow.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/FlowExecutionRoleArn'
          description: The Amazon Resource Name (ARN) of the service role with permissions
            to create and manage a flow. For more information, see [Create a service
            role for flows in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-permissions.html)
            in the Amazon Bedrock User Guide.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key to encrypt the
            flow.
        definition:
          allOf:
          - $ref: '#/components/schemas/FlowDefinition'
          description: A definition of the nodes and connections between nodes in
            the flow.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Any tags that you want to attach to the flow. For more information,
            see [Tagging resources in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/tagging.html).
      required:
      - name
      - executionRoleArn
    CreateFlowResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The name of the flow.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: The description of the flow.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/FlowExecutionRoleArn'
          description: The Amazon Resource Name (ARN) of the service role with permissions
            to create a flow. For more information, see [Create a service role for
            flows in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-permissions.html)
            in the Amazon Bedrock User Guide.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key that you encrypted
            the flow with.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow.
        status:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: The status of the flow. When you submit this request, the status
            will be `NotPrepared`. If creation fails, the status becomes `Failed`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was last updated.
        version:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The version of the flow. When you create a flow, the version
            created is the `DRAFT` version.
        definition:
          allOf:
          - $ref: '#/components/schemas/FlowDefinition'
          description: A definition of the nodes and connections between nodes in
            the flow.
      required:
      - name
      - executionRoleArn
      - id
      - arn
      - status
      - createdAt
      - updatedAt
      - version
    CreateFlowVersionRequest:
      type: object
      properties:
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow that you want to create a
            version of.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: A description of the version of the flow.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
      required:
      - flowIdentifier
    CreateFlowVersionResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The name of the version.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: The description of the version.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/FlowExecutionRoleArn'
          description: The Amazon Resource Name (ARN) of the service role with permissions
            to create a flow. For more information, see [Create a service role for
            flows in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-permissions.html)
            in the Amazon Bedrock User Guide.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key that the flow is encrypted with.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow.
        status:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: The status of the flow.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was created.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the flow that was created. Versions are numbered
            incrementally, starting from 1.
        definition:
          allOf:
          - $ref: '#/components/schemas/FlowDefinition'
          description: A definition of the nodes and connections in the flow.
      required:
      - name
      - executionRoleArn
      - id
      - arn
      - status
      - createdAt
      - version
    CreateKnowledgeBaseRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: A name for the knowledge base.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the knowledge base.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role with permissions
            to invoke API operations on the knowledge base.
        knowledgeBaseConfiguration:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseConfiguration'
          description: Contains details about the embeddings model used for the knowledge
            base.
        storageConfiguration:
          allOf:
          - $ref: '#/components/schemas/StorageConfiguration'
          description: Contains details about the configuration of the vector database
            used for the knowledge base.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Specify the key-value pairs for the tags that you want to attach
            to your knowledge base in this object.
      required:
      - name
      - roleArn
      - knowledgeBaseConfiguration
    CreateKnowledgeBaseResponse:
      type: object
      properties:
        knowledgeBase:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBase'
          description: Contains details about the knowledge base.
      required:
      - knowledgeBase
    CreatePromptRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/PromptName'
          description: A name for the prompt.
        description:
          allOf:
          - $ref: '#/components/schemas/PromptDescription'
          description: A description for the prompt.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key to encrypt the
            prompt.
        defaultVariant:
          allOf:
          - $ref: '#/components/schemas/PromptVariantName'
          description: The name of the default variant for the prompt. This value
            must match the `name` field in the relevant [PromptVariant](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html)
            object.
        variants:
          allOf:
          - $ref: '#/components/schemas/PromptVariantList'
          description: A list of objects, each containing details about a variant
            of the prompt.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Any tags that you want to attach to the prompt. For more information,
            see [Tagging resources in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/tagging.html).
      required:
      - name
    CreatePromptResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/PromptName'
          description: The name of the prompt.
        description:
          allOf:
          - $ref: '#/components/schemas/PromptDescription'
          description: The description of the prompt.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key that you encrypted
            the prompt with.
        defaultVariant:
          allOf:
          - $ref: '#/components/schemas/PromptVariantName'
          description: The name of the default variant for your prompt.
        variants:
          allOf:
          - $ref: '#/components/schemas/PromptVariantList'
          description: A list of objects, each containing details about a variant
            of the prompt.
        id:
          allOf:
          - $ref: '#/components/schemas/PromptId'
          description: The unique identifier of the prompt.
        arn:
          allOf:
          - $ref: '#/components/schemas/PromptArn'
          description: The Amazon Resource Name (ARN) of the prompt.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the prompt. When you create a prompt, the version
            created is the `DRAFT` version.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the prompt was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the prompt was last updated.
      required:
      - name
      - id
      - arn
      - version
      - createdAt
      - updatedAt
    CreatePromptVersionRequest:
      type: object
      properties:
        promptIdentifier:
          allOf:
          - $ref: '#/components/schemas/PromptIdentifier'
          description: The unique identifier of the prompt that you want to create
            a version of.
        description:
          allOf:
          - $ref: '#/components/schemas/PromptDescription'
          description: A description for the version of the prompt.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Any tags that you want to attach to the version of the prompt.
            For more information, see [Tagging resources in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/tagging.html).
      required:
      - promptIdentifier
    CreatePromptVersionResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/PromptName'
          description: The name of the prompt.
        description:
          allOf:
          - $ref: '#/components/schemas/PromptDescription'
          description: A description for the version.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key to encrypt the
            version of the prompt.
        defaultVariant:
          allOf:
          - $ref: '#/components/schemas/PromptVariantName'
          description: The name of the default variant for the prompt. This value
            must match the `name` field in the relevant [PromptVariant](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html)
            object.
        variants:
          allOf:
          - $ref: '#/components/schemas/PromptVariantList'
          description: A list of objects, each containing details about a variant
            of the prompt.
        id:
          allOf:
          - $ref: '#/components/schemas/PromptId'
          description: The unique identifier of the prompt.
        arn:
          allOf:
          - $ref: '#/components/schemas/PromptArn'
          description: The Amazon Resource Name (ARN) of the version of the prompt.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the prompt that was created. Versions are numbered
            incrementally, starting from 1.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the prompt was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the prompt was last updated.
      required:
      - name
      - id
      - arn
      - version
      - createdAt
      - updatedAt
    CreationMode:
      type: string
      enum:
      - DEFAULT
      - OVERRIDDEN
    CuratedQueries:
      type: array
      items:
        $ref: '#/components/schemas/CuratedQuery'
    CuratedQuery:
      type: object
      properties:
        naturalLanguage:
          allOf:
          - $ref: '#/components/schemas/NaturalLanguageString'
          description: An example natural language query.
        sql:
          allOf:
          - $ref: '#/components/schemas/SqlString'
          description: The SQL equivalent of the natural language query.
      required:
      - naturalLanguage
      - sql
      description: Contains configurations for a query, each of which defines information
        about example queries to help the query engine generate appropriate SQL queries.
    CustomContent:
      type: object
      properties:
        customDocumentIdentifier:
          allOf:
          - $ref: '#/components/schemas/CustomDocumentIdentifier'
          description: A unique identifier for the document.
        sourceType:
          allOf:
          - $ref: '#/components/schemas/CustomSourceType'
          description: The source of the data to ingest.
        s3Location:
          allOf:
          - $ref: '#/components/schemas/CustomS3Location'
          description: Contains information about the Amazon S3 location of the file
            from which to ingest data.
        inlineContent:
          allOf:
          - $ref: '#/components/schemas/InlineContent'
          description: Contains information about content defined inline to ingest
            into a knowledge base.
      required:
      - customDocumentIdentifier
      - sourceType
      description: Contains information about the content to ingest into a knowledge
        base connected to a custom data source. Choose a `sourceType` and include
        the field that corresponds to it.
    CustomControlMethod:
      type: string
      enum:
      - RETURN_CONTROL
    CustomDocumentIdentifier:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the document to ingest into a custom data
            source.
      required:
      - id
      description: Contains information about the identifier of the document to ingest
        into a custom data source.
    CustomOrchestration:
      type: object
      properties:
        executor:
          allOf:
          - $ref: '#/components/schemas/OrchestrationExecutor'
          description: The structure of the executor invoking the actions in custom
            orchestration.
      description: Details of custom orchestration.
    CustomS3Location:
      type: object
      properties:
        uri:
          allOf:
          - $ref: '#/components/schemas/S3ObjectUri'
          description: The S3 URI of the file containing the content to ingest.
        bucketOwnerAccountId:
          allOf:
          - $ref: '#/components/schemas/BucketOwnerAccountId'
          description: The identifier of the Amazon Web Services account that owns
            the S3 bucket containing the content to ingest.
      required:
      - uri
      description: Contains information about the Amazon S3 location of the file containing
        the content to ingest into a knowledge base connected to a custom data source.
    CustomSourceType:
      type: string
      enum:
      - IN_LINE
      - S3_LOCATION
    CustomTransformationConfiguration:
      type: object
      properties:
        intermediateStorage:
          allOf:
          - $ref: '#/components/schemas/IntermediateStorage'
          description: An S3 bucket path for input and output objects.
        transformations:
          allOf:
          - $ref: '#/components/schemas/Transformations'
          description: A Lambda function that processes documents.
      required:
      - intermediateStorage
      - transformations
      description: 'Settings for customizing steps in the data source content ingestion
        pipeline.


        You can configure the data source to process documents with a Lambda function
        after they are parsed and converted into chunks. When you add a post-chunking
        transformation, the service stores chunked documents in an S3 bucket and invokes
        a Lambda function to process them.


        To process chunked documents with a Lambda function, define an S3 bucket path
        for input and output objects, and a transformation that specifies the Lambda
        function to invoke. You can use the Lambda function to customize how chunks
        are split, and the metadata for each chunk.'
    CyclicConnectionFlowValidationDetails:
      type: object
      properties:
        connection:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionName'
          description: The name of the connection that causes the cycle in the flow.
      required:
      - connection
      description: Details about a cyclic connection detected in the flow.
    Data:
      type: string
      minLength: 1
      maxLength: 5242880
    DataDeletionPolicy:
      type: string
      enum:
      - RETAIN
      - DELETE
    DataSource:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base to which the data
            source belongs.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data source.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceStatus'
          description: "The status of the data source. The following statuses are\
            \ possible:\n\n  * Available – The data source has been created and is\
            \ ready for ingestion into the knowledge base.\n\n  * Deleting – The data\
            \ source is being deleted."
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the data source.
        dataSourceConfiguration:
          allOf:
          - $ref: '#/components/schemas/DataSourceConfiguration'
          description: The connection configuration for the data source.
        serverSideEncryptionConfiguration:
          allOf:
          - $ref: '#/components/schemas/ServerSideEncryptionConfiguration'
          description: Contains details about the configuration of the server-side
            encryption.
        vectorIngestionConfiguration:
          allOf:
          - $ref: '#/components/schemas/VectorIngestionConfiguration'
          description: Contains details about how to ingest the documents in the data
            source.
        dataDeletionPolicy:
          allOf:
          - $ref: '#/components/schemas/DataDeletionPolicy'
          description: The data deletion policy for the data source.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the data source was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the data source was last updated.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: The detailed reasons on the failure to delete a data source.
      required:
      - knowledgeBaseId
      - dataSourceId
      - name
      - status
      - dataSourceConfiguration
      - createdAt
      - updatedAt
      description: Contains details about a data source.
    DataSourceConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DataSourceType'
          description: The type of data source.
        s3Configuration:
          allOf:
          - $ref: '#/components/schemas/S3DataSourceConfiguration'
          description: The configuration information to connect to Amazon S3 as your
            data source.
        webConfiguration:
          allOf:
          - $ref: '#/components/schemas/WebDataSourceConfiguration'
          description: 'The configuration of web URLs to crawl for your data source.
            You should be authorized to crawl the URLs.


            Crawling web URLs as your data source is in preview release and is subject
            to change.'
        confluenceConfiguration:
          allOf:
          - $ref: '#/components/schemas/ConfluenceDataSourceConfiguration'
          description: 'The configuration information to connect to Confluence as
            your data source.


            Confluence data source connector is in preview release and is subject
            to change.'
        salesforceConfiguration:
          allOf:
          - $ref: '#/components/schemas/SalesforceDataSourceConfiguration'
          description: 'The configuration information to connect to Salesforce as
            your data source.


            Salesforce data source connector is in preview release and is subject
            to change.'
        sharePointConfiguration:
          allOf:
          - $ref: '#/components/schemas/SharePointDataSourceConfiguration'
          description: 'The configuration information to connect to SharePoint as
            your data source.


            SharePoint data source connector is in preview release and is subject
            to change.'
      required:
      - type
      description: The connection configuration for the data source.
    DataSourceStatus:
      type: string
      enum:
      - AVAILABLE
      - DELETING
      - DELETE_UNSUCCESSFUL
    DataSourceSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DataSourceSummary'
    DataSourceSummary:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base to which the data
            source belongs.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the data source.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceStatus'
          description: The status of the data source.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the data source.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the data source was last updated.
      required:
      - knowledgeBaseId
      - dataSourceId
      - name
      - status
      - updatedAt
      description: Contains details about a data source.
    DataSourceType:
      type: string
      enum:
      - S3
      - WEB
      - CONFLUENCE
      - SALESFORCE
      - SHAREPOINT
      - CUSTOM
      - REDSHIFT_METADATA
    DateTimestamp:
      type: string
      format: date-time
    DeleteAgentActionGroupRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent that the action group belongs
            to.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The version of the agent that the action group belongs to.
        actionGroupId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the action group to delete.
        skipResourceInUseCheck:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: By default, this value is `false` and deletion is stopped if
            the resource is in use. If you set it to `true`, the resource will be
            deleted even if the resource is in use.
      required:
      - agentId
      - agentVersion
      - actionGroupId
    DeleteAgentActionGroupResponse:
      type: object
      properties: {}
    DeleteAgentAliasRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent that the alias belongs to.
        agentAliasId:
          allOf:
          - $ref: '#/components/schemas/AgentAliasId'
          description: The unique identifier of the alias to delete.
      required:
      - agentId
      - agentAliasId
    DeleteAgentAliasResponse:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent that the alias belongs to.
        agentAliasId:
          allOf:
          - $ref: '#/components/schemas/AgentAliasId'
          description: The unique identifier of the alias that was deleted.
        agentAliasStatus:
          allOf:
          - $ref: '#/components/schemas/AgentAliasStatus'
          description: The status of the alias.
      required:
      - agentId
      - agentAliasId
      - agentAliasStatus
    DeleteAgentRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent to delete.
        skipResourceInUseCheck:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: By default, this value is `false` and deletion is stopped if
            the resource is in use. If you set it to `true`, the resource will be
            deleted even if the resource is in use.
      required:
      - agentId
    DeleteAgentResponse:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent that was deleted.
        agentStatus:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          description: The status of the agent.
      required:
      - agentId
      - agentStatus
    DeleteAgentVersionRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent that the version belongs
            to.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the agent to delete.
        skipResourceInUseCheck:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: By default, this value is `false` and deletion is stopped if
            the resource is in use. If you set it to `true`, the resource will be
            deleted even if the resource is in use.
      required:
      - agentId
      - agentVersion
    DeleteAgentVersionResponse:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent that the version belongs
            to.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version that was deleted.
        agentStatus:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          description: The status of the agent version.
      required:
      - agentId
      - agentVersion
      - agentStatus
    DeleteDataSourceRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base from which to delete
            the data source.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source to delete.
      required:
      - knowledgeBaseId
      - dataSourceId
    DeleteDataSourceResponse:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base to which the data
            source that was deleted belonged.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source that was deleted.
        status:
          allOf:
          - $ref: '#/components/schemas/DataSourceStatus'
          description: The status of the data source.
      required:
      - knowledgeBaseId
      - dataSourceId
      - status
    DeleteFlowAliasRequest:
      type: object
      properties:
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow that the alias belongs to.
        aliasIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowAliasIdentifier'
          description: The unique identifier of the alias to be deleted.
      required:
      - flowIdentifier
      - aliasIdentifier
    DeleteFlowAliasResponse:
      type: object
      properties:
        flowId:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow that the alias belongs to.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowAliasId'
          description: The unique identifier of the flow.
      required:
      - flowId
      - id
    DeleteFlowRequest:
      type: object
      properties:
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow.
        skipResourceInUseCheck:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: By default, this value is `false` and deletion is stopped if
            the resource is in use. If you set it to `true`, the resource will be
            deleted even if the resource is in use.
      required:
      - flowIdentifier
    DeleteFlowResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
      required:
      - id
    DeleteFlowVersionRequest:
      type: object
      properties:
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow whose version that you want
            to delete
        flowVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the flow that you want to delete.
        skipResourceInUseCheck:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: By default, this value is `false` and deletion is stopped if
            the resource is in use. If you set it to `true`, the resource will be
            deleted even if the resource is in use.
      required:
      - flowIdentifier
      - flowVersion
    DeleteFlowVersionResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the flow.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the flow being deleted.
      required:
      - id
      - version
    DeleteKnowledgeBaseDocumentsRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base that is connected
            to the data source.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source that contains the
            documents.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        documentIdentifiers:
          allOf:
          - $ref: '#/components/schemas/DocumentIdentifiers'
          description: A list of objects, each of which contains information to identify
            a document to delete.
      required:
      - knowledgeBaseId
      - dataSourceId
      - documentIdentifiers
    DeleteKnowledgeBaseDocumentsResponse:
      type: object
      properties:
        documentDetails:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseDocumentDetails'
          description: A list of objects, each of which contains information about
            the documents that were deleted.
    DeleteKnowledgeBaseRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base to delete.
      required:
      - knowledgeBaseId
    DeleteKnowledgeBaseResponse:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base that was deleted.
        status:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseStatus'
          description: The status of the knowledge base and whether it has been successfully
            deleted.
      required:
      - knowledgeBaseId
      - status
    DeletePromptRequest:
      type: object
      properties:
        promptIdentifier:
          allOf:
          - $ref: '#/components/schemas/PromptIdentifier'
          description: The unique identifier of the prompt.
        promptVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the prompt to delete. To delete the prompt,
            omit this field.
      required:
      - promptIdentifier
    DeletePromptResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/PromptId'
          description: The unique identifier of the prompt that was deleted.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the prompt that was deleted.
      required:
      - id
    Description:
      type: string
      minLength: 1
      maxLength: 200
    DescriptionString:
      type: string
      minLength: 1
      maxLength: 200
    Dimensions:
      type: integer
      minimum: 0
      maximum: 4096
    DisassociateAgentCollaboratorRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: An agent ID.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The agent's version.
        collaboratorId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The collaborator's ID.
      required:
      - agentId
      - agentVersion
      - collaboratorId
    DisassociateAgentCollaboratorResponse:
      type: object
      properties: {}
    DisassociateAgentKnowledgeBaseRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent from which to disassociate
            the knowledge base.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The version of the agent from which to disassociate the knowledge
            base.
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base to disassociate.
      required:
      - agentId
      - agentVersion
      - knowledgeBaseId
    DisassociateAgentKnowledgeBaseResponse:
      type: object
      properties: {}
    DocumentContent:
      type: object
      properties:
        dataSourceType:
          allOf:
          - $ref: '#/components/schemas/ContentDataSourceType'
          description: The type of data source that is connected to the knowledge
            base to which to ingest this document.
        custom:
          allOf:
          - $ref: '#/components/schemas/CustomContent'
          description: Contains information about the content to ingest into a knowledge
            base connected to a custom data source.
        s3:
          allOf:
          - $ref: '#/components/schemas/S3Content'
          description: Contains information about the content to ingest into a knowledge
            base connected to an Amazon S3 data source
      required:
      - dataSourceType
      description: Contains information about the content of a document. Choose a
        `dataSourceType` and include the field that corresponds to it.
    DocumentIdentifier:
      type: object
      properties:
        dataSourceType:
          allOf:
          - $ref: '#/components/schemas/ContentDataSourceType'
          description: The type of data source connected to the knowledge base that
            contains the document.
        s3:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: Contains information that identifies the document in an S3
            data source.
        custom:
          allOf:
          - $ref: '#/components/schemas/CustomDocumentIdentifier'
          description: Contains information that identifies the document in a custom
            data source.
      required:
      - dataSourceType
      description: Contains information that identifies the document.
    DocumentIdentifiers:
      type: array
      items:
        $ref: '#/components/schemas/DocumentIdentifier'
    DocumentMetadata:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/MetadataSourceType'
          description: The type of the source source from which to add metadata.
        inlineAttributes:
          allOf:
          - $ref: '#/components/schemas/MetadataAttributes'
          description: An array of objects, each of which defines a metadata attribute
            to associate with the content to ingest. You define the attributes inline.
        s3Location:
          allOf:
          - $ref: '#/components/schemas/CustomS3Location'
          description: The Amazon S3 location of the file containing metadata to associate
            with the content to ingest.
      required:
      - type
      description: Contains information about the metadata associate with the content
        to ingest into a knowledge base. Choose a `type` and include the field that
        corresponds to it.
    DocumentStatus:
      type: string
      enum:
      - INDEXED
      - PARTIALLY_INDEXED
      - PENDING
      - FAILED
      - METADATA_PARTIALLY_INDEXED
      - METADATA_UPDATE_FAILED
      - IGNORED
      - NOT_FOUND
      - STARTING
      - IN_PROGRESS
      - DELETING
      - DELETE_IN_PROGRESS
    DraftVersion:
      type: string
      pattern: ^DRAFT$
      minLength: 5
      maxLength: 5
    DuplicateConditionExpressionFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node containing the duplicate condition expressions.
        expression:
          allOf:
          - $ref: '#/components/schemas/FlowConditionExpression'
          description: The duplicated condition expression.
      required:
      - node
      - expression
      description: Details about duplicate condition expressions found in a condition
        node.
    DuplicateConnectionsFlowValidationDetails:
      type: object
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the source node where the duplicate connection
            starts.
        target:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the target node where the duplicate connection
            ends.
      required:
      - source
      - target
      description: Details about duplicate connections found between two nodes in
        the flow.
    EmbeddingDataType:
      type: string
      enum:
      - FLOAT32
      - BINARY
      description: <p>Bedrock models embedding data type. Can be either float32 or
        binary.</p>
    EmbeddingModelConfiguration:
      type: object
      properties:
        bedrockEmbeddingModelConfiguration:
          allOf:
          - $ref: '#/components/schemas/BedrockEmbeddingModelConfiguration'
          description: The vector configuration details on the Bedrock embeddings
            model.
      description: The configuration details for the embeddings model.
    EnabledMemoryTypes:
      type: array
      items:
        $ref: '#/components/schemas/MemoryType'
    EnrichmentStrategyConfiguration:
      type: object
      properties:
        method:
          allOf:
          - $ref: '#/components/schemas/EnrichmentStrategyMethod'
          description: The method used for the context enrichment strategy.
      required:
      - method
      description: The strategy used for performing context enrichment.
    EnrichmentStrategyMethod:
      type: string
      enum:
      - CHUNK_ENTITY_EXTRACTION
    ErrorMessage:
      type: string
      maxLength: 2048
    FailureReason:
      type: string
      maxLength: 2048
    FailureReasons:
      type: array
      items:
        $ref: '#/components/schemas/FailureReason'
    FieldName:
      type: string
      pattern: ^.*$
      maxLength: 2048
    FilterList:
      type: array
      items:
        $ref: '#/components/schemas/FilterPattern'
      x-sensitive: true
    FilterPattern:
      type: string
      minLength: 1
      maxLength: 1000
    FilteredObjectType:
      type: string
      minLength: 1
      maxLength: 50
    FixedSizeChunkingConfiguration:
      type: object
      properties:
        maxTokens:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of tokens to include in a chunk.
        overlapPercentage:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The percentage of overlap between adjacent chunks of a data
            source.
      required:
      - maxTokens
      - overlapPercentage
      description: Configurations for when you choose fixed-size chunking. If you
        set the `chunkingStrategy` as `NONE`, exclude this field.
    FlowAliasArn:
      type: string
      pattern: ^arn:aws:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:flow/[0-9a-zA-Z]{10}/alias/(TSTALIASID|[0-9a-zA-Z]{10})$
    FlowAliasId:
      type: string
      pattern: ^(TSTALIASID|[0-9a-zA-Z]{10})$
    FlowAliasIdentifier:
      type: string
      pattern: ^(arn:aws:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:flow/[0-9a-zA-Z]{10}/alias/[0-9a-zA-Z]{10})|(TSTALIASID|[0-9a-zA-Z]{10})$
    FlowAliasRoutingConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/FlowAliasRoutingConfigurationListItem'
    FlowAliasRoutingConfigurationListItem:
      type: object
      properties:
        flowVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version that the alias maps to.
      description: Contains information about a version that the alias maps to.
    FlowAliasSummaries:
      type: array
      items:
        $ref: '#/components/schemas/FlowAliasSummary'
    FlowAliasSummary:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the alias.
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/FlowAliasRoutingConfiguration'
          description: A list of configurations about the versions that the alias
            maps to. Currently, you can only specify one.
        flowId:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowAliasId'
          description: The unique identifier of the alias of the flow.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowAliasArn'
          description: The Amazon Resource Name (ARN) of the alias.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the alias was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the alias was last updated.
      required:
      - name
      - routingConfiguration
      - flowId
      - id
      - arn
      - createdAt
      - updatedAt
      description: "Contains information about an alias of a flow.\n\nThis data type\
        \ is used in the following API operations:\n\n  * [ListFlowAliases response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_ListFlowAliases.html#API_agent_ListFlowAliases_ResponseSyntax)"
    FlowArn:
      type: string
      pattern: ^arn:aws:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:flow/[0-9a-zA-Z]{10}$
    FlowCondition:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowConditionName'
          description: A name for the condition that you can reference.
        expression:
          allOf:
          - $ref: '#/components/schemas/FlowConditionExpression'
          description: Defines the condition. You must refer to at least one of the
            inputs in the condition. For more information, expand the Condition node
            section in [Node types in prompt flows](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-how-it-works.html#flows-nodes).
      required:
      - name
      description: Defines a condition in the condition node.
    FlowConditionExpression:
      type: string
      minLength: 1
      maxLength: 64
    FlowConditionName:
      type: string
      pattern: ^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$
    FlowConditionalConnectionConfiguration:
      type: object
      properties:
        condition:
          allOf:
          - $ref: '#/components/schemas/FlowConditionName'
          description: The condition that triggers this connection. For more information
            about how to write conditions, see the **Condition** node type in the
            [Node types](https://docs.aws.amazon.com/bedrock/latest/userguide/node-types.html)
            topic in the Amazon Bedrock User Guide.
      required:
      - condition
      description: The configuration of a connection between a condition node and
        another node.
    FlowConditions:
      type: array
      items:
        $ref: '#/components/schemas/FlowCondition'
    FlowConnection:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionType'
          description: Whether the source node that the connection begins from is
            a condition node (`Conditional`) or not (`Data`).
        name:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionName'
          description: A name for the connection that you can reference.
        source:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The node that the connection starts at.
        target:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The node that the connection ends at.
        configuration:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionConfiguration'
          description: The configuration of the connection.
      required:
      - type
      - name
      - source
      - target
      description: Contains information about a connection between two nodes in the
        flow.
    FlowConnectionConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/FlowDataConnectionConfiguration'
        description: |-
          The configuration of a connection originating from a node that isn't a Condition node.
      - allOf:
        - $ref: '#/components/schemas/FlowConditionalConnectionConfiguration'
        description: |-
          The configuration of a connection originating from a Condition node.
      description: |-
        The configuration of the connection.
    FlowConnectionName:
      type: string
      pattern: ^[a-zA-Z]([_]?[0-9a-zA-Z]){1,100}$
    FlowConnectionType:
      type: string
      enum:
      - Data
      - Conditional
    FlowConnections:
      type: array
      items:
        $ref: '#/components/schemas/FlowConnection'
    FlowDataConnectionConfiguration:
      type: object
      properties:
        sourceOutput:
          allOf:
          - $ref: '#/components/schemas/FlowNodeOutputName'
          description: The name of the output in the source node that the connection
            begins from.
        targetInput:
          allOf:
          - $ref: '#/components/schemas/FlowNodeInputName'
          description: The name of the input in the target node that the connection
            ends at.
      required:
      - sourceOutput
      - targetInput
      description: The configuration of a connection originating from a node that
        isn't a Condition node.
    FlowDefinition:
      type: object
      properties:
        nodes:
          allOf:
          - $ref: '#/components/schemas/FlowNodes'
          description: An array of node definitions in the flow.
        connections:
          allOf:
          - $ref: '#/components/schemas/FlowConnections'
          description: An array of connection definitions in the flow.
      description: The definition of the nodes and connections between nodes in the
        flow.
    FlowDescription:
      type: string
      minLength: 1
      maxLength: 200
    FlowExecutionRoleArn:
      type: string
      pattern: ^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/(service-role/)?.+$
      maxLength: 2048
    FlowId:
      type: string
      pattern: ^[0-9a-zA-Z]{10}$
    FlowIdentifier:
      type: string
      pattern: ^(arn:aws:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:flow/[0-9a-zA-Z]{10})|([0-9a-zA-Z]{10})$
    FlowName:
      type: string
      pattern: ^([0-9a-zA-Z][_-]?){1,100}$
    FlowNode:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: A name for the node.
        type:
          allOf:
          - $ref: '#/components/schemas/FlowNodeType'
          description: The type of node. This value must match the name of the key
            that you provide in the configuration you provide in the `FlowNodeConfiguration`
            field.
        configuration:
          allOf:
          - $ref: '#/components/schemas/FlowNodeConfiguration'
          description: Contains configurations for the node.
        inputs:
          allOf:
          - $ref: '#/components/schemas/FlowNodeInputs'
          description: An array of objects, each of which contains information about
            an input into the node.
        outputs:
          allOf:
          - $ref: '#/components/schemas/FlowNodeOutputs'
          description: A list of objects, each of which contains information about
            an output from the node.
      required:
      - name
      - type
      description: Contains configurations about a node in the flow.
    FlowNodeConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/InputFlowNodeConfiguration'
        description: |-
          Contains configurations for an input flow node in your flow. The first node in the flow. `inputs` can't be specified for this node.
      - allOf:
        - $ref: '#/components/schemas/OutputFlowNodeConfiguration'
        description: |-
          Contains configurations for an output flow node in your flow. The last node in the flow. `outputs` can't be specified for this node.
      - allOf:
        - $ref: '#/components/schemas/KnowledgeBaseFlowNodeConfiguration'
        description: |-
          Contains configurations for a knowledge base node in your flow. Queries a knowledge base and returns the retrieved results or generated response.
      - allOf:
        - $ref: '#/components/schemas/ConditionFlowNodeConfiguration'
        description: |-
          Contains configurations for a Condition node in your flow. Defines conditions that lead to different branches of the flow.
      - allOf:
        - $ref: '#/components/schemas/LexFlowNodeConfiguration'
        description: |-
          Contains configurations for a Lex node in your flow. Invokes an Amazon Lex bot to identify the intent of the input and return the intent as the output.
      - allOf:
        - $ref: '#/components/schemas/PromptFlowNodeConfiguration'
        description: |-
          Contains configurations for a prompt node in your flow. Runs a prompt and generates the model response as the output. You can use a prompt from Prompt management or you can configure one in this node.
      - allOf:
        - $ref: '#/components/schemas/LambdaFunctionFlowNodeConfiguration'
        description: |-
          Contains configurations for a Lambda function node in your flow. Invokes an Lambda function.
      - allOf:
        - $ref: '#/components/schemas/StorageFlowNodeConfiguration'
        description: |-
          Contains configurations for a Storage node in your flow. Stores an input in an Amazon S3 location.
      - allOf:
        - $ref: '#/components/schemas/AgentFlowNodeConfiguration'
        description: |-
          Contains configurations for an agent node in your flow. Invokes an alias of an agent and returns the response.
      - allOf:
        - $ref: '#/components/schemas/RetrievalFlowNodeConfiguration'
        description: |-
          Contains configurations for a Retrieval node in your flow. Retrieves data from an Amazon S3 location and returns it as the output.
      - allOf:
        - $ref: '#/components/schemas/IteratorFlowNodeConfiguration'
        description: |-
          Contains configurations for an iterator node in your flow. Takes an input that is an array and iteratively sends each item of the array as an output to the following node. The size of the array is also returned in the output.

          The output flow node at the end of the flow iteration will return a response for each member of the array. To return only one response, you can include a collector node downstream from the iterator node.
      - allOf:
        - $ref: '#/components/schemas/CollectorFlowNodeConfiguration'
        description: |-
          Contains configurations for a collector node in your flow. Collects an iteration of inputs and consolidates them into an array of outputs.
      description: |-
        Contains configurations for a node in your flow. For more information, see [Node types in Amazon Bedrock works](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html) in the Amazon Bedrock User Guide.
    FlowNodeIODataType:
      type: string
      enum:
      - String
      - Number
      - Boolean
      - Object
      - Array
    FlowNodeInput:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowNodeInputName'
          description: A name for the input that you can reference.
        type:
          allOf:
          - $ref: '#/components/schemas/FlowNodeIODataType'
          description: The data type of the input. If the input doesn't match this
            type at runtime, a validation error will be thrown.
        expression:
          allOf:
          - $ref: '#/components/schemas/FlowNodeInputExpression'
          description: An expression that formats the input for the node. For an explanation
            of how to create expressions, see [Expressions in Prompt flows in Amazon
            Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-expressions.html).
      required:
      - name
      - type
      - expression
      description: Contains configurations for an input to a node.
    FlowNodeInputExpression:
      type: string
      minLength: 1
      maxLength: 64
    FlowNodeInputName:
      type: string
      pattern: ^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$
    FlowNodeInputs:
      type: array
      items:
        $ref: '#/components/schemas/FlowNodeInput'
    FlowNodeName:
      type: string
      pattern: ^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$
    FlowNodeOutput:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowNodeOutputName'
          description: A name for the output that you can reference.
        type:
          allOf:
          - $ref: '#/components/schemas/FlowNodeIODataType'
          description: The data type of the output. If the output doesn't match this
            type at runtime, a validation error will be thrown.
      required:
      - name
      - type
      description: Contains configurations for an output from a node.
    FlowNodeOutputName:
      type: string
      pattern: ^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$
    FlowNodeOutputs:
      type: array
      items:
        $ref: '#/components/schemas/FlowNodeOutput'
    FlowNodeType:
      type: string
      enum:
      - Input
      - Output
      - KnowledgeBase
      - Condition
      - Lex
      - Prompt
      - LambdaFunction
      - Storage
      - Agent
      - Retrieval
      - Iterator
      - Collector
    FlowNodes:
      type: array
      items:
        $ref: '#/components/schemas/FlowNode'
    FlowStatus:
      type: string
      enum:
      - Failed
      - Prepared
      - Preparing
      - NotPrepared
    FlowSummaries:
      type: array
      items:
        $ref: '#/components/schemas/FlowSummary'
    FlowSummary:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The name of the flow.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: A description of the flow.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow.
        status:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: "The status of the flow. The following statuses are possible:\n\
            \n  * NotPrepared – The flow has been created or updated, but hasn't been\
            \ prepared. If you just created the flow, you can't test it. If you updated\
            \ the flow, the `DRAFT` version won't contain the latest changes for testing.\
            \ Send a [PrepareFlow](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PrepareFlow.html)\
            \ request to package the latest changes into the `DRAFT` version.\n\n\
            \  * Preparing – The flow is being prepared so that the `DRAFT` version\
            \ contains the latest changes for testing.\n\n  * Prepared – The flow\
            \ is prepared and the `DRAFT` version contains the latest changes for\
            \ testing.\n\n  * Failed – The last API operation that you invoked on\
            \ the flow failed. Send a [GetFlow](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_GetFlow.html)\
            \ request and check the error message in the `validations` field."
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was last updated.
        version:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The latest version of the flow.
      required:
      - name
      - id
      - arn
      - status
      - createdAt
      - updatedAt
      - version
      description: Contains the definition of a flow.
    FlowValidation:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/NonBlankString'
          description: A message describing the validation error.
        severity:
          allOf:
          - $ref: '#/components/schemas/FlowValidationSeverity'
          description: The severity of the issue described in the message.
        details:
          allOf:
          - $ref: '#/components/schemas/FlowValidationDetails'
          description: Specific details about the validation issue encountered in
            the flow.
        type:
          allOf:
          - $ref: '#/components/schemas/FlowValidationType'
          description: The type of validation issue encountered in the flow.
      required:
      - message
      - severity
      description: "Contains information about validation of the flow.\n\nThis data\
        \ type is used in the following API operations:\n\n  * [GetFlow response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_GetFlow.html#API_agent_GetFlow_ResponseSyntax)\n\
        \n  * [GetFlowVersion response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_GetFlowVersion.html#API_agent_GetFlowVersion_ResponseSyntax)"
    FlowValidationDetails:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/CyclicConnectionFlowValidationDetails'
        description: |-
          Details about a cyclic connection in the flow.
      - allOf:
        - $ref: '#/components/schemas/DuplicateConnectionsFlowValidationDetails'
        description: |-
          Details about duplicate connections between nodes.
      - allOf:
        - $ref: '#/components/schemas/DuplicateConditionExpressionFlowValidationDetails'
        description: |-
          Details about duplicate condition expressions in a node.
      - allOf:
        - $ref: '#/components/schemas/UnreachableNodeFlowValidationDetails'
        description: |-
          Details about an unreachable node in the flow.
      - allOf:
        - $ref: '#/components/schemas/UnknownConnectionSourceFlowValidationDetails'
        description: |-
          Details about an unknown source node for a connection.
      - allOf:
        - $ref: '#/components/schemas/UnknownConnectionSourceOutputFlowValidationDetails'
        description: |-
          Details about an unknown source output for a connection.
      - allOf:
        - $ref: '#/components/schemas/UnknownConnectionTargetFlowValidationDetails'
        description: |-
          Details about an unknown target node for a connection.
      - allOf:
        - $ref: '#/components/schemas/UnknownConnectionTargetInputFlowValidationDetails'
        description: |-
          Details about an unknown target input for a connection.
      - allOf:
        - $ref: '#/components/schemas/UnknownConnectionConditionFlowValidationDetails'
        description: |-
          Details about an unknown condition for a connection.
      - allOf:
        - $ref: '#/components/schemas/MalformedConditionExpressionFlowValidationDetails'
        description: |-
          Details about a malformed condition expression in a node.
      - allOf:
        - $ref: '#/components/schemas/MalformedNodeInputExpressionFlowValidationDetails'
        description: |-
          Details about a malformed input expression in a node.
      - allOf:
        - $ref: '#/components/schemas/MismatchedNodeInputTypeFlowValidationDetails'
        description: |-
          Details about mismatched input data types in a node.
      - allOf:
        - $ref: '#/components/schemas/MismatchedNodeOutputTypeFlowValidationDetails'
        description: |-
          Details about mismatched output data types in a node.
      - allOf:
        - $ref: '#/components/schemas/IncompatibleConnectionDataTypeFlowValidationDetails'
        description: |-
          Details about incompatible data types in a connection.
      - allOf:
        - $ref: '#/components/schemas/MissingConnectionConfigurationFlowValidationDetails'
        description: |-
          Details about missing configuration for a connection.
      - allOf:
        - $ref: '#/components/schemas/MissingDefaultConditionFlowValidationDetails'
        description: |-
          Details about a missing default condition in a conditional node.
      - allOf:
        - $ref: '#/components/schemas/MissingEndingNodesFlowValidationDetails'
        description: |-
          Details about missing ending nodes in the flow.
      - allOf:
        - $ref: '#/components/schemas/MissingNodeConfigurationFlowValidationDetails'
        description: |-
          Details about missing configuration for a node.
      - allOf:
        - $ref: '#/components/schemas/MissingNodeInputFlowValidationDetails'
        description: |-
          Details about a missing required input in a node.
      - allOf:
        - $ref: '#/components/schemas/MissingNodeOutputFlowValidationDetails'
        description: |-
          Details about a missing required output in a node.
      - allOf:
        - $ref: '#/components/schemas/MissingStartingNodesFlowValidationDetails'
        description: |-
          Details about missing starting nodes in the flow.
      - allOf:
        - $ref: '#/components/schemas/MultipleNodeInputConnectionsFlowValidationDetails'
        description: |-
          Details about multiple connections to a single node input.
      - allOf:
        - $ref: '#/components/schemas/UnfulfilledNodeInputFlowValidationDetails'
        description: |-
          Details about an unfulfilled node input with no valid connections.
      - allOf:
        - $ref: '#/components/schemas/UnsatisfiedConnectionConditionsFlowValidationDetails'
        description: |-
          Details about unsatisfied conditions for a connection.
      - allOf:
        - $ref: '#/components/schemas/UnspecifiedFlowValidationDetails'
        description: |-
          Details about an unspecified validation.
      - allOf:
        - $ref: '#/components/schemas/UnknownNodeInputFlowValidationDetails'
        description: |-
          Details about an unknown input for a node.
      - allOf:
        - $ref: '#/components/schemas/UnknownNodeOutputFlowValidationDetails'
        description: |-
          Details about an unknown output for a node.
      description: |-
        A union type containing various possible validation issues in the flow.
    FlowValidationSeverity:
      type: string
      enum:
      - Warning
      - Error
    FlowValidationType:
      type: string
      enum:
      - CyclicConnection
      - DuplicateConnections
      - DuplicateConditionExpression
      - UnreachableNode
      - UnknownConnectionSource
      - UnknownConnectionSourceOutput
      - UnknownConnectionTarget
      - UnknownConnectionTargetInput
      - UnknownConnectionCondition
      - MalformedConditionExpression
      - MalformedNodeInputExpression
      - MismatchedNodeInputType
      - MismatchedNodeOutputType
      - IncompatibleConnectionDataType
      - MissingConnectionConfiguration
      - MissingDefaultCondition
      - MissingEndingNodes
      - MissingNodeConfiguration
      - MissingNodeInput
      - MissingNodeOutput
      - MissingStartingNodes
      - MultipleNodeInputConnections
      - UnfulfilledNodeInput
      - UnsatisfiedConnectionConditions
      - Unspecified
      - UnknownNodeInput
      - UnknownNodeOutput
    FlowValidations:
      type: array
      items:
        $ref: '#/components/schemas/FlowValidation'
    FlowVersionSummaries:
      type: array
      items:
        $ref: '#/components/schemas/FlowVersionSummary'
    FlowVersionSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow that the version
            belongs to.
        status:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: The status of the flow.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at the version was created.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the flow.
      required:
      - id
      - arn
      - status
      - createdAt
      - version
      description: "Contains information about a version of a flow.\n\nThis data type\
        \ is used in the following API operations:\n\n  * [ListFlowVersions response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_ListFlowVersions.html#API_agent_ListFlowVersions_ResponseSyntax)"
    Function:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: A name for the function.
        description:
          allOf:
          - $ref: '#/components/schemas/FunctionDescription'
          description: A description of the function and its purpose.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ParameterMap'
          description: The parameters that the agent elicits from the user to fulfill
            the function.
        requireConfirmation:
          allOf:
          - $ref: '#/components/schemas/RequireConfirmation'
          description: Contains information if user confirmation is required to invoke
            the function.
      required:
      - name
      description: "Defines parameters that the agent needs to invoke from the user\
        \ to complete the function. Corresponds to an action in an action group.\n\
        \nThis data type is used in the following API operations:\n\n  * [CreateAgentActionGroup\
        \ request](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_CreateAgentActionGroup.html#API_agent_CreateAgentActionGroup_RequestSyntax)\n\
        \n  * [CreateAgentActionGroup response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_CreateAgentActionGroup.html#API_agent_CreateAgentActionGroup_ResponseSyntax)\n\
        \n  * [UpdateAgentActionGroup request](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_UpdateAgentActionGroup.html#API_agent_UpdateAgentActionGroup_RequestSyntax)\n\
        \n  * [UpdateAgentActionGroup response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_UpdateAgentActionGroup.html#API_agent_UpdateAgentActionGroup_ResponseSyntax)\n\
        \n  * [GetAgentActionGroup response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_GetAgentActionGroup.html#API_agent_GetAgentActionGroup_ResponseSyntax)"
    FunctionDescription:
      type: string
      minLength: 1
      maxLength: 1200
    FunctionSchema:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/Functions'
        description: |-
          A list of functions that each define an action in the action group.
      description: |-
        Defines functions that each define parameters that the agent needs to invoke from the user. Each function represents an action in an action group.

        This data type is used in the following API operations:

          * [CreateAgentActionGroup request](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_CreateAgentActionGroup.html#API_agent_CreateAgentActionGroup_RequestSyntax)

          * [CreateAgentActionGroup response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_CreateAgentActionGroup.html#API_agent_CreateAgentActionGroup_ResponseSyntax)

          * [UpdateAgentActionGroup request](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_UpdateAgentActionGroup.html#API_agent_UpdateAgentActionGroup_RequestSyntax)

          * [UpdateAgentActionGroup response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_UpdateAgentActionGroup.html#API_agent_UpdateAgentActionGroup_ResponseSyntax)

          * [GetAgentActionGroup response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_GetAgentActionGroup.html#API_agent_GetAgentActionGroup_ResponseSyntax)
    Functions:
      type: array
      items:
        $ref: '#/components/schemas/Function'
    GetAgentActionGroupRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent that the action group belongs
            to.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the agent that the action group belongs to.
        actionGroupId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the action group for which to get
            information.
      required:
      - agentId
      - agentVersion
      - actionGroupId
    GetAgentActionGroupResponse:
      type: object
      properties:
        agentActionGroup:
          allOf:
          - $ref: '#/components/schemas/AgentActionGroup'
          description: Contains details about the action group.
      required:
      - agentActionGroup
    GetAgentAliasRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent to which the alias to get
            information belongs.
        agentAliasId:
          allOf:
          - $ref: '#/components/schemas/AgentAliasId'
          description: The unique identifier of the alias for which to get information.
      required:
      - agentId
      - agentAliasId
    GetAgentAliasResponse:
      type: object
      properties:
        agentAlias:
          allOf:
          - $ref: '#/components/schemas/AgentAlias'
          description: Contains information about the alias.
      required:
      - agentAlias
    GetAgentCollaboratorRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The agent's ID.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The agent's version.
        collaboratorId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The collaborator's ID.
      required:
      - agentId
      - agentVersion
      - collaboratorId
    GetAgentCollaboratorResponse:
      type: object
      properties:
        agentCollaborator:
          allOf:
          - $ref: '#/components/schemas/AgentCollaborator'
          description: Details about the collaborator.
      required:
      - agentCollaborator
    GetAgentKnowledgeBaseRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent with which the knowledge
            base is associated.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the agent with which the knowledge base is associated.
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base associated with
            the agent.
      required:
      - agentId
      - agentVersion
      - knowledgeBaseId
    GetAgentKnowledgeBaseResponse:
      type: object
      properties:
        agentKnowledgeBase:
          allOf:
          - $ref: '#/components/schemas/AgentKnowledgeBase'
          description: Contains details about a knowledge base attached to an agent.
      required:
      - agentKnowledgeBase
    GetAgentRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
      required:
      - agentId
    GetAgentResponse:
      type: object
      properties:
        agent:
          allOf:
          - $ref: '#/components/schemas/Agent'
          description: Contains details about the agent.
      required:
      - agent
    GetAgentVersionRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the agent.
      required:
      - agentId
      - agentVersion
    GetAgentVersionResponse:
      type: object
      properties:
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/AgentVersion'
          description: Contains details about the version of the agent.
      required:
      - agentVersion
    GetDataSourceRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base for the data source.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source.
      required:
      - knowledgeBaseId
      - dataSourceId
    GetDataSourceResponse:
      type: object
      properties:
        dataSource:
          allOf:
          - $ref: '#/components/schemas/DataSource'
          description: Contains details about the data source.
      required:
      - dataSource
    GetFlowAliasRequest:
      type: object
      properties:
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow that the alias belongs to.
        aliasIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowAliasIdentifier'
          description: The unique identifier of the alias for which to retrieve information.
      required:
      - flowIdentifier
      - aliasIdentifier
    GetFlowAliasResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the flow.
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/FlowAliasRoutingConfiguration'
          description: Contains information about the version that the alias is mapped
            to.
        flowId:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow that the alias belongs to.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowAliasId'
          description: The unique identifier of the alias of the flow.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowAliasArn'
          description: The Amazon Resource Name (ARN) of the flow.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the alias was last updated.
      required:
      - name
      - routingConfiguration
      - flowId
      - id
      - arn
      - createdAt
      - updatedAt
    GetFlowRequest:
      type: object
      properties:
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow.
      required:
      - flowIdentifier
    GetFlowResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The name of the flow.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: The description of the flow.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/FlowExecutionRoleArn'
          description: The Amazon Resource Name (ARN) of the service role with permissions
            to create a flow. For more information, see [Create a service row for
            flows](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-permissions.html)
            in the Amazon Bedrock User Guide.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key that the flow
            is encrypted with.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow.
        status:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: "The status of the flow. The following statuses are possible:\n\
            \n  * NotPrepared – The flow has been created or updated, but hasn't been\
            \ prepared. If you just created the flow, you can't test it. If you updated\
            \ the flow, the `DRAFT` version won't contain the latest changes for testing.\
            \ Send a [PrepareFlow](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PrepareFlow.html)\
            \ request to package the latest changes into the `DRAFT` version.\n\n\
            \  * Preparing – The flow is being prepared so that the `DRAFT` version\
            \ contains the latest changes for testing.\n\n  * Prepared – The flow\
            \ is prepared and the `DRAFT` version contains the latest changes for\
            \ testing.\n\n  * Failed – The last API operation that you invoked on\
            \ the flow failed. Send a [GetFlow](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_GetFlow.html)\
            \ request and check the error message in the `validations` field."
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was last updated.
        version:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The version of the flow for which information was retrieved.
        definition:
          allOf:
          - $ref: '#/components/schemas/FlowDefinition'
          description: The definition of the nodes and connections between the nodes
            in the flow.
        validations:
          allOf:
          - $ref: '#/components/schemas/FlowValidations'
          description: A list of validation error messages related to the last failed
            operation on the flow.
      required:
      - name
      - executionRoleArn
      - id
      - arn
      - status
      - createdAt
      - updatedAt
      - version
    GetFlowVersionRequest:
      type: object
      properties:
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow for which to get information.
        flowVersion:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the flow for which to get information.
      required:
      - flowIdentifier
      - flowVersion
    GetFlowVersionResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The name of the version.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: The description of the flow.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/FlowExecutionRoleArn'
          description: The Amazon Resource Name (ARN) of the service role with permissions
            to create a flow. For more information, see [Create a service role for
            flows in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-permissions.html)
            in the Amazon Bedrock User Guide.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key that the version
            of the flow is encrypted with.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow.
        status:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: The status of the flow.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was created.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the flow for which information was retrieved.
        definition:
          allOf:
          - $ref: '#/components/schemas/FlowDefinition'
          description: The definition of the nodes and connections between nodes in
            the flow.
      required:
      - name
      - executionRoleArn
      - id
      - arn
      - status
      - createdAt
      - version
    GetIngestionJobRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base for the data ingestion
            job you want to get information on.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source for the data ingestion
            job you want to get information on.
        ingestionJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data ingestion job you want to
            get information on.
      required:
      - knowledgeBaseId
      - dataSourceId
      - ingestionJobId
    GetIngestionJobResponse:
      type: object
      properties:
        ingestionJob:
          allOf:
          - $ref: '#/components/schemas/IngestionJob'
          description: Contains details about the data ingestion job.
      required:
      - ingestionJob
    GetKnowledgeBaseDocumentsRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base that is connected
            to the data source.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source that contains the
            documents.
        documentIdentifiers:
          allOf:
          - $ref: '#/components/schemas/DocumentIdentifiers'
          description: A list of objects, each of which contains information to identify
            a document for which to retrieve information.
      required:
      - knowledgeBaseId
      - dataSourceId
      - documentIdentifiers
    GetKnowledgeBaseDocumentsResponse:
      type: object
      properties:
        documentDetails:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseDocumentDetails'
          description: A list of objects, each of which contains information about
            the documents that were retrieved.
    GetKnowledgeBaseRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base you want to get
            information on.
      required:
      - knowledgeBaseId
    GetKnowledgeBaseResponse:
      type: object
      properties:
        knowledgeBase:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBase'
          description: Contains details about the knowledge base.
      required:
      - knowledgeBase
    GetPromptRequest:
      type: object
      properties:
        promptIdentifier:
          allOf:
          - $ref: '#/components/schemas/PromptIdentifier'
          description: The unique identifier of the prompt.
        promptVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the prompt about which you want to retrieve
            information. Omit this field to return information about the working draft
            of the prompt.
      required:
      - promptIdentifier
    GetPromptResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/PromptName'
          description: The name of the prompt.
        description:
          allOf:
          - $ref: '#/components/schemas/PromptDescription'
          description: The descriptino of the prompt.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key that the prompt
            is encrypted with.
        defaultVariant:
          allOf:
          - $ref: '#/components/schemas/PromptVariantName'
          description: The name of the default variant for the prompt. This value
            must match the `name` field in the relevant [PromptVariant](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html)
            object.
        variants:
          allOf:
          - $ref: '#/components/schemas/PromptVariantList'
          description: A list of objects, each containing details about a variant
            of the prompt.
        id:
          allOf:
          - $ref: '#/components/schemas/PromptId'
          description: The unique identifier of the prompt.
        arn:
          allOf:
          - $ref: '#/components/schemas/PromptArn'
          description: The Amazon Resource Name (ARN) of the prompt or the prompt
            version (if you specified a version in the request).
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the prompt.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the prompt was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the prompt was last updated.
      required:
      - name
      - id
      - arn
      - version
      - createdAt
      - updatedAt
    GraphArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov):neptune-graph:[a-zA-Z0-9-]*:[0-9]{12}:graph/g-[a-zA-Z0-9]{10}$
      minLength: 1
      maxLength: 255
    GuardrailConfiguration:
      type: object
      properties:
        guardrailIdentifier:
          allOf:
          - $ref: '#/components/schemas/GuardrailIdentifier'
          description: The unique identifier of the guardrail.
        guardrailVersion:
          allOf:
          - $ref: '#/components/schemas/GuardrailVersion'
          description: The version of the guardrail.
      description: Details about a guardrail associated with a resource.
    GuardrailIdentifier:
      type: string
      pattern: ^(([a-z0-9]+)|(arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:guardrail/[a-z0-9]+))$
      maxLength: 2048
    GuardrailVersion:
      type: string
      pattern: ^(([0-9]{1,8})|(DRAFT))$
    HierarchicalChunkingConfiguration:
      type: object
      properties:
        levelConfigurations:
          allOf:
          - $ref: '#/components/schemas/HierarchicalChunkingLevelConfigurations'
          description: Token settings for each layer.
        overlapTokens:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of tokens to repeat across chunks in the same layer.
      required:
      - levelConfigurations
      - overlapTokens
      description: 'Settings for hierarchical document chunking for a data source.
        Hierarchical chunking splits documents into layers of chunks where the first
        layer contains large chunks, and the second layer contains smaller chunks
        derived from the first layer.


        You configure the number of tokens to overlap, or repeat across adjacent chunks.
        For example, if you set overlap tokens to 60, the last 60 tokens in the first
        chunk are also included at the beginning of the second chunk. For each layer,
        you must also configure the maximum number of tokens in a chunk.'
    HierarchicalChunkingLevelConfiguration:
      type: object
      properties:
        maxTokens:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of tokens that a chunk can contain in this
            layer.
      required:
      - maxTokens
      description: Token settings for a layer in a hierarchical chunking configuration.
    HierarchicalChunkingLevelConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/HierarchicalChunkingLevelConfiguration'
    HttpsUrl:
      type: string
      pattern: ^https://[A-Za-z0-9][^\s]*$
    Id:
      type: string
      pattern: ^[0-9a-zA-Z]{10}$
    IncludeExclude:
      type: string
      enum:
      - INCLUDE
      - EXCLUDE
    IncompatibleConnectionDataTypeFlowValidationDetails:
      type: object
      properties:
        connection:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionName'
          description: The name of the connection with incompatible data types.
      required:
      - connection
      description: Details about incompatible data types in a connection between nodes.
    InferenceConfiguration:
      type: object
      properties:
        temperature:
          allOf:
          - $ref: '#/components/schemas/Temperature'
          description: The likelihood of the model selecting higher-probability options
            while generating a response. A lower value makes the model more likely
            to choose higher-probability options, while a higher value makes the model
            more likely to choose lower-probability options.
        topP:
          allOf:
          - $ref: '#/components/schemas/TopP'
          description: While generating a response, the model determines the probability
            of the following token at each point of generation. The value that you
            set for `Top P` determines the number of most-likely candidates from which
            the model chooses the next token in the sequence. For example, if you
            set `topP` to 80, the model only selects the next token from the top 80%
            of the probability distribution of next tokens.
        topK:
          allOf:
          - $ref: '#/components/schemas/TopK'
          description: While generating a response, the model determines the probability
            of the following token at each point of generation. The value that you
            set for `topK` is the number of most-likely candidates from which the
            model chooses the next token in the sequence. For example, if you set
            `topK` to 50, the model selects the next token from among the top 50 most
            likely choices.
        maximumLength:
          allOf:
          - $ref: '#/components/schemas/MaximumLength'
          description: The maximum number of tokens to allow in the generated response.
        stopSequences:
          allOf:
          - $ref: '#/components/schemas/StopSequences'
          description: A list of stop sequences. A stop sequence is a sequence of
            characters that causes the model to stop generating the response.
      description: Contains inference parameters to use when the agent invokes a foundation
        model in the part of the agent sequence defined by the `promptType`. For more
        information, see [Inference parameters for foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html).
    IngestKnowledgeBaseDocumentsRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base to ingest the documents
            into.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source connected to the knowledge
            base that you're adding documents to.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        documents:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseDocuments'
          description: A list of objects, each of which contains information about
            the documents to add.
      required:
      - knowledgeBaseId
      - dataSourceId
      - documents
    IngestKnowledgeBaseDocumentsResponse:
      type: object
      properties:
        documentDetails:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseDocumentDetails'
          description: A list of objects, each of which contains information about
            the documents that were ingested.
    IngestionJob:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge for the data ingestion
            job.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source for the data ingestion
            job.
        ingestionJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data ingestion job.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the data ingestion job.
        status:
          allOf:
          - $ref: '#/components/schemas/IngestionJobStatus'
          description: The status of the data ingestion job.
        statistics:
          allOf:
          - $ref: '#/components/schemas/IngestionJobStatistics'
          description: Contains statistics about the data ingestion job.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: A list of reasons that the data ingestion job failed.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: 'The time the data ingestion job started.


            If you stop a data ingestion job, the `startedAt` time is the time the
            job was started before the job was stopped.'
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: 'The time the data ingestion job was last updated.


            If you stop a data ingestion job, the `updatedAt` time is the time the
            job was stopped.'
      required:
      - knowledgeBaseId
      - dataSourceId
      - ingestionJobId
      - status
      - startedAt
      - updatedAt
      description: "Contains details about a data ingestion job. Data sources are\
        \ ingested into a knowledge base so that Large Language Models (LLMs) can\
        \ use your data.\n\nThis data type is used in the following API operations:\n\
        \n  * [StartIngestionJob response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_StartIngestionJob.html#API_agent_StartIngestionJob_ResponseSyntax)\n\
        \n  * [GetIngestionJob response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_GetIngestionJob.html#API_agent_GetIngestionJob_ResponseSyntax)\n\
        \n  * [ListIngestionJob response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_ListIngestionJobs.html#API_agent_ListIngestionJobs_ResponseSyntax)"
    IngestionJobFilter:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/IngestionJobFilterAttribute'
          description: The name of field or attribute to apply the filter.
        operator:
          allOf:
          - $ref: '#/components/schemas/IngestionJobFilterOperator'
          description: The operation to apply to the field or attribute.
        values:
          allOf:
          - $ref: '#/components/schemas/IngestionJobFilterValues'
          description: A list of values that belong to the field or attribute.
      required:
      - attribute
      - operator
      - values
      description: The definition of a filter to filter the data.
    IngestionJobFilterAttribute:
      type: string
      enum:
      - STATUS
    IngestionJobFilterOperator:
      type: string
      enum:
      - EQ
    IngestionJobFilterValue:
      type: string
      pattern: ^.*$
      minLength: 0
      maxLength: 100
    IngestionJobFilterValues:
      type: array
      items:
        $ref: '#/components/schemas/IngestionJobFilterValue'
    IngestionJobFilters:
      type: array
      items:
        $ref: '#/components/schemas/IngestionJobFilter'
    IngestionJobSortBy:
      type: object
      properties:
        attribute:
          allOf:
          - $ref: '#/components/schemas/IngestionJobSortByAttribute'
          description: The name of field or attribute to apply sorting of data.
        order:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order for sorting the data.
      required:
      - attribute
      - order
      description: The parameters of sorting the data.
    IngestionJobSortByAttribute:
      type: string
      enum:
      - STATUS
      - STARTED_AT
    IngestionJobStatistics:
      type: object
      properties:
        numberOfDocumentsScanned:
          allOf:
          - $ref: '#/components/schemas/PrimitiveLong'
          description: The total number of source documents that were scanned. Includes
            new, updated, and unchanged documents.
        numberOfMetadataDocumentsScanned:
          allOf:
          - $ref: '#/components/schemas/PrimitiveLong'
          description: The total number of metadata files that were scanned. Includes
            new, updated, and unchanged files.
        numberOfNewDocumentsIndexed:
          allOf:
          - $ref: '#/components/schemas/PrimitiveLong'
          description: The number of new source documents in the data source that
            were successfully indexed.
        numberOfModifiedDocumentsIndexed:
          allOf:
          - $ref: '#/components/schemas/PrimitiveLong'
          description: The number of modified source documents in the data source
            that were successfully indexed.
        numberOfMetadataDocumentsModified:
          allOf:
          - $ref: '#/components/schemas/PrimitiveLong'
          description: The number of metadata files that were updated or deleted.
        numberOfDocumentsDeleted:
          allOf:
          - $ref: '#/components/schemas/PrimitiveLong'
          description: The number of source documents that were deleted.
        numberOfDocumentsFailed:
          allOf:
          - $ref: '#/components/schemas/PrimitiveLong'
          description: The number of source documents that failed to be ingested.
      description: Contains the statistics for the data ingestion job.
    IngestionJobStatus:
      type: string
      enum:
      - STARTING
      - IN_PROGRESS
      - COMPLETE
      - FAILED
      - STOPPING
      - STOPPED
    IngestionJobSummaries:
      type: array
      items:
        $ref: '#/components/schemas/IngestionJobSummary'
    IngestionJobSummary:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base for the data ingestion
            job.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source for the data ingestion
            job.
        ingestionJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data ingestion job.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the data ingestion job.
        status:
          allOf:
          - $ref: '#/components/schemas/IngestionJobStatus'
          description: The status of the data ingestion job.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time the data ingestion job started.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time the data ingestion job was last updated.
        statistics:
          allOf:
          - $ref: '#/components/schemas/IngestionJobStatistics'
          description: Contains statistics for the data ingestion job.
      required:
      - knowledgeBaseId
      - dataSourceId
      - ingestionJobId
      - status
      - startedAt
      - updatedAt
      description: Contains details about a data ingestion job.
    InlineContent:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/InlineContentType'
          description: The type of inline content to define.
        byteContent:
          allOf:
          - $ref: '#/components/schemas/ByteContentDoc'
          description: Contains information about content defined inline in bytes.
        textContent:
          allOf:
          - $ref: '#/components/schemas/TextContentDoc'
          description: Contains information about content defined inline in text.
      required:
      - type
      description: Contains information about content defined inline to ingest into
        a data source. Choose a `type` and include the field that corresponds to it.
    InlineContentType:
      type: string
      enum:
      - BYTE
      - TEXT
    InputFlowNodeConfiguration:
      type: object
      properties: {}
      description: Contains configurations for the input flow node for a flow. This
        node takes the input from flow invocation and passes it to the next node in
        the data type that you specify.
    Instruction:
      type: string
      minLength: 40
      maxLength: 4000
    IntermediateStorage:
      type: object
      properties:
        s3Location:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: An S3 bucket path.
      required:
      - s3Location
      description: A location for storing content from data sources temporarily as
        it is processed by custom components in the ingestion pipeline.
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/NonBlankString'
      description: An internal server error occurred. Retry your request.
    IteratorFlowNodeConfiguration:
      type: object
      properties: {}
      description: 'Contains configurations for an iterator node in a flow. Takes
        an input that is an array and iteratively sends each item of the array as
        an output to the following node. The size of the array is also returned in
        the output.


        The output flow node at the end of the flow iteration will return a response
        for each member of the array. To return only one response, you can include
        a collector node downstream from the iterator node.'
    KendraIndexArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov):kendra:[a-z0-9-]{1,20}:([0-9]{12}|):index/([a-zA-Z0-9][a-zA-Z0-9-]{35}|[a-zA-Z0-9][a-zA-Z0-9-]{35}-[a-zA-Z0-9][a-zA-Z0-9-]{35})$
    KendraKnowledgeBaseConfiguration:
      type: object
      properties:
        kendraIndexArn:
          allOf:
          - $ref: '#/components/schemas/KendraIndexArn'
          description: The ARN of the Amazon Kendra index.
      required:
      - kendraIndexArn
      description: Settings for an Amazon Kendra knowledge base.
    Key:
      type: string
      minLength: 1
      maxLength: 200
    KmsKeyArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$
      minLength: 1
      maxLength: 2048
    KnowledgeBase:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the knowledge base.
        knowledgeBaseArn:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseArn'
          description: The Amazon Resource Name (ARN) of the knowledge base.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the knowledge base.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role with permissions
            to invoke API operations on the knowledge base.
        knowledgeBaseConfiguration:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseConfiguration'
          description: Contains details about the embeddings configuration of the
            knowledge base.
        storageConfiguration:
          allOf:
          - $ref: '#/components/schemas/StorageConfiguration'
          description: Contains details about the storage configuration of the knowledge
            base.
        status:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseStatus'
          description: "The status of the knowledge base. The following statuses are\
            \ possible:\n\n  * CREATING – The knowledge base is being created.\n\n\
            \  * ACTIVE – The knowledge base is ready to be queried.\n\n  * DELETING\
            \ – The knowledge base is being deleted.\n\n  * UPDATING – The knowledge\
            \ base is being updated.\n\n  * FAILED – The knowledge base API operation\
            \ failed."
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time the knowledge base was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time the knowledge base was last updated.
        failureReasons:
          allOf:
          - $ref: '#/components/schemas/FailureReasons'
          description: A list of reasons that the API operation on the knowledge base
            failed.
      required:
      - knowledgeBaseId
      - name
      - knowledgeBaseArn
      - roleArn
      - knowledgeBaseConfiguration
      - status
      - createdAt
      - updatedAt
      description: Contains information about a knowledge base.
    KnowledgeBaseArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov):bedrock:[a-zA-Z0-9-]*:[0-9]{12}:knowledge-base/[0-9a-zA-Z]+$
      maxLength: 128
    KnowledgeBaseConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseType'
          description: The type of data that the data source is converted into for
            the knowledge base.
        vectorKnowledgeBaseConfiguration:
          allOf:
          - $ref: '#/components/schemas/VectorKnowledgeBaseConfiguration'
          description: Contains details about the model that's used to convert the
            data source into vector embeddings.
        kendraKnowledgeBaseConfiguration:
          allOf:
          - $ref: '#/components/schemas/KendraKnowledgeBaseConfiguration'
          description: Settings for an Amazon Kendra knowledge base.
        sqlKnowledgeBaseConfiguration:
          allOf:
          - $ref: '#/components/schemas/SqlKnowledgeBaseConfiguration'
          description: Specifies configurations for a knowledge base connected to
            an SQL database.
      required:
      - type
      description: Contains details about the vector embeddings configuration of the
        knowledge base.
    KnowledgeBaseDocument:
      type: object
      properties:
        metadata:
          allOf:
          - $ref: '#/components/schemas/DocumentMetadata'
          description: Contains the metadata to associate with the document.
        content:
          allOf:
          - $ref: '#/components/schemas/DocumentContent'
          description: Contains the content of the document.
      required:
      - content
      description: Contains information about a document to ingest into a knowledge
        base and metadata to associate with it.
    KnowledgeBaseDocumentDetail:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the knowledge base that the document was
            ingested into or deleted from.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the data source connected to the knowledge
            base that the document was ingested into or deleted from.
        status:
          allOf:
          - $ref: '#/components/schemas/DocumentStatus'
          description: "The ingestion status of the document. The following statuses\
            \ are possible:\n\n  * STARTED – You submitted the ingestion job containing\
            \ the document.\n\n  * PENDING – The document is waiting to be ingested.\n\
            \n  * IN_PROGRESS – The document is being ingested.\n\n  * INDEXED – The\
            \ document was successfully indexed.\n\n  * PARTIALLY_INDEXED – The document\
            \ was partially indexed.\n\n  * METADATA_PARTIALLY_INDEXED – You submitted\
            \ metadata for an existing document and it was partially indexed.\n\n\
            \  * METADATA_UPDATE_FAILED – You submitted a metadata update for an existing\
            \ document but it failed.\n\n  * FAILED – The document failed to be ingested.\n\
            \n  * NOT_FOUND – The document wasn't found.\n\n  * IGNORED – The document\
            \ was ignored during ingestion.\n\n  * DELETING – You submitted the delete\
            \ job containing the document.\n\n  * DELETE_IN_PROGRESS – The document\
            \ is being deleted."
        identifier:
          allOf:
          - $ref: '#/components/schemas/DocumentIdentifier'
          description: Contains information that identifies the document.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason for the status. Appears alongside the status `IGNORED`.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The date and time at which the document was last updated.
      required:
      - knowledgeBaseId
      - dataSourceId
      - status
      - identifier
      description: Contains the details for a document that was ingested or deleted.
    KnowledgeBaseDocumentDetails:
      type: array
      items:
        $ref: '#/components/schemas/KnowledgeBaseDocumentDetail'
    KnowledgeBaseDocuments:
      type: array
      items:
        $ref: '#/components/schemas/KnowledgeBaseDocument'
    KnowledgeBaseFlowNodeConfiguration:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseId'
          description: The unique identifier of the knowledge base to query.
        modelId:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseModelIdentifier'
          description: The unique identifier of the model or [inference profile](https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html)
            to use to generate a response from the query results. Omit this field
            if you want to return the retrieved results as an array.
        guardrailConfiguration:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfiguration'
          description: Contains configurations for a guardrail to apply during query
            and response generation for the knowledge base in this configuration.
      required:
      - knowledgeBaseId
      description: Contains configurations for a knowledge base node in a flow. This
        node takes a query as the input and returns, as the output, the retrieved
        responses directly (as an array) or a response generated based on the retrieved
        responses. For more information, see [Node types in Amazon Bedrock works](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html)
        in the Amazon Bedrock User Guide.
    KnowledgeBaseId:
      type: string
      pattern: ^[0-9a-zA-Z]+$
      maxLength: 10
    KnowledgeBaseModelIdentifier:
      type: string
      pattern: ^(arn:aws(-[^:]{1,12})?:(bedrock|sagemaker):[a-z0-9-]{1,20}:([0-9]{12})?:([a-z-]+/)?)?([a-zA-Z0-9.-]{1,63}){0,2}(([:][a-z0-9-]{1,63}){0,2})?(/[a-z0-9]{1,12})?$
      minLength: 1
      maxLength: 2048
    KnowledgeBaseRoleArn:
      type: string
      pattern: ^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+$
      maxLength: 2048
    KnowledgeBaseState:
      type: string
      enum:
      - ENABLED
      - DISABLED
    KnowledgeBaseStatus:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - DELETING
      - UPDATING
      - FAILED
      - DELETE_UNSUCCESSFUL
    KnowledgeBaseStorageType:
      type: string
      enum:
      - OPENSEARCH_SERVERLESS
      - PINECONE
      - REDIS_ENTERPRISE_CLOUD
      - RDS
      - MONGO_DB_ATLAS
      - NEPTUNE_ANALYTICS
      - OPENSEARCH_MANAGED_CLUSTER
    KnowledgeBaseSummaries:
      type: array
      items:
        $ref: '#/components/schemas/KnowledgeBaseSummary'
    KnowledgeBaseSummary:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the knowledge base.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the knowledge base.
        status:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseStatus'
          description: The status of the knowledge base.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time the knowledge base was last updated.
      required:
      - knowledgeBaseId
      - name
      - status
      - updatedAt
      description: Contains details about a knowledge base.
    KnowledgeBaseType:
      type: string
      enum:
      - VECTOR
      - KENDRA
      - SQL
    LambdaArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?$
      maxLength: 2048
    LambdaFunctionFlowNodeConfiguration:
      type: object
      properties:
        lambdaArn:
          allOf:
          - $ref: '#/components/schemas/LambdaArn'
          description: The Amazon Resource Name (ARN) of the Lambda function to invoke.
      required:
      - lambdaArn
      description: Contains configurations for a Lambda function node in the flow.
        You specify the Lambda function to invoke and the inputs into the function.
        The output is the response that is defined in the Lambda function. For more
        information, see [Node types in Amazon Bedrock works](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html)
        in the Amazon Bedrock User Guide.
    LexBotAliasArn:
      type: string
      pattern: ^arn:aws(|-us-gov):lex:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:bot-alias/[0-9a-zA-Z]+/[0-9a-zA-Z]+$
      maxLength: 78
    LexBotLocaleId:
      type: string
      minLength: 1
      maxLength: 10
    LexFlowNodeConfiguration:
      type: object
      properties:
        botAliasArn:
          allOf:
          - $ref: '#/components/schemas/LexBotAliasArn'
          description: The Amazon Resource Name (ARN) of the Amazon Lex bot alias
            to invoke.
        localeId:
          allOf:
          - $ref: '#/components/schemas/LexBotLocaleId'
          description: The Region to invoke the Amazon Lex bot in.
      required:
      - botAliasArn
      - localeId
      description: Contains configurations for a Lex node in the flow. You specify
        a Amazon Lex bot to invoke. This node takes an utterance as the input and
        returns as the output the intent identified by the Amazon Lex bot. For more
        information, see [Node types in Amazon Bedrock works](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html)
        in the Amazon Bedrock User Guide.
    ListAgentActionGroupsRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the agent.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
      required:
      - agentId
      - agentVersion
    ListAgentActionGroupsResponse:
      type: object
      properties:
        actionGroupSummaries:
          allOf:
          - $ref: '#/components/schemas/ActionGroupSummaries'
          description: A list of objects, each of which contains information about
            an action group.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - actionGroupSummaries
    ListAgentAliasesRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
      required:
      - agentId
    ListAgentAliasesResponse:
      type: object
      properties:
        agentAliasSummaries:
          allOf:
          - $ref: '#/components/schemas/AgentAliasSummaries'
          description: A list of objects, each of which contains information about
            an alias of the agent.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - agentAliasSummaries
    ListAgentCollaboratorsRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The agent's ID.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The agent's version.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of agent collaborators to return in one
            page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
      required:
      - agentId
      - agentVersion
    ListAgentCollaboratorsResponse:
      type: object
      properties:
        agentCollaboratorSummaries:
          allOf:
          - $ref: '#/components/schemas/AgentCollaboratorSummaries'
          description: A list of collaborator summaries.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
      required:
      - agentCollaboratorSummaries
    ListAgentKnowledgeBasesRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent for which to return information
            about knowledge bases associated with it.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the agent for which to return information about
            knowledge bases associated with it.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
      required:
      - agentId
      - agentVersion
    ListAgentKnowledgeBasesResponse:
      type: object
      properties:
        agentKnowledgeBaseSummaries:
          allOf:
          - $ref: '#/components/schemas/AgentKnowledgeBaseSummaries'
          description: A list of objects, each of which contains information about
            a knowledge base associated with the agent.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - agentKnowledgeBaseSummaries
    ListAgentVersionsRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
      required:
      - agentId
    ListAgentVersionsResponse:
      type: object
      properties:
        agentVersionSummaries:
          allOf:
          - $ref: '#/components/schemas/AgentVersionSummaries'
          description: A list of objects, each of which contains information about
            a version of the agent.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - agentVersionSummaries
    ListAgentsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
    ListAgentsResponse:
      type: object
      properties:
        agentSummaries:
          allOf:
          - $ref: '#/components/schemas/AgentSummaries'
          description: A list of objects, each of which contains information about
            an agent.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - agentSummaries
    ListDataSourcesRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base for which to return
            a list of information.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
      required:
      - knowledgeBaseId
    ListDataSourcesResponse:
      type: object
      properties:
        dataSourceSummaries:
          allOf:
          - $ref: '#/components/schemas/DataSourceSummaries'
          description: A list of objects, each of which contains information about
            a data source.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - dataSourceSummaries
    ListFlowAliasesRequest:
      type: object
      properties:
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow for which aliases are being
            returned.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
      required:
      - flowIdentifier
    ListFlowAliasesResponse:
      type: object
      properties:
        flowAliasSummaries:
          allOf:
          - $ref: '#/components/schemas/FlowAliasSummaries'
          description: A list, each member of which contains information about an
            alias.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - flowAliasSummaries
    ListFlowVersionsRequest:
      type: object
      properties:
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
      required:
      - flowIdentifier
    ListFlowVersionsResponse:
      type: object
      properties:
        flowVersionSummaries:
          allOf:
          - $ref: '#/components/schemas/FlowVersionSummaries'
          description: A list, each member of which contains information about a flow.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - flowVersionSummaries
    ListFlowsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
    ListFlowsResponse:
      type: object
      properties:
        flowSummaries:
          allOf:
          - $ref: '#/components/schemas/FlowSummaries'
          description: A list, each member of which contains information about a flow.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - flowSummaries
    ListIngestionJobsRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base for the list of
            data ingestion jobs.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source for the list of data
            ingestion jobs.
        filters:
          allOf:
          - $ref: '#/components/schemas/IngestionJobFilters'
          description: Contains information about the filters for filtering the data.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/IngestionJobSortBy'
          description: Contains details about how to sort the data.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
      required:
      - knowledgeBaseId
      - dataSourceId
    ListIngestionJobsResponse:
      type: object
      properties:
        ingestionJobSummaries:
          allOf:
          - $ref: '#/components/schemas/IngestionJobSummaries'
          description: A list of data ingestion jobs with information about each job.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - ingestionJobSummaries
    ListKnowledgeBaseDocumentsRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base that is connected
            to the data source.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source that contains the
            documents.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
      required:
      - knowledgeBaseId
      - dataSourceId
    ListKnowledgeBaseDocumentsResponse:
      type: object
      properties:
        documentDetails:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseDocumentDetails'
          description: A list of objects, each of which contains information about
            the documents that were retrieved.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - documentDetails
    ListKnowledgeBasesRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
    ListKnowledgeBasesResponse:
      type: object
      properties:
        knowledgeBaseSummaries:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseSummaries'
          description: A list of knowledge bases with information about each knowledge
            base.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - knowledgeBaseSummaries
    ListPromptsRequest:
      type: object
      properties:
        promptIdentifier:
          allOf:
          - $ref: '#/components/schemas/PromptIdentifier'
          description: The unique identifier of the prompt for whose versions you
            want to return information. Omit this field to list information about
            all prompts in an account.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in the response. If
            the total number of results is greater than this value, use the token
            returned in the response in the `nextToken` field when making another
            request to return the next batch of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, enter the token returned in the `nextToken`
            field in the response in this field to return the next batch of results.
    ListPromptsResponse:
      type: object
      properties:
        promptSummaries:
          allOf:
          - $ref: '#/components/schemas/PromptSummaries'
          description: A list, each member of which contains information about a prompt
            using Prompt management.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the total number of results is greater than the `maxResults`
            value provided in the request, use this token when making another request
            in the `nextToken` field to return the next batch of results.
      required:
      - promptSummaries
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TaggableResourcesArn'
          description: The Amazon Resource Name (ARN) of the resource for which to
            list tags.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: The key-value pairs for the tags associated with the resource.
    MalformedConditionExpressionFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node containing the malformed condition expression.
        condition:
          allOf:
          - $ref: '#/components/schemas/FlowConditionName'
          description: The name of the malformed condition.
        cause:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The error message describing why the condition expression is
            malformed.
      required:
      - node
      - condition
      - cause
      description: Details about a malformed condition expression in a node.
    MalformedNodeInputExpressionFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node containing the malformed input expression.
        input:
          allOf:
          - $ref: '#/components/schemas/FlowNodeInputName'
          description: The name of the input with the malformed expression.
        cause:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The error message describing why the input expression is malformed.
      required:
      - node
      - input
      - cause
      description: Details about a malformed input expression in a node.
    MaxRecentSessions:
      type: integer
      minimum: 1
    MaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    MaximumLength:
      type: integer
      minimum: 0
    MemoryConfiguration:
      type: object
      properties:
        enabledMemoryTypes:
          allOf:
          - $ref: '#/components/schemas/EnabledMemoryTypes'
          description: The type of memory that is stored.
        storageDays:
          allOf:
          - $ref: '#/components/schemas/StorageDays'
          description: The number of days the agent is configured to retain the conversational
            context.
        sessionSummaryConfiguration:
          allOf:
          - $ref: '#/components/schemas/SessionSummaryConfiguration'
          description: Contains the configuration for SESSION_SUMMARY memory type
            enabled for the agent.
      required:
      - enabledMemoryTypes
      description: Details of the memory configuration.
    MemoryType:
      type: string
      enum:
      - SESSION_SUMMARY
    Message:
      type: object
      properties:
        role:
          allOf:
          - $ref: '#/components/schemas/ConversationRole'
          description: The role that the message belongs to.
        content:
          allOf:
          - $ref: '#/components/schemas/ContentBlocks'
          description: The content in the message.
      required:
      - role
      - content
      description: A message input or response from a model. For more information,
        see [Create a prompt using Prompt management](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-create.html).
    Messages:
      type: array
      items:
        $ref: '#/components/schemas/Message'
    MetadataAttribute:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/Key'
          description: The key of the metadata attribute.
        value:
          allOf:
          - $ref: '#/components/schemas/MetadataAttributeValue'
          description: Contains the value of the metadata attribute.
      required:
      - key
      - value
      description: Contains information about a metadata attribute.
    MetadataAttributeValue:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/MetadataValueType'
          description: The type of the metadata attribute.
        numberValue:
          allOf:
          - $ref: '#/components/schemas/NumberValue'
          description: The value of the numeric metadata attribute.
        booleanValue:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The value of the Boolean metadata attribute.
        stringValue:
          allOf:
          - $ref: '#/components/schemas/StringValue'
          description: The value of the string metadata attribute.
        stringListValue:
          allOf:
          - $ref: '#/components/schemas/StringListValue'
          description: An array of strings that define the value of the metadata attribute.
      required:
      - type
      description: Contains the value of the metadata attribute. Choose a `type` and
        include the field that corresponds to it.
    MetadataAttributes:
      type: array
      items:
        $ref: '#/components/schemas/MetadataAttribute'
    MetadataSourceType:
      type: string
      enum:
      - IN_LINE_ATTRIBUTE
      - S3_LOCATION
    MetadataValueType:
      type: string
      enum:
      - BOOLEAN
      - NUMBER
      - STRING
      - STRING_LIST
    Microsoft365TenantId:
      type: string
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      minLength: 36
      maxLength: 36
    MismatchedNodeInputTypeFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node containing the input with the mismatched
            data type.
        input:
          allOf:
          - $ref: '#/components/schemas/FlowNodeInputName'
          description: The name of the input with the mismatched data type.
        expectedType:
          allOf:
          - $ref: '#/components/schemas/FlowNodeIODataType'
          description: The expected data type for the node input.
      required:
      - node
      - input
      - expectedType
      description: Details about mismatched input data types in a node.
    MismatchedNodeOutputTypeFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node containing the output with the mismatched
            data type.
        output:
          allOf:
          - $ref: '#/components/schemas/FlowNodeOutputName'
          description: The name of the output with the mismatched data type.
        expectedType:
          allOf:
          - $ref: '#/components/schemas/FlowNodeIODataType'
          description: The expected data type for the node output.
      required:
      - node
      - output
      - expectedType
      description: Details about mismatched output data types in a node.
    MissingConnectionConfigurationFlowValidationDetails:
      type: object
      properties:
        connection:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionName'
          description: The name of the connection missing configuration.
      required:
      - connection
      description: Details about a connection missing required configuration.
    MissingDefaultConditionFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node missing the default condition.
      required:
      - node
      description: Details about a missing default condition in a conditional node.
    MissingEndingNodesFlowValidationDetails:
      type: object
      properties: {}
      description: Details about missing ending nodes (such as FlowOutputNode) in
        the flow.
    MissingNodeConfigurationFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node missing configuration.
      required:
      - node
      description: Details about a node missing required configuration.
    MissingNodeInputFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node missing the required input.
        input:
          allOf:
          - $ref: '#/components/schemas/FlowNodeInputName'
          description: The name of the missing input.
      required:
      - node
      - input
      description: Details about a missing required input in a node.
    MissingNodeOutputFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node missing the required output.
        output:
          allOf:
          - $ref: '#/components/schemas/FlowNodeOutputName'
          description: The name of the missing output.
      required:
      - node
      - output
      description: Details about a missing required output in a node.
    MissingStartingNodesFlowValidationDetails:
      type: object
      properties: {}
      description: Details about missing starting nodes (such as FlowInputNode) in
        the flow.
    ModelIdentifier:
      type: string
      pattern: ^(arn:aws(-[^:]{1,12})?:(bedrock|sagemaker):[a-z0-9-]{1,20}:([0-9]{12})?:([a-z-]+/)?)?([a-zA-Z0-9.-]{1,63}){0,2}(([:][a-z0-9-]{1,63}){0,2})?(/[a-z0-9]{1,12})?$
      minLength: 1
      maxLength: 2048
    MongoDbAtlasCollectionName:
      type: string
      pattern: ^.*$
      maxLength: 63
    MongoDbAtlasConfiguration:
      type: object
      properties:
        endpoint:
          allOf:
          - $ref: '#/components/schemas/MongoDbAtlasEndpoint'
          description: The endpoint URL of your MongoDB Atlas cluster for your knowledge
            base.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/MongoDbAtlasDatabaseName'
          description: The database name in your MongoDB Atlas cluster for your knowledge
            base.
        collectionName:
          allOf:
          - $ref: '#/components/schemas/MongoDbAtlasCollectionName'
          description: The collection name of the knowledge base in MongoDB Atlas.
        vectorIndexName:
          allOf:
          - $ref: '#/components/schemas/MongoDbAtlasIndexName'
          description: The name of the MongoDB Atlas vector search index.
        credentialsSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretArn'
          description: The Amazon Resource Name (ARN) of the secret that you created
            in Secrets Manager that contains user credentials for your MongoDB Atlas
            cluster.
        fieldMapping:
          allOf:
          - $ref: '#/components/schemas/MongoDbAtlasFieldMapping'
          description: Contains the names of the fields to which to map information
            about the vector store.
        endpointServiceName:
          allOf:
          - $ref: '#/components/schemas/MongoDbAtlasEndpointServiceName'
          description: The name of the VPC endpoint service in your account that is
            connected to your MongoDB Atlas cluster.
        textIndexName:
          allOf:
          - $ref: '#/components/schemas/MongoDbAtlasIndexName'
          description: The name of the text search index in the MongoDB collection.
            This is required for using the hybrid search feature.
      required:
      - endpoint
      - databaseName
      - collectionName
      - vectorIndexName
      - credentialsSecretArn
      - fieldMapping
      description: Contains details about the storage configuration of the knowledge
        base in MongoDB Atlas.
    MongoDbAtlasDatabaseName:
      type: string
      pattern: ^.*$
      maxLength: 63
    MongoDbAtlasEndpoint:
      type: string
      pattern: ^.*$
      maxLength: 2048
    MongoDbAtlasEndpointServiceName:
      type: string
      pattern: ^(?:arn:aws(?:-us-gov|-cn|-iso|-iso-[a-z])*:.+:.*:\d+:.+/.+$|[a-zA-Z0-9*]+[a-zA-Z0-9._-]*)$
      minLength: 1
      maxLength: 255
    MongoDbAtlasFieldMapping:
      type: object
      properties:
        vectorField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores the vector
            embeddings for your data sources.
        textField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores the raw
            text from your data. The text is split according to the chunking strategy
            you choose.
        metadataField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores metadata
            about the vector store.
      required:
      - vectorField
      - textField
      - metadataField
      description: Contains the names of the fields to which to map information about
        the vector store.
    MongoDbAtlasIndexName:
      type: string
      pattern: ^.*$
      maxLength: 2048
    MultipleNodeInputConnectionsFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node containing the input with multiple connections.
        input:
          allOf:
          - $ref: '#/components/schemas/FlowNodeInputName'
          description: The name of the input with multiple connections to it.
      required:
      - node
      - input
      description: Details about multiple connections to a single node input.
    Name:
      type: string
      pattern: ^([0-9a-zA-Z][_-]?){1,100}$
    NaturalLanguageString:
      type: string
      minLength: 1
      maxLength: 1000
    NeptuneAnalyticsConfiguration:
      type: object
      properties:
        graphArn:
          allOf:
          - $ref: '#/components/schemas/GraphArn'
          description: The Amazon Resource Name (ARN) of the Neptune Analytics vector
            store.
        fieldMapping:
          allOf:
          - $ref: '#/components/schemas/NeptuneAnalyticsFieldMapping'
          description: Contains the names of the fields to which to map information
            about the vector store.
      required:
      - graphArn
      - fieldMapping
      description: Contains details about the storage configuration of the knowledge
        base in Amazon Neptune Analytics. For more information, see [Create a vector
        index in Amazon Neptune Analytics](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-neptune.html).
    NeptuneAnalyticsFieldMapping:
      type: object
      properties:
        textField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores the raw
            text from your data. The text is split according to the chunking strategy
            you choose.
        metadataField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores metadata
            about the vector store.
      required:
      - textField
      - metadataField
      description: Contains the names of the fields to which to map information about
        the vector store.
    NextToken:
      type: string
      pattern: ^\S*$
      minLength: 1
      maxLength: 2048
    NonBlankString:
      type: string
      pattern: ^[\s\S]+$
    NonEmptyString:
      type: string
      minLength: 1
    NumberValue:
      type: number
      format: double
    NumericalVersion:
      type: string
      pattern: ^[0-9]{1,5}$
    OpenSearchManagedClusterConfiguration:
      type: object
      properties:
        domainEndpoint:
          allOf:
          - $ref: '#/components/schemas/OpenSearchManagedClusterDomainEndpoint'
          description: The endpoint URL the OpenSearch domain.
        domainArn:
          allOf:
          - $ref: '#/components/schemas/OpenSearchManagedClusterDomainArn'
          description: The Amazon Resource Name (ARN) of the OpenSearch domain.
        vectorIndexName:
          allOf:
          - $ref: '#/components/schemas/OpenSearchManagedClusterIndexName'
          description: The name of the vector store.
        fieldMapping:
          allOf:
          - $ref: '#/components/schemas/OpenSearchManagedClusterFieldMapping'
          description: Contains the names of the fields to which to map information
            about the vector store.
      required:
      - domainEndpoint
      - domainArn
      - vectorIndexName
      - fieldMapping
      description: Contains details about the Managed Cluster configuration of the
        knowledge base in Amazon OpenSearch Service. For more information, see [Create
        a vector index in OpenSearch Managed Cluster](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-osm.html).
    OpenSearchManagedClusterDomainArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov|-iso):es:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:domain/[a-z][a-z0-9-]{3,28}$
      maxLength: 2048
    OpenSearchManagedClusterDomainEndpoint:
      type: string
      pattern: ^https://.*$
      maxLength: 2048
    OpenSearchManagedClusterFieldMapping:
      type: object
      properties:
        vectorField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores the vector
            embeddings for your data sources.
        textField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores the raw
            text from your data. The text is split according to the chunking strategy
            you choose.
        metadataField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores metadata
            about the vector store.
      required:
      - vectorField
      - textField
      - metadataField
      description: Contains the names of the fields to which to map information about
        the vector store.
    OpenSearchManagedClusterIndexName:
      type: string
      pattern: ^(?![\-_+.])[a-z0-9][a-z0-9\-_\.]*$
      minLength: 1
      maxLength: 2048
    OpenSearchServerlessCollectionArn:
      type: string
      pattern: ^arn:aws:aoss:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:collection/[a-z0-9-]{3,32}$
      maxLength: 2048
    OpenSearchServerlessConfiguration:
      type: object
      properties:
        collectionArn:
          allOf:
          - $ref: '#/components/schemas/OpenSearchServerlessCollectionArn'
          description: The Amazon Resource Name (ARN) of the OpenSearch Service vector
            store.
        vectorIndexName:
          allOf:
          - $ref: '#/components/schemas/OpenSearchServerlessIndexName'
          description: The name of the vector store.
        fieldMapping:
          allOf:
          - $ref: '#/components/schemas/OpenSearchServerlessFieldMapping'
          description: Contains the names of the fields to which to map information
            about the vector store.
      required:
      - collectionArn
      - vectorIndexName
      - fieldMapping
      description: Contains details about the storage configuration of the knowledge
        base in Amazon OpenSearch Service. For more information, see [Create a vector
        index in Amazon OpenSearch Service](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-oss.html).
    OpenSearchServerlessFieldMapping:
      type: object
      properties:
        vectorField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores the vector
            embeddings for your data sources.
        textField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores the raw
            text from your data. The text is split according to the chunking strategy
            you choose.
        metadataField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores metadata
            about the vector store.
      required:
      - vectorField
      - textField
      - metadataField
      description: Contains the names of the fields to which to map information about
        the vector store.
    OpenSearchServerlessIndexName:
      type: string
      pattern: ^.*$
      maxLength: 2048
    OrchestrationExecutor:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/LambdaArn'
        description: |-
          The Amazon Resource Name (ARN) of the Lambda function containing the business logic that is carried out upon invoking the action.
      description: |-
        Contains details about the Lambda function containing the orchestration logic carried out upon invoking the custom orchestration.
    OrchestrationType:
      type: string
      enum:
      - DEFAULT
      - CUSTOM_ORCHESTRATION
    OutputFlowNodeConfiguration:
      type: object
      properties: {}
      description: Contains configurations for an output flow node in the flow. You
        specify the data type expected for the input into the node in the `type` field
        and how to return the final output in the `expression` field.
    ParameterDescription:
      type: string
      minLength: 1
      maxLength: 500
    ParameterDetail:
      type: object
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/ParameterDescription'
          description: A description of the parameter. Helps the foundation model
            determine how to elicit the parameters from the user.
        type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The data type of the parameter.
        required:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Whether the parameter is required for the agent to complete
            the function for action group invocation.
      required:
      - type
      description: "Contains details about a parameter in a function for an action\
        \ group.\n\nThis data type is used in the following API operations:\n\n  *\
        \ [CreateAgentActionGroup request](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_CreateAgentActionGroup.html#API_agent_CreateAgentActionGroup_RequestSyntax)\n\
        \n  * [CreateAgentActionGroup response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_CreateAgentActionGroup.html#API_agent_CreateAgentActionGroup_ResponseSyntax)\n\
        \n  * [UpdateAgentActionGroup request](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_UpdateAgentActionGroup.html#API_agent_UpdateAgentActionGroup_RequestSyntax)\n\
        \n  * [UpdateAgentActionGroup response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_UpdateAgentActionGroup.html#API_agent_UpdateAgentActionGroup_ResponseSyntax)\n\
        \n  * [GetAgentActionGroup response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_GetAgentActionGroup.html#API_agent_GetAgentActionGroup_ResponseSyntax)"
    ParameterMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ParameterDetail'
    ParsingConfiguration:
      type: object
      properties:
        parsingStrategy:
          allOf:
          - $ref: '#/components/schemas/ParsingStrategy'
          description: The parsing strategy for the data source.
        bedrockFoundationModelConfiguration:
          allOf:
          - $ref: '#/components/schemas/BedrockFoundationModelConfiguration'
          description: If you specify `BEDROCK_FOUNDATION_MODEL` as the parsing strategy
            for ingesting your data source, use this object to modify configurations
            for using a foundation model to parse documents.
        bedrockDataAutomationConfiguration:
          allOf:
          - $ref: '#/components/schemas/BedrockDataAutomationConfiguration'
          description: If you specify `BEDROCK_DATA_AUTOMATION` as the parsing strategy
            for ingesting your data source, use this object to modify configurations
            for using the Amazon Bedrock Data Automation parser.
      required:
      - parsingStrategy
      description: 'Settings for parsing document contents. If you exclude this field,
        the default parser converts the contents of each document into text before
        splitting it into chunks. Specify the parsing strategy to use in the `parsingStrategy`
        field and include the relevant configuration, or omit it to use the Amazon
        Bedrock default parser. For more information, see [Parsing options for your
        data source](https://docs.aws.amazon.com/bedrock/latest/userguide/kb-advanced-parsing.html).


        If you specify `BEDROCK_DATA_AUTOMATION` or `BEDROCK_FOUNDATION_MODEL` and
        it fails to parse a file, the Amazon Bedrock default parser will be used instead.'
    ParsingModality:
      type: string
      enum:
      - MULTIMODAL
    ParsingPrompt:
      type: object
      properties:
        parsingPromptText:
          allOf:
          - $ref: '#/components/schemas/ParsingPromptText'
          description: Instructions for interpreting the contents of a document.
      required:
      - parsingPromptText
      description: Instructions for interpreting the contents of a document.
    ParsingPromptText:
      type: string
      minLength: 1
      maxLength: 10000
    ParsingStrategy:
      type: string
      enum:
      - BEDROCK_FOUNDATION_MODEL
      - BEDROCK_DATA_AUTOMATION
    PatternObjectFilter:
      type: object
      properties:
        objectType:
          allOf:
          - $ref: '#/components/schemas/FilteredObjectType'
          description: The supported object type or content type of the data source.
        inclusionFilters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: A list of one or more inclusion regular expression patterns
            to include certain object types that adhere to the pattern. If you specify
            an inclusion and exclusion filter/pattern and both match a document, the
            exclusion filter takes precedence and the document isn’t crawled.
        exclusionFilters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: A list of one or more exclusion regular expression patterns
            to exclude certain object types that adhere to the pattern. If you specify
            an inclusion and exclusion filter/pattern and both match a document, the
            exclusion filter takes precedence and the document isn’t crawled.
      required:
      - objectType
      description: The specific filters applied to your data source content. You can
        filter out or include certain content.
    PatternObjectFilterConfiguration:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/PatternObjectFilterList'
          description: The configuration of specific filters applied to your data
            source content. You can filter out or include certain content.
      required:
      - filters
      description: The configuration of filtering certain objects or content types
        of the data source.
    PatternObjectFilterList:
      type: array
      items:
        $ref: '#/components/schemas/PatternObjectFilter'
      x-sensitive: true
    Payload:
      type: string
    PineconeConfiguration:
      type: object
      properties:
        connectionString:
          allOf:
          - $ref: '#/components/schemas/PineconeConnectionString'
          description: The endpoint URL for your index management page.
        credentialsSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretArn'
          description: The Amazon Resource Name (ARN) of the secret that you created
            in Secrets Manager that is linked to your Pinecone API key.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PineconeNamespace'
          description: The namespace to be used to write new data to your database.
        fieldMapping:
          allOf:
          - $ref: '#/components/schemas/PineconeFieldMapping'
          description: Contains the names of the fields to which to map information
            about the vector store.
      required:
      - connectionString
      - credentialsSecretArn
      - fieldMapping
      description: Contains details about the storage configuration of the knowledge
        base in Pinecone. For more information, see [Create a vector index in Pinecone](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-pinecone.html).
    PineconeConnectionString:
      type: string
      pattern: ^.*$
      maxLength: 2048
    PineconeFieldMapping:
      type: object
      properties:
        textField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores the raw
            text from your data. The text is split according to the chunking strategy
            you choose.
        metadataField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores metadata
            about the vector store.
      required:
      - textField
      - metadataField
      description: Contains the names of the fields to which to map information about
        the vector store.
    PineconeNamespace:
      type: string
      pattern: ^.*$
      maxLength: 2048
    PrepareAgentRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent for which to create a `DRAFT`
            version.
      required:
      - agentId
    PrepareAgentResponse:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent for which the `DRAFT` version
            was created.
        agentStatus:
          allOf:
          - $ref: '#/components/schemas/AgentStatus'
          description: The status of the `DRAFT` version and whether it is ready for
            use.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the agent.
        preparedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the `DRAFT` version of the agent was last
            prepared.
      required:
      - agentId
      - agentStatus
      - agentVersion
      - preparedAt
    PrepareFlowRequest:
      type: object
      properties:
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow.
      required:
      - flowIdentifier
    PrepareFlowResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
        status:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: The status of the flow. When you submit this request, the status
            will be `NotPrepared`. If preparation succeeds, the status becomes `Prepared`.
            If it fails, the status becomes `FAILED`.
      required:
      - id
      - status
    PromptAgentResource:
      type: object
      properties:
        agentIdentifier:
          allOf:
          - $ref: '#/components/schemas/AgentAliasArn'
          description: The ARN of the agent with which to use the prompt.
      required:
      - agentIdentifier
      description: Contains specifications for an Amazon Bedrock agent with which
        to use the prompt. For more information, see [Create a prompt using Prompt
        management](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-create.html)
        and [Automate tasks in your application using conversational agents](https://docs.aws.amazon.com/bedrock/latest/userguide/agents.html).
    PromptArn:
      type: string
      pattern: ^(arn:aws:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:prompt/[0-9a-zA-Z]{10}(?::[0-9]{1,5})?)$
    PromptConfiguration:
      type: object
      properties:
        promptType:
          allOf:
          - $ref: '#/components/schemas/PromptType'
          description: The step in the agent sequence that this prompt configuration
            applies to.
        promptCreationMode:
          allOf:
          - $ref: '#/components/schemas/CreationMode'
          description: Specifies whether to override the default prompt template for
            this `promptType`. Set this value to `OVERRIDDEN` to use the prompt that
            you provide in the `basePromptTemplate`. If you leave it as `DEFAULT`,
            the agent uses a default prompt template.
        promptState:
          allOf:
          - $ref: '#/components/schemas/PromptState'
          description: "Specifies whether to allow the agent to carry out the step\
            \ specified in the `promptType`. If you set this value to `DISABLED`,\
            \ the agent skips that step. The default state for each `promptType` is\
            \ as follows.\n\n  * `PRE_PROCESSING` – `ENABLED`\n\n  * `ORCHESTRATION`\
            \ – `ENABLED`\n\n  * `KNOWLEDGE_BASE_RESPONSE_GENERATION` – `ENABLED`\n\
            \n  * `POST_PROCESSING` – `DISABLED`"
        basePromptTemplate:
          allOf:
          - $ref: '#/components/schemas/BasePromptTemplate'
          description: Defines the prompt template with which to replace the default
            prompt template. You can use placeholder variables in the base prompt
            template to customize the prompt. For more information, see [Prompt template
            placeholder variables](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-placeholders.html).
            For more information, see [Configure the prompt templates](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts-configure.html).
        inferenceConfiguration:
          allOf:
          - $ref: '#/components/schemas/InferenceConfiguration'
          description: Contains inference parameters to use when the agent invokes
            a foundation model in the part of the agent sequence defined by the `promptType`.
            For more information, see [Inference parameters for foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html).
        parserMode:
          allOf:
          - $ref: '#/components/schemas/CreationMode'
          description: Specifies whether to override the default parser Lambda function
            when parsing the raw foundation model output in the part of the agent
            sequence defined by the `promptType`. If you set the field as `OVERRIDDEN`,
            the `overrideLambda` field in the [PromptOverrideConfiguration](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptOverrideConfiguration.html)
            must be specified with the ARN of a Lambda function.
        foundationModel:
          allOf:
          - $ref: '#/components/schemas/ModelIdentifier'
          description: The agent's foundation model.
        additionalModelRequestFields:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: 'If the Converse or ConverseStream operations support the model,
            `additionalModelRequestFields` contains additional inference parameters,
            beyond the base set of inference parameters in the `inferenceConfiguration`
            field.


            For more information, see _Inference request parameters and response fields
            for foundation models_ in the Amazon Bedrock user guide.'
      description: Contains configurations to override a prompt template in one part
        of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html).
    PromptConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/PromptConfiguration'
    PromptDescription:
      type: string
      minLength: 1
      maxLength: 200
    PromptFlowNodeConfiguration:
      type: object
      properties:
        sourceConfiguration:
          allOf:
          - $ref: '#/components/schemas/PromptFlowNodeSourceConfiguration'
          description: Specifies whether the prompt is from Prompt management or defined
            inline.
        guardrailConfiguration:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfiguration'
          description: Contains configurations for a guardrail to apply to the prompt
            in this node and the response generated from it.
      required:
      - sourceConfiguration
      description: Contains configurations for a prompt node in the flow. You can
        use a prompt from Prompt management or you can define one in this node. If
        the prompt contains variables, the inputs into this node will fill in the
        variables. The output from this node is the response generated by the model.
        For more information, see [Node types in Amazon Bedrock works](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-nodes.html)
        in the Amazon Bedrock User Guide.
    PromptFlowNodeInlineConfiguration:
      type: object
      properties:
        templateType:
          allOf:
          - $ref: '#/components/schemas/PromptTemplateType'
          description: The type of prompt template.
        templateConfiguration:
          allOf:
          - $ref: '#/components/schemas/PromptTemplateConfiguration'
          description: Contains a prompt and variables in the prompt that can be replaced
            with values at runtime.
        modelId:
          allOf:
          - $ref: '#/components/schemas/PromptModelIdentifier'
          description: The unique identifier of the model or [inference profile](https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html)
            to run inference with.
        inferenceConfiguration:
          allOf:
          - $ref: '#/components/schemas/PromptInferenceConfiguration'
          description: Contains inference configurations for the prompt.
        additionalModelRequestFields:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: Additional fields to be included in the model request for the
            Prompt node.
      required:
      - templateType
      - templateConfiguration
      - modelId
      description: Contains configurations for a prompt defined inline in the node.
    PromptFlowNodeResourceConfiguration:
      type: object
      properties:
        promptArn:
          allOf:
          - $ref: '#/components/schemas/PromptArn'
          description: The Amazon Resource Name (ARN) of the prompt from Prompt management.
      required:
      - promptArn
      description: Contains configurations for a prompt from Prompt management to
        use in a node.
    PromptFlowNodeSourceConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/PromptFlowNodeResourceConfiguration'
        description: |-
          Contains configurations for a prompt from Prompt management.
      - allOf:
        - $ref: '#/components/schemas/PromptFlowNodeInlineConfiguration'
        description: |-
          Contains configurations for a prompt that is defined inline
      description: |-
        Contains configurations for a prompt and whether it is from Prompt management or defined inline.
    PromptGenAiResource:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/PromptAgentResource'
        description: |-
          Specifies an Amazon Bedrock agent with which to use the prompt.
      description: |-
        Contains specifications for a generative AI resource with which to use the prompt. For more information, see [Create a prompt using Prompt management](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-create.html).
      x-sensitive: true
    PromptId:
      type: string
      pattern: ^[0-9a-zA-Z]{10}$
    PromptIdentifier:
      type: string
      pattern: ^([0-9a-zA-Z]{10})|(arn:aws:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:prompt/[0-9a-zA-Z]{10})(?::[0-9]{1,5})?$
    PromptInferenceConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/PromptModelInferenceConfiguration'
        description: |-
          Contains inference configurations for a text prompt.
      description: |-
        Contains inference configurations for the prompt.
    PromptInputVariable:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/PromptInputVariableName'
          description: The name of the variable.
      description: Contains information about a variable in the prompt.
    PromptInputVariableName:
      type: string
      pattern: ^([0-9a-zA-Z][_-]?){1,100}$
    PromptInputVariablesList:
      type: array
      items:
        $ref: '#/components/schemas/PromptInputVariable'
      x-sensitive: true
    PromptMetadataEntry:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/PromptMetadataKey'
          description: The key of a metadata tag for a prompt variant.
        value:
          allOf:
          - $ref: '#/components/schemas/PromptMetadataValue'
          description: The value of a metadata tag for a prompt variant.
      required:
      - key
      - value
      description: Contains a key-value pair that defines a metadata tag and value
        to attach to a prompt variant. For more information, see [Create a prompt
        using Prompt management](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-create.html).
    PromptMetadataKey:
      type: string
      pattern: ^[a-zA-Z0-9\s._:/=+@-]*$
      minLength: 1
      maxLength: 128
    PromptMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/PromptMetadataEntry'
      x-sensitive: true
    PromptMetadataValue:
      type: string
      pattern: ^[a-zA-Z0-9\s._:/=+@-]*$
      minLength: 0
      maxLength: 1024
    PromptModelIdentifier:
      type: string
      pattern: ^(arn:aws(-[^:]{1,12})?:(bedrock|sagemaker):[a-z0-9-]{1,20}:([0-9]{12})?:([a-z-]+/)?)?([a-zA-Z0-9.-]{1,63}){0,2}(([:][a-z0-9-]{1,63}){0,2})?(/[a-z0-9]{1,12})?$
      minLength: 1
      maxLength: 2048
    PromptModelInferenceConfiguration:
      type: object
      properties:
        temperature:
          allOf:
          - $ref: '#/components/schemas/Temperature'
          description: Controls the randomness of the response. Choose a lower value
            for more predictable outputs and a higher value for more surprising outputs.
        topP:
          allOf:
          - $ref: '#/components/schemas/TopP'
          description: The percentage of most-likely candidates that the model considers
            for the next token.
        maxTokens:
          allOf:
          - $ref: '#/components/schemas/MaximumLength'
          description: The maximum number of tokens to return in the response.
        stopSequences:
          allOf:
          - $ref: '#/components/schemas/StopSequences'
          description: A list of strings that define sequences after which the model
            will stop generating.
      description: Contains inference configurations related to model inference for
        a prompt. For more information, see [Inference parameters](https://docs.aws.amazon.com/bedrock/latest/userguide/inference-parameters.html).
    PromptName:
      type: string
      pattern: ^([0-9a-zA-Z][_-]?){1,100}$
    PromptOverrideConfiguration:
      type: object
      properties:
        promptConfigurations:
          allOf:
          - $ref: '#/components/schemas/PromptConfigurations'
          description: Contains configurations to override a prompt template in one
            part of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html).
        overrideLambda:
          allOf:
          - $ref: '#/components/schemas/LambdaArn'
          description: The ARN of the Lambda function to use when parsing the raw
            foundation model output in parts of the agent sequence. If you specify
            this field, at least one of the `promptConfigurations` must contain a
            `parserMode` value that is set to `OVERRIDDEN`. For more information,
            see [Parser Lambda function in Amazon Bedrock Agents](https://docs.aws.amazon.com/bedrock/latest/userguide/lambda-parser.html).
      required:
      - promptConfigurations
      description: Contains configurations to override prompts in different parts
        of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html).
    PromptState:
      type: string
      enum:
      - ENABLED
      - DISABLED
    PromptSummaries:
      type: array
      items:
        $ref: '#/components/schemas/PromptSummary'
    PromptSummary:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/PromptName'
          description: The name of the prompt.
        description:
          allOf:
          - $ref: '#/components/schemas/PromptDescription'
          description: The description of the prompt.
        id:
          allOf:
          - $ref: '#/components/schemas/PromptId'
          description: The unique identifier of the prompt.
        arn:
          allOf:
          - $ref: '#/components/schemas/PromptArn'
          description: The Amazon Resource Name (ARN) of the prompt or the prompt
            version (if you specified a version in the request).
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the prompt that this summary applies to.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the prompt was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the prompt was last updated.
      required:
      - name
      - id
      - arn
      - version
      - createdAt
      - updatedAt
      description: "Contains information about a prompt in your Prompt management\
        \ tool.\n\nThis data type is used in the following API operations:\n\n  *\
        \ [ListPrompts response](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_ListPrompts.html#API_agent_ListPrompts_ResponseSyntax)"
    PromptTemplateConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/TextPromptTemplateConfiguration'
        description: |-
          Contains configurations for the text in a message for a prompt.
      - allOf:
        - $ref: '#/components/schemas/ChatPromptTemplateConfiguration'
        description: |-
          Contains configurations to use the prompt in a conversational format.
      description: |-
        Contains the message for a prompt. For more information, see [Construct and store reusable prompts with Prompt management in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management.html).
    PromptTemplateType:
      type: string
      enum:
      - TEXT
      - CHAT
    PromptType:
      type: string
      enum:
      - PRE_PROCESSING
      - ORCHESTRATION
      - POST_PROCESSING
      - KNOWLEDGE_BASE_RESPONSE_GENERATION
      - MEMORY_SUMMARIZATION
    PromptVariant:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/PromptVariantName'
          description: The name of the prompt variant.
        templateType:
          allOf:
          - $ref: '#/components/schemas/PromptTemplateType'
          description: The type of prompt template to use.
        templateConfiguration:
          allOf:
          - $ref: '#/components/schemas/PromptTemplateConfiguration'
          description: Contains configurations for the prompt template.
        modelId:
          allOf:
          - $ref: '#/components/schemas/PromptModelIdentifier'
          description: The unique identifier of the model or [inference profile](https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html)
            with which to run inference on the prompt.
        inferenceConfiguration:
          allOf:
          - $ref: '#/components/schemas/PromptInferenceConfiguration'
          description: Contains inference configurations for the prompt variant.
        metadata:
          allOf:
          - $ref: '#/components/schemas/PromptMetadataList'
          description: An array of objects, each containing a key-value pair that
            defines a metadata tag and value to attach to a prompt variant.
        additionalModelRequestFields:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: Contains model-specific inference configurations that aren't
            in the `inferenceConfiguration` field. To see model-specific inference
            parameters, see [Inference request parameters and response fields for
            foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html).
        genAiResource:
          allOf:
          - $ref: '#/components/schemas/PromptGenAiResource'
          description: Specifies a generative AI resource with which to use the prompt.
      required:
      - name
      - templateType
      - templateConfiguration
      description: Contains details about a variant of the prompt.
    PromptVariantList:
      type: array
      items:
        $ref: '#/components/schemas/PromptVariant'
      x-sensitive: true
    PromptVariantName:
      type: string
      pattern: ^([0-9a-zA-Z][_-]?){1,100}$
    ProvisionedModelIdentifier:
      type: string
      pattern: ^((([0-9a-zA-Z][_-]?){1,63})|(arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:provisioned-model/[a-z0-9]{12}))$
      minLength: 1
      maxLength: 2048
    QueryEngineType:
      type: string
      enum:
      - REDSHIFT
    QueryExecutionTimeoutSeconds:
      type: integer
      minimum: 1
      maximum: 200
    QueryGenerationColumn:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/QueryGenerationColumnName'
          description: The name of the column for which the other fields in this object
            apply.
        description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: A description of the column that helps the query engine understand
            the contents of the column.
        inclusion:
          allOf:
          - $ref: '#/components/schemas/IncludeExclude'
          description: Specifies whether to include or exclude the column during query
            generation. If you specify `EXCLUDE`, the column will be ignored. If you
            specify `INCLUDE`, all other columns in the table will be ignored.
      description: Contains information about a column in the current table for the
        query engine to consider.
    QueryGenerationColumnName:
      type: string
      minLength: 1
      maxLength: 127
    QueryGenerationColumns:
      type: array
      items:
        $ref: '#/components/schemas/QueryGenerationColumn'
    QueryGenerationConfiguration:
      type: object
      properties:
        executionTimeoutSeconds:
          allOf:
          - $ref: '#/components/schemas/QueryExecutionTimeoutSeconds'
          description: The time after which query generation will time out.
        generationContext:
          allOf:
          - $ref: '#/components/schemas/QueryGenerationContext'
          description: Specifies configurations for context to use during query generation.
      description: Contains configurations for query generation. For more information,
        see [Build a knowledge base by connecting to a structured data source](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html)
        in the Amazon Bedrock User Guide..
    QueryGenerationContext:
      type: object
      properties:
        tables:
          allOf:
          - $ref: '#/components/schemas/QueryGenerationTables'
          description: An array of objects, each of which defines information about
            a table in the database.
        curatedQueries:
          allOf:
          - $ref: '#/components/schemas/CuratedQueries'
          description: An array of objects, each of which defines information about
            example queries to help the query engine generate appropriate SQL queries.
      description: '>Contains configurations for context to use during query generation.'
    QueryGenerationTable:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/QueryGenerationTableName'
          description: The name of the table for which the other fields in this object
            apply.
        description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: A description of the table that helps the query engine understand
            the contents of the table.
        inclusion:
          allOf:
          - $ref: '#/components/schemas/IncludeExclude'
          description: Specifies whether to include or exclude the table during query
            generation. If you specify `EXCLUDE`, the table will be ignored. If you
            specify `INCLUDE`, all other tables will be ignored.
        columns:
          allOf:
          - $ref: '#/components/schemas/QueryGenerationColumns'
          description: An array of objects, each of which defines information about
            a column in the table.
      required:
      - name
      description: Contains information about a table for the query engine to consider.
    QueryGenerationTableName:
      type: string
      pattern: ^.*\..*\..*$
    QueryGenerationTables:
      type: array
      items:
        $ref: '#/components/schemas/QueryGenerationTable'
    RdsArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov):rds:[a-zA-Z0-9-]*:[0-9]{12}:cluster:[a-zA-Z0-9-]{1,63}$
    RdsConfiguration:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/RdsArn'
          description: The Amazon Resource Name (ARN) of the vector store.
        credentialsSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretArn'
          description: The Amazon Resource Name (ARN) of the secret that you created
            in Secrets Manager that is linked to your Amazon RDS database.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/RdsDatabaseName'
          description: The name of your Amazon RDS database.
        tableName:
          allOf:
          - $ref: '#/components/schemas/RdsTableName'
          description: The name of the table in the database.
        fieldMapping:
          allOf:
          - $ref: '#/components/schemas/RdsFieldMapping'
          description: Contains the names of the fields to which to map information
            about the vector store.
      required:
      - resourceArn
      - credentialsSecretArn
      - databaseName
      - tableName
      - fieldMapping
      description: Contains details about the storage configuration of the knowledge
        base in Amazon RDS. For more information, see [Create a vector index in Amazon
        RDS](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-rds.html).
    RdsDatabaseName:
      type: string
      pattern: ^[a-zA-Z0-9_\-]+$
      maxLength: 63
    RdsFieldMapping:
      type: object
      properties:
        primaryKeyField:
          allOf:
          - $ref: '#/components/schemas/ColumnName'
          description: The name of the field in which Amazon Bedrock stores the ID
            for each entry.
        vectorField:
          allOf:
          - $ref: '#/components/schemas/ColumnName'
          description: The name of the field in which Amazon Bedrock stores the vector
            embeddings for your data sources.
        textField:
          allOf:
          - $ref: '#/components/schemas/ColumnName'
          description: The name of the field in which Amazon Bedrock stores the raw
            text from your data. The text is split according to the chunking strategy
            you choose.
        metadataField:
          allOf:
          - $ref: '#/components/schemas/ColumnName'
          description: The name of the field in which Amazon Bedrock stores metadata
            about the vector store.
        customMetadataField:
          allOf:
          - $ref: '#/components/schemas/ColumnName'
          description: Provide a name for the universal metadata field where Amazon
            Bedrock will store any custom metadata from your data source.
      required:
      - primaryKeyField
      - vectorField
      - textField
      - metadataField
      description: Contains the names of the fields to which to map information about
        the vector store.
    RdsTableName:
      type: string
      pattern: ^[a-zA-Z0-9_\.\-]+$
      maxLength: 63
    RecommendedAction:
      type: string
      maxLength: 2048
    RecommendedActions:
      type: array
      items:
        $ref: '#/components/schemas/RecommendedAction'
    RedisEnterpriseCloudConfiguration:
      type: object
      properties:
        endpoint:
          allOf:
          - $ref: '#/components/schemas/RedisEnterpriseCloudEndpoint'
          description: The endpoint URL of the Redis Enterprise Cloud database.
        vectorIndexName:
          allOf:
          - $ref: '#/components/schemas/RedisEnterpriseCloudIndexName'
          description: The name of the vector index.
        credentialsSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretArn'
          description: The Amazon Resource Name (ARN) of the secret that you created
            in Secrets Manager that is linked to your Redis Enterprise Cloud database.
        fieldMapping:
          allOf:
          - $ref: '#/components/schemas/RedisEnterpriseCloudFieldMapping'
          description: Contains the names of the fields to which to map information
            about the vector store.
      required:
      - endpoint
      - vectorIndexName
      - credentialsSecretArn
      - fieldMapping
      description: Contains details about the storage configuration of the knowledge
        base in Redis Enterprise Cloud. For more information, see [Create a vector
        index in Redis Enterprise Cloud](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-oss.html).
    RedisEnterpriseCloudEndpoint:
      type: string
      pattern: ^.*$
      maxLength: 2048
    RedisEnterpriseCloudFieldMapping:
      type: object
      properties:
        vectorField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores the vector
            embeddings for your data sources.
        textField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores the raw
            text from your data. The text is split according to the chunking strategy
            you choose.
        metadataField:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: The name of the field in which Amazon Bedrock stores metadata
            about the vector store.
      required:
      - vectorField
      - textField
      - metadataField
      description: Contains the names of the fields to which to map information about
        the vector store.
    RedisEnterpriseCloudIndexName:
      type: string
      pattern: ^.*$
      maxLength: 2048
    RedshiftClusterIdentifier:
      type: string
      minLength: 1
      maxLength: 63
    RedshiftConfiguration:
      type: object
      properties:
        storageConfigurations:
          allOf:
          - $ref: '#/components/schemas/RedshiftQueryEngineStorageConfigurations'
          description: Specifies configurations for Amazon Redshift database storage.
        queryEngineConfiguration:
          allOf:
          - $ref: '#/components/schemas/RedshiftQueryEngineConfiguration'
          description: Specifies configurations for an Amazon Redshift query engine.
        queryGenerationConfiguration:
          allOf:
          - $ref: '#/components/schemas/QueryGenerationConfiguration'
          description: Specifies configurations for generating queries.
      required:
      - storageConfigurations
      - queryEngineConfiguration
      description: Contains configurations for an Amazon Redshift database. For more
        information, see [Build a knowledge base by connecting to a structured data
        source](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html)
        in the Amazon Bedrock User Guide.
    RedshiftDatabase:
      type: string
      minLength: 1
      maxLength: 200
    RedshiftProvisionedAuthConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/RedshiftProvisionedAuthType'
          description: The type of authentication to use.
        databaseUser:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The database username for authentication to an Amazon Redshift
            provisioned data warehouse.
        usernamePasswordSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretArn'
          description: The ARN of an Secrets Manager secret for authentication.
      required:
      - type
      description: Contains configurations for authentication to an Amazon Redshift
        provisioned data warehouse. Specify the type of authentication to use in the
        `type` field and include the corresponding field. If you specify IAM authentication,
        you don't need to include another field.
    RedshiftProvisionedAuthType:
      type: string
      enum:
      - IAM
      - USERNAME_PASSWORD
      - USERNAME
    RedshiftProvisionedConfiguration:
      type: object
      properties:
        clusterIdentifier:
          allOf:
          - $ref: '#/components/schemas/RedshiftClusterIdentifier'
          description: The ID of the Amazon Redshift cluster.
        authConfiguration:
          allOf:
          - $ref: '#/components/schemas/RedshiftProvisionedAuthConfiguration'
          description: Specifies configurations for authentication to Amazon Redshift.
      required:
      - clusterIdentifier
      - authConfiguration
      description: Contains configurations for a provisioned Amazon Redshift query
        engine.
    RedshiftQueryEngineAwsDataCatalogStorageConfiguration:
      type: object
      properties:
        tableNames:
          allOf:
          - $ref: '#/components/schemas/AwsDataCatalogTableNames'
          description: A list of names of the tables to use.
      required:
      - tableNames
      description: Contains configurations for storage in Glue Data Catalog.
    RedshiftQueryEngineConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/RedshiftQueryEngineType'
          description: The type of query engine.
        serverlessConfiguration:
          allOf:
          - $ref: '#/components/schemas/RedshiftServerlessConfiguration'
          description: Specifies configurations for a serverless Amazon Redshift query
            engine.
        provisionedConfiguration:
          allOf:
          - $ref: '#/components/schemas/RedshiftProvisionedConfiguration'
          description: Specifies configurations for a provisioned Amazon Redshift
            query engine.
      required:
      - type
      description: Contains configurations for an Amazon Redshift query engine. Specify
        the type of query engine in `type` and include the corresponding field. For
        more information, see [Build a knowledge base by connecting to a structured
        data source](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html)
        in the Amazon Bedrock User Guide.
    RedshiftQueryEngineRedshiftStorageConfiguration:
      type: object
      properties:
        databaseName:
          allOf:
          - $ref: '#/components/schemas/RedshiftDatabase'
          description: The name of the Amazon Redshift database.
      required:
      - databaseName
      description: Contains configurations for storage in Amazon Redshift.
    RedshiftQueryEngineStorageConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/RedshiftQueryEngineStorageType'
          description: The data storage service to use.
        awsDataCatalogConfiguration:
          allOf:
          - $ref: '#/components/schemas/RedshiftQueryEngineAwsDataCatalogStorageConfiguration'
          description: Specifies configurations for storage in Glue Data Catalog.
        redshiftConfiguration:
          allOf:
          - $ref: '#/components/schemas/RedshiftQueryEngineRedshiftStorageConfiguration'
          description: Specifies configurations for storage in Amazon Redshift.
      required:
      - type
      description: Contains configurations for Amazon Redshift data storage. Specify
        the data storage service to use in the `type` field and include the corresponding
        field. For more information, see [Build a knowledge base by connecting to
        a structured data source](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html)
        in the Amazon Bedrock User Guide.
    RedshiftQueryEngineStorageConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/RedshiftQueryEngineStorageConfiguration'
    RedshiftQueryEngineStorageType:
      type: string
      enum:
      - REDSHIFT
      - AWS_DATA_CATALOG
    RedshiftQueryEngineType:
      type: string
      enum:
      - SERVERLESS
      - PROVISIONED
    RedshiftServerlessAuthConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/RedshiftServerlessAuthType'
          description: The type of authentication to use.
        usernamePasswordSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretArn'
          description: The ARN of an Secrets Manager secret for authentication.
      required:
      - type
      description: Specifies configurations for authentication to a Redshift Serverless.
        Specify the type of authentication to use in the `type` field and include
        the corresponding field. If you specify IAM authentication, you don't need
        to include another field.
    RedshiftServerlessAuthType:
      type: string
      enum:
      - IAM
      - USERNAME_PASSWORD
    RedshiftServerlessConfiguration:
      type: object
      properties:
        workgroupArn:
          allOf:
          - $ref: '#/components/schemas/WorkgroupArn'
          description: The ARN of the Amazon Redshift workgroup.
        authConfiguration:
          allOf:
          - $ref: '#/components/schemas/RedshiftServerlessAuthConfiguration'
          description: Specifies configurations for authentication to an Amazon Redshift
            provisioned data warehouse.
      required:
      - workgroupArn
      - authConfiguration
      description: Contains configurations for authentication to Amazon Redshift Serverless.
    RelayConversationHistory:
      type: string
      enum:
      - TO_COLLABORATOR
      - DISABLED
    RequireConfirmation:
      type: string
      enum:
      - ENABLED
      - DISABLED
      description: <p>Whether the action requires user confirmation.</p>
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/NonBlankString'
      description: The specified resource Amazon Resource Name (ARN) was not found.
        Check the Amazon Resource Name (ARN) and try your request again.
    RetrievalFlowNodeConfiguration:
      type: object
      properties:
        serviceConfiguration:
          allOf:
          - $ref: '#/components/schemas/RetrievalFlowNodeServiceConfiguration'
          description: Contains configurations for the service to use for retrieving
            data to return as the output from the node.
      required:
      - serviceConfiguration
      description: Contains configurations for a Retrieval node in a flow. This node
        retrieves data from the Amazon S3 location that you specify and returns it
        as the output.
    RetrievalFlowNodeS3Configuration:
      type: object
      properties:
        bucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The name of the Amazon S3 bucket from which to retrieve data.
      required:
      - bucketName
      description: Contains configurations for the Amazon S3 location from which to
        retrieve data to return as the output from the node.
    RetrievalFlowNodeServiceConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/RetrievalFlowNodeS3Configuration'
        description: |-
          Contains configurations for the Amazon S3 location from which to retrieve data to return as the output from the node.
      description: |-
        Contains configurations for the service to use for retrieving data to return as the output from the node.
    S3BucketArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov):s3:::[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$
      minLength: 1
      maxLength: 2048
    S3BucketName:
      type: string
      pattern: ^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$
      minLength: 3
      maxLength: 63
    S3BucketUri:
      type: string
      pattern: ^s3://.{1,128}$
      minLength: 1
      maxLength: 2048
    S3Content:
      type: object
      properties:
        s3Location:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: The S3 location of the file containing the content to ingest.
      required:
      - s3Location
      description: Contains information about the content to ingest into a knowledge
        base connected to an Amazon S3 data source.
    S3DataSourceConfiguration:
      type: object
      properties:
        bucketArn:
          allOf:
          - $ref: '#/components/schemas/S3BucketArn'
          description: The Amazon Resource Name (ARN) of the S3 bucket that contains
            your data.
        inclusionPrefixes:
          allOf:
          - $ref: '#/components/schemas/S3Prefixes'
          description: A list of S3 prefixes to include certain files or content.
            For more information, see [Organizing objects using prefixes](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html).
        bucketOwnerAccountId:
          allOf:
          - $ref: '#/components/schemas/BucketOwnerAccountId'
          description: The account ID for the owner of the S3 bucket.
      required:
      - bucketArn
      description: The configuration information to connect to Amazon S3 as your data
        source.
    S3Identifier:
      type: object
      properties:
        s3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The name of the S3 bucket.
        s3ObjectKey:
          allOf:
          - $ref: '#/components/schemas/S3ObjectKey'
          description: The S3 object key for the S3 resource.
      description: The identifier information for an Amazon S3 bucket.
    S3Location:
      type: object
      properties:
        uri:
          allOf:
          - $ref: '#/components/schemas/S3BucketUri'
          description: The location's URI. For example, `s3://my-bucket/chunk-processor/`.
      required:
      - uri
      description: An Amazon S3 location.
    S3ObjectKey:
      type: string
      pattern: ^[\.\-\!\*\_\'\(\)a-zA-Z0-9][\.\-\!\*\_\'\(\)\/a-zA-Z0-9]*$
      minLength: 1
      maxLength: 1024
    S3ObjectUri:
      type: string
      pattern: ^s3://[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]/.{1,1024}$
      minLength: 1
      maxLength: 1024
    S3Prefix:
      type: string
      minLength: 1
      maxLength: 300
    S3Prefixes:
      type: array
      items:
        $ref: '#/components/schemas/S3Prefix'
    SalesforceAuthType:
      type: string
      enum:
      - OAUTH2_CLIENT_CREDENTIALS
    SalesforceCrawlerConfiguration:
      type: object
      properties:
        filterConfiguration:
          allOf:
          - $ref: '#/components/schemas/CrawlFilterConfiguration'
          description: The configuration of filtering the Salesforce content. For
            example, configuring regular expression patterns to include or exclude
            certain content.
      description: The configuration of the Salesforce content. For example, configuring
        specific types of Salesforce content.
    SalesforceDataSourceConfiguration:
      type: object
      properties:
        sourceConfiguration:
          allOf:
          - $ref: '#/components/schemas/SalesforceSourceConfiguration'
          description: The endpoint information to connect to your Salesforce data
            source.
        crawlerConfiguration:
          allOf:
          - $ref: '#/components/schemas/SalesforceCrawlerConfiguration'
          description: The configuration of the Salesforce content. For example, configuring
            specific types of Salesforce content.
      required:
      - sourceConfiguration
      description: The configuration information to connect to Salesforce as your
        data source.
    SalesforceSourceConfiguration:
      type: object
      properties:
        hostUrl:
          allOf:
          - $ref: '#/components/schemas/HttpsUrl'
          description: The Salesforce host URL or instance URL.
        authType:
          allOf:
          - $ref: '#/components/schemas/SalesforceAuthType'
          description: The supported authentication type to authenticate and connect
            to your Salesforce instance.
        credentialsSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretArn'
          description: The Amazon Resource Name of an Secrets Manager secret that
            stores your authentication credentials for your Salesforce instance URL.
            For more information on the key-value pairs that must be included in your
            secret, depending on your authentication type, see [Salesforce connection
            configuration](https://docs.aws.amazon.com/bedrock/latest/userguide/salesforce-data-source-connector.html#configuration-salesforce-connector).
      required:
      - hostUrl
      - authType
      - credentialsSecretArn
      description: The endpoint information to connect to your Salesforce data source.
    SecretArn:
      type: string
      pattern: ^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$
    SeedUrl:
      type: object
      properties:
        url:
          allOf:
          - $ref: '#/components/schemas/Url'
          description: A seed or starting point URL.
      description: The seed or starting point URL. You should be authorized to crawl
        the URL.
    SeedUrls:
      type: array
      items:
        $ref: '#/components/schemas/SeedUrl'
    SemanticChunkingConfiguration:
      type: object
      properties:
        maxTokens:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of tokens that a chunk can contain.
        bufferSize:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The buffer size.
        breakpointPercentileThreshold:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The dissimilarity threshold for splitting chunks.
      required:
      - maxTokens
      - bufferSize
      - breakpointPercentileThreshold
      description: 'Settings for semantic document chunking for a data source. Semantic
        chunking splits a document into into smaller documents based on groups of
        similar content derived from the text with natural language processing.


        With semantic chunking, each sentence is compared to the next to determine
        how similar they are. You specify a threshold in the form of a percentile,
        where adjacent sentences that are less similar than that percentage of sentence
        pairs are divided into separate chunks. For example, if you set the threshold
        to 90, then the 10 percent of sentence pairs that are least similar are split.
        So if you have 101 sentences, 100 sentence pairs are compared, and the 10
        with the least similarity are split, creating 11 chunks. These chunks are
        further split if they exceed the max token size.


        You must also specify a buffer size, which determines whether sentences are
        compared in isolation, or within a moving context window that includes the
        previous and following sentence. For example, if you set the buffer size to
        `1`, the embedding for sentence 10 is derived from sentences 9, 10, and 11
        combined.'
    ServerSideEncryptionConfiguration:
      type: object
      properties:
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key used to encrypt
            the resource.
      description: Contains the configuration for server-side encryption.
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/NonBlankString'
      description: The number of requests exceeds the service quota. Resubmit your
        request later.
    SessionSummaryConfiguration:
      type: object
      properties:
        maxRecentSessions:
          allOf:
          - $ref: '#/components/schemas/MaxRecentSessions'
          description: Maximum number of recent session summaries to include in the
            agent's prompt context.
      description: Configuration for SESSION_SUMMARY memory type enabled for the agent.
    SessionTTL:
      type: integer
      minimum: 60
      maximum: 3600
    SharePointAuthType:
      type: string
      enum:
      - OAUTH2_CLIENT_CREDENTIALS
      - OAUTH2_SHAREPOINT_APP_ONLY_CLIENT_CREDENTIALS
    SharePointCrawlerConfiguration:
      type: object
      properties:
        filterConfiguration:
          allOf:
          - $ref: '#/components/schemas/CrawlFilterConfiguration'
          description: The configuration of filtering the SharePoint content. For
            example, configuring regular expression patterns to include or exclude
            certain content.
      description: The configuration of the SharePoint content. For example, configuring
        specific types of SharePoint content.
    SharePointDataSourceConfiguration:
      type: object
      properties:
        sourceConfiguration:
          allOf:
          - $ref: '#/components/schemas/SharePointSourceConfiguration'
          description: The endpoint information to connect to your SharePoint data
            source.
        crawlerConfiguration:
          allOf:
          - $ref: '#/components/schemas/SharePointCrawlerConfiguration'
          description: The configuration of the SharePoint content. For example, configuring
            specific types of SharePoint content.
      required:
      - sourceConfiguration
      description: The configuration information to connect to SharePoint as your
        data source.
    SharePointDomain:
      type: string
      minLength: 1
      maxLength: 50
    SharePointHostType:
      type: string
      enum:
      - ONLINE
    SharePointSiteUrls:
      type: array
      items:
        $ref: '#/components/schemas/HttpsUrl'
    SharePointSourceConfiguration:
      type: object
      properties:
        tenantId:
          allOf:
          - $ref: '#/components/schemas/Microsoft365TenantId'
          description: The identifier of your Microsoft 365 tenant.
        domain:
          allOf:
          - $ref: '#/components/schemas/SharePointDomain'
          description: The domain of your SharePoint instance or site URL/URLs.
        siteUrls:
          allOf:
          - $ref: '#/components/schemas/SharePointSiteUrls'
          description: A list of one or more SharePoint site URLs.
        hostType:
          allOf:
          - $ref: '#/components/schemas/SharePointHostType'
          description: The supported host type, whether online/cloud or server/on-premises.
        authType:
          allOf:
          - $ref: '#/components/schemas/SharePointAuthType'
          description: The supported authentication type to authenticate and connect
            to your SharePoint site/sites.
        credentialsSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretArn'
          description: The Amazon Resource Name of an Secrets Manager secret that
            stores your authentication credentials for your SharePoint site/sites.
            For more information on the key-value pairs that must be included in your
            secret, depending on your authentication type, see [SharePoint connection
            configuration](https://docs.aws.amazon.com/bedrock/latest/userguide/sharepoint-data-source-connector.html#configuration-sharepoint-connector).
      required:
      - domain
      - siteUrls
      - hostType
      - authType
      - credentialsSecretArn
      description: The endpoint information to connect to your SharePoint data source.
    SortOrder:
      type: string
      enum:
      - ASCENDING
      - DESCENDING
    SpecificToolChoice:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ToolName'
          description: The name of the tool.
      required:
      - name
      description: Defines a specific tool that the model must request. No text is
        generated but the results of tool use are sent back to the model to help generate
        a response. For more information, see [Use a tool to complete an Amazon Bedrock
        model response](https://docs.aws.amazon.com/bedrock/latest/userguide/tool-use.html).
    SqlKnowledgeBaseConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/QueryEngineType'
          description: The type of SQL database to connect to the knowledge base.
        redshiftConfiguration:
          allOf:
          - $ref: '#/components/schemas/RedshiftConfiguration'
          description: Specifies configurations for a knowledge base connected to
            an Amazon Redshift database.
      required:
      - type
      description: Contains configurations for a knowledge base connected to an SQL
        database. Specify the SQL database type in the `type` field and include the
        corresponding field. For more information, see [Build a knowledge base by
        connecting to a structured data source](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html)
        in the Amazon Bedrock User Guide.
    SqlString:
      type: string
      minLength: 1
      maxLength: 1000
    StartIngestionJobRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base for the data ingestion
            job.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source you want to ingest
            into your knowledge base.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier to ensure that the API
            request completes no more than one time. If this token matches a previous
            request, Amazon Bedrock ignores the request, but does not return an error.
            For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the data ingestion job.
      required:
      - knowledgeBaseId
      - dataSourceId
    StartIngestionJobResponse:
      type: object
      properties:
        ingestionJob:
          allOf:
          - $ref: '#/components/schemas/IngestionJob'
          description: Contains information about the data ingestion job.
      required:
      - ingestionJob
    StepType:
      type: string
      enum:
      - POST_CHUNKING
    StopIngestionJobRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base for the data ingestion
            job you want to stop.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source for the data ingestion
            job you want to stop.
        ingestionJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data ingestion job you want to
            stop.
      required:
      - knowledgeBaseId
      - dataSourceId
      - ingestionJobId
    StopIngestionJobResponse:
      type: object
      properties:
        ingestionJob:
          allOf:
          - $ref: '#/components/schemas/IngestionJob'
          description: Contains information about the stopped data ingestion job.
      required:
      - ingestionJob
    StopSequences:
      type: array
      items:
        type: string
    StorageConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseStorageType'
          description: The vector store service in which the knowledge base is stored.
        opensearchServerlessConfiguration:
          allOf:
          - $ref: '#/components/schemas/OpenSearchServerlessConfiguration'
          description: Contains the storage configuration of the knowledge base in
            Amazon OpenSearch Service.
        opensearchManagedClusterConfiguration:
          allOf:
          - $ref: '#/components/schemas/OpenSearchManagedClusterConfiguration'
          description: Contains details about the storage configuration of the knowledge
            base in OpenSearch Managed Cluster. For more information, see [Create
            a vector index in Amazon OpenSearch Service](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-osm.html).
        pineconeConfiguration:
          allOf:
          - $ref: '#/components/schemas/PineconeConfiguration'
          description: Contains the storage configuration of the knowledge base in
            Pinecone.
        redisEnterpriseCloudConfiguration:
          allOf:
          - $ref: '#/components/schemas/RedisEnterpriseCloudConfiguration'
          description: Contains the storage configuration of the knowledge base in
            Redis Enterprise Cloud.
        rdsConfiguration:
          allOf:
          - $ref: '#/components/schemas/RdsConfiguration'
          description: Contains details about the storage configuration of the knowledge
            base in Amazon RDS. For more information, see [Create a vector index in
            Amazon RDS](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-rds.html).
        mongoDbAtlasConfiguration:
          allOf:
          - $ref: '#/components/schemas/MongoDbAtlasConfiguration'
          description: Contains the storage configuration of the knowledge base in
            MongoDB Atlas.
        neptuneAnalyticsConfiguration:
          allOf:
          - $ref: '#/components/schemas/NeptuneAnalyticsConfiguration'
          description: Contains details about the Neptune Analytics configuration
            of the knowledge base in Amazon Neptune. For more information, see [Create
            a vector index in Amazon Neptune Analytics.](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-neptune.html).
      required:
      - type
      description: Contains the storage configuration of the knowledge base.
    StorageDays:
      type: integer
      default: 30
      minimum: 0
      maximum: 365
    StorageFlowNodeConfiguration:
      type: object
      properties:
        serviceConfiguration:
          allOf:
          - $ref: '#/components/schemas/StorageFlowNodeServiceConfiguration'
          description: Contains configurations for the service to use for storing
            the input into the node.
      required:
      - serviceConfiguration
      description: Contains configurations for a Storage node in a flow. This node
        stores the input in an Amazon S3 location that you specify.
    StorageFlowNodeS3Configuration:
      type: object
      properties:
        bucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The name of the Amazon S3 bucket in which to store the input
            into the node.
      required:
      - bucketName
      description: Contains configurations for the Amazon S3 location in which to
        store the input into the node.
    StorageFlowNodeServiceConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/StorageFlowNodeS3Configuration'
        description: |-
          Contains configurations for the Amazon S3 location in which to store the input into the node.
      description: |-
        Contains configurations for the service to use for storing the input into the node.
    StringListValue:
      type: array
      items:
        $ref: '#/components/schemas/StringValue'
    StringValue:
      type: string
      minLength: 1
      maxLength: 2048
    SupplementalDataStorageConfiguration:
      type: object
      properties:
        storageLocations:
          allOf:
          - $ref: '#/components/schemas/SupplementalDataStorageLocations'
          description: A list of objects specifying storage locations for images extracted
            from multimodal documents in your data source.
      required:
      - storageLocations
      description: Specifies configurations for the storage location of the images
        extracted from multimodal documents in your data source. These images can
        be retrieved and returned to the end user.
    SupplementalDataStorageLocation:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/SupplementalDataStorageLocationType'
          description: Specifies the storage service used for this location.
        s3Location:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: Contains information about the Amazon S3 location for the extracted
            images.
      required:
      - type
      description: Contains information about a storage location for images extracted
        from multimodal documents in your data source.
    SupplementalDataStorageLocationType:
      type: string
      enum:
      - S3
    SupplementalDataStorageLocations:
      type: array
      items:
        $ref: '#/components/schemas/SupplementalDataStorageLocation'
    SystemContentBlock:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/NonEmptyString'
        description: |-
          The text in the system prompt.
      - allOf:
        - $ref: '#/components/schemas/CachePointBlock'
        description: |-
          Creates a cache checkpoint within a tool designation
      description: |-
        Contains a system prompt to provide context to the model or to describe how it should behave. For more information, see [Create a prompt using Prompt management](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-create.html).
      x-sensitive: true
    SystemContentBlocks:
      type: array
      items:
        $ref: '#/components/schemas/SystemContentBlock'
    TagKey:
      type: string
      pattern: ^[a-zA-Z0-9\s._:/=+@-]*$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TaggableResourcesArn'
          description: The Amazon Resource Name (ARN) of the resource to tag.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: An object containing key-value pairs that define the tags to
            attach to the resource.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      pattern: ^[a-zA-Z0-9\s._:/=+@-]*$
      minLength: 0
      maxLength: 256
    TaggableResourcesArn:
      type: string
      pattern: (^arn:aws:bedrock:[a-zA-Z0-9-]+:/d{12}:(agent|agent-alias|knowledge-base|flow|prompt)/[A-Z0-9]{10}(?:/[A-Z0-9]{10})?$|^arn:aws:bedrock:[a-zA-Z0-9-]+:/d{12}:flow/([A-Z0-9]{10})/alias/([A-Z0-9]{10})$|^arn:aws:bedrock:[a-zA-Z0-9-]+:/d{12}:prompt/([A-Z0-9]{10})?(?::/d+)?$)
      minLength: 20
      maxLength: 1011
    TagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    Temperature:
      type: number
      format: float
      minimum: 0
      maximum: 1
    TextContentDoc:
      type: object
      properties:
        data:
          allOf:
          - $ref: '#/components/schemas/Data'
          description: The text of the content.
      required:
      - data
      description: Contains information about content defined inline in text.
    TextPrompt:
      type: string
      minLength: 1
    TextPromptTemplateConfiguration:
      type: object
      properties:
        text:
          allOf:
          - $ref: '#/components/schemas/TextPrompt'
          description: The message for the prompt.
        cachePoint:
          allOf:
          - $ref: '#/components/schemas/CachePointBlock'
          description: A cache checkpoint within a template configuration.
        inputVariables:
          allOf:
          - $ref: '#/components/schemas/PromptInputVariablesList'
          description: An array of the variables in the prompt template.
      required:
      - text
      description: Contains configurations for a text prompt template. To include
        a variable, enclose a word in double curly braces as in `{{variable}}`.
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/NonBlankString'
      description: The number of requests exceeds the limit. Resubmit your request
        later.
    Tool:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ToolSpecification'
        description: |-
          The specification for the tool.
      - allOf:
        - $ref: '#/components/schemas/CachePointBlock'
        description: |-
          Creates a cache checkpoint within a tool designation
      description: |-
        Contains configurations for a tool that a model can use when generating a response. For more information, see [Use a tool to complete an Amazon Bedrock model response](https://docs.aws.amazon.com/bedrock/latest/userguide/tool-use.html).
    ToolChoice:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AutoToolChoice'
        description: |-
          Defines tools. The model automatically decides whether to call a tool or to generate text instead.
      - allOf:
        - $ref: '#/components/schemas/AnyToolChoice'
        description: |-
          Defines tools, at least one of which must be requested by the model. No text is generated but the results of tool use are sent back to the model to help generate a response.
      - allOf:
        - $ref: '#/components/schemas/SpecificToolChoice'
        description: |-
          Defines a specific tool that the model must request. No text is generated but the results of tool use are sent back to the model to help generate a response.
      description: |-
        Defines which tools the model should request when invoked. For more information, see [Use a tool to complete an Amazon Bedrock model response](https://docs.aws.amazon.com/bedrock/latest/userguide/tool-use.html).
      x-sensitive: true
    ToolConfiguration:
      type: object
      properties:
        tools:
          allOf:
          - $ref: '#/components/schemas/Tools'
          description: An array of tools to pass to a model.
        toolChoice:
          allOf:
          - $ref: '#/components/schemas/ToolChoice'
          description: Defines which tools the model should request when invoked.
      required:
      - tools
      description: Configuration information for the tools that the model can use
        when generating a response. For more information, see [Use a tool to complete
        an Amazon Bedrock model response](https://docs.aws.amazon.com/bedrock/latest/userguide/tool-use.html).
    ToolInputSchema:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/Document'
        description: |-
          A JSON object defining the input schema for the tool.
      description: |-
        The input schema for the tool. For more information, see [Use a tool to complete an Amazon Bedrock model response](https://docs.aws.amazon.com/bedrock/latest/userguide/tool-use.html).
    ToolName:
      type: string
      pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
      minLength: 1
      maxLength: 64
    ToolSpecification:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ToolName'
          description: The name of the tool.
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: The description of the tool.
        inputSchema:
          allOf:
          - $ref: '#/components/schemas/ToolInputSchema'
          description: The input schema for the tool.
      required:
      - name
      - inputSchema
      description: Contains a specification for a tool. For more information, see
        [Use a tool to complete an Amazon Bedrock model response](https://docs.aws.amazon.com/bedrock/latest/userguide/tool-use.html).
    Tools:
      type: array
      items:
        $ref: '#/components/schemas/Tool'
      x-sensitive: true
    TopK:
      type: integer
      minimum: 0
      maximum: 500
    TopP:
      type: number
      format: float
      minimum: 0
      maximum: 1
    Transformation:
      type: object
      properties:
        transformationFunction:
          allOf:
          - $ref: '#/components/schemas/TransformationFunction'
          description: A Lambda function that processes documents.
        stepToApply:
          allOf:
          - $ref: '#/components/schemas/StepType'
          description: When the service applies the transformation.
      required:
      - transformationFunction
      - stepToApply
      description: A custom processing step for documents moving through a data source
        ingestion pipeline. To process documents after they have been converted into
        chunks, set the step to apply to `POST_CHUNKING`.
    TransformationFunction:
      type: object
      properties:
        transformationLambdaConfiguration:
          allOf:
          - $ref: '#/components/schemas/TransformationLambdaConfiguration'
          description: The Lambda function.
      required:
      - transformationLambdaConfiguration
      description: A Lambda function that processes documents.
    TransformationLambdaConfiguration:
      type: object
      properties:
        lambdaArn:
          allOf:
          - $ref: '#/components/schemas/LambdaArn'
          description: The function's ARN identifier.
      required:
      - lambdaArn
      description: A Lambda function that processes documents.
    Transformations:
      type: array
      items:
        $ref: '#/components/schemas/Transformation'
    Type:
      type: string
      enum:
      - string
      - number
      - integer
      - boolean
      - array
    UnfulfilledNodeInputFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node containing the unfulfilled input.
        input:
          allOf:
          - $ref: '#/components/schemas/FlowNodeInputName'
          description: The name of the unfulfilled input. An input is unfulfilled
            if there are no data connections to it.
      required:
      - node
      - input
      description: Details about an unfulfilled node input with no valid connections.
    UnknownConnectionConditionFlowValidationDetails:
      type: object
      properties:
        connection:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionName'
          description: The name of the connection with the unknown condition.
      required:
      - connection
      description: Details about an unknown condition for a connection.
    UnknownConnectionSourceFlowValidationDetails:
      type: object
      properties:
        connection:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionName'
          description: The name of the connection with the unknown source.
      required:
      - connection
      description: Details about an unknown source node for a connection.
    UnknownConnectionSourceOutputFlowValidationDetails:
      type: object
      properties:
        connection:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionName'
          description: The name of the connection with the unknown source output.
      required:
      - connection
      description: Details about an unknown source output for a connection.
    UnknownConnectionTargetFlowValidationDetails:
      type: object
      properties:
        connection:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionName'
          description: The name of the connection with the unknown target.
      required:
      - connection
      description: Details about an unknown target node for a connection.
    UnknownConnectionTargetInputFlowValidationDetails:
      type: object
      properties:
        connection:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionName'
          description: The name of the connection with the unknown target input.
      required:
      - connection
      description: Details about an unknown target input for a connection.
    UnknownNodeInputFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the unknown input.
        input:
          allOf:
          - $ref: '#/components/schemas/FlowNodeInputName'
          description: The name of the node with the unknown input.
      required:
      - node
      - input
      description: Details about an unknown input for a node.
    UnknownNodeOutputFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the node with the unknown output.
        output:
          allOf:
          - $ref: '#/components/schemas/FlowNodeOutputName'
          description: The name of the unknown output.
      required:
      - node
      - output
      description: Details about an unknown output for a node.
    UnreachableNodeFlowValidationDetails:
      type: object
      properties:
        node:
          allOf:
          - $ref: '#/components/schemas/FlowNodeName'
          description: The name of the unreachable node.
      required:
      - node
      description: Details about an unreachable node in the flow. A node is unreachable
        when there are no paths to it from any starting node.
    UnsatisfiedConnectionConditionsFlowValidationDetails:
      type: object
      properties:
        connection:
          allOf:
          - $ref: '#/components/schemas/FlowConnectionName'
          description: The name of the connection with unsatisfied conditions.
      required:
      - connection
      description: Details about unsatisfied conditions for a connection. A condition
        is unsatisfied if it can never be true, for example two branches of condition
        node cannot be simultaneously true.
    UnspecifiedFlowValidationDetails:
      type: object
      properties: {}
      description: Details about an unspecified validation that doesn't fit other
        categories.
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TaggableResourcesArn'
          description: The Amazon Resource Name (ARN) of the resource from which to
            remove tags.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of keys of the tags to remove from the resource.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateAgentActionGroupRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent for which to update the
            action group.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The unique identifier of the agent version for which to update
            the action group.
        actionGroupId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the action group.
        actionGroupName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: Specifies a new name for the action group.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Specifies a new name for the action group.
        parentActionGroupSignature:
          allOf:
          - $ref: '#/components/schemas/ActionGroupSignature'
          description: "Update the built-in or computer use action for this action\
            \ group. If you specify a value, you must leave the `description`, `apiSchema`,\
            \ and `actionGroupExecutor` fields empty for this action group.\n\n  *\
            \ To allow your agent to request the user for additional information when\
            \ trying to complete a task, set this field to `AMAZON.UserInput`. \n\n\
            \  * To allow your agent to generate, run, and troubleshoot code when\
            \ trying to complete a task, set this field to `AMAZON.CodeInterpreter`.\n\
            \n  * To allow your agent to use an Anthropic computer use tool, specify\
            \ one of the following values. \n\nComputer use is a new Anthropic Claude\
            \ model capability (in beta) available with Anthropic Claude 3.7 Sonnet\
            \ and Claude 3.5 Sonnet v2 only. When operating computer use functionality,\
            \ we recommend taking additional security precautions, such as executing\
            \ computer actions in virtual environments with restricted data access\
            \ and limited internet connectivity. For more information, see [Configure\
            \ an Amazon Bedrock Agent to complete tasks with computer use tools](https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html).\n\
            \n    * `ANTHROPIC.Computer` \\- Gives the agent permission to use the\
            \ mouse and keyboard and take screenshots.\n\n    * `ANTHROPIC.TextEditor`\
            \ \\- Gives the agent permission to view, create and edit files.\n\n \
            \   * `ANTHROPIC.Bash` \\- Gives the agent permission to run commands\
            \ in a bash shell.\n\nDuring orchestration, if your agent determines that\
            \ it needs to invoke an API in an action group, but doesn't have enough\
            \ information to complete the API request, it will invoke this action\
            \ group instead and return an [Observation](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Observation.html)\
            \ reprompting the user for more information."
        parentActionGroupSignatureParams:
          allOf:
          - $ref: '#/components/schemas/ActionGroupSignatureParams'
          description: 'The configuration settings for a computer use action.


            Computer use is a new Anthropic Claude model capability (in beta) available
            with Claude 3.7 Sonnet and Claude 3.5 Sonnet v2 only. For more information,
            see [Configure an Amazon Bedrock Agent to complete tasks with computer
            use tools](https://docs.aws.amazon.com/bedrock/latest/userguide/agent-computer-use.html).'
        actionGroupExecutor:
          allOf:
          - $ref: '#/components/schemas/ActionGroupExecutor'
          description: The Amazon Resource Name (ARN) of the Lambda function containing
            the business logic that is carried out upon invoking the action.
        actionGroupState:
          allOf:
          - $ref: '#/components/schemas/ActionGroupState'
          description: Specifies whether the action group is available for the agent
            to invoke or not when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html)
            request.
        apiSchema:
          allOf:
          - $ref: '#/components/schemas/APISchema'
          description: Contains either details about the S3 object containing the
            OpenAPI schema for the action group or the JSON or YAML-formatted payload
            defining the schema. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html).
        functionSchema:
          allOf:
          - $ref: '#/components/schemas/FunctionSchema'
          description: Contains details about the function schema for the action group
            or the JSON or YAML-formatted payload defining the schema.
      required:
      - agentId
      - agentVersion
      - actionGroupId
      - actionGroupName
    UpdateAgentActionGroupResponse:
      type: object
      properties:
        agentActionGroup:
          allOf:
          - $ref: '#/components/schemas/AgentActionGroup'
          description: Contains details about the action group that was updated.
      required:
      - agentActionGroup
    UpdateAgentAliasRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
        agentAliasId:
          allOf:
          - $ref: '#/components/schemas/AgentAliasId'
          description: The unique identifier of the alias.
        agentAliasName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: Specifies a new name for the alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Specifies a new description for the alias.
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AgentAliasRoutingConfiguration'
          description: Contains details about the routing configuration of the alias.
      required:
      - agentId
      - agentAliasId
      - agentAliasName
    UpdateAgentAliasResponse:
      type: object
      properties:
        agentAlias:
          allOf:
          - $ref: '#/components/schemas/AgentAlias'
          description: Contains details about the alias that was updated.
      required:
      - agentAlias
    UpdateAgentCollaboratorRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The agent's ID.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The agent's version.
        collaboratorId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The collaborator's ID.
        agentDescriptor:
          allOf:
          - $ref: '#/components/schemas/AgentDescriptor'
          description: An agent descriptor for the agent collaborator.
        collaboratorName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The collaborator's name.
        collaborationInstruction:
          allOf:
          - $ref: '#/components/schemas/CollaborationInstruction'
          description: Instruction for the collaborator.
        relayConversationHistory:
          allOf:
          - $ref: '#/components/schemas/RelayConversationHistory'
          description: A relay conversation history for the collaborator.
      required:
      - agentId
      - agentVersion
      - collaboratorId
      - agentDescriptor
      - collaboratorName
      - collaborationInstruction
    UpdateAgentCollaboratorResponse:
      type: object
      properties:
        agentCollaborator:
          allOf:
          - $ref: '#/components/schemas/AgentCollaborator'
          description: Details about the collaborator.
      required:
      - agentCollaborator
    UpdateAgentKnowledgeBaseRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent associated with the knowledge
            base that you want to update.
        agentVersion:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The version of the agent associated with the knowledge base
            that you want to update.
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base that has been associated
            with an agent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Specifies a new description for the knowledge base associated
            with an agent.
        knowledgeBaseState:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseState'
          description: Specifies whether the agent uses the knowledge base or not
            when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html)
            request.
      required:
      - agentId
      - agentVersion
      - knowledgeBaseId
    UpdateAgentKnowledgeBaseResponse:
      type: object
      properties:
        agentKnowledgeBase:
          allOf:
          - $ref: '#/components/schemas/AgentKnowledgeBase'
          description: Contains details about the knowledge base that has been associated
            with an agent.
      required:
      - agentKnowledgeBase
    UpdateAgentRequest:
      type: object
      properties:
        agentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the agent.
        agentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: Specifies a new name for the agent.
        instruction:
          allOf:
          - $ref: '#/components/schemas/Instruction'
          description: Specifies new instructions that tell the agent what it should
            do and how it should interact with users.
        foundationModel:
          allOf:
          - $ref: '#/components/schemas/ModelIdentifier'
          description: "The identifier for the model that you want to be used for\
            \ orchestration by the agent you create.\n\nThe `modelId` to provide depends\
            \ on the type of model or throughput that you use:\n\n  * If you use a\
            \ base model, specify the model ID or its ARN. For a list of model IDs\
            \ for base models, see [Amazon Bedrock base model IDs (on-demand throughput)](https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns)\
            \ in the Amazon Bedrock User Guide.\n\n  * If you use an inference profile,\
            \ specify the inference profile ID or its ARN. For a list of inference\
            \ profile IDs, see [Supported Regions and models for cross-region inference](https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference-support.html)\
            \ in the Amazon Bedrock User Guide.\n\n  * If you use a provisioned model,\
            \ specify the ARN of the Provisioned Throughput. For more information,\
            \ see [Run inference using a Provisioned Throughput](https://docs.aws.amazon.com/bedrock/latest/userguide/prov-thru-use.html)\
            \ in the Amazon Bedrock User Guide.\n\n  * If you use a custom model,\
            \ first purchase Provisioned Throughput for it. Then specify the ARN of\
            \ the resulting provisioned model. For more information, see [Use a custom\
            \ model in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-use.html)\
            \ in the Amazon Bedrock User Guide.\n\n  * If you use an [imported model](https://docs.aws.amazon.com/bedrock/latest/userguide/model-customization-import-model.html),\
            \ specify the ARN of the imported model. You can get the model ARN from\
            \ a successful call to [CreateModelImportJob](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_CreateModelImportJob.html)\
            \ or from the Imported models page in the Amazon Bedrock console."
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Specifies a new description of the agent.
        orchestrationType:
          allOf:
          - $ref: '#/components/schemas/OrchestrationType'
          description: Specifies the type of orchestration strategy for the agent.
            This is set to `DEFAULT` orchestration type, by default.
        customOrchestration:
          allOf:
          - $ref: '#/components/schemas/CustomOrchestration'
          description: Contains details of the custom orchestration configured for
            the agent.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: 'The number of seconds for which Amazon Bedrock keeps information
            about a user''s conversation with the agent.


            A user interaction remains active for the amount of time specified. If
            no conversation occurs during this time, the session expires and Amazon
            Bedrock deletes any data provided before the timeout.'
        agentResourceRoleArn:
          allOf:
          - $ref: '#/components/schemas/AgentRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role with permissions
            to invoke API operations on the agent.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key with which to
            encrypt the agent.
        promptOverrideConfiguration:
          allOf:
          - $ref: '#/components/schemas/PromptOverrideConfiguration'
          description: Contains configurations to override prompts in different parts
            of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html).
        guardrailConfiguration:
          allOf:
          - $ref: '#/components/schemas/GuardrailConfiguration'
          description: The unique Guardrail configuration assigned to the agent when
            it is updated.
        memoryConfiguration:
          allOf:
          - $ref: '#/components/schemas/MemoryConfiguration'
          description: Specifies the new memory configuration for the agent.
        agentCollaboration:
          allOf:
          - $ref: '#/components/schemas/AgentCollaboration'
          description: The agent's collaboration role.
      required:
      - agentId
      - agentName
      - foundationModel
      - agentResourceRoleArn
    UpdateAgentResponse:
      type: object
      properties:
        agent:
          allOf:
          - $ref: '#/components/schemas/Agent'
          description: Contains details about the agent that was updated.
      required:
      - agent
    UpdateDataSourceRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base for the data source.
        dataSourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the data source.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: Specifies a new name for the data source.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Specifies a new description for the data source.
        dataSourceConfiguration:
          allOf:
          - $ref: '#/components/schemas/DataSourceConfiguration'
          description: The connection configuration for the data source that you want
            to update.
        dataDeletionPolicy:
          allOf:
          - $ref: '#/components/schemas/DataDeletionPolicy'
          description: The data deletion policy for the data source that you want
            to update.
        serverSideEncryptionConfiguration:
          allOf:
          - $ref: '#/components/schemas/ServerSideEncryptionConfiguration'
          description: Contains details about server-side encryption of the data source.
        vectorIngestionConfiguration:
          allOf:
          - $ref: '#/components/schemas/VectorIngestionConfiguration'
          description: Contains details about how to ingest the documents in the data
            source.
      required:
      - knowledgeBaseId
      - dataSourceId
      - name
      - dataSourceConfiguration
    UpdateDataSourceResponse:
      type: object
      properties:
        dataSource:
          allOf:
          - $ref: '#/components/schemas/DataSource'
          description: Contains details about the data source.
      required:
      - dataSource
    UpdateFlowAliasRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the alias.
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/FlowAliasRoutingConfiguration'
          description: Contains information about the version to which to map the
            alias.
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow.
        aliasIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowAliasIdentifier'
          description: The unique identifier of the alias.
      required:
      - name
      - routingConfiguration
      - flowIdentifier
      - aliasIdentifier
    UpdateFlowAliasResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the flow.
        routingConfiguration:
          allOf:
          - $ref: '#/components/schemas/FlowAliasRoutingConfiguration'
          description: Contains information about the version that the alias is mapped
            to.
        flowId:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowAliasId'
          description: The unique identifier of the alias.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowAliasArn'
          description: The Amazon Resource Name (ARN) of the flow.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the alias was last updated.
      required:
      - name
      - routingConfiguration
      - flowId
      - id
      - arn
      - createdAt
      - updatedAt
    UpdateFlowRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: A name for the flow.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: A description for the flow.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/FlowExecutionRoleArn'
          description: The Amazon Resource Name (ARN) of the service role with permissions
            to create and manage a flow. For more information, see [Create a service
            role for flows in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-permissions.html)
            in the Amazon Bedrock User Guide.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key to encrypt the
            flow.
        definition:
          allOf:
          - $ref: '#/components/schemas/FlowDefinition'
          description: A definition of the nodes and the connections between the nodes
            in the flow.
        flowIdentifier:
          allOf:
          - $ref: '#/components/schemas/FlowIdentifier'
          description: The unique identifier of the flow.
      required:
      - name
      - executionRoleArn
      - flowIdentifier
    UpdateFlowResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The name of the flow.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: The description of the flow.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/FlowExecutionRoleArn'
          description: The Amazon Resource Name (ARN) of the service role with permissions
            to create a flow. For more information, see [Create a service role for
            flows in Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/flows-permissions.html)
            in the Amazon Bedrock User Guide.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key that the flow
            was encrypted with.
        id:
          allOf:
          - $ref: '#/components/schemas/FlowId'
          description: The unique identifier of the flow.
        arn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The Amazon Resource Name (ARN) of the flow.
        status:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: The status of the flow. When you submit this request, the status
            will be `NotPrepared`. If updating fails, the status becomes `Failed`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the flow was last updated.
        version:
          allOf:
          - $ref: '#/components/schemas/DraftVersion'
          description: The version of the flow. When you update a flow, the version
            updated is the `DRAFT` version.
        definition:
          allOf:
          - $ref: '#/components/schemas/FlowDefinition'
          description: A definition of the nodes and the connections between nodes
            in the flow.
      required:
      - name
      - executionRoleArn
      - id
      - arn
      - status
      - createdAt
      - updatedAt
      - version
    UpdateKnowledgeBaseRequest:
      type: object
      properties:
        knowledgeBaseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The unique identifier of the knowledge base to update.
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: Specifies a new name for the knowledge base.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Specifies a new description for the knowledge base.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseRoleArn'
          description: Specifies a different Amazon Resource Name (ARN) of the IAM
            role with permissions to invoke API operations on the knowledge base.
        knowledgeBaseConfiguration:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBaseConfiguration'
          description: Specifies the configuration for the embeddings model used for
            the knowledge base. You must use the same configuration as when the knowledge
            base was created.
        storageConfiguration:
          allOf:
          - $ref: '#/components/schemas/StorageConfiguration'
          description: Specifies the configuration for the vector store used for the
            knowledge base. You must use the same configuration as when the knowledge
            base was created.
      required:
      - knowledgeBaseId
      - name
      - roleArn
      - knowledgeBaseConfiguration
    UpdateKnowledgeBaseResponse:
      type: object
      properties:
        knowledgeBase:
          allOf:
          - $ref: '#/components/schemas/KnowledgeBase'
          description: Contains details about the knowledge base.
      required:
      - knowledgeBase
    UpdatePromptRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/PromptName'
          description: A name for the prompt.
        description:
          allOf:
          - $ref: '#/components/schemas/PromptDescription'
          description: A description for the prompt.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key to encrypt the
            prompt.
        defaultVariant:
          allOf:
          - $ref: '#/components/schemas/PromptVariantName'
          description: The name of the default variant for the prompt. This value
            must match the `name` field in the relevant [PromptVariant](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html)
            object.
        variants:
          allOf:
          - $ref: '#/components/schemas/PromptVariantList'
          description: A list of objects, each containing details about a variant
            of the prompt.
        promptIdentifier:
          allOf:
          - $ref: '#/components/schemas/PromptIdentifier'
          description: The unique identifier of the prompt.
      required:
      - name
      - promptIdentifier
    UpdatePromptResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/PromptName'
          description: The name of the prompt.
        description:
          allOf:
          - $ref: '#/components/schemas/PromptDescription'
          description: The description of the prompt.
        customerEncryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the KMS key to encrypt the
            prompt.
        defaultVariant:
          allOf:
          - $ref: '#/components/schemas/PromptVariantName'
          description: The name of the default variant for the prompt. This value
            must match the `name` field in the relevant [PromptVariant](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptVariant.html)
            object.
        variants:
          allOf:
          - $ref: '#/components/schemas/PromptVariantList'
          description: A list of objects, each containing details about a variant
            of the prompt.
        id:
          allOf:
          - $ref: '#/components/schemas/PromptId'
          description: The unique identifier of the prompt.
        arn:
          allOf:
          - $ref: '#/components/schemas/PromptArn'
          description: The Amazon Resource Name (ARN) of the prompt.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the prompt. When you update a prompt, the version
            updated is the `DRAFT` version.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the prompt was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/DateTimestamp'
          description: The time at which the prompt was last updated.
      required:
      - name
      - id
      - arn
      - version
      - createdAt
      - updatedAt
    Url:
      type: string
      pattern: ^https?://[A-Za-z0-9][^\s]*$
    UrlConfiguration:
      type: object
      properties:
        seedUrls:
          allOf:
          - $ref: '#/components/schemas/SeedUrls'
          description: One or more seed or starting point URLs.
      description: The configuration of web URLs that you want to crawl. You should
        be authorized to crawl the URLs.
    UserAgent:
      type: string
      minLength: 15
      maxLength: 40
    UserAgentHeader:
      type: string
      minLength: 61
      maxLength: 86
    ValidateFlowDefinitionRequest:
      type: object
      properties:
        definition:
          allOf:
          - $ref: '#/components/schemas/FlowDefinition'
          description: The definition of a flow to validate.
      required:
      - definition
    ValidateFlowDefinitionResponse:
      type: object
      properties:
        validations:
          allOf:
          - $ref: '#/components/schemas/FlowValidations'
          description: Contains an array of objects, each of which contains an error
            identified by validation.
      required:
      - validations
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/NonBlankString'
        fieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: A list of objects containing fields that caused validation
            errors and their corresponding validation error messages.
      description: Input validation failed. Check your request parameters and retry
        the request.
    ValidationExceptionField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NonBlankString'
          description: The name of the field.
        message:
          allOf:
          - $ref: '#/components/schemas/NonBlankString'
          description: A message describing why this field failed validation.
      required:
      - name
      - message
      description: Stores information about a field passed inside a request that resulted
        in an validation error.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    VectorIngestionConfiguration:
      type: object
      properties:
        chunkingConfiguration:
          allOf:
          - $ref: '#/components/schemas/ChunkingConfiguration'
          description: Details about how to chunk the documents in the data source.
            A _chunk_ refers to an excerpt from a data source that is returned when
            the knowledge base that it belongs to is queried.
        customTransformationConfiguration:
          allOf:
          - $ref: '#/components/schemas/CustomTransformationConfiguration'
          description: A custom document transformer for parsed data source documents.
        parsingConfiguration:
          allOf:
          - $ref: '#/components/schemas/ParsingConfiguration'
          description: Configurations for a parser to use for parsing documents in
            your data source. If you exclude this field, the default parser will be
            used.
        contextEnrichmentConfiguration:
          allOf:
          - $ref: '#/components/schemas/ContextEnrichmentConfiguration'
          description: The context enrichment configuration used for ingestion of
            the data into the vector store.
      description: Contains details about how to ingest the documents in a data source.
    VectorKnowledgeBaseConfiguration:
      type: object
      properties:
        embeddingModelArn:
          allOf:
          - $ref: '#/components/schemas/BedrockEmbeddingModelArn'
          description: The Amazon Resource Name (ARN) of the model used to create
            vector embeddings for the knowledge base.
        embeddingModelConfiguration:
          allOf:
          - $ref: '#/components/schemas/EmbeddingModelConfiguration'
          description: The embeddings model configuration details for the vector model
            used in Knowledge Base.
        supplementalDataStorageConfiguration:
          allOf:
          - $ref: '#/components/schemas/SupplementalDataStorageConfiguration'
          description: If you include multimodal data from your data source, use this
            object to specify configurations for the storage location of the images
            extracted from your documents. These images can be retrieved and returned
            to the end user. They can also be used in generation when using [RetrieveAndGenerate](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html).
      required:
      - embeddingModelArn
      description: Contains details about the model used to create vector embeddings
        for the knowledge base.
    Version:
      type: string
      pattern: ^(DRAFT|[0-9]{0,4}[1-9][0-9]{0,4})$
      minLength: 1
      maxLength: 5
    WebCrawlerConfiguration:
      type: object
      properties:
        crawlerLimits:
          allOf:
          - $ref: '#/components/schemas/WebCrawlerLimits'
          description: The configuration of crawl limits for the web URLs.
        inclusionFilters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: A list of one or more inclusion regular expression patterns
            to include certain URLs. If you specify an inclusion and exclusion filter/pattern
            and both match a URL, the exclusion filter takes precedence and the web
            content of the URL isn’t crawled.
        exclusionFilters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: A list of one or more exclusion regular expression patterns
            to exclude certain URLs. If you specify an inclusion and exclusion filter/pattern
            and both match a URL, the exclusion filter takes precedence and the web
            content of the URL isn’t crawled.
        scope:
          allOf:
          - $ref: '#/components/schemas/WebScopeType'
          description: 'The scope of what is crawled for your URLs.


            You can choose to crawl only web pages that belong to the same host or
            primary domain. For example, only web pages that contain the seed URL
            "https://docs.aws.amazon.com/bedrock/latest/userguide/" and no other domains.
            You can choose to include sub domains in addition to the host or primary
            domain. For example, web pages that contain "aws.amazon.com" can also
            include sub domain "docs.aws.amazon.com".'
        userAgent:
          allOf:
          - $ref: '#/components/schemas/UserAgent'
          description: Returns the user agent suffix for your web crawler.
        userAgentHeader:
          allOf:
          - $ref: '#/components/schemas/UserAgentHeader'
          description: A string used for identifying the crawler or bot when it accesses
            a web server. The user agent header value consists of the `bedrockbot`,
            UUID, and a user agent suffix for your crawler (if one is provided). By
            default, it is set to `bedrockbot_UUID`. You can optionally append a custom
            suffix to `bedrockbot_UUID` to allowlist a specific user agent permitted
            to access your source URLs.
      description: The configuration of web URLs that you want to crawl. You should
        be authorized to crawl the URLs.
    WebCrawlerLimits:
      type: object
      properties:
        rateLimit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The max rate at which pages are crawled, up to 300 per minute
            per host.
        maxPages:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The max number of web pages crawled from your source URLs,
            up to 25,000 pages. If the web pages exceed this limit, the data source
            sync will fail and no web pages will be ingested.
      description: The rate limits for the URLs that you want to crawl. You should
        be authorized to crawl the URLs.
    WebDataSourceConfiguration:
      type: object
      properties:
        sourceConfiguration:
          allOf:
          - $ref: '#/components/schemas/WebSourceConfiguration'
          description: The source configuration details for the web data source.
        crawlerConfiguration:
          allOf:
          - $ref: '#/components/schemas/WebCrawlerConfiguration'
          description: The Web Crawler configuration details for the web data source.
      required:
      - sourceConfiguration
      description: The configuration details for the web data source.
    WebScopeType:
      type: string
      enum:
      - HOST_ONLY
      - SUBDOMAINS
    WebSourceConfiguration:
      type: object
      properties:
        urlConfiguration:
          allOf:
          - $ref: '#/components/schemas/UrlConfiguration'
          description: The configuration of the URL/URLs.
      required:
      - urlConfiguration
      description: The configuration of the URL/URLs for the web content that you
        want to crawl. You should be authorized to crawl the URLs.
    WorkgroupArn:
      type: string
      pattern: ^(arn:(aws(-[a-z]+)*):redshift-serverless:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:workgroup/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$
