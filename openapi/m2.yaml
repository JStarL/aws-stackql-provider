openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: m2
  x-aws-serviceName: m2
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-05'
  version: '2021-04-28'
  title: AWSMainframeModernization
  description: |-
    Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
servers:
- description: The AWSMainframeModernization regional endpoint
  url: https://m2.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths: {}
components:
  schemas:
    AlternateKeyList:
      type: array
      items:
        $ref: '#/components/schemas/AlternateKey'
    ApplicationDeploymentLifecycle:
      type: string
      enum:
      - Deploying
      - Deployed
    ApplicationLifecycle:
      type: string
      enum:
      - Creating
      - Created
      - Available
      - Ready
      - Starting
      - Running
      - Stopping
      - Stopped
      - Failed
      - Deleting
      - Deleting From Environment
    ApplicationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ApplicationSummary'
    ApplicationVersionLifecycle:
      type: string
      enum:
      - Creating
      - Available
      - Failed
    ApplicationVersionSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ApplicationVersionSummary'
    Arn:
      type: string
      pattern: ^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]|):[0-9]{12}:[A-Za-z0-9/][A-Za-z0-9:_/+=,@.-]{0,1023}$
    ArnList:
      type: array
      items:
        $ref: '#/components/schemas/Arn'
    AuthSecretsManagerArn:
      type: string
      minLength: 20
      maxLength: 2048
    BatchJobDefinition:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/FileBatchJobDefinition'
        description: |-
          Specifies a file containing a batch job definition.
      - allOf:
        - $ref: '#/components/schemas/ScriptBatchJobDefinition'
        description: |-
          A script containing a batch job definition.
      description: |-
        Defines the details of a batch job.
    BatchJobDefinitions:
      type: array
      items:
        $ref: '#/components/schemas/BatchJobDefinition'
    BatchJobExecutionStatus:
      type: string
      enum:
      - Submitting
      - Holding
      - Dispatching
      - Running
      - Cancelling
      - Cancelled
      - Succeeded
      - Failed
      - Purged
      - Succeeded With Warning
    BatchJobExecutionSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/BatchJobExecutionSummary'
    BatchJobIdentifier:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/FileBatchJobIdentifier'
        description: |-
          Specifies a file associated with a specific batch job.
      - allOf:
        - $ref: '#/components/schemas/ScriptBatchJobIdentifier'
        description: |-
          A batch job identifier in which the batch job to run is identified by the script name.
      - allOf:
        - $ref: '#/components/schemas/S3BatchJobIdentifier'
        description: |-
          Specifies an Amazon S3 location that identifies the batch jobs that you want to run. Use this identifier to run ad hoc batch jobs.
      - allOf:
        - $ref: '#/components/schemas/RestartBatchJobIdentifier'
        description: |-
          Specifies the required information for restart, including `executionId` and `JobStepRestartMarker`.
      description: |-
        Identifies a specific batch job.
    BatchJobParametersMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/BatchParamValue'
      description: 'Job parameters are optional.

        Can contain up to 500 entries.'
    BatchJobStepList:
      type: array
      items:
        $ref: '#/components/schemas/JobStep'
    BatchJobType:
      type: string
      enum:
      - VSE
      - JES2
      - JES3
    BatchParamKey:
      type: string
      pattern: ^[A-Za-z][A-Za-z0-9]{1,31}$
      minLength: 1
      maxLength: 32
    BatchParamValue:
      type: string
      minLength: 0
      maxLength: 1024
    Boolean:
      type: boolean
      default: false
    CapacityValue:
      type: integer
    ClientToken:
      type: string
      pattern: ^[!-~]+$
      maxLength: 128
    DataSetExportConfig:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The Amazon S3 location of the data sets.
      - allOf:
        - $ref: '#/components/schemas/DataSetExportList'
        description: |-
          The data sets.
      description: |-
        Identifies one or more data sets you want to import with the CreateDataSetExportTask operation.
    DataSetExportList:
      type: array
      items:
        $ref: '#/components/schemas/DataSetExportItem'
    DataSetExportTaskList:
      type: array
      items:
        $ref: '#/components/schemas/DataSetExportTask'
    DataSetImportConfig:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/String2000'
        description: |-
          The Amazon S3 location of the data sets.
      - allOf:
        - $ref: '#/components/schemas/DataSetImportList'
        description: |-
          The data sets.
      description: |-
        Identifies one or more data sets you want to import with the CreateDataSetImportTask operation.
    DataSetImportList:
      type: array
      items:
        $ref: '#/components/schemas/DataSetImportItem'
    DataSetImportTaskList:
      type: array
      items:
        $ref: '#/components/schemas/DataSetImportTask'
    DataSetTaskLifecycle:
      type: string
      enum:
      - Creating
      - Running
      - Completed
      - Failed
    DataSetsSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/DataSetSummary'
    DatasetDetailOrgAttributes:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VsamDetailAttributes'
        description: |-
          The details of a VSAM data set.
      - allOf:
        - $ref: '#/components/schemas/GdgDetailAttributes'
        description: |-
          The generation data group of the data set.
      - allOf:
        - $ref: '#/components/schemas/PoDetailAttributes'
        description: |-
          The details of a PO type data set.
      - allOf:
        - $ref: '#/components/schemas/PsDetailAttributes'
        description: |-
          The details of a PS type data set.
      description: |-
        Additional details about the data set. Different attributes correspond to different data set organizations. The values are populated based on datasetOrg, storageType and backend (Blu Age or Micro Focus).
    DatasetOrgAttributes:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/VsamAttributes'
        description: |-
          The details of a VSAM data set.
      - allOf:
        - $ref: '#/components/schemas/GdgAttributes'
        description: |-
          The generation data group of the data set.
      - allOf:
        - $ref: '#/components/schemas/PoAttributes'
        description: |-
          The details of a PO type data set.
      - allOf:
        - $ref: '#/components/schemas/PsAttributes'
        description: |-
          The details of a PS type data set.
      description: |-
        Additional details about the data set. Different attributes correspond to different data set organizations. The values are populated based on datasetOrg, storageType and backend (Blu Age or Micro Focus).
    Definition:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/String2000'
        description: |-
          The S3 bucket that contains the application definition.
      - allOf:
        - $ref: '#/components/schemas/StringFree65000'
        description: |-
          The content of the application definition. This is a JSON object that contains the resource configuration/definitions that identify an application.
      description: |-
        The application definition for a particular application.
    DeploymentLifecycle:
      type: string
      enum:
      - Deploying
      - Succeeded
      - Failed
      - Updating Deployment
    DeploymentList:
      type: array
      items:
        $ref: '#/components/schemas/DeploymentSummary'
    EngineType:
      type: string
      enum:
      - microfocus
      - bluage
    EngineVersion:
      type: string
      pattern: ^\S{1,10}$
    EngineVersionsSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/EngineVersionsSummary'
    EntityDescription:
      type: string
      minLength: 0
      maxLength: 500
    EntityName:
      type: string
      pattern: ^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$
    EntityNameList:
      type: array
      items:
        $ref: '#/components/schemas/EntityName'
    EnvironmentLifecycle:
      type: string
      enum:
      - Creating
      - Available
      - Updating
      - Deleting
      - Failed
      - UnHealthy
    EnvironmentSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/EnvironmentSummary'
    ExternalLocation:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/String2000'
        description: |-
          The URI of the Amazon S3 bucket.
      description: |-
        Defines an external storage location.
    Identifier:
      type: string
      pattern: ^\S{1,80}$
    IdentifierList:
      type: array
      items:
        $ref: '#/components/schemas/Identifier'
    Integer:
      type: integer
      default: 0
    JobIdentifier:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The name of the file that contains the batch job definition.
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The name of the script that contains the batch job definition.
      description: |-
        Identifies a specific batch job.
    KMSKeyId:
      type: string
      pattern: ^[a-zA-Z0-9:/_-]+$
      minLength: 1
      maxLength: 256
    LogGroupIdentifier:
      type: string
      minLength: 1
      maxLength: 512
    LogGroupSummaries:
      type: array
      items:
        $ref: '#/components/schemas/LogGroupSummary'
    MaxResults:
      type: integer
      minimum: 1
      maximum: 2000
    NetworkType:
      type: string
      enum:
      - ipv4
      - dual
    NextToken:
      type: string
      pattern: ^\S{1,2000}$
    PortList:
      type: array
      items:
        $ref: '#/components/schemas/Integer'
    StorageConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/EfsStorageConfiguration'
        description: |-
          Defines the storage configuration for an Amazon EFS file system.
      - allOf:
        - $ref: '#/components/schemas/FsxStorageConfiguration'
        description: |-
          Defines the storage configuration for an Amazon FSx file system.
      description: |-
        Defines the storage configuration for a runtime environment.
    StorageConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/StorageConfiguration'
    String100:
      type: string
      pattern: ^\S{1,100}$
    String20:
      type: string
      pattern: ^\S{1,20}$
    String200:
      type: string
      pattern: ^\S{1,200}$
    String2000:
      type: string
      pattern: ^\S{1,2000}$
    String20List:
      type: array
      items:
        $ref: '#/components/schemas/String20'
    String50:
      type: string
      pattern: ^\S{1,50}$
    String50List:
      type: array
      items:
        $ref: '#/components/schemas/String50'
    StringFree65000:
      type: string
      minLength: 1
      maxLength: 65000
    TagKey:
      type: string
      pattern: ^(?!aws:).+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Timestamp:
      type: string
      format: date-time
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - unknownOperation
      - cannotParse
      - featureNotAvailable
      - unsupportedEngineVersion
      - fieldValidationFailed
      - other
    Version:
      type: integer
      minimum: 1
