openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: glacier
  x-aws-serviceName: glacier
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2012-06-01'
  title: Amazon Glacier
  description: |-
    Amazon S3 Glacier (Glacier) is a storage solution for "cold data."

    Glacier is an extremely low-cost storage service that provides secure, durable, and easy-to-use storage for data backup and archival. With Glacier, customers can store their data cost effectively for months, years, or decades. Glacier also enables customers to offload the administrative burdens of operating and scaling storage to AWS, so they don't have to worry about capacity planning, hardware provisioning, data replication, hardware failure and recovery, or time-consuming hardware migrations.

    Glacier is a great storage choice when low storage cost is paramount and your data is rarely retrieved. If your application requires fast or frequent access to your data, consider using Amazon S3. For more information, see [Amazon Simple Storage Service (Amazon S3)](http://aws.amazon.com/s3/).

    You can store any kind of data in any format. There is no maximum limit on the total amount of data you can store in Glacier.

    If you are a first-time user of Glacier, we recommend that you begin by reading the following sections in the _Amazon S3 Glacier Developer Guide_ :

      * [What is Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html) \- This section of the Developer Guide describes the underlying data model, the operations it supports, and the AWS SDKs that you can use to interact with the service.

      * [Getting Started with Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html) \- The Getting Started section walks you through the process of creating a vault, uploading archives, creating jobs to download archives, retrieving the job output, and deleting archives.
servers:
- description: The Amazon Glacier regional endpoint
  url: https://glacier.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}:
    delete:
      operationId: AbortMultipartUpload
      description: |-
        This operation aborts a multipart upload identified by the upload ID.

        After the Abort Multipart Upload request succeeds, you cannot upload any more parts to the multipart upload or complete the multipart upload. Aborting a completed upload fails. However, aborting an already-aborted upload will succeed, for a short time. For more information about uploading a part and completing a multipart upload, see UploadMultipartPart and CompleteMultipartUpload.

        This operation is idempotent.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Working with Archives in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html) and [Abort Multipart Upload](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-abort-upload.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: uploadId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    post:
      operationId: CompleteMultipartUpload
      description: |-
        You call this operation to inform Amazon S3 Glacier (Glacier) that all the archive parts have been uploaded and that Glacier can now assemble the archive from the uploaded parts. After assembling and saving the archive to the vault, Glacier returns the URI path of the newly created archive resource. Using the URI path, you can then access the archive. After you upload an archive, you should save the archive ID returned to retrieve the archive at a later point. You can also get the vault inventory to obtain a list of archive IDs in a vault. For more information, see InitiateJob.

        In the request, you must include the computed SHA256 tree hash of the entire archive you have uploaded. For information about computing a SHA256 tree hash, see [Computing Checksums](https://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html). On the server side, Glacier also constructs the SHA256 tree hash of the assembled archive. If the values match, Glacier saves the archive to the vault; otherwise, it returns an error, and the operation fails. The ListParts operation returns a list of parts uploaded for a specific multipart upload. It includes checksum information for each uploaded part that can be used to debug a bad checksum issue.

        Additionally, Glacier also checks for any missing content ranges when assembling the archive, if missing content ranges are found, Glacier returns an error and the operation fails.

        Complete Multipart Upload is an idempotent operation. After your first successful complete multipart upload, if you call the operation again within a short period, the operation will succeed and return the same archive ID. This is useful in the event you experience a network issue that causes an aborted connection or receive a 500 server error, in which case you can repeat your Complete Multipart Upload request and get the same archive ID without creating duplicate archives. Note, however, that after the multipart upload completes, you cannot call the List Parts operation and the multipart upload will not appear in List Multipart Uploads response, even if idempotent complete is possible.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Uploading Large Archives in Parts (Multipart Upload)](https://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html) and [Complete Multipart Upload](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-complete-upload.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: uploadId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: x-amz-archive-size
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/string'
      - name: x-amz-sha256-tree-hash
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '201': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    get:
      operationId: ListParts
      description: |-
        This operation lists the parts of an archive that have been uploaded in a specific multipart upload. You can make this request at any time during an in-progress multipart upload before you complete the upload (see CompleteMultipartUpload. List Parts returns an error for completed uploads. The list returned in the List Parts response is sorted by part range.

        The List Parts operation supports pagination. By default, this operation returns up to 50 uploaded parts in the response. You should always check the response for a `marker` at which to continue the list; if there are no more items the `marker` is `null`. To return a list of parts that begins at a specific part, set the `marker` request parameter to the value you obtained from a previous List Parts request. You can also limit the number of parts returned in the response by specifying the `limit` parameter in the request.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and the underlying REST API, see [Working with Archives in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html) and [List Parts](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-list-parts.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: uploadId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/string'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    put:
      operationId: UploadMultipartPart
      description: "This operation uploads a part of an archive. You can upload archive\
        \ parts in any order. You can also upload them in parallel. You can upload\
        \ up to 10,000 parts for a multipart upload.\n\nAmazon Glacier rejects your\
        \ upload part request if any of the following conditions is true:\n\n  * **SHA256\
        \ tree hash does not match** To ensure that part data is not corrupted in\
        \ transmission, you compute a SHA256 tree hash of the part and include it\
        \ in your request. Upon receiving the part data, Amazon S3 Glacier also computes\
        \ a SHA256 tree hash. If these hash values don't match, the operation fails.\
        \ For information about computing a SHA256 tree hash, see [Computing Checksums](https://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html).\n\
        \n  * **Part size does not match** The size of each part except the last must\
        \ match the size specified in the corresponding InitiateMultipartUpload request.\
        \ The size of the last part must be the same size as, or smaller than, the\
        \ specified size.\n\nIf you upload a part whose size is smaller than the part\
        \ size you specified in your initiate multipart upload request and that part\
        \ is not the last part, then the upload part request will succeed. However,\
        \ the subsequent Complete Multipart Upload request will fail.\n\n  * **Range\
        \ does not align** The byte range value in the request does not align with\
        \ the part size specified in the corresponding initiate request. For example,\
        \ if you specify a part size of 4194304 bytes (4 MB), then 0 to 4194303 bytes\
        \ (4 MB - 1) and 4194304 (4 MB) to 8388607 (8 MB - 1) are valid part ranges.\
        \ However, if you set a range value of 2 MB to 6 MB, the range does not align\
        \ with the part size and the upload will fail. \n\nThis operation is idempotent.\
        \ If you upload the same part multiple times, the data included in the most\
        \ recent request overwrites the previously uploaded data.\n\nAn AWS account\
        \ has full permission to perform all operations (actions). However, AWS Identity\
        \ and Access Management (IAM) users don't have any permissions by default.\
        \ You must grant them explicit permission to perform specific actions. For\
        \ more information, see [Access Control Using AWS Identity and Access Management\
        \ (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).\n\
        \nFor conceptual information and underlying REST API, see [Uploading Large\
        \ Archives in Parts (Multipart Upload)](https://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html)\
        \ and [Upload Part ](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-upload-part.html)\
        \ in the _Amazon Glacier Developer Guide_."
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: uploadId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: x-amz-sha256-tree-hash
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/string'
      - name: Content-Range
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  $ref: '#/components/schemas/Stream'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '408':
          description: |-
            Returned if, when uploading an archive, Amazon S3 Glacier times out while receiving the upload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/lock-policy:
    delete:
      operationId: AbortVaultLock
      description: |-
        This operation aborts the vault locking process if the vault lock is not in the `Locked` state. If the vault lock is in the `Locked` state when this operation is requested, the operation returns an `AccessDeniedException` error. Aborting the vault locking process removes the vault lock policy from the specified vault.

        A vault lock is put into the `InProgress` state by calling InitiateVaultLock. A vault lock is put into the `Locked` state by calling CompleteVaultLock. You can get the state of a vault lock by calling GetVaultLock. For more information about the vault locking process, see [Amazon Glacier Vault Lock](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html). For more information about vault lock policies, see [Amazon Glacier Access Control with Vault Lock Policies](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html).

        This operation is idempotent. You can successfully invoke this operation multiple times, if the vault lock is in the `InProgress` state or if there is no policy associated with the vault.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    get:
      operationId: GetVaultLock
      description: |-
        This operation retrieves the following attributes from the `lock-policy` subresource set on the specified vault:

          * The vault lock policy set on the vault.

          * The state of the vault lock, which is either `InProgess` or `Locked`.

          * When the lock ID expires. The lock ID is used to complete the vault locking process.

          * When the vault lock was initiated and put into the `InProgress` state.

        A vault lock is put into the `InProgress` state by calling InitiateVaultLock. A vault lock is put into the `Locked` state by calling CompleteVaultLock. You can abort the vault locking process by calling AbortVaultLock. For more information about the vault locking process, [Amazon Glacier Vault Lock](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html).

        If there is no vault lock policy set on the vault, the operation returns a `404 Not found` error. For more information about vault lock policies, [Amazon Glacier Access Control with Vault Lock Policies](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html).
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    post:
      operationId: InitiateVaultLock
      description: |-
        This operation initiates the vault locking process by doing the following:

          * Installing a vault lock policy on the specified vault.

          * Setting the lock state of vault lock to `InProgress`.

          * Returning a lock ID, which is used to complete the vault locking process.

        You can set one vault lock policy for each vault and this policy can be up to 20 KB in size. For more information about vault lock policies, see [Amazon Glacier Access Control with Vault Lock Policies](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html).

        You must complete the vault locking process within 24 hours after the vault lock enters the `InProgress` state. After the 24 hour window ends, the lock ID expires, the vault automatically exits the `InProgress` state, and the vault lock policy is removed from the vault. You call CompleteVaultLock to complete the vault locking process by setting the state of the vault lock to `Locked`.

        After a vault lock is in the `Locked` state, you cannot initiate a new vault lock for the vault.

        You can abort the vault locking process by calling AbortVaultLock. You can get the state of the vault lock by calling GetVaultLock. For more information about the vault locking process, [Amazon Glacier Vault Lock](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html).

        If this operation is called when the vault lock is in the `InProgress` state, the operation returns an `AccessDeniedException` error. When the vault lock is in the `InProgress` state you must call AbortVaultLock before you can initiate a new vault lock policy.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policy:
                  $ref: '#/components/schemas/VaultLockPolicy'
      responses:
        '201': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/tags?operation=add:
    post:
      operationId: AddTagsToVault
      description: |-
        This operation adds the specified tags to a vault. Each tag is composed of a key and a value. Each vault can have up to 10 tags. If your request would cause the tag limit for the vault to be exceeded, the operation throws the `LimitExceededException` error. If a tag already exists on the vault under a specified key, the existing key value will be overwritten. For more information about tags, see [Tagging Amazon S3 Glacier Resources](https://docs.aws.amazon.com/amazonglacier/latest/dev/tagging.html).
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/lock-policy/{lockId}:
    post:
      operationId: CompleteVaultLock
      description: |-
        This operation completes the vault locking process by transitioning the vault lock from the `InProgress` state to the `Locked` state, which causes the vault lock policy to become unchangeable. A vault lock is put into the `InProgress` state by calling InitiateVaultLock. You can obtain the state of the vault lock by calling GetVaultLock. For more information about the vault locking process, [Amazon Glacier Vault Lock](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html).

        This operation is idempotent. This request is always successful if the vault lock is in the `Locked` state and the provided lock ID matches the lock ID originally used to lock the vault.

        If an invalid lock ID is passed in the request when the vault lock is in the `Locked` state, the operation returns an `AccessDeniedException` error. If an invalid lock ID is passed in the request when the vault lock is in the `InProgress` state, the operation throws an `InvalidParameter` error.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: lockId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}:
    put:
      operationId: CreateVault
      description: |-
        This operation creates a new vault with the specified name. The name of the vault must be unique within a region for an AWS account. You can create up to 1,000 vaults per account. If you need to create more vaults, contact Amazon S3 Glacier.

        You must use the following guidelines when naming a vault.

          * Names can be between 1 and 255 characters long.

          * Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period).

        This operation is idempotent.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Creating a Vault in Amazon Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/creating-vaults.html) and [Create Vault ](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-put.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '201': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    delete:
      operationId: DeleteVault
      description: |-
        This operation deletes a vault. Amazon S3 Glacier will delete a vault only if there are no archives in the vault as of the last inventory and there have been no writes to the vault since the last inventory. If either of these conditions is not satisfied, the vault deletion fails (that is, the vault is not removed) and Amazon S3 Glacier returns an error. You can use DescribeVault to return the number of archives in a vault, and you can use [Initiate a Job (POST jobs)](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-initiate-job-post.html) to initiate a new inventory retrieval for a vault. The inventory contains the archive IDs you use to delete archives using [Delete Archive (DELETE archive)](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-delete.html).

        This operation is idempotent.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Deleting a Vault in Amazon Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/deleting-vaults.html) and [Delete Vault ](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-delete.html) in the _Amazon S3 Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    get:
      operationId: DescribeVault
      description: |-
        This operation returns information about a vault, including the vault's Amazon Resource Name (ARN), the date the vault was created, the number of archives it contains, and the total size of all the archives in the vault. The number of archives and their total size are as of the last inventory generation. This means that if you add or remove an archive from a vault, and then immediately use Describe Vault, the change in contents will not be immediately reflected. If you want to retrieve the latest inventory of the vault, use InitiateJob. Amazon S3 Glacier generates vault inventories approximately daily. For more information, see [Downloading a Vault Inventory in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-inventory.html).

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Retrieving Vault Metadata in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/retrieving-vault-info.html) and [Describe Vault ](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-get.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/archives/{archiveId}:
    delete:
      operationId: DeleteArchive
      description: |-
        This operation deletes an archive from a vault. Subsequent requests to initiate a retrieval of this archive will fail. Archive retrievals that are in progress for this archive ID may or may not succeed according to the following scenarios:

          * If the archive retrieval job is actively preparing the data for download when Amazon S3 Glacier receives the delete archive request, the archival retrieval operation might fail.

          * If the archive retrieval job has successfully prepared the archive for download when Amazon S3 Glacier receives the delete archive request, you will be able to download the output.

        This operation is idempotent. Attempting to delete an already-deleted archive does not result in an error.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Deleting an Archive in Amazon Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/deleting-an-archive.html) and [Delete Archive](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-delete.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: archiveId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/access-policy:
    delete:
      operationId: DeleteVaultAccessPolicy
      description: |-
        This operation deletes the access policy associated with the specified vault. The operation is eventually consistent; that is, it might take some time for Amazon S3 Glacier to completely remove the access policy, and you might still see the effect of the policy for a short time after you send the delete request.

        This operation is idempotent. You can invoke delete multiple times, even if there is no policy associated with the vault. For more information about vault access policies, see [Amazon Glacier Access Control with Vault Access Policies](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html).
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    get:
      operationId: GetVaultAccessPolicy
      description: |-
        This operation retrieves the `access-policy` subresource set on the vault; for more information on setting this subresource, see [Set Vault Access Policy (PUT access-policy)](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-SetVaultAccessPolicy.html). If there is no access policy set on the vault, the operation returns a `404 Not found` error. For more information about vault access policies, see [Amazon Glacier Access Control with Vault Access Policies](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html).
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    put:
      operationId: SetVaultAccessPolicy
      description: |-
        This operation configures an access policy for a vault and will overwrite an existing policy. To configure a vault access policy, send a PUT request to the `access-policy` subresource of the vault. An access policy is specific to a vault and is also called a vault subresource. You can set one access policy per vault and the policy can be up to 20 KB in size. For more information about vault access policies, see [Amazon Glacier Access Control with Vault Access Policies](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html).
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policy:
                  $ref: '#/components/schemas/VaultAccessPolicy'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/notification-configuration:
    delete:
      operationId: DeleteVaultNotifications
      description: |-
        This operation deletes the notification configuration set for a vault. The operation is eventually consistent; that is, it might take some time for Amazon S3 Glacier to completely disable the notifications and you might still receive some notifications for a short time after you send the delete request.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Configuring Vault Notifications in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html) and [Delete Vault Notification Configuration ](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-delete.html) in the Amazon S3 Glacier Developer Guide.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    get:
      operationId: GetVaultNotifications
      description: |-
        This operation retrieves the `notification-configuration` subresource of the specified vault.

        For information about setting a notification configuration on a vault, see SetVaultNotifications. If a notification configuration for a vault is not set, the operation returns a `404 Not Found` error. For more information about vault notifications, see [Configuring Vault Notifications in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html).

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Configuring Vault Notifications in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html) and [Get Vault Notification Configuration ](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-get.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    put:
      operationId: SetVaultNotifications
      description: "This operation configures notifications that will be sent when\
        \ specific events happen to a vault. By default, you don't get any notifications.\n\
        \nTo configure vault notifications, send a PUT request to the `notification-configuration`\
        \ subresource of the vault. The request should include a JSON document that\
        \ provides an Amazon SNS topic and specific events for which you want Amazon\
        \ S3 Glacier to send notifications to the topic.\n\nAmazon SNS topics must\
        \ grant permission to the vault to be allowed to publish notifications to\
        \ the topic. You can configure a vault to publish a notification for the following\
        \ vault events:\n\n  * **ArchiveRetrievalCompleted** This event occurs when\
        \ a job that was initiated for an archive retrieval is completed (InitiateJob).\
        \ The status of the completed job can be \"Succeeded\" or \"Failed\". The\
        \ notification sent to the SNS topic is the same output as returned from DescribeJob.\
        \ \n\n  * **InventoryRetrievalCompleted** This event occurs when a job that\
        \ was initiated for an inventory retrieval is completed (InitiateJob). The\
        \ status of the completed job can be \"Succeeded\" or \"Failed\". The notification\
        \ sent to the SNS topic is the same output as returned from DescribeJob. \n\
        \nAn AWS account has full permission to perform all operations (actions).\
        \ However, AWS Identity and Access Management (IAM) users don't have any permissions\
        \ by default. You must grant them explicit permission to perform specific\
        \ actions. For more information, see [Access Control Using AWS Identity and\
        \ Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).\n\
        \nFor conceptual information and underlying REST API, see [Configuring Vault\
        \ Notifications in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html)\
        \ and [Set Vault Notification Configuration ](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-put.html)\
        \ in the _Amazon Glacier Developer Guide_."
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vaultNotificationConfig:
                  $ref: '#/components/schemas/VaultNotificationConfig'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/jobs/{jobId}:
    get:
      operationId: DescribeJob
      description: |-
        This operation returns information about a job you previously initiated, including the job initiation date, the user who initiated the job, the job status code/message and the Amazon SNS topic to notify after Amazon S3 Glacier (Glacier) completes the job. For more information about initiating a job, see InitiateJob.

        This operation enables you to check the status of your job. However, it is strongly recommended that you set up an Amazon SNS topic and specify it in your initiate job request so that Glacier can notify the topic after it completes the job.

        A job ID will not expire for at least 24 hours after Glacier completes the job.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For more information about using this operation, see the documentation for the underlying REST API [Describe Job](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-describe-job-get.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: jobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/policies/data-retrieval:
    get:
      operationId: GetDataRetrievalPolicy
      description: |-
        This operation returns the current data retrieval policy for the account and region specified in the GET request. For more information about data retrieval policies, see [Amazon Glacier Data Retrieval Policies](https://docs.aws.amazon.com/amazonglacier/latest/dev/data-retrieval-policy.html).
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    put:
      operationId: SetDataRetrievalPolicy
      description: |-
        This operation sets and then enacts a data retrieval policy in the region specified in the PUT request. You can set one policy per region for an AWS account. The policy is enacted within a few minutes of a successful PUT operation.

        The set policy operation does not affect retrieval jobs that were in progress before the policy was enacted. For more information about data retrieval policies, see [Amazon Glacier Data Retrieval Policies](https://docs.aws.amazon.com/amazonglacier/latest/dev/data-retrieval-policy.html).
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Policy:
                  $ref: '#/components/schemas/DataRetrievalPolicy'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/jobs/{jobId}/output:
    get:
      operationId: GetJobOutput
      description: |-
        This operation downloads the output of the job you initiated using InitiateJob. Depending on the job type you specified when you initiated the job, the output will be either the content of an archive or a vault inventory.

        You can download all the job output or download a portion of the output by specifying a byte range. In the case of an archive retrieval job, depending on the byte range you specify, Amazon S3 Glacier (Glacier) returns the checksum for the portion of the data. You can compute the checksum on the client and verify that the values match to ensure the portion you downloaded is the correct data.

        A job ID will not expire for at least 24 hours after Glacier completes the job. That a byte range. For both archive and inventory retrieval jobs, you should verify the downloaded size against the size returned in the headers from the **Get Job Output** response.

        For archive retrieval jobs, you should also verify that the size is what you expected. If you download a portion of the output, the expected size is based on the range of bytes you specified. For example, if you specify a range of `bytes=0-1048575`, you should verify your download size is 1,048,576 bytes. If you download an entire archive, the expected size is the size of the archive when you uploaded it to Amazon S3 Glacier The expected size is also returned in the headers from the **Get Job Output** response.

        In the case of an archive retrieval job, depending on the byte range you specify, Glacier returns the checksum for the portion of the data. To ensure the portion you downloaded is the correct data, compute the checksum on the client, verify that the values match, and verify that the size is what you expected.

        A job ID does not expire for at least 24 hours after Glacier completes the job. That is, you can download the job output within the 24 hours period after Amazon Glacier completes the job.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and the underlying REST API, see [Downloading a Vault Inventory](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-inventory.html), [Downloading an Archive](https://docs.aws.amazon.com/amazonglacier/latest/dev/downloading-an-archive.html), and [Get Job Output ](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-job-output-get.html)
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: jobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: Range
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/jobs:
    post:
      operationId: InitiateJob
      description: |-
        This operation initiates a job of the specified type, which can be a select, an archival retrieval, or a vault retrieval. For more information about using this operation, see the documentation for the underlying REST API [Initiate a Job](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-initiate-job-post.html).
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobParameters:
                  $ref: '#/components/schemas/JobParameters'
      responses:
        '202': {}
        '400':
          description: |-
            Returned if a retrieval job would exceed the current data policy's retrieval rate limit. For more information about data retrieval policies,
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyEnforcedException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    get:
      operationId: ListJobs
      description: |-
        This operation lists jobs for a vault, including jobs that are in-progress and jobs that have recently finished. The List Job operation returns a list of these jobs sorted by job initiation time.

        Amazon Glacier retains recently completed jobs for a period before deleting them; however, it eventually removes completed jobs. The output of completed jobs can be retrieved. Retaining completed jobs for a period of time after they have completed enables you to get a job output in the event you miss the job completion notification or your first attempt to download it fails. For example, suppose you start an archive retrieval job to download an archive. After the job completes, you start to download the archive but encounter a network error. In this scenario, you can retry and download the archive while the job exists.

        The List Jobs operation supports pagination. You should always check the response `Marker` field. If there are no more jobs to list, the `Marker` field is set to `null`. If there are more jobs to list, the `Marker` field is set to a non-null value, which you can use to continue the pagination of the list. To return a list of jobs that begins at a specific job, set the marker request parameter to the `Marker` value for that job that you obtained from a previous List Jobs request.

        You can set a maximum limit for the number of jobs returned in the response by specifying the `limit` parameter in the request. The default limit is 50. The number of jobs returned might be fewer than the limit, but the number of returned jobs never exceeds the limit.

        Additionally, you can filter the jobs list returned by specifying the optional `statuscode` parameter or `completed` parameter, or both. Using the `statuscode` parameter, you can specify to return only jobs that match either the `InProgress`, `Succeeded`, or `Failed` status. Using the `completed` parameter, you can specify to return only jobs that were completed (`true`) or jobs that were not completed (`false`).

        For more information about using this operation, see the documentation for the underlying REST API [List Jobs](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-jobs-get.html).
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/string'
      - name: statuscode
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/string'
      - name: completed
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/multipart-uploads:
    post:
      operationId: InitiateMultipartUpload
      description: |-
        This operation initiates a multipart upload. Amazon S3 Glacier creates a multipart upload resource and returns its ID in the response. The multipart upload ID is used in subsequent requests to upload parts of an archive (see UploadMultipartPart).

        When you initiate a multipart upload, you specify the part size in number of bytes. The part size must be a megabyte (1024 KB) multiplied by a power of 2-for example, 1048576 (1 MB), 2097152 (2 MB), 4194304 (4 MB), 8388608 (8 MB), and so on. The minimum allowable part size is 1 MB, and the maximum is 4 GB.

        Every part you upload to this resource (see UploadMultipartPart), except the last one, must have the same size. The last one can be the same size or smaller. For example, suppose you want to upload a 16.2 MB file. If you initiate the multipart upload with a part size of 4 MB, you will upload four parts of 4 MB each and one part of 0.2 MB.

        You don't need to know the size of the archive when you start a multipart upload because Amazon S3 Glacier does not require you to specify the overall archive size.

        After you complete the multipart upload, Amazon S3 Glacier (Glacier) removes the multipart upload resource referenced by the ID. Glacier also removes the multipart upload resource if you cancel the multipart upload or it may be removed if there is no activity for a period of 24 hours.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Uploading Large Archives in Parts (Multipart Upload)](https://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html) and [Initiate Multipart Upload](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-initiate-upload.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: x-amz-archive-description
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/string'
      - name: x-amz-part-size
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '201': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    get:
      operationId: ListMultipartUploads
      description: |-
        This operation lists in-progress multipart uploads for the specified vault. An in-progress multipart upload is a multipart upload that has been initiated by an InitiateMultipartUpload request, but has not yet been completed or aborted. The list returned in the List Multipart Upload response has no guaranteed order.

        The List Multipart Uploads operation supports pagination. By default, this operation returns up to 50 multipart uploads in the response. You should always check the response for a `marker` at which to continue the list; if there are no more items the `marker` is `null`. To return a list of multipart uploads that begins at a specific upload, set the `marker` request parameter to the value you obtained from a previous List Multipart Upload request. You can also limit the number of uploads returned in the response by specifying the `limit` parameter in the request.

        Note the difference between this operation and listing parts (ListParts). The List Multipart Uploads operation lists all multipart uploads for a vault and does not require a multipart upload ID. The List Parts operation requires a multipart upload ID since parts are associated with a single upload.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and the underlying REST API, see [Working with Archives in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html) and [List Multipart Uploads ](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-list-uploads.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/provisioned-capacity:
    get:
      operationId: ListProvisionedCapacity
      description: |-
        This operation lists the provisioned capacity units for the specified AWS account.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
    post:
      operationId: PurchaseProvisionedCapacity
      description: |-
        This operation purchases a provisioned capacity unit for an AWS account.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '201': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/tags:
    get:
      operationId: ListTagsForVault
      description: |-
        This operation lists all the tags attached to a vault. The operation returns an empty map if there are no tags. For more information about tags, see [Tagging Amazon S3 Glacier Resources](https://docs.aws.amazon.com/amazonglacier/latest/dev/tagging.html).
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults:
    get:
      operationId: ListVaults
      description: |-
        This operation lists all vaults owned by the calling user's account. The list returned in the response is ASCII-sorted by vault name.

        By default, this operation returns up to 10 items. If there are more vaults to list, the response `marker` field contains the vault Amazon Resource Name (ARN) at which to continue the list with a new List Vaults request; otherwise, the `marker` field is `null`. To return a list of vaults that begins at a specific vault, set the `marker` request parameter to the vault ARN you obtained from a previous List Vaults request. You can also limit the number of vaults returned in the response by specifying the `limit` parameter in the request.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Retrieving Vault Metadata in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/retrieving-vault-info.html) and [List Vaults ](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vaults-get.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/string'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/tags?operation=remove:
    post:
      operationId: RemoveTagsFromVault
      description: |-
        This operation removes one or more tags from the set of tags attached to a vault. For more information about tags, see [Tagging Amazon S3 Glacier Resources](https://docs.aws.amazon.com/amazonglacier/latest/dev/tagging.html). This operation is idempotent. The operation will be successful, even if there are no tags attached to the vault.
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TagKeys:
                  $ref: '#/components/schemas/TagKeyList'
      responses:
        '204': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
  /{accountId}/vaults/{vaultName}/archives:
    post:
      operationId: UploadArchive
      description: |-
        This operation adds an archive to a vault. This is a synchronous operation, and for a successful upload, your data is durably persisted. Amazon S3 Glacier returns the archive ID in the `x-amz-archive-id` header of the response.

        You must use the archive ID to access your data in Amazon S3 Glacier. After you upload an archive, you should save the archive ID returned so that you can retrieve or delete the archive later. Besides saving the archive ID, you can also index it and give it a friendly name to allow for better searching. You can also use the optional archive description field to specify how the archive is referred to in an external index of archives, such as you might create in Amazon DynamoDB. You can also get the vault inventory to obtain a list of archive IDs in a vault. For more information, see InitiateJob.

        You must provide a SHA256 tree hash of the data you are uploading. For information about computing a SHA256 tree hash, see [Computing Checksums](https://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html).

        You can optionally specify an archive description of up to 1,024 printable ASCII characters. You can get the archive description when you either retrieve the archive or get the vault inventory. For more information, see InitiateJob. Amazon Glacier does not interpret the description in any way. An archive description does not need to be unique. You cannot use the description to retrieve or sort the archive list.

        Archives are immutable. After you upload an archive, you cannot edit the archive or its description.

        An AWS account has full permission to perform all operations (actions). However, AWS Identity and Access Management (IAM) users don't have any permissions by default. You must grant them explicit permission to perform specific actions. For more information, see [Access Control Using AWS Identity and Access Management (IAM)](https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html).

        For conceptual information and underlying REST API, see [Uploading an Archive in Amazon Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-an-archive.html) and [Upload Archive](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-post.html) in the _Amazon Glacier Developer Guide_.
      parameters:
      - name: vaultName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: accountId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/string'
      - name: x-amz-archive-description
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/string'
      - name: x-amz-sha256-tree-hash
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  $ref: '#/components/schemas/Stream'
      responses:
        '201': {}
        '400':
          description: |-
            Returned if a required header or parameter is missing from the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingParameterValueException'
        '408':
          description: |-
            Returned if, when uploading an archive, Amazon S3 Glacier times out while receiving the upload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            Returned if the service cannot complete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
components:
  schemas:
    AbortMultipartUploadInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The upload ID of the multipart upload to delete.
      required:
      - accountId
      - vaultName
      - uploadId
      description: 'Provides options to abort a multipart upload identified by the
        upload ID.


        For information about the underlying REST API, see [Abort Multipart Upload](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-abort-upload.html).
        For conceptual information, see [Working with Archives in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html).'
    AbortVaultLockInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID. This value must
            match the AWS account ID associated with the credentials used to sign
            the request. You can either specify an AWS account ID or optionally a
            single '`-`' (hyphen), in which case Amazon Glacier uses the AWS account
            ID associated with the credentials used to sign the request. If you specify
            your account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
      required:
      - accountId
      - vaultName
      description: The input values for `AbortVaultLock`.
    AccessControlPolicyList:
      type: array
      items:
        $ref: '#/components/schemas/Grant'
    ActionCode:
      type: string
      enum:
      - ArchiveRetrieval
      - InventoryRetrieval
      - Select
    AddTagsToVaultInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags to add to the vault. Each tag is composed of a key
            and a value. The value can be an empty string.
      required:
      - accountId
      - vaultName
      description: The input values for `AddTagsToVault`.
    ArchiveCreationOutput:
      type: object
      properties:
        location:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The relative URI path of the newly added archive resource.
        checksum:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The checksum of the archive computed by Amazon S3 Glacier.
        archiveId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The ID of the archive. This value is also included as part
            of the location.
      description: 'Contains the Amazon S3 Glacier response to your request.


        For information about the underlying REST API, see [Upload Archive](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-post.html).
        For conceptual information, see [Working with Archives in Amazon S3 Glacier](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html).'
    CSVInput:
      type: object
      properties:
        FileHeaderInfo:
          allOf:
          - $ref: '#/components/schemas/FileHeaderInfo'
          description: Describes the first line of input. Valid values are `None`,
            `Ignore`, and `Use`.
        Comments:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A single character used to indicate that a row should be ignored
            when the character is present at the start of that row.
        QuoteEscapeCharacter:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A single character used for escaping the quotation-mark character
            inside an already escaped value.
        RecordDelimiter:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A value used to separate individual records from each other.
        FieldDelimiter:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A value used to separate individual fields from each other
            within a record.
        QuoteCharacter:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A value used as an escape character where the field delimiter
            is part of the value.
      description: Contains information about the comma-separated value (CSV) file
        to select from.
    CSVOutput:
      type: object
      properties:
        QuoteFields:
          allOf:
          - $ref: '#/components/schemas/QuoteFields'
          description: A value that indicates whether all output fields should be
            contained within quotation marks.
        QuoteEscapeCharacter:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A single character used for escaping the quotation-mark character
            inside an already escaped value.
        RecordDelimiter:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A value used to separate individual records from each other.
        FieldDelimiter:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A value used to separate individual fields from each other
            within a record.
        QuoteCharacter:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A value used as an escape character where the field delimiter
            is part of the value.
      description: Contains information about the comma-separated value (CSV) file
        that the job results are stored in.
    CannedACL:
      type: string
      enum:
      - private
      - public-read
      - public-read-write
      - aws-exec-read
      - authenticated-read
      - bucket-owner-read
      - bucket-owner-full-control
    CompleteMultipartUploadInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The upload ID of the multipart upload.
        archiveSize:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The total size, in bytes, of the entire archive. This value
            should be the sum of all the sizes of the individual parts that you uploaded.
        checksum:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The SHA256 tree hash of the entire archive. It is the tree
            hash of SHA256 tree hash of the individual parts. If the value you specify
            in the request does not match the SHA256 tree hash of the final assembled
            archive as computed by Amazon S3 Glacier (Glacier), Glacier returns an
            error and the request fails.
      required:
      - accountId
      - vaultName
      - uploadId
      description: Provides options to complete a multipart upload operation. This
        informs Amazon Glacier that all the archive parts have been uploaded and Amazon
        S3 Glacier (Glacier) can now assemble the archive from the uploaded parts.
        After assembling and saving the archive to the vault, Glacier returns the
        URI path of the newly created archive resource.
    CompleteVaultLockInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID. This value must
            match the AWS account ID associated with the credentials used to sign
            the request. You can either specify an AWS account ID or optionally a
            single '`-`' (hyphen), in which case Amazon Glacier uses the AWS account
            ID associated with the credentials used to sign the request. If you specify
            your account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        lockId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `lockId` value is the lock ID obtained from a InitiateVaultLock
            request.
      required:
      - accountId
      - vaultName
      - lockId
      description: The input values for `CompleteVaultLock`.
    CreateVaultInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID. This value must
            match the AWS account ID associated with the credentials used to sign
            the request. You can either specify an AWS account ID or optionally a
            single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS account
            ID associated with the credentials used to sign the request. If you specify
            your account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
      required:
      - accountId
      - vaultName
      description: Provides options to create a vault.
    CreateVaultOutput:
      type: object
      properties:
        location:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The URI of the vault that was created.
      description: Contains the Amazon S3 Glacier response to your request.
    DataRetrievalPolicy:
      type: object
      properties:
        Rules:
          allOf:
          - $ref: '#/components/schemas/DataRetrievalRulesList'
          description: The policy rule. Although this is a list type, currently there
            must be only one rule, which contains a Strategy field and optionally
            a BytesPerHour field.
      description: Data retrieval policy.
    DataRetrievalRule:
      type: object
      properties:
        Strategy:
          allOf:
          - $ref: '#/components/schemas/string'
          description: 'The type of data retrieval policy to set.


            Valid values: BytesPerHour|FreeTier|None'
        BytesPerHour:
          allOf:
          - $ref: '#/components/schemas/NullableLong'
          description: 'The maximum number of bytes that can be retrieved in an hour.


            This field is required only if the value of the Strategy field is `BytesPerHour`.
            Your PUT operation will be rejected if the Strategy field is not set to
            `BytesPerHour` and you set this field.'
      description: Data retrieval policy rule.
    DataRetrievalRulesList:
      type: array
      items:
        $ref: '#/components/schemas/DataRetrievalRule'
    DateTime:
      type: string
    DeleteArchiveInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        archiveId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The ID of the archive to delete.
      required:
      - accountId
      - vaultName
      - archiveId
      description: Provides options for deleting an archive from an Amazon S3 Glacier
        vault.
    DeleteVaultAccessPolicyInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
      required:
      - accountId
      - vaultName
      description: DeleteVaultAccessPolicy input.
    DeleteVaultInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
      required:
      - accountId
      - vaultName
      description: Provides options for deleting a vault from Amazon S3 Glacier.
    DeleteVaultNotificationsInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
      required:
      - accountId
      - vaultName
      description: Provides options for deleting a vault notification configuration
        from an Amazon Glacier vault.
    DescribeJobInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        jobId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The ID of the job to describe.
      required:
      - accountId
      - vaultName
      - jobId
      description: Provides options for retrieving a job description.
    DescribeVaultInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
      required:
      - accountId
      - vaultName
      description: Provides options for retrieving metadata for a specific vault in
        Amazon Glacier.
    DescribeVaultOutput:
      type: object
      properties:
        VaultARN:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The Amazon Resource Name (ARN) of the vault.
        VaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The Universal Coordinated Time (UTC) date when the vault was
            created. This value should be a string in the ISO 8601 date format, for
            example `2012-03-20T17:03:43.221Z`.
        LastInventoryDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The Universal Coordinated Time (UTC) date when Amazon S3 Glacier
            completed the last vault inventory. This value should be a string in the
            ISO 8601 date format, for example `2012-03-20T17:03:43.221Z`.
        NumberOfArchives:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The number of archives in the vault as of the last inventory
            date. This field will return `null` if an inventory has not yet run on
            the vault, for example if you just created the vault.
        SizeInBytes:
          allOf:
          - $ref: '#/components/schemas/long'
          description: Total size, in bytes, of the archives in the vault as of the
            last inventory date. This field will return null if an inventory has not
            yet run on the vault, for example if you just created the vault.
      description: Contains the Amazon S3 Glacier response to your request.
    Encryption:
      type: object
      properties:
        EncryptionType:
          allOf:
          - $ref: '#/components/schemas/EncryptionType'
          description: The server-side encryption algorithm used when storing job
            results in Amazon S3, for example `AES256` or `aws:kms`.
        KMSKeyId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The AWS KMS key ID to use for object encryption. All GET and
            PUT requests for an object protected by AWS KMS fail if not made by using
            Secure Sockets Layer (SSL) or Signature Version 4.
        KMSContext:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Optional. If the encryption type is `aws:kms`, you can use
            this value to specify the encryption context for the job results.
      description: Contains information about the encryption used to store the job
        results in Amazon S3.
    EncryptionType:
      type: string
      enum:
      - aws:kms
      - AES256
    ExpressionType:
      type: string
      enum:
      - SQL
    FileHeaderInfo:
      type: string
      enum:
      - USE
      - IGNORE
      - NONE
    GetDataRetrievalPolicyInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID. This value must
            match the AWS account ID associated with the credentials used to sign
            the request. You can either specify an AWS account ID or optionally a
            single '`-`' (hyphen), in which case Amazon Glacier uses the AWS account
            ID associated with the credentials used to sign the request. If you specify
            your account ID, do not include any hyphens ('-') in the ID.
      required:
      - accountId
      description: Input for GetDataRetrievalPolicy.
    GetDataRetrievalPolicyOutput:
      type: object
      properties:
        Policy:
          allOf:
          - $ref: '#/components/schemas/DataRetrievalPolicy'
          description: Contains the returned data retrieval policy in JSON format.
      description: Contains the Amazon S3 Glacier response to the `GetDataRetrievalPolicy`
        request.
    GetJobOutputInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        jobId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The job ID whose data is downloaded.
        range:
          allOf:
          - $ref: '#/components/schemas/string'
          description: "The range of bytes to retrieve from the output. For example,\
            \ if you want to download the first 1,048,576 bytes, specify the range\
            \ as `bytes=0-1048575`. By default, this operation downloads the entire\
            \ output.\n\nIf the job output is large, then you can use a range to retrieve\
            \ a portion of the output. This allows you to download the entire output\
            \ in smaller chunks of bytes. For example, suppose you have 1 GB of job\
            \ output you want to download and you decide to download 128 MB chunks\
            \ of data at a time, which is a total of eight Get Job Output requests.\
            \ You use the following process to download the job output:\n\n  1. Download\
            \ a 128 MB chunk of output by specifying the appropriate byte range. Verify\
            \ that all 128 MB of data was received.\n\n  2. Along with the data, the\
            \ response includes a SHA256 tree hash of the payload. You compute the\
            \ checksum of the payload on the client and compare it with the checksum\
            \ you received in the response to ensure you received all the expected\
            \ data.\n\n  3. Repeat steps 1 and 2 for all the eight 128 MB chunks of\
            \ output data, each time specifying the appropriate byte range.\n\n  4.\
            \ After downloading all the parts of the job output, you have a list of\
            \ eight checksum values. Compute the tree hash of these values to find\
            \ the checksum of the entire output. Using the DescribeJob API, obtain\
            \ job information of the job that provided you the output. The response\
            \ includes the checksum of the entire archive stored in Amazon S3 Glacier.\
            \ You compare this value with the checksum you computed to ensure you\
            \ have downloaded the entire archive content with no errors."
      required:
      - accountId
      - vaultName
      - jobId
      description: Provides options for downloading output of an Amazon S3 Glacier
        job.
    GetJobOutputOutput:
      type: object
      properties:
        body:
          allOf:
          - $ref: '#/components/schemas/Stream'
          description: The job data, either archive data or inventory data.
        checksum:
          allOf:
          - $ref: '#/components/schemas/string'
          description: "The checksum of the data in the response. This header is returned\
            \ only when retrieving the output for an archive retrieval job. Furthermore,\
            \ this header appears only under the following conditions:\n\n  * You\
            \ get the entire range of the archive.\n\n  * You request a range to return\
            \ of the archive that starts and ends on a multiple of 1 MB. For example,\
            \ if you have an 3.1 MB archive and you specify a range to return that\
            \ starts at 1 MB and ends at 2 MB, then the x-amz-sha256-tree-hash is\
            \ returned as a response header.\n\n  * You request a range of the archive\
            \ to return that starts on a multiple of 1 MB and goes to the end of the\
            \ archive. For example, if you have a 3.1 MB archive and you specify a\
            \ range that starts at 2 MB and ends at 3.1 MB (the end of the archive),\
            \ then the x-amz-sha256-tree-hash is returned as a response header."
        status:
          allOf:
          - $ref: '#/components/schemas/httpstatus'
          description: The HTTP response code for a job output request. The value
            depends on whether a range was specified in the request.
        contentRange:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The range of bytes returned by Amazon S3 Glacier. If only partial
            output is downloaded, the response provides the range of bytes Amazon
            S3 Glacier returned. For example, bytes 0-1048575/8388608 returns the
            first 1 MB from 8 MB.
        acceptRanges:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Indicates the range units accepted. For more information, see
            [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
        contentType:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The Content-Type depends on whether the job output is an archive
            or a vault inventory. For archive data, the Content-Type is application/octet-stream.
            For vault inventory, if you requested CSV format when you initiated the
            job, the Content-Type is text/csv. Otherwise, by default, vault inventory
            is returned as JSON, and the Content-Type is application/json.
        archiveDescription:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The description of an archive.
      description: Contains the Amazon S3 Glacier response to your request.
    GetVaultAccessPolicyInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
      required:
      - accountId
      - vaultName
      description: Input for GetVaultAccessPolicy.
    GetVaultAccessPolicyOutput:
      type: object
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/VaultAccessPolicy'
          description: Contains the returned vault access policy as a JSON string.
      description: Output for GetVaultAccessPolicy.
    GetVaultLockInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
      required:
      - accountId
      - vaultName
      description: The input values for `GetVaultLock`.
    GetVaultLockOutput:
      type: object
      properties:
        Policy:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The vault lock policy as a JSON string, which uses "\" as an
            escape character.
        State:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The state of the vault lock. `InProgress` or `Locked`.
        ExpirationDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The UTC date and time at which the lock ID expires. This value
            can be `null` if the vault lock is in a `Locked` state.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The UTC date and time at which the vault lock was put into
            the `InProgress` state.
      description: Contains the Amazon S3 Glacier response to your request.
    GetVaultNotificationsInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
      required:
      - accountId
      - vaultName
      description: Provides options for retrieving the notification configuration
        set on an Amazon Glacier vault.
    GetVaultNotificationsOutput:
      type: object
      properties:
        vaultNotificationConfig:
          allOf:
          - $ref: '#/components/schemas/VaultNotificationConfig'
          description: Returns the notification configuration set on the vault.
      description: Contains the Amazon S3 Glacier response to your request.
    GlacierJobDescription:
      type: object
      properties:
        JobId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: An opaque string that identifies an Amazon S3 Glacier job.
        JobDescription:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The job description provided when initiating the job.
        Action:
          allOf:
          - $ref: '#/components/schemas/ActionCode'
          description: The job type. This value is either `ArchiveRetrieval`, `InventoryRetrieval`,
            or `Select`.
        ArchiveId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The archive ID requested for a select job or archive retrieval.
            Otherwise, this field is null.
        VaultARN:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The Amazon Resource Name (ARN) of the vault from which an archive
            retrieval was requested.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The UTC date when the job was created. This value is a string
            representation of ISO 8601 date format, for example `"2012-03-20T17:03:43.221Z"`.
        Completed:
          allOf:
          - $ref: '#/components/schemas/boolean'
          description: The job status. When a job is completed, you get the job's
            output using Get Job Output (GET output).
        StatusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The status code can be `InProgress`, `Succeeded`, or `Failed`,
            and indicates the status of the job.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A friendly message that describes the job status.
        ArchiveSizeInBytes:
          allOf:
          - $ref: '#/components/schemas/Size'
          description: For an archive retrieval job, this value is the size in bytes
            of the archive being requested for download. For an inventory retrieval
            or select job, this value is null.
        InventorySizeInBytes:
          allOf:
          - $ref: '#/components/schemas/Size'
          description: For an inventory retrieval job, this value is the size in bytes
            of the inventory requested for download. For an archive retrieval or select
            job, this value is null.
        SNSTopic:
          allOf:
          - $ref: '#/components/schemas/string'
          description: An Amazon SNS topic that receives notification.
        CompletionDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The UTC time that the job request completed. While the job
            is in progress, the value is null.
        SHA256TreeHash:
          allOf:
          - $ref: '#/components/schemas/string'
          description: "For an archive retrieval job, this value is the checksum of\
            \ the archive. Otherwise, this value is null.\n\nThe SHA256 tree hash\
            \ value for the requested range of an archive. If the **InitiateJob**\
            \ request for an archive specified a tree-hash aligned range, then this\
            \ field returns a value.\n\nIf the whole archive is retrieved, this value\
            \ is the same as the ArchiveSHA256TreeHash value.\n\nThis field is null\
            \ for the following:\n\n  * Archive retrieval jobs that specify a range\
            \ that is not tree-hash aligned\n\n  * Archival jobs that specify a range\
            \ that is equal to the whole archive, when the job status is `InProgress`\n\
            \n  * Inventory jobs\n\n  * Select jobs"
        ArchiveSHA256TreeHash:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The SHA256 tree hash of the entire archive for an archive retrieval.
            For inventory retrieval or select jobs, this field is null.
        RetrievalByteRange:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The retrieved byte range for archive retrieval jobs in the
            form _StartByteValue_ -_EndByteValue_. If no range was specified in the
            archive retrieval, then the whole archive is retrieved. In this case,
            _StartByteValue_ equals 0 and _EndByteValue_ equals the size of the archive
            minus 1. For inventory retrieval or select jobs, this field is null.
        Tier:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The tier to use for a select or an archive retrieval. Valid
            values are `Expedited`, `Standard`, or `Bulk`. `Standard` is the default.
        InventoryRetrievalParameters:
          allOf:
          - $ref: '#/components/schemas/InventoryRetrievalJobDescription'
          description: Parameters used for range inventory retrieval.
        JobOutputPath:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Contains the job output location.
        SelectParameters:
          allOf:
          - $ref: '#/components/schemas/SelectParameters'
          description: Contains the parameters used for a select.
        OutputLocation:
          allOf:
          - $ref: '#/components/schemas/OutputLocation'
          description: Contains the location where the data from the select job is
            stored.
      description: Contains the description of an Amazon S3 Glacier job.
    Grant:
      type: object
      properties:
        Grantee:
          allOf:
          - $ref: '#/components/schemas/Grantee'
          description: The grantee.
        Permission:
          allOf:
          - $ref: '#/components/schemas/Permission'
          description: Specifies the permission given to the grantee.
      description: Contains information about a grant.
    Grantee:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: Type of grantee
        DisplayName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Screen name of the grantee.
        URI:
          allOf:
          - $ref: '#/components/schemas/string'
          description: URI of the grantee group.
        ID:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The canonical user ID of the grantee.
        EmailAddress:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Email address of the grantee.
      required:
      - Type
      description: Contains information about the grantee.
    InitiateJobInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        jobParameters:
          allOf:
          - $ref: '#/components/schemas/JobParameters'
          description: Provides options for specifying job information.
      required:
      - accountId
      - vaultName
      description: Provides options for initiating an Amazon S3 Glacier job.
    InitiateJobOutput:
      type: object
      properties:
        location:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The relative URI path of the job.
        jobId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The ID of the job.
        jobOutputPath:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The path to the location of where the select results are stored.
      description: Contains the Amazon S3 Glacier response to your request.
    InitiateMultipartUploadInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        archiveDescription:
          allOf:
          - $ref: '#/components/schemas/string'
          description: 'The archive description that you are uploading in parts.


            The part size must be a megabyte (1024 KB) multiplied by a power of 2,
            for example 1048576 (1 MB), 2097152 (2 MB), 4194304 (4 MB), 8388608 (8
            MB), and so on. The minimum allowable part size is 1 MB, and the maximum
            is 4 GB (4096 MB).'
        partSize:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The size of each part except the last, in bytes. The last part
            can be smaller than this part size.
      required:
      - accountId
      - vaultName
      description: Provides options for initiating a multipart upload to an Amazon
        S3 Glacier vault.
    InitiateMultipartUploadOutput:
      type: object
      properties:
        location:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The relative URI path of the multipart upload ID Amazon S3
            Glacier created.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The ID of the multipart upload. This value is also included
            as part of the location.
      description: The Amazon S3 Glacier response to your request.
    InitiateVaultLockInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID. This value must
            match the AWS account ID associated with the credentials used to sign
            the request. You can either specify an AWS account ID or optionally a
            single '`-`' (hyphen), in which case Amazon Glacier uses the AWS account
            ID associated with the credentials used to sign the request. If you specify
            your account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        policy:
          allOf:
          - $ref: '#/components/schemas/VaultLockPolicy'
          description: The vault lock policy as a JSON string, which uses "\" as an
            escape character.
      required:
      - accountId
      - vaultName
      description: The input values for `InitiateVaultLock`.
    InitiateVaultLockOutput:
      type: object
      properties:
        lockId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The lock ID, which is used to complete the vault locking process.
      description: Contains the Amazon S3 Glacier response to your request.
    InputSerialization:
      type: object
      properties:
        csv:
          allOf:
          - $ref: '#/components/schemas/CSVInput'
          description: Describes the serialization of a CSV-encoded object.
      description: Describes how the archive is serialized.
    InsufficientCapacityException:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/string'
        code:
          $ref: '#/components/schemas/string'
        message:
          $ref: '#/components/schemas/string'
      description: Returned if there is insufficient capacity to process this expedited
        request. This error only applies to expedited retrievals and not to standard
        or bulk retrievals.
    InvalidParameterValueException:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Client
        code:
          allOf:
          - $ref: '#/components/schemas/string'
          description: 400 Bad Request
        message:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Returned if a parameter of the request is incorrectly specified.
      description: Returned if a parameter of the request is incorrectly specified.
    InventoryRetrievalJobDescription:
      type: object
      properties:
        Format:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The output format for the vault inventory list, which is set
            by the **InitiateJob** request when initiating a job to retrieve a vault
            inventory. Valid values are `CSV` and `JSON`.
        StartDate:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The start of the date range in Universal Coordinated Time (UTC)
            for vault inventory retrieval that includes archives created on or after
            this date. This value should be a string in the ISO 8601 date format,
            for example `2013-03-20T17:03:43Z`.
        EndDate:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          description: The end of the date range in UTC for vault inventory retrieval
            that includes archives created before this date. This value should be
            a string in the ISO 8601 date format, for example `2013-03-20T17:03:43Z`.
        Limit:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The maximum number of inventory items returned per vault inventory
            retrieval request. This limit is set when initiating the job with the
            a **InitiateJob** request.
        Marker:
          allOf:
          - $ref: '#/components/schemas/string'
          description: An opaque string that represents where to continue pagination
            of the vault inventory retrieval results. You use the marker in a new
            **InitiateJob** request to obtain additional inventory items. If there
            are no more inventory items, this value is `null`. For more information,
            see [ Range Inventory Retrieval](https://docs.aws.amazon.com/amazonglacier/latest/dev/api-initiate-job-post.html#api-initiate-job-post-vault-inventory-list-filtering).
      description: Describes the options for a range inventory retrieval job.
    InventoryRetrievalJobInput:
      type: object
      properties:
        StartDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The start of the date range in UTC for vault inventory retrieval
            that includes archives created on or after this date. This value should
            be a string in the ISO 8601 date format, for example `2013-03-20T17:03:43Z`.
        EndDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The end of the date range in UTC for vault inventory retrieval
            that includes archives created before this date. This value should be
            a string in the ISO 8601 date format, for example `2013-03-20T17:03:43Z`.
        Limit:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Specifies the maximum number of inventory items returned per
            vault inventory retrieval request. Valid values are greater than or equal
            to 1.
        Marker:
          allOf:
          - $ref: '#/components/schemas/string'
          description: An opaque string that represents where to continue pagination
            of the vault inventory retrieval results. You use the marker in a new
            **InitiateJob** request to obtain additional inventory items. If there
            are no more inventory items, this value is `null`.
      description: Provides options for specifying a range inventory retrieval job.
    JobList:
      type: array
      items:
        $ref: '#/components/schemas/GlacierJobDescription'
    JobParameters:
      type: object
      properties:
        Format:
          allOf:
          - $ref: '#/components/schemas/string'
          description: When initiating a job to retrieve a vault inventory, you can
            optionally add this parameter to your request to specify the output format.
            If you are initiating an inventory job and do not specify a Format field,
            JSON is the default format. Valid values are "CSV" and "JSON".
        Type:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The job type. You can initiate a job to perform a select query
            on an archive, retrieve an archive, or get an inventory of a vault. Valid
            values are "select", "archive-retrieval" and "inventory-retrieval".
        ArchiveId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The ID of the archive that you want to retrieve. This field
            is required only if `Type` is set to `select` or `archive-retrieval`code>.
            An error occurs if you specify this request parameter for an inventory
            retrieval job request.
        Description:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The optional description for the job. The description must
            be less than or equal to 1,024 bytes. The allowable characters are 7-bit
            ASCII without control codes-specifically, ASCII values 32-126 decimal
            or 0x20-0x7E hexadecimal.
        SNSTopic:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The Amazon SNS topic ARN to which Amazon S3 Glacier sends a
            notification when the job is completed and the output is ready for you
            to download. The specified topic publishes the notification to its subscribers.
            The SNS topic must exist.
        RetrievalByteRange:
          allOf:
          - $ref: '#/components/schemas/string'
          description: 'The byte range to retrieve for an archive retrieval. in the
            form "_StartByteValue_ -_EndByteValue_ " If not specified, the whole archive
            is retrieved. If specified, the byte range must be megabyte (1024*1024)
            aligned which means that _StartByteValue_ must be divisible by 1 MB and
            _EndByteValue_ plus 1 must be divisible by 1 MB or be the end of the archive
            specified as the archive byte size value minus 1. If RetrievalByteRange
            is not megabyte aligned, this operation returns a 400 response.


            An error occurs if you specify this field for an inventory retrieval job
            request.'
        Tier:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The tier to use for a select or an archive retrieval job. Valid
            values are `Expedited`, `Standard`, or `Bulk`. `Standard` is the default.
        InventoryRetrievalParameters:
          allOf:
          - $ref: '#/components/schemas/InventoryRetrievalJobInput'
          description: Input parameters used for range inventory retrieval.
        SelectParameters:
          allOf:
          - $ref: '#/components/schemas/SelectParameters'
          description: Contains the parameters that define a job.
        OutputLocation:
          allOf:
          - $ref: '#/components/schemas/OutputLocation'
          description: Contains information about the location where the select job
            results are stored.
      description: Provides options for defining a job.
    LimitExceededException:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Client
        code:
          allOf:
          - $ref: '#/components/schemas/string'
          description: 400 Bad Request
        message:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Returned if the request results in a vault limit or tags limit
            being exceeded.
      description: Returned if the request results in a vault or account limit being
        exceeded.
    ListJobsInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        limit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of jobs to be returned. The default limit
            is 50. The number of jobs returned might be fewer than the specified limit,
            but the number of returned jobs never exceeds the limit.
        marker:
          allOf:
          - $ref: '#/components/schemas/string'
          description: An opaque string used for pagination. This value specifies
            the job at which the listing of jobs should begin. Get the marker value
            from a previous List Jobs response. You only need to include the marker
            if you are continuing the pagination of results started in a previous
            List Jobs request.
        statuscode:
          allOf:
          - $ref: '#/components/schemas/string'
          description: 'The type of job status to return. You can specify the following
            values: `InProgress`, `Succeeded`, or `Failed`.'
        completed:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The state of the jobs to return. You can specify `true` or
            `false`.
      required:
      - accountId
      - vaultName
      description: Provides options for retrieving a job list for an Amazon S3 Glacier
        vault.
    ListJobsOutput:
      type: object
      properties:
        JobList:
          allOf:
          - $ref: '#/components/schemas/JobList'
          description: A list of job objects. Each job object contains metadata describing
            the job.
        Marker:
          allOf:
          - $ref: '#/components/schemas/string'
          description: An opaque string used for pagination that specifies the job
            at which the listing of jobs should begin. You get the `marker` value
            from a previous List Jobs response. You only need to include the marker
            if you are continuing the pagination of the results started in a previous
            List Jobs request.
      description: Contains the Amazon S3 Glacier response to your request.
    ListMultipartUploadsInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        limit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies the maximum number of uploads returned in the response
            body. If this value is not specified, the List Uploads operation returns
            up to 50 uploads.
        marker:
          allOf:
          - $ref: '#/components/schemas/string'
          description: An opaque string used for pagination. This value specifies
            the upload at which the listing of uploads should begin. Get the marker
            value from a previous List Uploads response. You need only include the
            marker if you are continuing the pagination of results started in a previous
            List Uploads request.
      required:
      - accountId
      - vaultName
      description: Provides options for retrieving list of in-progress multipart uploads
        for an Amazon Glacier vault.
    ListMultipartUploadsOutput:
      type: object
      properties:
        UploadsList:
          allOf:
          - $ref: '#/components/schemas/UploadsList'
          description: A list of in-progress multipart uploads.
        Marker:
          allOf:
          - $ref: '#/components/schemas/string'
          description: An opaque string that represents where to continue pagination
            of the results. You use the marker in a new List Multipart Uploads request
            to obtain more uploads in the list. If there are no more uploads, this
            value is `null`.
      description: Contains the Amazon S3 Glacier response to your request.
    ListPartsInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The upload ID of the multipart upload.
        marker:
          allOf:
          - $ref: '#/components/schemas/string'
          description: An opaque string used for pagination. This value specifies
            the part at which the listing of parts should begin. Get the marker value
            from the response of a previous List Parts response. You need only include
            the marker if you are continuing the pagination of results started in
            a previous List Parts request.
        limit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of parts to be returned. The default limit
            is 50. The number of parts returned might be fewer than the specified
            limit, but the number of returned parts never exceeds the limit.
      required:
      - accountId
      - vaultName
      - uploadId
      description: Provides options for retrieving a list of parts of an archive that
        have been uploaded in a specific multipart upload.
    ListPartsOutput:
      type: object
      properties:
        MultipartUploadId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The ID of the upload to which the parts are associated.
        VaultARN:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The Amazon Resource Name (ARN) of the vault to which the multipart
            upload was initiated.
        ArchiveDescription:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The description of the archive that was specified in the Initiate
            Multipart Upload request.
        PartSizeInBytes:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The part size in bytes. This is the same value that you specified
            in the Initiate Multipart Upload request.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The UTC time at which the multipart upload was initiated.
        Parts:
          allOf:
          - $ref: '#/components/schemas/PartList'
          description: A list of the part sizes of the multipart upload. Each object
            in the array contains a `RangeBytes` and `sha256-tree-hash` name/value
            pair.
        Marker:
          allOf:
          - $ref: '#/components/schemas/string'
          description: An opaque string that represents where to continue pagination
            of the results. You use the marker in a new List Parts request to obtain
            more jobs in the list. If there are no more parts, this value is `null`.
      description: Contains the Amazon S3 Glacier response to your request.
    ListProvisionedCapacityInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The AWS account ID of the account that owns the vault. You
            can either specify an AWS account ID or optionally a single '-' (hyphen),
            in which case Amazon S3 Glacier uses the AWS account ID associated with
            the credentials used to sign the request. If you use an account ID, don't
            include any hyphens ('-') in the ID.
      required:
      - accountId
    ListProvisionedCapacityOutput:
      type: object
      properties:
        ProvisionedCapacityList:
          allOf:
          - $ref: '#/components/schemas/ProvisionedCapacityList'
          description: The response body contains the following JSON fields.
    ListTagsForVaultInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
      required:
      - accountId
      - vaultName
      description: The input value for `ListTagsForVaultInput`.
    ListTagsForVaultOutput:
      type: object
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags attached to the vault. Each tag is composed of a key
            and a value.
      description: Contains the Amazon S3 Glacier response to your request.
    ListVaultsInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID. This value must
            match the AWS account ID associated with the credentials used to sign
            the request. You can either specify an AWS account ID or optionally a
            single '`-`' (hyphen), in which case Amazon Glacier uses the AWS account
            ID associated with the credentials used to sign the request. If you specify
            your account ID, do not include any hyphens ('-') in the ID.
        marker:
          allOf:
          - $ref: '#/components/schemas/string'
          description: A string used for pagination. The marker specifies the vault
            ARN after which the listing of vaults should begin.
        limit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of vaults to be returned. The default limit
            is 10. The number of vaults returned might be fewer than the specified
            limit, but the number of returned vaults never exceeds the limit.
      required:
      - accountId
      description: Provides options to retrieve the vault list owned by the calling
        user's account. The list provides metadata information for each vault.
    ListVaultsOutput:
      type: object
      properties:
        VaultList:
          allOf:
          - $ref: '#/components/schemas/VaultList'
          description: List of vaults.
        Marker:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The vault ARN at which to continue pagination of the results.
            You use the marker in another List Vaults request to obtain more vaults
            in the list.
      description: Contains the Amazon S3 Glacier response to your request.
    MissingParameterValueException:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Client.
        code:
          allOf:
          - $ref: '#/components/schemas/string'
          description: 400 Bad Request
        message:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Returned if no authentication data is found for the request.
      description: Returned if a required header or parameter is missing from the
        request.
    NotificationEventList:
      type: array
      items:
        $ref: '#/components/schemas/string'
    NullableLong:
      type: integer
      format: int64
    OutputLocation:
      type: object
      properties:
        S3:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: Describes an S3 location that will receive the results of the
            job request.
      description: Contains information about the location where the select job results
        are stored.
    OutputSerialization:
      type: object
      properties:
        csv:
          allOf:
          - $ref: '#/components/schemas/CSVOutput'
          description: Describes the serialization of CSV-encoded query results.
      description: Describes how the select output is serialized.
    PartList:
      type: array
      items:
        $ref: '#/components/schemas/PartListElement'
    PartListElement:
      type: object
      properties:
        RangeInBytes:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The byte range of a part, inclusive of the upper value of the
            range.
        SHA256TreeHash:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The SHA256 tree hash value that Amazon S3 Glacier calculated
            for the part. This field is never `null`.
      description: A list of the part sizes of the multipart upload.
    Permission:
      type: string
      enum:
      - FULL_CONTROL
      - WRITE
      - WRITE_ACP
      - READ
      - READ_ACP
    PolicyEnforcedException:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Client
        code:
          allOf:
          - $ref: '#/components/schemas/string'
          description: PolicyEnforcedException
        message:
          allOf:
          - $ref: '#/components/schemas/string'
          description: InitiateJob request denied by current data retrieval policy.
      description: Returned if a retrieval job would exceed the current data policy's
        retrieval rate limit. For more information about data retrieval policies,
    ProvisionedCapacityDescription:
      type: object
      properties:
        CapacityId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The ID that identifies the provisioned capacity unit.
        StartDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The date that the provisioned capacity unit was purchased,
            in Universal Coordinated Time (UTC).
        ExpirationDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The date that the provisioned capacity unit expires, in Universal
            Coordinated Time (UTC).
      description: The definition for a provisioned capacity unit.
    ProvisionedCapacityList:
      type: array
      items:
        $ref: '#/components/schemas/ProvisionedCapacityDescription'
    PurchaseProvisionedCapacityInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The AWS account ID of the account that owns the vault. You
            can either specify an AWS account ID or optionally a single '-' (hyphen),
            in which case Amazon S3 Glacier uses the AWS account ID associated with
            the credentials used to sign the request. If you use an account ID, don't
            include any hyphens ('-') in the ID.
      required:
      - accountId
    PurchaseProvisionedCapacityOutput:
      type: object
      properties:
        capacityId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The ID that identifies the provisioned capacity unit.
    QuoteFields:
      type: string
      enum:
      - ALWAYS
      - ASNEEDED
    RemoveTagsFromVaultInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of tag keys. Each corresponding tag is removed from
            the vault.
      required:
      - accountId
      - vaultName
      description: The input value for `RemoveTagsFromVaultInput`.
    RequestTimeoutException:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Client
        code:
          allOf:
          - $ref: '#/components/schemas/string'
          description: 408 Request Timeout
        message:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Returned if, when uploading an archive, Amazon S3 Glacier times
            out while receiving the upload.
      description: Returned if, when uploading an archive, Amazon S3 Glacier times
        out while receiving the upload.
    ResourceNotFoundException:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Client
        code:
          allOf:
          - $ref: '#/components/schemas/string'
          description: 404 Not Found
        message:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Returned if the specified resource (such as a vault, upload
            ID, or job ID) doesn't exist.
      description: Returned if the specified resource (such as a vault, upload ID,
        or job ID) doesn't exist.
    S3Location:
      type: object
      properties:
        BucketName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the Amazon S3 bucket where the job results are
            stored.
        Prefix:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The prefix that is prepended to the results for this request.
        Encryption:
          allOf:
          - $ref: '#/components/schemas/Encryption'
          description: Contains information about the encryption used to store the
            job results in Amazon S3.
        CannedACL:
          allOf:
          - $ref: '#/components/schemas/CannedACL'
          description: The canned access control list (ACL) to apply to the job results.
        AccessControlList:
          allOf:
          - $ref: '#/components/schemas/AccessControlPolicyList'
          description: A list of grants that control access to the staged results.
        Tagging:
          allOf:
          - $ref: '#/components/schemas/hashmap'
          description: The tag-set that is applied to the job results.
        UserMetadata:
          allOf:
          - $ref: '#/components/schemas/hashmap'
          description: A map of metadata to store with the job results in Amazon S3.
        StorageClass:
          allOf:
          - $ref: '#/components/schemas/StorageClass'
          description: The storage class used to store the job results.
      description: Contains information about the location in Amazon S3 where the
        select job results are stored.
    SelectParameters:
      type: object
      properties:
        InputSerialization:
          allOf:
          - $ref: '#/components/schemas/InputSerialization'
          description: Describes the serialization format of the object.
        ExpressionType:
          allOf:
          - $ref: '#/components/schemas/ExpressionType'
          description: The type of the provided expression, for example `SQL`.
        Expression:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The expression that is used to select the object.
        OutputSerialization:
          allOf:
          - $ref: '#/components/schemas/OutputSerialization'
          description: Describes how the results of the select job are serialized.
      description: Contains information about the parameters used for a select.
    ServiceUnavailableException:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Server
        code:
          allOf:
          - $ref: '#/components/schemas/string'
          description: 500 Internal Server Error
        message:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Returned if the service cannot complete the request.
      description: Returned if the service cannot complete the request.
    SetDataRetrievalPolicyInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID. This value must
            match the AWS account ID associated with the credentials used to sign
            the request. You can either specify an AWS account ID or optionally a
            single '`-`' (hyphen), in which case Amazon Glacier uses the AWS account
            ID associated with the credentials used to sign the request. If you specify
            your account ID, do not include any hyphens ('-') in the ID.
        Policy:
          allOf:
          - $ref: '#/components/schemas/DataRetrievalPolicy'
          description: The data retrieval policy in JSON format.
      required:
      - accountId
      description: SetDataRetrievalPolicy input.
    SetVaultAccessPolicyInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        policy:
          allOf:
          - $ref: '#/components/schemas/VaultAccessPolicy'
          description: The vault access policy as a JSON string.
      required:
      - accountId
      - vaultName
      description: SetVaultAccessPolicy input.
    SetVaultNotificationsInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        vaultNotificationConfig:
          allOf:
          - $ref: '#/components/schemas/VaultNotificationConfig'
          description: Provides options for specifying notification configuration.
      required:
      - accountId
      - vaultName
      description: Provides options to configure notifications that will be sent when
        specific events happen to a vault.
    Size:
      type: integer
      format: int64
    StatusCode:
      type: string
      enum:
      - InProgress
      - Succeeded
      - Failed
    StorageClass:
      type: string
      enum:
      - STANDARD
      - REDUCED_REDUNDANCY
      - STANDARD_IA
    Stream:
      type: string
      format: byte
    TagKey:
      type: string
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/string'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagValue:
      type: string
    Type:
      type: string
      enum:
      - AmazonCustomerByEmail
      - CanonicalUser
      - Group
    UploadArchiveInput:
      type: object
      properties:
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        archiveDescription:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The optional description of the archive you are uploading.
        checksum:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The SHA256 tree hash of the data being uploaded.
        body:
          allOf:
          - $ref: '#/components/schemas/Stream'
          description: The data to upload.
      required:
      - vaultName
      - accountId
      description: Provides options to add an archive to a vault.
    UploadListElement:
      type: object
      properties:
        MultipartUploadId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The ID of a multipart upload.
        VaultARN:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The Amazon Resource Name (ARN) of the vault that contains the
            archive.
        ArchiveDescription:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The description of the archive that was specified in the Initiate
            Multipart Upload request.
        PartSizeInBytes:
          allOf:
          - $ref: '#/components/schemas/long'
          description: The part size, in bytes, specified in the Initiate Multipart
            Upload request. This is the size of all the parts in the upload except
            the last part, which may be smaller than this size.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The UTC time at which the multipart upload was initiated.
      description: A list of in-progress multipart uploads for a vault.
    UploadMultipartPartInput:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The `AccountId` value is the AWS account ID of the account
            that owns the vault. You can either specify an AWS account ID or optionally
            a single '`-`' (hyphen), in which case Amazon S3 Glacier uses the AWS
            account ID associated with the credentials used to sign the request. If
            you use an account ID, do not include any hyphens ('-') in the ID.
        vaultName:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The name of the vault.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The upload ID of the multipart upload.
        checksum:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The SHA256 tree hash of the data being uploaded.
        range:
          allOf:
          - $ref: '#/components/schemas/string'
          description: Identifies the range of bytes in the assembled archive that
            will be uploaded in this part. Amazon S3 Glacier uses this information
            to assemble the archive in the proper sequence. The format of this header
            follows RFC 2616. An example header is Content-Range:bytes 0-4194303/*.
        body:
          allOf:
          - $ref: '#/components/schemas/Stream'
          description: The data to upload.
      required:
      - accountId
      - vaultName
      - uploadId
      description: Provides options to upload a part of an archive in a multipart
        upload operation.
    UploadMultipartPartOutput:
      type: object
      properties:
        checksum:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The SHA256 tree hash that Amazon S3 Glacier computed for the
            uploaded part.
      description: Contains the Amazon S3 Glacier response to your request.
    UploadsList:
      type: array
      items:
        $ref: '#/components/schemas/UploadListElement'
    VaultAccessPolicy:
      type: object
      properties:
        Policy:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The vault access policy.
      description: Contains the vault access policy.
    VaultList:
      type: array
      items:
        $ref: '#/components/schemas/DescribeVaultOutput'
    VaultLockPolicy:
      type: object
      properties:
        Policy:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The vault lock policy.
      description: Contains the vault lock policy.
    VaultNotificationConfig:
      type: object
      properties:
        SNSTopic:
          allOf:
          - $ref: '#/components/schemas/string'
          description: The Amazon Simple Notification Service (Amazon SNS) topic Amazon
            Resource Name (ARN).
        Events:
          allOf:
          - $ref: '#/components/schemas/NotificationEventList'
          description: A list of one or more events for which Amazon S3 Glacier will
            send a notification to the specified Amazon SNS topic.
      description: Represents a vault's notification configuration.
    boolean:
      type: boolean
      default: false
    hashmap:
      type: object
      additionalProperties:
        type: string
    httpstatus:
      type: integer
      default: 0
    long:
      type: integer
      format: int64
      default: 0
    string:
      type: string
