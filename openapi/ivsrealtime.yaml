openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: ivs_realtime
  x-aws-serviceName: ivsrealtime
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-07-14'
  title: Amazon Interactive Video Service RealTime
  description: |-
    The Amazon Interactive Video Service (IVS) real-time API is REST compatible, using a standard HTTP API and an AWS EventBridge event stream for responses. JSON is used for both requests and responses, including errors.

    **Key Concepts**

      * **Stage** — A virtual space where participants can exchange video in real time.

      * **Participant token** — A token that authenticates a participant when they join a stage.

      * **Participant object** — Represents participants (people) in the stage and contains information about them. When a token is created, it includes a participant ID; when a participant uses that token to join a stage, the participant is associated with that participant ID. There is a 1:1 mapping between participant tokens and participants.

    For server-side composition:

      * **Composition process** — Composites participants of a stage into a single video and forwards it to a set of outputs (e.g., IVS channels). Composition operations support this process.

      * **Composition** — Controls the look of the outputs, including how participants are positioned in the video.

    For more information about your IVS live stream, also see [Getting Started with Amazon IVS Real-Time Streaming](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started.html).

    **Tagging**

    A _tag_ is a metadata label that you assign to an AWS resource. A tag comprises a _key_ and a _value_ , both set by you. For example, you might set a tag as `topic:nature` to label a particular video category. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html) in _Tagging AWS Resources and Tag Editor_ for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS stages has no service-specific constraints beyond what is documented there.

    Tags can help you identify and organize your AWS resources. For example, you can use the same tag for different resources to indicate that they are related. You can also use tags to manage access (see [Access Tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html)).

    The Amazon IVS real-time API has these tag-related operations: TagResource, UntagResource, and ListTagsForResource. The following resource supports tagging: Stage.

    At most 50 tags can be applied to a resource.
servers:
- description: The Amazon Interactive Video Service RealTime regional endpoint
  url: https://ivsrealtime.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /CreateEncoderConfiguration:
    post:
      operationId: CreateEncoderConfiguration
      description: |-
        Creates an EncoderConfiguration object.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/EncoderConfigurationName'
                video:
                  $ref: '#/components/schemas/Video'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CreateIngestConfiguration:
    post:
      operationId: CreateIngestConfiguration
      description: |-
        Creates a new IngestConfiguration resource, used to specify the ingest protocol for a stage.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/IngestConfigurationName'
                stageArn:
                  $ref: '#/components/schemas/IngestConfigurationStageArn'
                userId:
                  $ref: '#/components/schemas/UserId'
                attributes:
                  $ref: '#/components/schemas/ParticipantAttributes'
                ingestProtocol:
                  $ref: '#/components/schemas/IngestProtocol'
                insecureIngest:
                  $ref: '#/components/schemas/InsecureIngest'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CreateParticipantToken:
    post:
      operationId: CreateParticipantToken
      description: |-
        Creates an additional token for a specified stage. This can be done after stage creation or when tokens expire. Tokens always are scoped to the stage for which they are created.

        Encryption keys are owned by Amazon IVS and never used directly by your application.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageArn:
                  $ref: '#/components/schemas/StageArn'
                duration:
                  $ref: '#/components/schemas/ParticipantTokenDurationMinutes'
                userId:
                  $ref: '#/components/schemas/ParticipantTokenUserId'
                attributes:
                  $ref: '#/components/schemas/ParticipantTokenAttributes'
                capabilities:
                  $ref: '#/components/schemas/ParticipantTokenCapabilities'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CreateStage:
    post:
      operationId: CreateStage
      description: |-
        Creates a new stage (and optionally participant tokens).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/StageName'
                participantTokenConfigurations:
                  $ref: '#/components/schemas/ParticipantTokenConfigurations'
                tags:
                  $ref: '#/components/schemas/Tags'
                autoParticipantRecordingConfiguration:
                  $ref: '#/components/schemas/AutoParticipantRecordingConfiguration'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CreateStorageConfiguration:
    post:
      operationId: CreateStorageConfiguration
      description: |-
        Creates a new storage configuration, used to enable recording to Amazon S3. When a StorageConfiguration is created, IVS will modify the S3 bucketPolicy of the provided bucket. This will ensure that IVS has sufficient permissions to write content to the provided bucket.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/StorageConfigurationName'
                s3:
                  $ref: '#/components/schemas/S3StorageConfiguration'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeleteEncoderConfiguration:
    post:
      operationId: DeleteEncoderConfiguration
      description: |-
        Deletes an EncoderConfiguration resource. Ensures that no Compositions are using this template; otherwise, returns an error.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/EncoderConfigurationArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeleteIngestConfiguration:
    post:
      operationId: DeleteIngestConfiguration
      description: |-
        Deletes a specified IngestConfiguration, so it can no longer be used to broadcast. An IngestConfiguration cannot be deleted if the publisher is actively streaming to a stage, unless `force` is set to `true`.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/IngestConfigurationArn'
                force:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeletePublicKey:
    post:
      operationId: DeletePublicKey
      description: |-
        Deletes the specified public key used to sign stage participant tokens. This invalidates future participant tokens generated using the key pair’s private key.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/PublicKeyArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeleteStage:
    post:
      operationId: DeleteStage
      description: |-
        Shuts down and deletes the specified stage (disconnecting all participants). This operation also removes the `stageArn` from the associated IngestConfiguration, if there are participants using the IngestConfiguration to publish to the stage.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/StageArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeleteStorageConfiguration:
    post:
      operationId: DeleteStorageConfiguration
      description: |-
        Deletes the storage configuration for the specified ARN.

        If you try to delete a storage configuration that is used by a Composition, you will get an error (409 ConflictException). To avoid this, for all Compositions that reference the storage configuration, first use StopComposition and wait for it to complete, then use DeleteStorageConfiguration.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/StorageConfigurationArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DisconnectParticipant:
    post:
      operationId: DisconnectParticipant
      description: |-
        Disconnects a specified participant from a specified stage. If the participant is publishing using an IngestConfiguration, DisconnectParticipant also updates the `stageArn` in the IngestConfiguration to be an empty string.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageArn:
                  $ref: '#/components/schemas/StageArn'
                participantId:
                  $ref: '#/components/schemas/ParticipantTokenId'
                reason:
                  $ref: '#/components/schemas/DisconnectParticipantReason'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetComposition:
    post:
      operationId: GetComposition
      description: |-
        Get information about the specified Composition resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/CompositionArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetEncoderConfiguration:
    post:
      operationId: GetEncoderConfiguration
      description: |-
        Gets information about the specified EncoderConfiguration resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/EncoderConfigurationArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetIngestConfiguration:
    post:
      operationId: GetIngestConfiguration
      description: |-
        Gets information about the specified IngestConfiguration.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/IngestConfigurationArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetParticipant:
    post:
      operationId: GetParticipant
      description: |-
        Gets information about the specified participant token.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageArn:
                  $ref: '#/components/schemas/StageArn'
                sessionId:
                  $ref: '#/components/schemas/StageSessionId'
                participantId:
                  $ref: '#/components/schemas/ParticipantId'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetPublicKey:
    post:
      operationId: GetPublicKey
      description: |-
        Gets information for the specified public key.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/PublicKeyArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetStage:
    post:
      operationId: GetStage
      description: |-
        Gets information for the specified stage.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/StageArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetStageSession:
    post:
      operationId: GetStageSession
      description: |-
        Gets information for the specified stage session.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageArn:
                  $ref: '#/components/schemas/StageArn'
                sessionId:
                  $ref: '#/components/schemas/StageSessionId'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetStorageConfiguration:
    post:
      operationId: GetStorageConfiguration
      description: |-
        Gets the storage configuration for the specified ARN.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/StorageConfigurationArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ImportPublicKey:
    post:
      operationId: ImportPublicKey
      description: |-
        Import a public key to be used for signing stage participant tokens.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                publicKeyMaterial:
                  $ref: '#/components/schemas/PublicKeyMaterial'
                name:
                  $ref: '#/components/schemas/PublicKeyName'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListCompositions:
    post:
      operationId: ListCompositions
      description: |-
        Gets summary information about all Compositions in your account, in the AWS region where the API request is processed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filterByStageArn:
                  $ref: '#/components/schemas/StageArn'
                filterByEncoderConfigurationArn:
                  $ref: '#/components/schemas/EncoderConfigurationArn'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxCompositionResults'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListEncoderConfigurations:
    post:
      operationId: ListEncoderConfigurations
      description: |-
        Gets summary information about all EncoderConfigurations in your account, in the AWS region where the API request is processed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxEncoderConfigurationResults'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListIngestConfigurations:
    post:
      operationId: ListIngestConfigurations
      description: |-
        Lists all IngestConfigurations in your account, in the AWS region where the API request is processed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filterByStageArn:
                  $ref: '#/components/schemas/StageArn'
                filterByState:
                  $ref: '#/components/schemas/IngestConfigurationState'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxIngestConfigurationResults'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListParticipantEvents:
    post:
      operationId: ListParticipantEvents
      description: |-
        Lists events for a specified participant that occurred during a specified stage session.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageArn:
                  $ref: '#/components/schemas/StageArn'
                sessionId:
                  $ref: '#/components/schemas/StageSessionId'
                participantId:
                  $ref: '#/components/schemas/ParticipantId'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxParticipantEventResults'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListParticipants:
    post:
      operationId: ListParticipants
      description: |-
        Lists all participants in a specified stage session.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageArn:
                  $ref: '#/components/schemas/StageArn'
                sessionId:
                  $ref: '#/components/schemas/StageSessionId'
                filterByUserId:
                  $ref: '#/components/schemas/UserId'
                filterByPublished:
                  $ref: '#/components/schemas/Published'
                filterByState:
                  $ref: '#/components/schemas/ParticipantState'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxParticipantResults'
                filterByRecordingState:
                  $ref: '#/components/schemas/ParticipantRecordingFilterByRecordingState'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListPublicKeys:
    post:
      operationId: ListPublicKeys
      description: |-
        Gets summary information about all public keys in your account, in the AWS region where the API request is processed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxPublicKeyResults'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListStageSessions:
    post:
      operationId: ListStageSessions
      description: |-
        Gets all sessions for a specified stage.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageArn:
                  $ref: '#/components/schemas/StageArn'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxStageSessionResults'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListStages:
    post:
      operationId: ListStages
      description: |-
        Gets summary information about all stages in your account, in the AWS region where the API request is processed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxStageResults'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListStorageConfigurations:
    post:
      operationId: ListStorageConfigurations
      description: |-
        Gets summary information about all storage configurations in your account, in the AWS region where the API request is processed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxStorageConfigurationResults'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Gets information about AWS tags for the specified ARN.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      responses:
        '200': {}
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Adds or updates tags for the AWS resource with the specified ARN.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes tags from the resource with the specified ARN.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /StartComposition:
    post:
      operationId: StartComposition
      description: |-
        Starts a Composition from a stage based on the configuration provided in the request.

        A Composition is an ephemeral resource that exists after this operation returns successfully. Composition stops and the resource is deleted:

          * When StopComposition is called.

          * After a 1-minute timeout, when all participants are disconnected from the stage.

          * After a 1-minute timeout, if there are no participants in the stage when StartComposition is called.

          * When broadcasting to the IVS channel fails and all retries are exhausted.

          * When broadcasting is disconnected and all attempts to reconnect are exhausted.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageArn:
                  $ref: '#/components/schemas/StageArn'
                idempotencyToken:
                  $ref: '#/components/schemas/CompositionClientToken'
                layout:
                  $ref: '#/components/schemas/LayoutConfiguration'
                destinations:
                  $ref: '#/components/schemas/DestinationConfigurationList'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /StopComposition:
    post:
      operationId: StopComposition
      description: |-
        Stops and deletes a Composition resource. Any broadcast from the Composition resource is stopped.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/CompositionArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UpdateIngestConfiguration:
    post:
      operationId: UpdateIngestConfiguration
      description: |-
        Updates a specified IngestConfiguration. Only the stage ARN attached to the IngestConfiguration can be updated. An IngestConfiguration that is active cannot be updated.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/IngestConfigurationArn'
                stageArn:
                  $ref: '#/components/schemas/IngestConfigurationStageArn'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UpdateStage:
    post:
      operationId: UpdateStage
      description: |-
        Updates a stage’s configuration.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/StageArn'
                name:
                  $ref: '#/components/schemas/StageName'
                autoParticipantRecordingConfiguration:
                  $ref: '#/components/schemas/AutoParticipantRecordingConfiguration'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        accessControlAllowOrigin:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        accessControlExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        cacheControl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        contentSecurityPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        strictTransportSecurity:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xContentTypeOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xFrameOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xAmznErrorType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        exceptionMessage:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: User does not have sufficient access to perform this action.
      description: ''
    AttributeKey:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      minLength: 0
      maxLength: 128
    AutoParticipantRecordingConfiguration:
      type: object
      properties:
        storageConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/AutoParticipantRecordingStorageConfigurationArn'
          description: 'ARN of the StorageConfiguration resource to use for individual
            participant recording. Default: `""` (empty string, no storage configuration
            is specified). Individual participant recording cannot be started unless
            a storage configuration is specified, when a Stage is created or updated.
            To disable individual participant recording, set this to `""`; other fields
            in this object will get reset to their defaults when sending `""`.'
        mediaTypes:
          allOf:
          - $ref: '#/components/schemas/ParticipantRecordingMediaTypeList'
          description: 'Types of media to be recorded. Default: `AUDIO_VIDEO`.'
        thumbnailConfiguration:
          allOf:
          - $ref: '#/components/schemas/ParticipantThumbnailConfiguration'
          description: A complex type that allows you to enable/disable the recording
            of thumbnails for individual participant recording and modify the interval
            at which thumbnails are generated for the live session.
        recordingReconnectWindowSeconds:
          allOf:
          - $ref: '#/components/schemas/ParticipantRecordingReconnectWindowSeconds'
          description: 'If a stage publisher disconnects and then reconnects within
            the specified interval, the multiple recordings will be considered a single
            recording and merged together.


            The default value is 0, which disables merging.'
        hlsConfiguration:
          allOf:
          - $ref: '#/components/schemas/ParticipantRecordingHlsConfiguration'
          description: HLS configuration object for individual participant recording.
      required:
      - storageConfigurationArn
      description: Object specifying a configuration for individual participant recording.
    AutoParticipantRecordingStorageConfigurationArn:
      type: string
      pattern: ^^$|^arn:aws:ivs:[a-z0-9-]+:[0-9]+:storage-configuration/[a-zA-Z0-9-]+$$
      minLength: 0
      maxLength: 128
    Bitrate:
      type: integer
      minimum: 1
      maximum: 8500000
    Boolean:
      type: boolean
      default: false
    ChannelArn:
      type: string
      pattern: ^arn:aws:ivs:[a-z0-9-]+:[0-9]+:channel/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    ChannelDestinationConfiguration:
      type: object
      properties:
        channelArn:
          allOf:
          - $ref: '#/components/schemas/ChannelArn'
          description: ARN of the channel to use for broadcasting. The channel and
            stage resources must be in the same AWS account and region. The channel
            must be offline (not broadcasting).
        encoderConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationArn'
          description: ARN of the EncoderConfiguration resource. The encoder configuration
            and stage resources must be in the same AWS account and region.
      required:
      - channelArn
      description: Object specifying a channel as a destination.
    Composition:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/CompositionArn'
          description: ARN of the Composition resource.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: ARN of the stage used as input
        state:
          allOf:
          - $ref: '#/components/schemas/CompositionState'
          description: State of the Composition.
        layout:
          allOf:
          - $ref: '#/components/schemas/LayoutConfiguration'
          description: Layout object to configure composition parameters.
        destinations:
          allOf:
          - $ref: '#/components/schemas/DestinationList'
          description: Array of Destination objects. A Composition can contain either
            one destination (`channel` or `s3`) or two (one `channel` and one `s3`).
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: UTC time of the Composition start. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: UTC time of the Composition end. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
      required:
      - arn
      - stageArn
      - state
      - layout
      - destinations
      description: Object specifying a Composition resource.
    CompositionArn:
      type: string
      pattern: ^arn:aws:ivs:[a-z0-9-]+:[0-9]+:composition/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    CompositionClientToken:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      minLength: 1
      maxLength: 64
    CompositionRecordingHlsConfiguration:
      type: object
      properties:
        targetSegmentDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/CompositionRecordingTargetSegmentDurationSeconds'
          description: 'Defines the target duration for recorded segments generated
            when using composite recording. Segments may have durations shorter than
            the specified value when needed to ensure each segment begins with a keyframe.
            Default: 2.'
      description: An object representing a configuration of HLS recordings for server-side
        composition.
    CompositionRecordingTargetSegmentDurationSeconds:
      type: integer
      default: 2
      minimum: 2
      maximum: 10
    CompositionState:
      type: string
      enum:
      - STARTING
      - ACTIVE
      - STOPPING
      - FAILED
      - STOPPED
    CompositionSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/CompositionArn'
          description: ARN of the Composition resource.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: ARN of the attached stage.
        destinations:
          allOf:
          - $ref: '#/components/schemas/DestinationSummaryList'
          description: Array of Destination objects.
        state:
          allOf:
          - $ref: '#/components/schemas/CompositionState'
          description: State of the Composition resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: UTC time of the Composition start. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: UTC time of the Composition end. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
      required:
      - arn
      - stageArn
      - destinations
      - state
      description: Summary information about a Composition.
    CompositionSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/CompositionSummary'
    CompositionThumbnailConfiguration:
      type: object
      properties:
        targetIntervalSeconds:
          allOf:
          - $ref: '#/components/schemas/ThumbnailIntervalSeconds'
          description: 'The targeted thumbnail-generation interval in seconds. Default:
            60.'
        storage:
          allOf:
          - $ref: '#/components/schemas/ThumbnailStorageTypeList'
          description: 'Indicates the format in which thumbnails are recorded. `SEQUENTIAL`
            records all generated thumbnails in a serial manner, to the media/thumbnails/(width)x(height)
            directory, where (width) and (height) are the width and height of the
            thumbnail. `LATEST` saves the latest thumbnail in media/latest_thumbnail/(width)x(height)/thumb.jpg
            and overwrites it at the interval specified by `targetIntervalSeconds`.
            You can enable both `SEQUENTIAL` and `LATEST`. Default: `SEQUENTIAL`.'
      description: An object representing a configuration of thumbnails for recorded
        video for a Composition.
    CompositionThumbnailConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/CompositionThumbnailConfiguration'
    ConflictException:
      type: object
      properties:
        accessControlAllowOrigin:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        accessControlExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        cacheControl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        contentSecurityPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        strictTransportSecurity:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xContentTypeOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xFrameOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xAmznErrorType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        exceptionMessage:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: Updating or deleting a resource can cause an inconsistent state.
      description: ''
    CreateEncoderConfigurationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationName'
          description: Optional name to identify the resource.
        video:
          allOf:
          - $ref: '#/components/schemas/Video'
          description: 'Video configuration. Default: video resolution 1280x720, bitrate
            2500 kbps, 30 fps.'
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
    CreateEncoderConfigurationResponse:
      type: object
      properties:
        encoderConfiguration:
          allOf:
          - $ref: '#/components/schemas/EncoderConfiguration'
          description: The EncoderConfiguration that was created.
    CreateIngestConfigurationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationName'
          description: Optional name that can be specified for the IngestConfiguration
            being created.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationStageArn'
          description: ARN of the stage with which the IngestConfiguration is associated.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: Customer-assigned name to help identify the participant using
            the IngestConfiguration; this can be used to link a participant to a user
            in the customer’s own systems. This can be any UTF-8 encoded text. _This
            field is exposed to all stage participants and should not be used for
            personally identifying, confidential, or sensitive information._
        attributes:
          allOf:
          - $ref: '#/components/schemas/ParticipantAttributes'
          description: Application-provided attributes to store in the IngestConfiguration
            and attach to a stage. Map keys and values can contain UTF-8 encoded text.
            The maximum length of this field is 1 KB total. _This field is exposed
            to all stage participants and should not be used for personally identifying,
            confidential, or sensitive information._
        ingestProtocol:
          allOf:
          - $ref: '#/components/schemas/IngestProtocol'
          description: Type of ingest protocol that the user employs to broadcast.
            If this is set to `RTMP`, `insecureIngest` must be set to `true`.
        insecureIngest:
          allOf:
          - $ref: '#/components/schemas/InsecureIngest'
          description: 'Whether the stage allows insecure RTMP ingest. This must be
            set to `true`, if `ingestProtocol` is set to `RTMP`. Default: `false`.'
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - ingestProtocol
    CreateIngestConfigurationResponse:
      type: object
      properties:
        ingestConfiguration:
          allOf:
          - $ref: '#/components/schemas/IngestConfiguration'
          description: The IngestConfiguration that was created.
    CreateParticipantTokenRequest:
      type: object
      properties:
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: ARN of the stage to which this token is scoped.
        duration:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenDurationMinutes'
          description: 'Duration (in minutes), after which the token expires. Default:
            720 (12 hours).'
        userId:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenUserId'
          description: Name that can be specified to help identify the token. This
            can be any UTF-8 encoded text. _This field is exposed to all stage participants
            and should not be used for personally identifying, confidential, or sensitive
            information._
        attributes:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenAttributes'
          description: Application-provided attributes to encode into the token and
            attach to a stage. Map keys and values can contain UTF-8 encoded text.
            The maximum length of this field is 1 KB total. _This field is exposed
            to all stage participants and should not be used for personally identifying,
            confidential, or sensitive information._
        capabilities:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenCapabilities'
          description: 'Set of capabilities that the user is allowed to perform in
            the stage. Default: `PUBLISH, SUBSCRIBE`.'
      required:
      - stageArn
    CreateParticipantTokenResponse:
      type: object
      properties:
        participantToken:
          allOf:
          - $ref: '#/components/schemas/ParticipantToken'
          description: The participant token that was created.
    CreateStageRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/StageName'
          description: Optional name that can be specified for the stage being created.
        participantTokenConfigurations:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenConfigurations'
          description: Array of participant token configuration objects to attach
            to the new stage.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
        autoParticipantRecordingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AutoParticipantRecordingConfiguration'
          description: Configuration object for individual participant recording,
            to attach to the new stage.
    CreateStageResponse:
      type: object
      properties:
        stage:
          allOf:
          - $ref: '#/components/schemas/Stage'
          description: The stage that was created.
        participantTokens:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenList'
          description: Participant tokens attached to the stage. These correspond
            to the `participants` in the request.
    CreateStorageConfigurationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/StorageConfigurationName'
          description: Storage configuration name. The value does not need to be unique.
        s3:
          allOf:
          - $ref: '#/components/schemas/S3StorageConfiguration'
          description: A complex type that contains a storage configuration for where
            recorded video will be stored.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - s3
    CreateStorageConfigurationResponse:
      type: object
      properties:
        storageConfiguration:
          allOf:
          - $ref: '#/components/schemas/StorageConfiguration'
          description: The StorageConfiguration that was created.
    DeleteEncoderConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationArn'
          description: ARN of the EncoderConfiguration.
      required:
      - arn
    DeleteEncoderConfigurationResponse:
      type: object
      properties: {}
    DeleteIngestConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationArn'
          description: ARN of the IngestConfiguration.
        force:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Optional field to force deletion of the IngestConfiguration.
            If this is set to `true` when a participant is actively publishing, the
            participant is disconnected from the stage, followed by deletion of the
            IngestConfiguration. Default: `false`.'
      required:
      - arn
    DeleteIngestConfigurationResponse:
      type: object
      properties: {}
    DeletePublicKeyRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/PublicKeyArn'
          description: ARN of the public key to be deleted.
      required:
      - arn
    DeletePublicKeyResponse:
      type: object
      properties: {}
    DeleteStageRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: ARN of the stage to be deleted.
      required:
      - arn
    DeleteStageResponse:
      type: object
      properties: {}
    DeleteStorageConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StorageConfigurationArn'
          description: ARN of the storage configuration to be deleted.
      required:
      - arn
    DeleteStorageConfigurationResponse:
      type: object
      properties: {}
    Destination:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique identifier for this destination, assigned by IVS.
        state:
          allOf:
          - $ref: '#/components/schemas/DestinationState'
          description: State of the Composition Destination.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: UTC time of the destination start. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: UTC time of the destination end. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        configuration:
          allOf:
          - $ref: '#/components/schemas/DestinationConfiguration'
          description: Configuration used to create this destination.
        detail:
          allOf:
          - $ref: '#/components/schemas/DestinationDetail'
          description: Optional details regarding the status of the destination.
      required:
      - id
      - state
      - configuration
      description: Object specifying the status of a Destination.
    DestinationConfiguration:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/DestinationConfigurationName'
          description: Name that can be specified to help identify the destination.
        channel:
          allOf:
          - $ref: '#/components/schemas/ChannelDestinationConfiguration'
          description: An IVS channel to be used for broadcasting, for server-side
            composition. Either a `channel` or an `s3` must be specified.
        s3:
          allOf:
          - $ref: '#/components/schemas/S3DestinationConfiguration'
          description: An S3 storage configuration to be used for recording video
            data. Either a `channel` or an `s3` must be specified.
      description: Complex data type that defines destination-configuration objects.
    DestinationConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/DestinationConfiguration'
    DestinationConfigurationName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      minLength: 0
      maxLength: 128
    DestinationDetail:
      type: object
      properties:
        s3:
          allOf:
          - $ref: '#/components/schemas/S3Detail'
          description: An S3 detail object to return information about the S3 destination.
      description: Complex data type that defines destination-detail objects.
    DestinationList:
      type: array
      items:
        $ref: '#/components/schemas/Destination'
    DestinationState:
      type: string
      enum:
      - STARTING
      - ACTIVE
      - STOPPING
      - RECONNECTING
      - FAILED
      - STOPPED
    DestinationSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique identifier for this destination, assigned by IVS.
        state:
          allOf:
          - $ref: '#/components/schemas/DestinationState'
          description: State of the Composition Destination.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: UTC time of the destination start. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: UTC time of the destination end. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
      required:
      - id
      - state
      description: Summary information about a Destination.
    DestinationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/DestinationSummary'
    DisconnectParticipantReason:
      type: string
      minLength: 0
      maxLength: 128
    DisconnectParticipantRequest:
      type: object
      properties:
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: ARN of the stage to which the participant is attached.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenId'
          description: Identifier of the participant to be disconnected. IVS assigns
            this; it is returned by CreateParticipantToken (for streams using WebRTC
            ingest) or CreateIngestConfiguration (for streams using RTMP ingest).
        reason:
          allOf:
          - $ref: '#/components/schemas/DisconnectParticipantReason'
          description: Description of why this participant is being disconnected.
      required:
      - stageArn
      - participantId
    DisconnectParticipantResponse:
      type: object
      properties: {}
    EncoderConfiguration:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationArn'
          description: ARN of the EncoderConfiguration resource.
        name:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationName'
          description: Optional name to identify the resource.
        video:
          allOf:
          - $ref: '#/components/schemas/Video'
          description: 'Video configuration. Default: video resolution 1280x720, bitrate
            2500 kbps, 30 fps'
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - arn
      description: Settings for transcoding.
    EncoderConfigurationArn:
      type: string
      pattern: ^arn:aws:ivs:[a-z0-9-]+:[0-9]+:encoder-configuration/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    EncoderConfigurationArnList:
      type: array
      items:
        $ref: '#/components/schemas/EncoderConfigurationArn'
    EncoderConfigurationName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      minLength: 0
      maxLength: 128
    EncoderConfigurationSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationArn'
          description: ARN of the EncoderConfiguration resource.
        name:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationName'
          description: Optional name to identify the resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - arn
      description: Summary information about an EncoderConfiguration.
    EncoderConfigurationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/EncoderConfigurationSummary'
    Event:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/EventName'
          description: The name of the event.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          description: Unique identifier for the participant who triggered the event.
            This is assigned by IVS.
        eventTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: ISO 8601 timestamp (returned as a string) for when the event
            occurred.
        remoteParticipantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          description: Unique identifier for the remote participant. For a subscribe
            event, this is the publisher. For a publish or join event, this is null.
            This is assigned by IVS.
        errorCode:
          allOf:
          - $ref: '#/components/schemas/EventErrorCode'
          description: "If the event is an error event, the error code is provided\
            \ to give insight into the specific error that occurred. If the event\
            \ is not an error event, this field is null.\n\n  * `B_FRAME_PRESENT`\
            \ — The participant's stream includes B-frames. For details, see [ IVS\
            \ RTMP Publishing](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html).\n\
            \n  * `BITRATE_EXCEEDED` — The participant exceeded the maximum supported\
            \ bitrate. For details, see [ Service Quotas](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html).\n\
            \n  * `INSUFFICIENT_CAPABILITIES` — The participant tried to take an action\
            \ that the participant’s token is not allowed to do. For details on participant\
            \ capabilities, see the `capabilities` field in CreateParticipantToken.\n\
            \n  * `INTERNAL_SERVER_EXCEPTION` — The participant failed to publish\
            \ to the stage due to an internal server error.\n\n  * `INVALID_AUDIO_CODEC`\
            \ — The participant is using an invalid audio codec. For details, see\
            \ [ Stream Ingest](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html).\n\
            \n  * `INVALID_INPUT` — The participant is using an invalid input stream.\n\
            \n  * `INVALID_PROTOCOL` — The participant's IngestConfiguration resource\
            \ is configured for RTMPS but they tried streaming with RTMP. For details,\
            \ see [ IVS RTMP Publishing](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html).\n\
            \n  * `INVALID_STREAM_KEY` — The participant is using an invalid stream\
            \ key. For details, see [ IVS RTMP Publishing](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-rtmp-publishing.html).\n\
            \n  * `INVALID_VIDEO_CODEC` — The participant is using an invalid video\
            \ codec. For details, see [ Stream Ingest](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/rt-stream-ingest.html).\n\
            \n  * `PUBLISHER_NOT_FOUND` — The participant tried to subscribe to a\
            \ publisher that doesn’t exist.\n\n  * `QUOTA_EXCEEDED` — The number of\
            \ participants who want to publish/subscribe to a stage exceeds the quota.\
            \ For details, see [ Service Quotas](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html).\n\
            \n  * `RESOLUTION_EXCEEDED` — The participant exceeded the maximum supported\
            \ resolution. For details, see [ Service Quotas](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html).\n\
            \n  * `REUSE_OF_STREAM_KEY` — The participant tried to use a stream key\
            \ that is associated with another active stage session.\n\n  * `STREAM_DURATION_EXCEEDED`\
            \ — The participant exceeded the maximum allowed stream duration. For\
            \ details, see [ Service Quotas](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html)."
      description: An occurrence during a stage session.
    EventErrorCode:
      type: string
      enum:
      - INSUFFICIENT_CAPABILITIES
      - QUOTA_EXCEEDED
      - PUBLISHER_NOT_FOUND
      - BITRATE_EXCEEDED
      - RESOLUTION_EXCEEDED
      - STREAM_DURATION_EXCEEDED
      - INVALID_AUDIO_CODEC
      - INVALID_VIDEO_CODEC
      - INVALID_PROTOCOL
      - INVALID_STREAM_KEY
      - REUSE_OF_STREAM_KEY
      - B_FRAME_PRESENT
      - INVALID_INPUT
      - INTERNAL_SERVER_EXCEPTION
    EventList:
      type: array
      items:
        $ref: '#/components/schemas/Event'
    EventName:
      type: string
      enum:
      - JOINED
      - LEFT
      - PUBLISH_STARTED
      - PUBLISH_STOPPED
      - SUBSCRIBE_STARTED
      - SUBSCRIBE_STOPPED
      - PUBLISH_ERROR
      - SUBSCRIBE_ERROR
      - JOIN_ERROR
    Framerate:
      type: number
      format: float
      minimum: 1
      maximum: 60
    GetCompositionRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/CompositionArn'
          description: ARN of the Composition resource.
      required:
      - arn
    GetCompositionResponse:
      type: object
      properties:
        composition:
          allOf:
          - $ref: '#/components/schemas/Composition'
          description: The Composition that was returned.
    GetEncoderConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationArn'
          description: ARN of the EncoderConfiguration resource.
      required:
      - arn
    GetEncoderConfigurationResponse:
      type: object
      properties:
        encoderConfiguration:
          allOf:
          - $ref: '#/components/schemas/EncoderConfiguration'
          description: The EncoderConfiguration that was returned.
    GetIngestConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationArn'
          description: ARN of the ingest for which the information is to be retrieved.
      required:
      - arn
    GetIngestConfigurationResponse:
      type: object
      properties:
        ingestConfiguration:
          allOf:
          - $ref: '#/components/schemas/IngestConfiguration'
          description: The IngestConfiguration that was returned.
    GetParticipantRequest:
      type: object
      properties:
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: Stage ARN.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          description: ID of a session within the stage.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          description: Unique identifier for the participant. This is assigned by
            IVS and returned by CreateParticipantToken.
      required:
      - stageArn
      - sessionId
      - participantId
    GetParticipantResponse:
      type: object
      properties:
        participant:
          allOf:
          - $ref: '#/components/schemas/Participant'
          description: The participant that is returned.
    GetPublicKeyRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/PublicKeyArn'
          description: ARN of the public key for which the information is to be retrieved.
      required:
      - arn
    GetPublicKeyResponse:
      type: object
      properties:
        publicKey:
          allOf:
          - $ref: '#/components/schemas/PublicKey'
          description: The public key that is returned.
    GetStageRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: ARN of the stage for which the information is to be retrieved.
      required:
      - arn
    GetStageResponse:
      type: object
      properties:
        stage:
          allOf:
          - $ref: '#/components/schemas/Stage'
          description: The stage that is returned.
    GetStageSessionRequest:
      type: object
      properties:
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: ARN of the stage for which the information is to be retrieved.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          description: ID of a session within the stage.
      required:
      - stageArn
      - sessionId
    GetStageSessionResponse:
      type: object
      properties:
        stageSession:
          allOf:
          - $ref: '#/components/schemas/StageSession'
          description: The stage session that is returned.
    GetStorageConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StorageConfigurationArn'
          description: ARN of the storage configuration to be retrieved.
      required:
      - arn
    GetStorageConfigurationResponse:
      type: object
      properties:
        storageConfiguration:
          allOf:
          - $ref: '#/components/schemas/StorageConfiguration'
          description: The StorageConfiguration that was returned.
    GridConfiguration:
      type: object
      properties:
        featuredParticipantAttribute:
          allOf:
          - $ref: '#/components/schemas/AttributeKey'
          description: 'This attribute name identifies the featured slot. A participant
            with this attribute set to `"true"` (as a string value) in ParticipantTokenConfiguration
            is placed in the featured slot. Default: `""` (no featured participant).'
        omitStoppedVideo:
          allOf:
          - $ref: '#/components/schemas/OmitStoppedVideo'
          description: 'Determines whether to omit participants with stopped video
            in the composition. Default: `false`.'
        videoAspectRatio:
          allOf:
          - $ref: '#/components/schemas/VideoAspectRatio'
          description: 'Sets the non-featured participant display mode, to control
            the aspect ratio of video tiles. `VIDEO` is 16:9, `SQUARE` is 1:1, and
            `PORTRAIT` is 3:4. Default: `VIDEO`.'
        videoFillMode:
          allOf:
          - $ref: '#/components/schemas/VideoFillMode'
          description: 'Defines how video content fits within the participant tile:
            `FILL` (stretched), `COVER` (cropped), or `CONTAIN` (letterboxed). When
            not set, `videoFillMode` defaults to `COVER` fill mode for participants
            in the grid and to `CONTAIN` fill mode for featured participants.'
        gridGap:
          allOf:
          - $ref: '#/components/schemas/GridGap'
          description: 'Specifies the spacing between participant tiles in pixels.
            Default: `2`.'
      description: Configuration information specific to Grid layout, for server-side
        composition. See "Layouts" in [Server-Side Composition](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/server-side-composition.html).
    GridGap:
      type: integer
      default: 0
      minimum: 0
    Height:
      type: integer
      minimum: 2
      maximum: 1920
    ImportPublicKeyRequest:
      type: object
      properties:
        publicKeyMaterial:
          allOf:
          - $ref: '#/components/schemas/PublicKeyMaterial'
          description: The content of the public key to be imported.
        name:
          allOf:
          - $ref: '#/components/schemas/PublicKeyName'
          description: Name of the public key to be imported.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - publicKeyMaterial
    ImportPublicKeyResponse:
      type: object
      properties:
        publicKey:
          allOf:
          - $ref: '#/components/schemas/PublicKey'
          description: The public key that was imported.
    IngestConfiguration:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationName'
          description: Ingest name
        arn:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationArn'
          description: Ingest configuration ARN.
        ingestProtocol:
          allOf:
          - $ref: '#/components/schemas/IngestProtocol'
          description: Type of ingest protocol that the user employs for broadcasting.
        streamKey:
          allOf:
          - $ref: '#/components/schemas/StreamKey'
          description: Ingest-key value for the RTMP(S) protocol.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationStageArn'
          description: ARN of the stage with which the IngestConfiguration is associated.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          description: ID of the participant within the stage.
        state:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationState'
          description: State of the ingest configuration. It is `ACTIVE` if a publisher
            currently is publishing to the stage associated with the ingest configuration.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: Customer-assigned name to help identify the participant using
            the IngestConfiguration; this can be used to link a participant to a user
            in the customer’s own systems. This can be any UTF-8 encoded text. _This
            field is exposed to all stage participants and should not be used for
            personally identifying, confidential, or sensitive information._
        attributes:
          allOf:
          - $ref: '#/components/schemas/ParticipantAttributes'
          description: Application-provided attributes to to store in the IngestConfiguration
            and attach to a stage. Map keys and values can contain UTF-8 encoded text.
            The maximum length of this field is 1 KB total. _This field is exposed
            to all stage participants and should not be used for personally identifying,
            confidential, or sensitive information._
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - arn
      - ingestProtocol
      - streamKey
      - stageArn
      - participantId
      - state
      description: Object specifying an ingest configuration.
    IngestConfigurationArn:
      type: string
      pattern: ^arn:aws:ivs:[a-z0-9-]+:[0-9]+:ingest-configuration/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    IngestConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/IngestConfigurationSummary'
    IngestConfigurationName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      minLength: 0
      maxLength: 128
    IngestConfigurationStageArn:
      type: string
      pattern: ^^$|^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$$
      minLength: 0
      maxLength: 128
    IngestConfigurationState:
      type: string
      enum:
      - ACTIVE
      - INACTIVE
    IngestConfigurationSummary:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationName'
          description: Ingest name.
        arn:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationArn'
          description: Ingest configuration ARN.
        ingestProtocol:
          allOf:
          - $ref: '#/components/schemas/IngestProtocol'
          description: Type of ingest protocol that the user employs for broadcasting.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationStageArn'
          description: ARN of the stage with which the IngestConfiguration is associated.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          description: ID of the participant within the stage.
        state:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationState'
          description: State of the ingest configuration. It is `ACTIVE` if a publisher
            currently is publishing to the stage associated with the ingest configuration.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: Customer-assigned name to help identify the participant using
            the IngestConfiguration; this can be used to link a participant to a user
            in the customer’s own systems. This can be any UTF-8 encoded text. _This
            field is exposed to all stage participants and should not be used for
            personally identifying, confidential, or sensitive information._
      required:
      - arn
      - ingestProtocol
      - stageArn
      - participantId
      - state
      description: Summary information about an IngestConfiguration.
    IngestProtocol:
      type: string
      enum:
      - RTMP
      - RTMPS
    InsecureIngest:
      type: boolean
      default: false
    InternalServerException:
      type: object
      properties:
        accessControlAllowOrigin:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        accessControlExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        cacheControl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        contentSecurityPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        strictTransportSecurity:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xContentTypeOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xFrameOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xAmznErrorType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        exceptionMessage:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: Unexpected error during processing of request.
      description: ''
    LayoutConfiguration:
      type: object
      properties:
        grid:
          allOf:
          - $ref: '#/components/schemas/GridConfiguration'
          description: 'Configuration related to grid layout. Default: Grid layout.'
        pip:
          allOf:
          - $ref: '#/components/schemas/PipConfiguration'
          description: Configuration related to PiP layout.
      description: Configuration information of supported layouts for server-side
        composition.
    ListCompositionsRequest:
      type: object
      properties:
        filterByStageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: Filters the Composition list to match the specified Stage ARN.
        filterByEncoderConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationArn'
          description: Filters the Composition list to match the specified EncoderConfiguration
            attached to at least one of its output.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first Composition to retrieve. This is used for pagination;
            see the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxCompositionResults'
          description: 'Maximum number of results to return. Default: 100.'
    ListCompositionsResponse:
      type: object
      properties:
        compositions:
          allOf:
          - $ref: '#/components/schemas/CompositionSummaryList'
          description: List of the matching Compositions (summary information only).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more compositions than `maxResults`, use `nextToken`
            in the request to get the next set.
      required:
      - compositions
    ListEncoderConfigurationsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first encoder configuration to retrieve. This is used for
            pagination; see the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxEncoderConfigurationResults'
          description: 'Maximum number of results to return. Default: 100.'
    ListEncoderConfigurationsResponse:
      type: object
      properties:
        encoderConfigurations:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationSummaryList'
          description: List of the matching EncoderConfigurations (summary information
            only).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more encoder configurations than `maxResults`,
            use `nextToken` in the request to get the next set.
      required:
      - encoderConfigurations
    ListIngestConfigurationsRequest:
      type: object
      properties:
        filterByStageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: Filters the response list to match the specified stage ARN.
            Only one filter (by stage ARN or by state) can be used at a time.
        filterByState:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationState'
          description: Filters the response list to match the specified state. Only
            one filter (by stage ARN or by state) can be used at a time.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first IngestConfiguration to retrieve. This is used for
            pagination; see the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxIngestConfigurationResults'
          description: 'Maximum number of results to return. Default: 50.'
    ListIngestConfigurationsResponse:
      type: object
      properties:
        ingestConfigurations:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationList'
          description: List of the matching ingest configurations (summary information
            only).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more IngestConfigurations than `maxResults`, use
            `nextToken` in the request to get the next set.
      required:
      - ingestConfigurations
    ListParticipantEventsRequest:
      type: object
      properties:
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: Stage ARN.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          description: ID of a session within the stage.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          description: Unique identifier for this participant. This is assigned by
            IVS and returned by CreateParticipantToken.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first participant event to retrieve. This is used for pagination;
            see the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxParticipantEventResults'
          description: 'Maximum number of results to return. Default: 50.'
      required:
      - stageArn
      - sessionId
      - participantId
    ListParticipantEventsResponse:
      type: object
      properties:
        events:
          allOf:
          - $ref: '#/components/schemas/EventList'
          description: List of the matching events.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more events than `maxResults`, use `nextToken`
            in the request to get the next set.
      required:
      - events
    ListParticipantsRequest:
      type: object
      properties:
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: Stage ARN.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          description: ID of the session within the stage.
        filterByUserId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: Filters the response list to match the specified user ID. Only
            one of `filterByUserId`, `filterByPublished`, `filterByState`, or `filterByRecordingState`
            can be provided per request. A `userId` is a customer-assigned name to
            help identify the token; this can be used to link a participant to a user
            in the customer’s own systems.
        filterByPublished:
          allOf:
          - $ref: '#/components/schemas/Published'
          description: Filters the response list to only show participants who published
            during the stage session. Only one of `filterByUserId`, `filterByPublished`,
            `filterByState`, or `filterByRecordingState` can be provided per request.
        filterByState:
          allOf:
          - $ref: '#/components/schemas/ParticipantState'
          description: Filters the response list to only show participants in the
            specified state. Only one of `filterByUserId`, `filterByPublished`, `filterByState`,
            or `filterByRecordingState` can be provided per request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first participant to retrieve. This is used for pagination;
            see the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxParticipantResults'
          description: 'Maximum number of results to return. Default: 50.'
        filterByRecordingState:
          allOf:
          - $ref: '#/components/schemas/ParticipantRecordingFilterByRecordingState'
          description: Filters the response list to only show participants with the
            specified recording state. Only one of `filterByUserId`, `filterByPublished`,
            `filterByState`, or `filterByRecordingState` can be provided per request.
      required:
      - stageArn
      - sessionId
    ListParticipantsResponse:
      type: object
      properties:
        participants:
          allOf:
          - $ref: '#/components/schemas/ParticipantList'
          description: List of the matching participants (summary information only).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more participants than `maxResults`, use `nextToken`
            in the request to get the next set.
      required:
      - participants
    ListPublicKeysRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first public key to retrieve. This is used for pagination;
            see the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxPublicKeyResults'
          description: 'Maximum number of results to return. Default: 50.'
    ListPublicKeysResponse:
      type: object
      properties:
        publicKeys:
          allOf:
          - $ref: '#/components/schemas/PublicKeyList'
          description: List of the matching public keys (summary information only).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more public keys than `maxResults`, use `nextToken`
            in the request to get the next set.
      required:
      - publicKeys
    ListStageSessionsRequest:
      type: object
      properties:
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: Stage ARN.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first stage session to retrieve. This is used for pagination;
            see the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxStageSessionResults'
          description: 'Maximum number of results to return. Default: 50.'
      required:
      - stageArn
    ListStageSessionsResponse:
      type: object
      properties:
        stageSessions:
          allOf:
          - $ref: '#/components/schemas/StageSessionList'
          description: List of matching stage sessions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more stage sessions than `maxResults`, use `nextToken`
            in the request to get the next set.
      required:
      - stageSessions
    ListStagesRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first stage to retrieve. This is used for pagination; see
            the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxStageResults'
          description: 'Maximum number of results to return. Default: 50.'
    ListStagesResponse:
      type: object
      properties:
        stages:
          allOf:
          - $ref: '#/components/schemas/StageSummaryList'
          description: List of the matching stages (summary information only).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more stages than `maxResults`, use `nextToken`
            in the request to get the next set.
      required:
      - stages
    ListStorageConfigurationsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first storage configuration to retrieve. This is used for
            pagination; see the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxStorageConfigurationResults'
          description: 'Maximum number of storage configurations to return. Default:
            your service quota or 100, whichever is smaller.'
    ListStorageConfigurationsResponse:
      type: object
      properties:
        storageConfigurations:
          allOf:
          - $ref: '#/components/schemas/StorageConfigurationSummaryList'
          description: List of the matching storage configurations.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more storage configurations than `maxResults`,
            use `nextToken` in the request to get the next set.
      required:
      - storageConfigurations
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The ARN of the resource to be retrieved. The ARN must be URL-encoded.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`.
      required:
      - tags
    MaxCompositionResults:
      type: integer
      minimum: 1
      maximum: 100
    MaxEncoderConfigurationResults:
      type: integer
      minimum: 1
      maximum: 100
    MaxIngestConfigurationResults:
      type: integer
      minimum: 1
      maximum: 100
    MaxParticipantEventResults:
      type: integer
      minimum: 1
      maximum: 100
    MaxParticipantResults:
      type: integer
      minimum: 1
      maximum: 100
    MaxPublicKeyResults:
      type: integer
      minimum: 1
      maximum: 100
    MaxStageResults:
      type: integer
      minimum: 1
      maximum: 100
    MaxStageSessionResults:
      type: integer
      minimum: 1
      maximum: 100
    MaxStorageConfigurationResults:
      type: integer
      minimum: 1
      maximum: 100
    OmitStoppedVideo:
      type: boolean
      default: false
    PaginationToken:
      type: string
      pattern: ^[a-zA-Z0-9+/=_-]*$
      minLength: 0
      maxLength: 1024
    Participant:
      type: object
      properties:
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          description: Unique identifier for this participant, assigned by IVS.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: Customer-assigned name to help identify the token; this can
            be used to link a participant to a user in the customer’s own systems.
            This can be any UTF-8 encoded text. _This field is exposed to all stage
            participants and should not be used for personally identifying, confidential,
            or sensitive information_.
        state:
          allOf:
          - $ref: '#/components/schemas/ParticipantState'
          description: Whether the participant is connected to or disconnected from
            the stage.
        firstJoinTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: ISO 8601 timestamp (returned as a string) when the participant
            first joined the stage session.
        attributes:
          allOf:
          - $ref: '#/components/schemas/ParticipantAttributes'
          description: Application-provided attributes to encode into the token and
            attach to a stage. Map keys and values can contain UTF-8 encoded text.
            The maximum length of this field is 1 KB total. _This field is exposed
            to all stage participants and should not be used for personally identifying,
            confidential, or sensitive information_.
        published:
          allOf:
          - $ref: '#/components/schemas/Published'
          description: Whether the participant ever published to the stage session.
        ispName:
          allOf:
          - $ref: '#/components/schemas/ParticipantClientAttribute'
          description: The participant’s Internet Service Provider.
        osName:
          allOf:
          - $ref: '#/components/schemas/ParticipantClientAttribute'
          description: The participant’s operating system.
        osVersion:
          allOf:
          - $ref: '#/components/schemas/ParticipantClientAttribute'
          description: The participant’s operating system version.
        browserName:
          allOf:
          - $ref: '#/components/schemas/ParticipantClientAttribute'
          description: The participant’s browser.
        browserVersion:
          allOf:
          - $ref: '#/components/schemas/ParticipantClientAttribute'
          description: The participant’s browser version.
        sdkVersion:
          allOf:
          - $ref: '#/components/schemas/ParticipantClientAttribute'
          description: The participant’s SDK version.
        recordingS3BucketName:
          allOf:
          - $ref: '#/components/schemas/ParticipantRecordingS3BucketName'
          description: Name of the S3 bucket to where the participant is being recorded,
            if individual participant recording is enabled, or `""` (empty string),
            if recording is not enabled.
        recordingS3Prefix:
          allOf:
          - $ref: '#/components/schemas/ParticipantRecordingS3Prefix'
          description: S3 prefix of the S3 bucket where the participant is being recorded,
            if individual participant recording is enabled, or `""` (empty string),
            if recording is not enabled.
        recordingState:
          allOf:
          - $ref: '#/components/schemas/ParticipantRecordingState'
          description: The participant’s recording state.
        protocol:
          allOf:
          - $ref: '#/components/schemas/ParticipantProtocol'
          description: Type of ingest protocol that the participant employs for broadcasting.
      description: Object describing a participant that has joined a stage.
    ParticipantAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    ParticipantClientAttribute:
      type: string
      pattern: ^[a-zA-Z0-9-_.,:;\s]*$
      minLength: 0
      maxLength: 128
    ParticipantId:
      type: string
      pattern: ^[a-zA-Z0-9-]*$
      minLength: 0
      maxLength: 64
    ParticipantList:
      type: array
      items:
        $ref: '#/components/schemas/ParticipantSummary'
    ParticipantProtocol:
      type: string
      enum:
      - UNKNOWN
      - WHIP
      - RTMP
      - RTMPS
    ParticipantRecordingFilterByRecordingState:
      type: string
      enum:
      - STARTING
      - ACTIVE
      - STOPPING
      - STOPPED
      - FAILED
    ParticipantRecordingHlsConfiguration:
      type: object
      properties:
        targetSegmentDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/ParticipantRecordingTargetSegmentDurationSeconds'
          description: 'Defines the target duration for recorded segments generated
            when recording a stage participant. Segments may have durations longer
            than the specified value when needed to ensure each segment begins with
            a keyframe. Default: 6.'
      description: An object representing a configuration of participant HLS recordings
        for individual participant recording.
    ParticipantRecordingMediaType:
      type: string
      enum:
      - AUDIO_VIDEO
      - AUDIO_ONLY
      - NONE
    ParticipantRecordingMediaTypeList:
      type: array
      items:
        $ref: '#/components/schemas/ParticipantRecordingMediaType'
    ParticipantRecordingReconnectWindowSeconds:
      type: integer
      default: 0
      minimum: 0
      maximum: 300
    ParticipantRecordingS3BucketName:
      type: string
      pattern: ^[a-z0-9-.]*$
      minLength: 0
      maxLength: 63
    ParticipantRecordingS3Prefix:
      type: string
      pattern: ^[a-zA-Z0-9-]*$
      minLength: 0
      maxLength: 256
    ParticipantRecordingState:
      type: string
      enum:
      - STARTING
      - ACTIVE
      - STOPPING
      - STOPPED
      - FAILED
      - DISABLED
    ParticipantRecordingTargetSegmentDurationSeconds:
      type: integer
      default: 6
      minimum: 2
      maximum: 10
    ParticipantState:
      type: string
      enum:
      - CONNECTED
      - DISCONNECTED
    ParticipantSummary:
      type: object
      properties:
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          description: Unique identifier for this participant, assigned by IVS.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: Customer-assigned name to help identify the token; this can
            be used to link a participant to a user in the customer’s own systems.
            This can be any UTF-8 encoded text. _This field is exposed to all stage
            participants and should not be used for personally identifying, confidential,
            or sensitive information_.
        state:
          allOf:
          - $ref: '#/components/schemas/ParticipantState'
          description: Whether the participant is connected to or disconnected from
            the stage.
        firstJoinTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: ISO 8601 timestamp (returned as a string) when the participant
            first joined the stage session.
        published:
          allOf:
          - $ref: '#/components/schemas/Published'
          description: Whether the participant ever published to the stage session.
        recordingState:
          allOf:
          - $ref: '#/components/schemas/ParticipantRecordingState'
          description: The participant’s recording state.
      description: Summary object describing a participant that has joined a stage.
    ParticipantThumbnailConfiguration:
      type: object
      properties:
        targetIntervalSeconds:
          allOf:
          - $ref: '#/components/schemas/ThumbnailIntervalSeconds'
          description: 'The targeted thumbnail-generation interval in seconds. This
            is configurable only if `recordingMode` is `INTERVAL`. Default: 60.'
        storage:
          allOf:
          - $ref: '#/components/schemas/ThumbnailStorageTypeList'
          description: 'Indicates the format in which thumbnails are recorded. `SEQUENTIAL`
            records all generated thumbnails in a serial manner, to the media/thumbnails/high
            directory. `LATEST` saves the latest thumbnail in media/latest_thumbnail/high/thumb.jpg
            and overwrites it at the interval specified by `targetIntervalSeconds`.
            You can enable both `SEQUENTIAL` and `LATEST`. Default: `SEQUENTIAL`.'
        recordingMode:
          allOf:
          - $ref: '#/components/schemas/ThumbnailRecordingMode'
          description: 'Thumbnail recording mode. Default: `DISABLED`.'
      description: An object representing a configuration of thumbnails for recorded
        video from an individual participant.
    ParticipantToken:
      type: object
      properties:
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenId'
          description: Unique identifier for this participant token, assigned by IVS.
        token:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenString'
          description: The issued client token, encrypted.
        userId:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenUserId'
          description: Customer-assigned name to help identify the token; this can
            be used to link a participant to a user in the customer’s own systems.
            This can be any UTF-8 encoded text. _This field is exposed to all stage
            participants and should not be used for personally identifying, confidential,
            or sensitive information._
        attributes:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenAttributes'
          description: Application-provided attributes to encode into the token and
            attach to a stage. _This field is exposed to all stage participants and
            should not be used for personally identifying, confidential, or sensitive
            information._
        duration:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenDurationMinutes'
          description: 'Duration (in minutes), after which the participant token expires.
            Default: 720 (12 hours).'
        capabilities:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenCapabilities'
          description: Set of capabilities that the user is allowed to perform in
            the stage.
        expirationTime:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenExpirationTime'
          description: ISO 8601 timestamp (returned as a string) for when this token
            expires.
      description: 'Object specifying a participant token in a stage.


        **Important** : Treat tokens as opaque; i.e., do not build functionality based
        on token contents. The format of tokens could change in the future.'
    ParticipantTokenAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    ParticipantTokenCapabilities:
      type: array
      items:
        $ref: '#/components/schemas/ParticipantTokenCapability'
    ParticipantTokenCapability:
      type: string
      enum:
      - PUBLISH
      - SUBSCRIBE
    ParticipantTokenConfiguration:
      type: object
      properties:
        duration:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenDurationMinutes'
          description: 'Duration (in minutes), after which the corresponding participant
            token expires. Default: 720 (12 hours).'
        userId:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenUserId'
          description: Customer-assigned name to help identify the token; this can
            be used to link a participant to a user in the customer’s own systems.
            This can be any UTF-8 encoded text. _This field is exposed to all stage
            participants and should not be used for personally identifying, confidential,
            or sensitive information._
        attributes:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenAttributes'
          description: Application-provided attributes to encode into the corresponding
            participant token and attach to a stage. Map keys and values can contain
            UTF-8 encoded text. The maximum length of this field is 1 KB total. _This
            field is exposed to all stage participants and should not be used for
            personally identifying, confidential, or sensitive information._
        capabilities:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenCapabilities'
          description: Set of capabilities that the user is allowed to perform in
            the stage.
      description: Object specifying a participant token configuration in a stage.
    ParticipantTokenConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/ParticipantTokenConfiguration'
    ParticipantTokenDurationMinutes:
      type: integer
      minimum: 1
      maximum: 20160
    ParticipantTokenExpirationTime:
      type: string
      format: date-time
    ParticipantTokenId:
      type: string
    ParticipantTokenList:
      type: array
      items:
        $ref: '#/components/schemas/ParticipantToken'
    ParticipantTokenString:
      type: string
    ParticipantTokenUserId:
      type: string
      minLength: 0
      maxLength: 128
    PendingVerification:
      type: object
      properties:
        accessControlAllowOrigin:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        accessControlExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        cacheControl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        contentSecurityPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        strictTransportSecurity:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xContentTypeOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xFrameOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xAmznErrorType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        exceptionMessage:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: Your account is pending verification.
      description: ''
    PipBehavior:
      type: string
      enum:
      - STATIC
      - DYNAMIC
    PipConfiguration:
      type: object
      properties:
        featuredParticipantAttribute:
          allOf:
          - $ref: '#/components/schemas/AttributeKey'
          description: 'This attribute name identifies the featured slot. A participant
            with this attribute set to `"true"` (as a string value) in ParticipantTokenConfiguration
            is placed in the featured slot. Default: `""` (no featured participant).'
        omitStoppedVideo:
          allOf:
          - $ref: '#/components/schemas/OmitStoppedVideo'
          description: 'Determines whether to omit participants with stopped video
            in the composition. Default: `false`.'
        videoFillMode:
          allOf:
          - $ref: '#/components/schemas/VideoFillMode'
          description: 'Defines how video content fits within the participant tile:
            `FILL` (stretched), `COVER` (cropped), or `CONTAIN` (letterboxed). Default:
            `COVER`.'
        gridGap:
          allOf:
          - $ref: '#/components/schemas/GridGap'
          description: 'Specifies the spacing between participant tiles in pixels.
            Default: `0`.'
        pipParticipantAttribute:
          allOf:
          - $ref: '#/components/schemas/AttributeKey'
          description: 'Specifies the participant for the PiP window. A participant
            with this attribute set to `"true"` (as a string value) in ParticipantTokenConfiguration
            is placed in the PiP slot. Default: `""` (no PiP participant).'
        pipBehavior:
          allOf:
          - $ref: '#/components/schemas/PipBehavior'
          description: 'Defines PiP behavior when all participants have left: `STATIC`
            (maintains original position/size) or `DYNAMIC` (expands to full composition).
            Default: `STATIC`.'
        pipOffset:
          allOf:
          - $ref: '#/components/schemas/PipOffset'
          description: 'Sets the PiP window’s offset position in pixels from the closest
            edges determined by `PipPosition`. Default: `0`.'
        pipPosition:
          allOf:
          - $ref: '#/components/schemas/PipPosition'
          description: 'Determines the corner position of the PiP window. Default:
            `BOTTOM_RIGHT`.'
        pipWidth:
          allOf:
          - $ref: '#/components/schemas/PipWidth'
          description: Specifies the width of the PiP window in pixels. When this
            is not set explicitly, `pipWidth`’s value will be based on the size of
            the composition and the aspect ratio of the participant’s video.
        pipHeight:
          allOf:
          - $ref: '#/components/schemas/PipHeight'
          description: Specifies the height of the PiP window in pixels. When this
            is not set explicitly, `pipHeight`’s value will be based on the size of
            the composition and the aspect ratio of the participant’s video.
      description: Configuration information specific to Picture-in-Picture (PiP)
        layout, for [server-side composition](https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/server-side-composition.html).
    PipHeight:
      type: integer
      minimum: 1
    PipOffset:
      type: integer
      default: 0
      minimum: 0
    PipPosition:
      type: string
      enum:
      - TOP_LEFT
      - TOP_RIGHT
      - BOTTOM_LEFT
      - BOTTOM_RIGHT
    PipWidth:
      type: integer
      minimum: 1
    PublicKey:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/PublicKeyArn'
          description: Public key ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/PublicKeyName'
          description: Public key name.
        publicKeyMaterial:
          allOf:
          - $ref: '#/components/schemas/PublicKeyMaterial'
          description: Public key material.
        fingerprint:
          allOf:
          - $ref: '#/components/schemas/PublicKeyFingerprint'
          description: The public key fingerprint, a short string used to identify
            or verify the full public key.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      description: Object specifying a public key used to sign stage participant tokens.
    PublicKeyArn:
      type: string
      pattern: ^arn:aws:ivs:[a-z0-9-]+:[0-9]+:public-key/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    PublicKeyFingerprint:
      type: string
    PublicKeyList:
      type: array
      items:
        $ref: '#/components/schemas/PublicKeySummary'
    PublicKeyMaterial:
      type: string
      pattern: '-----BEGIN PUBLIC KEY-----\r?\n([a-zA-Z0-9+/=\r\n]+)\r?\n-----END
        PUBLIC KEY-----(\r?\n)?'
    PublicKeyName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      minLength: 0
      maxLength: 128
    PublicKeySummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/PublicKeyArn'
          description: Public key ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/PublicKeyName'
          description: Public key name.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      description: Summary information about a public key.
    Published:
      type: boolean
      default: false
    RecordingConfiguration:
      type: object
      properties:
        hlsConfiguration:
          allOf:
          - $ref: '#/components/schemas/CompositionRecordingHlsConfiguration'
          description: An HLS configuration object to return information about how
            the recording will be configured.
        format:
          allOf:
          - $ref: '#/components/schemas/RecordingConfigurationFormat'
          description: The recording format for storing a recording in Amazon S3.
      description: An object representing a configuration to record a stage stream.
    RecordingConfigurationFormat:
      type: string
      enum:
      - HLS
    ResourceArn:
      type: string
      pattern: ^arn:aws:ivs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    ResourceNotFoundException:
      type: object
      properties:
        accessControlAllowOrigin:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        accessControlExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        cacheControl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        contentSecurityPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        strictTransportSecurity:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xContentTypeOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xFrameOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xAmznErrorType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        exceptionMessage:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: Request references a resource which does not exist.
      description: ''
    S3BucketName:
      type: string
      pattern: ^[a-z0-9-.]+$
      minLength: 3
      maxLength: 63
    S3DestinationConfiguration:
      type: object
      properties:
        storageConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/StorageConfigurationArn'
          description: ARN of the StorageConfiguration where recorded videos will
            be stored.
        encoderConfigurationArns:
          allOf:
          - $ref: '#/components/schemas/EncoderConfigurationArnList'
          description: ARNs of the EncoderConfiguration resource. The encoder configuration
            and stage resources must be in the same AWS account and region.
        recordingConfiguration:
          allOf:
          - $ref: '#/components/schemas/RecordingConfiguration'
          description: Array of maps, each of the form `string:string (key:value)`.
            This is an optional customer specification, currently used only to specify
            the recording format for storing a recording in Amazon S3.
        thumbnailConfigurations:
          allOf:
          - $ref: '#/components/schemas/CompositionThumbnailConfigurationList'
          description: A complex type that allows you to enable/disable the recording
            of thumbnails for a Composition and modify the interval at which thumbnails
            are generated for the live session.
      required:
      - storageConfigurationArn
      - encoderConfigurationArns
      description: A complex type that describes an S3 location where recorded videos
        will be stored.
    S3Detail:
      type: object
      properties:
        recordingPrefix:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The S3 bucket prefix under which the recording is stored.
      required:
      - recordingPrefix
      description: Complex data type that defines S3Detail objects.
    S3StorageConfiguration:
      type: object
      properties:
        bucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: Location (S3 bucket name) where recorded videos will be stored.
            Note that the StorageConfiguration and S3 bucket must be in the same region
            as the Composition.
      required:
      - bucketName
      description: A complex type that describes an S3 location where recorded videos
        will be stored.
    ServiceQuotaExceededException:
      type: object
      properties:
        accessControlAllowOrigin:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        accessControlExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        cacheControl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        contentSecurityPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        strictTransportSecurity:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xContentTypeOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xFrameOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xAmznErrorType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        exceptionMessage:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: Request would cause a service quota to be exceeded.
      description: ''
    Stage:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: Stage ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/StageName'
          description: Stage name.
        activeSessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          description: ID of the active session within the stage.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
        autoParticipantRecordingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AutoParticipantRecordingConfiguration'
          description: Configuration object for individual participant recording,
            attached to the stage.
        endpoints:
          allOf:
          - $ref: '#/components/schemas/StageEndpoints'
          description: Summary information about various endpoints for a stage.
      required:
      - arn
      description: Object specifying a stage.
    StageArn:
      type: string
      pattern: ^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    StageEndpoint:
      type: string
      minLength: 0
      maxLength: 2048
    StageEndpoints:
      type: object
      properties:
        events:
          allOf:
          - $ref: '#/components/schemas/StageEndpoint'
          description: Events endpoint.
        whip:
          allOf:
          - $ref: '#/components/schemas/StageEndpoint'
          description: The endpoint to be used for IVS real-time streaming using the
            WHIP protocol.
        rtmp:
          allOf:
          - $ref: '#/components/schemas/StageEndpoint'
          description: The endpoint to be used for IVS real-time streaming using the
            RTMP protocol.
        rtmps:
          allOf:
          - $ref: '#/components/schemas/StageEndpoint'
          description: The endpoint to be used for IVS real-time streaming using the
            RTMPS protocol.
      description: Summary information about various endpoints for a stage. We recommend
        that you cache these values at stage creation; the values can be cached for
        up to 14 days.
    StageName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      minLength: 0
      maxLength: 128
    StageSession:
      type: object
      properties:
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          description: ID of the session within the stage.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: ISO 8601 timestamp (returned as a string) when this stage session
            began.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: ISO 8601 timestamp (returned as a string) when the stage session
            ended. This is null if the stage is active.
      description: A stage session begins when the first participant joins a stage
        and ends after the last participant leaves the stage. A stage session helps
        with debugging stages by grouping events and participants into shorter periods
        of time (i.e., a session), which is helpful when stages are used over long
        periods of time.
    StageSessionId:
      type: string
      pattern: ^st-[a-zA-Z0-9]+$
      minLength: 16
      maxLength: 16
    StageSessionList:
      type: array
      items:
        $ref: '#/components/schemas/StageSessionSummary'
    StageSessionSummary:
      type: object
      properties:
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          description: ID of the session within the stage.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: ISO 8601 timestamp (returned as a string) when this stage session
            began.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: ISO 8601 timestamp (returned as a string) when the stage session
            ended. This is null if the stage is active.
      description: Summary information about a stage session.
    StageSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: Stage ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/StageName'
          description: Stage name.
        activeSessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          description: ID of the active session within the stage.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - arn
      description: Summary information about a stage.
    StageSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/StageSummary'
    StartCompositionRequest:
      type: object
      properties:
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: ARN of the stage to be used for compositing.
        idempotencyToken:
          allOf:
          - $ref: '#/components/schemas/CompositionClientToken'
          description: Idempotency token.
        layout:
          allOf:
          - $ref: '#/components/schemas/LayoutConfiguration'
          description: Layout object to configure composition parameters.
        destinations:
          allOf:
          - $ref: '#/components/schemas/DestinationConfigurationList'
          description: Array of destination configuration.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - stageArn
      - destinations
    StartCompositionResponse:
      type: object
      properties:
        composition:
          allOf:
          - $ref: '#/components/schemas/Composition'
          description: The Composition that was created.
    StopCompositionRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/CompositionArn'
          description: ARN of the Composition.
      required:
      - arn
    StopCompositionResponse:
      type: object
      properties: {}
    StorageConfiguration:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StorageConfigurationArn'
          description: ARN of the storage configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/StorageConfigurationName'
          description: Name of the storage configuration.
        s3:
          allOf:
          - $ref: '#/components/schemas/S3StorageConfiguration'
          description: An S3 destination configuration where recorded videos will
            be stored.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - arn
      description: A complex type that describes a location where recorded videos
        will be stored.
    StorageConfigurationArn:
      type: string
      pattern: ^arn:aws:ivs:[a-z0-9-]+:[0-9]+:storage-configuration/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    StorageConfigurationName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      minLength: 0
      maxLength: 128
    StorageConfigurationSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StorageConfigurationArn'
          description: ARN of the storage configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/StorageConfigurationName'
          description: Name of the storage configuration.
        s3:
          allOf:
          - $ref: '#/components/schemas/S3StorageConfiguration'
          description: An S3 destination configuration where recorded videos will
            be stored.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - arn
      description: Summary information about a storage configuration.
    StorageConfigurationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/StorageConfigurationSummary'
    StreamKey:
      type: string
      pattern: ^rt_[0-9]+_[a-z0-9-]+_[a-zA-Z0-9-]+_.+$
    String:
      type: string
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The ARN of the resource to be tagged. The ARN must be URL-encoded.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Array of tags to be added or updated. Array of maps, each of
            the form `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      maxLength: 256
    Tags:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    ThumbnailIntervalSeconds:
      type: integer
      minimum: 1
      maximum: 86400
    ThumbnailRecordingMode:
      type: string
      enum:
      - INTERVAL
      - DISABLED
    ThumbnailStorageType:
      type: string
      enum:
      - SEQUENTIAL
      - LATEST
    ThumbnailStorageTypeList:
      type: array
      items:
        $ref: '#/components/schemas/ThumbnailStorageType'
    Time:
      type: string
      format: date-time
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The ARN of the resource to be untagged. The ARN must be URL-encoded.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: Array of tag keys (strings) for the tags to be removed. See
            [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging AWS Resources and Tag Editor_ for details, including restrictions
            that apply to tags and "Tag naming limits and requirements"; Amazon IVS
            has no constraints on tags beyond what is documented there.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateIngestConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationArn'
          description: ARN of the IngestConfiguration, for which the related stage
            ARN needs to be updated.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/IngestConfigurationStageArn'
          description: Stage ARN that needs to be updated.
      required:
      - arn
    UpdateIngestConfigurationResponse:
      type: object
      properties:
        ingestConfiguration:
          allOf:
          - $ref: '#/components/schemas/IngestConfiguration'
          description: The updated IngestConfiguration.
    UpdateStageRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          description: ARN of the stage to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/StageName'
          description: Name of the stage to be updated.
        autoParticipantRecordingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AutoParticipantRecordingConfiguration'
          description: Configuration object for individual participant recording,
            to attach to the stage. Note that this cannot be updated while recording
            is active.
      required:
      - arn
    UpdateStageResponse:
      type: object
      properties:
        stage:
          allOf:
          - $ref: '#/components/schemas/Stage'
          description: The updated stage.
    UserId:
      type: string
      minLength: 0
      maxLength: 128
    ValidationException:
      type: object
      properties:
        accessControlAllowOrigin:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        accessControlExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        cacheControl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        contentSecurityPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        strictTransportSecurity:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xContentTypeOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xFrameOptions:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        xAmznErrorType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ''
        exceptionMessage:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: The input fails to satisfy the constraints specified by an
            Amazon Web Services service.
      description: ''
    Video:
      type: object
      properties:
        width:
          allOf:
          - $ref: '#/components/schemas/Width'
          description: 'Video-resolution width. This must be an even number. Note
            that the maximum value is determined by `width` times `height`, such that
            the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default:
            1280.'
        height:
          allOf:
          - $ref: '#/components/schemas/Height'
          description: 'Video-resolution height. This must be an even number. Note
            that the maximum value is determined by `width` times `height`, such that
            the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default:
            720.'
        framerate:
          allOf:
          - $ref: '#/components/schemas/Framerate'
          description: 'Video frame rate, in fps. Default: 30.'
        bitrate:
          allOf:
          - $ref: '#/components/schemas/Bitrate'
          description: 'Bitrate for generated output, in bps. Default: 2500000.'
      description: Settings for video.
    VideoAspectRatio:
      type: string
      enum:
      - AUTO
      - VIDEO
      - SQUARE
      - PORTRAIT
    VideoFillMode:
      type: string
      enum:
      - FILL
      - COVER
      - CONTAIN
    Width:
      type: integer
      minimum: 2
      maximum: 1920
    errorMessage:
      type: string
