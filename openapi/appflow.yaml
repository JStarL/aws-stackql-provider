openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: appflow
  x-aws-serviceName: appflow
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-08-23'
  title: Amazon Appflow
  description: |-
    Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors.

    Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift.

    Use the following links to get started on the Amazon AppFlow API:

      * [Actions](https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html): An alphabetical list of all Amazon AppFlow API operations.

      * [Data types](https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html): An alphabetical list of all Amazon AppFlow data types.

      * [Common parameters](https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html): Parameters that all Query operations can use.

      * [Common errors](https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html): Client and server errors that all operations can return.

    If you're new to Amazon AppFlow, we recommend that you review the [Amazon AppFlow User Guide](https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html).

    Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as `auth-code` and `redirecturi`) with the connector-specific `ConnectorProfileProperties` when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the [ _Authorize Apps with OAuth_ ](https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm) documentation.
servers:
- description: The Amazon Appflow regional endpoint
  url: https://appflow.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /cancel-flow-executions:
    post:
      operationId: CancelFlowExecutions
      description: |-
        Cancels active runs for a flow.

        You can cancel all of the active runs for a flow, or you can cancel specific runs by providing their IDs.

        You can cancel a flow run only when the run is in progress. You can't cancel a run that has already completed or failed. You also can't cancel a run that's scheduled to occur but hasn't started yet. To prevent a scheduled run, you can deactivate the flow with the `StopFlow` action.

        You cannot resume a run after you cancel it.

        When you send your request, the status for each run becomes `CancelStarted`. When the cancellation completes, the status becomes `Canceled`.

        When you cancel a run, you still incur charges for any data that the run already processed before the cancellation. If the run had already written some data to the flow destination, then that data remains in the destination. If you configured the flow to use a batch API (such as the Salesforce Bulk API 2.0), then the run will finish reading or writing its entire batch of data after the cancellation. For these operations, the data processing charges for Amazon AppFlow apply. For the pricing information, see [Amazon AppFlow pricing](http://aws.amazon.com/appflow/pricing/).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flowName:
                  $ref: '#/components/schemas/FlowName'
                executionIds:
                  $ref: '#/components/schemas/ExecutionIds'
      responses:
        '200': {}
        '403':
          description: |-
            AppFlow/Requester has invalid or missing permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            API calls have exceeded the maximum allowed API request rate per account and per Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /create-connector-profile:
    post:
      operationId: CreateConnectorProfile
      description: |-
        Creates a new connector profile associated with your Amazon Web Services account. There is a soft quota of 100 connector profiles per Amazon Web Services account. If you need more connector profiles than this quota allows, you can submit a request to the Amazon AppFlow team through the Amazon AppFlow support channel. In each connector profile that you create, you can provide the credentials and properties for only one connector.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorProfileName:
                  $ref: '#/components/schemas/ConnectorProfileName'
                kmsArn:
                  $ref: '#/components/schemas/KMSArn'
                connectorType:
                  $ref: '#/components/schemas/ConnectorType'
                connectorLabel:
                  $ref: '#/components/schemas/ConnectorLabel'
                connectionMode:
                  $ref: '#/components/schemas/ConnectionMode'
                connectorProfileConfig:
                  $ref: '#/components/schemas/ConnectorProfileConfig'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '401':
          description: |-
            An error occurred when authenticating with the connector endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAuthenticationException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The request would cause a service quota (such as the number of flows) to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /create-flow:
    post:
      operationId: CreateFlow
      description: |-
        Enables your application to create a new flow using Amazon AppFlow. You must create a connector profile before calling this API. Please note that the Request Syntax below shows syntax for multiple destinations, however, you can only transfer data to one item in this list at a time. Amazon AppFlow does not currently support flows to multiple destinations at once.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flowName:
                  $ref: '#/components/schemas/FlowName'
                description:
                  $ref: '#/components/schemas/FlowDescription'
                kmsArn:
                  $ref: '#/components/schemas/KMSArn'
                triggerConfig:
                  $ref: '#/components/schemas/TriggerConfig'
                sourceFlowConfig:
                  $ref: '#/components/schemas/SourceFlowConfig'
                destinationFlowConfigList:
                  $ref: '#/components/schemas/DestinationFlowConfigList'
                tasks:
                  $ref: '#/components/schemas/Tasks'
                tags:
                  $ref: '#/components/schemas/TagMap'
                metadataCatalogConfig:
                  $ref: '#/components/schemas/MetadataCatalogConfig'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            AppFlow/Requester has invalid or missing permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '401':
          description: |-
            An error occurred when authenticating with the connector endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAuthenticationException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota (such as the number of flows) to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
  /delete-connector-profile:
    post:
      operationId: DeleteConnectorProfile
      description: |-
        Enables you to delete an existing connector profile.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorProfileName:
                  $ref: '#/components/schemas/ConnectorProfileName'
                forceDelete:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /delete-flow:
    post:
      operationId: DeleteFlow
      description: |-
        Enables your application to delete an existing flow. Before deleting the flow, Amazon AppFlow validates the request by checking the flow configuration and status. You can delete flows one at a time.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flowName:
                  $ref: '#/components/schemas/FlowName'
                forceDelete:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /describe-connector:
    post:
      operationId: DescribeConnector
      description: |-
        Describes the given custom connector registered in your Amazon Web Services account. This API can be used for custom connectors that are registered in your account and also for Amazon authored connectors.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorType:
                  $ref: '#/components/schemas/ConnectorType'
                connectorLabel:
                  $ref: '#/components/schemas/ConnectorLabel'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /describe-connector-entity:
    post:
      operationId: DescribeConnectorEntity
      description: |-
        Provides details regarding the entity used with the connector, with a description of the data model for each field in that entity.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorEntityName:
                  $ref: '#/components/schemas/EntityName'
                connectorType:
                  $ref: '#/components/schemas/ConnectorType'
                connectorProfileName:
                  $ref: '#/components/schemas/ConnectorProfileName'
                apiVersion:
                  $ref: '#/components/schemas/ApiVersion'
      responses:
        '200': {}
        '401':
          description: |-
            An error occurred when authenticating with the connector endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAuthenticationException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /describe-connector-profiles:
    post:
      operationId: DescribeConnectorProfiles
      description: |-
        Returns a list of `connector-profile` details matching the provided `connector-profile` names and `connector-types`. Both input lists are optional, and you can use them to filter the result.

        If no names or `connector-types` are provided, returns all connector profiles in a paginated form. If there is no match, this operation returns an empty list.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorProfileNames:
                  $ref: '#/components/schemas/ConnectorProfileNameList'
                connectorType:
                  $ref: '#/components/schemas/ConnectorType'
                connectorLabel:
                  $ref: '#/components/schemas/ConnectorLabel'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /describe-connectors:
    post:
      operationId: DescribeConnectors
      description: |-
        Describes the connectors vended by Amazon AppFlow for specified connector types. If you don't specify a connector type, this operation describes all connectors vended by Amazon AppFlow. If there are more connectors than can be returned in one page, the response contains a `nextToken` object, which can be be passed in to the next call to the `DescribeConnectors` API operation to retrieve the next page.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorTypes:
                  $ref: '#/components/schemas/ConnectorTypeList'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /describe-flow:
    post:
      operationId: DescribeFlow
      description: |-
        Provides a description of the specified flow.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flowName:
                  $ref: '#/components/schemas/FlowName'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /describe-flow-execution-records:
    post:
      operationId: DescribeFlowExecutionRecords
      description: |-
        Fetches the execution history of the flow.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flowName:
                  $ref: '#/components/schemas/FlowName'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /list-connector-entities:
    post:
      operationId: ListConnectorEntities
      description: |-
        Returns the list of available connector entities supported by Amazon AppFlow. For example, you can query Salesforce for _Account_ and _Opportunity_ entities, or query ServiceNow for the _Incident_ entity.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorProfileName:
                  $ref: '#/components/schemas/ConnectorProfileName'
                connectorType:
                  $ref: '#/components/schemas/ConnectorType'
                entitiesPath:
                  $ref: '#/components/schemas/EntitiesPath'
                apiVersion:
                  $ref: '#/components/schemas/ApiVersion'
                maxResults:
                  $ref: '#/components/schemas/ListEntitiesMaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '401':
          description: |-
            An error occurred when authenticating with the connector endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAuthenticationException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /list-connectors:
    post:
      operationId: ListConnectors
      description: |-
        Returns the list of all registered custom connectors in your Amazon Web Services account. This API lists only custom connectors registered in this account, not the Amazon Web Services authored connectors.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /list-flows:
    post:
      operationId: ListFlows
      description: |-
        Lists all of the flows associated with your account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Retrieves the tags that are associated with a specified flow.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ARN'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Applies a tag to the specified flow.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ARN'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes a tag from the specified flow.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ARN'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /register-connector:
    post:
      operationId: RegisterConnector
      description: |-
        Registers a new custom connector with your Amazon Web Services account. Before you can register the connector, you must deploy the associated AWS lambda function in your account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorLabel:
                  $ref: '#/components/schemas/ConnectorLabel'
                description:
                  $ref: '#/components/schemas/Description'
                connectorProvisioningType:
                  $ref: '#/components/schemas/ConnectorProvisioningType'
                connectorProvisioningConfig:
                  $ref: '#/components/schemas/ConnectorProvisioningConfig'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            AppFlow/Requester has invalid or missing permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '401':
          description: |-
            An error occurred when authenticating with the connector endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAuthenticationException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota (such as the number of flows) to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            API calls have exceeded the maximum allowed API request rate per account and per Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /reset-connector-metadata-cache:
    post:
      operationId: ResetConnectorMetadataCache
      description: |-
        Resets metadata about your connector entities that Amazon AppFlow stored in its cache. Use this action when you want Amazon AppFlow to return the latest information about the data that you have in a source application.

        Amazon AppFlow returns metadata about your entities when you use the ListConnectorEntities or DescribeConnectorEntities actions. Following these actions, Amazon AppFlow caches the metadata to reduce the number of API requests that it must send to the source application. Amazon AppFlow automatically resets the cache once every hour, but you can use this action when you want to get the latest metadata right away.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorProfileName:
                  $ref: '#/components/schemas/ConnectorProfileName'
                connectorType:
                  $ref: '#/components/schemas/ConnectorType'
                connectorEntityName:
                  $ref: '#/components/schemas/EntityName'
                entitiesPath:
                  $ref: '#/components/schemas/EntitiesPath'
                apiVersion:
                  $ref: '#/components/schemas/ApiVersion'
      responses:
        '200': {}
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /start-flow:
    post:
      operationId: StartFlow
      description: |-
        Activates an existing flow. For on-demand flows, this operation runs the flow immediately. For schedule and event-triggered flows, this operation activates the flow.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flowName:
                  $ref: '#/components/schemas/FlowName'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota (such as the number of flows) to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
  /stop-flow:
    post:
      operationId: StopFlow
      description: |-
        Deactivates the existing flow. For on-demand flows, this operation returns an `unsupportedOperationException` error message. For schedule and event-triggered flows, this operation deactivates the flow.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flowName:
                  $ref: '#/components/schemas/FlowName'
      responses:
        '200': {}
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The requested operation is not supported for the current flow.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedOperationException'
  /unregister-connector:
    post:
      operationId: UnregisterConnector
      description: |-
        Unregisters the custom connector registered in your account that matches the connector label provided in the request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorLabel:
                  $ref: '#/components/schemas/ConnectorLabel'
                forceDelete:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /update-connector-profile:
    post:
      operationId: UpdateConnectorProfile
      description: |-
        Updates a given connector profile associated with your account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorProfileName:
                  $ref: '#/components/schemas/ConnectorProfileName'
                connectionMode:
                  $ref: '#/components/schemas/ConnectionMode'
                connectorProfileConfig:
                  $ref: '#/components/schemas/ConnectorProfileConfig'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '401':
          description: |-
            An error occurred when authenticating with the connector endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAuthenticationException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /update-connector-registration:
    post:
      operationId: UpdateConnectorRegistration
      description: |-
        Updates a custom connector that you've previously registered. This operation updates the connector with one of the following:

          * The latest version of the AWS Lambda function that's assigned to the connector

          * A new AWS Lambda function that you specify
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectorLabel:
                  $ref: '#/components/schemas/ConnectorLabel'
                description:
                  $ref: '#/components/schemas/Description'
                connectorProvisioningConfig:
                  $ref: '#/components/schemas/ConnectorProvisioningConfig'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            AppFlow/Requester has invalid or missing permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '401':
          description: |-
            An error occurred when authenticating with the connector endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAuthenticationException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota (such as the number of flows) to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            API calls have exceeded the maximum allowed API request rate per account and per Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /update-flow:
    post:
      operationId: UpdateFlow
      description: |-
        Updates an existing flow.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flowName:
                  $ref: '#/components/schemas/FlowName'
                description:
                  $ref: '#/components/schemas/FlowDescription'
                triggerConfig:
                  $ref: '#/components/schemas/TriggerConfig'
                sourceFlowConfig:
                  $ref: '#/components/schemas/SourceFlowConfig'
                destinationFlowConfigList:
                  $ref: '#/components/schemas/DestinationFlowConfigList'
                tasks:
                  $ref: '#/components/schemas/Tasks'
                metadataCatalogConfig:
                  $ref: '#/components/schemas/MetadataCatalogConfig'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            AppFlow/Requester has invalid or missing permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '401':
          description: |-
            An error occurred when authenticating with the connector endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAuthenticationException'
        '400':
          description: |-
            The request has invalid or missing parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            An internal service error occurred during the processing of your request. Try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource specified in the request (such as the source or destination connector profile) is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota (such as the number of flows) to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
components:
  schemas:
    ARN:
      type: string
      pattern: '^arn:aws:.*:.*:[0-9]+:'
      minLength: 0
      maxLength: 512
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: AppFlow/Requester has invalid or missing permissions.
    AccessKeyId:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    AccessToken:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 4096
    AccountName:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    AggregationConfig:
      type: object
      properties:
        aggregationType:
          allOf:
          - $ref: '#/components/schemas/AggregationType'
          description: Specifies whether Amazon AppFlow aggregates the flow records
            into a single file, or leave them unaggregated.
        targetFileSize:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The desired file size, in MB, for each output file that Amazon
            AppFlow writes to the flow destination. For each file, Amazon AppFlow
            attempts to achieve the size that you specify. The actual file sizes might
            differ from this target based on the number and size of the records that
            each file contains.
      description: The aggregation settings that you can use to customize the output
        format of your flow data.
    AggregationType:
      type: string
      enum:
      - None
      - SingleFile
    AmplitudeConnectorOperator:
      type: string
      enum:
      - BETWEEN
    AmplitudeConnectorProfileCredentials:
      type: object
      properties:
        apiKey:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: A unique alphanumeric identifier used to authenticate a user,
            developer, or calling program to your API.
        secretKey:
          allOf:
          - $ref: '#/components/schemas/SecretKey'
          description: The Secret Access Key portion of the credentials.
      required:
      - apiKey
      - secretKey
      description: The connector-specific credentials required when using Amplitude.
    AmplitudeConnectorProfileProperties:
      type: object
      properties: {}
      description: The connector-specific profile properties required when using Amplitude.
    AmplitudeMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Amplitude.
    AmplitudeSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Amplitude flow source.
      required:
      - object
      description: The properties that are applied when Amplitude is being used as
        a source.
    ApiKey:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    ApiKeyCredentials:
      type: object
      properties:
        apiKey:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: The API key required for API key authentication.
        apiSecretKey:
          allOf:
          - $ref: '#/components/schemas/ApiSecretKey'
          description: The API secret key required for API key authentication.
      required:
      - apiKey
      description: The API key credentials required for API key authentication.
    ApiSecretKey:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    ApiToken:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    ApiVersion:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    ApplicationHostUrl:
      type: string
      pattern: ^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]$
      minLength: 0
      maxLength: 256
    ApplicationKey:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    ApplicationServicePath:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    ApplicationType:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    AuthCode:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 4096
    AuthCodeUrl:
      type: string
      pattern: ^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]$
      minLength: 0
      maxLength: 256
    AuthCodeUrlList:
      type: array
      items:
        $ref: '#/components/schemas/AuthCodeUrl'
    AuthParameter:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/Key'
          description: The authentication key required to authenticate with the connector.
        isRequired:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether this authentication parameter is required.
        label:
          allOf:
          - $ref: '#/components/schemas/Label'
          description: Label used for authentication parameter.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description about the authentication parameter.
        isSensitiveField:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether this authentication parameter is a sensitive
            field.
        connectorSuppliedValues:
          allOf:
          - $ref: '#/components/schemas/ConnectorSuppliedValueList'
          description: Contains default values for this authentication parameter that
            are supplied by the connector.
      description: Information about required authentication parameters.
    AuthParameterList:
      type: array
      items:
        $ref: '#/components/schemas/AuthParameter'
    AuthenticationConfig:
      type: object
      properties:
        isBasicAuthSupported:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether basic authentication is supported by the
            connector.
        isApiKeyAuthSupported:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether API key authentication is supported by the
            connector
        isOAuth2Supported:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether OAuth 2.0 authentication is supported by
            the connector.
        isCustomAuthSupported:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether custom authentication is supported by the
            connector
        oAuth2Defaults:
          allOf:
          - $ref: '#/components/schemas/OAuth2Defaults'
          description: Contains the default values required for OAuth 2.0 authentication.
        customAuthConfigs:
          allOf:
          - $ref: '#/components/schemas/CustomAuthConfigList'
          description: Contains information required for custom authentication.
      description: Contains information about the authentication config that the connector
        supports.
    AuthenticationType:
      type: string
      enum:
      - OAUTH2
      - APIKEY
      - BASIC
      - CUSTOM
    BasicAuthCredentials:
      type: object
      properties:
        username:
          allOf:
          - $ref: '#/components/schemas/Username'
          description: The username to use to connect to a resource.
        password:
          allOf:
          - $ref: '#/components/schemas/Password'
          description: The password to use to connect to a resource.
      required:
      - username
      - password
      description: The basic auth credentials required for basic authentication.
    Boolean:
      type: boolean
      default: false
    BucketName:
      type: string
      pattern: ^\S+$
      minLength: 3
      maxLength: 63
    BucketPrefix:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 512
    BusinessUnitId:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 18
    CancelFlowExecutionsRequest:
      type: object
      properties:
        flowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The name of a flow with active runs that you want to cancel.
        executionIds:
          allOf:
          - $ref: '#/components/schemas/ExecutionIds'
          description: 'The ID of each active run to cancel. These runs must belong
            to the flow you specify in your request.


            If you omit this parameter, your request ends all active runs that belong
            to the flow.'
      required:
      - flowName
    CancelFlowExecutionsResponse:
      type: object
      properties:
        invalidExecutions:
          allOf:
          - $ref: '#/components/schemas/ExecutionIds'
          description: The IDs of runs that Amazon AppFlow couldn't cancel. These
            runs might be ineligible for canceling because they haven't started yet
            or have already completed.
    CatalogType:
      type: string
      enum:
      - GLUE
    ClientCredentialsArn:
      type: string
      pattern: '^arn:aws:secretsmanager:.*:[0-9]+:'
      minLength: 20
      maxLength: 2048
    ClientId:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    ClientNumber:
      type: string
      pattern: ^\d{3}$
      minLength: 3
      maxLength: 3
    ClientSecret:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    ClientToken:
      type: string
      pattern: ^[ -~]+$
      minLength: 1
      maxLength: 256
    ClusterIdentifier:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: There was a conflict when processing the request (for example,
        a flow with the given name already exists within the account. Check for conflicting
        resource names and try again.
    ConnectionMode:
      type: string
      enum:
      - Public
      - Private
    ConnectorAuthenticationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: An error occurred when authenticating with the connector endpoint.
    ConnectorConfiguration:
      type: object
      properties:
        canUseAsSource:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the connector can be used as a source.
        canUseAsDestination:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the connector can be used as a destination.
        supportedDestinationConnectors:
          allOf:
          - $ref: '#/components/schemas/ConnectorTypeList'
          description: Lists the connectors that are available for use as destinations.
        supportedSchedulingFrequencies:
          allOf:
          - $ref: '#/components/schemas/SchedulingFrequencyTypeList'
          description: Specifies the supported flow frequency for that connector.
        isPrivateLinkEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies if PrivateLink is enabled for that connector.
        isPrivateLinkEndpointUrlRequired:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies if a PrivateLink endpoint URL is required.
        supportedTriggerTypes:
          allOf:
          - $ref: '#/components/schemas/TriggerTypeList'
          description: Specifies the supported trigger types for the flow.
        connectorMetadata:
          allOf:
          - $ref: '#/components/schemas/ConnectorMetadata'
          description: Specifies connector-specific metadata such as `oAuthScopes`,
            `supportedRegions`, `privateLinkServiceUrl`, and so on.
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: The connector type.
        connectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: The label used for registering the connector.
        connectorDescription:
          allOf:
          - $ref: '#/components/schemas/ConnectorDescription'
          description: A description about the connector.
        connectorOwner:
          allOf:
          - $ref: '#/components/schemas/ConnectorOwner'
          description: The owner who developed the connector.
        connectorName:
          allOf:
          - $ref: '#/components/schemas/ConnectorName'
          description: The connector name.
        connectorVersion:
          allOf:
          - $ref: '#/components/schemas/ConnectorVersion'
          description: The connector version.
        connectorArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The Amazon Resource Name (ARN) for the registered connector.
        connectorModes:
          allOf:
          - $ref: '#/components/schemas/ConnectorModeList'
          description: The connection modes that the connector supports.
        authenticationConfig:
          allOf:
          - $ref: '#/components/schemas/AuthenticationConfig'
          description: The authentication config required for the connector.
        connectorRuntimeSettings:
          allOf:
          - $ref: '#/components/schemas/ConnectorRuntimeSettingList'
          description: The required connector runtime settings.
        supportedApiVersions:
          allOf:
          - $ref: '#/components/schemas/SupportedApiVersionList'
          description: A list of API versions that are supported by the connector.
        supportedOperators:
          allOf:
          - $ref: '#/components/schemas/SupportedOperatorList'
          description: A list of operators supported by the connector.
        supportedWriteOperations:
          allOf:
          - $ref: '#/components/schemas/SupportedWriteOperationList'
          description: A list of write operations supported by the connector.
        connectorProvisioningType:
          allOf:
          - $ref: '#/components/schemas/ConnectorProvisioningType'
          description: The provisioning type used to register the connector.
        connectorProvisioningConfig:
          allOf:
          - $ref: '#/components/schemas/ConnectorProvisioningConfig'
          description: The configuration required for registering the connector.
        logoURL:
          allOf:
          - $ref: '#/components/schemas/LogoURL'
          description: Logo URL of the connector.
        registeredAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date on which the connector was registered.
        registeredBy:
          allOf:
          - $ref: '#/components/schemas/RegisteredBy'
          description: Information about who registered the connector.
        supportedDataTransferTypes:
          allOf:
          - $ref: '#/components/schemas/SupportedDataTransferTypeList'
          description: "The data transfer types that the connector supports.\n\nRECORD\n\
            \n    \n\nStructured records.\n\nFILE\n\n    \n\nFiles or binary data."
        supportedDataTransferApis:
          allOf:
          - $ref: '#/components/schemas/SupportedDataTransferApis'
          description: The APIs of the connector application that Amazon AppFlow can
            use to transfer your data.
      description: The configuration settings related to a given connector.
    ConnectorConfigurationsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ConnectorConfiguration'
    ConnectorDescription:
      type: string
      pattern: ^[\w!@#\-.?,\s]*$
      minLength: 0
      maxLength: 2048
    ConnectorDetail:
      type: object
      properties:
        connectorDescription:
          allOf:
          - $ref: '#/components/schemas/ConnectorDescription'
          description: A description about the registered connector.
        connectorName:
          allOf:
          - $ref: '#/components/schemas/ConnectorName'
          description: The name of the connector.
        connectorOwner:
          allOf:
          - $ref: '#/components/schemas/ConnectorOwner'
          description: The owner of the connector.
        connectorVersion:
          allOf:
          - $ref: '#/components/schemas/ConnectorVersion'
          description: The connector version.
        applicationType:
          allOf:
          - $ref: '#/components/schemas/ApplicationType'
          description: The application type of the connector.
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: The connector type.
        connectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: A label used for the connector.
        registeredAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The time at which the connector was registered.
        registeredBy:
          allOf:
          - $ref: '#/components/schemas/RegisteredBy'
          description: The user who registered the connector.
        connectorProvisioningType:
          allOf:
          - $ref: '#/components/schemas/ConnectorProvisioningType'
          description: The provisioning type that the connector uses.
        connectorModes:
          allOf:
          - $ref: '#/components/schemas/ConnectorModeList'
          description: The connection mode that the connector supports.
        supportedDataTransferTypes:
          allOf:
          - $ref: '#/components/schemas/SupportedDataTransferTypeList'
          description: "The data transfer types that the connector supports.\n\nRECORD\n\
            \n    \n\nStructured records.\n\nFILE\n\n    \n\nFiles or binary data."
      description: Information about the registered connector.
    ConnectorEntity:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the connector entity.
        label:
          allOf:
          - $ref: '#/components/schemas/Label'
          description: The label applied to the connector entity.
        hasNestedEntities:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the connector entity is a parent or a category
            and has more entities nested underneath it. If another call is made with
            `entitiesPath = "the_current_entity_name_with_hasNestedEntities_true"`,
            then it returns the nested entities underneath it. This provides a way
            to retrieve all supported entities in a recursive fashion.
      required:
      - name
      description: The high-level entity that can be queried in Amazon AppFlow. For
        example, a Salesforce entity might be an _Account_ or _Opportunity_ , whereas
        a ServiceNow entity might be an _Incident_.
    ConnectorEntityField:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/Identifier'
          description: The unique identifier of the connector field.
        parentIdentifier:
          allOf:
          - $ref: '#/components/schemas/Identifier'
          description: The parent identifier of the connector field.
        label:
          allOf:
          - $ref: '#/components/schemas/Label'
          description: The label applied to a connector entity field.
        isPrimaryKey:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Booelan value that indicates whether this field can be used
            as a primary key.
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Default value that can be assigned to this field.
        isDeprecated:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Booelan value that indicates whether this field is deprecated
            or not.
        supportedFieldTypeDetails:
          allOf:
          - $ref: '#/components/schemas/SupportedFieldTypeDetails'
          description: Contains details regarding the supported `FieldType`, including
            the corresponding `filterOperators` and `supportedValues`.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the connector entity field.
        sourceProperties:
          allOf:
          - $ref: '#/components/schemas/SourceFieldProperties'
          description: The properties that can be applied to a field when the connector
            is being used as a source.
        destinationProperties:
          allOf:
          - $ref: '#/components/schemas/DestinationFieldProperties'
          description: The properties applied to a field when the connector is being
            used as a destination.
        customProperties:
          allOf:
          - $ref: '#/components/schemas/CustomProperties'
          description: A map that has specific properties related to the ConnectorEntityField.
      required:
      - identifier
      description: Describes the data model of a connector field. For example, for
        an _account_ entity, the fields would be _account name_ , _account ID_ , and
        so on.
    ConnectorEntityFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorEntityField'
    ConnectorEntityList:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorEntity'
    ConnectorEntityMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ConnectorEntityList'
    ConnectorLabel:
      type: string
      pattern: ^[a-zA-Z0-9][\w!@#.-]+$
      minLength: 0
      maxLength: 256
    ConnectorList:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorDetail'
    ConnectorMetadata:
      type: object
      properties:
        Amplitude:
          allOf:
          - $ref: '#/components/schemas/AmplitudeMetadata'
          description: The connector metadata specific to Amplitude.
        Datadog:
          allOf:
          - $ref: '#/components/schemas/DatadogMetadata'
          description: The connector metadata specific to Datadog.
        Dynatrace:
          allOf:
          - $ref: '#/components/schemas/DynatraceMetadata'
          description: The connector metadata specific to Dynatrace.
        GoogleAnalytics:
          allOf:
          - $ref: '#/components/schemas/GoogleAnalyticsMetadata'
          description: The connector metadata specific to Google Analytics.
        InforNexus:
          allOf:
          - $ref: '#/components/schemas/InforNexusMetadata'
          description: The connector metadata specific to Infor Nexus.
        Marketo:
          allOf:
          - $ref: '#/components/schemas/MarketoMetadata'
          description: The connector metadata specific to Marketo.
        Redshift:
          allOf:
          - $ref: '#/components/schemas/RedshiftMetadata'
          description: The connector metadata specific to Amazon Redshift.
        S3:
          allOf:
          - $ref: '#/components/schemas/S3Metadata'
          description: The connector metadata specific to Amazon S3.
        Salesforce:
          allOf:
          - $ref: '#/components/schemas/SalesforceMetadata'
          description: The connector metadata specific to Salesforce.
        ServiceNow:
          allOf:
          - $ref: '#/components/schemas/ServiceNowMetadata'
          description: The connector metadata specific to ServiceNow.
        Singular:
          allOf:
          - $ref: '#/components/schemas/SingularMetadata'
          description: The connector metadata specific to Singular.
        Slack:
          allOf:
          - $ref: '#/components/schemas/SlackMetadata'
          description: The connector metadata specific to Slack.
        Snowflake:
          allOf:
          - $ref: '#/components/schemas/SnowflakeMetadata'
          description: The connector metadata specific to Snowflake.
        Trendmicro:
          allOf:
          - $ref: '#/components/schemas/TrendmicroMetadata'
          description: The connector metadata specific to Trend Micro.
        Veeva:
          allOf:
          - $ref: '#/components/schemas/VeevaMetadata'
          description: The connector metadata specific to Veeva.
        Zendesk:
          allOf:
          - $ref: '#/components/schemas/ZendeskMetadata'
          description: The connector metadata specific to Zendesk.
        EventBridge:
          allOf:
          - $ref: '#/components/schemas/EventBridgeMetadata'
          description: The connector metadata specific to Amazon EventBridge.
        Upsolver:
          allOf:
          - $ref: '#/components/schemas/UpsolverMetadata'
          description: The connector metadata specific to Upsolver.
        CustomerProfiles:
          allOf:
          - $ref: '#/components/schemas/CustomerProfilesMetadata'
          description: The connector metadata specific to Amazon Connect Customer
            Profiles.
        Honeycode:
          allOf:
          - $ref: '#/components/schemas/HoneycodeMetadata'
          description: The connector metadata specific to Amazon Honeycode.
        SAPOData:
          $ref: '#/components/schemas/SAPODataMetadata'
        Pardot:
          allOf:
          - $ref: '#/components/schemas/PardotMetadata'
          description: The connector metadata specific to Salesforce Pardot.
      description: A structure to specify connector-specific metadata such as `oAuthScopes`,
        `supportedRegions`, `privateLinkServiceUrl`, and so on.
    ConnectorMode:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    ConnectorModeList:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorMode'
    ConnectorName:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    ConnectorOAuthRequest:
      type: object
      properties:
        authCode:
          allOf:
          - $ref: '#/components/schemas/AuthCode'
          description: The code provided by the connector when it has been authenticated
            via the connected app.
        redirectUri:
          allOf:
          - $ref: '#/components/schemas/RedirectUri'
          description: The URL to which the authentication server redirects the browser
            after authorization has been granted.
      description: Used by select connectors for which the OAuth workflow is supported,
        such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack.
    ConnectorOperator:
      type: object
      properties:
        Amplitude:
          allOf:
          - $ref: '#/components/schemas/AmplitudeConnectorOperator'
          description: The operation to be performed on the provided Amplitude source
            fields.
        Datadog:
          allOf:
          - $ref: '#/components/schemas/DatadogConnectorOperator'
          description: The operation to be performed on the provided Datadog source
            fields.
        Dynatrace:
          allOf:
          - $ref: '#/components/schemas/DynatraceConnectorOperator'
          description: The operation to be performed on the provided Dynatrace source
            fields.
        GoogleAnalytics:
          allOf:
          - $ref: '#/components/schemas/GoogleAnalyticsConnectorOperator'
          description: The operation to be performed on the provided Google Analytics
            source fields.
        InforNexus:
          allOf:
          - $ref: '#/components/schemas/InforNexusConnectorOperator'
          description: The operation to be performed on the provided Infor Nexus source
            fields.
        Marketo:
          allOf:
          - $ref: '#/components/schemas/MarketoConnectorOperator'
          description: The operation to be performed on the provided Marketo source
            fields.
        S3:
          allOf:
          - $ref: '#/components/schemas/S3ConnectorOperator'
          description: The operation to be performed on the provided Amazon S3 source
            fields.
        Salesforce:
          allOf:
          - $ref: '#/components/schemas/SalesforceConnectorOperator'
          description: The operation to be performed on the provided Salesforce source
            fields.
        ServiceNow:
          allOf:
          - $ref: '#/components/schemas/ServiceNowConnectorOperator'
          description: The operation to be performed on the provided ServiceNow source
            fields.
        Singular:
          allOf:
          - $ref: '#/components/schemas/SingularConnectorOperator'
          description: The operation to be performed on the provided Singular source
            fields.
        Slack:
          allOf:
          - $ref: '#/components/schemas/SlackConnectorOperator'
          description: The operation to be performed on the provided Slack source
            fields.
        Trendmicro:
          allOf:
          - $ref: '#/components/schemas/TrendmicroConnectorOperator'
          description: The operation to be performed on the provided Trend Micro source
            fields.
        Veeva:
          allOf:
          - $ref: '#/components/schemas/VeevaConnectorOperator'
          description: The operation to be performed on the provided Veeva source
            fields.
        Zendesk:
          allOf:
          - $ref: '#/components/schemas/ZendeskConnectorOperator'
          description: The operation to be performed on the provided Zendesk source
            fields.
        SAPOData:
          allOf:
          - $ref: '#/components/schemas/SAPODataConnectorOperator'
          description: The operation to be performed on the provided SAPOData source
            fields.
        CustomConnector:
          allOf:
          - $ref: '#/components/schemas/Operator'
          description: Operators supported by the custom connector.
        Pardot:
          allOf:
          - $ref: '#/components/schemas/PardotConnectorOperator'
          description: The operation to be performed on the provided Salesforce Pardot
            source fields.
      description: The operation to be performed on the provided source fields.
    ConnectorOwner:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    ConnectorProfile:
      type: object
      properties:
        connectorProfileArn:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileArn'
          description: The Amazon Resource Name (ARN) of the connector profile.
        connectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: The name of the connector profile. The name is unique for each
            `ConnectorProfile` in the Amazon Web Services account.
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: The type of connector, such as Salesforce, Amplitude, and so
            on.
        connectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: The label for the connector profile being created.
        connectionMode:
          allOf:
          - $ref: '#/components/schemas/ConnectionMode'
          description: Indicates the connection mode and if it is public or private.
        credentialsArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The Amazon Resource Name (ARN) of the connector profile credentials.
        connectorProfileProperties:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileProperties'
          description: The connector-specific properties of the profile configuration.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies when the connector profile was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies when the connector profile was last updated.
        privateConnectionProvisioningState:
          allOf:
          - $ref: '#/components/schemas/PrivateConnectionProvisioningState'
          description: Specifies the private connection provisioning state.
      description: Describes an instance of a connector. This includes the provided
        name, credentials ARN, connection-mode, and so on. To keep the API intuitive
        and extensible, the fields that are common to all types of connector profiles
        are explicitly specified at the top level. The rest of the connector-specific
        properties are available via the `connectorProfileProperties` field.
    ConnectorProfileArn:
      type: string
      pattern: '^arn:aws:appflow:.*:[0-9]+:'
      minLength: 0
      maxLength: 512
    ConnectorProfileConfig:
      type: object
      properties:
        connectorProfileProperties:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileProperties'
          description: The connector-specific properties of the profile configuration.
        connectorProfileCredentials:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileCredentials'
          description: The connector-specific credentials required by each connector.
      required:
      - connectorProfileProperties
      description: Defines the connector-specific configuration and credentials for
        the connector profile.
    ConnectorProfileCredentials:
      type: object
      properties:
        Amplitude:
          allOf:
          - $ref: '#/components/schemas/AmplitudeConnectorProfileCredentials'
          description: The connector-specific credentials required when using Amplitude.
        Datadog:
          allOf:
          - $ref: '#/components/schemas/DatadogConnectorProfileCredentials'
          description: The connector-specific credentials required when using Datadog.
        Dynatrace:
          allOf:
          - $ref: '#/components/schemas/DynatraceConnectorProfileCredentials'
          description: The connector-specific credentials required when using Dynatrace.
        GoogleAnalytics:
          allOf:
          - $ref: '#/components/schemas/GoogleAnalyticsConnectorProfileCredentials'
          description: The connector-specific credentials required when using Google
            Analytics.
        Honeycode:
          allOf:
          - $ref: '#/components/schemas/HoneycodeConnectorProfileCredentials'
          description: The connector-specific credentials required when using Amazon
            Honeycode.
        InforNexus:
          allOf:
          - $ref: '#/components/schemas/InforNexusConnectorProfileCredentials'
          description: The connector-specific credentials required when using Infor
            Nexus.
        Marketo:
          allOf:
          - $ref: '#/components/schemas/MarketoConnectorProfileCredentials'
          description: The connector-specific credentials required when using Marketo.
        Redshift:
          allOf:
          - $ref: '#/components/schemas/RedshiftConnectorProfileCredentials'
          description: The connector-specific credentials required when using Amazon
            Redshift.
        Salesforce:
          allOf:
          - $ref: '#/components/schemas/SalesforceConnectorProfileCredentials'
          description: The connector-specific credentials required when using Salesforce.
        ServiceNow:
          allOf:
          - $ref: '#/components/schemas/ServiceNowConnectorProfileCredentials'
          description: The connector-specific credentials required when using ServiceNow.
        Singular:
          allOf:
          - $ref: '#/components/schemas/SingularConnectorProfileCredentials'
          description: The connector-specific credentials required when using Singular.
        Slack:
          allOf:
          - $ref: '#/components/schemas/SlackConnectorProfileCredentials'
          description: The connector-specific credentials required when using Slack.
        Snowflake:
          allOf:
          - $ref: '#/components/schemas/SnowflakeConnectorProfileCredentials'
          description: The connector-specific credentials required when using Snowflake.
        Trendmicro:
          allOf:
          - $ref: '#/components/schemas/TrendmicroConnectorProfileCredentials'
          description: The connector-specific credentials required when using Trend
            Micro.
        Veeva:
          allOf:
          - $ref: '#/components/schemas/VeevaConnectorProfileCredentials'
          description: The connector-specific credentials required when using Veeva.
        Zendesk:
          allOf:
          - $ref: '#/components/schemas/ZendeskConnectorProfileCredentials'
          description: The connector-specific credentials required when using Zendesk.
        SAPOData:
          $ref: '#/components/schemas/SAPODataConnectorProfileCredentials'
        CustomConnector:
          $ref: '#/components/schemas/CustomConnectorProfileCredentials'
        Pardot:
          allOf:
          - $ref: '#/components/schemas/PardotConnectorProfileCredentials'
          description: The connector-specific credentials required when using Salesforce
            Pardot.
      description: The connector-specific credentials required by a connector.
    ConnectorProfileDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorProfile'
    ConnectorProfileName:
      type: string
      pattern: ^[\w/!@#+=.-]+$
      minLength: 0
      maxLength: 256
    ConnectorProfileNameList:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorProfileName'
    ConnectorProfileProperties:
      type: object
      properties:
        Amplitude:
          allOf:
          - $ref: '#/components/schemas/AmplitudeConnectorProfileProperties'
          description: The connector-specific properties required by Amplitude.
        Datadog:
          allOf:
          - $ref: '#/components/schemas/DatadogConnectorProfileProperties'
          description: The connector-specific properties required by Datadog.
        Dynatrace:
          allOf:
          - $ref: '#/components/schemas/DynatraceConnectorProfileProperties'
          description: The connector-specific properties required by Dynatrace.
        GoogleAnalytics:
          allOf:
          - $ref: '#/components/schemas/GoogleAnalyticsConnectorProfileProperties'
          description: The connector-specific properties required Google Analytics.
        Honeycode:
          allOf:
          - $ref: '#/components/schemas/HoneycodeConnectorProfileProperties'
          description: The connector-specific properties required by Amazon Honeycode.
        InforNexus:
          allOf:
          - $ref: '#/components/schemas/InforNexusConnectorProfileProperties'
          description: The connector-specific properties required by Infor Nexus.
        Marketo:
          allOf:
          - $ref: '#/components/schemas/MarketoConnectorProfileProperties'
          description: The connector-specific properties required by Marketo.
        Redshift:
          allOf:
          - $ref: '#/components/schemas/RedshiftConnectorProfileProperties'
          description: The connector-specific properties required by Amazon Redshift.
        Salesforce:
          allOf:
          - $ref: '#/components/schemas/SalesforceConnectorProfileProperties'
          description: The connector-specific properties required by Salesforce.
        ServiceNow:
          allOf:
          - $ref: '#/components/schemas/ServiceNowConnectorProfileProperties'
          description: The connector-specific properties required by serviceNow.
        Singular:
          allOf:
          - $ref: '#/components/schemas/SingularConnectorProfileProperties'
          description: The connector-specific properties required by Singular.
        Slack:
          allOf:
          - $ref: '#/components/schemas/SlackConnectorProfileProperties'
          description: The connector-specific properties required by Slack.
        Snowflake:
          allOf:
          - $ref: '#/components/schemas/SnowflakeConnectorProfileProperties'
          description: The connector-specific properties required by Snowflake.
        Trendmicro:
          allOf:
          - $ref: '#/components/schemas/TrendmicroConnectorProfileProperties'
          description: The connector-specific properties required by Trend Micro.
        Veeva:
          allOf:
          - $ref: '#/components/schemas/VeevaConnectorProfileProperties'
          description: The connector-specific properties required by Veeva.
        Zendesk:
          allOf:
          - $ref: '#/components/schemas/ZendeskConnectorProfileProperties'
          description: The connector-specific properties required by Zendesk.
        SAPOData:
          $ref: '#/components/schemas/SAPODataConnectorProfileProperties'
        CustomConnector:
          allOf:
          - $ref: '#/components/schemas/CustomConnectorProfileProperties'
          description: The properties required by the custom connector.
        Pardot:
          allOf:
          - $ref: '#/components/schemas/PardotConnectorProfileProperties'
          description: The connector-specific properties required by Salesforce Pardot.
      description: The connector-specific profile properties required by each connector.
    ConnectorProvisioningConfig:
      type: object
      properties:
        lambda:
          allOf:
          - $ref: '#/components/schemas/LambdaConnectorProvisioningConfig'
          description: Contains information about the configuration of the lambda
            which is being registered as the connector.
      description: Contains information about the configuration of the connector being
        registered.
    ConnectorProvisioningType:
      type: string
      enum:
      - LAMBDA
      description: <p>The type of provisioning that the connector supports, such as
        Lambda.</p>
    ConnectorRuntimeSetting:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/Key'
          description: Contains value information about the connector runtime setting.
        dataType:
          allOf:
          - $ref: '#/components/schemas/ConnectorRuntimeSettingDataType'
          description: Data type of the connector runtime setting.
        isRequired:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether this connector runtime setting is required.
        label:
          allOf:
          - $ref: '#/components/schemas/Label'
          description: A label used for connector runtime setting.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description about the connector runtime setting.
        scope:
          allOf:
          - $ref: '#/components/schemas/ConnectorRuntimeSettingScope'
          description: Indicates the scope of the connector runtime setting.
        connectorSuppliedValueOptions:
          allOf:
          - $ref: '#/components/schemas/ConnectorSuppliedValueOptionList'
          description: Contains default values for the connector runtime setting that
            are supplied by the connector.
      description: Contains information about the connector runtime settings that
        are required for flow execution.
    ConnectorRuntimeSettingDataType:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    ConnectorRuntimeSettingList:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorRuntimeSetting'
    ConnectorRuntimeSettingScope:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    ConnectorServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: An error occurred when retrieving data from the connector endpoint.
    ConnectorSuppliedValue:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    ConnectorSuppliedValueList:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorSuppliedValue'
    ConnectorSuppliedValueOptionList:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorSuppliedValue'
    ConnectorType:
      type: string
      enum:
      - Salesforce
      - Singular
      - Slack
      - Redshift
      - S3
      - Marketo
      - Googleanalytics
      - Zendesk
      - Servicenow
      - Datadog
      - Trendmicro
      - Snowflake
      - Dynatrace
      - Infornexus
      - Amplitude
      - Veeva
      - EventBridge
      - LookoutMetrics
      - Upsolver
      - Honeycode
      - CustomerProfiles
      - SAPOData
      - CustomConnector
      - Pardot
    ConnectorTypeList:
      type: array
      items:
        $ref: '#/components/schemas/ConnectorType'
    ConnectorVersion:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    CreateConnectorProfileRequest:
      type: object
      properties:
        connectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: The name of the connector profile. The name is unique for each
            `ConnectorProfile` in your Amazon Web Services account.
        kmsArn:
          allOf:
          - $ref: '#/components/schemas/KMSArn'
          description: The ARN (Amazon Resource Name) of the Key Management Service
            (KMS) key you provide for encryption. This is required if you do not want
            to use the Amazon AppFlow-managed KMS key. If you don't provide anything
            here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: The type of connector, such as Salesforce, Amplitude, and so
            on.
        connectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: The label of the connector. The label is unique for each `ConnectorRegistration`
            in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR
            connector type/.
        connectionMode:
          allOf:
          - $ref: '#/components/schemas/ConnectionMode'
          description: Indicates the connection mode and specifies whether it is public
            or private. Private flows use Amazon Web Services PrivateLink to route
            data over Amazon Web Services infrastructure without exposing it to the
            public internet.
        connectorProfileConfig:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileConfig'
          description: Defines the connector-specific configuration and credentials.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'The `clientToken` parameter is an idempotency token. It ensures
            that your `CreateConnectorProfile` request completes only once. You choose
            the value to pass. For example, if you don''t receive a response from
            your request, you can safely retry the request with the same `clientToken`
            parameter value.


            If you omit a `clientToken` value, the Amazon Web Services SDK that you
            are using inserts a value for you. This way, the SDK can safely retry
            requests multiple times after a network error. You must provide your own
            value for other use cases.


            If you specify input parameters that differ from your first request, an
            error occurs. If you use a different value for `clientToken`, Amazon AppFlow
            considers it a new call to `CreateConnectorProfile`. The token is active
            for 8 hours.'
      required:
      - connectorProfileName
      - connectorType
      - connectionMode
      - connectorProfileConfig
    CreateConnectorProfileResponse:
      type: object
      properties:
        connectorProfileArn:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileArn'
          description: The Amazon Resource Name (ARN) of the connector profile.
    CreateFlowRequest:
      type: object
      properties:
        flowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The specified name of the flow. Spaces are not allowed. Use
            underscores (_) or hyphens (-) only.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: A description of the flow you want to create.
        kmsArn:
          allOf:
          - $ref: '#/components/schemas/KMSArn'
          description: The ARN (Amazon Resource Name) of the Key Management Service
            (KMS) key you provide for encryption. This is required if you do not want
            to use the Amazon AppFlow-managed KMS key. If you don't provide anything
            here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
        triggerConfig:
          allOf:
          - $ref: '#/components/schemas/TriggerConfig'
          description: The trigger settings that determine how and when the flow runs.
        sourceFlowConfig:
          allOf:
          - $ref: '#/components/schemas/SourceFlowConfig'
          description: The configuration that controls how Amazon AppFlow retrieves
            data from the source connector.
        destinationFlowConfigList:
          allOf:
          - $ref: '#/components/schemas/DestinationFlowConfigList'
          description: The configuration that controls how Amazon AppFlow places data
            in the destination connector.
        tasks:
          allOf:
          - $ref: '#/components/schemas/Tasks'
          description: A list of tasks that Amazon AppFlow performs while transferring
            the data in the flow run.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for your
            flow.
        metadataCatalogConfig:
          allOf:
          - $ref: '#/components/schemas/MetadataCatalogConfig'
          description: Specifies the configuration that Amazon AppFlow uses when it
            catalogs the data that's transferred by the associated flow. When Amazon
            AppFlow catalogs the data from a flow, it stores metadata in a data catalog.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'The `clientToken` parameter is an idempotency token. It ensures
            that your `CreateFlow` request completes only once. You choose the value
            to pass. For example, if you don''t receive a response from your request,
            you can safely retry the request with the same `clientToken` parameter
            value.


            If you omit a `clientToken` value, the Amazon Web Services SDK that you
            are using inserts a value for you. This way, the SDK can safely retry
            requests multiple times after a network error. You must provide your own
            value for other use cases.


            If you specify input parameters that differ from your first request, an
            error occurs. If you use a different value for `clientToken`, Amazon AppFlow
            considers it a new call to `CreateFlow`. The token is active for 8 hours.'
      required:
      - flowName
      - triggerConfig
      - sourceFlowConfig
      - destinationFlowConfigList
      - tasks
    CreateFlowResponse:
      type: object
      properties:
        flowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The flow's Amazon Resource Name (ARN).
        flowStatus:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: Indicates the current status of the flow.
    CreatedBy:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    CredentialsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CredentialsMapValue'
    CredentialsMapKey:
      type: string
      pattern: ^[\w]+$
      minLength: 1
      maxLength: 128
    CredentialsMapValue:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 2048
    CustomAuthConfig:
      type: object
      properties:
        customAuthenticationType:
          allOf:
          - $ref: '#/components/schemas/CustomAuthenticationType'
          description: The authentication type that the custom connector uses.
        authParameters:
          allOf:
          - $ref: '#/components/schemas/AuthParameterList'
          description: Information about authentication parameters required for authentication.
      description: Configuration information required for custom authentication.
    CustomAuthConfigList:
      type: array
      items:
        $ref: '#/components/schemas/CustomAuthConfig'
    CustomAuthCredentials:
      type: object
      properties:
        customAuthenticationType:
          allOf:
          - $ref: '#/components/schemas/CustomAuthenticationType'
          description: The custom authentication type that the connector uses.
        credentialsMap:
          allOf:
          - $ref: '#/components/schemas/CredentialsMap'
          description: A map that holds custom authentication credentials.
      required:
      - customAuthenticationType
      description: The custom credentials required for custom authentication.
    CustomAuthenticationType:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    CustomConnectorDestinationProperties:
      type: object
      properties:
        entityName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The entity specified in the custom connector as a destination
            in the flow.
        errorHandlingConfig:
          allOf:
          - $ref: '#/components/schemas/ErrorHandlingConfig'
          description: The settings that determine how Amazon AppFlow handles an error
            when placing data in the custom connector as destination.
        writeOperationType:
          allOf:
          - $ref: '#/components/schemas/WriteOperationType'
          description: Specifies the type of write operation to be performed in the
            custom connector when it's used as destination.
        idFieldNames:
          allOf:
          - $ref: '#/components/schemas/IdFieldNameList'
          description: The name of the field that Amazon AppFlow uses as an ID when
            performing a write operation such as update, delete, or upsert.
        customProperties:
          allOf:
          - $ref: '#/components/schemas/CustomProperties'
          description: The custom properties that are specific to the connector when
            it's used as a destination in the flow.
      required:
      - entityName
      description: The properties that are applied when the custom connector is being
        used as a destination.
    CustomConnectorProfileCredentials:
      type: object
      properties:
        authenticationType:
          allOf:
          - $ref: '#/components/schemas/AuthenticationType'
          description: The authentication type that the custom connector uses for
            authenticating while creating a connector profile.
        basic:
          allOf:
          - $ref: '#/components/schemas/BasicAuthCredentials'
          description: The basic credentials that are required for the authentication
            of the user.
        oauth2:
          allOf:
          - $ref: '#/components/schemas/OAuth2Credentials'
          description: The OAuth 2.0 credentials required for the authentication of
            the user.
        apiKey:
          allOf:
          - $ref: '#/components/schemas/ApiKeyCredentials'
          description: The API keys required for the authentication of the user.
        custom:
          allOf:
          - $ref: '#/components/schemas/CustomAuthCredentials'
          description: If the connector uses the custom authentication mechanism,
            this holds the required credentials.
      required:
      - authenticationType
      description: The connector-specific profile credentials that are required when
        using the custom connector.
    CustomConnectorProfileProperties:
      type: object
      properties:
        profileProperties:
          allOf:
          - $ref: '#/components/schemas/ProfilePropertiesMap'
          description: A map of properties that are required to create a profile for
            the custom connector.
        oAuth2Properties:
          $ref: '#/components/schemas/OAuth2Properties'
      description: The profile properties required by the custom connector.
    CustomConnectorSourceProperties:
      type: object
      properties:
        entityName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The entity specified in the custom connector as a source in
            the flow.
        customProperties:
          allOf:
          - $ref: '#/components/schemas/CustomProperties'
          description: Custom properties that are required to use the custom connector
            as a source.
        dataTransferApi:
          allOf:
          - $ref: '#/components/schemas/DataTransferApi'
          description: The API of the connector application that Amazon AppFlow uses
            to transfer your data.
      required:
      - entityName
      description: The properties that are applied when the custom connector is being
        used as a source.
    CustomProperties:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CustomPropertyValue'
    CustomPropertyKey:
      type: string
      pattern: ^[\w]+$
      minLength: 1
      maxLength: 128
    CustomPropertyValue:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 2048
    CustomerProfilesDestinationProperties:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The unique name of the Amazon Connect Customer Profiles domain.
        objectTypeName:
          allOf:
          - $ref: '#/components/schemas/ObjectTypeName'
          description: The object specified in the Amazon Connect Customer Profiles
            flow destination.
      required:
      - domainName
      description: The properties that are applied when Amazon Connect Customer Profiles
        is used as a destination.
    CustomerProfilesMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Amazon Connect Customer Profiles.
    DataApiRoleArn:
      type: string
      pattern: '^arn:aws:iam:.*:[0-9]+:'
      minLength: 0
      maxLength: 512
    DataPullMode:
      type: string
      enum:
      - Incremental
      - Complete
    DataTransferApi:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DataTransferApiTypeName'
          description: The name of the connector application API.
        Type:
          allOf:
          - $ref: '#/components/schemas/DataTransferApiType'
          description: "You can specify one of the following types:\n\nAUTOMATIC\n\
            \n    \n\nThe default. Optimizes a flow for datasets that fluctuate in\
            \ size from small to large. For each flow run, Amazon AppFlow chooses\
            \ to use the SYNC or ASYNC API type based on the amount of data that the\
            \ run transfers.\n\nSYNC\n\n    \n\nA synchronous API. This type of API\
            \ optimizes a flow for small to medium-sized datasets.\n\nASYNC\n\n  \
            \  \n\nAn asynchronous API. This type of API optimizes a flow for large\
            \ datasets."
      description: The API of the connector application that Amazon AppFlow uses to
        transfer your data.
    DataTransferApiType:
      type: string
      enum:
      - SYNC
      - ASYNC
      - AUTOMATIC
    DataTransferApiTypeName:
      type: string
      pattern: ^[\w/-]+$
      minLength: 0
      maxLength: 64
    DatabaseName:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    DatabaseUrl:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    DatadogConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - BETWEEN
      - EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    DatadogConnectorProfileCredentials:
      type: object
      properties:
        apiKey:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: A unique alphanumeric identifier used to authenticate a user,
            developer, or calling program to your API.
        applicationKey:
          allOf:
          - $ref: '#/components/schemas/ApplicationKey'
          description: Application keys, in conjunction with your API key, give you
            full access to Datadog’s programmatic API. Application keys are associated
            with the user account that created them. The application key is used to
            log all requests made to the API.
      required:
      - apiKey
      - applicationKey
      description: The connector-specific credentials required by Datadog.
    DatadogConnectorProfileProperties:
      type: object
      properties:
        instanceUrl:
          allOf:
          - $ref: '#/components/schemas/InstanceUrl'
          description: The location of the Datadog resource.
      required:
      - instanceUrl
      description: The connector-specific profile properties required by Datadog.
    DatadogMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Datadog.
    DatadogSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Datadog flow source.
      required:
      - object
      description: The properties that are applied when Datadog is being used as a
        source.
    Date:
      type: string
      format: date-time
    DatetimeTypeFieldName:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    DeleteConnectorProfileRequest:
      type: object
      properties:
        connectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: The name of the connector profile. The name is unique for each
            `ConnectorProfile` in your account.
        forceDelete:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether Amazon AppFlow should delete the profile,
            even if it is currently in use in one or more flows.
      required:
      - connectorProfileName
    DeleteConnectorProfileResponse:
      type: object
      properties: {}
    DeleteFlowRequest:
      type: object
      properties:
        flowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The specified name of the flow. Spaces are not allowed. Use
            underscores (_) or hyphens (-) only.
        forceDelete:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether Amazon AppFlow should delete the flow, even
            if it is currently in use.
      required:
      - flowName
    DeleteFlowResponse:
      type: object
      properties: {}
    DescribeConnectorEntityRequest:
      type: object
      properties:
        connectorEntityName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The entity name for that connector.
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: The type of connector application, such as Salesforce, Amplitude,
            and so on.
        connectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: The name of the connector profile. The name is unique for each
            `ConnectorProfile` in the Amazon Web Services account.
        apiVersion:
          allOf:
          - $ref: '#/components/schemas/ApiVersion'
          description: The version of the API that's used by the connector.
      required:
      - connectorEntityName
    DescribeConnectorEntityResponse:
      type: object
      properties:
        connectorEntityFields:
          allOf:
          - $ref: '#/components/schemas/ConnectorEntityFieldList'
          description: Describes the fields for that connector entity. For example,
            for an _account_ entity, the fields would be _account name_ , _account
            ID_ , and so on.
      required:
      - connectorEntityFields
    DescribeConnectorProfilesRequest:
      type: object
      properties:
        connectorProfileNames:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileNameList'
          description: The name of the connector profile. The name is unique for each
            `ConnectorProfile` in the Amazon Web Services account.
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: The type of connector, such as Salesforce, Amplitude, and so
            on.
        connectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: The name of the connector. The name is unique for each `ConnectorRegistration`
            in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR
            connector type/.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Specifies the maximum number of items that should be returned
            in the result set. The default for `maxResults` is 20 (for all paginated
            API operations).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token for the next page of data.
    DescribeConnectorProfilesResponse:
      type: object
      properties:
        connectorProfileDetails:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileDetailList'
          description: Returns information about the connector profiles associated
            with the flow.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token for the next page of data. If `nextToken=null`,
            this means that all records have been fetched.
    DescribeConnectorRequest:
      type: object
      properties:
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo.
            Please choose CUSTOMCONNECTOR for Lambda based custom connectors.
        connectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: The label of the connector. The label is unique for each `ConnectorRegistration`
            in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR
            connector type/.
      required:
      - connectorType
    DescribeConnectorResponse:
      type: object
      properties:
        connectorConfiguration:
          allOf:
          - $ref: '#/components/schemas/ConnectorConfiguration'
          description: Configuration info of all the connectors that the user requested.
    DescribeConnectorsRequest:
      type: object
      properties:
        connectorTypes:
          allOf:
          - $ref: '#/components/schemas/ConnectorTypeList'
          description: The type of connector, such as Salesforce, Amplitude, and so
            on.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of items that should be returned in the
            result set. The default is 20.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token for the next page of data.
    DescribeConnectorsResponse:
      type: object
      properties:
        connectorConfigurations:
          allOf:
          - $ref: '#/components/schemas/ConnectorConfigurationsMap'
          description: The configuration that is applied to the connectors used in
            the flow.
        connectors:
          allOf:
          - $ref: '#/components/schemas/ConnectorList'
          description: Information about the connectors supported in Amazon AppFlow.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token for the next page of data.
    DescribeFlowExecutionRecordsRequest:
      type: object
      properties:
        flowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The specified name of the flow. Spaces are not allowed. Use
            underscores (_) or hyphens (-) only.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Specifies the maximum number of items that should be returned
            in the result set. The default for `maxResults` is 20 (for all paginated
            API operations).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token for the next page of data.
      required:
      - flowName
    DescribeFlowExecutionRecordsResponse:
      type: object
      properties:
        flowExecutions:
          allOf:
          - $ref: '#/components/schemas/FlowExecutionList'
          description: Returns a list of all instances when this flow was run.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token for the next page of data.
    DescribeFlowRequest:
      type: object
      properties:
        flowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The specified name of the flow. Spaces are not allowed. Use
            underscores (_) or hyphens (-) only.
      required:
      - flowName
    DescribeFlowResponse:
      type: object
      properties:
        flowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The flow's Amazon Resource Name (ARN).
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: A description of the flow.
        flowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The specified name of the flow. Spaces are not allowed. Use
            underscores (_) or hyphens (-) only.
        kmsArn:
          allOf:
          - $ref: '#/components/schemas/KMSArn'
          description: The ARN (Amazon Resource Name) of the Key Management Service
            (KMS) key you provide for encryption. This is required if you do not want
            to use the Amazon AppFlow-managed KMS key. If you don't provide anything
            here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.
        flowStatus:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: Indicates the current status of the flow.
        flowStatusMessage:
          allOf:
          - $ref: '#/components/schemas/FlowStatusMessage'
          description: Contains an error message if the flow status is in a suspended
            or error state. This applies only to scheduled or event-triggered flows.
        sourceFlowConfig:
          allOf:
          - $ref: '#/components/schemas/SourceFlowConfig'
          description: The configuration that controls how Amazon AppFlow retrieves
            data from the source connector.
        destinationFlowConfigList:
          allOf:
          - $ref: '#/components/schemas/DestinationFlowConfigList'
          description: The configuration that controls how Amazon AppFlow transfers
            data to the destination connector.
        lastRunExecutionDetails:
          allOf:
          - $ref: '#/components/schemas/ExecutionDetails'
          description: Describes the details of the most recent flow run.
        triggerConfig:
          allOf:
          - $ref: '#/components/schemas/TriggerConfig'
          description: The trigger settings that determine how and when the flow runs.
        tasks:
          allOf:
          - $ref: '#/components/schemas/Tasks'
          description: A list of tasks that Amazon AppFlow performs while transferring
            the data in the flow run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies when the flow was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies when the flow was last updated.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The ARN of the user who created the flow.
        lastUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: Specifies the user name of the account that performed the most
            recent update.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for your
            flow.
        metadataCatalogConfig:
          allOf:
          - $ref: '#/components/schemas/MetadataCatalogConfig'
          description: Specifies the configuration that Amazon AppFlow uses when it
            catalogs the data that's transferred by the associated flow. When Amazon
            AppFlow catalogs the data from a flow, it stores metadata in a data catalog.
        lastRunMetadataCatalogDetails:
          allOf:
          - $ref: '#/components/schemas/MetadataCatalogDetails'
          description: Describes the metadata catalog, metadata table, and data partitions
            that Amazon AppFlow used for the associated flow run.
        schemaVersion:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: "The version number of your data schema. Amazon AppFlow assigns\
            \ this version number. The version number increases by one when you change\
            \ any of the following settings in your flow configuration:\n\n  * Source-to-destination\
            \ field mappings\n\n  * Field data types\n\n  * Partition keys"
    Description:
      type: string
      pattern: ^[\s\w/!@#+=.-]*$
      minLength: 0
      maxLength: 1024
    DestinationConnectorProperties:
      type: object
      properties:
        Redshift:
          allOf:
          - $ref: '#/components/schemas/RedshiftDestinationProperties'
          description: The properties required to query Amazon Redshift.
        S3:
          allOf:
          - $ref: '#/components/schemas/S3DestinationProperties'
          description: The properties required to query Amazon S3.
        Salesforce:
          allOf:
          - $ref: '#/components/schemas/SalesforceDestinationProperties'
          description: The properties required to query Salesforce.
        Snowflake:
          allOf:
          - $ref: '#/components/schemas/SnowflakeDestinationProperties'
          description: The properties required to query Snowflake.
        EventBridge:
          allOf:
          - $ref: '#/components/schemas/EventBridgeDestinationProperties'
          description: The properties required to query Amazon EventBridge.
        LookoutMetrics:
          allOf:
          - $ref: '#/components/schemas/LookoutMetricsDestinationProperties'
          description: The properties required to query Amazon Lookout for Metrics.
        Upsolver:
          allOf:
          - $ref: '#/components/schemas/UpsolverDestinationProperties'
          description: The properties required to query Upsolver.
        Honeycode:
          allOf:
          - $ref: '#/components/schemas/HoneycodeDestinationProperties'
          description: The properties required to query Amazon Honeycode.
        CustomerProfiles:
          allOf:
          - $ref: '#/components/schemas/CustomerProfilesDestinationProperties'
          description: The properties required to query Amazon Connect Customer Profiles.
        Zendesk:
          allOf:
          - $ref: '#/components/schemas/ZendeskDestinationProperties'
          description: The properties required to query Zendesk.
        Marketo:
          allOf:
          - $ref: '#/components/schemas/MarketoDestinationProperties'
          description: The properties required to query Marketo.
        CustomConnector:
          allOf:
          - $ref: '#/components/schemas/CustomConnectorDestinationProperties'
          description: The properties that are required to query the custom Connector.
        SAPOData:
          allOf:
          - $ref: '#/components/schemas/SAPODataDestinationProperties'
          description: The properties required to query SAPOData.
      description: This stores the information that is required to query a particular
        connector.
    DestinationField:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    DestinationFieldProperties:
      type: object
      properties:
        isCreatable:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies if the destination field can be created by the current
            user.
        isNullable:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies if the destination field can have a null value.
        isUpsertable:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies if the flow run can either insert new rows in the
            destination field if they do not already exist, or update them if they
            do.
        isUpdatable:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the field can be updated during an `UPDATE`
            or `UPSERT` write operation.
        isDefaultedOnCreate:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the field can use the default value during
            a Create operation.
        supportedWriteOperations:
          allOf:
          - $ref: '#/components/schemas/SupportedWriteOperationList'
          description: A list of supported write operations. For each write operation
            listed, this field can be used in `idFieldNames` when that write operation
            is present as a destination option.
      description: The properties that can be applied to a field when connector is
        being used as a destination.
    DestinationFlowConfig:
      type: object
      properties:
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: The type of connector, such as Salesforce, Amplitude, and so
            on.
        apiVersion:
          allOf:
          - $ref: '#/components/schemas/ApiVersion'
          description: The API version that the destination connector uses.
        connectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: The name of the connector profile. This name must be unique
            for each connector profile in the Amazon Web Services account.
        destinationConnectorProperties:
          allOf:
          - $ref: '#/components/schemas/DestinationConnectorProperties'
          description: This stores the information that is required to query a particular
            connector.
      required:
      - connectorType
      - destinationConnectorProperties
      description: Contains information about the configuration of destination connectors
        present in the flow.
    DestinationFlowConfigList:
      type: array
      items:
        $ref: '#/components/schemas/DestinationFlowConfig'
    DocumentType:
      type: string
      pattern: ^[\s\w_-]+$
      minLength: 0
      maxLength: 512
    DomainName:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 64
    Double:
      type: number
      format: double
      default: 0
    DynatraceConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - BETWEEN
      - EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    DynatraceConnectorProfileCredentials:
      type: object
      properties:
        apiToken:
          allOf:
          - $ref: '#/components/schemas/ApiToken'
          description: The API tokens used by Dynatrace API to authenticate various
            API calls.
      required:
      - apiToken
      description: The connector-specific profile credentials required by Dynatrace.
    DynatraceConnectorProfileProperties:
      type: object
      properties:
        instanceUrl:
          allOf:
          - $ref: '#/components/schemas/InstanceUrl'
          description: The location of the Dynatrace resource.
      required:
      - instanceUrl
      description: The connector-specific profile properties required by Dynatrace.
    DynatraceMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Dynatrace.
    DynatraceSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Dynatrace flow source.
      required:
      - object
      description: The properties that are applied when Dynatrace is being used as
        a source.
    EntitiesPath:
      type: string
      pattern: ^[\s\w/!@#+=,.-]*$
      minLength: 0
      maxLength: 256
    EntityName:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 1024
    ErrorHandlingConfig:
      type: object
      properties:
        failOnFirstDestinationError:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies if the flow should fail after the first instance
            of a failure when attempting to place data in the destination.
        bucketPrefix:
          allOf:
          - $ref: '#/components/schemas/BucketPrefix'
          description: Specifies the Amazon S3 bucket prefix.
        bucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          description: Specifies the name of the Amazon S3 bucket.
      description: The settings that determine how Amazon AppFlow handles an error
        when placing data in the destination. For example, this setting would determine
        if the flow should fail after one insertion error, or continue and attempt
        to insert every record regardless of the initial failure. `ErrorHandlingConfig`
        is a part of the destination connector details.
    ErrorInfo:
      type: object
      properties:
        putFailuresCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: Specifies the failure count for the attempted flow.
        executionMessage:
          allOf:
          - $ref: '#/components/schemas/ExecutionMessage'
          description: Specifies the error message that appears if a flow fails.
      description: Provides details in the event of a failed flow, including the failure
        count and the related error messages.
    ErrorMessage:
      type: string
      pattern: ^[\s\w/!@#+=.-]*$
      minLength: 0
      maxLength: 2048
    EventBridgeDestinationProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Amazon EventBridge flow destination.
        errorHandlingConfig:
          $ref: '#/components/schemas/ErrorHandlingConfig'
      required:
      - object
      description: The properties that are applied when Amazon EventBridge is being
        used as a destination.
    EventBridgeMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Amazon EventBridge.
    ExecutionDetails:
      type: object
      properties:
        mostRecentExecutionMessage:
          allOf:
          - $ref: '#/components/schemas/MostRecentExecutionMessage'
          description: Describes the details of the most recent flow run.
        mostRecentExecutionTime:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies the time of the most recent flow run.
        mostRecentExecutionStatus:
          allOf:
          - $ref: '#/components/schemas/ExecutionStatus'
          description: Specifies the status of the most recent flow run.
      description: Describes the details of the flow run, including the timestamp,
        status, and message.
    ExecutionId:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    ExecutionIds:
      type: array
      items:
        $ref: '#/components/schemas/ExecutionId'
    ExecutionMessage:
      type: string
      pattern: ^[\s\w/!@#+=.-]*$
      minLength: 0
      maxLength: 2048
    ExecutionRecord:
      type: object
      properties:
        executionId:
          allOf:
          - $ref: '#/components/schemas/ExecutionId'
          description: Specifies the identifier of the given flow run.
        executionStatus:
          allOf:
          - $ref: '#/components/schemas/ExecutionStatus'
          description: Specifies the flow run status and whether it is in progress,
            has completed successfully, or has failed.
        executionResult:
          allOf:
          - $ref: '#/components/schemas/ExecutionResult'
          description: Describes the result of the given flow run.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies the start time of the flow run.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies the time of the most recent update.
        dataPullStartTime:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The timestamp that determines the first new or updated record
            to be transferred in the flow run.
        dataPullEndTime:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The timestamp that indicates the last new or updated record
            to be transferred in the flow run.
        metadataCatalogDetails:
          allOf:
          - $ref: '#/components/schemas/MetadataCatalogDetails'
          description: Describes the metadata catalog, metadata table, and data partitions
            that Amazon AppFlow used for the associated flow run.
      description: Specifies information about the past flow run instances for a given
        flow.
    ExecutionResult:
      type: object
      properties:
        errorInfo:
          allOf:
          - $ref: '#/components/schemas/ErrorInfo'
          description: Provides any error message information related to the flow
            run.
        bytesProcessed:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total number of bytes processed by the flow run.
        bytesWritten:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total number of bytes written as a result of the flow run.
        recordsProcessed:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of records processed in the flow run.
        numParallelProcesses:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of processes that Amazon AppFlow ran at the same
            time when it retrieved your data.
        maxPageSize:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The maximum number of records that Amazon AppFlow receives
            in each page of the response from your SAP application.
      description: Specifies the end result of the flow run.
    ExecutionStatus:
      type: string
      enum:
      - InProgress
      - Successful
      - Error
      - CancelStarted
      - Canceled
    FieldType:
      type: string
    FieldTypeDetails:
      type: object
      properties:
        fieldType:
          allOf:
          - $ref: '#/components/schemas/FieldType'
          description: The type of field, such as string, integer, date, and so on.
        filterOperators:
          allOf:
          - $ref: '#/components/schemas/FilterOperatorList'
          description: The list of operators supported by a field.
        supportedValues:
          allOf:
          - $ref: '#/components/schemas/SupportedValueList'
          description: 'The list of values that a field can contain. For example,
            a Boolean `fieldType` can have two values: "true" and "false".'
        valueRegexPattern:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The regular expression pattern for the field name.
        supportedDateFormat:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The date format that the field supports.
        fieldValueRange:
          allOf:
          - $ref: '#/components/schemas/Range'
          description: The range of values this field can hold.
        fieldLengthRange:
          allOf:
          - $ref: '#/components/schemas/Range'
          description: This is the allowable length range for this field's value.
      required:
      - fieldType
      - filterOperators
      description: Contains details regarding the supported field type and the operators
        that can be applied for filtering.
    FileType:
      type: string
      enum:
      - CSV
      - JSON
      - PARQUET
    FilterOperatorList:
      type: array
      items:
        $ref: '#/components/schemas/Operator'
    FlowArn:
      type: string
      pattern: '^arn:aws:appflow:.*:[0-9]+:'
      minLength: 0
      maxLength: 512
    FlowDefinition:
      type: object
      properties:
        flowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The flow's Amazon Resource Name (ARN).
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: A user-entered description of the flow.
        flowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The specified name of the flow. Spaces are not allowed. Use
            underscores (_) or hyphens (-) only.
        flowStatus:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: Indicates the current status of the flow.
        sourceConnectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: Specifies the source connector type, such as Salesforce, Amazon
            S3, Amplitude, and so on.
        sourceConnectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: The label of the source connector in the flow.
        destinationConnectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: Specifies the destination connector type, such as Salesforce,
            Amazon S3, Amplitude, and so on.
        destinationConnectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: The label of the destination connector in the flow.
        triggerType:
          allOf:
          - $ref: '#/components/schemas/TriggerType'
          description: Specifies the type of flow trigger. This can be `OnDemand`,
            `Scheduled`, or `Event`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies when the flow was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies when the flow was last updated.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          description: The ARN of the user who created the flow.
        lastUpdatedBy:
          allOf:
          - $ref: '#/components/schemas/UpdatedBy'
          description: Specifies the account user name that most recently updated
            the flow.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for your
            flow.
        lastRunExecutionDetails:
          allOf:
          - $ref: '#/components/schemas/ExecutionDetails'
          description: Describes the details of the most recent flow run.
      description: The properties of the flow, such as its source, destination, trigger
        type, and so on.
    FlowDescription:
      type: string
      pattern: ^[\w!@#\-.?,\s]*$
      minLength: 0
      maxLength: 2048
    FlowErrorDeactivationThreshold:
      type: integer
      minimum: 1
      maximum: 100
    FlowExecutionList:
      type: array
      items:
        $ref: '#/components/schemas/ExecutionRecord'
    FlowList:
      type: array
      items:
        $ref: '#/components/schemas/FlowDefinition'
    FlowName:
      type: string
      pattern: ^[a-zA-Z0-9][\w!@#.-]+$
      minLength: 0
      maxLength: 256
    FlowStatus:
      type: string
      enum:
      - Active
      - Deprecated
      - Deleted
      - Draft
      - Errored
      - Suspended
    FlowStatusMessage:
      type: string
      pattern: ^[\s\w/!@#+=.-]*$
      minLength: 0
      maxLength: 2048
    GlueDataCatalogConfig:
      type: object
      properties:
        roleArn:
          allOf:
          - $ref: '#/components/schemas/GlueDataCatalogIAMRole'
          description: 'The Amazon Resource Name (ARN) of an IAM role that grants
            Amazon AppFlow the permissions it needs to create Data Catalog tables,
            databases, and partitions.


            For an example IAM policy that has the required permissions, see [Identity-based
            policy examples for Amazon AppFlow](https://docs.aws.amazon.com/appflow/latest/userguide/security_iam_id-based-policy-examples.html).'
        databaseName:
          allOf:
          - $ref: '#/components/schemas/GlueDataCatalogDatabaseName'
          description: 'The name of the Data Catalog database that stores the metadata
            tables that Amazon AppFlow creates in your Amazon Web Services account.
            These tables contain metadata for the data that''s transferred by the
            flow that you configure with this parameter.


            When you configure a new flow with this parameter, you must specify an
            existing database.'
        tablePrefix:
          allOf:
          - $ref: '#/components/schemas/GlueDataCatalogTablePrefix'
          description: A naming prefix for each Data Catalog table that Amazon AppFlow
            creates for the flow that you configure with this setting. Amazon AppFlow
            adds the prefix to the beginning of the each table name.
      required:
      - roleArn
      - databaseName
      - tablePrefix
      description: 'Specifies the configuration that Amazon AppFlow uses when it catalogs
        your data with the Glue Data Catalog. When Amazon AppFlow catalogs your data,
        it stores metadata in Data Catalog tables. This metadata represents the data
        that''s transferred by the flow that you configure with these settings.


        You can configure a flow with these settings only when the flow destination
        is Amazon S3.'
    GlueDataCatalogDatabaseName:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*$
      minLength: 0
      maxLength: 255
    GlueDataCatalogIAMRole:
      type: string
      pattern: '^arn:aws:iam:.*:[0-9]+:'
      minLength: 0
      maxLength: 512
    GlueDataCatalogTablePrefix:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*$
      minLength: 0
      maxLength: 128
    GoogleAnalyticsConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - BETWEEN
    GoogleAnalyticsConnectorProfileCredentials:
      type: object
      properties:
        clientId:
          allOf:
          - $ref: '#/components/schemas/ClientId'
          description: The identifier for the desired client.
        clientSecret:
          allOf:
          - $ref: '#/components/schemas/ClientSecret'
          description: The client secret used by the OAuth client to authenticate
            to the authorization server.
        accessToken:
          allOf:
          - $ref: '#/components/schemas/AccessToken'
          description: The credentials used to access protected Google Analytics resources.
        refreshToken:
          allOf:
          - $ref: '#/components/schemas/RefreshToken'
          description: The credentials used to acquire new access tokens. This is
            required only for OAuth2 access tokens, and is not required for OAuth1
            access tokens.
        oAuthRequest:
          allOf:
          - $ref: '#/components/schemas/ConnectorOAuthRequest'
          description: The OAuth requirement needed to request security tokens from
            the connector endpoint.
      required:
      - clientId
      - clientSecret
      description: The connector-specific profile credentials required by Google Analytics.
    GoogleAnalyticsConnectorProfileProperties:
      type: object
      properties: {}
      description: The connector-specific profile properties required by Google Analytics.
    GoogleAnalyticsMetadata:
      type: object
      properties:
        oAuthScopes:
          allOf:
          - $ref: '#/components/schemas/OAuthScopeList'
          description: The desired authorization scope for the Google Analytics account.
      description: The connector metadata specific to Google Analytics.
    GoogleAnalyticsSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Google Analytics flow source.
      required:
      - object
      description: The properties that are applied when Google Analytics is being
        used as a source.
    Group:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 128
    HoneycodeConnectorProfileCredentials:
      type: object
      properties:
        accessToken:
          allOf:
          - $ref: '#/components/schemas/AccessToken'
          description: The credentials used to access protected Amazon Honeycode resources.
        refreshToken:
          allOf:
          - $ref: '#/components/schemas/RefreshToken'
          description: The credentials used to acquire new access tokens.
        oAuthRequest:
          $ref: '#/components/schemas/ConnectorOAuthRequest'
      description: The connector-specific credentials required when using Amazon Honeycode.
    HoneycodeConnectorProfileProperties:
      type: object
      properties: {}
      description: The connector-specific properties required when using Amazon Honeycode.
    HoneycodeDestinationProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Amazon Honeycode flow destination.
        errorHandlingConfig:
          $ref: '#/components/schemas/ErrorHandlingConfig'
      required:
      - object
      description: The properties that are applied when Amazon Honeycode is used as
        a destination.
    HoneycodeMetadata:
      type: object
      properties:
        oAuthScopes:
          allOf:
          - $ref: '#/components/schemas/OAuthScopeList'
          description: The desired authorization scope for the Amazon Honeycode account.
      description: The connector metadata specific to Amazon Honeycode.
    IdFieldNameList:
      type: array
      items:
        $ref: '#/components/schemas/Name'
      description: "<p> A list of field names that can be used as an ID field when\
        \ performing a write operation.\n    </p>"
    Identifier:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 128
    IncrementalPullConfig:
      type: object
      properties:
        datetimeTypeFieldName:
          allOf:
          - $ref: '#/components/schemas/DatetimeTypeFieldName'
          description: A field that specifies the date time or timestamp field as
            the criteria to use when importing incremental records from the source.
      description: Specifies the configuration used when importing incremental records
        from the source.
    InforNexusConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - BETWEEN
      - EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    InforNexusConnectorProfileCredentials:
      type: object
      properties:
        accessKeyId:
          allOf:
          - $ref: '#/components/schemas/AccessKeyId'
          description: The Access Key portion of the credentials.
        userId:
          allOf:
          - $ref: '#/components/schemas/Username'
          description: The identifier for the user.
        secretAccessKey:
          allOf:
          - $ref: '#/components/schemas/Key'
          description: The secret key used to sign requests.
        datakey:
          allOf:
          - $ref: '#/components/schemas/Key'
          description: The encryption keys used to encrypt data.
      required:
      - accessKeyId
      - userId
      - secretAccessKey
      - datakey
      description: The connector-specific profile credentials required by Infor Nexus.
    InforNexusConnectorProfileProperties:
      type: object
      properties:
        instanceUrl:
          allOf:
          - $ref: '#/components/schemas/InstanceUrl'
          description: The location of the Infor Nexus resource.
      required:
      - instanceUrl
      description: The connector-specific profile properties required by Infor Nexus.
    InforNexusMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Infor Nexus.
    InforNexusSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Infor Nexus flow source.
      required:
      - object
      description: The properties that are applied when Infor Nexus is being used
        as a source.
    InstanceUrl:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: An internal service error occurred during the processing of your
        request. Try again later.
    JavaBoolean:
      type: boolean
    JwtToken:
      type: string
      pattern: ^([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_=]+)\.([a-zA-Z0-9_\-\+\/=]*)$
      minLength: 0
      maxLength: 8000
    KMSArn:
      type: string
      pattern: '^arn:aws:kms:.*:[0-9]+:'
      minLength: 20
      maxLength: 2048
    Key:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    Label:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 128
    LambdaConnectorProvisioningConfig:
      type: object
      properties:
        lambdaArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Lambda ARN of the connector being registered.
      required:
      - lambdaArn
      description: Contains information about the configuration of the lambda which
        is being registered as the connector.
    ListConnectorEntitiesRequest:
      type: object
      properties:
        connectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: The name of the connector profile. The name is unique for each
            `ConnectorProfile` in the Amazon Web Services account, and is used to
            query the downstream connector.
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: The type of connector, such as Salesforce, Amplitude, and so
            on.
        entitiesPath:
          allOf:
          - $ref: '#/components/schemas/EntitiesPath'
          description: This optional parameter is specific to connector implementation.
            Some connectors support multiple levels or categories of entities. You
            can find out the list of roots for such providers by sending a request
            without the `entitiesPath` parameter. If the connector supports entities
            at different roots, this initial request returns the list of roots. Otherwise,
            this request returns all entities supported by the provider.
        apiVersion:
          allOf:
          - $ref: '#/components/schemas/ApiVersion'
          description: The version of the API that's used by the connector.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListEntitiesMaxResults'
          description: The maximum number of items that the operation returns in the
            response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that was provided by your prior `ListConnectorEntities`
            operation if the response was too big for the page size. You specify this
            token to get the next page of results in paginated response.
    ListConnectorEntitiesResponse:
      type: object
      properties:
        connectorEntityMap:
          allOf:
          - $ref: '#/components/schemas/ConnectorEntityMap'
          description: The response of `ListConnectorEntities` lists entities grouped
            by category. This map's key represents the group name, and its value contains
            the list of entities belonging to that group.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that you specify in your next `ListConnectorEntities`
            operation to get the next page of results in paginated response. The `ListConnectorEntities`
            operation provides this token if the response is too big for the page
            size.
      required:
      - connectorEntityMap
    ListConnectorsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Specifies the maximum number of items that should be returned
            in the result set. The default for `maxResults` is 20 (for all paginated
            API operations).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token for the next page of data.
    ListConnectorsResponse:
      type: object
      properties:
        connectors:
          allOf:
          - $ref: '#/components/schemas/ConnectorList'
          description: Contains information about the connectors supported by Amazon
            AppFlow.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token for the next page of data. If nextToken=null,
            this means that all records have been fetched.
    ListEntitiesMaxResults:
      type: integer
      minimum: 1
      maximum: 10000
    ListFlowsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Specifies the maximum number of items that should be returned
            in the result set.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token for next page of data.
    ListFlowsResponse:
      type: object
      properties:
        flows:
          allOf:
          - $ref: '#/components/schemas/FlowList'
          description: The list of flows associated with your account.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token for next page of data.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The Amazon Resource Name (ARN) of the specified flow.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for your
            flow.
    LogoURL:
      type: string
      pattern: ^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]$
      minLength: 0
      maxLength: 256
    LogonLanguage:
      type: string
      pattern: ^[a-zA-Z0-9_]*$
      minLength: 0
      maxLength: 2
    Long:
      type: integer
      format: int64
    LookoutMetricsDestinationProperties:
      type: object
      properties: {}
      description: The properties that are applied when Amazon Lookout for Metrics
        is used as a destination.
    MarketoConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - GREATER_THAN
      - BETWEEN
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    MarketoConnectorProfileCredentials:
      type: object
      properties:
        clientId:
          allOf:
          - $ref: '#/components/schemas/ClientId'
          description: The identifier for the desired client.
        clientSecret:
          allOf:
          - $ref: '#/components/schemas/ClientSecret'
          description: The client secret used by the OAuth client to authenticate
            to the authorization server.
        accessToken:
          allOf:
          - $ref: '#/components/schemas/AccessToken'
          description: The credentials used to access protected Marketo resources.
        oAuthRequest:
          allOf:
          - $ref: '#/components/schemas/ConnectorOAuthRequest'
          description: The OAuth requirement needed to request security tokens from
            the connector endpoint.
      required:
      - clientId
      - clientSecret
      description: The connector-specific profile credentials required by Marketo.
    MarketoConnectorProfileProperties:
      type: object
      properties:
        instanceUrl:
          allOf:
          - $ref: '#/components/schemas/InstanceUrl'
          description: The location of the Marketo resource.
      required:
      - instanceUrl
      description: The connector-specific profile properties required when using Marketo.
    MarketoDestinationProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Marketo flow destination.
        errorHandlingConfig:
          $ref: '#/components/schemas/ErrorHandlingConfig'
      required:
      - object
      description: The properties that Amazon AppFlow applies when you use Marketo
        as a flow destination.
    MarketoMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Marketo.
    MarketoSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Marketo flow source.
      required:
      - object
      description: The properties that are applied when Marketo is being used as a
        source.
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    MetadataCatalogConfig:
      type: object
      properties:
        glueDataCatalog:
          allOf:
          - $ref: '#/components/schemas/GlueDataCatalogConfig'
          description: Specifies the configuration that Amazon AppFlow uses when it
            catalogs your data with the Glue Data Catalog.
      description: Specifies the configuration that Amazon AppFlow uses when it catalogs
        your data. When Amazon AppFlow catalogs your data, it stores metadata in a
        data catalog.
    MetadataCatalogDetail:
      type: object
      properties:
        catalogType:
          allOf:
          - $ref: '#/components/schemas/CatalogType'
          description: "The type of metadata catalog that Amazon AppFlow used for\
            \ the associated flow run. This parameter returns the following value:\n\
            \nGLUE\n\n    \n\nThe metadata catalog is provided by the Glue Data Catalog.\
            \ Glue includes the Glue Data Catalog as a component."
        tableName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the table that stores the metadata for the associated
            flow run. The table stores metadata that represents the data that the
            flow transferred. Amazon AppFlow stores the table in the metadata catalog.
        tableRegistrationOutput:
          allOf:
          - $ref: '#/components/schemas/RegistrationOutput'
          description: Describes the status of the attempt from Amazon AppFlow to
            register the metadata table with the metadata catalog. Amazon AppFlow
            creates or updates this table for the associated flow run.
        partitionRegistrationOutput:
          allOf:
          - $ref: '#/components/schemas/RegistrationOutput'
          description: Describes the status of the attempt from Amazon AppFlow to
            register the data partitions with the metadata catalog. The data partitions
            organize the flow output into a hierarchical path, such as a folder path
            in an S3 bucket. Amazon AppFlow creates the partitions (if they don't
            already exist) based on your flow configuration.
      description: Describes the metadata catalog, metadata table, and data partitions
        that Amazon AppFlow used for the associated flow run.
    MetadataCatalogDetails:
      type: array
      items:
        $ref: '#/components/schemas/MetadataCatalogDetail'
    MostRecentExecutionMessage:
      type: string
      pattern: ^[\w!@#\-.?,\s]*$
      minLength: 0
      maxLength: 2048
    Name:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 128
    NextToken:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 2048
    OAuth2Credentials:
      type: object
      properties:
        clientId:
          allOf:
          - $ref: '#/components/schemas/ClientId'
          description: The identifier for the desired client.
        clientSecret:
          allOf:
          - $ref: '#/components/schemas/ClientSecret'
          description: The client secret used by the OAuth client to authenticate
            to the authorization server.
        accessToken:
          allOf:
          - $ref: '#/components/schemas/AccessToken'
          description: The access token used to access the connector on your behalf.
        refreshToken:
          allOf:
          - $ref: '#/components/schemas/RefreshToken'
          description: The refresh token used to refresh an expired access token.
        oAuthRequest:
          $ref: '#/components/schemas/ConnectorOAuthRequest'
      description: The OAuth 2.0 credentials required for OAuth 2.0 authentication.
    OAuth2CustomParameter:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/Key'
          description: The key of the custom parameter required for OAuth 2.0 authentication.
        isRequired:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the custom parameter for OAuth 2.0 authentication
            is required.
        label:
          allOf:
          - $ref: '#/components/schemas/Label'
          description: The label of the custom parameter used for OAuth 2.0 authentication.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description about the custom parameter used for OAuth 2.0
            authentication.
        isSensitiveField:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether this authentication custom parameter is a
            sensitive field.
        connectorSuppliedValues:
          allOf:
          - $ref: '#/components/schemas/ConnectorSuppliedValueList'
          description: Contains default values for this authentication parameter that
            are supplied by the connector.
        type:
          allOf:
          - $ref: '#/components/schemas/OAuth2CustomPropType'
          description: Indicates whether custom parameter is used with TokenUrl or
            AuthUrl.
      description: Custom parameter required for OAuth 2.0 authentication.
    OAuth2CustomPropType:
      type: string
      enum:
      - TOKEN_URL
      - AUTH_URL
    OAuth2CustomPropertiesList:
      type: array
      items:
        $ref: '#/components/schemas/OAuth2CustomParameter'
    OAuth2Defaults:
      type: object
      properties:
        oauthScopes:
          allOf:
          - $ref: '#/components/schemas/OAuthScopeList'
          description: OAuth 2.0 scopes that the connector supports.
        tokenUrls:
          allOf:
          - $ref: '#/components/schemas/TokenUrlList'
          description: Token URLs that can be used for OAuth 2.0 authentication.
        authCodeUrls:
          allOf:
          - $ref: '#/components/schemas/AuthCodeUrlList'
          description: Auth code URLs that can be used for OAuth 2.0 authentication.
        oauth2GrantTypesSupported:
          allOf:
          - $ref: '#/components/schemas/OAuth2GrantTypeSupportedList'
          description: OAuth 2.0 grant types supported by the connector.
        oauth2CustomProperties:
          allOf:
          - $ref: '#/components/schemas/OAuth2CustomPropertiesList'
          description: List of custom parameters required for OAuth 2.0 authentication.
      description: Contains the default values required for OAuth 2.0 authentication.
    OAuth2GrantType:
      type: string
      enum:
      - CLIENT_CREDENTIALS
      - AUTHORIZATION_CODE
      - JWT_BEARER
    OAuth2GrantTypeSupportedList:
      type: array
      items:
        $ref: '#/components/schemas/OAuth2GrantType'
    OAuth2Properties:
      type: object
      properties:
        tokenUrl:
          allOf:
          - $ref: '#/components/schemas/TokenUrl'
          description: The token URL required for OAuth 2.0 authentication.
        oAuth2GrantType:
          allOf:
          - $ref: '#/components/schemas/OAuth2GrantType'
          description: The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication.
        tokenUrlCustomProperties:
          allOf:
          - $ref: '#/components/schemas/TokenUrlCustomProperties'
          description: Associates your token URL with a map of properties that you
            define. Use this parameter to provide any additional details that the
            connector requires to authenticate your request.
      required:
      - tokenUrl
      - oAuth2GrantType
      description: The OAuth 2.0 properties required for OAuth 2.0 authentication.
    OAuthCredentials:
      type: object
      properties:
        clientId:
          allOf:
          - $ref: '#/components/schemas/ClientId'
          description: The identifier for the desired client.
        clientSecret:
          allOf:
          - $ref: '#/components/schemas/ClientSecret'
          description: The client secret used by the OAuth client to authenticate
            to the authorization server.
        accessToken:
          allOf:
          - $ref: '#/components/schemas/AccessToken'
          description: The access token used to access protected SAPOData resources.
        refreshToken:
          allOf:
          - $ref: '#/components/schemas/RefreshToken'
          description: The refresh token used to refresh expired access token.
        oAuthRequest:
          allOf:
          - $ref: '#/components/schemas/ConnectorOAuthRequest'
          description: The OAuth requirement needed to request security tokens from
            the connector endpoint.
      required:
      - clientId
      - clientSecret
      description: The OAuth credentials required for OAuth type authentication.
    OAuthProperties:
      type: object
      properties:
        tokenUrl:
          allOf:
          - $ref: '#/components/schemas/TokenUrl'
          description: The token url required to fetch access/refresh tokens using
            authorization code and also to refresh expired access token using refresh
            token.
        authCodeUrl:
          allOf:
          - $ref: '#/components/schemas/AuthCodeUrl'
          description: The authorization code url required to redirect to SAP Login
            Page to fetch authorization code for OAuth type authentication.
        oAuthScopes:
          allOf:
          - $ref: '#/components/schemas/OAuthScopeList'
          description: The OAuth scopes required for OAuth type authentication.
      required:
      - tokenUrl
      - authCodeUrl
      - oAuthScopes
      description: The OAuth properties required for OAuth type authentication.
    OAuthScope:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 128
    OAuthScopeList:
      type: array
      items:
        $ref: '#/components/schemas/OAuthScope'
    Object:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    ObjectTypeName:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 255
    Operator:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - GREATER_THAN
      - CONTAINS
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - NOT_EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    OperatorPropertiesKeys:
      type: string
      enum:
      - VALUE
      - VALUES
      - DATA_TYPE
      - UPPER_BOUND
      - LOWER_BOUND
      - SOURCE_DATA_TYPE
      - DESTINATION_DATA_TYPE
      - VALIDATION_ACTION
      - MASK_VALUE
      - MASK_LENGTH
      - TRUNCATE_LENGTH
      - MATH_OPERATION_FIELDS_ORDER
      - CONCAT_FORMAT
      - SUBFIELD_CATEGORY_MAP
      - EXCLUDE_SOURCE_FIELDS_LIST
      - INCLUDE_NEW_FIELDS
      - ORDERED_PARTITION_KEYS_LIST
    Operators:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - GREATER_THAN
      - CONTAINS
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - NOT_EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    PardotConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - EQUAL_TO
      - NO_OP
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
    PardotConnectorProfileCredentials:
      type: object
      properties:
        accessToken:
          allOf:
          - $ref: '#/components/schemas/AccessToken'
          description: The credentials used to access protected Salesforce Pardot
            resources.
        refreshToken:
          allOf:
          - $ref: '#/components/schemas/RefreshToken'
          description: The credentials used to acquire new access tokens.
        oAuthRequest:
          $ref: '#/components/schemas/ConnectorOAuthRequest'
        clientCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/ClientCredentialsArn'
          description: The secret manager ARN, which contains the client ID and client
            secret of the connected app.
      description: The connector-specific profile credentials required when using
        Salesforce Pardot.
    PardotConnectorProfileProperties:
      type: object
      properties:
        instanceUrl:
          allOf:
          - $ref: '#/components/schemas/InstanceUrl'
          description: The location of the Salesforce Pardot resource.
        isSandboxEnvironment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the connector profile applies to a sandbox
            or production environment.
        businessUnitId:
          allOf:
          - $ref: '#/components/schemas/BusinessUnitId'
          description: The business unit id of Salesforce Pardot instance.
      description: The connector-specific profile properties required when using Salesforce
        Pardot.
    PardotMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Salesforce Pardot.
    PardotSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Salesforce Pardot flow source.
      required:
      - object
      description: The properties that are applied when Salesforce Pardot is being
        used as a source.
    Password:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 512
    PathPrefix:
      type: string
      enum:
      - EXECUTION_ID
      - SCHEMA_VERSION
    PathPrefixHierarchy:
      type: array
      items:
        $ref: '#/components/schemas/PathPrefix'
    PortNumber:
      type: integer
      minimum: 1
      maximum: 65535
    PrefixConfig:
      type: object
      properties:
        prefixType:
          allOf:
          - $ref: '#/components/schemas/PrefixType'
          description: Determines the format of the prefix, and whether it applies
            to the file name, file path, or both.
        prefixFormat:
          allOf:
          - $ref: '#/components/schemas/PrefixFormat'
          description: Determines the level of granularity for the date and time that's
            included in the prefix.
        pathPrefixHierarchy:
          allOf:
          - $ref: '#/components/schemas/PathPrefixHierarchy'
          description: "Specifies whether the destination file path includes either\
            \ or both of the following elements:\n\nEXECUTION_ID\n\n    \n\nThe ID\
            \ that Amazon AppFlow assigns to the flow run.\n\nSCHEMA_VERSION\n\n \
            \   \n\nThe version number of your data schema. Amazon AppFlow assigns\
            \ this version number. The version number increases by one when you change\
            \ any of the following settings in your flow configuration:\n\n  * Source-to-destination\
            \ field mappings\n\n  * Field data types\n\n  * Partition keys"
      description: Specifies elements that Amazon AppFlow includes in the file and
        folder names in the flow destination.
    PrefixFormat:
      type: string
      enum:
      - YEAR
      - MONTH
      - DAY
      - HOUR
      - MINUTE
    PrefixType:
      type: string
      enum:
      - FILENAME
      - PATH
      - PATH_AND_FILENAME
    PrivateConnectionProvisioningFailureCause:
      type: string
      enum:
      - CONNECTOR_AUTHENTICATION
      - CONNECTOR_SERVER
      - INTERNAL_SERVER
      - ACCESS_DENIED
      - VALIDATION
    PrivateConnectionProvisioningFailureMessage:
      type: string
      pattern: ^[\s\w/!@#+=.-]*$
      minLength: 0
      maxLength: 2048
    PrivateConnectionProvisioningState:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/PrivateConnectionProvisioningStatus'
          description: Specifies the private connection provisioning status.
        failureMessage:
          allOf:
          - $ref: '#/components/schemas/PrivateConnectionProvisioningFailureMessage'
          description: Specifies the private connection provisioning failure reason.
        failureCause:
          allOf:
          - $ref: '#/components/schemas/PrivateConnectionProvisioningFailureCause'
          description: Specifies the private connection provisioning failure cause.
      description: Specifies the private connection provisioning state.
    PrivateConnectionProvisioningStatus:
      type: string
      enum:
      - FAILED
      - PENDING
      - CREATED
    PrivateLinkServiceName:
      type: string
      pattern: ^$|com.amazonaws.vpce.[\w/!:@#.\-]+$
      minLength: 0
      maxLength: 512
    ProfilePropertiesMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ProfilePropertyValue'
    ProfilePropertyKey:
      type: string
      pattern: ^[\w]+$
      minLength: 1
      maxLength: 128
    ProfilePropertyValue:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 2048
    Property:
      type: string
      pattern: ^.+$
      minLength: 0
      maxLength: 2048
    Range:
      type: object
      properties:
        maximum:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: Maximum value supported by the field.
        minimum:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: Minimum value supported by the field.
      description: The range of values that the property supports.
    RedirectUri:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    RedshiftConnectorProfileCredentials:
      type: object
      properties:
        username:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the user.
        password:
          allOf:
          - $ref: '#/components/schemas/Password'
          description: The password that corresponds to the user name.
      description: The connector-specific profile credentials required when using
        Amazon Redshift.
    RedshiftConnectorProfileProperties:
      type: object
      properties:
        databaseUrl:
          allOf:
          - $ref: '#/components/schemas/DatabaseUrl'
          description: The JDBC URL of the Amazon Redshift cluster.
        bucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          description: A name for the associated Amazon S3 bucket.
        bucketPrefix:
          allOf:
          - $ref: '#/components/schemas/BucketPrefix'
          description: The object key for the destination bucket in which Amazon AppFlow
            places the files.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of IAM role that grants Amazon
            Redshift read-only access to Amazon S3. For more information, and for
            the polices that you attach to this role, see [Allow Amazon Redshift to
            access your Amazon AppFlow data in Amazon S3](https://docs.aws.amazon.com/appflow/latest/userguide/security_iam_service-role-policies.html#redshift-access-s3).
        dataApiRoleArn:
          allOf:
          - $ref: '#/components/schemas/DataApiRoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that permits
            Amazon AppFlow to access your Amazon Redshift database through the Data
            API. For more information, and for the polices that you attach to this
            role, see [Allow Amazon AppFlow to access Amazon Redshift databases with
            the Data API](https://docs.aws.amazon.com/appflow/latest/userguide/security_iam_service-role-policies.html#access-redshift).
        isRedshiftServerless:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the connector profile defines a connection
            to an Amazon Redshift Serverless data warehouse.
        clusterIdentifier:
          allOf:
          - $ref: '#/components/schemas/ClusterIdentifier'
          description: The unique ID that's assigned to an Amazon Redshift cluster.
        workgroupName:
          allOf:
          - $ref: '#/components/schemas/WorkgroupName'
          description: The name of an Amazon Redshift workgroup.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of an Amazon Redshift database.
      required:
      - bucketName
      - roleArn
      description: The connector-specific profile properties when using Amazon Redshift.
    RedshiftDestinationProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Amazon Redshift flow destination.
        intermediateBucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          description: The intermediate bucket that Amazon AppFlow uses when moving
            data into Amazon Redshift.
        bucketPrefix:
          allOf:
          - $ref: '#/components/schemas/BucketPrefix'
          description: The object key for the bucket in which Amazon AppFlow places
            the destination files.
        errorHandlingConfig:
          allOf:
          - $ref: '#/components/schemas/ErrorHandlingConfig'
          description: The settings that determine how Amazon AppFlow handles an error
            when placing data in the Amazon Redshift destination. For example, this
            setting would determine if the flow should fail after one insertion error,
            or continue and attempt to insert every record regardless of the initial
            failure. `ErrorHandlingConfig` is a part of the destination connector
            details.
      required:
      - object
      - intermediateBucketName
      description: The properties that are applied when Amazon Redshift is being used
        as a destination.
    RedshiftMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Amazon Redshift.
    RefreshToken:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 4096
    Region:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 64
    RegionList:
      type: array
      items:
        $ref: '#/components/schemas/Region'
    RegisterConnectorRequest:
      type: object
      properties:
        connectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: The name of the connector. The name is unique for each `ConnectorRegistration`
            in your Amazon Web Services account.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description about the connector that's being registered.
        connectorProvisioningType:
          allOf:
          - $ref: '#/components/schemas/ConnectorProvisioningType'
          description: The provisioning type of the connector. Currently the only
            supported value is LAMBDA.
        connectorProvisioningConfig:
          allOf:
          - $ref: '#/components/schemas/ConnectorProvisioningConfig'
          description: The provisioning type of the connector. Currently the only
            supported value is LAMBDA.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'The `clientToken` parameter is an idempotency token. It ensures
            that your `RegisterConnector` request completes only once. You choose
            the value to pass. For example, if you don''t receive a response from
            your request, you can safely retry the request with the same `clientToken`
            parameter value.


            If you omit a `clientToken` value, the Amazon Web Services SDK that you
            are using inserts a value for you. This way, the SDK can safely retry
            requests multiple times after a network error. You must provide your own
            value for other use cases.


            If you specify input parameters that differ from your first request, an
            error occurs. If you use a different value for `clientToken`, Amazon AppFlow
            considers it a new call to `RegisterConnector`. The token is active for
            8 hours.'
    RegisterConnectorResponse:
      type: object
      properties:
        connectorArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The ARN of the connector being registered.
    RegisteredBy:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    RegistrationOutput:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Explains the status of the registration attempt from Amazon
            AppFlow. If the attempt fails, the message explains why.
        result:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Indicates the number of resources that Amazon AppFlow created
            or updated. Possible resources include metadata tables and data partitions.
        status:
          allOf:
          - $ref: '#/components/schemas/ExecutionStatus'
          description: Indicates the status of the registration attempt from Amazon
            AppFlow.
      description: 'Describes the status of an attempt from Amazon AppFlow to register
        a resource.


        When you run a flow that you''ve configured to use a metadata catalog, Amazon
        AppFlow registers a metadata table and data partitions with that catalog.
        This operation provides the status of that registration attempt. The operation
        also indicates how many related resources Amazon AppFlow created or updated.'
    ResetConnectorMetadataCacheRequest:
      type: object
      properties:
        connectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: 'The name of the connector profile that you want to reset cached
            metadata for.


            You can omit this parameter if you''re resetting the cache for any of
            the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout
            for Metrics, Amazon S3, or Upsolver. If you''re resetting the cache for
            any other connector, you must include this parameter in your request.'
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: 'The type of connector to reset cached metadata for.


            You must include this parameter in your request if you''re resetting the
            cache for any of the following connectors: Amazon Connect, Amazon EventBridge,
            Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you''re resetting
            the cache for any other connector, you can omit this parameter from your
            request.'
        connectorEntityName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: 'Use this parameter if you want to reset cached metadata about
            the details for an individual entity.


            If you don''t include this parameter in your request, Amazon AppFlow only
            resets cached metadata about entity names, not entity details.'
        entitiesPath:
          allOf:
          - $ref: '#/components/schemas/EntitiesPath'
          description: 'Use this parameter only if you’re resetting the cached metadata
            about a nested entity. Only some connectors support nested entities. A
            nested entity is one that has another entity as a parent. To use this
            parameter, specify the name of the parent entity.


            To look up the parent-child relationship of entities, you can send a ListConnectorEntities
            request that omits the entitiesPath parameter. Amazon AppFlow will return
            a list of top-level entities. For each one, it indicates whether the entity
            has nested entities. Then, in a subsequent ListConnectorEntities request,
            you can specify a parent entity name for the entitiesPath parameter. Amazon
            AppFlow will return a list of the child entities for that parent.'
        apiVersion:
          allOf:
          - $ref: '#/components/schemas/ApiVersion'
          description: 'The API version that you specified in the connector profile
            that you’re resetting cached metadata for. You must use this parameter
            only if the connector supports multiple API versions or if the connector
            type is CustomConnector.


            To look up how many versions a connector supports, use the DescribeConnectors
            action. In the response, find the value that Amazon AppFlow returns for
            the connectorVersion parameter.


            To look up the connector type, use the DescribeConnectorProfiles action.
            In the response, find the value that Amazon AppFlow returns for the connectorType
            parameter.


            To look up the API version that you specified in a connector profile,
            use the DescribeConnectorProfiles action.'
    ResetConnectorMetadataCacheResponse:
      type: object
      properties: {}
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The resource specified in the request (such as the source or destination
        connector profile) is not found.
    RoleArn:
      type: string
      pattern: '^arn:aws:iam:.*:[0-9]+:'
      minLength: 0
      maxLength: 512
    S3ConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - GREATER_THAN
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - NOT_EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    S3DestinationProperties:
      type: object
      properties:
        bucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          description: The Amazon S3 bucket name in which Amazon AppFlow places the
            transferred data.
        bucketPrefix:
          allOf:
          - $ref: '#/components/schemas/BucketPrefix'
          description: The object key for the destination bucket in which Amazon AppFlow
            places the files.
        s3OutputFormatConfig:
          $ref: '#/components/schemas/S3OutputFormatConfig'
      required:
      - bucketName
      description: The properties that are applied when Amazon S3 is used as a destination.
    S3InputFileType:
      type: string
      enum:
      - CSV
      - JSON
    S3InputFormatConfig:
      type: object
      properties:
        s3InputFileType:
          allOf:
          - $ref: '#/components/schemas/S3InputFileType'
          description: The file type that Amazon AppFlow gets from your Amazon S3
            bucket.
      description: When you use Amazon S3 as the source, the configuration format
        that you provide the flow input data.
    S3Metadata:
      type: object
      properties: {}
      description: The connector metadata specific to Amazon S3.
    S3OutputFormatConfig:
      type: object
      properties:
        fileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          description: Indicates the file type that Amazon AppFlow places in the Amazon
            S3 bucket.
        prefixConfig:
          allOf:
          - $ref: '#/components/schemas/PrefixConfig'
          description: Determines the prefix that Amazon AppFlow applies to the folder
            name in the Amazon S3 bucket. You can name folders according to the flow
            frequency and date.
        aggregationConfig:
          $ref: '#/components/schemas/AggregationConfig'
        preserveSourceDataTyping:
          allOf:
          - $ref: '#/components/schemas/JavaBoolean'
          description: "If your file output format is Parquet, use this parameter\
            \ to set whether Amazon AppFlow preserves the data types in your source\
            \ data when it writes the output to Amazon S3.\n\n  * `true`: Amazon AppFlow\
            \ preserves the data types when it writes to Amazon S3. For example, an\
            \ integer or `1` in your source data is still an integer in your output.\n\
            \n  * `false`: Amazon AppFlow converts all of the source data into strings\
            \ when it writes to Amazon S3. For example, an integer of `1` in your\
            \ source data becomes the string `\"1\"` in the output."
      description: The configuration that determines how Amazon AppFlow should format
        the flow output data when Amazon S3 is used as the destination.
    S3SourceProperties:
      type: object
      properties:
        bucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          description: The Amazon S3 bucket name where the source files are stored.
        bucketPrefix:
          allOf:
          - $ref: '#/components/schemas/BucketPrefix'
          description: The object key for the Amazon S3 bucket in which the source
            files are stored.
        s3InputFormatConfig:
          $ref: '#/components/schemas/S3InputFormatConfig'
      required:
      - bucketName
      description: The properties that are applied when Amazon S3 is being used as
        the flow source.
    SAPODataConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - CONTAINS
      - GREATER_THAN
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - NOT_EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    SAPODataConnectorProfileCredentials:
      type: object
      properties:
        basicAuthCredentials:
          allOf:
          - $ref: '#/components/schemas/BasicAuthCredentials'
          description: The SAPOData basic authentication credentials.
        oAuthCredentials:
          allOf:
          - $ref: '#/components/schemas/OAuthCredentials'
          description: The SAPOData OAuth type authentication credentials.
      description: The connector-specific profile credentials required when using
        SAPOData.
    SAPODataConnectorProfileProperties:
      type: object
      properties:
        applicationHostUrl:
          allOf:
          - $ref: '#/components/schemas/ApplicationHostUrl'
          description: The location of the SAPOData resource.
        applicationServicePath:
          allOf:
          - $ref: '#/components/schemas/ApplicationServicePath'
          description: The application path to catalog service.
        portNumber:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          description: The port number of the SAPOData instance.
        clientNumber:
          allOf:
          - $ref: '#/components/schemas/ClientNumber'
          description: The client number for the client creating the connection.
        logonLanguage:
          allOf:
          - $ref: '#/components/schemas/LogonLanguage'
          description: The logon language of SAPOData instance.
        privateLinkServiceName:
          allOf:
          - $ref: '#/components/schemas/PrivateLinkServiceName'
          description: The SAPOData Private Link service name to be used for private
            data transfers.
        oAuthProperties:
          allOf:
          - $ref: '#/components/schemas/OAuthProperties'
          description: The SAPOData OAuth properties required for OAuth type authentication.
        disableSSO:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'If you set this parameter to `true`, Amazon AppFlow bypasses
            the single sign-on (SSO) settings in your SAP account when it accesses
            your SAP OData instance.


            Whether you need this option depends on the types of credentials that
            you applied to your SAP OData connection profile. If your profile uses
            basic authentication credentials, SAP SSO can prevent Amazon AppFlow from
            connecting to your account with your username and password. In this case,
            bypassing SSO makes it possible for Amazon AppFlow to connect successfully.
            However, if your profile uses OAuth credentials, this parameter has no
            affect.'
      required:
      - applicationHostUrl
      - applicationServicePath
      - portNumber
      - clientNumber
      description: The connector-specific profile properties required when using SAPOData.
    SAPODataDestinationProperties:
      type: object
      properties:
        objectPath:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object path specified in the SAPOData flow destination.
        successResponseHandlingConfig:
          allOf:
          - $ref: '#/components/schemas/SuccessResponseHandlingConfig'
          description: 'Determines how Amazon AppFlow handles the success response
            that it gets from the connector after placing data.


            For example, this setting would determine where to write the response
            from a destination connector upon a successful insert operation.'
        idFieldNames:
          $ref: '#/components/schemas/IdFieldNameList'
        errorHandlingConfig:
          $ref: '#/components/schemas/ErrorHandlingConfig'
        writeOperationType:
          $ref: '#/components/schemas/WriteOperationType'
      required:
      - objectPath
      description: The properties that are applied when using SAPOData as a flow destination
    SAPODataMaxPageSize:
      type: integer
      minimum: 1
      maximum: 10000
    SAPODataMaxParallelism:
      type: integer
      minimum: 1
      maximum: 10
    SAPODataMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to SAPOData.
    SAPODataPaginationConfig:
      type: object
      properties:
        maxPageSize:
          allOf:
          - $ref: '#/components/schemas/SAPODataMaxPageSize'
          description: The maximum number of records that Amazon AppFlow receives
            in each page of the response from your SAP application. For transfers
            of OData records, the maximum page size is 3,000. For transfers of data
            that comes from an ODP provider, the maximum page size is 10,000.
      required:
      - maxPageSize
      description: Sets the page size for each _concurrent process_ that transfers
        OData records from your SAP instance. A concurrent process is query that retrieves
        a batch of records as part of a flow run. Amazon AppFlow can run multiple
        concurrent processes in parallel to transfer data faster.
    SAPODataParallelismConfig:
      type: object
      properties:
        maxParallelism:
          allOf:
          - $ref: '#/components/schemas/SAPODataMaxParallelism'
          description: The maximum number of processes that Amazon AppFlow runs at
            the same time when it retrieves your data from your SAP application.
      required:
      - maxParallelism
      description: Sets the number of _concurrent processes_ that transfer OData records
        from your SAP instance. A concurrent process is query that retrieves a batch
        of records as part of a flow run. Amazon AppFlow can run multiple concurrent
        processes in parallel to transfer data faster.
    SAPODataSourceProperties:
      type: object
      properties:
        objectPath:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object path specified in the SAPOData flow source.
        parallelismConfig:
          allOf:
          - $ref: '#/components/schemas/SAPODataParallelismConfig'
          description: Sets the number of concurrent processes that transfers OData
            records from your SAP instance.
        paginationConfig:
          allOf:
          - $ref: '#/components/schemas/SAPODataPaginationConfig'
          description: Sets the page size for each concurrent process that transfers
            OData records from your SAP instance.
      description: The properties that are applied when using SAPOData as a flow source.
    SalesforceConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - CONTAINS
      - GREATER_THAN
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - NOT_EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    SalesforceConnectorProfileCredentials:
      type: object
      properties:
        accessToken:
          allOf:
          - $ref: '#/components/schemas/AccessToken'
          description: The credentials used to access protected Salesforce resources.
        refreshToken:
          allOf:
          - $ref: '#/components/schemas/RefreshToken'
          description: The credentials used to acquire new access tokens.
        oAuthRequest:
          allOf:
          - $ref: '#/components/schemas/ConnectorOAuthRequest'
          description: The OAuth requirement needed to request security tokens from
            the connector endpoint.
        clientCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/ClientCredentialsArn'
          description: The secret manager ARN, which contains the client ID and client
            secret of the connected app.
        oAuth2GrantType:
          allOf:
          - $ref: '#/components/schemas/OAuth2GrantType'
          description: "Specifies the OAuth 2.0 grant type that Amazon AppFlow uses\
            \ when it requests an access token from Salesforce. Amazon AppFlow requires\
            \ an access token each time it attempts to access your Salesforce records.\n\
            \nYou can specify one of the following values:\n\nAUTHORIZATION_CODE\n\
            \n    \n\nAmazon AppFlow passes an authorization code when it requests\
            \ the access token from Salesforce. Amazon AppFlow receives the authorization\
            \ code from Salesforce after you log in to your Salesforce account and\
            \ authorize Amazon AppFlow to access your records.\n\nJWT_BEARER\n\n \
            \   \n\nAmazon AppFlow passes a JSON web token (JWT) when it requests\
            \ the access token from Salesforce. You provide the JWT to Amazon AppFlow\
            \ when you define the connection to your Salesforce account. When you\
            \ use this grant type, you don't need to log in to your Salesforce account\
            \ to authorize Amazon AppFlow to access your records.\n\nThe CLIENT_CREDENTIALS\
            \ value is not supported for Salesforce."
        jwtToken:
          allOf:
          - $ref: '#/components/schemas/JwtToken'
          description: A JSON web token (JWT) that authorizes Amazon AppFlow to access
            your Salesforce records.
      description: The connector-specific profile credentials required when using
        Salesforce.
    SalesforceConnectorProfileProperties:
      type: object
      properties:
        instanceUrl:
          allOf:
          - $ref: '#/components/schemas/InstanceUrl'
          description: The location of the Salesforce resource.
        isSandboxEnvironment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the connector profile applies to a sandbox
            or production environment.
        usePrivateLinkForMetadataAndAuthorization:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: "If the connection mode for the connector profile is private,\
            \ this parameter sets whether Amazon AppFlow uses the private network\
            \ to send metadata and authorization calls to Salesforce. Amazon AppFlow\
            \ sends private calls through Amazon Web Services PrivateLink. These calls\
            \ travel through Amazon Web Services infrastructure without being exposed\
            \ to the public internet.\n\nSet either of the following values:\n\ntrue\n\
            \n    \n\nAmazon AppFlow sends all calls to Salesforce over the private\
            \ network.\n\nThese private calls are:\n\n  * Calls to get metadata about\
            \ your Salesforce records. This metadata describes your Salesforce objects\
            \ and their fields.\n\n  * Calls to get or refresh access tokens that\
            \ allow Amazon AppFlow to access your Salesforce records.\n\n  * Calls\
            \ to transfer your Salesforce records as part of a flow run.\n\nfalse\n\
            \n    \n\nThe default value. Amazon AppFlow sends some calls to Salesforce\
            \ privately and other calls over the public internet.\n\nThe public calls\
            \ are:\n\n  * Calls to get metadata about your Salesforce records.\n\n\
            \  * Calls to get or refresh access tokens.\n\nThe private calls are:\n\
            \n  * Calls to transfer your Salesforce records as part of a flow run."
      description: The connector-specific profile properties required when using Salesforce.
    SalesforceDataTransferApi:
      type: string
      enum:
      - AUTOMATIC
      - BULKV2
      - REST_SYNC
    SalesforceDataTransferApiList:
      type: array
      items:
        $ref: '#/components/schemas/SalesforceDataTransferApi'
    SalesforceDestinationProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Salesforce flow destination.
        idFieldNames:
          allOf:
          - $ref: '#/components/schemas/IdFieldNameList'
          description: The name of the field that Amazon AppFlow uses as an ID when
            performing a write operation such as update or delete.
        errorHandlingConfig:
          allOf:
          - $ref: '#/components/schemas/ErrorHandlingConfig'
          description: The settings that determine how Amazon AppFlow handles an error
            when placing data in the Salesforce destination. For example, this setting
            would determine if the flow should fail after one insertion error, or
            continue and attempt to insert every record regardless of the initial
            failure. `ErrorHandlingConfig` is a part of the destination connector
            details.
        writeOperationType:
          allOf:
          - $ref: '#/components/schemas/WriteOperationType'
          description: This specifies the type of write operation to be performed
            in Salesforce. When the value is `UPSERT`, then `idFieldNames` is required.
        dataTransferApi:
          allOf:
          - $ref: '#/components/schemas/SalesforceDataTransferApi'
          description: "Specifies which Salesforce API is used by Amazon AppFlow when\
            \ your flow transfers data to Salesforce.\n\nAUTOMATIC\n\n    \n\nThe\
            \ default. Amazon AppFlow selects which API to use based on the number\
            \ of records that your flow transfers to Salesforce. If your flow transfers\
            \ fewer than 1,000 records, Amazon AppFlow uses Salesforce REST API. If\
            \ your flow transfers 1,000 records or more, Amazon AppFlow uses Salesforce\
            \ Bulk API 2.0.\n\nEach of these Salesforce APIs structures data differently.\
            \ If Amazon AppFlow selects the API automatically, be aware that, for\
            \ recurring flows, the data output might vary from one flow run to the\
            \ next. For example, if a flow runs daily, it might use REST API on one\
            \ day to transfer 900 records, and it might use Bulk API 2.0 on the next\
            \ day to transfer 1,100 records. For each of these flow runs, the respective\
            \ Salesforce API formats the data differently. Some of the differences\
            \ include how dates are formatted and null values are represented. Also,\
            \ Bulk API 2.0 doesn't transfer Salesforce compound fields.\n\nBy choosing\
            \ this option, you optimize flow performance for both small and large\
            \ data transfers, but the tradeoff is inconsistent formatting in the output.\n\
            \nBULKV2\n\n    \n\nAmazon AppFlow uses only Salesforce Bulk API 2.0.\
            \ This API runs asynchronous data transfers, and it's optimal for large\
            \ sets of data. By choosing this option, you ensure that your flow writes\
            \ consistent output, but you optimize performance only for large data\
            \ transfers.\n\nNote that Bulk API 2.0 does not transfer Salesforce compound\
            \ fields.\n\nREST_SYNC\n\n    \n\nAmazon AppFlow uses only Salesforce\
            \ REST API. By choosing this option, you ensure that your flow writes\
            \ consistent output, but you decrease performance for large data transfers\
            \ that are better suited for Bulk API 2.0. In some cases, if your flow\
            \ attempts to transfer a vary large set of data, it might fail with a\
            \ timed out error."
      required:
      - object
      description: The properties that are applied when Salesforce is being used as
        a destination.
    SalesforceMetadata:
      type: object
      properties:
        oAuthScopes:
          allOf:
          - $ref: '#/components/schemas/OAuthScopeList'
          description: The desired authorization scope for the Salesforce account.
        dataTransferApis:
          allOf:
          - $ref: '#/components/schemas/SalesforceDataTransferApiList'
          description: The Salesforce APIs that you can have Amazon AppFlow use when
            your flows transfers data to or from Salesforce.
        oauth2GrantTypesSupported:
          allOf:
          - $ref: '#/components/schemas/OAuth2GrantTypeSupportedList'
          description: "The OAuth 2.0 grant types that Amazon AppFlow can use when\
            \ it requests an access token from Salesforce. Amazon AppFlow requires\
            \ an access token each time it attempts to access your Salesforce records.\n\
            \nAUTHORIZATION_CODE\n\n    \n\nAmazon AppFlow passes an authorization\
            \ code when it requests the access token from Salesforce. Amazon AppFlow\
            \ receives the authorization code from Salesforce after you log in to\
            \ your Salesforce account and authorize Amazon AppFlow to access your\
            \ records.\n\nJWT_BEARER\n\n    \n\nAmazon AppFlow passes a JSON web token\
            \ (JWT) when it requests the access token from Salesforce. You provide\
            \ the JWT to Amazon AppFlow when you define the connection to your Salesforce\
            \ account. When you use this grant type, you don't need to log in to your\
            \ Salesforce account to authorize Amazon AppFlow to access your records.\n\
            \nThe CLIENT_CREDENTIALS value is not supported for Salesforce."
      description: The connector metadata specific to Salesforce.
    SalesforceSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Salesforce flow source.
        enableDynamicFieldUpdate:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The flag that enables dynamic fetching of new (recently added)
            fields in the Salesforce objects while running a flow.
        includeDeletedRecords:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether Amazon AppFlow includes deleted files in
            the flow run.
        dataTransferApi:
          allOf:
          - $ref: '#/components/schemas/SalesforceDataTransferApi'
          description: "Specifies which Salesforce API is used by Amazon AppFlow when\
            \ your flow transfers data from Salesforce.\n\nAUTOMATIC\n\n    \n\nThe\
            \ default. Amazon AppFlow selects which API to use based on the number\
            \ of records that your flow transfers from Salesforce. If your flow transfers\
            \ fewer than 1,000,000 records, Amazon AppFlow uses Salesforce REST API.\
            \ If your flow transfers 1,000,000 records or more, Amazon AppFlow uses\
            \ Salesforce Bulk API 2.0.\n\nEach of these Salesforce APIs structures\
            \ data differently. If Amazon AppFlow selects the API automatically, be\
            \ aware that, for recurring flows, the data output might vary from one\
            \ flow run to the next. For example, if a flow runs daily, it might use\
            \ REST API on one day to transfer 900,000 records, and it might use Bulk\
            \ API 2.0 on the next day to transfer 1,100,000 records. For each of these\
            \ flow runs, the respective Salesforce API formats the data differently.\
            \ Some of the differences include how dates are formatted and null values\
            \ are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound\
            \ fields.\n\nBy choosing this option, you optimize flow performance for\
            \ both small and large data transfers, but the tradeoff is inconsistent\
            \ formatting in the output.\n\nBULKV2\n\n    \n\nAmazon AppFlow uses only\
            \ Salesforce Bulk API 2.0. This API runs asynchronous data transfers,\
            \ and it's optimal for large sets of data. By choosing this option, you\
            \ ensure that your flow writes consistent output, but you optimize performance\
            \ only for large data transfers.\n\nNote that Bulk API 2.0 does not transfer\
            \ Salesforce compound fields.\n\nREST_SYNC\n\n    \n\nAmazon AppFlow uses\
            \ only Salesforce REST API. By choosing this option, you ensure that your\
            \ flow writes consistent output, but you decrease performance for large\
            \ data transfers that are better suited for Bulk API 2.0. In some cases,\
            \ if your flow attempts to transfer a vary large set of data, it might\
            \ fail wituh a timed out error."
      required:
      - object
      description: The properties that are applied when Salesforce is being used as
        a source.
    ScheduleExpression:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    ScheduleFrequencyType:
      type: string
      enum:
      - BYMINUTE
      - HOURLY
      - DAILY
      - WEEKLY
      - MONTHLY
      - ONCE
    ScheduleOffset:
      type: integer
      format: int64
      default: 0
      minimum: 0
      maximum: 36000
    ScheduledTriggerProperties:
      type: object
      properties:
        scheduleExpression:
          allOf:
          - $ref: '#/components/schemas/ScheduleExpression'
          description: The scheduling expression that determines the rate at which
            the schedule will run, for example `rate(5minutes)`.
        dataPullMode:
          allOf:
          - $ref: '#/components/schemas/DataPullMode'
          description: Specifies whether a scheduled flow has an incremental data
            transfer or a complete data transfer for each flow run.
        scheduleStartTime:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The time at which the scheduled flow starts. The time is formatted
            as a timestamp that follows the ISO 8601 standard, such as `2022-04-26T13:00:00-07:00`.
        scheduleEndTime:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The time at which the scheduled flow ends. The time is formatted
            as a timestamp that follows the ISO 8601 standard, such as `2022-04-27T13:00:00-07:00`.
        timezone:
          allOf:
          - $ref: '#/components/schemas/Timezone'
          description: 'Specifies the time zone used when referring to the dates and
            times of a scheduled flow, such as `America/New_York`. This time zone
            is only a descriptive label. It doesn''t affect how Amazon AppFlow interprets
            the timestamps that you specify to schedule the flow.


            If you want to schedule a flow by using times in a particular time zone,
            indicate the time zone as a UTC offset in your timestamps. For example,
            the UTC offsets for the `America/New_York` timezone are `-04:00` EDT and
            `-05:00 EST`.'
        scheduleOffset:
          allOf:
          - $ref: '#/components/schemas/ScheduleOffset'
          description: Specifies the optional offset that is added to the time interval
            for a schedule-triggered flow.
        firstExecutionFrom:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: Specifies the date range for the records to import from the
            connector in the first flow run.
        flowErrorDeactivationThreshold:
          allOf:
          - $ref: '#/components/schemas/FlowErrorDeactivationThreshold'
          description: Defines how many times a scheduled flow fails consecutively
            before Amazon AppFlow deactivates it.
      required:
      - scheduleExpression
      description: Specifies the configuration details of a schedule-triggered flow
        as defined by the user. Currently, these settings only apply to the `Scheduled`
        trigger type.
    SchedulingFrequencyTypeList:
      type: array
      items:
        $ref: '#/components/schemas/ScheduleFrequencyType'
    SecretKey:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    ServiceNowConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - CONTAINS
      - LESS_THAN
      - GREATER_THAN
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - NOT_EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    ServiceNowConnectorProfileCredentials:
      type: object
      properties:
        username:
          allOf:
          - $ref: '#/components/schemas/Username'
          description: The name of the user.
        password:
          allOf:
          - $ref: '#/components/schemas/Password'
          description: The password that corresponds to the user name.
        oAuth2Credentials:
          allOf:
          - $ref: '#/components/schemas/OAuth2Credentials'
          description: The OAuth 2.0 credentials required to authenticate the user.
      description: The connector-specific profile credentials required when using
        ServiceNow.
    ServiceNowConnectorProfileProperties:
      type: object
      properties:
        instanceUrl:
          allOf:
          - $ref: '#/components/schemas/InstanceUrl'
          description: The location of the ServiceNow resource.
      required:
      - instanceUrl
      description: The connector-specific profile properties required when using ServiceNow.
    ServiceNowMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to ServiceNow.
    ServiceNowSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the ServiceNow flow source.
      required:
      - object
      description: The properties that are applied when ServiceNow is being used as
        a source.
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The request would cause a service quota (such as the number of
        flows) to be exceeded.
    SingularConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    SingularConnectorProfileCredentials:
      type: object
      properties:
        apiKey:
          allOf:
          - $ref: '#/components/schemas/ApiKey'
          description: A unique alphanumeric identifier used to authenticate a user,
            developer, or calling program to your API.
      required:
      - apiKey
      description: The connector-specific profile credentials required when using
        Singular.
    SingularConnectorProfileProperties:
      type: object
      properties: {}
      description: The connector-specific profile properties required when using Singular.
    SingularMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Singular.
    SingularSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Singular flow source.
      required:
      - object
      description: The properties that are applied when Singular is being used as
        a source.
    SlackConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - GREATER_THAN
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    SlackConnectorProfileCredentials:
      type: object
      properties:
        clientId:
          allOf:
          - $ref: '#/components/schemas/ClientId'
          description: The identifier for the client.
        clientSecret:
          allOf:
          - $ref: '#/components/schemas/ClientSecret'
          description: The client secret used by the OAuth client to authenticate
            to the authorization server.
        accessToken:
          allOf:
          - $ref: '#/components/schemas/AccessToken'
          description: The credentials used to access protected Slack resources.
        oAuthRequest:
          allOf:
          - $ref: '#/components/schemas/ConnectorOAuthRequest'
          description: The OAuth requirement needed to request security tokens from
            the connector endpoint.
      required:
      - clientId
      - clientSecret
      description: The connector-specific profile credentials required when using
        Slack.
    SlackConnectorProfileProperties:
      type: object
      properties:
        instanceUrl:
          allOf:
          - $ref: '#/components/schemas/InstanceUrl'
          description: The location of the Slack resource.
      required:
      - instanceUrl
      description: The connector-specific profile properties required when using Slack.
    SlackMetadata:
      type: object
      properties:
        oAuthScopes:
          allOf:
          - $ref: '#/components/schemas/OAuthScopeList'
          description: The desired authorization scope for the Slack account.
      description: The connector metadata specific to Slack.
    SlackSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Slack flow source.
      required:
      - object
      description: The properties that are applied when Slack is being used as a source.
    SnowflakeConnectorProfileCredentials:
      type: object
      properties:
        username:
          allOf:
          - $ref: '#/components/schemas/Username'
          description: The name of the user.
        password:
          allOf:
          - $ref: '#/components/schemas/Password'
          description: The password that corresponds to the user name.
      required:
      - username
      - password
      description: The connector-specific profile credentials required when using
        Snowflake.
    SnowflakeConnectorProfileProperties:
      type: object
      properties:
        warehouse:
          allOf:
          - $ref: '#/components/schemas/Warehouse'
          description: The name of the Snowflake warehouse.
        stage:
          allOf:
          - $ref: '#/components/schemas/Stage'
          description: 'The name of the Amazon S3 stage that was created while setting
            up an Amazon S3 stage in the Snowflake account. This is written in the
            following format: < Database>< Schema>.'
        bucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          description: The name of the Amazon S3 bucket associated with Snowflake.
        bucketPrefix:
          allOf:
          - $ref: '#/components/schemas/BucketPrefix'
          description: The bucket path that refers to the Amazon S3 bucket associated
            with Snowflake.
        privateLinkServiceName:
          allOf:
          - $ref: '#/components/schemas/PrivateLinkServiceName'
          description: The Snowflake Private Link service name to be used for private
            data transfers.
        accountName:
          allOf:
          - $ref: '#/components/schemas/AccountName'
          description: The name of the account.
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Amazon Web Services Region of the Snowflake account.
      required:
      - warehouse
      - stage
      - bucketName
      description: The connector-specific profile properties required when using Snowflake.
    SnowflakeDestinationProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Snowflake flow destination.
        intermediateBucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          description: The intermediate bucket that Amazon AppFlow uses when moving
            data into Snowflake.
        bucketPrefix:
          allOf:
          - $ref: '#/components/schemas/BucketPrefix'
          description: The object key for the destination bucket in which Amazon AppFlow
            places the files.
        errorHandlingConfig:
          allOf:
          - $ref: '#/components/schemas/ErrorHandlingConfig'
          description: The settings that determine how Amazon AppFlow handles an error
            when placing data in the Snowflake destination. For example, this setting
            would determine if the flow should fail after one insertion error, or
            continue and attempt to insert every record regardless of the initial
            failure. `ErrorHandlingConfig` is a part of the destination connector
            details.
      required:
      - object
      - intermediateBucketName
      description: The properties that are applied when Snowflake is being used as
        a destination.
    SnowflakeMetadata:
      type: object
      properties:
        supportedRegions:
          allOf:
          - $ref: '#/components/schemas/RegionList'
          description: Specifies the supported Amazon Web Services Regions when using
            Snowflake.
      description: The connector metadata specific to Snowflake.
    SourceConnectorProperties:
      type: object
      properties:
        Amplitude:
          allOf:
          - $ref: '#/components/schemas/AmplitudeSourceProperties'
          description: Specifies the information that is required for querying Amplitude.
        Datadog:
          allOf:
          - $ref: '#/components/schemas/DatadogSourceProperties'
          description: Specifies the information that is required for querying Datadog.
        Dynatrace:
          allOf:
          - $ref: '#/components/schemas/DynatraceSourceProperties'
          description: Specifies the information that is required for querying Dynatrace.
        GoogleAnalytics:
          allOf:
          - $ref: '#/components/schemas/GoogleAnalyticsSourceProperties'
          description: Specifies the information that is required for querying Google
            Analytics.
        InforNexus:
          allOf:
          - $ref: '#/components/schemas/InforNexusSourceProperties'
          description: Specifies the information that is required for querying Infor
            Nexus.
        Marketo:
          allOf:
          - $ref: '#/components/schemas/MarketoSourceProperties'
          description: Specifies the information that is required for querying Marketo.
        S3:
          allOf:
          - $ref: '#/components/schemas/S3SourceProperties'
          description: Specifies the information that is required for querying Amazon
            S3.
        Salesforce:
          allOf:
          - $ref: '#/components/schemas/SalesforceSourceProperties'
          description: Specifies the information that is required for querying Salesforce.
        ServiceNow:
          allOf:
          - $ref: '#/components/schemas/ServiceNowSourceProperties'
          description: Specifies the information that is required for querying ServiceNow.
        Singular:
          allOf:
          - $ref: '#/components/schemas/SingularSourceProperties'
          description: Specifies the information that is required for querying Singular.
        Slack:
          allOf:
          - $ref: '#/components/schemas/SlackSourceProperties'
          description: Specifies the information that is required for querying Slack.
        Trendmicro:
          allOf:
          - $ref: '#/components/schemas/TrendmicroSourceProperties'
          description: Specifies the information that is required for querying Trend
            Micro.
        Veeva:
          allOf:
          - $ref: '#/components/schemas/VeevaSourceProperties'
          description: Specifies the information that is required for querying Veeva.
        Zendesk:
          allOf:
          - $ref: '#/components/schemas/ZendeskSourceProperties'
          description: Specifies the information that is required for querying Zendesk.
        SAPOData:
          $ref: '#/components/schemas/SAPODataSourceProperties'
        CustomConnector:
          $ref: '#/components/schemas/CustomConnectorSourceProperties'
        Pardot:
          allOf:
          - $ref: '#/components/schemas/PardotSourceProperties'
          description: Specifies the information that is required for querying Salesforce
            Pardot.
      description: Specifies the information that is required to query a particular
        connector.
    SourceFieldProperties:
      type: object
      properties:
        isRetrievable:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the field can be returned in a search result.
        isQueryable:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates if the field can be queried.
        isTimestampFieldForIncrementalQueries:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates if this timestamp field can be used for incremental
            queries.
      description: The properties that can be applied to a field when the connector
        is being used as a source.
    SourceFields:
      type: array
      items:
        $ref: '#/components/schemas/String'
    SourceFlowConfig:
      type: object
      properties:
        connectorType:
          allOf:
          - $ref: '#/components/schemas/ConnectorType'
          description: The type of connector, such as Salesforce, Amplitude, and so
            on.
        apiVersion:
          allOf:
          - $ref: '#/components/schemas/ApiVersion'
          description: The API version of the connector when it's used as a source
            in the flow.
        connectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: The name of the connector profile. This name must be unique
            for each connector profile in the Amazon Web Services account.
        sourceConnectorProperties:
          allOf:
          - $ref: '#/components/schemas/SourceConnectorProperties'
          description: Specifies the information that is required to query a particular
            source connector.
        incrementalPullConfig:
          allOf:
          - $ref: '#/components/schemas/IncrementalPullConfig'
          description: Defines the configuration for a scheduled incremental data
            pull. If a valid configuration is provided, the fields specified in the
            configuration are used when querying for the incremental data pull.
      required:
      - connectorType
      - sourceConnectorProperties
      description: Contains information about the configuration of the source connector
        used in the flow.
    Stage:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    StartFlowRequest:
      type: object
      properties:
        flowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The specified name of the flow. Spaces are not allowed. Use
            underscores (_) or hyphens (-) only.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'The `clientToken` parameter is an idempotency token. It ensures
            that your `StartFlow` request completes only once. You choose the value
            to pass. For example, if you don''t receive a response from your request,
            you can safely retry the request with the same `clientToken` parameter
            value.


            If you omit a `clientToken` value, the Amazon Web Services SDK that you
            are using inserts a value for you. This way, the SDK can safely retry
            requests multiple times after a network error. You must provide your own
            value for other use cases.


            If you specify input parameters that differ from your first request, an
            error occurs for flows that run on a schedule or based on an event. However,
            the error doesn''t occur for flows that run on demand. You set the conditions
            that initiate your flow for the `triggerConfig` parameter.


            If you use a different value for `clientToken`, Amazon AppFlow considers
            it a new call to `StartFlow`. The token is active for 8 hours.'
      required:
      - flowName
    StartFlowResponse:
      type: object
      properties:
        flowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The flow's Amazon Resource Name (ARN).
        flowStatus:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: Indicates the current status of the flow.
        executionId:
          allOf:
          - $ref: '#/components/schemas/ExecutionId'
          description: Returns the internal execution ID of an on-demand flow when
            the flow is started. For scheduled or event-triggered flows, this value
            is null.
    StopFlowRequest:
      type: object
      properties:
        flowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The specified name of the flow. Spaces are not allowed. Use
            underscores (_) or hyphens (-) only.
      required:
      - flowName
    StopFlowResponse:
      type: object
      properties:
        flowArn:
          allOf:
          - $ref: '#/components/schemas/FlowArn'
          description: The flow's Amazon Resource Name (ARN).
        flowStatus:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: Indicates the current status of the flow.
    String:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 2048
    SuccessResponseHandlingConfig:
      type: object
      properties:
        bucketPrefix:
          allOf:
          - $ref: '#/components/schemas/BucketPrefix'
          description: The Amazon S3 bucket prefix.
        bucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          description: The name of the Amazon S3 bucket.
      description: 'Determines how Amazon AppFlow handles the success response that
        it gets from the connector after placing data.


        For example, this setting would determine where to write the response from
        the destination connector upon a successful insert operation.'
    SupportedApiVersion:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    SupportedApiVersionList:
      type: array
      items:
        $ref: '#/components/schemas/SupportedApiVersion'
    SupportedDataTransferApis:
      type: array
      items:
        $ref: '#/components/schemas/DataTransferApi'
    SupportedDataTransferType:
      type: string
      enum:
      - RECORD
      - FILE
    SupportedDataTransferTypeList:
      type: array
      items:
        $ref: '#/components/schemas/SupportedDataTransferType'
    SupportedFieldTypeDetails:
      type: object
      properties:
        v1:
          allOf:
          - $ref: '#/components/schemas/FieldTypeDetails'
          description: The initial supported version for `fieldType`. If this is later
            changed to a different version, v2 will be introduced.
      required:
      - v1
      description: Contains details regarding all the supported `FieldTypes` and their
        corresponding `filterOperators` and `supportedValues`.
    SupportedOperatorList:
      type: array
      items:
        $ref: '#/components/schemas/Operators'
    SupportedValueList:
      type: array
      items:
        $ref: '#/components/schemas/Value'
    SupportedWriteOperationList:
      type: array
      items:
        $ref: '#/components/schemas/WriteOperationType'
    TagKey:
      type: string
      pattern: ^(?!aws:)[a-zA-Z+-=._:/]+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            tag.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags used to organize, track, or control access for your
            flow.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      pattern: ^[\s\w+-=\.:/@]*$
      minLength: 0
      maxLength: 256
    Task:
      type: object
      properties:
        sourceFields:
          allOf:
          - $ref: '#/components/schemas/SourceFields'
          description: The source fields to which a particular task is applied.
        connectorOperator:
          allOf:
          - $ref: '#/components/schemas/ConnectorOperator'
          description: The operation to be performed on the provided source fields.
        destinationField:
          allOf:
          - $ref: '#/components/schemas/DestinationField'
          description: A field in a destination connector, or a field value against
            which Amazon AppFlow validates a source field.
        taskType:
          allOf:
          - $ref: '#/components/schemas/TaskType'
          description: Specifies the particular task implementation that Amazon AppFlow
            performs.
        taskProperties:
          allOf:
          - $ref: '#/components/schemas/TaskPropertiesMap'
          description: A map used to store task-related information. The execution
            service looks for particular information based on the `TaskType`.
      required:
      - sourceFields
      - taskType
      description: A class for modeling different type of tasks. Task implementation
        varies based on the `TaskType`.
    TaskPropertiesMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Property'
    TaskType:
      type: string
      enum:
      - Arithmetic
      - Filter
      - Map
      - Map_all
      - Mask
      - Merge
      - Passthrough
      - Truncate
      - Validate
      - Partition
    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: API calls have exceeded the maximum allowed API request rate per
        account and per Region.
    Timezone:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    TokenUrl:
      type: string
      pattern: ^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]$
      minLength: 0
      maxLength: 256
    TokenUrlCustomProperties:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CustomPropertyValue'
    TokenUrlList:
      type: array
      items:
        $ref: '#/components/schemas/TokenUrl'
    TrendmicroConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    TrendmicroConnectorProfileCredentials:
      type: object
      properties:
        apiSecretKey:
          allOf:
          - $ref: '#/components/schemas/ApiSecretKey'
          description: The Secret Access Key portion of the credentials.
      required:
      - apiSecretKey
      description: The connector-specific profile credentials required when using
        Trend Micro.
    TrendmicroConnectorProfileProperties:
      type: object
      properties: {}
      description: The connector-specific profile properties required when using Trend
        Micro.
    TrendmicroMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Trend Micro.
    TrendmicroSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Trend Micro flow source.
      required:
      - object
      description: The properties that are applied when using Trend Micro as a flow
        source.
    TriggerConfig:
      type: object
      properties:
        triggerType:
          allOf:
          - $ref: '#/components/schemas/TriggerType'
          description: Specifies the type of flow trigger. This can be `OnDemand`,
            `Scheduled`, or `Event`.
        triggerProperties:
          allOf:
          - $ref: '#/components/schemas/TriggerProperties'
          description: Specifies the configuration details of a schedule-triggered
            flow as defined by the user. Currently, these settings only apply to the
            `Scheduled` trigger type.
      required:
      - triggerType
      description: The trigger settings that determine how and when Amazon AppFlow
        runs the specified flow.
    TriggerProperties:
      type: object
      properties:
        Scheduled:
          allOf:
          - $ref: '#/components/schemas/ScheduledTriggerProperties'
          description: Specifies the configuration details of a schedule-triggered
            flow as defined by the user.
      description: Specifies the configuration details that control the trigger for
        a flow. Currently, these settings only apply to the `Scheduled` trigger type.
    TriggerType:
      type: string
      enum:
      - Scheduled
      - Event
      - OnDemand
    TriggerTypeList:
      type: array
      items:
        $ref: '#/components/schemas/TriggerType'
    UnregisterConnectorRequest:
      type: object
      properties:
        connectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: The label of the connector. The label is unique for each `ConnectorRegistration`
            in your Amazon Web Services account.
        forceDelete:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether Amazon AppFlow should unregister the connector,
            even if it is currently in use in one or more connector profiles. The
            default value is false.
      required:
      - connectorLabel
    UnregisterConnectorResponse:
      type: object
      properties: {}
    UnsupportedOperationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The requested operation is not supported for the current flow.
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The Amazon Resource Name (ARN) of the flow that you want to
            untag.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The tag keys associated with the tag that you want to remove
            from your flow.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateConnectorProfileRequest:
      type: object
      properties:
        connectorProfileName:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileName'
          description: The name of the connector profile and is unique for each `ConnectorProfile`
            in the Amazon Web Services account.
        connectionMode:
          allOf:
          - $ref: '#/components/schemas/ConnectionMode'
          description: Indicates the connection mode and if it is public or private.
        connectorProfileConfig:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileConfig'
          description: Defines the connector-specific profile configuration and credentials.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'The `clientToken` parameter is an idempotency token. It ensures
            that your `UpdateConnectorProfile` request completes only once. You choose
            the value to pass. For example, if you don''t receive a response from
            your request, you can safely retry the request with the same `clientToken`
            parameter value.


            If you omit a `clientToken` value, the Amazon Web Services SDK that you
            are using inserts a value for you. This way, the SDK can safely retry
            requests multiple times after a network error. You must provide your own
            value for other use cases.


            If you specify input parameters that differ from your first request, an
            error occurs. If you use a different value for `clientToken`, Amazon AppFlow
            considers it a new call to `UpdateConnectorProfile`. The token is active
            for 8 hours.'
      required:
      - connectorProfileName
      - connectionMode
      - connectorProfileConfig
    UpdateConnectorProfileResponse:
      type: object
      properties:
        connectorProfileArn:
          allOf:
          - $ref: '#/components/schemas/ConnectorProfileArn'
          description: The Amazon Resource Name (ARN) of the connector profile.
    UpdateConnectorRegistrationRequest:
      type: object
      properties:
        connectorLabel:
          allOf:
          - $ref: '#/components/schemas/ConnectorLabel'
          description: The name of the connector. The name is unique for each connector
            registration in your AWS account.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description about the update that you're applying to the
            connector.
        connectorProvisioningConfig:
          $ref: '#/components/schemas/ConnectorProvisioningConfig'
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'The `clientToken` parameter is an idempotency token. It ensures
            that your `UpdateConnectorRegistration` request completes only once. You
            choose the value to pass. For example, if you don''t receive a response
            from your request, you can safely retry the request with the same `clientToken`
            parameter value.


            If you omit a `clientToken` value, the Amazon Web Services SDK that you
            are using inserts a value for you. This way, the SDK can safely retry
            requests multiple times after a network error. You must provide your own
            value for other use cases.


            If you specify input parameters that differ from your first request, an
            error occurs. If you use a different value for `clientToken`, Amazon AppFlow
            considers it a new call to `UpdateConnectorRegistration`. The token is
            active for 8 hours.'
      required:
      - connectorLabel
    UpdateConnectorRegistrationResponse:
      type: object
      properties:
        connectorArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The ARN of the connector being updated.
    UpdateFlowRequest:
      type: object
      properties:
        flowName:
          allOf:
          - $ref: '#/components/schemas/FlowName'
          description: The specified name of the flow. Spaces are not allowed. Use
            underscores (_) or hyphens (-) only.
        description:
          allOf:
          - $ref: '#/components/schemas/FlowDescription'
          description: A description of the flow.
        triggerConfig:
          allOf:
          - $ref: '#/components/schemas/TriggerConfig'
          description: The trigger settings that determine how and when the flow runs.
        sourceFlowConfig:
          $ref: '#/components/schemas/SourceFlowConfig'
        destinationFlowConfigList:
          allOf:
          - $ref: '#/components/schemas/DestinationFlowConfigList'
          description: The configuration that controls how Amazon AppFlow transfers
            data to the destination connector.
        tasks:
          allOf:
          - $ref: '#/components/schemas/Tasks'
          description: A list of tasks that Amazon AppFlow performs while transferring
            the data in the flow run.
        metadataCatalogConfig:
          allOf:
          - $ref: '#/components/schemas/MetadataCatalogConfig'
          description: Specifies the configuration that Amazon AppFlow uses when it
            catalogs the data that's transferred by the associated flow. When Amazon
            AppFlow catalogs the data from a flow, it stores metadata in a data catalog.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: 'The `clientToken` parameter is an idempotency token. It ensures
            that your `UpdateFlow` request completes only once. You choose the value
            to pass. For example, if you don''t receive a response from your request,
            you can safely retry the request with the same `clientToken` parameter
            value.


            If you omit a `clientToken` value, the Amazon Web Services SDK that you
            are using inserts a value for you. This way, the SDK can safely retry
            requests multiple times after a network error. You must provide your own
            value for other use cases.


            If you specify input parameters that differ from your first request, an
            error occurs. If you use a different value for `clientToken`, Amazon AppFlow
            considers it a new call to `UpdateFlow`. The token is active for 8 hours.'
      required:
      - flowName
      - triggerConfig
      - sourceFlowConfig
      - destinationFlowConfigList
      - tasks
    UpdateFlowResponse:
      type: object
      properties:
        flowStatus:
          allOf:
          - $ref: '#/components/schemas/FlowStatus'
          description: Indicates the current status of the flow.
    UpdatedBy:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 256
    UpsolverBucketName:
      type: string
      pattern: ^(upsolver-appflow)\S*$
      minLength: 16
      maxLength: 63
    UpsolverDestinationProperties:
      type: object
      properties:
        bucketName:
          allOf:
          - $ref: '#/components/schemas/UpsolverBucketName'
          description: The Upsolver Amazon S3 bucket name in which Amazon AppFlow
            places the transferred data.
        bucketPrefix:
          allOf:
          - $ref: '#/components/schemas/BucketPrefix'
          description: The object key for the destination Upsolver Amazon S3 bucket
            in which Amazon AppFlow places the files.
        s3OutputFormatConfig:
          allOf:
          - $ref: '#/components/schemas/UpsolverS3OutputFormatConfig'
          description: The configuration that determines how data is formatted when
            Upsolver is used as the flow destination.
      required:
      - bucketName
      - s3OutputFormatConfig
      description: The properties that are applied when Upsolver is used as a destination.
    UpsolverMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Upsolver.
    UpsolverS3OutputFormatConfig:
      type: object
      properties:
        fileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          description: Indicates the file type that Amazon AppFlow places in the Upsolver
            Amazon S3 bucket.
        prefixConfig:
          $ref: '#/components/schemas/PrefixConfig'
        aggregationConfig:
          $ref: '#/components/schemas/AggregationConfig'
      required:
      - prefixConfig
      description: The configuration that determines how Amazon AppFlow formats the
        flow output data when Upsolver is used as the destination.
    Username:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The request has invalid or missing parameters.
    Value:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 128
    VeevaConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - LESS_THAN
      - GREATER_THAN
      - CONTAINS
      - BETWEEN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - EQUAL_TO
      - NOT_EQUAL_TO
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    VeevaConnectorProfileCredentials:
      type: object
      properties:
        username:
          allOf:
          - $ref: '#/components/schemas/Username'
          description: The name of the user.
        password:
          allOf:
          - $ref: '#/components/schemas/Password'
          description: The password that corresponds to the user name.
      required:
      - username
      - password
      description: The connector-specific profile credentials required when using
        Veeva.
    VeevaConnectorProfileProperties:
      type: object
      properties:
        instanceUrl:
          allOf:
          - $ref: '#/components/schemas/InstanceUrl'
          description: The location of the Veeva resource.
      required:
      - instanceUrl
      description: The connector-specific profile properties required when using Veeva.
    VeevaMetadata:
      type: object
      properties: {}
      description: The connector metadata specific to Veeva.
    VeevaSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Veeva flow source.
        documentType:
          allOf:
          - $ref: '#/components/schemas/DocumentType'
          description: The document type specified in the Veeva document extract flow.
        includeSourceFiles:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Boolean value to include source files in Veeva document extract
            flow.
        includeRenditions:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Boolean value to include file renditions in Veeva document
            extract flow.
        includeAllVersions:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Boolean value to include All Versions of files in Veeva document
            extract flow.
      required:
      - object
      description: The properties that are applied when using Veeva as a flow source.
    Warehouse:
      type: string
      pattern: ^[\s\w/!@#+=.-]*$
      minLength: 0
      maxLength: 512
    WorkgroupName:
      type: string
      pattern: ^\S+$
      minLength: 0
      maxLength: 512
    WriteOperationType:
      type: string
      enum:
      - INSERT
      - UPSERT
      - UPDATE
      - DELETE
      description: "<p> The possible write operations in the destination connector.\
        \ When this value is not\n      provided, this defaults to the <code>INSERT</code>\
        \ operation. </p>"
    ZendeskConnectorOperator:
      type: string
      enum:
      - PROJECTION
      - GREATER_THAN
      - ADDITION
      - MULTIPLICATION
      - DIVISION
      - SUBTRACTION
      - MASK_ALL
      - MASK_FIRST_N
      - MASK_LAST_N
      - VALIDATE_NON_NULL
      - VALIDATE_NON_ZERO
      - VALIDATE_NON_NEGATIVE
      - VALIDATE_NUMERIC
      - NO_OP
    ZendeskConnectorProfileCredentials:
      type: object
      properties:
        clientId:
          allOf:
          - $ref: '#/components/schemas/ClientId'
          description: The identifier for the desired client.
        clientSecret:
          allOf:
          - $ref: '#/components/schemas/ClientSecret'
          description: The client secret used by the OAuth client to authenticate
            to the authorization server.
        accessToken:
          allOf:
          - $ref: '#/components/schemas/AccessToken'
          description: The credentials used to access protected Zendesk resources.
        oAuthRequest:
          allOf:
          - $ref: '#/components/schemas/ConnectorOAuthRequest'
          description: The OAuth requirement needed to request security tokens from
            the connector endpoint.
      required:
      - clientId
      - clientSecret
      description: The connector-specific profile credentials required when using
        Zendesk.
    ZendeskConnectorProfileProperties:
      type: object
      properties:
        instanceUrl:
          allOf:
          - $ref: '#/components/schemas/InstanceUrl'
          description: The location of the Zendesk resource.
      required:
      - instanceUrl
      description: The connector-specific profile properties required when using Zendesk.
    ZendeskDestinationProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Zendesk flow destination.
        idFieldNames:
          $ref: '#/components/schemas/IdFieldNameList'
        errorHandlingConfig:
          $ref: '#/components/schemas/ErrorHandlingConfig'
        writeOperationType:
          $ref: '#/components/schemas/WriteOperationType'
      required:
      - object
      description: The properties that are applied when Zendesk is used as a destination.
    ZendeskMetadata:
      type: object
      properties:
        oAuthScopes:
          allOf:
          - $ref: '#/components/schemas/OAuthScopeList'
          description: The desired authorization scope for the Zendesk account.
      description: The connector metadata specific to Zendesk.
    ZendeskSourceProperties:
      type: object
      properties:
        object:
          allOf:
          - $ref: '#/components/schemas/Object'
          description: The object specified in the Zendesk flow source.
      required:
      - object
      description: The properties that are applied when using Zendesk as a flow source.
