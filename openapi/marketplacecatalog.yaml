openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: marketplace_catalog
  x-aws-serviceName: marketplacecatalog
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-09-17'
  title: AWS Marketplace Catalog Service
  description: |-
    Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace.

    You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.
servers:
- description: The AWS Marketplace Catalog Service regional endpoint
  url: https://catalog.marketplace.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /BatchDescribeEntities:
    post:
      operationId: BatchDescribeEntities
      description: |-
        Returns metadata and content for multiple entities. This is the Batch version of the `DescribeEntity` API and uses the same IAM permission action as `DescribeEntity` API.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                EntityRequestList:
                  $ref: '#/components/schemas/EntityRequestList'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CancelChangeSet:
    patch:
      operationId: CancelChangeSet
      description: |-
        Used to cancel an open change request. Must be sent before the status of the request changes to `APPLYING`, the final stage of completing your change request. You can describe a change during the 60-day request history retention period for API calls.
      parameters:
      - name: catalog
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Catalog'
      - name: changeSetId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResourceId'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '423':
          description: |-
            The resource is currently in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeleteResourcePolicy:
    delete:
      operationId: DeleteResourcePolicy
      description: |-
        Deletes a resource-based policy on an entity that is identified by its resource ARN.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResourceARN'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DescribeChangeSet:
    get:
      operationId: DescribeChangeSet
      description: |-
        Provides information about a given change set.
      parameters:
      - name: catalog
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Catalog'
      - name: changeSetId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResourceId'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DescribeEntity:
    get:
      operationId: DescribeEntity
      description: |-
        Returns the metadata and content of the entity.
      parameters:
      - name: catalog
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Catalog'
      - name: entityId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResourceId'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '415':
          description: |-
            Currently, the specified resource is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotSupportedException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetResourcePolicy:
    get:
      operationId: GetResourcePolicy
      description: |-
        Gets a resource-based policy of an entity that is identified by its resource ARN.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResourceARN'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListChangeSets:
    post:
      operationId: ListChangeSets
      description: |-
        Returns the list of change sets owned by the account being used to make the call. You can filter this list by providing any combination of `entityId`, `ChangeSetName`, and status. If you provide more than one filter, the API operation applies a logical AND between the filters.

        You can describe a change during the 60-day request history retention period for API calls.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Catalog:
                  $ref: '#/components/schemas/Catalog'
                FilterList:
                  $ref: '#/components/schemas/FilterList'
                Sort:
                  $ref: '#/components/schemas/Sort'
                MaxResults:
                  $ref: '#/components/schemas/ListChangeSetsMaxResultInteger'
                NextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListEntities:
    post:
      operationId: ListEntities
      description: |-
        Provides the list of entities of a given type.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Catalog:
                  $ref: '#/components/schemas/Catalog'
                EntityType:
                  $ref: '#/components/schemas/EntityType'
                FilterList:
                  $ref: '#/components/schemas/FilterList'
                Sort:
                  $ref: '#/components/schemas/Sort'
                NextToken:
                  $ref: '#/components/schemas/NextToken'
                MaxResults:
                  $ref: '#/components/schemas/ListEntitiesMaxResultInteger'
                OwnershipType:
                  $ref: '#/components/schemas/OwnershipType'
                EntityTypeFilters:
                  $ref: '#/components/schemas/EntityTypeFilters'
                EntityTypeSort:
                  $ref: '#/components/schemas/EntityTypeSort'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: |-
        Lists all tags that have been added to a resource (either an [entity](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#catalog-api-entities) or [change set](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#working-with-change-sets)).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ResourceArn:
                  $ref: '#/components/schemas/ResourceARN'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /PutResourcePolicy:
    post:
      operationId: PutResourcePolicy
      description: |-
        Attaches a resource-based policy to an entity. Examples of an entity include: `AmiProduct` and `ContainerProduct`.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ResourceArn:
                  $ref: '#/components/schemas/ResourceARN'
                Policy:
                  $ref: '#/components/schemas/ResourcePolicyJson'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /StartChangeSet:
    post:
      operationId: StartChangeSet
      description: |-
        Allows you to request changes for your entities. Within a single `ChangeSet`, you can't start the same change type against the same entity multiple times. Additionally, when a `ChangeSet` is running, all the entities targeted by the different changes are locked until the change set has completed (either succeeded, cancelled, or failed). If you try to start a change set containing a change against an entity that is already locked, you will receive a `ResourceInUseException` error.

        For example, you can't start the `ChangeSet` described in the [example](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/API_StartChangeSet.html#API_StartChangeSet_Examples) later in this topic because it contains two changes to run the same change type (`AddRevisions`) against the same entity (`entity-id@1`).

        For more information about working with change sets, see [ Working with change sets](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#working-with-change-sets). For information about change types for single-AMI products, see [Working with single-AMI products](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products). Also, for more information about change types available for container-based products, see [Working with container products](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Catalog:
                  $ref: '#/components/schemas/Catalog'
                ChangeSet:
                  $ref: '#/components/schemas/RequestedChangeList'
                ChangeSetName:
                  $ref: '#/components/schemas/ChangeSetName'
                ClientRequestToken:
                  $ref: '#/components/schemas/ClientRequestToken'
                ChangeSetTags:
                  $ref: '#/components/schemas/TagList'
                Intent:
                  $ref: '#/components/schemas/Intent'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '423':
          description: |-
            The resource is currently in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The maximum number of open requests per account has been exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /TagResource:
    post:
      operationId: TagResource
      description: |-
        Tags a resource (either an [entity](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#catalog-api-entities) or [change set](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#working-with-change-sets)).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ResourceArn:
                  $ref: '#/components/schemas/ResourceARN'
                Tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UntagResource:
    post:
      operationId: UntagResource
      description: |-
        Removes a tag or list of tags from a resource (either an [entity](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#catalog-api-entities) or [change set](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#working-with-change-sets)).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ResourceArn:
                  $ref: '#/components/schemas/ResourceARN'
                TagKeys:
                  $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.

            HTTP status code: 403
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            There was an internal service exception.

            HTTP status code: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource wasn't found.

            HTTP status code: 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Too many requests.

            HTTP status code: 429
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '422':
          description: |-
            An error occurred during validation.

            HTTP status code: 422
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    ARN:
      type: string
      pattern: ^[a-zA-Z0-9:*/-]+$
      minLength: 1
      maxLength: 2048
    AccessDeniedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionMessageContent'
      description: 'Access is denied.


        HTTP status code: 403'
    AmiProductEntityIdFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/AmiProductEntityIdFilterValueList'
          description: A string array of unique entity id values to be filtered on.
      description: Object that allows filtering on entity id of an AMI product.
    AmiProductEntityIdFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/AmiProductEntityIdString'
    AmiProductEntityIdString:
      type: string
      pattern: ^[a-zA-Z0-9][.a-zA-Z0-9/-]+[a-zA-Z0-9]$
      minLength: 1
      maxLength: 255
    AmiProductFilters:
      type: object
      properties:
        EntityId:
          allOf:
          - $ref: '#/components/schemas/AmiProductEntityIdFilter'
          description: Unique identifier for the AMI product.
        LastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/AmiProductLastModifiedDateFilter'
          description: The last date on which the AMI product was modified.
        ProductTitle:
          allOf:
          - $ref: '#/components/schemas/AmiProductTitleFilter'
          description: The title of the AMI product.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/AmiProductVisibilityFilter'
          description: The visibility of the AMI product.
      description: Object containing all the filter fields for AMI products. Client
        can add only one wildcard filter and a maximum of 8 filters in a single `ListEntities`
        request.
    AmiProductLastModifiedDateFilter:
      type: object
      properties:
        DateRange:
          allOf:
          - $ref: '#/components/schemas/AmiProductLastModifiedDateFilterDateRange'
          description: Dates between which the AMI product was last modified.
      description: Object that allows filtering based on the last modified date of
        AMI products.
    AmiProductLastModifiedDateFilterDateRange:
      type: object
      properties:
        AfterValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Date after which the AMI product was last modified.
        BeforeValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Date before which the AMI product was last modified.
      description: Object that contains date range of the last modified date to be
        filtered on. You can optionally provide a `BeforeValue` and/or `AfterValue`.
        Both are inclusive.
    AmiProductSort:
      type: object
      properties:
        SortBy:
          allOf:
          - $ref: '#/components/schemas/AmiProductSortBy'
          description: Field to sort the AMI products by.
        SortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The sorting order. Can be `ASCENDING` or `DESCENDING`. The
            default value is `DESCENDING`.
      description: Objects that allows sorting on AMI products based on certain fields
        and sorting order.
    AmiProductSortBy:
      type: string
      enum:
      - EntityId
      - LastModifiedDate
      - ProductTitle
      - Visibility
    AmiProductSummary:
      type: object
      properties:
        ProductTitle:
          allOf:
          - $ref: '#/components/schemas/AmiProductTitleString'
          description: The title of the AMI product.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/AmiProductVisibilityString'
          description: The lifecycle of the AMI product.
      description: Object that contains summarized information about an AMI product.
    AmiProductTitleFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/AmiProductTitleFilterValueList'
          description: A string array of unique product title values to be filtered
            on.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/AmiProductTitleString'
          description: A string that will be the `wildCard` input for product tile
            filter. It matches the provided value as a substring in the actual value.
      description: Object that allows filtering on product title.
    AmiProductTitleFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/AmiProductTitleString'
    AmiProductTitleString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    AmiProductVisibilityFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/AmiProductVisibilityFilterValueList'
          description: A string array of unique visibility values to be filtered on.
      description: Object that allows filtering on the visibility of the product in
        the AWS Marketplace.
    AmiProductVisibilityFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/AmiProductVisibilityString'
    AmiProductVisibilityString:
      type: string
      enum:
      - Limited
      - Public
      - Restricted
      - Draft
    BatchDescribeEntitiesRequest:
      type: object
      properties:
        EntityRequestList:
          allOf:
          - $ref: '#/components/schemas/EntityRequestList'
          description: List of entity IDs and the catalogs the entities are present
            in.
      required:
      - EntityRequestList
    BatchDescribeEntitiesResponse:
      type: object
      properties:
        EntityDetails:
          allOf:
          - $ref: '#/components/schemas/EntityDetails'
          description: Details about each entity.
        Errors:
          allOf:
          - $ref: '#/components/schemas/Errors'
          description: A map of errors returned, with `EntityId` as the key and `errorDetail`
            as the value.
    BatchDescribeErrorCodeString:
      type: string
      pattern: ^[a-zA-Z_]+$
      minLength: 1
      maxLength: 72
    BatchDescribeErrorDetail:
      type: object
      properties:
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/BatchDescribeErrorCodeString'
          description: The error code returned.
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/BatchDescribeErrorMessageContent'
          description: The error message returned.
      description: An object that contains an error code and error message.
    BatchDescribeErrorMessageContent:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 2048
    CancelChangeSetRequest:
      type: object
      properties:
        Catalog:
          allOf:
          - $ref: '#/components/schemas/Catalog'
          description: 'Required. The catalog related to the request. Fixed value:
            `AWSMarketplace`.'
        ChangeSetId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: Required. The unique identifier of the `StartChangeSet` request
            that you want to cancel.
      required:
      - Catalog
      - ChangeSetId
    CancelChangeSetResponse:
      type: object
      properties:
        ChangeSetId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The unique identifier for the change set referenced in this
            request.
        ChangeSetArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The ARN associated with the change set referenced in this request.
    Catalog:
      type: string
      pattern: ^[a-zA-Z]+$
      minLength: 1
      maxLength: 64
    Change:
      type: object
      properties:
        ChangeType:
          allOf:
          - $ref: '#/components/schemas/ChangeType'
          description: Change types are single string values that describe your intention
            for the change. Each change type is unique for each `EntityType` provided
            in the change's scope. For more information about change types available
            for single-AMI products, see [Working with single-AMI products](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products).
            Also, for more information about change types available for container-based
            products, see [Working with container products](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products).
        Entity:
          allOf:
          - $ref: '#/components/schemas/Entity'
          description: The entity to be changed.
        EntityTags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: The tags associated with the change.
        Details:
          allOf:
          - $ref: '#/components/schemas/Json'
          description: This object contains details specific to the change type of
            the requested change. For more information about change types available
            for single-AMI products, see [Working with single-AMI products](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products).
            Also, for more information about change types available for container-based
            products, see [Working with container products](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products).
        DetailsDocument:
          allOf:
          - $ref: '#/components/schemas/JsonDocumentType'
          description: Alternative field that accepts a JSON value instead of a string
            for `ChangeType` details. You can use either `Details` or `DetailsDocument`,
            but not both.
        ChangeName:
          allOf:
          - $ref: '#/components/schemas/ChangeName'
          description: Optional name for the change.
      required:
      - ChangeType
      - Entity
      description: An object that contains the `ChangeType`, `Details`, and `Entity`.
    ChangeName:
      type: string
      pattern: ^[a-zA-Z]$
      minLength: 1
      maxLength: 72
    ChangeSetDescription:
      type: array
      items:
        $ref: '#/components/schemas/ChangeSummary'
    ChangeSetName:
      type: string
      pattern: ^[\w\s+=.:@-]+$
      minLength: 1
      maxLength: 100
    ChangeSetSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ChangeSetSummaryListItem'
    ChangeSetSummaryListItem:
      type: object
      properties:
        ChangeSetId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The unique identifier for a change set.
        ChangeSetArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The ARN associated with the unique identifier for the change
            set referenced in this request.
        ChangeSetName:
          allOf:
          - $ref: '#/components/schemas/ChangeSetName'
          description: The non-unique name for the change set.
        StartTime:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The time, in ISO 8601 format (2018-02-27T13:45:22Z), when the
            change set was started.
        EndTime:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The time, in ISO 8601 format (2018-02-27T13:45:22Z), when the
            change set was finished.
        Status:
          allOf:
          - $ref: '#/components/schemas/ChangeStatus'
          description: The current status of the change set.
        EntityIdList:
          allOf:
          - $ref: '#/components/schemas/ResourceIdList'
          description: This object is a list of entity IDs (string) that are a part
            of a change set. The entity ID list is a maximum of 20 entities. It must
            contain at least one entity.
        FailureCode:
          allOf:
          - $ref: '#/components/schemas/FailureCode'
          description: Returned if the change set is in `FAILED` status. Can be either
            `CLIENT_ERROR`, which means that there are issues with the request (see
            the `ErrorDetailList` of `DescribeChangeSet`), or `SERVER_FAULT`, which
            means that there is a problem in the system, and you should retry your
            request.
      description: A summary of a change set returned in a list of change sets when
        the `ListChangeSets` action is called.
    ChangeStatus:
      type: string
      enum:
      - PREPARING
      - APPLYING
      - SUCCEEDED
      - CANCELLED
      - FAILED
    ChangeSummary:
      type: object
      properties:
        ChangeType:
          allOf:
          - $ref: '#/components/schemas/ChangeType'
          description: The type of the change.
        Entity:
          allOf:
          - $ref: '#/components/schemas/Entity'
          description: The entity to be changed.
        Details:
          allOf:
          - $ref: '#/components/schemas/Json'
          description: This object contains details specific to the change type of
            the requested change.
        DetailsDocument:
          allOf:
          - $ref: '#/components/schemas/JsonDocumentType'
          description: The JSON value of the details specific to the change type of
            the requested change.
        ErrorDetailList:
          allOf:
          - $ref: '#/components/schemas/ErrorDetailList'
          description: An array of `ErrorDetail` objects associated with the change.
        ChangeName:
          allOf:
          - $ref: '#/components/schemas/ChangeName'
          description: Optional name for the change.
      description: This object is a container for common summary information about
        the change. The summary doesn't contain the whole change structure.
    ChangeType:
      type: string
      pattern: ^[A-Z][\w]*$
      minLength: 1
      maxLength: 255
    ClientRequestToken:
      type: string
      pattern: ^[!-~]+$
      minLength: 1
      maxLength: 64
    ContainerProductEntityIdFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ContainerProductEntityIdFilterValueList'
          description: A string array of unique entity id values to be filtered on.
      description: Object that allows filtering on entity id of a container product.
    ContainerProductEntityIdFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ContainerProductEntityIdString'
    ContainerProductEntityIdString:
      type: string
      pattern: ^[a-zA-Z0-9][.a-zA-Z0-9/-]+[a-zA-Z0-9]$
      minLength: 1
      maxLength: 255
    ContainerProductFilters:
      type: object
      properties:
        EntityId:
          allOf:
          - $ref: '#/components/schemas/ContainerProductEntityIdFilter'
          description: Unique identifier for the container product.
        LastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/ContainerProductLastModifiedDateFilter'
          description: The last date on which the container product was modified.
        ProductTitle:
          allOf:
          - $ref: '#/components/schemas/ContainerProductTitleFilter'
          description: The title of the container product.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/ContainerProductVisibilityFilter'
          description: The visibility of the container product.
      description: Object containing all the filter fields for container products.
        Client can add only one wildcard filter and a maximum of 8 filters in a single
        `ListEntities` request.
    ContainerProductLastModifiedDateFilter:
      type: object
      properties:
        DateRange:
          allOf:
          - $ref: '#/components/schemas/ContainerProductLastModifiedDateFilterDateRange'
          description: Dates between which the container product was last modified.
      description: Object that allows filtering based on the last modified date of
        container products.
    ContainerProductLastModifiedDateFilterDateRange:
      type: object
      properties:
        AfterValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Date after which the container product was last modified.
        BeforeValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Date before which the container product was last modified.
      description: Object that contains date range of the last modified date to be
        filtered on. You can optionally provide a `BeforeValue` and/or `AfterValue`.
        Both are inclusive.
    ContainerProductSort:
      type: object
      properties:
        SortBy:
          allOf:
          - $ref: '#/components/schemas/ContainerProductSortBy'
          description: Field to sort the container products by.
        SortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The sorting order. Can be `ASCENDING` or `DESCENDING`. The
            default value is `DESCENDING`.
      description: Objects that allows sorting on container products based on certain
        fields and sorting order.
    ContainerProductSortBy:
      type: string
      enum:
      - EntityId
      - LastModifiedDate
      - ProductTitle
      - Visibility
    ContainerProductSummary:
      type: object
      properties:
        ProductTitle:
          allOf:
          - $ref: '#/components/schemas/ContainerProductTitleString'
          description: The title of the container product.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/ContainerProductVisibilityString'
          description: The lifecycle of the product.
      description: Object that contains summarized information about a container product.
    ContainerProductTitleFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ContainerProductTitleFilterValueList'
          description: A string array of unique product title values to be filtered
            on.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/ContainerProductTitleString'
          description: A string that will be the `wildCard` input for product tile
            filter. It matches the provided value as a substring in the actual value.
      description: Object that allows filtering on product title.
    ContainerProductTitleFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ContainerProductTitleString'
    ContainerProductTitleString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ContainerProductVisibilityFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ContainerProductVisibilityFilterValueList'
          description: A string array of unique visibility values to be filtered on.
      description: Object that allows filtering on the visibility of the product in
        the AWS Marketplace.
    ContainerProductVisibilityFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ContainerProductVisibilityString'
    ContainerProductVisibilityString:
      type: string
      enum:
      - Limited
      - Public
      - Restricted
      - Draft
    DataProductEntityIdFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/DataProductEntityIdFilterValueList'
          description: A string array of unique entity id values to be filtered on.
      description: Object that allows filtering on entity id of a data product.
    DataProductEntityIdFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/DataProductEntityIdString'
    DataProductEntityIdString:
      type: string
      pattern: ^[a-zA-Z0-9][.a-zA-Z0-9/-]+[a-zA-Z0-9]$
      minLength: 1
      maxLength: 255
    DataProductFilters:
      type: object
      properties:
        EntityId:
          allOf:
          - $ref: '#/components/schemas/DataProductEntityIdFilter'
          description: Unique identifier for the data product.
        ProductTitle:
          allOf:
          - $ref: '#/components/schemas/DataProductTitleFilter'
          description: The title of the data product.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/DataProductVisibilityFilter'
          description: The visibility of the data product.
        LastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/DataProductLastModifiedDateFilter'
          description: The last date on which the data product was modified.
      description: Object containing all the filter fields for data products. Client
        can add only one wildcard filter and a maximum of 8 filters in a single `ListEntities`
        request.
    DataProductLastModifiedDateFilter:
      type: object
      properties:
        DateRange:
          allOf:
          - $ref: '#/components/schemas/DataProductLastModifiedDateFilterDateRange'
          description: Dates between which the data product was last modified.
      description: Object that allows filtering based on the last modified date of
        data products.
    DataProductLastModifiedDateFilterDateRange:
      type: object
      properties:
        AfterValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Date after which the data product was last modified.
        BeforeValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Date before which the data product was last modified.
      description: Object that contains date range of the last modified date to be
        filtered on. You can optionally provide a `BeforeValue` and/or `AfterValue`.
        Both are inclusive.
    DataProductSort:
      type: object
      properties:
        SortBy:
          allOf:
          - $ref: '#/components/schemas/DataProductSortBy'
          description: Field to sort the data products by.
        SortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The sorting order. Can be `ASCENDING` or `DESCENDING`. The
            default value is `DESCENDING`.
      description: Objects that allows sorting on data products based on certain fields
        and sorting order.
    DataProductSortBy:
      type: string
      enum:
      - EntityId
      - ProductTitle
      - Visibility
      - LastModifiedDate
    DataProductSummary:
      type: object
      properties:
        ProductTitle:
          allOf:
          - $ref: '#/components/schemas/DataProductTitleString'
          description: The title of the data product.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/DataProductVisibilityString'
          description: The lifecycle of the data product.
      description: Object that contains summarized information about a data product.
    DataProductTitleFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/DataProductTitleFilterValueList'
          description: A string array of unique product title values to be filtered
            on.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/DataProductTitleString'
          description: A string that will be the `wildCard` input for product tile
            filter. It matches the provided value as a substring in the actual value.
      description: Object that allows filtering on product title.
    DataProductTitleFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/DataProductTitleString'
    DataProductTitleString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    DataProductVisibilityFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/DataProductVisibilityFilterValueList'
          description: A string array of unique visibility values to be filtered on.
      description: Object that allows filtering on the visibility of the product in
        the AWS Marketplace.
    DataProductVisibilityFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/DataProductVisibilityString'
    DataProductVisibilityString:
      type: string
      enum:
      - Limited
      - Public
      - Restricted
      - Unavailable
      - Draft
    DateTimeISO8601:
      type: string
      pattern: ^([\d]{4})\-(1[0-2]|0[1-9])\-(3[01]|0[1-9]|[12][\d])T(2[0-3]|[01][\d]):([0-5][\d]):([0-5][\d])Z$
      minLength: 20
      maxLength: 20
    DeleteResourcePolicyRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: The Amazon Resource Name (ARN) of the entity resource that
            is associated with the resource policy.
      required:
      - ResourceArn
    DeleteResourcePolicyResponse:
      type: object
      properties: {}
    DescribeChangeSetRequest:
      type: object
      properties:
        Catalog:
          allOf:
          - $ref: '#/components/schemas/Catalog'
          description: 'Required. The catalog related to the request. Fixed value:
            `AWSMarketplace`'
        ChangeSetId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: Required. The unique identifier for the `StartChangeSet` request
            that you want to describe the details for.
      required:
      - Catalog
      - ChangeSetId
    DescribeChangeSetResponse:
      type: object
      properties:
        ChangeSetId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: Required. The unique identifier for the change set referenced
            in this request.
        ChangeSetArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The ARN associated with the unique identifier for the change
            set referenced in this request.
        ChangeSetName:
          allOf:
          - $ref: '#/components/schemas/ChangeSetName'
          description: The optional name provided in the `StartChangeSet` request.
            If you do not provide a name, one is set by default.
        Intent:
          allOf:
          - $ref: '#/components/schemas/Intent'
          description: The optional intent provided in the `StartChangeSet` request.
            If you do not provide an intent, `APPLY` is set by default.
        StartTime:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The date and time, in ISO 8601 format (2018-02-27T13:45:22Z),
            the request started.
        EndTime:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The date and time, in ISO 8601 format (2018-02-27T13:45:22Z),
            the request transitioned to a terminal state. The change cannot transition
            to a different state. Null if the request is not in a terminal state.
        Status:
          allOf:
          - $ref: '#/components/schemas/ChangeStatus'
          description: The status of the change request.
        FailureCode:
          allOf:
          - $ref: '#/components/schemas/FailureCode'
          description: Returned if the change set is in `FAILED` status. Can be either
            `CLIENT_ERROR`, which means that there are issues with the request (see
            the `ErrorDetailList`), or `SERVER_FAULT`, which means that there is a
            problem in the system, and you should retry your request.
        FailureDescription:
          allOf:
          - $ref: '#/components/schemas/ExceptionMessageContent'
          description: Returned if there is a failure on the change set, but that
            failure is not related to any of the changes in the request.
        ChangeSet:
          allOf:
          - $ref: '#/components/schemas/ChangeSetDescription'
          description: An array of `ChangeSummary` objects.
    DescribeEntityRequest:
      type: object
      properties:
        Catalog:
          allOf:
          - $ref: '#/components/schemas/Catalog'
          description: 'Required. The catalog related to the request. Fixed value:
            `AWSMarketplace`'
        EntityId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: Required. The unique ID of the entity to describe.
      required:
      - Catalog
      - EntityId
    DescribeEntityResponse:
      type: object
      properties:
        EntityType:
          allOf:
          - $ref: '#/components/schemas/EntityType'
          description: The named type of the entity, in the format of `EntityType@Version`.
        EntityIdentifier:
          allOf:
          - $ref: '#/components/schemas/Identifier'
          description: The identifier of the entity, in the format of `EntityId@RevisionId`.
        EntityArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The ARN associated to the unique identifier for the entity
            referenced in this request.
        LastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The last modified date of the entity, in ISO 8601 format (2018-02-27T13:45:22Z).
        Details:
          allOf:
          - $ref: '#/components/schemas/Json'
          description: This stringified JSON object includes the details of the entity.
        DetailsDocument:
          allOf:
          - $ref: '#/components/schemas/JsonDocumentType'
          description: The JSON value of the details specific to the entity.
    Entity:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/EntityType'
          description: The type of entity.
        Identifier:
          allOf:
          - $ref: '#/components/schemas/Identifier'
          description: The identifier for the entity.
      required:
      - Type
      description: An entity contains data that describes your product, its supported
        features, and how it can be used or launched by your customer.
    EntityDetail:
      type: object
      properties:
        EntityType:
          allOf:
          - $ref: '#/components/schemas/EntityType'
          description: The entity type of the entity, in the format of `EntityType@Version`.
        EntityArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The Amazon Resource Name (ARN) of the entity.
        EntityIdentifier:
          allOf:
          - $ref: '#/components/schemas/Identifier'
          description: The ID of the entity, in the format of `EntityId@RevisionId`.
        LastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The last time the entity was modified.
        DetailsDocument:
          allOf:
          - $ref: '#/components/schemas/JsonDocumentType'
          description: An object that contains all the details of the entity.
      description: An object that contains metadata and details about the entity.
    EntityDetails:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/EntityDetail'
    EntityId:
      type: string
      pattern: ^[a-zA-Z0-9][.a-zA-Z0-9/-]+[a-zA-Z0-9]$
      minLength: 1
      maxLength: 255
    EntityNameString:
      type: string
      pattern: ^\\S+[\\S\\s]*$
      minLength: 1
      maxLength: 255
    EntityRequest:
      type: object
      properties:
        Catalog:
          allOf:
          - $ref: '#/components/schemas/Catalog'
          description: The name of the catalog the entity is present in. The only
            value at this time is `AWSMarketplace`.
        EntityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity.
      required:
      - Catalog
      - EntityId
      description: An object that contains entity ID and the catalog in which the
        entity is present.
    EntityRequestList:
      type: array
      items:
        $ref: '#/components/schemas/EntityRequest'
    EntitySummary:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/EntityNameString'
          description: The name for the entity. This value is not unique. It is defined
            by the seller.
        EntityType:
          allOf:
          - $ref: '#/components/schemas/EntityType'
          description: The type of the entity.
        EntityId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The unique identifier for the entity.
        EntityArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The ARN associated with the unique identifier for the entity.
        LastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The last time the entity was published, using ISO 8601 format
            (2018-02-27T13:45:22Z).
        Visibility:
          allOf:
          - $ref: '#/components/schemas/VisibilityValue'
          description: The visibility status of the entity to buyers. This value can
            be `Public` (everyone can view the entity), `Limited` (the entity is visible
            to limited accounts only), or `Restricted` (the entity was published and
            then unpublished and only existing buyers can view it).
        AmiProductSummary:
          allOf:
          - $ref: '#/components/schemas/AmiProductSummary'
          description: An object that contains summary information about the AMI product.
        ContainerProductSummary:
          allOf:
          - $ref: '#/components/schemas/ContainerProductSummary'
          description: An object that contains summary information about the container
            product.
        DataProductSummary:
          allOf:
          - $ref: '#/components/schemas/DataProductSummary'
          description: An object that contains summary information about the data
            product.
        SaaSProductSummary:
          allOf:
          - $ref: '#/components/schemas/SaaSProductSummary'
          description: An object that contains summary information about the SaaS
            product.
        OfferSummary:
          allOf:
          - $ref: '#/components/schemas/OfferSummary'
          description: An object that contains summary information about the offer.
        ResaleAuthorizationSummary:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationSummary'
          description: An object that contains summary information about the Resale
            Authorization.
      description: This object is a container for common summary information about
        the entity. The summary doesn't contain the whole entity structure, but it
        does contain information common across all entities.
    EntitySummaryList:
      type: array
      items:
        $ref: '#/components/schemas/EntitySummary'
    EntityType:
      type: string
      pattern: ^[a-zA-Z]+$
      minLength: 1
      maxLength: 255
    EntityTypeFilters:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/DataProductFilters'
        description: |-
          A filter for data products.
      - allOf:
        - $ref: '#/components/schemas/SaaSProductFilters'
        description: |-
          A filter for SaaS products.
      - allOf:
        - $ref: '#/components/schemas/AmiProductFilters'
        description: |-
          A filter for AMI products.
      - allOf:
        - $ref: '#/components/schemas/OfferFilters'
        description: |-
          A filter for offers.
      - allOf:
        - $ref: '#/components/schemas/ContainerProductFilters'
        description: |-
          A filter for container products.
      - allOf:
        - $ref: '#/components/schemas/ResaleAuthorizationFilters'
        description: |-
          A filter for Resale Authorizations.
      description: |-
        Object containing all the filter fields per entity type.
    EntityTypeSort:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/DataProductSort'
        description: |-
          A sort for data products.
      - allOf:
        - $ref: '#/components/schemas/SaaSProductSort'
        description: |-
          A sort for SaaS products.
      - allOf:
        - $ref: '#/components/schemas/AmiProductSort'
        description: |-
          A sort for AMI products.
      - allOf:
        - $ref: '#/components/schemas/OfferSort'
        description: |-
          A sort for offers.
      - allOf:
        - $ref: '#/components/schemas/ContainerProductSort'
        description: |-
          A sort for container products.
      - allOf:
        - $ref: '#/components/schemas/ResaleAuthorizationSort'
        description: |-
          A sort for Resale Authorizations.
      description: |-
        Object containing all the sort fields per entity type.
    ErrorCodeString:
      type: string
      pattern: ^[a-zA-Z_]+$
      minLength: 1
      maxLength: 72
    ErrorDetail:
      type: object
      properties:
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCodeString'
          description: The error code that identifies the type of error.
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/ExceptionMessageContent'
          description: The message for the error.
      description: Details about the error.
    ErrorDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ErrorDetail'
    Errors:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/BatchDescribeErrorDetail'
    ExceptionMessageContent:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 2048
    FailureCode:
      type: string
      enum:
      - CLIENT_ERROR
      - SERVER_FAULT
    Filter:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/FilterName'
          description: 'For `ListEntities`, the supported value for this is an `EntityId`.


            For `ListChangeSets`, the supported values are as follows:'
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ValueList'
          description: "`ListEntities` \\- This is a list of unique `EntityId`s.\n\
            \n`ListChangeSets` \\- The supported filter names and associated `ValueList`s\
            \ is as follows:\n\n  * `ChangeSetName` \\- The supported `ValueList`\
            \ is a list of non-unique `ChangeSetName`s. These are defined when you\
            \ call the `StartChangeSet` action.\n\n  * `Status` \\- The supported\
            \ `ValueList` is a list of statuses for all change set requests.\n\n \
            \ * `EntityId` \\- The supported `ValueList` is a list of unique `EntityId`s.\n\
            \n  * `BeforeStartTime` \\- The supported `ValueList` is a list of all\
            \ change sets that started before the filter value.\n\n  * `AfterStartTime`\
            \ \\- The supported `ValueList` is a list of all change sets that started\
            \ after the filter value.\n\n  * `BeforeEndTime` \\- The supported `ValueList`\
            \ is a list of all change sets that ended before the filter value.\n\n\
            \  * `AfterEndTime` \\- The supported `ValueList` is a list of all change\
            \ sets that ended after the filter value."
      description: A filter object, used to optionally filter results from calls to
        the `ListEntities` and `ListChangeSets` actions.
    FilterList:
      type: array
      items:
        $ref: '#/components/schemas/Filter'
    FilterName:
      type: string
      pattern: ^[a-zA-Z]+$
      minLength: 1
      maxLength: 255
    FilterValueContent:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    GetResourcePolicyRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: The Amazon Resource Name (ARN) of the entity resource that
            is associated with the resource policy.
      required:
      - ResourceArn
    GetResourcePolicyResponse:
      type: object
      properties:
        Policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicyJson'
          description: The policy document to set; formatted in JSON.
    Identifier:
      type: string
      pattern: ^[\w\-@]+$
      minLength: 1
      maxLength: 255
    Intent:
      type: string
      enum:
      - VALIDATE
      - APPLY
    InternalServiceException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionMessageContent'
      description: 'There was an internal service exception.


        HTTP status code: 500'
    Json:
      type: string
      pattern: ^[\s]*\{[\s\S]*\}[\s]*$
      minLength: 2
      maxLength: 16384
    JsonDocumentType:
      type: object
      additionalProperties: true
    ListChangeSetsMaxResultInteger:
      type: integer
      minimum: 1
      maximum: 20
    ListChangeSetsRequest:
      type: object
      properties:
        Catalog:
          allOf:
          - $ref: '#/components/schemas/Catalog'
          description: 'The catalog related to the request. Fixed value: `AWSMarketplace`'
        FilterList:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: An array of filter objects.
        Sort:
          allOf:
          - $ref: '#/components/schemas/Sort'
          description: An object that contains two attributes, `SortBy` and `SortOrder`.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListChangeSetsMaxResultInteger'
          description: The maximum number of results returned by a single call. This
            value must be provided in the next call to retrieve the next set of results.
            By default, this value is 20.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token value retrieved from a previous call to access the
            next page of results.
      required:
      - Catalog
    ListChangeSetsResponse:
      type: object
      properties:
        ChangeSetSummaryList:
          allOf:
          - $ref: '#/components/schemas/ChangeSetSummaryList'
          description: Array of `ChangeSetSummaryListItem` objects.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The value of the next token, if it exists. Null if there are
            no more results.
    ListEntitiesMaxResultInteger:
      type: integer
      minimum: 1
      maximum: 50
    ListEntitiesRequest:
      type: object
      properties:
        Catalog:
          allOf:
          - $ref: '#/components/schemas/Catalog'
          description: 'The catalog related to the request. Fixed value: `AWSMarketplace`'
        EntityType:
          allOf:
          - $ref: '#/components/schemas/EntityType'
          description: 'The type of entities to retrieve. Valid values are: `AmiProduct`,
            `ContainerProduct`, `DataProduct`, `SaaSProduct`, `ProcurementPolicy`,
            `Experience`, `Audience`, `BrandingSettings`, `Offer`, `Seller`, `ResaleAuthorization`.'
        FilterList:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: An array of filter objects. Each filter object contains two
            attributes, `filterName` and `filterValues`.
        Sort:
          allOf:
          - $ref: '#/components/schemas/Sort'
          description: An object that contains two attributes, `SortBy` and `SortOrder`.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The value of the next token, if it exists. Null if there are
            no more results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListEntitiesMaxResultInteger'
          description: Specifies the upper limit of the elements on a single page.
            If a value isn't provided, the default value is 20.
        OwnershipType:
          allOf:
          - $ref: '#/components/schemas/OwnershipType'
          description: Filters the returned set of entities based on their owner.
            The default is `SELF`. To list entities shared with you through AWS Resource
            Access Manager (AWS RAM), set to `SHARED`. Entities shared through the
            AWS Marketplace Catalog API `PutResourcePolicy` operation can't be discovered
            through the `SHARED` parameter.
        EntityTypeFilters:
          allOf:
          - $ref: '#/components/schemas/EntityTypeFilters'
          description: A Union object containing filter shapes for all `EntityType`s.
            Each `EntityTypeFilter` shape will have filters applicable for that `EntityType`
            that can be used to search or filter entities.
        EntityTypeSort:
          allOf:
          - $ref: '#/components/schemas/EntityTypeSort'
          description: A Union object containing `Sort` shapes for all `EntityType`s.
            Each `EntityTypeSort` shape will have `SortBy` and `SortOrder` applicable
            for fields on that `EntityType`. This can be used to sort the results
            of the filter query.
      required:
      - Catalog
      - EntityType
    ListEntitiesResponse:
      type: object
      properties:
        EntitySummaryList:
          allOf:
          - $ref: '#/components/schemas/EntitySummaryList'
          description: Array of `EntitySummary` objects.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The value of the next token if it exists. Null if there is
            no more result.
    ListTagsForResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: Required. The Amazon Resource Name (ARN) associated with the
            resource you want to list tags on.
      required:
      - ResourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: Required. The ARN associated with the resource you want to
            list tags on.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: 'Required. A list of objects specifying each key name and value.
            Number of objects allowed: 1-50.'
    NextToken:
      type: string
      pattern: ^[\w+=.:@\-\/]$
      minLength: 1
      maxLength: 2048
    OfferAvailabilityEndDateFilter:
      type: object
      properties:
        DateRange:
          allOf:
          - $ref: '#/components/schemas/OfferAvailabilityEndDateFilterDateRange'
          description: Allows filtering on the `AvailabilityEndDate` of an offer with
            date range as input.
      description: Allows filtering on the `AvailabilityEndDate` of an offer.
    OfferAvailabilityEndDateFilterDateRange:
      type: object
      properties:
        AfterValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on the `AvailabilityEndDate` of an offer after
            a date.
        BeforeValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on the `AvailabilityEndDate` of an offer before
            a date.
      description: Allows filtering on the `AvailabilityEndDate` of an offer with
        date range as input.
    OfferBuyerAccountsFilter:
      type: object
      properties:
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/OfferBuyerAccountsFilterWildcard'
          description: Allows filtering on the `BuyerAccounts` of an offer with wild
            card input.
      description: Allows filtering on the `BuyerAccounts` of an offer.
    OfferBuyerAccountsFilterWildcard:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    OfferBuyerAccountsList:
      type: array
      items:
        $ref: '#/components/schemas/OfferBuyerAccountsString'
    OfferBuyerAccountsString:
      type: string
      pattern: ^\d{12}$
      minLength: 12
      maxLength: 12
    OfferEntityIdFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/OfferEntityIdFilterValueList'
          description: Allows filtering on entity id of an offer with list input.
      description: Allows filtering on the entity id of an offer.
    OfferEntityIdFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/OfferEntityIdString'
    OfferEntityIdString:
      type: string
      pattern: ^[a-zA-Z0-9][.a-zA-Z0-9/-]+[a-zA-Z0-9]$
      minLength: 1
      maxLength: 255
    OfferFilters:
      type: object
      properties:
        EntityId:
          allOf:
          - $ref: '#/components/schemas/OfferEntityIdFilter'
          description: Allows filtering on `EntityId` of an offer.
        Name:
          allOf:
          - $ref: '#/components/schemas/OfferNameFilter'
          description: Allows filtering on the `Name` of an offer.
        ProductId:
          allOf:
          - $ref: '#/components/schemas/OfferProductIdFilter'
          description: Allows filtering on the `ProductId` of an offer.
        ResaleAuthorizationId:
          allOf:
          - $ref: '#/components/schemas/OfferResaleAuthorizationIdFilter'
          description: 'Allows filtering on the `ResaleAuthorizationId` of an offer.


            Not all offers have a `ResaleAuthorizationId`. The response will only
            include offers for which you have permissions.'
        ReleaseDate:
          allOf:
          - $ref: '#/components/schemas/OfferReleaseDateFilter'
          description: Allows filtering on the `ReleaseDate` of an offer.
        AvailabilityEndDate:
          allOf:
          - $ref: '#/components/schemas/OfferAvailabilityEndDateFilter'
          description: Allows filtering on the `AvailabilityEndDate` of an offer.
        BuyerAccounts:
          allOf:
          - $ref: '#/components/schemas/OfferBuyerAccountsFilter'
          description: Allows filtering on the `BuyerAccounts` of an offer.
        State:
          allOf:
          - $ref: '#/components/schemas/OfferStateFilter'
          description: Allows filtering on the `State` of an offer.
        Targeting:
          allOf:
          - $ref: '#/components/schemas/OfferTargetingFilter'
          description: Allows filtering on the `Targeting` of an offer.
        LastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/OfferLastModifiedDateFilter'
          description: Allows filtering on the `LastModifiedDate` of an offer.
      description: Object containing all the filter fields for offers entity. Client
        can add only one wildcard filter and a maximum of 8 filters in a single `ListEntities`
        request.
    OfferLastModifiedDateFilter:
      type: object
      properties:
        DateRange:
          allOf:
          - $ref: '#/components/schemas/OfferLastModifiedDateFilterDateRange'
          description: Allows filtering on the `LastModifiedDate` of an offer with
            date range as input.
      description: Allows filtering on the `LastModifiedDate` of an offer.
    OfferLastModifiedDateFilterDateRange:
      type: object
      properties:
        AfterValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on the `LastModifiedDate` of an offer after
            a date.
        BeforeValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on the `LastModifiedDate` of an offer before
            a date.
      description: Allows filtering on the `LastModifiedDate` of an offer with date
        range as input.
    OfferNameFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/OfferNameFilterValueList'
          description: Allows filtering on the `Name` of an offer with list input.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/OfferNameString'
          description: Allows filtering on the `Name` of an offer with wild card input.
      description: Allows filtering on the `Name` of an offer.
    OfferNameFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/OfferNameString'
    OfferNameString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 150
    OfferProductIdFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/OfferProductIdFilterValueList'
          description: Allows filtering on the `ProductId` of an offer with list input.
      description: Allows filtering on the `ProductId` of an offer.
    OfferProductIdFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/OfferProductIdString'
    OfferProductIdString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    OfferReleaseDateFilter:
      type: object
      properties:
        DateRange:
          allOf:
          - $ref: '#/components/schemas/OfferReleaseDateFilterDateRange'
          description: Allows filtering on the `ReleaseDate` of an offer with date
            range as input.
      description: Allows filtering on the `ReleaseDate` of an offer.
    OfferReleaseDateFilterDateRange:
      type: object
      properties:
        AfterValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on the `ReleaseDate` of offers after a date.
        BeforeValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on the `ReleaseDate` of offers before a date.
      description: Allows filtering on the `ReleaseDate` of an offer with date range
        as input.
    OfferResaleAuthorizationIdFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/OfferResaleAuthorizationIdFilterValueList'
          description: Allows filtering on the `ResaleAuthorizationId` of an offer
            with list input.
      description: 'Allows filtering on the `ResaleAuthorizationId` of an offer.


        Not all offers have a `ResaleAuthorizationId`. The response will only include
        offers for which you have permissions.'
    OfferResaleAuthorizationIdFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/OfferResaleAuthorizationIdString'
    OfferResaleAuthorizationIdString:
      type: string
      pattern: ^[a-zA-Z0-9][.a-zA-Z0-9/-]+[a-zA-Z0-9]$
      minLength: 1
      maxLength: 255
    OfferSort:
      type: object
      properties:
        SortBy:
          allOf:
          - $ref: '#/components/schemas/OfferSortBy'
          description: Allows to sort offers.
        SortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Allows to sort offers.
      description: Allows to sort offers.
    OfferSortBy:
      type: string
      enum:
      - EntityId
      - Name
      - ProductId
      - ResaleAuthorizationId
      - ReleaseDate
      - AvailabilityEndDate
      - BuyerAccounts
      - State
      - Targeting
      - LastModifiedDate
    OfferStateFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/OfferStateFilterValueList'
          description: Allows filtering on the `State` of an offer with list input.
      description: Allows filtering on the `State` of an offer.
    OfferStateFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/OfferStateString'
    OfferStateString:
      type: string
      enum:
      - Draft
      - Released
    OfferSummary:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/OfferNameString'
          description: The name of the offer.
        ProductId:
          allOf:
          - $ref: '#/components/schemas/OfferProductIdString'
          description: The product ID of the offer.
        ResaleAuthorizationId:
          allOf:
          - $ref: '#/components/schemas/OfferResaleAuthorizationIdString'
          description: The ResaleAuthorizationId of the offer.
        ReleaseDate:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The release date of the offer.
        AvailabilityEndDate:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The availability end date of the offer.
        BuyerAccounts:
          allOf:
          - $ref: '#/components/schemas/OfferBuyerAccountsList'
          description: The buyer accounts in the offer.
        State:
          allOf:
          - $ref: '#/components/schemas/OfferStateString'
          description: The status of the offer.
        Targeting:
          allOf:
          - $ref: '#/components/schemas/OfferTargetingList'
          description: The targeting in the offer.
      description: Summarized information about an offer.
    OfferTargetingFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/OfferTargetingFilterValueList'
          description: Allows filtering on the `Targeting` of an offer with list input.
      description: Allows filtering on the `Targeting` of an offer.
    OfferTargetingFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/OfferTargetingString'
    OfferTargetingList:
      type: array
      items:
        $ref: '#/components/schemas/OfferTargetingString'
    OfferTargetingString:
      type: string
      enum:
      - BuyerAccounts
      - ParticipatingPrograms
      - CountryCodes
      - None
    OwnershipType:
      type: string
      enum:
      - SELF
      - SHARED
    PutResourcePolicyRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: The Amazon Resource Name (ARN) of the entity resource you want
            to associate with a resource policy.
        Policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicyJson'
          description: The policy document to set; formatted in JSON.
      required:
      - ResourceArn
      - Policy
    PutResourcePolicyResponse:
      type: object
      properties: {}
    RequestedChangeList:
      type: array
      items:
        $ref: '#/components/schemas/Change'
    ResaleAuthorizationAvailabilityEndDateFilter:
      type: object
      properties:
        DateRange:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationAvailabilityEndDateFilterDateRange'
          description: Allows filtering on `AvailabilityEndDate` of a ResaleAuthorization
            with date range as input
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationAvailabilityEndDateFilterValueList'
          description: Allows filtering on `AvailabilityEndDate` of a ResaleAuthorization
            with date value as input.
      description: Allows filtering on `AvailabilityEndDate` of a ResaleAuthorization.
    ResaleAuthorizationAvailabilityEndDateFilterDateRange:
      type: object
      properties:
        AfterValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on `AvailabilityEndDate` of a ResaleAuthorization
            after a date.
        BeforeValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on `AvailabilityEndDate` of a ResaleAuthorization
            before a date.
      description: Allows filtering on `AvailabilityEndDate` of a ResaleAuthorization
        with date range as input.
    ResaleAuthorizationAvailabilityEndDateFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/DateTimeISO8601'
    ResaleAuthorizationCreatedDateFilter:
      type: object
      properties:
        DateRange:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationCreatedDateFilterDateRange'
          description: Allows filtering on `CreatedDate` of a ResaleAuthorization
            with date range as input.
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationCreatedDateFilterValueList'
          description: Allows filtering on `CreatedDate` of a ResaleAuthorization
            with date value as input.
      description: Allows filtering on `CreatedDate` of a ResaleAuthorization.
    ResaleAuthorizationCreatedDateFilterDateRange:
      type: object
      properties:
        AfterValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on `CreatedDate` of a ResaleAuthorization
            after a date.
        BeforeValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on `CreatedDate` of a ResaleAuthorization
            before a date.
      description: Allows filtering on `CreatedDate` of a ResaleAuthorization with
        date range as input.
    ResaleAuthorizationCreatedDateFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/DateTimeISO8601'
    ResaleAuthorizationEntityIdFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationEntityIdFilterValueList'
          description: Allows filtering on `EntityId` of a ResaleAuthorization with
            list input.
      description: Allows filtering on `EntityId` of a ResaleAuthorization.
    ResaleAuthorizationEntityIdFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ResaleAuthorizationEntityIdString'
    ResaleAuthorizationEntityIdString:
      type: string
      pattern: ^[a-zA-Z0-9][.a-zA-Z0-9/-]+[a-zA-Z0-9]$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationFilters:
      type: object
      properties:
        EntityId:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationEntityIdFilter'
          description: Allows filtering on the `EntityId` of a ResaleAuthorization.
        Name:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationNameFilter'
          description: Allows filtering on the `Name` of a ResaleAuthorization.
        ProductId:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationProductIdFilter'
          description: Allows filtering on the `ProductId` of a ResaleAuthorization.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationCreatedDateFilter'
          description: Allows filtering on the `CreatedDate` of a ResaleAuthorization.
        AvailabilityEndDate:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationAvailabilityEndDateFilter'
          description: Allows filtering on the `AvailabilityEndDate` of a ResaleAuthorization.
        ManufacturerAccountId:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationManufacturerAccountIdFilter'
          description: Allows filtering on the `ManufacturerAccountId` of a ResaleAuthorization.
        ProductName:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationProductNameFilter'
          description: Allows filtering on the `ProductName` of a ResaleAuthorization.
        ManufacturerLegalName:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationManufacturerLegalNameFilter'
          description: Allows filtering on the `ManufacturerLegalName` of a ResaleAuthorization.
        ResellerAccountID:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationResellerAccountIDFilter'
          description: Allows filtering on the `ResellerAccountID` of a ResaleAuthorization.
        ResellerLegalName:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationResellerLegalNameFilter'
          description: Allows filtering on the `ResellerLegalName` of a ResaleAuthorization.
        Status:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationStatusFilter'
          description: Allows filtering on the `Status` of a ResaleAuthorization.
        OfferExtendedStatus:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationOfferExtendedStatusFilter'
          description: Allows filtering on the `OfferExtendedStatus` of a ResaleAuthorization.
        LastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationLastModifiedDateFilter'
          description: Allows filtering on the `LastModifiedDate` of a ResaleAuthorization.
      description: Object containing all the filter fields for resale authorization
        entity. Client can add only one wildcard filter and a maximum of 8 filters
        in a single `ListEntities` request.
    ResaleAuthorizationLastModifiedDateFilter:
      type: object
      properties:
        DateRange:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationLastModifiedDateFilterDateRange'
          description: Allows filtering on the `LastModifiedDate` of a ResaleAuthorization
            with date range as input.
      description: Allows filtering on the `LastModifiedDate` of a ResaleAuthorization.
    ResaleAuthorizationLastModifiedDateFilterDateRange:
      type: object
      properties:
        AfterValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on the `LastModifiedDate` of a ResaleAuthorization
            after a date.
        BeforeValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Allows filtering on the `LastModifiedDate` of a ResaleAuthorization
            before a date.
      description: Allows filtering on the `LastModifiedDate` of a ResaleAuthorization
        with date range as input.
    ResaleAuthorizationManufacturerAccountIdFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationManufacturerAccountIdFilterValueList'
          description: Allows filtering on the `ManufacturerAccountId` of a ResaleAuthorization
            with list input.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationManufacturerAccountIdFilterWildcard'
          description: Allows filtering on the `ManufacturerAccountId` of a ResaleAuthorization
            with wild card input.
      description: Allows filtering on the `ManufacturerAccountId` of a ResaleAuthorization.
    ResaleAuthorizationManufacturerAccountIdFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ResaleAuthorizationManufacturerAccountIdString'
    ResaleAuthorizationManufacturerAccountIdFilterWildcard:
      type: string
      pattern: ^\d{12}$
      minLength: 12
      maxLength: 12
    ResaleAuthorizationManufacturerAccountIdString:
      type: string
      pattern: ^\d{12}$
      minLength: 12
      maxLength: 12
    ResaleAuthorizationManufacturerLegalNameFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationManufacturerLegalNameFilterValueList'
          description: Allows filtering on the `ManufacturerLegalName` of a ResaleAuthorization
            with list input.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationManufacturerLegalNameFilterWildcard'
          description: Allows filtering on the `ManufacturerLegalName` of a ResaleAuthorization
            with wild card input.
      description: Allows filtering on the `ManufacturerLegalName` of a ResaleAuthorization.
    ResaleAuthorizationManufacturerLegalNameFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ResaleAuthorizationManufacturerLegalNameString'
    ResaleAuthorizationManufacturerLegalNameFilterWildcard:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationManufacturerLegalNameString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationNameFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationNameFilterValueList'
          description: Allows filtering on the `Name` of a ResaleAuthorization with
            list input.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationNameFilterWildcard'
          description: Allows filtering on the `Name` of a ResaleAuthorization with
            wild card input.
      description: Allows filtering on the `Name` of a ResaleAuthorization.
    ResaleAuthorizationNameFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ResaleAuthorizationNameString'
    ResaleAuthorizationNameFilterWildcard:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationNameString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationOfferExtendedStatusFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationOfferExtendedStatusFilterValueList'
          description: Allows filtering on the `OfferExtendedStatus` of a ResaleAuthorization
            with list input.
      description: Allows filtering on the `OfferExtendedStatus` of a ResaleAuthorization.
    ResaleAuthorizationOfferExtendedStatusFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ResaleAuthorizationOfferExtendedStatusString'
    ResaleAuthorizationOfferExtendedStatusString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationProductIdFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationProductIdFilterValueList'
          description: Allows filtering on the `ProductId` of a ResaleAuthorization
            with list input.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationProductIdFilterWildcard'
          description: Allows filtering on the `ProductId` of a ResaleAuthorization
            with wild card input.
      description: Allows filtering on the `ProductId` of a ResaleAuthorization.
    ResaleAuthorizationProductIdFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ResaleAuthorizationProductIdString'
    ResaleAuthorizationProductIdFilterWildcard:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationProductIdString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationProductNameFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationProductNameFilterValueList'
          description: Allows filtering on the `ProductName` of a ResaleAuthorization
            with list input.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationProductNameFilterWildcard'
          description: Allows filtering on the `ProductName` of a ResaleAuthorization
            with wild card input.
      description: Allows filtering on the `ProductName` of a ResaleAuthorization.
    ResaleAuthorizationProductNameFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ResaleAuthorizationProductNameString'
    ResaleAuthorizationProductNameFilterWildcard:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationProductNameString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationResellerAccountIDFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationResellerAccountIDFilterValueList'
          description: Allows filtering on the `ResellerAccountID` of a ResaleAuthorization
            with list input.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationResellerAccountIDFilterWildcard'
          description: Allows filtering on the `ResellerAccountID` of a ResaleAuthorization
            with wild card input.
      description: Allows filtering on the `ResellerAccountID` of a ResaleAuthorization.
    ResaleAuthorizationResellerAccountIDFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ResaleAuthorizationResellerAccountIDString'
    ResaleAuthorizationResellerAccountIDFilterWildcard:
      type: string
      pattern: ^\d{12}$
      minLength: 12
      maxLength: 12
    ResaleAuthorizationResellerAccountIDString:
      type: string
      pattern: ^\d{12}$
      minLength: 12
      maxLength: 12
    ResaleAuthorizationResellerLegalNameFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationResellerLegalNameFilterValueList'
          description: Allows filtering on the ResellerLegalNameProductName of a ResaleAuthorization
            with list input.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationResellerLegalNameFilterWildcard'
          description: Allows filtering on the ResellerLegalName of a ResaleAuthorization
            with wild card input.
      description: Allows filtering on the ResellerLegalName of a ResaleAuthorization.
    ResaleAuthorizationResellerLegalNameFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ResaleAuthorizationResellerLegalNameString'
    ResaleAuthorizationResellerLegalNameFilterWildcard:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationResellerLegalNameString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    ResaleAuthorizationSort:
      type: object
      properties:
        SortBy:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationSortBy'
          description: Allows to sort ResaleAuthorization.
        SortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: Allows to sort ResaleAuthorization.
      description: Allows to sort ResaleAuthorization.
    ResaleAuthorizationSortBy:
      type: string
      enum:
      - EntityId
      - Name
      - ProductId
      - ProductName
      - ManufacturerAccountId
      - ManufacturerLegalName
      - ResellerAccountID
      - ResellerLegalName
      - Status
      - OfferExtendedStatus
      - CreatedDate
      - AvailabilityEndDate
      - LastModifiedDate
    ResaleAuthorizationStatusFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationStatusFilterValueList'
          description: Allows filtering on the `Status` of a ResaleAuthorization with
            list input.
      description: Allows filtering on the `Status` of a ResaleAuthorization.
    ResaleAuthorizationStatusFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/ResaleAuthorizationStatusString'
    ResaleAuthorizationStatusString:
      type: string
      enum:
      - Draft
      - Active
      - Restricted
    ResaleAuthorizationSummary:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationNameString'
          description: The name of the ResaleAuthorization.
        ProductId:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationProductIdString'
          description: The product ID of the ResaleAuthorization.
        ProductName:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationProductNameString'
          description: The product name of the ResaleAuthorization.
        ManufacturerAccountId:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationManufacturerAccountIdString'
          description: The manufacturer account ID of the ResaleAuthorization.
        ManufacturerLegalName:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationManufacturerLegalNameString'
          description: The manufacturer legal name of the ResaleAuthorization.
        ResellerAccountID:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationResellerAccountIDString'
          description: The reseller account ID of the ResaleAuthorization.
        ResellerLegalName:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationResellerLegalNameString'
          description: The reseller legal name of the ResaleAuthorization
        Status:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationStatusString'
          description: The status of the ResaleAuthorization.
        OfferExtendedStatus:
          allOf:
          - $ref: '#/components/schemas/ResaleAuthorizationOfferExtendedStatusString'
          description: The offer extended status of the ResaleAuthorization
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The created date of the ResaleAuthorization.
        AvailabilityEndDate:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: The availability end date of the ResaleAuthorization.
      description: Summarized information about a Resale Authorization.
    ResourceARN:
      type: string
      pattern: ^arn:[\w+=/,.@-]+:aws-marketplace:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*$
      minLength: 1
      maxLength: 255
    ResourceId:
      type: string
      pattern: ^[\w\-]+$
      minLength: 1
      maxLength: 255
    ResourceIdList:
      type: array
      items:
        $ref: '#/components/schemas/ResourceId'
    ResourceInUseException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionMessageContent'
      description: The resource is currently in use.
    ResourceNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionMessageContent'
      description: 'The specified resource wasn''t found.


        HTTP status code: 404'
    ResourceNotSupportedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionMessageContent'
      description: Currently, the specified resource is not supported.
    ResourcePolicyJson:
      type: string
      pattern: ^[\u0009\u000A\u000D\u0020-\u00FF]+$
      minLength: 1
      maxLength: 10240
    SaaSProductEntityIdFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/SaaSProductEntityIdFilterValueList'
          description: A string array of unique entity id values to be filtered on.
      description: Object that allows filtering on entity id of a SaaS product.
    SaaSProductEntityIdFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/SaaSProductEntityIdString'
    SaaSProductEntityIdString:
      type: string
      pattern: ^[a-zA-Z0-9][.a-zA-Z0-9/-]+[a-zA-Z0-9]$
      minLength: 1
      maxLength: 255
    SaaSProductFilters:
      type: object
      properties:
        EntityId:
          allOf:
          - $ref: '#/components/schemas/SaaSProductEntityIdFilter'
          description: Unique identifier for the SaaS product.
        ProductTitle:
          allOf:
          - $ref: '#/components/schemas/SaaSProductTitleFilter'
          description: The title of the SaaS product.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/SaaSProductVisibilityFilter'
          description: The visibility of the SaaS product.
        LastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/SaaSProductLastModifiedDateFilter'
          description: The last date on which the SaaS product was modified.
      description: Object containing all the filter fields for SaaS products. Client
        can add only one wildcard filter and a maximum of 8 filters in a single `ListEntities`
        request.
    SaaSProductLastModifiedDateFilter:
      type: object
      properties:
        DateRange:
          allOf:
          - $ref: '#/components/schemas/SaaSProductLastModifiedDateFilterDateRange'
          description: Dates between which the SaaS product was last modified.
      description: Object that allows filtering based on the last modified date of
        SaaS products
    SaaSProductLastModifiedDateFilterDateRange:
      type: object
      properties:
        AfterValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Date after which the SaaS product was last modified.
        BeforeValue:
          allOf:
          - $ref: '#/components/schemas/DateTimeISO8601'
          description: Date before which the SaaS product was last modified.
      description: Object that contains date range of the last modified date to be
        filtered on. You can optionally provide a `BeforeValue` and/or `AfterValue`.
        Both are inclusive.
    SaaSProductSort:
      type: object
      properties:
        SortBy:
          allOf:
          - $ref: '#/components/schemas/SaaSProductSortBy'
          description: Field to sort the SaaS products by.
        SortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The sorting order. Can be `ASCENDING` or `DESCENDING`. The
            default value is `DESCENDING`.
      description: Objects that allows sorting on SaaS products based on certain fields
        and sorting order.
    SaaSProductSortBy:
      type: string
      enum:
      - EntityId
      - ProductTitle
      - Visibility
      - LastModifiedDate
    SaaSProductSummary:
      type: object
      properties:
        ProductTitle:
          allOf:
          - $ref: '#/components/schemas/SaaSProductTitleString'
          description: The title of the SaaS product.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/SaaSProductVisibilityString'
          description: The lifecycle of the SaaS product.
      description: Object that contains summarized information about a SaaS product.
    SaaSProductTitleFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/SaaSProductTitleFilterValueList'
          description: A string array of unique product title values to be filtered
            on.
        WildCardValue:
          allOf:
          - $ref: '#/components/schemas/SaaSProductTitleString'
          description: A string that will be the `wildCard` input for product tile
            filter. It matches the provided value as a substring in the actual value.
      description: Object that allows filtering on product title.
    SaaSProductTitleFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/SaaSProductTitleString'
    SaaSProductTitleString:
      type: string
      pattern: ^(.)+$
      minLength: 1
      maxLength: 255
    SaaSProductVisibilityFilter:
      type: object
      properties:
        ValueList:
          allOf:
          - $ref: '#/components/schemas/SaaSProductVisibilityFilterValueList'
          description: A string array of unique visibility values to be filtered on.
      description: Object that allows filtering on the visibility of the product in
        the AWS Marketplace.
    SaaSProductVisibilityFilterValueList:
      type: array
      items:
        $ref: '#/components/schemas/SaaSProductVisibilityString'
    SaaSProductVisibilityString:
      type: string
      enum:
      - Limited
      - Public
      - Restricted
      - Draft
    ServiceQuotaExceededException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionMessageContent'
      description: The maximum number of open requests per account has been exceeded.
    Sort:
      type: object
      properties:
        SortBy:
          allOf:
          - $ref: '#/components/schemas/SortBy'
          description: 'For `ListEntities`, supported attributes include `LastModifiedDate`
            (default) and `EntityId`. In addition to `LastModifiedDate` and `EntityId`,
            each `EntityType` might support additional fields.


            For `ListChangeSets`, supported attributes include `StartTime` and `EndTime`.'
        SortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The sorting order. Can be `ASCENDING` or `DESCENDING`. The
            default value is `DESCENDING`.
      description: An object that contains two attributes, `SortBy` and `SortOrder`.
    SortBy:
      type: string
      pattern: ^[a-zA-Z]+$
      minLength: 1
      maxLength: 255
    SortOrder:
      type: string
      enum:
      - ASCENDING
      - DESCENDING
    StartChangeSetRequest:
      type: object
      properties:
        Catalog:
          allOf:
          - $ref: '#/components/schemas/Catalog'
          description: 'The catalog related to the request. Fixed value: `AWSMarketplace`'
        ChangeSet:
          allOf:
          - $ref: '#/components/schemas/RequestedChangeList'
          description: Array of `change` object.
        ChangeSetName:
          allOf:
          - $ref: '#/components/schemas/ChangeSetName'
          description: Optional case sensitive string of up to 100 ASCII characters.
            The change set name can be used to filter the list of change sets.
        ClientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          description: A unique token to identify the request to ensure idempotency.
        ChangeSetTags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A list of objects specifying each key name and value for the
            `ChangeSetTags` property.
        Intent:
          allOf:
          - $ref: '#/components/schemas/Intent'
          description: The intent related to the request. The default is `APPLY`.
            To test your request before applying changes to your entities, use `VALIDATE`.
            This feature is currently available for adding versions to single-AMI
            products. For more information, see [Add a new version](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#ami-add-version).
      required:
      - Catalog
      - ChangeSet
    StartChangeSetResponse:
      type: object
      properties:
        ChangeSetId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: Unique identifier generated for the request.
        ChangeSetArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The ARN associated to the unique identifier generated for the
            request.
    Tag:
      type: object
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          description: The key associated with the tag.
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: The value associated with the tag.
      required:
      - Key
      - Value
      description: A list of objects specifying each key name and value.
    TagKey:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    TagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: Required. The Amazon Resource Name (ARN) associated with the
            resource you want to tag.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: 'Required. A list of objects specifying each key name and value.
            Number of objects allowed: 1-50.'
      required:
      - ResourceArn
      - Tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 0
      maxLength: 256
    ThrottlingException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionMessageContent'
      description: 'Too many requests.


        HTTP status code: 429'
    UntagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: Required. The Amazon Resource Name (ARN) associated with the
            resource you want to remove the tag from.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: 'Required. A list of key names of tags to be removed. Number
            of strings allowed: 0-256.'
      required:
      - ResourceArn
      - TagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    ValidationException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ExceptionMessageContent'
      description: 'An error occurred during validation.


        HTTP status code: 422'
    ValueList:
      type: array
      items:
        $ref: '#/components/schemas/FilterValueContent'
    VisibilityValue:
      type: string
      pattern: ^[a-zA-Z]+$
      minLength: 1
      maxLength: 64
