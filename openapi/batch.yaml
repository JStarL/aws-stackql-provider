openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: batch
  x-aws-serviceName: batch
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2016-08-10'
  title: AWS Batch
  description: |-
    Batch

    Using Batch, you can run batch computing workloads on the Amazon Web Services Cloud. Batch computing is a common means for developers, scientists, and engineers to access large amounts of compute resources. Batch uses the advantages of the batch computing to remove the undifferentiated heavy lifting of configuring and managing required infrastructure. At the same time, it also adopts a familiar batch computing software approach. You can use Batch to efficiently provision resources, and work toward eliminating capacity constraints, reducing your overall compute costs, and delivering results more quickly.

    As a fully managed service, Batch can run batch computing workloads of any scale. Batch automatically provisions compute resources and optimizes workload distribution based on the quantity and scale of your specific workloads. With Batch, there's no need to install or manage batch computing software. This means that you can focus on analyzing results and solving your specific problems instead.
servers:
- description: The AWS Batch regional endpoint
  url: https://batch.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /v1/canceljob:
    post:
      operationId: CancelJob
      description: |-
        Cancels a job in an Batch job queue. Jobs that are in a `SUBMITTED`, `PENDING`, or `RUNNABLE` state are cancelled and the job status is updated to `FAILED`.

        A `PENDING` job is canceled after all dependency jobs are completed. Therefore, it may take longer than expected to cancel a job in `PENDING` status.

        When you try to cancel an array parent job in `PENDING`, Batch attempts to cancel all child jobs. The array parent job is canceled when all child jobs are completed.

        Jobs that progressed to the `STARTING` or `RUNNING` state aren't canceled. However, the API operation still succeeds, even if no job is canceled. These jobs must be terminated with the TerminateJob operation.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobId:
                  $ref: '#/components/schemas/String'
                reason:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/createcomputeenvironment:
    post:
      operationId: CreateComputeEnvironment
      description: |-
        Creates an Batch compute environment. You can create `MANAGED` or `UNMANAGED` compute environments. `MANAGED` compute environments can use Amazon EC2 or Fargate resources. `UNMANAGED` compute environments can only use EC2 resources.

        In a managed compute environment, Batch manages the capacity and instance types of the compute resources within the environment. This is based on the compute resource specification that you define or the [launch template](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html) that you specify when you create the compute environment. Either, you can choose to use EC2 On-Demand Instances and EC2 Spot Instances. Or, you can use Fargate and Fargate Spot capacity in your managed compute environment. You can optionally set a maximum price so that Spot Instances only launch when the Spot Instance price is less than a specified percentage of the On-Demand price.

        Multi-node parallel jobs aren't supported on Spot Instances.

        In an unmanaged compute environment, you can manage your own EC2 compute resources and have flexibility with how you configure your compute resources. For example, you can use custom AMIs. However, you must verify that each of your AMIs meet the Amazon ECS container instance AMI specification. For more information, see [container instance AMIs](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container_instance_AMIs.html) in the _Amazon Elastic Container Service Developer Guide_. After you created your unmanaged compute environment, you can use the DescribeComputeEnvironments operation to find the Amazon ECS cluster that's associated with it. Then, launch your container instances into that Amazon ECS cluster. For more information, see [Launching an Amazon ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html) in the _Amazon Elastic Container Service Developer Guide_.

        To create a compute environment that uses EKS resources, the caller must have permissions to call `eks:DescribeCluster`.

        Batch doesn't automatically upgrade the AMIs in a compute environment after it's created. For example, it also doesn't update the AMIs in your compute environment when a newer version of the Amazon ECS optimized AMI is available. You're responsible for the management of the guest operating system. This includes any updates and security patches. You're also responsible for any additional application software or utilities that you install on the compute resources. There are two ways to use a new AMI for your Batch jobs. The original method is to complete these steps:

          1. Create a new compute environment with the new AMI.

          2. Add the compute environment to an existing job queue.

          3. Remove the earlier compute environment from your job queue.

          4. Delete the earlier compute environment.

        In April 2022, Batch added enhanced support for updating compute environments. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html). To use the enhanced updating of compute environments to update AMIs, follow these rules:

          * Either don't set the service role (`serviceRole`) parameter or set it to the **AWSBatchServiceRole** service-linked role.

          * Set the allocation strategy (`allocationStrategy`) parameter to `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED`, or `SPOT_PRICE_CAPACITY_OPTIMIZED`.

          * Set the update to latest image version (`updateToLatestImageVersion`) parameter to `true`. The `updateToLatestImageVersion` parameter is used when you update a compute environment. This parameter is ignored when you create a compute environment.

          * Don't specify an AMI ID in `imageId`, `imageIdOverride` (in [ `ec2Configuration` ](https://docs.aws.amazon.com/batch/latest/APIReference/API_Ec2Configuration.html)), or in the launch template (`launchTemplate`). In that case, Batch selects the latest Amazon ECS optimized AMI that's supported by Batch at the time the infrastructure update is initiated. Alternatively, you can specify the AMI ID in the `imageId` or `imageIdOverride` parameters, or the launch template identified by the `LaunchTemplate` properties. Changing any of these properties starts an infrastructure update. If the AMI ID is specified in the launch template, it can't be replaced by specifying an AMI ID in either the `imageId` or `imageIdOverride` parameters. It can only be replaced by specifying a different launch template, or if the launch template version is set to `$Default` or `$Latest`, by setting either a new default version for the launch template (if `$Default`) or by adding a new version to the launch template (if `$Latest`).

        If these rules are followed, any update that starts an infrastructure update causes the AMI ID to be re-selected. If the `version` setting in the launch template (`launchTemplate`) is set to `$Latest` or `$Default`, the latest or default version of the launch template is evaluated up at the time of the infrastructure update, even if the `launchTemplate` wasn't updated.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                computeEnvironmentName:
                  $ref: '#/components/schemas/String'
                type:
                  $ref: '#/components/schemas/CEType'
                state:
                  $ref: '#/components/schemas/CEState'
                unmanagedvCpus:
                  $ref: '#/components/schemas/Integer'
                computeResources:
                  $ref: '#/components/schemas/ComputeResource'
                serviceRole:
                  $ref: '#/components/schemas/String'
                tags:
                  $ref: '#/components/schemas/TagrisTagsMap'
                eksConfiguration:
                  $ref: '#/components/schemas/EksConfiguration'
                context:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/createconsumableresource:
    post:
      operationId: CreateConsumableResource
      description: |-
        Creates an Batch consumable resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consumableResourceName:
                  $ref: '#/components/schemas/String'
                totalQuantity:
                  $ref: '#/components/schemas/Long'
                resourceType:
                  $ref: '#/components/schemas/String'
                tags:
                  $ref: '#/components/schemas/TagrisTagsMap'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/createjobqueue:
    post:
      operationId: CreateJobQueue
      description: |-
        Creates an Batch job queue. When you create a job queue, you associate one or more compute environments to the queue and assign an order of preference for the compute environments.

        You also set a priority to the job queue that determines the order that the Batch scheduler places jobs onto its associated compute environments. For example, if a compute environment is associated with more than one job queue, the job queue with a higher priority is given preference for scheduling jobs to that compute environment.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobQueueName:
                  $ref: '#/components/schemas/String'
                state:
                  $ref: '#/components/schemas/JQState'
                schedulingPolicyArn:
                  $ref: '#/components/schemas/String'
                priority:
                  $ref: '#/components/schemas/Integer'
                computeEnvironmentOrder:
                  $ref: '#/components/schemas/ComputeEnvironmentOrders'
                tags:
                  $ref: '#/components/schemas/TagrisTagsMap'
                jobStateTimeLimitActions:
                  $ref: '#/components/schemas/JobStateTimeLimitActions'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/createschedulingpolicy:
    post:
      operationId: CreateSchedulingPolicy
      description: |-
        Creates an Batch scheduling policy.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                fairsharePolicy:
                  $ref: '#/components/schemas/FairsharePolicy'
                tags:
                  $ref: '#/components/schemas/TagrisTagsMap'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/deletecomputeenvironment:
    post:
      operationId: DeleteComputeEnvironment
      description: |-
        Deletes an Batch compute environment.

        Before you can delete a compute environment, you must set its state to `DISABLED` with the UpdateComputeEnvironment API operation and disassociate it from any job queues with the UpdateJobQueue API operation. Compute environments that use Fargate resources must terminate all active jobs on that compute environment before deleting the compute environment. If this isn't done, the compute environment enters an invalid state.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                computeEnvironment:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/deleteconsumableresource:
    post:
      operationId: DeleteConsumableResource
      description: |-
        Deletes the specified consumable resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consumableResource:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/deletejobqueue:
    post:
      operationId: DeleteJobQueue
      description: |-
        Deletes the specified job queue. You must first disable submissions for a queue with the UpdateJobQueue operation. All jobs in the queue are eventually terminated when you delete a job queue. The jobs are terminated at a rate of about 16 jobs each second.

        It's not necessary to disassociate compute environments from a queue before submitting a `DeleteJobQueue` request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobQueue:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/deleteschedulingpolicy:
    post:
      operationId: DeleteSchedulingPolicy
      description: |-
        Deletes the specified scheduling policy.

        You can't delete a scheduling policy that's used in any job queues.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/deregisterjobdefinition:
    post:
      operationId: DeregisterJobDefinition
      description: |-
        Deregisters an Batch job definition. Job definitions are permanently deleted after 180 days.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobDefinition:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/describecomputeenvironments:
    post:
      operationId: DescribeComputeEnvironments
      description: |-
        Describes one or more of your compute environments.

        If you're using an unmanaged compute environment, you can use the `DescribeComputeEnvironment` operation to determine the `ecsClusterArn` that you launch your Amazon ECS container instances into.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                computeEnvironments:
                  $ref: '#/components/schemas/StringList'
                maxResults:
                  $ref: '#/components/schemas/Integer'
                nextToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/describeconsumableresource:
    post:
      operationId: DescribeConsumableResource
      description: |-
        Returns a description of the specified consumable resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consumableResource:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/describejobdefinitions:
    post:
      operationId: DescribeJobDefinitions
      description: |-
        Describes a list of job definitions. You can specify a `status` (such as `ACTIVE`) to only return job definitions that match that status.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobDefinitions:
                  $ref: '#/components/schemas/StringList'
                maxResults:
                  $ref: '#/components/schemas/Integer'
                jobDefinitionName:
                  $ref: '#/components/schemas/String'
                status:
                  $ref: '#/components/schemas/String'
                nextToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/describejobqueues:
    post:
      operationId: DescribeJobQueues
      description: |-
        Describes one or more of your job queues.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobQueues:
                  $ref: '#/components/schemas/StringList'
                maxResults:
                  $ref: '#/components/schemas/Integer'
                nextToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/describejobs:
    post:
      operationId: DescribeJobs
      description: |-
        Describes a list of Batch jobs.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobs:
                  $ref: '#/components/schemas/StringList'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/describeschedulingpolicies:
    post:
      operationId: DescribeSchedulingPolicies
      description: |-
        Describes one or more of your scheduling policies.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arns:
                  $ref: '#/components/schemas/StringList'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/getjobqueuesnapshot:
    post:
      operationId: GetJobQueueSnapshot
      description: |-
        Provides a list of the first 100 `RUNNABLE` jobs associated to a single job queue.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobQueue:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/listconsumableresources:
    post:
      operationId: ListConsumableResources
      description: |-
        Returns a list of Batch consumable resources.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/ListConsumableResourcesFilterList'
                maxResults:
                  $ref: '#/components/schemas/Integer'
                nextToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/listjobs:
    post:
      operationId: ListJobs
      description: |-
        Returns a list of Batch jobs.

        You must specify only one of the following items:

          * A job queue ID to return a list of jobs in that job queue

          * A multi-node parallel job ID to return a list of nodes for that job

          * An array job ID to return a list of the children for that job

        You can filter the results by job status with the `jobStatus` parameter. If you don't specify a status, only `RUNNING` jobs are returned.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobQueue:
                  $ref: '#/components/schemas/String'
                arrayJobId:
                  $ref: '#/components/schemas/String'
                multiNodeJobId:
                  $ref: '#/components/schemas/String'
                jobStatus:
                  $ref: '#/components/schemas/JobStatus'
                maxResults:
                  $ref: '#/components/schemas/Integer'
                nextToken:
                  $ref: '#/components/schemas/String'
                filters:
                  $ref: '#/components/schemas/ListJobsFilterList'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/listjobsbyconsumableresource:
    post:
      operationId: ListJobsByConsumableResource
      description: |-
        Returns a list of Batch jobs that require a specific consumable resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consumableResource:
                  $ref: '#/components/schemas/String'
                filters:
                  $ref: '#/components/schemas/ListJobsByConsumableResourceFilterList'
                maxResults:
                  $ref: '#/components/schemas/Integer'
                nextToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/listschedulingpolicies:
    post:
      operationId: ListSchedulingPolicies
      description: |-
        Returns a list of Batch scheduling policies.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/Integer'
                nextToken:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Lists the tags for an Batch resource. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
    post:
      operationId: TagResource
      description: |-
        Associates the specified tags to a resource with the specified `resourceArn`. If existing tags on a resource aren't specified in the request parameters, they aren't changed. When a resource is deleted, the tags that are associated with that resource are deleted as well. Batch resources that support tags are compute environments, jobs, job definitions, job queues, and scheduling policies. ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't supported.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagrisTagsMap'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
    delete:
      operationId: UntagResource
      description: |-
        Deletes specified tags from an Batch resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeysList'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/registerjobdefinition:
    post:
      operationId: RegisterJobDefinition
      description: |-
        Registers an Batch job definition.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobDefinitionName:
                  $ref: '#/components/schemas/String'
                type:
                  $ref: '#/components/schemas/JobDefinitionType'
                parameters:
                  $ref: '#/components/schemas/ParametersMap'
                schedulingPriority:
                  $ref: '#/components/schemas/Integer'
                containerProperties:
                  $ref: '#/components/schemas/ContainerProperties'
                nodeProperties:
                  $ref: '#/components/schemas/NodeProperties'
                retryStrategy:
                  $ref: '#/components/schemas/RetryStrategy'
                propagateTags:
                  $ref: '#/components/schemas/Boolean'
                timeout:
                  $ref: '#/components/schemas/JobTimeout'
                tags:
                  $ref: '#/components/schemas/TagrisTagsMap'
                platformCapabilities:
                  $ref: '#/components/schemas/PlatformCapabilityList'
                eksProperties:
                  $ref: '#/components/schemas/EksProperties'
                ecsProperties:
                  $ref: '#/components/schemas/EcsProperties'
                consumableResourceProperties:
                  $ref: '#/components/schemas/ConsumableResourceProperties'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/submitjob:
    post:
      operationId: SubmitJob
      description: |-
        Submits an Batch job from a job definition. Parameters that are specified during SubmitJob override parameters defined in the job definition. vCPU and memory requirements that are specified in the `resourceRequirements` objects in the job definition are the exception. They can't be overridden this way using the `memory` and `vcpus` parameters. Rather, you must specify updates to job definition parameters in a `resourceRequirements` object that's included in the `containerOverrides` parameter.

        Job queues with a scheduling policy are limited to 500 active share identifiers at a time.

        Jobs that run on Fargate resources can't be guaranteed to run for more than 14 days. This is because, after 14 days, Fargate resources might become unavailable and job might be terminated.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobName:
                  $ref: '#/components/schemas/String'
                jobQueue:
                  $ref: '#/components/schemas/String'
                shareIdentifier:
                  $ref: '#/components/schemas/String'
                schedulingPriorityOverride:
                  $ref: '#/components/schemas/Integer'
                arrayProperties:
                  $ref: '#/components/schemas/ArrayProperties'
                dependsOn:
                  $ref: '#/components/schemas/JobDependencyList'
                jobDefinition:
                  $ref: '#/components/schemas/String'
                parameters:
                  $ref: '#/components/schemas/ParametersMap'
                containerOverrides:
                  $ref: '#/components/schemas/ContainerOverrides'
                nodeOverrides:
                  $ref: '#/components/schemas/NodeOverrides'
                retryStrategy:
                  $ref: '#/components/schemas/RetryStrategy'
                propagateTags:
                  $ref: '#/components/schemas/Boolean'
                timeout:
                  $ref: '#/components/schemas/JobTimeout'
                tags:
                  $ref: '#/components/schemas/TagrisTagsMap'
                eksPropertiesOverride:
                  $ref: '#/components/schemas/EksPropertiesOverride'
                ecsPropertiesOverride:
                  $ref: '#/components/schemas/EcsPropertiesOverride'
                consumableResourcePropertiesOverride:
                  $ref: '#/components/schemas/ConsumableResourceProperties'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/terminatejob:
    post:
      operationId: TerminateJob
      description: |-
        Terminates a job in a job queue. Jobs that are in the `STARTING` or `RUNNING` state are terminated, which causes them to transition to `FAILED`. Jobs that have not progressed to the `STARTING` state are cancelled.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobId:
                  $ref: '#/components/schemas/String'
                reason:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/updatecomputeenvironment:
    post:
      operationId: UpdateComputeEnvironment
      description: |-
        Updates an Batch compute environment.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                computeEnvironment:
                  $ref: '#/components/schemas/String'
                state:
                  $ref: '#/components/schemas/CEState'
                unmanagedvCpus:
                  $ref: '#/components/schemas/Integer'
                computeResources:
                  $ref: '#/components/schemas/ComputeResourceUpdate'
                serviceRole:
                  $ref: '#/components/schemas/String'
                updatePolicy:
                  $ref: '#/components/schemas/UpdatePolicy'
                context:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/updateconsumableresource:
    post:
      operationId: UpdateConsumableResource
      description: |-
        Updates a consumable resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consumableResource:
                  $ref: '#/components/schemas/String'
                operation:
                  $ref: '#/components/schemas/String'
                quantity:
                  $ref: '#/components/schemas/Long'
                clientToken:
                  $ref: '#/components/schemas/ClientRequestToken'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/updatejobqueue:
    post:
      operationId: UpdateJobQueue
      description: |-
        Updates a job queue.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobQueue:
                  $ref: '#/components/schemas/String'
                state:
                  $ref: '#/components/schemas/JQState'
                schedulingPolicyArn:
                  $ref: '#/components/schemas/String'
                priority:
                  $ref: '#/components/schemas/Integer'
                computeEnvironmentOrder:
                  $ref: '#/components/schemas/ComputeEnvironmentOrders'
                jobStateTimeLimitActions:
                  $ref: '#/components/schemas/JobStateTimeLimitActions'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
  /v1/updateschedulingpolicy:
    post:
      operationId: UpdateSchedulingPolicy
      description: |-
        Updates a scheduling policy.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                arn:
                  $ref: '#/components/schemas/String'
                fairsharePolicy:
                  $ref: '#/components/schemas/FairsharePolicy'
      responses:
        '200': {}
        '400':
          description: |-
            These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '500':
          description: |-
            These errors are usually caused by a server issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
components:
  schemas:
    ArrayJobDependency:
      type: string
      enum:
      - N_TO_N
      - SEQUENTIAL
    ArrayJobStatusSummary:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Integer'
    ArrayProperties:
      type: object
      properties:
        size:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The size of the array job.
      description: An object that represents an Batch array job.
    ArrayPropertiesDetail:
      type: object
      properties:
        statusSummary:
          allOf:
          - $ref: '#/components/schemas/ArrayJobStatusSummary'
          description: A summary of the number of array job children in each available
            job status. This parameter is returned for parent array jobs.
        size:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The size of the array job. This parameter is returned for parent
            array jobs.
        index:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The job index within the array that's associated with this
            job. This parameter is returned for array job children.
      description: An object that represents the array properties of a job.
    ArrayPropertiesSummary:
      type: object
      properties:
        size:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The size of the array job. This parameter is returned for parent
            array jobs.
        index:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The job index within the array that's associated with this
            job. This parameter is returned for children of array jobs.
      description: An object that represents the array properties of a job.
    AssignPublicIp:
      type: string
      enum:
      - ENABLED
      - DISABLED
    AttemptContainerDetail:
      type: object
      properties:
        containerInstanceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the Amazon ECS container
            instance that hosts the job attempt.
        taskArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the Amazon ECS task that's
            associated with the job attempt. Each container attempt receives a task
            ARN when they reach the `STARTING` status.
        exitCode:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The exit code for the job attempt. A non-zero exit code is
            considered failed.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short (255 max characters) human-readable string to provide
            additional details for a running or stopped container.
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the CloudWatch Logs log stream that's associated
            with the container. The log group for Batch jobs is `/aws/batch/job`.
            Each container attempt receives a log stream name when they reach the
            `RUNNING` status.
        networkInterfaces:
          allOf:
          - $ref: '#/components/schemas/NetworkInterfaceList'
          description: The network interfaces that are associated with the job attempt.
      description: An object that represents the details of a container that's part
        of a job attempt.
    AttemptDetail:
      type: object
      properties:
        container:
          allOf:
          - $ref: '#/components/schemas/AttemptContainerDetail'
          description: The details for the container in this job attempt.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the attempt was
            started (when the attempt transitioned from the `STARTING` state to the
            `RUNNING` state).
        stoppedAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the attempt was
            stopped (when the attempt transitioned from the `RUNNING` state to a terminal
            state, such as `SUCCEEDED` or `FAILED`).
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short, human-readable string to provide additional details
            for the current status of the job attempt.
        taskProperties:
          allOf:
          - $ref: '#/components/schemas/ListAttemptEcsTaskDetails'
          description: The properties for a task definition that describes the container
            and volume definitions of an Amazon ECS task.
      description: An object that represents a job attempt.
    AttemptDetails:
      type: array
      items:
        $ref: '#/components/schemas/AttemptDetail'
    AttemptEcsTaskDetails:
      type: object
      properties:
        containerInstanceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the container instance that
            hosts the task.
        taskArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the Amazon ECS task.
        containers:
          allOf:
          - $ref: '#/components/schemas/ListAttemptTaskContainerDetails'
          description: A list of containers that are included in the `taskProperties`
            list.
      description: An object that represents the details of a task.
    AttemptTaskContainerDetails:
      type: object
      properties:
        exitCode:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The exit code for the container’s attempt. A non-zero exit
            code is considered failed.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of a container.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short (255 max characters) string that's easy to understand
            and provides additional details for a running or stopped container.
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon CloudWatch Logs log stream that's associated
            with the container. The log group for Batch jobs is `/aws/batch/job`.
            Each container attempt receives a log stream name when they reach the
            `RUNNING` status.
        networkInterfaces:
          allOf:
          - $ref: '#/components/schemas/NetworkInterfaceList'
          description: The network interfaces that are associated with the job attempt.
      description: An object that represents the details of a container that's part
        of a job attempt.
    Boolean:
      type: boolean
    CEState:
      type: string
      enum:
      - ENABLED
      - DISABLED
    CEStatus:
      type: string
      enum:
      - CREATING
      - UPDATING
      - DELETING
      - DELETED
      - VALID
      - INVALID
    CEType:
      type: string
      enum:
      - MANAGED
      - UNMANAGED
    CRAllocationStrategy:
      type: string
      enum:
      - BEST_FIT
      - BEST_FIT_PROGRESSIVE
      - SPOT_CAPACITY_OPTIMIZED
      - SPOT_PRICE_CAPACITY_OPTIMIZED
    CRType:
      type: string
      enum:
      - EC2
      - SPOT
      - FARGATE
      - FARGATE_SPOT
    CRUpdateAllocationStrategy:
      type: string
      enum:
      - BEST_FIT_PROGRESSIVE
      - SPOT_CAPACITY_OPTIMIZED
      - SPOT_PRICE_CAPACITY_OPTIMIZED
    CancelJobRequest:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Batch job ID of the job to cancel.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'A message to attach to the job that explains the reason for
            canceling it. This message is returned by future DescribeJobs operations
            on the job. It is also recorded in the Batch activity logs.


            This parameter has as limit of 1024 characters.'
      required:
      - jobId
      - reason
      description: Contains the parameters for `CancelJob`.
    CancelJobResponse:
      type: object
      properties: {}
    ClientException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: These errors are usually caused by a client action. One example
        cause is using an action or resource on behalf of a user that doesn't have
        permissions to use the action or resource. Another cause is specifying an
        identifier that's not valid.
    ClientRequestToken:
      type: string
      minLength: 1
      maxLength: 64
    ComputeEnvironmentDetail:
      type: object
      properties:
        computeEnvironmentName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the compute environment. It can be up to 128 characters
            long. It can contain uppercase and lowercase letters, numbers, hyphens
            (-), and underscores (_).
        computeEnvironmentArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the compute environment.
        unmanagedvCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of VCPUs expected to be used for an unmanaged
            compute environment.
        ecsClusterArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the underlying Amazon ECS
            cluster that the compute environment uses.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags applied to the compute environment.
        type:
          allOf:
          - $ref: '#/components/schemas/CEType'
          description: 'The type of the compute environment: `MANAGED` or `UNMANAGED`.
            For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html)
            in the _Batch User Guide_.'
        state:
          allOf:
          - $ref: '#/components/schemas/CEState'
          description: 'The state of the compute environment. The valid values are
            `ENABLED` or `DISABLED`.


            If the state is `ENABLED`, then the Batch scheduler can attempt to place
            jobs from an associated job queue on the compute resources within the
            environment. If the compute environment is managed, then it can scale
            its instances out or in automatically based on the job queue demand.


            If the state is `DISABLED`, then the Batch scheduler doesn''t attempt
            to place jobs within the environment. Jobs in a `STARTING` or `RUNNING`
            state continue to progress normally. Managed compute environments in the
            `DISABLED` state don''t scale out.


            Compute environments in a `DISABLED` state may continue to incur billing
            charges. To prevent additional charges, turn off and then delete the compute
            environment. For more information, see [State](https://docs.aws.amazon.com/batch/latest/userguide/compute_environment_parameters.html#compute_environment_state)
            in the _Batch User Guide_.


            When an instance is idle, the instance scales down to the `minvCpus` value.
            However, the instance size doesn''t change. For example, consider a `c5.8xlarge`
            instance with a `minvCpus` value of `4` and a `desiredvCpus` value of
            `36`. This instance doesn''t scale down to a `c5.large` instance.'
        status:
          allOf:
          - $ref: '#/components/schemas/CEStatus'
          description: The current status of the compute environment (for example,
            `CREATING` or `VALID`).
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short, human-readable string to provide additional details
            for the current status of the compute environment.
        computeResources:
          allOf:
          - $ref: '#/components/schemas/ComputeResource'
          description: The compute resources defined for the compute environment.
            For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html)
            in the _Batch User Guide_.
        serviceRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The service role that's associated with the compute environment
            that allows Batch to make calls to Amazon Web Services API operations
            on your behalf. For more information, see [Batch service IAM role](https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html)
            in the _Batch User Guide_.
        updatePolicy:
          allOf:
          - $ref: '#/components/schemas/UpdatePolicy'
          description: Specifies the infrastructure update policy for the compute
            environment. For more information about infrastructure updates, see [Updating
            compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.
        eksConfiguration:
          allOf:
          - $ref: '#/components/schemas/EksConfiguration'
          description: The configuration for the Amazon EKS cluster that supports
            the Batch compute environment. Only specify this parameter if the `containerOrchestrationType`
            is `EKS`.
        containerOrchestrationType:
          allOf:
          - $ref: '#/components/schemas/OrchestrationType'
          description: The orchestration type of the compute environment. The valid
            values are `ECS` (default) or `EKS`.
        uuid:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Unique identifier for the compute environment.
        context:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Reserved.
      required:
      - computeEnvironmentName
      - computeEnvironmentArn
      description: An object that represents an Batch compute environment.
    ComputeEnvironmentDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ComputeEnvironmentDetail'
    ComputeEnvironmentOrder:
      type: object
      properties:
        order:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The order of the compute environment. Compute environments
            are tried in ascending order. For example, if two compute environments
            are associated with a job queue, the compute environment with a lower
            `order` integer value is tried for job placement first.
        computeEnvironment:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the compute environment.
      required:
      - order
      - computeEnvironment
      description: 'The order that compute environments are tried in for job placement
        within a queue. Compute environments are tried in ascending order. For example,
        if two compute environments are associated with a job queue, the compute environment
        with a lower order integer value is tried for job placement first. Compute
        environments must be in the `VALID` state before you can associate them with
        a job queue. All of the compute environments must be either EC2 (`EC2` or
        `SPOT`) or Fargate (`FARGATE` or `FARGATE_SPOT`); Amazon EC2 and Fargate compute
        environments can''t be mixed.


        All compute environments that are associated with a job queue must share the
        same architecture. Batch doesn''t support mixing compute environment architecture
        types in a single job queue.'
    ComputeEnvironmentOrders:
      type: array
      items:
        $ref: '#/components/schemas/ComputeEnvironmentOrder'
    ComputeResource:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/CRType'
          description: 'The type of compute environment: `EC2`, `SPOT`, `FARGATE`,
            or `FARGATE_SPOT`. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html)
            in the _Batch User Guide_.


            If you choose `SPOT`, you must also specify an Amazon EC2 Spot Fleet role
            with the `spotIamFleetRole` parameter. For more information, see [Amazon
            EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html)
            in the _Batch User Guide_.'
        allocationStrategy:
          allOf:
          - $ref: '#/components/schemas/CRAllocationStrategy'
          description: "The allocation strategy to use for the compute resource if\
            \ not enough instances of the best fitting instance type can be allocated.\
            \ This might be because of availability of the instance type in the Region\
            \ or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html).\
            \ For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html)\
            \ in the _Batch User Guide_.\n\nThis parameter isn't applicable to jobs\
            \ that are running on Fargate resources. Don't specify it.\n\nBEST_FIT\
            \ (default)\n\n    \n\nBatch selects an instance type that best fits the\
            \ needs of the jobs with a preference for the lowest-cost instance type.\
            \ If additional instances of the selected instance type aren't available,\
            \ Batch waits for the additional instances to be available. If there aren't\
            \ enough instances available or the user is reaching [Amazon EC2 service\
            \ limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html),\
            \ additional jobs aren't run until the currently running jobs are completed.\
            \ This allocation strategy keeps costs lower but can limit scaling. If\
            \ you're using Spot Fleets with `BEST_FIT`, the Spot Fleet IAM Role must\
            \ be specified. Compute resources that use a `BEST_FIT` allocation strategy\
            \ don't support infrastructure updates and can't update some parameters.\
            \ For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)\
            \ in the _Batch User Guide_.\n\nBEST_FIT_PROGRESSIVE\n\n    \n\nBatch\
            \ selects additional instance types that are large enough to meet the\
            \ requirements of the jobs in the queue. Its preference is for instance\
            \ types with lower cost vCPUs. If additional instances of the previously\
            \ selected instance types aren't available, Batch selects new instance\
            \ types.\n\nSPOT_CAPACITY_OPTIMIZED\n\n    \n\nBatch selects one or more\
            \ instance types that are large enough to meet the requirements of the\
            \ jobs in the queue. Its preference is for instance types that are less\
            \ likely to be interrupted. This allocation strategy is only available\
            \ for Spot Instance compute resources.\n\nSPOT_PRICE_CAPACITY_OPTIMIZED\n\
            \n    \n\nThe price and capacity optimized allocation strategy looks at\
            \ both price and capacity to select the Spot Instance pools that are the\
            \ least likely to be interrupted and have the lowest possible price. This\
            \ allocation strategy is only available for Spot Instance compute resources.\n\
            \nWith `BEST_FIT_PROGRESSIVE`,`SPOT_CAPACITY_OPTIMIZED` and `SPOT_PRICE_CAPACITY_OPTIMIZED`\
            \ (recommended) strategies using On-Demand or Spot Instances, and the\
            \ `BEST_FIT` strategy using Spot Instances, Batch might need to exceed\
            \ `maxvCpus` to meet your capacity requirements. In this event, Batch\
            \ never exceeds `maxvCpus` by more than a single instance."
        minvCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The minimum number of vCPUs that a compute environment should
            maintain (even if the compute environment is `DISABLED`).


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        maxvCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The maximum number of vCPUs that a compute environment can
            support.


            With `BEST_FIT_PROGRESSIVE`,`SPOT_CAPACITY_OPTIMIZED` and `SPOT_PRICE_CAPACITY_OPTIMIZED`
            (recommended) strategies using On-Demand or Spot Instances, and the `BEST_FIT`
            strategy using Spot Instances, Batch might need to exceed `maxvCpus` to
            meet your capacity requirements. In this event, Batch never exceeds `maxvCpus`
            by more than a single instance.'
        desiredvCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The desired number of vCPUS in the compute environment. Batch
            modifies this value between the minimum and maximum values based on job
            queue demand.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        instanceTypes:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The instances types that can be launched. You can specify
            instance families to launch any instance type within those families (for
            example, `c5` or `p3`), or you can specify specific sizes within a family
            (such as `c5.8xlarge`). You can also choose `optimal` to select instance
            types (from the C4, M4, and R4 instance families) that match the demand
            of your job queues.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.


            When you create a compute environment, the instance types that you select
            for the compute environment must share the same architecture. For example,
            you can''t mix x86 and ARM instances in the same compute environment.


            Currently, `optimal` uses instance types from the C4, M4, and R4 instance
            families. In Regions that don''t have instance types from those instance
            families, instance types from the C5, M5, and R5 instance families are
            used.'
        imageId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon Machine Image (AMI) ID used for instances launched
            in the compute environment. This parameter is overridden by the `imageIdOverride`
            member of the `Ec2Configuration` structure.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.


            The AMI that you choose for a compute environment must match the architecture
            of the instance types that you intend to use for that compute environment.
            For example, if your compute environment uses A1 instance types, the compute
            resource AMI that you choose must support ARM instances. Amazon ECS vends
            both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI.
            For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html)
            in the _Amazon Elastic Container Service Developer Guide_.'
        subnets:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The VPC subnets where the compute resources are launched.
            These subnets must be within the same VPC. Fargate compute resources can
            contain up to 16 subnets. For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)
            in the _Amazon VPC User Guide_.


            Batch on Amazon EC2 and Batch on Amazon EKS support Local Zones. For more
            information, see [ Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones)
            in the _Amazon EC2 User Guide for Linux Instances_ , [Amazon EKS and Amazon
            Web Services Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html)
            in the _Amazon EKS User Guide_ and [ Amazon ECS clusters in Local Zones,
            Wavelength Zones, and Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones)
            in the _Amazon ECS Developer Guide_.


            Batch on Fargate doesn''t currently support Local Zones.'
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The Amazon EC2 security groups that are associated with instances
            launched in the compute environment. One or more security groups must
            be specified, either in `securityGroupIds` or using a launch template
            referenced in `launchTemplate`. This parameter is required for jobs that
            are running on Fargate resources and must contain at least one security
            group. Fargate doesn't support launch templates. If security groups are
            specified using both `securityGroupIds` and `launchTemplate`, the values
            in `securityGroupIds` are used.
        ec2KeyPair:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon EC2 key pair that''s used for instances launched
            in the compute environment. You can use this key pair to log in to your
            instances with SSH.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        instanceRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon ECS instance profile applied to Amazon EC2 instances
            in a compute environment. This parameter is required for Amazon EC2 instances
            types. You can specify the short name or full Amazon Resource Name (ARN)
            of an instance profile. For example, ` _ecsInstanceRole_ ` or `arn:aws:iam::__:instance-profile/_ecsInstanceRole_
            `. For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: 'Key-value pair tags to be applied to Amazon EC2 resources
            that are launched in the compute environment. For Batch, these take the
            form of `"String1": "String2"`, where `String1` is the tag key and `String2`
            is the tag value (for example, `{ "Name": "Batch Instance - C4OnDemand"
            }`). This is helpful for recognizing your Batch instances in the Amazon
            EC2 console. Updating these tags requires an infrastructure update to
            the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_. These tags aren''t seen when using the Batch
            `ListTagsForResource` API operation.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        placementGroup:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon EC2 placement group to associate with your compute
            resources. If you intend to submit multi-node parallel jobs to your compute
            environment, you should consider creating a cluster placement group and
            associate it with your compute resources. This keeps your multi-node parallel
            job on a logical grouping of instances within a single Availability Zone
            with high network flow potential. For more information, see [Placement
            groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html)
            in the _Amazon EC2 User Guide for Linux Instances_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        bidPercentage:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The maximum percentage that a Spot Instance price can be when
            compared with the On-Demand price for that instance type before instances
            are launched. For example, if your maximum percentage is 20%, then the
            Spot price must be less than 20% of the current On-Demand price for that
            Amazon EC2 instance. You always pay the lowest (market) price and never
            more than your maximum percentage. If you leave this field empty, the
            default value is 100% of the On-Demand price. For most use cases, we recommend
            leaving this field empty.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        spotIamFleetRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet
            IAM role applied to a `SPOT` compute environment. This role is required
            if the allocation strategy set to `BEST_FIT` or if the allocation strategy
            isn''t specified. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.


            To tag your Spot Instances on creation, the Spot Fleet IAM role specified
            here must use the newer **AmazonEC2SpotFleetTaggingRole** managed policy.
            The previously recommended **AmazonEC2SpotFleetRole** managed policy doesn''t
            have the required permissions to tag Spot Instances. For more information,
            see [Spot instances not tagged on creation](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag)
            in the _Batch User Guide_.'
        launchTemplate:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateSpecification'
          description: 'The launch template to use for your compute resources. Any
            other compute resource parameters that you specify in a [CreateComputeEnvironment](https://docs.aws.amazon.com/batch/latest/APIReference/API_CreateComputeEnvironment.html)
            API operation override the same parameters in the launch template. You
            must specify either the launch template ID or launch template name in
            the request, but not both. For more information, see [Launch template
            support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        ec2Configuration:
          allOf:
          - $ref: '#/components/schemas/Ec2ConfigurationList'
          description: 'Provides information that''s used to select Amazon Machine
            Images (AMIs) for Amazon EC2 instances in the compute environment. If
            `Ec2Configuration` isn''t specified, the default is `ECS_AL2`.


            One or two values can be provided.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
      required:
      - type
      - maxvCpus
      - subnets
      description: An object that represents an Batch compute resource. For more information,
        see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html)
        in the _Batch User Guide_.
    ComputeResourceUpdate:
      type: object
      properties:
        minvCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The minimum number of vCPUs that an environment should maintain
            (even if the compute environment is `DISABLED`).


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        maxvCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The maximum number of Amazon EC2 vCPUs that an environment
            can reach.


            With `BEST_FIT_PROGRESSIVE`,`SPOT_CAPACITY_OPTIMIZED` and `SPOT_PRICE_CAPACITY_OPTIMIZED`
            (recommended) strategies using On-Demand or Spot Instances, and the `BEST_FIT`
            strategy using Spot Instances, Batch might need to exceed `maxvCpus` to
            meet your capacity requirements. In this event, Batch never exceeds `maxvCpus`
            by more than a single instance.'
        desiredvCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The desired number of vCPUS in the compute environment. Batch
            modifies this value between the minimum and maximum values based on job
            queue demand.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.


            Batch doesn''t support changing the desired number of vCPUs of an existing
            compute environment. Don''t specify this parameter for compute environments
            using Amazon EKS clusters.


            When you update the `desiredvCpus` setting, the value must be between
            the `minvCpus` and `maxvCpus` values.


            Additionally, the updated `desiredvCpus` value must be greater than or
            equal to the current `desiredvCpus` value. For more information, see [Troubleshooting
            Batch](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#error-desired-vcpus-update)
            in the _Batch User Guide_.'
        subnets:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The VPC subnets where the compute resources are launched.
            Fargate compute resources can contain up to 16 subnets. For Fargate compute
            resources, providing an empty list will be handled as if this parameter
            wasn''t specified and no change is made. For Amazon EC2 compute resources,
            providing an empty list removes the VPC subnets from the compute resource.
            For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)
            in the _Amazon VPC User Guide_.


            When updating a compute environment, changing the VPC subnets requires
            an infrastructure update of the compute environment. For more information,
            see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            Batch on Amazon EC2 and Batch on Amazon EKS support Local Zones. For more
            information, see [ Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones)
            in the _Amazon EC2 User Guide for Linux Instances_ , [Amazon EKS and Amazon
            Web Services Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html)
            in the _Amazon EKS User Guide_ and [ Amazon ECS clusters in Local Zones,
            Wavelength Zones, and Amazon Web Services Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones)
            in the _Amazon ECS Developer Guide_.


            Batch on Fargate doesn''t currently support Local Zones.'
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The Amazon EC2 security groups that are associated with instances
            launched in the compute environment. This parameter is required for Fargate
            compute resources, where it can contain up to 5 security groups. For Fargate
            compute resources, providing an empty list is handled as if this parameter
            wasn''t specified and no change is made. For Amazon EC2 compute resources,
            providing an empty list removes the security groups from the compute resource.


            When updating a compute environment, changing the Amazon EC2 security
            groups requires an infrastructure update of the compute environment. For
            more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.'
        allocationStrategy:
          allOf:
          - $ref: '#/components/schemas/CRUpdateAllocationStrategy'
          description: "The allocation strategy to use for the compute resource if\
            \ there's not enough instances of the best fitting instance type that\
            \ can be allocated. This might be because of availability of the instance\
            \ type in the Region or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html).\
            \ For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html)\
            \ in the _Batch User Guide_.\n\nWhen updating a compute environment, changing\
            \ the allocation strategy requires an infrastructure update of the compute\
            \ environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)\
            \ in the _Batch User Guide_. `BEST_FIT` isn't supported when updating\
            \ a compute environment.\n\nThis parameter isn't applicable to jobs that\
            \ are running on Fargate resources. Don't specify it.\n\nBEST_FIT_PROGRESSIVE\n\
            \n    \n\nBatch selects additional instance types that are large enough\
            \ to meet the requirements of the jobs in the queue. Its preference is\
            \ for instance types with lower cost vCPUs. If additional instances of\
            \ the previously selected instance types aren't available, Batch selects\
            \ new instance types.\n\nSPOT_CAPACITY_OPTIMIZED\n\n    \n\nBatch selects\
            \ one or more instance types that are large enough to meet the requirements\
            \ of the jobs in the queue. Its preference is for instance types that\
            \ are less likely to be interrupted. This allocation strategy is only\
            \ available for Spot Instance compute resources.\n\nSPOT_PRICE_CAPACITY_OPTIMIZED\n\
            \n    \n\nThe price and capacity optimized allocation strategy looks at\
            \ both price and capacity to select the Spot Instance pools that are the\
            \ least likely to be interrupted and have the lowest possible price. This\
            \ allocation strategy is only available for Spot Instance compute resources.\n\
            \nWith `BEST_FIT_PROGRESSIVE`,`SPOT_CAPACITY_OPTIMIZED` and `SPOT_PRICE_CAPACITY_OPTIMIZED`\
            \ (recommended) strategies using On-Demand or Spot Instances, and the\
            \ `BEST_FIT` strategy using Spot Instances, Batch might need to exceed\
            \ `maxvCpus` to meet your capacity requirements. In this event, Batch\
            \ never exceeds `maxvCpus` by more than a single instance."
        instanceTypes:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The instances types that can be launched. You can specify
            instance families to launch any instance type within those families (for
            example, `c5` or `p3`), or you can specify specific sizes within a family
            (such as `c5.8xlarge`). You can also choose `optimal` to select instance
            types (from the C4, M4, and R4 instance families) that match the demand
            of your job queues.


            When updating a compute environment, changing this setting requires an
            infrastructure update of the compute environment. For more information,
            see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.


            When you create a compute environment, the instance types that you select
            for the compute environment must share the same architecture. For example,
            you can''t mix x86 and ARM instances in the same compute environment.


            Currently, `optimal` uses instance types from the C4, M4, and R4 instance
            families. In Regions that don''t have instance types from those instance
            families, instance types from the C5, M5, and R5 instance families are
            used.'
        ec2KeyPair:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon EC2 key pair that''s used for instances launched
            in the compute environment. You can use this key pair to log in to your
            instances with SSH. To remove the Amazon EC2 key pair, set this value
            to an empty string.


            When updating a compute environment, changing the Amazon EC2 key pair
            requires an infrastructure update of the compute environment. For more
            information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        instanceRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon ECS instance profile applied to Amazon EC2 instances
            in a compute environment. Required for Amazon EC2 instances. You can specify
            the short name or full Amazon Resource Name (ARN) of an instance profile.
            For example, ` _ecsInstanceRole_ ` or `arn:aws:iam::__:instance-profile/_ecsInstanceRole_
            `. For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html)
            in the _Batch User Guide_.


            When updating a compute environment, changing this setting requires an
            infrastructure update of the compute environment. For more information,
            see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: 'Key-value pair tags to be applied to Amazon EC2 resources
            that are launched in the compute environment. For Batch, these take the
            form of `"String1": "String2"`, where `String1` is the tag key and `String2`
            is the tag value (for example, `{ "Name": "Batch Instance - C4OnDemand"
            }`). This is helpful for recognizing your Batch instances in the Amazon
            EC2 console. These tags aren''t seen when using the Batch `ListTagsForResource`
            API operation.


            When updating a compute environment, changing this setting requires an
            infrastructure update of the compute environment. For more information,
            see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        placementGroup:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon EC2 placement group to associate with your compute
            resources. If you intend to submit multi-node parallel jobs to your compute
            environment, you should consider creating a cluster placement group and
            associate it with your compute resources. This keeps your multi-node parallel
            job on a logical grouping of instances within a single Availability Zone
            with high network flow potential. For more information, see [Placement
            groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html)
            in the _Amazon EC2 User Guide for Linux Instances_.


            When updating a compute environment, changing the placement group requires
            an infrastructure update of the compute environment. For more information,
            see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        bidPercentage:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The maximum percentage that a Spot Instance price can be when
            compared with the On-Demand price for that instance type before instances
            are launched. For example, if your maximum percentage is 20%, the Spot
            price must be less than 20% of the current On-Demand price for that Amazon
            EC2 instance. You always pay the lowest (market) price and never more
            than your maximum percentage. For most use cases, we recommend leaving
            this field empty.


            When updating a compute environment, changing the bid percentage requires
            an infrastructure update of the compute environment. For more information,
            see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        launchTemplate:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateSpecification'
          description: 'The updated launch template to use for your compute resources.
            You must specify either the launch template ID or launch template name
            in the request, but not both. For more information, see [Launch template
            support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html)
            in the _Batch User Guide_. To remove the custom launch template and use
            the default launch template, set `launchTemplateId` or `launchTemplateName`
            member of the launch template specification to an empty string. Removing
            the launch template from a compute environment will not remove the AMI
            specified in the launch template. In order to update the AMI specified
            in a launch template, the `updateToLatestImageVersion` parameter must
            be set to `true`.


            When updating a compute environment, changing the launch template requires
            an infrastructure update of the compute environment. For more information,
            see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        ec2Configuration:
          allOf:
          - $ref: '#/components/schemas/Ec2ConfigurationList'
          description: 'Provides information used to select Amazon Machine Images
            (AMIs) for Amazon EC2 instances in the compute environment. If `Ec2Configuration`
            isn''t specified, the default is `ECS_AL2`.


            When updating a compute environment, changing this setting requires an
            infrastructure update of the compute environment. For more information,
            see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_. To remove the Amazon EC2 configuration and
            any custom AMI ID specified in `imageIdOverride`, set this value to an
            empty string.


            One or two values can be provided.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.'
        updateToLatestImageVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether the AMI ID is updated to the latest one
            that''s supported by Batch when the compute environment has an infrastructure
            update. The default value is `false`.


            An AMI ID can either be specified in the `imageId` or `imageIdOverride`
            parameters or be determined by the launch template that''s specified in
            the `launchTemplate` parameter. If an AMI ID is specified any of these
            ways, this parameter is ignored. For more information about to update
            AMI IDs during an infrastructure update, see [Updating the AMI ID](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html#updating-compute-environments-ami)
            in the _Batch User Guide_.


            When updating a compute environment, changing this setting requires an
            infrastructure update of the compute environment. For more information,
            see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.'
        type:
          allOf:
          - $ref: '#/components/schemas/CRType'
          description: 'The type of compute environment: `EC2`, `SPOT`, `FARGATE`,
            or `FARGATE_SPOT`. For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html)
            in the _Batch User Guide_.


            If you choose `SPOT`, you must also specify an Amazon EC2 Spot Fleet role
            with the `spotIamFleetRole` parameter. For more information, see [Amazon
            EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html)
            in the _Batch User Guide_.


            When updating a compute environment, changing the type of a compute environment
            requires an infrastructure update of the compute environment. For more
            information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.'
        imageId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon Machine Image (AMI) ID used for instances launched
            in the compute environment. This parameter is overridden by the `imageIdOverride`
            member of the `Ec2Configuration` structure. To remove the custom AMI ID
            and use the default AMI ID, set this value to an empty string.


            When updating a compute environment, changing the AMI ID requires an infrastructure
            update of the compute environment. For more information, see [Updating
            compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t specify it.


            The AMI that you choose for a compute environment must match the architecture
            of the instance types that you intend to use for that compute environment.
            For example, if your compute environment uses A1 instance types, the compute
            resource AMI that you choose must support ARM instances. Amazon ECS vends
            both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI.
            For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html)
            in the _Amazon Elastic Container Service Developer Guide_.'
      description: An object that represents the attributes of a compute environment
        that can be updated. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
        in the _Batch User Guide_.
    ConsumableResourceList:
      type: array
      items:
        $ref: '#/components/schemas/ConsumableResourceRequirement'
    ConsumableResourceProperties:
      type: object
      properties:
        consumableResourceList:
          allOf:
          - $ref: '#/components/schemas/ConsumableResourceList'
          description: The list of consumable resources required by a job.
      description: Contains a list of consumable resources required by a job.
    ConsumableResourceRequirement:
      type: object
      properties:
        consumableResource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name or ARN of the consumable resource.
        quantity:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The quantity of the consumable resource that is needed.
      description: Information about a consumable resource required to run a job.
    ConsumableResourceSummary:
      type: object
      properties:
        consumableResourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the consumable resource.
        consumableResourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the consumable resource.
        totalQuantity:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total amount of the consumable resource that is available.
        inUseQuantity:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The amount of the consumable resource that is currently in
            use.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "Indicates whether the resource is available to be re-used\
            \ after a job completes. Can be one of:\n\n  * `REPLENISHABLE`\n\n  *\
            \ `NON_REPLENISHABLE`"
      required:
      - consumableResourceArn
      - consumableResourceName
      description: Current information about a consumable resource.
    ConsumableResourceSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ConsumableResourceSummary'
    ContainerDetail:
      type: object
      properties:
        image:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The image used to start the container.
        vcpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The number of vCPUs reserved for the container. For jobs that
            run on Amazon EC2 resources, you can specify the vCPU requirement for
            the job using `resourceRequirements`, but you can''t specify the vCPU
            requirements in both the `vcpus` and `resourceRequirements` object. This
            parameter maps to `CpuShares` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--cpu-shares` option to [docker run](https://docs.docker.com/engine/reference/run/).
            Each vCPU is equivalent to 1,024 CPU shares. You must specify at least
            one vCPU. This is required but can be specified in several places. It
            must be specified for each node at least once.


            This parameter isn''t applicable to jobs that run on Fargate resources.
            For jobs that run on Fargate resources, you must specify the vCPU requirement
            for the job using `resourceRequirements`.'
        memory:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: For jobs running on Amazon EC2 resources that didn't specify
            memory requirements using `resourceRequirements`, the number of MiB of
            memory reserved for the job. For other jobs, including all run on Fargate
            resources, see `resourceRequirements`.
        command:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The command that's passed to the container.
        jobRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) that's associated with the job
            when run.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the execution role that Batch
            can assume. For more information, see [Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html)
            in the _Batch User Guide_.
        volumes:
          allOf:
          - $ref: '#/components/schemas/Volumes'
          description: A list of volumes that are associated with the job.
        environment:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariables'
          description: 'The environment variables to pass to a container.


            Environment variables cannot start with "`AWS_BATCH`". This naming convention
            is reserved for variables that Batch sets.'
        mountPoints:
          allOf:
          - $ref: '#/components/schemas/MountPoints'
          description: The mount points for data volumes in your container.
        readonlyRootFilesystem:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: When this parameter is true, the container is given read-only
            access to its root file system. This parameter maps to `ReadonlyRootfs`
            in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--read-only` option to [ `docker run` ](https://docs.docker.com/engine/reference/commandline/run/).
        ulimits:
          allOf:
          - $ref: '#/components/schemas/Ulimits'
          description: 'A list of `ulimit` values to set in the container. This parameter
            maps to `Ulimits` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--ulimit` option to [docker run](https://docs.docker.com/engine/reference/run/).


            This parameter isn''t applicable to jobs that are running on Fargate resources.'
        privileged:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'When this parameter is true, the container is given elevated
            permissions on the host container instance (similar to the `root` user).
            The default value is `false`.


            This parameter isn''t applicable to jobs that are running on Fargate resources
            and shouldn''t be provided, or specified as `false`.'
        user:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user name to use inside the container. This parameter maps
            to `User` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--user` option to [docker run](https://docs.docker.com/engine/reference/run/).
        exitCode:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The exit code returned upon completion.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short (255 max characters) human-readable string to provide
            additional details for a running or stopped container.
        containerInstanceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the container instance that
            the container is running on.
        taskArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the Amazon ECS task that's
            associated with the container job. Each container attempt receives a task
            ARN when they reach the `STARTING` status.
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon CloudWatch Logs log stream that's associated
            with the container. The log group for Batch jobs is `/aws/batch/job`.
            Each container attempt receives a log stream name when they reach the
            `RUNNING` status.
        instanceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The instance type of the underlying host infrastructure of
            a multi-node parallel job.


            This parameter isn''t applicable to jobs that are running on Fargate resources.'
        networkInterfaces:
          allOf:
          - $ref: '#/components/schemas/NetworkInterfaceList'
          description: The network interfaces that are associated with the job.
        resourceRequirements:
          allOf:
          - $ref: '#/components/schemas/ResourceRequirements'
          description: The type and amount of resources to assign to a container.
            The supported resources include `GPU`, `MEMORY`, and `VCPU`.
        linuxParameters:
          allOf:
          - $ref: '#/components/schemas/LinuxParameters'
          description: Linux-specific modifications that are applied to the container,
            such as details for device mappings.
        logConfiguration:
          allOf:
          - $ref: '#/components/schemas/LogConfiguration'
          description: 'The log configuration specification for the container.


            This parameter maps to `LogConfig` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--log-driver` option to [docker run](https://docs.docker.com/engine/reference/run/).
            By default, containers use the same logging driver that the Docker daemon
            uses. However, the container might use a different logging driver than
            the Docker daemon by specifying a log driver with this parameter in the
            container definition. To use a different logging driver for a container,
            the log system must be configured properly on the container instance.
            Or, alternatively, it must be configured on a different log server for
            remote logging options. For more information on the options for different
            supported log drivers, see [Configure logging drivers](https://docs.docker.com/engine/admin/logging/overview/)
            in the Docker documentation.


            Batch currently supports a subset of the logging drivers available to
            the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html)
            data type). Additional log drivers might be available in future releases
            of the Amazon ECS container agent.


            This parameter requires version 1.18 of the Docker Remote API or greater
            on your container instance. To check the Docker Remote API version on
            your container instance, log in to your container instance and run the
            following command: `sudo docker version | grep "Server API version"`


            The Amazon ECS container agent running on a container instance must register
            the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS`
            environment variable before containers placed on that instance can use
            these log configuration options. For more information, see [Amazon ECS
            container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
            in the _Amazon Elastic Container Service Developer Guide_.'
        secrets:
          allOf:
          - $ref: '#/components/schemas/SecretList'
          description: The secrets to pass to the container. For more information,
            see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html)
            in the _Batch User Guide_.
        networkConfiguration:
          allOf:
          - $ref: '#/components/schemas/NetworkConfiguration'
          description: The network configuration for jobs that are running on Fargate
            resources. Jobs that are running on Amazon EC2 resources must not specify
            this parameter.
        fargatePlatformConfiguration:
          allOf:
          - $ref: '#/components/schemas/FargatePlatformConfiguration'
          description: The platform configuration for jobs that are running on Fargate
            resources. Jobs that are running on Amazon EC2 resources must not specify
            this parameter.
        ephemeralStorage:
          allOf:
          - $ref: '#/components/schemas/EphemeralStorage'
          description: The amount of ephemeral storage allocated for the task. This
            parameter is used to expand the total amount of ephemeral storage available,
            beyond the default amount, for tasks hosted on Fargate.
        runtimePlatform:
          allOf:
          - $ref: '#/components/schemas/RuntimePlatform'
          description: An object that represents the compute environment architecture
            for Batch jobs on Fargate.
        repositoryCredentials:
          allOf:
          - $ref: '#/components/schemas/RepositoryCredentials'
          description: The private repository authentication credentials to use.
        enableExecuteCommand:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Determines whether execute command functionality is turned
            on for this task. If `true`, execute command functionality is turned on
            all the containers in the task.
      description: An object that represents the details of a container that's part
        of a job.
    ContainerOverrides:
      type: object
      properties:
        vcpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: This parameter is deprecated, use `resourceRequirements` to
            override the `vcpus` parameter that's set in the job definition. It's
            not supported for jobs running on Fargate resources. For jobs that run
            on Amazon EC2 resources, it overrides the `vcpus` parameter set in the
            job definition, but doesn't override any vCPU requirement specified in
            the `resourceRequirements` structure in the job definition. To override
            vCPU requirements that are specified in the `resourceRequirements` structure
            in the job definition, `resourceRequirements` must be specified in the
            `SubmitJob` request, with `type` set to `VCPU` and `value` set to the
            new value. For more information, see [Can't override job definition resource
            requirements](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements)
            in the _Batch User Guide_.
        memory:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: This parameter is deprecated, use `resourceRequirements` to
            override the memory requirements specified in the job definition. It's
            not supported for jobs running on Fargate resources. For jobs that run
            on Amazon EC2 resources, it overrides the `memory` parameter set in the
            job definition, but doesn't override any memory requirement that's specified
            in the `resourceRequirements` structure in the job definition. To override
            memory requirements that are specified in the `resourceRequirements` structure
            in the job definition, `resourceRequirements` must be specified in the
            `SubmitJob` request, with `type` set to `MEMORY` and `value` set to the
            new value. For more information, see [Can't override job definition resource
            requirements](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements)
            in the _Batch User Guide_.
        command:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The command to send to the container that overrides the default
            command from the Docker image or the job definition.


            This parameter can''t contain an empty string.'
        instanceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The instance type to use for a multi-node parallel job.


            This parameter isn''t applicable to single-node container jobs or jobs
            that run on Fargate resources, and shouldn''t be provided.'
        environment:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariables'
          description: 'The environment variables to send to the container. You can
            add new environment variables, which are added to the container at launch,
            or you can override the existing environment variables from the Docker
            image or the job definition.


            Environment variables cannot start with "`AWS_BATCH`". This naming convention
            is reserved for variables that Batch sets.'
        resourceRequirements:
          allOf:
          - $ref: '#/components/schemas/ResourceRequirements'
          description: The type and amount of resources to assign to a container.
            This overrides the settings in the job definition. The supported resources
            include `GPU`, `MEMORY`, and `VCPU`.
      description: 'The overrides that should be sent to a container.


        For information about using Batch overrides when you connect event sources
        to targets, see [BatchContainerOverrides](https://docs.aws.amazon.com/eventbridge/latest/pipes-reference/API_BatchContainerOverrides.html).'
    ContainerProperties:
      type: object
      properties:
        image:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "Required. The image used to start a container. This string\
            \ is passed directly to the Docker daemon. Images in the Docker Hub registry\
            \ are available by default. Other repositories are specified with ` _repository-url_\
            \ /_image_ :_tag_ `. It can be 255 characters long. It can contain uppercase\
            \ and lowercase letters, numbers, hyphens (-), underscores (_), colons\
            \ (:), periods (.), forward slashes (/), and number signs (#). This parameter\
            \ maps to `Image` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)\
            \ section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)\
            \ and the `IMAGE` parameter of [docker run](https://docs.docker.com/engine/reference/run/).\n\
            \nDocker image architecture must match the processor architecture of the\
            \ compute resources that they're scheduled on. For example, ARM-based\
            \ Docker images can only run on ARM-based compute resources.\n\n  * Images\
            \ in Amazon ECR Public repositories use the full `registry/repository[:tag]`\
            \ or `registry/repository[@digest]` naming conventions. For example, `public.ecr.aws/_registry_alias_\
            \ /_my-web-app_ :_latest_ `.\n\n  * Images in Amazon ECR repositories\
            \ use the full registry and repository URI (for example, `123456789012.dkr.ecr..amazonaws.com/`).\n\
            \n  * Images in official repositories on Docker Hub use a single name\
            \ (for example, `ubuntu` or `mongo`).\n\n  * Images in other repositories\
            \ on Docker Hub are qualified with an organization name (for example,\
            \ `amazon/amazon-ecs-agent`).\n\n  * Images in other online repositories\
            \ are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu`)."
        vcpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'This parameter is deprecated, use `resourceRequirements` to
            specify the vCPU requirements for the job definition. It''s not supported
            for jobs running on Fargate resources. For jobs running on Amazon EC2
            resources, it specifies the number of vCPUs reserved for the job.


            Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to `CpuShares`
            in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--cpu-shares` option to [docker run](https://docs.docker.com/engine/reference/run/).
            The number of vCPUs must be specified but can be specified in several
            places. You must specify it at least once for each node.'
        memory:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: This parameter is deprecated, use `resourceRequirements` to
            specify the memory requirements for the job definition. It's not supported
            for jobs running on Fargate resources. For jobs that run on Amazon EC2
            resources, it specifies the memory hard limit (in MiB) for a container.
            If your container attempts to exceed the specified number, it's terminated.
            You must specify at least 4 MiB of memory for a job using this parameter.
            The memory hard limit can be specified in several places. It must be specified
            for each node at least once.
        command:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The command that's passed to the container. This parameter
            maps to `Cmd` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `COMMAND` parameter to [docker run](https://docs.docker.com/engine/reference/run/).
            For more information, see <https://docs.docker.com/engine/reference/builder/#cmd>.
        jobRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the IAM role that the container
            can assume for Amazon Web Services permissions. For more information,
            see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html)
            in the _Amazon Elastic Container Service Developer Guide_.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the execution role that Batch
            can assume. For jobs that run on Fargate resources, you must provide an
            execution role. For more information, see [Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html)
            in the _Batch User Guide_.
        volumes:
          allOf:
          - $ref: '#/components/schemas/Volumes'
          description: A list of data volumes used in a job.
        environment:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariables'
          description: 'The environment variables to pass to a container. This parameter
            maps to `Env` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--env` option to [docker run](https://docs.docker.com/engine/reference/run/).


            We don''t recommend using plaintext environment variables for sensitive
            information, such as credential data.


            Environment variables cannot start with "`AWS_BATCH`". This naming convention
            is reserved for variables that Batch sets.'
        mountPoints:
          allOf:
          - $ref: '#/components/schemas/MountPoints'
          description: The mount points for data volumes in your container. This parameter
            maps to `Volumes` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--volume` option to [docker run](https://docs.docker.com/engine/reference/run/).
        readonlyRootFilesystem:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: When this parameter is true, the container is given read-only
            access to its root file system. This parameter maps to `ReadonlyRootfs`
            in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--read-only` option to `docker run`.
        privileged:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'When this parameter is true, the container is given elevated
            permissions on the host container instance (similar to the `root` user).
            This parameter maps to `Privileged` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--privileged` option to [docker run](https://docs.docker.com/engine/reference/run/).
            The default value is false.


            This parameter isn''t applicable to jobs that are running on Fargate resources
            and shouldn''t be provided, or specified as false.'
        ulimits:
          allOf:
          - $ref: '#/components/schemas/Ulimits'
          description: 'A list of `ulimits` to set in the container. This parameter
            maps to `Ulimits` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--ulimit` option to [docker run](https://docs.docker.com/engine/reference/run/).


            This parameter isn''t applicable to jobs that are running on Fargate resources
            and shouldn''t be provided.'
        user:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user name to use inside the container. This parameter maps
            to `User` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--user` option to [docker run](https://docs.docker.com/engine/reference/run/).
        instanceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The instance type to use for a multi-node parallel job. All
            node groups in a multi-node parallel job must use the same instance type.


            This parameter isn''t applicable to single-node container jobs or jobs
            that run on Fargate resources, and shouldn''t be provided.'
        resourceRequirements:
          allOf:
          - $ref: '#/components/schemas/ResourceRequirements'
          description: The type and amount of resources to assign to a container.
            The supported resources include `GPU`, `MEMORY`, and `VCPU`.
        linuxParameters:
          allOf:
          - $ref: '#/components/schemas/LinuxParameters'
          description: Linux-specific modifications that are applied to the container,
            such as details for device mappings.
        logConfiguration:
          allOf:
          - $ref: '#/components/schemas/LogConfiguration'
          description: 'The log configuration specification for the container.


            This parameter maps to `LogConfig` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--log-driver` option to [docker run](https://docs.docker.com/engine/reference/run/).
            By default, containers use the same logging driver that the Docker daemon
            uses. However the container might use a different logging driver than
            the Docker daemon by specifying a log driver with this parameter in the
            container definition. To use a different logging driver for a container,
            the log system must be configured properly on the container instance (or
            on a different log server for remote logging options). For more information
            on the options for different supported log drivers, see [Configure logging
            drivers](https://docs.docker.com/engine/admin/logging/overview/) in the
            Docker documentation.


            Batch currently supports a subset of the logging drivers available to
            the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html)
            data type).


            This parameter requires version 1.18 of the Docker Remote API or greater
            on your container instance. To check the Docker Remote API version on
            your container instance, log in to your container instance and run the
            following command: `sudo docker version | grep "Server API version"`


            The Amazon ECS container agent running on a container instance must register
            the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS`
            environment variable before containers placed on that instance can use
            these log configuration options. For more information, see [Amazon ECS
            container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
            in the _Amazon Elastic Container Service Developer Guide_.'
        secrets:
          allOf:
          - $ref: '#/components/schemas/SecretList'
          description: The secrets for the container. For more information, see [Specifying
            sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html)
            in the _Batch User Guide_.
        networkConfiguration:
          allOf:
          - $ref: '#/components/schemas/NetworkConfiguration'
          description: The network configuration for jobs that are running on Fargate
            resources. Jobs that are running on Amazon EC2 resources must not specify
            this parameter.
        fargatePlatformConfiguration:
          allOf:
          - $ref: '#/components/schemas/FargatePlatformConfiguration'
          description: The platform configuration for jobs that are running on Fargate
            resources. Jobs that are running on Amazon EC2 resources must not specify
            this parameter.
        enableExecuteCommand:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Determines whether execute command functionality is turned
            on for this task. If `true`, execute command functionality is turned on
            all the containers in the task.
        ephemeralStorage:
          allOf:
          - $ref: '#/components/schemas/EphemeralStorage'
          description: The amount of ephemeral storage to allocate for the task. This
            parameter is used to expand the total amount of ephemeral storage available,
            beyond the default amount, for tasks hosted on Fargate.
        runtimePlatform:
          allOf:
          - $ref: '#/components/schemas/RuntimePlatform'
          description: An object that represents the compute environment architecture
            for Batch jobs on Fargate.
        repositoryCredentials:
          allOf:
          - $ref: '#/components/schemas/RepositoryCredentials'
          description: The private repository authentication credentials to use.
      description: Container properties are used for Amazon ECS based job definitions.
        These properties to describe the container that's launched as part of a job.
    ContainerSummary:
      type: object
      properties:
        exitCode:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The exit code to return upon completion.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short (255 max characters) human-readable string to provide
            additional details for a running or stopped container.
      description: An object that represents summary details of a container within
        a job.
    CreateComputeEnvironmentRequest:
      type: object
      properties:
        computeEnvironmentName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name for your compute environment. It can be up to 128
            characters long. It can contain uppercase and lowercase letters, numbers,
            hyphens (-), and underscores (_).
        type:
          allOf:
          - $ref: '#/components/schemas/CEType'
          description: 'The type of the compute environment: `MANAGED` or `UNMANAGED`.
            For more information, see [Compute Environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html)
            in the _Batch User Guide_.'
        state:
          allOf:
          - $ref: '#/components/schemas/CEState'
          description: 'The state of the compute environment. If the state is `ENABLED`,
            then the compute environment accepts jobs from a queue and can scale out
            automatically based on queues.


            If the state is `ENABLED`, then the Batch scheduler can attempt to place
            jobs from an associated job queue on the compute resources within the
            environment. If the compute environment is managed, then it can scale
            its instances out or in automatically, based on the job queue demand.


            If the state is `DISABLED`, then the Batch scheduler doesn''t attempt
            to place jobs within the environment. Jobs in a `STARTING` or `RUNNING`
            state continue to progress normally. Managed compute environments in the
            `DISABLED` state don''t scale out.


            Compute environments in a `DISABLED` state may continue to incur billing
            charges. To prevent additional charges, turn off and then delete the compute
            environment. For more information, see [State](https://docs.aws.amazon.com/batch/latest/userguide/compute_environment_parameters.html#compute_environment_state)
            in the _Batch User Guide_.


            When an instance is idle, the instance scales down to the `minvCpus` value.
            However, the instance size doesn''t change. For example, consider a `c5.8xlarge`
            instance with a `minvCpus` value of `4` and a `desiredvCpus` value of
            `36`. This instance doesn''t scale down to a `c5.large` instance.'
        unmanagedvCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The maximum number of vCPUs for an unmanaged compute environment.
            This parameter is only used for fair-share scheduling to reserve vCPU
            capacity for new share identifiers. If this parameter isn''t provided
            for a fair-share job queue, no vCPU capacity is reserved.


            This parameter is only supported when the `type` parameter is set to `UNMANAGED`.'
        computeResources:
          allOf:
          - $ref: '#/components/schemas/ComputeResource'
          description: Details about the compute resources managed by the compute
            environment. This parameter is required for managed compute environments.
            For more information, see [Compute Environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html)
            in the _Batch User Guide_.
        serviceRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The full Amazon Resource Name (ARN) of the IAM role that allows
            Batch to make calls to other Amazon Web Services services on your behalf.
            For more information, see [Batch service IAM role](https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html)
            in the _Batch User Guide_.


            If your account already created the Batch service-linked role, that role
            is used by default for your compute environment unless you specify a different
            role here. If the Batch service-linked role doesn''t exist in your account,
            and no role is specified here, the service attempts to create the Batch
            service-linked role in your account.


            If your specified role has a path other than `/`, then you must specify
            either the full role ARN (recommended) or prefix the role name with the
            path. For example, if a role with the name `bar` has a path of `/foo/`,
            specify `/foo/bar` as the role name. For more information, see [Friendly
            names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names)
            in the _IAM User Guide_.


            Depending on how you created your Batch service role, its ARN might contain
            the `service-role` path prefix. When you only specify the name of the
            service role, Batch assumes that your ARN doesn''t use the `service-role`
            path prefix. Because of this, we recommend that you specify the full ARN
            of your service role when you create compute environments.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: 'The tags that you apply to the compute environment to help
            you categorize and organize your resources. Each tag consists of a key
            and an optional value. For more information, see [Tagging Amazon Web Services
            Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
            in _Amazon Web Services General Reference_.


            These tags can be updated or removed using the [TagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_TagResource.html)
            and [UntagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_UntagResource.html)
            API operations. These tags don''t propagate to the underlying compute
            resources.'
        eksConfiguration:
          allOf:
          - $ref: '#/components/schemas/EksConfiguration'
          description: The details for the Amazon EKS cluster that supports the compute
            environment.
        context:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Reserved.
      required:
      - computeEnvironmentName
      - type
      description: Contains the parameters for `CreateComputeEnvironment`.
    CreateComputeEnvironmentResponse:
      type: object
      properties:
        computeEnvironmentName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the compute environment. It can be up to 128 characters
            long. It can contain uppercase and lowercase letters, numbers, hyphens
            (-), and underscores (_).
        computeEnvironmentArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the compute environment.
    CreateConsumableResourceRequest:
      type: object
      properties:
        consumableResourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the consumable resource. Must be unique.
        totalQuantity:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total amount of the consumable resource that is available.
            Must be non-negative.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "Indicates whether the resource is available to be re-used\
            \ after a job completes. Can be one of:\n\n  * `REPLENISHABLE` (default)\n\
            \n  * `NON_REPLENISHABLE`"
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags that you apply to the consumable resource to help
            you categorize and organize your resources. Each tag consists of a key
            and an optional value. For more information, see [Tagging your Batch resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html).
      required:
      - consumableResourceName
    CreateConsumableResourceResponse:
      type: object
      properties:
        consumableResourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the consumable resource.
        consumableResourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the consumable resource.
      required:
      - consumableResourceName
      - consumableResourceArn
    CreateJobQueueRequest:
      type: object
      properties:
        jobQueueName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the job queue. It can be up to 128 letters long.
            It can contain uppercase and lowercase letters, numbers, hyphens (-),
            and underscores (_).
        state:
          allOf:
          - $ref: '#/components/schemas/JQState'
          description: The state of the job queue. If the job queue state is `ENABLED`,
            it is able to accept jobs. If the job queue state is `DISABLED`, new jobs
            can't be added to the queue, but jobs already in the queue can finish.
        schedulingPolicyArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon Resource Name (ARN) of the fair-share scheduling
            policy. Job queues that don''t have a fair-share scheduling policy are
            scheduled in a first-in, first-out (FIFO) model. After a job queue has
            a fair-share scheduling policy, it can be replaced but can''t be removed.


            The format is `aws:_Partition_ :batch:_Region_ :_Account_ :scheduling-policy/_Name_
            `.


            An example is `aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy`.


            A job queue without a fair-share scheduling policy is scheduled as a FIFO
            job queue and can''t have a fair-share scheduling policy added. Jobs queues
            with a fair-share scheduling policy can have a maximum of 500 active share
            identifiers. When the limit has been reached, submissions of any jobs
            that add a new share identifier fail.'
        priority:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The priority of the job queue. Job queues with a higher priority
            (or a higher integer value for the `priority` parameter) are evaluated
            first when associated with the same compute environment. Priority is determined
            in descending order. For example, a job queue with a priority value of
            `10` is given scheduling preference over a job queue with a priority value
            of `1`. All of the compute environments must be either EC2 (`EC2` or `SPOT`)
            or Fargate (`FARGATE` or `FARGATE_SPOT`); EC2 and Fargate compute environments
            can't be mixed.
        computeEnvironmentOrder:
          allOf:
          - $ref: '#/components/schemas/ComputeEnvironmentOrders'
          description: 'The set of compute environments mapped to a job queue and
            their order relative to each other. The job scheduler uses this parameter
            to determine which compute environment runs a specific job. Compute environments
            must be in the `VALID` state before you can associate them with a job
            queue. You can associate up to three compute environments with a job queue.
            All of the compute environments must be either EC2 (`EC2` or `SPOT`) or
            Fargate (`FARGATE` or `FARGATE_SPOT`); EC2 and Fargate compute environments
            can''t be mixed.


            All compute environments that are associated with a job queue must share
            the same architecture. Batch doesn''t support mixing compute environment
            architecture types in a single job queue.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags that you apply to the job queue to help you categorize
            and organize your resources. Each tag consists of a key and an optional
            value. For more information, see [Tagging your Batch resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html)
            in _Batch User Guide_.
        jobStateTimeLimitActions:
          allOf:
          - $ref: '#/components/schemas/JobStateTimeLimitActions'
          description: 'The set of actions that Batch performs on jobs that remain
            at the head of the job queue in the specified state longer than specified
            times. Batch will perform each action after `maxTimeSeconds` has passed.
            (**Note** : The minimum value for maxTimeSeconds is 600 (10 minutes) and
            its maximum value is 86,400 (24 hours).)'
      required:
      - jobQueueName
      - priority
      - computeEnvironmentOrder
      description: Contains the parameters for `CreateJobQueue`.
    CreateJobQueueResponse:
      type: object
      properties:
        jobQueueName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the job queue.
        jobQueueArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job queue.
      required:
      - jobQueueName
      - jobQueueArn
    CreateSchedulingPolicyRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the fair-share scheduling policy. It can be up
            to 128 letters long. It can contain uppercase and lowercase letters, numbers,
            hyphens (-), and underscores (_).
        fairsharePolicy:
          allOf:
          - $ref: '#/components/schemas/FairsharePolicy'
          description: The fair-share scheduling policy details.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: 'The tags that you apply to the scheduling policy to help you
            categorize and organize your resources. Each tag consists of a key and
            an optional value. For more information, see [Tagging Amazon Web Services
            Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
            in _Amazon Web Services General Reference_.


            These tags can be updated or removed using the [TagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_TagResource.html)
            and [UntagResource](https://docs.aws.amazon.com/batch/latest/APIReference/API_UntagResource.html)
            API operations.'
      required:
      - name
      description: Contains the parameters for `CreateSchedulingPolicy`.
    CreateSchedulingPolicyResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the scheduling policy.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the scheduling policy. The
            format is `aws:_Partition_ :batch:_Region_ :_Account_ :scheduling-policy/_Name_
            `. For example, `aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy`.
      required:
      - name
      - arn
    DeleteComputeEnvironmentRequest:
      type: object
      properties:
        computeEnvironment:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name or Amazon Resource Name (ARN) of the compute environment
            to delete.
      required:
      - computeEnvironment
      description: Contains the parameters for `DeleteComputeEnvironment`.
    DeleteComputeEnvironmentResponse:
      type: object
      properties: {}
    DeleteConsumableResourceRequest:
      type: object
      properties:
        consumableResource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name or ARN of the consumable resource that will be deleted.
      required:
      - consumableResource
    DeleteConsumableResourceResponse:
      type: object
      properties: {}
    DeleteJobQueueRequest:
      type: object
      properties:
        jobQueue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The short name or full Amazon Resource Name (ARN) of the queue
            to delete.
      required:
      - jobQueue
      description: Contains the parameters for `DeleteJobQueue`.
    DeleteJobQueueResponse:
      type: object
      properties: {}
    DeleteSchedulingPolicyRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the scheduling policy to
            delete.
      required:
      - arn
      description: Contains the parameters for `DeleteSchedulingPolicy`.
    DeleteSchedulingPolicyResponse:
      type: object
      properties: {}
    DeregisterJobDefinitionRequest:
      type: object
      properties:
        jobDefinition:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name and revision (`name:revision`) or full Amazon Resource
            Name (ARN) of the job definition to deregister.
      required:
      - jobDefinition
    DeregisterJobDefinitionResponse:
      type: object
      properties: {}
    DescribeComputeEnvironmentsRequest:
      type: object
      properties:
        computeEnvironments:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: A list of up to 100 compute environment names or full Amazon
            Resource Name (ARN) entries.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of cluster results returned by `DescribeComputeEnvironments`
            in paginated output. When this parameter is used, `DescribeComputeEnvironments`
            only returns `maxResults` results in a single page along with a `nextToken`
            response element. The remaining results of the initial request can be
            seen by sending another `DescribeComputeEnvironments` request with the
            returned `nextToken` value. This value can be between 1 and 100\. If this
            parameter isn't used, then `DescribeComputeEnvironments` returns up to
            100 results and a `nextToken` value if applicable.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The `nextToken` value returned from a previous paginated `DescribeComputeEnvironments`
            request where `maxResults` was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results
            that returned the `nextToken` value. This value is `null` when there are
            no more results to return.


            Treat this token as an opaque identifier that''s only used to retrieve
            the next items in a list and not for other programmatic purposes.'
      description: Contains the parameters for `DescribeComputeEnvironments`.
    DescribeComputeEnvironmentsResponse:
      type: object
      properties:
        computeEnvironments:
          allOf:
          - $ref: '#/components/schemas/ComputeEnvironmentDetailList'
          description: The list of compute environments.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `DescribeComputeEnvironments`
            request. When the results of a `DescribeComputeEnvironments` request exceed
            `maxResults`, this value can be used to retrieve the next page of results.
            This value is `null` when there are no more results to return.
    DescribeConsumableResourceRequest:
      type: object
      properties:
        consumableResource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name or ARN of the consumable resource whose description
            will be returned.
      required:
      - consumableResource
    DescribeConsumableResourceResponse:
      type: object
      properties:
        consumableResourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the consumable resource.
        consumableResourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the consumable resource.
        totalQuantity:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total amount of the consumable resource that is available.
        inUseQuantity:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The amount of the consumable resource that is currently in
            use.
        availableQuantity:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The amount of the consumable resource that is currently available
            to use.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "Indicates whether the resource is available to be re-used\
            \ after a job completes. Can be one of:\n\n  * `REPLENISHABLE`\n\n  *\
            \ `NON_REPLENISHABLE`"
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the consumable
            resource was created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags that you apply to the consumable resource to help
            you categorize and organize your resources. Each tag consists of a key
            and an optional value. For more information, see [Tagging your Batch resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html).
      required:
      - consumableResourceName
      - consumableResourceArn
    DescribeJobDefinitionsRequest:
      type: object
      properties:
        jobDefinitions:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: A list of up to 100 job definitions. Each entry in the list
            can either be an ARN in the format `arn:aws:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision}`
            or a short version using the form `${JobDefinitionName}:${Revision}`.
            This parameter can't be used with other parameters.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results returned by `DescribeJobDefinitions`
            in paginated output. When this parameter is used, `DescribeJobDefinitions`
            only returns `maxResults` results in a single page and a `nextToken` response
            element. The remaining results of the initial request can be seen by sending
            another `DescribeJobDefinitions` request with the returned `nextToken`
            value. This value can be between 1 and 100. If this parameter isn't used,
            then `DescribeJobDefinitions` returns up to 100 results and a `nextToken`
            value if applicable.
        jobDefinitionName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the job definition to describe.
        status:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The status used to filter job definitions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The `nextToken` value returned from a previous paginated `DescribeJobDefinitions`
            request where `maxResults` was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results
            that returned the `nextToken` value. This value is `null` when there are
            no more results to return.


            Treat this token as an opaque identifier that''s only used to retrieve
            the next items in a list and not for other programmatic purposes.'
      description: Contains the parameters for `DescribeJobDefinitions`.
    DescribeJobDefinitionsResponse:
      type: object
      properties:
        jobDefinitions:
          allOf:
          - $ref: '#/components/schemas/JobDefinitionList'
          description: The list of job definitions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `DescribeJobDefinitions`
            request. When the results of a `DescribeJobDefinitions` request exceed
            `maxResults`, this value can be used to retrieve the next page of results.
            This value is `null` when there are no more results to return.
    DescribeJobQueuesRequest:
      type: object
      properties:
        jobQueues:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: A list of up to 100 queue names or full queue Amazon Resource
            Name (ARN) entries.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results returned by `DescribeJobQueues`
            in paginated output. When this parameter is used, `DescribeJobQueues`
            only returns `maxResults` results in a single page and a `nextToken` response
            element. The remaining results of the initial request can be seen by sending
            another `DescribeJobQueues` request with the returned `nextToken` value.
            This value can be between 1 and 100. If this parameter isn't used, then
            `DescribeJobQueues` returns up to 100 results and a `nextToken` value
            if applicable.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The `nextToken` value returned from a previous paginated `DescribeJobQueues`
            request where `maxResults` was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results
            that returned the `nextToken` value. This value is `null` when there are
            no more results to return.


            Treat this token as an opaque identifier that''s only used to retrieve
            the next items in a list and not for other programmatic purposes.'
      description: Contains the parameters for `DescribeJobQueues`.
    DescribeJobQueuesResponse:
      type: object
      properties:
        jobQueues:
          allOf:
          - $ref: '#/components/schemas/JobQueueDetailList'
          description: The list of job queues.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `DescribeJobQueues`
            request. When the results of a `DescribeJobQueues` request exceed `maxResults`,
            this value can be used to retrieve the next page of results. This value
            is `null` when there are no more results to return.
    DescribeJobsRequest:
      type: object
      properties:
        jobs:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: A list of up to 100 job IDs.
      required:
      - jobs
      description: Contains the parameters for `DescribeJobs`.
    DescribeJobsResponse:
      type: object
      properties:
        jobs:
          allOf:
          - $ref: '#/components/schemas/JobDetailList'
          description: The list of jobs.
    DescribeSchedulingPoliciesRequest:
      type: object
      properties:
        arns:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: A list of up to 100 scheduling policy Amazon Resource Name
            (ARN) entries.
      required:
      - arns
      description: Contains the parameters for `DescribeSchedulingPolicies`.
    DescribeSchedulingPoliciesResponse:
      type: object
      properties:
        schedulingPolicies:
          allOf:
          - $ref: '#/components/schemas/SchedulingPolicyDetailList'
          description: The list of scheduling policies.
    Device:
      type: object
      properties:
        hostPath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The path for the device on the host container instance.
        containerPath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The path inside the container that's used to expose the host
            device. By default, the `hostPath` value is used.
        permissions:
          allOf:
          - $ref: '#/components/schemas/DeviceCgroupPermissions'
          description: The explicit permissions to provide to the container for the
            device. By default, the container has permissions for `read`, `write`,
            and `mknod` for the device.
      required:
      - hostPath
      description: 'An object that represents a container instance host device.


        This object isn''t applicable to jobs that are running on Fargate resources
        and shouldn''t be provided.'
    DeviceCgroupPermission:
      type: string
      enum:
      - READ
      - WRITE
      - MKNOD
    DeviceCgroupPermissions:
      type: array
      items:
        $ref: '#/components/schemas/DeviceCgroupPermission'
    DevicesList:
      type: array
      items:
        $ref: '#/components/schemas/Device'
    EFSAuthorizationConfig:
      type: object
      properties:
        accessPointId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon EFS access point ID to use. If an access point is
            specified, the root directory value specified in the `EFSVolumeConfiguration`
            must either be omitted or set to `/` which enforces the path set on the
            EFS access point. If an access point is used, transit encryption must
            be enabled in the `EFSVolumeConfiguration`. For more information, see
            [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html)
            in the _Amazon Elastic File System User Guide_.
        iam:
          allOf:
          - $ref: '#/components/schemas/EFSAuthorizationConfigIAM'
          description: Whether or not to use the Batch job IAM role defined in a job
            definition when mounting the Amazon EFS file system. If enabled, transit
            encryption must be enabled in the `EFSVolumeConfiguration`. If this parameter
            is omitted, the default value of `DISABLED` is used. For more information,
            see [Using Amazon EFS access points](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints)
            in the _Batch User Guide_. EFS IAM authorization requires that `TransitEncryption`
            be `ENABLED` and that a `JobRoleArn` is specified.
      description: The authorization configuration details for the Amazon EFS file
        system.
    EFSAuthorizationConfigIAM:
      type: string
      enum:
      - ENABLED
      - DISABLED
    EFSTransitEncryption:
      type: string
      enum:
      - ENABLED
      - DISABLED
    EFSVolumeConfiguration:
      type: object
      properties:
        fileSystemId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon EFS file system ID to use.
        rootDirectory:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The directory within the Amazon EFS file system to mount as
            the root directory inside the host. If this parameter is omitted, the
            root of the Amazon EFS volume is used instead. Specifying `/` has the
            same effect as omitting this parameter. The maximum length is 4,096 characters.


            If an EFS access point is specified in the `authorizationConfig`, the
            root directory parameter must either be omitted or set to `/`, which enforces
            the path set on the Amazon EFS access point.'
        transitEncryption:
          allOf:
          - $ref: '#/components/schemas/EFSTransitEncryption'
          description: Determines whether to enable encryption for Amazon EFS data
            in transit between the Amazon ECS host and the Amazon EFS server. Transit
            encryption must be enabled if Amazon EFS IAM authorization is used. If
            this parameter is omitted, the default value of `DISABLED` is used. For
            more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html)
            in the _Amazon Elastic File System User Guide_.
        transitEncryptionPort:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The port to use when sending encrypted data between the Amazon
            ECS host and the Amazon EFS server. If you don't specify a transit encryption
            port, it uses the port selection strategy that the Amazon EFS mount helper
            uses. The value must be between 0 and 65,535. For more information, see
            [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html)
            in the _Amazon Elastic File System User Guide_.
        authorizationConfig:
          allOf:
          - $ref: '#/components/schemas/EFSAuthorizationConfig'
          description: The authorization configuration details for the Amazon EFS
            file system.
      required:
      - fileSystemId
      description: This is used when you're using an Amazon Elastic File System file
        system for job storage. For more information, see [Amazon EFS Volumes](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html)
        in the _Batch User Guide_.
    Ec2Configuration:
      type: object
      properties:
        imageType:
          allOf:
          - $ref: '#/components/schemas/ImageType'
          description: "The image type to match with the instance type to select an\
            \ AMI. The supported values are different for `ECS` and `EKS` resources.\n\
            \nECS\n\n    \n\nIf the `imageIdOverride` parameter isn't specified, then\
            \ a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami)\
            \ (`ECS_AL2`) is used. If a new image type is specified in an update,\
            \ but neither an `imageId` nor a `imageIdOverride` parameter is specified,\
            \ then the latest Amazon ECS optimized AMI for that image type that's\
            \ supported by Batch is used.\n\nECS_AL2\n\n    \n\n[Amazon Linux 2](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami):\
            \ Default for all non-GPU instance families.\n\nECS_AL2_NVIDIA\n\n   \
            \ \n\n[Amazon Linux 2 (GPU)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#gpuami):\
            \ Default for all GPU instance families (for example `P4` and `G4`) and\
            \ can be used for all non Amazon Web Services Graviton-based instance\
            \ types.\n\nECS_AL2023\n\n    \n\n[Amazon Linux 2023](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html):\
            \ Batch supports Amazon Linux 2023.\n\nAmazon Linux 2023 does not support\
            \ `A1` instances.\n\nECS_AL1\n\n    \n\n[Amazon Linux](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#alami).\
            \ Amazon Linux has reached the end-of-life of standard support. For more\
            \ information, see [Amazon Linux AMI](http://aws.amazon.com/amazon-linux-ami/).\n\
            \nEKS\n\n    \n\nIf the `imageIdOverride` parameter isn't specified, then\
            \ a recent [Amazon EKS-optimized Amazon Linux AMI](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html)\
            \ (`EKS_AL2`) is used. If a new image type is specified in an update,\
            \ but neither an `imageId` nor a `imageIdOverride` parameter is specified,\
            \ then the latest Amazon EKS optimized AMI for that image type that Batch\
            \ supports is used.\n\nEKS_AL2\n\n    \n\n[Amazon Linux 2](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html):\
            \ Default for all non-GPU instance families.\n\nEKS_AL2_NVIDIA\n\n   \
            \ \n\n[Amazon Linux 2 (accelerated)](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html):\
            \ Default for all GPU instance families (for example, `P4` and `G4`) and\
            \ can be used for all non Amazon Web Services Graviton-based instance\
            \ types."
        imageIdOverride:
          allOf:
          - $ref: '#/components/schemas/ImageIdOverride'
          description: 'The AMI ID used for instances launched in the compute environment
            that match the image type. This setting overrides the `imageId` set in
            the `computeResource` object.


            The AMI that you choose for a compute environment must match the architecture
            of the instance types that you intend to use for that compute environment.
            For example, if your compute environment uses A1 instance types, the compute
            resource AMI that you choose must support ARM instances. Amazon ECS vends
            both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI.
            For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html)
            in the _Amazon Elastic Container Service Developer Guide_.'
        imageKubernetesVersion:
          allOf:
          - $ref: '#/components/schemas/KubernetesVersion'
          description: The Kubernetes version for the compute environment. If you
            don't specify a value, the latest version that Batch supports is used.
      required:
      - imageType
      description: 'Provides information used to select Amazon Machine Images (AMIs)
        for instances in the compute environment. If `Ec2Configuration` isn''t specified,
        the default is `ECS_AL2` ([Amazon Linux 2](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami)).


        This object isn''t applicable to jobs that are running on Fargate resources.'
    Ec2ConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/Ec2Configuration'
    EcsProperties:
      type: object
      properties:
        taskProperties:
          allOf:
          - $ref: '#/components/schemas/ListEcsTaskProperties'
          description: 'An object that contains the properties for the Amazon ECS
            task definition of a job.


            This object is currently limited to one task element. However, the task
            element can run up to 10 containers.'
      required:
      - taskProperties
      description: An object that contains the properties for the Amazon ECS resources
        of a job.
    EcsPropertiesDetail:
      type: object
      properties:
        taskProperties:
          allOf:
          - $ref: '#/components/schemas/ListEcsTaskDetails'
          description: The properties for the Amazon ECS task definition of a job.
      description: An object that contains the details for the Amazon ECS resources
        of a job.
    EcsPropertiesOverride:
      type: object
      properties:
        taskProperties:
          allOf:
          - $ref: '#/components/schemas/ListTaskPropertiesOverride'
          description: 'The overrides for the Amazon ECS task definition of a job.


            This object is currently limited to one element.'
      description: An object that contains overrides for the Amazon ECS task definition
        of a job.
    EcsTaskDetails:
      type: object
      properties:
        containers:
          allOf:
          - $ref: '#/components/schemas/ListTaskContainerDetails'
          description: A list of containers that are included in the `taskProperties`
            list.
        containerInstanceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the container instance that
            hosts the task.
        taskArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the Amazon ECS task.
        ephemeralStorage:
          allOf:
          - $ref: '#/components/schemas/EphemeralStorage'
          description: The amount of ephemeral storage allocated for the task.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the execution role that Batch
            can assume. For more information, see [Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html)
            in the _Batch User Guide_.
        platformVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Fargate platform version where the jobs are running.
        ipcMode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IPC resource namespace to use for the containers in the
            task.
        taskRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon Resource Name (ARN) of the IAM role that the container
            can assume for Amazon Web Services permissions. For more information,
            see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html)
            in the _Amazon Elastic Container Service Developer Guide_.


            This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html).'
        pidMode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The process namespace to use for the containers in the task.
        networkConfiguration:
          allOf:
          - $ref: '#/components/schemas/NetworkConfiguration'
          description: The network configuration for jobs that are running on Fargate
            resources. Jobs that are running on Amazon EC2 resources must not specify
            this parameter.
        runtimePlatform:
          allOf:
          - $ref: '#/components/schemas/RuntimePlatform'
          description: An object that represents the compute environment architecture
            for Batch jobs on Fargate.
        volumes:
          allOf:
          - $ref: '#/components/schemas/Volumes'
          description: A list of data volumes used in a job.
        enableExecuteCommand:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Determines whether execute command functionality is turned
            on for this task. If `true`, execute command functionality is turned on
            all the containers in the task.
      description: The details of a task definition that describes the container and
        volume definitions of an Amazon ECS task.
    EcsTaskProperties:
      type: object
      properties:
        containers:
          allOf:
          - $ref: '#/components/schemas/ListTaskContainerProperties'
          description: This object is a list of containers.
        ephemeralStorage:
          allOf:
          - $ref: '#/components/schemas/EphemeralStorage'
          description: The amount of ephemeral storage to allocate for the task. This
            parameter is used to expand the total amount of ephemeral storage available,
            beyond the default amount, for tasks hosted on Fargate.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the execution role that Batch
            can assume. For jobs that run on Fargate resources, you must provide an
            execution role. For more information, see [Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html)
            in the _Batch User Guide_.
        platformVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Fargate platform version where the jobs are running. A
            platform version is specified only for jobs that are running on Fargate
            resources. If one isn't specified, the `LATEST` platform version is used
            by default. This uses a recent, approved version of the Fargate platform
            for compute resources. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
            in the _Amazon Elastic Container Service Developer Guide_.
        ipcMode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The IPC resource namespace to use for the containers in the
            task. The valid values are `host`, `task`, or `none`.


            If `host` is specified, all containers within the tasks that specified
            the `host` IPC mode on the same container instance share the same IPC
            resources with the host Amazon EC2 instance.


            If `task` is specified, all containers within the specified `task` share
            the same IPC resources.


            If `none` is specified, the IPC resources within the containers of a task
            are private, and are not shared with other containers in a task or on
            the container instance.


            If no value is specified, then the IPC resource namespace sharing depends
            on the Docker daemon setting on the container instance. For more information,
            see [IPC settings](https://docs.docker.com/engine/reference/run/#ipc-settings---ipc)
            in the Docker run reference.'
        taskRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Amazon Resource Name (ARN) that''s associated with the
            Amazon ECS task.


            This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html).'
        pidMode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The process namespace to use for the containers in the task.
            The valid values are `host` or `task`. For example, monitoring sidecars
            might need `pidMode` to access information about other containers running
            in the same task.


            If `host` is specified, all containers within the tasks that specified
            the `host` PID mode on the same container instance share the process namespace
            with the host Amazon EC2 instance.


            If `task` is specified, all containers within the specified task share
            the same process namespace.


            If no value is specified, the default is a private namespace for each
            container. For more information, see [PID settings](https://docs.docker.com/engine/reference/run/#pid-settings---pid)
            in the Docker run reference.'
        networkConfiguration:
          allOf:
          - $ref: '#/components/schemas/NetworkConfiguration'
          description: The network configuration for jobs that are running on Fargate
            resources. Jobs that are running on Amazon EC2 resources must not specify
            this parameter.
        runtimePlatform:
          allOf:
          - $ref: '#/components/schemas/RuntimePlatform'
          description: An object that represents the compute environment architecture
            for Batch jobs on Fargate.
        volumes:
          allOf:
          - $ref: '#/components/schemas/Volumes'
          description: A list of volumes that are associated with the job.
        enableExecuteCommand:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Determines whether execute command functionality is turned
            on for this task. If `true`, execute command functionality is turned on
            all the containers in the task.
      required:
      - containers
      description: The properties for a task definition that describes the container
        and volume definitions of an Amazon ECS task. You can specify which Docker
        images to use, the required resources, and other configurations related to
        launching the task definition through an Amazon ECS service or task.
    EksAnnotationsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    EksAttemptContainerDetail:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of a container.
        containerID:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID for the container.
        exitCode:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The exit code returned for the job attempt. A non-zero exit
            code is considered failed.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short (255 max characters) human-readable string to provide
            additional details for a running or stopped container.
      description: An object that represents the details for an attempt for a job
        attempt that an Amazon EKS container runs.
    EksAttemptContainerDetails:
      type: array
      items:
        $ref: '#/components/schemas/EksAttemptContainerDetail'
    EksAttemptDetail:
      type: object
      properties:
        containers:
          allOf:
          - $ref: '#/components/schemas/EksAttemptContainerDetails'
          description: The details for the final status of the containers for this
            job attempt.
        initContainers:
          allOf:
          - $ref: '#/components/schemas/EksAttemptContainerDetails'
          description: The details for the init containers.
        eksClusterArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the Amazon EKS cluster.
        podName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the pod for this job attempt.
        podNamespace:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The namespace of the Amazon EKS cluster that the pod exists
            in.
        nodeName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the node for this job attempt.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the attempt was
            started (when the attempt transitioned from the `STARTING` state to the
            `RUNNING` state).
        stoppedAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the attempt was
            stopped. This happens when the attempt transitioned from the `RUNNING`
            state to a terminal state, such as `SUCCEEDED` or `FAILED`.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short, human-readable string to provide additional details
            for the current status of the job attempt.
      description: An object that represents the details of a job attempt for a job
        attempt by an Amazon EKS container.
    EksAttemptDetails:
      type: array
      items:
        $ref: '#/components/schemas/EksAttemptDetail'
    EksConfiguration:
      type: object
      properties:
        eksClusterArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the Amazon EKS cluster. An
            example is `arn:_aws_ :eks:_us-east-1_ :_123456789012_ :cluster/_ClusterForBatch_
            `.
        kubernetesNamespace:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The namespace of the Amazon EKS cluster. Batch manages pods
            in this namespace. The value can''t left empty or null. It must be fewer
            than 64 characters long, can''t be set to `default`, can''t start with
            "`kube-`," and must match this regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$`.
            For more information, see [Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)
            in the Kubernetes documentation.'
      required:
      - eksClusterArn
      - kubernetesNamespace
      description: Configuration for the Amazon EKS cluster that supports the Batch
        compute environment. The cluster must exist before the compute environment
        can be created.
    EksContainer:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the container. If the name isn't specified, the
            default name "`Default`" is used. Each container in a pod must have a
            unique name.
        image:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Docker image used to start the container.
        imagePullPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The image pull policy for the container. Supported values are
            `Always`, `IfNotPresent`, and `Never`. This parameter defaults to `IfNotPresent`.
            However, if the `:latest` tag is specified, it defaults to `Always`. For
            more information, see [Updating images](https://kubernetes.io/docs/concepts/containers/images/#updating-images)
            in the _Kubernetes documentation_.
        command:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The entrypoint for the container. This isn''t run within a
            shell. If this isn''t specified, the `ENTRYPOINT` of the container image
            is used. Environment variable references are expanded using the container''s
            environment.


            If the referenced environment variable doesn''t exist, the reference in
            the command isn''t changed. For example, if the reference is to "`$(NAME1)`"
            and the `NAME1` environment variable doesn''t exist, the command string
            will remain "`$(NAME1)`." `$$` is replaced with `$` and the resulting
            string isn''t expanded. For example, `$$(VAR_NAME)` will be passed as
            `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists.
            The entrypoint can''t be updated. For more information, see [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint)
            in the _Dockerfile reference_ and [Define a command and arguments for
            a container](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/)
            and [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint)
            in the _Kubernetes documentation_.'
        args:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'An array of arguments to the entrypoint. If this isn''t specified,
            the `CMD` of the container image is used. This corresponds to the `args`
            member in the [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint)
            portion of the [Pod](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/)
            in Kubernetes. Environment variable references are expanded using the
            container''s environment.


            If the referenced environment variable doesn''t exist, the reference in
            the command isn''t changed. For example, if the reference is to "`$(NAME1)`"
            and the `NAME1` environment variable doesn''t exist, the command string
            will remain "`$(NAME1)`." `$$` is replaced with `$`, and the resulting
            string isn''t expanded. For example, `$$(VAR_NAME)` is passed as `$(VAR_NAME)`
            whether or not the `VAR_NAME` environment variable exists. For more information,
            see [Dockerfile reference: CMD](https://docs.docker.com/engine/reference/builder/#cmd)
            and [Define a command and arguments for a pod](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/)
            in the _Kubernetes documentation_.'
        env:
          allOf:
          - $ref: '#/components/schemas/EksContainerEnvironmentVariables'
          description: 'The environment variables to pass to a container.


            Environment variables cannot start with "`AWS_BATCH`". This naming convention
            is reserved for variables that Batch sets.'
        resources:
          allOf:
          - $ref: '#/components/schemas/EksContainerResourceRequirements'
          description: The type and amount of resources to assign to a container.
            The supported resources include `memory`, `cpu`, and `nvidia.com/gpu`.
            For more information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
            in the _Kubernetes documentation_.
        volumeMounts:
          allOf:
          - $ref: '#/components/schemas/EksContainerVolumeMounts'
          description: The volume mounts for the container. Batch supports `emptyDir`,
            `hostPath`, and `secret` volume types. For more information about volumes
            and volume mounts in Kubernetes, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/)
            in the _Kubernetes documentation_.
        securityContext:
          allOf:
          - $ref: '#/components/schemas/EksContainerSecurityContext'
          description: The security context for a job. For more information, see [Configure
            a security context for a pod or container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
            in the _Kubernetes documentation_.
      required:
      - image
      description: EKS container properties are used in job definitions for Amazon
        EKS based job definitions to describe the properties for a container node
        in the pod that's launched as part of a job. This can't be specified for Amazon
        ECS based job definitions.
    EksContainerDetail:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the container. If the name isn't specified, the
            default name "`Default`" is used. Each container in a pod must have a
            unique name.
        image:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Docker image used to start the container.
        imagePullPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The image pull policy for the container. Supported values are
            `Always`, `IfNotPresent`, and `Never`. This parameter defaults to `Always`
            if the `:latest` tag is specified, `IfNotPresent` otherwise. For more
            information, see [Updating images](https://kubernetes.io/docs/concepts/containers/images/#updating-images)
            in the _Kubernetes documentation_.
        command:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The entrypoint for the container. For more information, see
            [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint)
            in the _Kubernetes documentation_.
        args:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'An array of arguments to the entrypoint. If this isn''t specified,
            the `CMD` of the container image is used. This corresponds to the `args`
            member in the [Entrypoint](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint)
            portion of the [Pod](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/)
            in Kubernetes. Environment variable references are expanded using the
            container''s environment.


            If the referenced environment variable doesn''t exist, the reference in
            the command isn''t changed. For example, if the reference is to "`$(NAME1)`"
            and the `NAME1` environment variable doesn''t exist, the command string
            will remain "`$(NAME1)`". `$$` is replaced with `$` and the resulting
            string isn''t expanded. For example, `$$(VAR_NAME)` is passed as `$(VAR_NAME)`
            whether or not the `VAR_NAME` environment variable exists. For more information,
            see [Dockerfile reference: CMD](https://docs.docker.com/engine/reference/builder/#cmd)
            and [Define a command and arguments for a pod](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/)
            in the _Kubernetes documentation_.'
        env:
          allOf:
          - $ref: '#/components/schemas/EksContainerEnvironmentVariables'
          description: 'The environment variables to pass to a container.


            Environment variables cannot start with "`AWS_BATCH`". This naming convention
            is reserved for variables that Batch sets.'
        resources:
          allOf:
          - $ref: '#/components/schemas/EksContainerResourceRequirements'
          description: The type and amount of resources to assign to a container.
            The supported resources include `memory`, `cpu`, and `nvidia.com/gpu`.
            For more information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
            in the _Kubernetes documentation_.
        exitCode:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The exit code returned for the job attempt. A non-zero exit
            code is considered failed.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short human-readable string to provide additional details
            for a running or stopped container. It can be up to 255 characters long.
        volumeMounts:
          allOf:
          - $ref: '#/components/schemas/EksContainerVolumeMounts'
          description: The volume mounts for the container. Batch supports `emptyDir`,
            `hostPath`, and `secret` volume types. For more information about volumes
            and volume mounts in Kubernetes, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/)
            in the _Kubernetes documentation_.
        securityContext:
          allOf:
          - $ref: '#/components/schemas/EksContainerSecurityContext'
          description: The security context for a job. For more information, see [Configure
            a security context for a pod or container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
            in the _Kubernetes documentation_.
      description: The details for container properties that are returned by `DescribeJobs`
        for jobs that use Amazon EKS.
    EksContainerDetails:
      type: array
      items:
        $ref: '#/components/schemas/EksContainerDetail'
    EksContainerEnvironmentVariable:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the environment variable.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of the environment variable.
      required:
      - name
      description: An environment variable.
    EksContainerEnvironmentVariables:
      type: array
      items:
        $ref: '#/components/schemas/EksContainerEnvironmentVariable'
    EksContainerOverride:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pointer to the container that you want to override. The name
            must match a unique container name that you wish to override.
        image:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The override of the Docker image that's used to start the container.
        command:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The command to send to the container that overrides the default
            command from the Docker image or the job definition.
        args:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The arguments to the entrypoint to send to the container that
            overrides the default arguments from the Docker image or the job definition.
            For more information, see [Dockerfile reference: CMD](https://docs.docker.com/engine/reference/builder/#cmd)
            and [Define a command an arguments for a pod](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/)
            in the _Kubernetes documentation_.'
        env:
          allOf:
          - $ref: '#/components/schemas/EksContainerEnvironmentVariables'
          description: 'The environment variables to send to the container. You can
            add new environment variables, which are added to the container at launch.
            Or, you can override the existing environment variables from the Docker
            image or the job definition.


            Environment variables cannot start with "`AWS_BATCH`". This naming convention
            is reserved for variables that Batch sets.'
        resources:
          allOf:
          - $ref: '#/components/schemas/EksContainerResourceRequirements'
          description: The type and amount of resources to assign to a container.
            These override the settings in the job definition. The supported resources
            include `memory`, `cpu`, and `nvidia.com/gpu`. For more information, see
            [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
            in the _Kubernetes documentation_.
      description: Object representing any Kubernetes overrides to a job definition
        that's used in a [SubmitJob](https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html)
        API operation.
    EksContainerOverrideList:
      type: array
      items:
        $ref: '#/components/schemas/EksContainerOverride'
    EksContainerResourceRequirements:
      type: object
      properties:
        limits:
          allOf:
          - $ref: '#/components/schemas/EksLimits'
          description: "The type and quantity of the resources to reserve for the\
            \ container. The values vary based on the `name` that's specified. Resources\
            \ can be requested using either the `limits` or the `requests` objects.\n\
            \nmemory\n\n    \n\nThe memory hard limit (in MiB) for the container,\
            \ using whole integers, with a \"Mi\" suffix. If your container attempts\
            \ to exceed the memory specified, the container is terminated. You must\
            \ specify at least 4 MiB of memory for a job. `memory` can be specified\
            \ in `limits`, `requests`, or both. If `memory` is specified in both places,\
            \ then the value that's specified in `limits` must be equal to the value\
            \ that's specified in `requests`.\n\nTo maximize your resource utilization,\
            \ provide your jobs with as much memory as possible for the specific instance\
            \ type that you are using. To learn how, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html)\
            \ in the _Batch User Guide_.\n\ncpu\n\n    \n\nThe number of CPUs that's\
            \ reserved for the container. Values must be an even multiple of `0.25`.\
            \ `cpu` can be specified in `limits`, `requests`, or both. If `cpu` is\
            \ specified in both places, then the value that's specified in `limits`\
            \ must be at least as large as the value that's specified in `requests`.\n\
            \nnvidia.com/gpu\n\n    \n\nThe number of GPUs that's reserved for the\
            \ container. Values must be a whole integer. `memory` can be specified\
            \ in `limits`, `requests`, or both. If `memory` is specified in both places,\
            \ then the value that's specified in `limits` must be equal to the value\
            \ that's specified in `requests`."
        requests:
          allOf:
          - $ref: '#/components/schemas/EksRequests'
          description: "The type and quantity of the resources to request for the\
            \ container. The values vary based on the `name` that's specified. Resources\
            \ can be requested by using either the `limits` or the `requests` objects.\n\
            \nmemory\n\n    \n\nThe memory hard limit (in MiB) for the container,\
            \ using whole integers, with a \"Mi\" suffix. If your container attempts\
            \ to exceed the memory specified, the container is terminated. You must\
            \ specify at least 4 MiB of memory for a job. `memory` can be specified\
            \ in `limits`, `requests`, or both. If `memory` is specified in both,\
            \ then the value that's specified in `limits` must be equal to the value\
            \ that's specified in `requests`.\n\nIf you're trying to maximize your\
            \ resource utilization by providing your jobs as much memory as possible\
            \ for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html)\
            \ in the _Batch User Guide_.\n\ncpu\n\n    \n\nThe number of CPUs that\
            \ are reserved for the container. Values must be an even multiple of `0.25`.\
            \ `cpu` can be specified in `limits`, `requests`, or both. If `cpu` is\
            \ specified in both, then the value that's specified in `limits` must\
            \ be at least as large as the value that's specified in `requests`.\n\n\
            nvidia.com/gpu\n\n    \n\nThe number of GPUs that are reserved for the\
            \ container. Values must be a whole integer. `nvidia.com/gpu` can be specified\
            \ in `limits`, `requests`, or both. If `nvidia.com/gpu` is specified in\
            \ both, then the value that's specified in `limits` must be equal to the\
            \ value that's specified in `requests`."
      description: The type and amount of resources to assign to a container. The
        supported resources include `memory`, `cpu`, and `nvidia.com/gpu`. For more
        information, see [Resource management for pods and containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
        in the _Kubernetes documentation_.
    EksContainerSecurityContext:
      type: object
      properties:
        runAsUser:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: When this parameter is specified, the container is run as the
            specified user ID (`uid`). If this parameter isn't specified, the default
            is the user that's specified in the image metadata. This parameter maps
            to `RunAsUser` and `MustRanAs` policy in the [Users and groups pod security
            policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups)
            in the _Kubernetes documentation_.
        runAsGroup:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: When this parameter is specified, the container is run as the
            specified group ID (`gid`). If this parameter isn't specified, the default
            is the group that's specified in the image metadata. This parameter maps
            to `RunAsGroup` and `MustRunAs` policy in the [Users and groups pod security
            policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups)
            in the _Kubernetes documentation_.
        privileged:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: When this parameter is `true`, the container is given elevated
            permissions on the host container instance. The level of permissions are
            similar to the `root` user permissions. The default value is `false`.
            This parameter maps to `privileged` policy in the [Privileged pod security
            policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#privileged)
            in the _Kubernetes documentation_.
        allowPrivilegeEscalation:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Whether or not a container or a Kubernetes pod is allowed to
            gain more privileges than its parent process. The default value is `false`.
        readOnlyRootFilesystem:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: When this parameter is `true`, the container is given read-only
            access to its root file system. The default value is `false`. This parameter
            maps to `ReadOnlyRootFilesystem` policy in the [Volumes and file systems
            pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems)
            in the _Kubernetes documentation_.
        runAsNonRoot:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: When this parameter is specified, the container is run as a
            user with a `uid` other than 0. If this parameter isn't specified, so
            such rule is enforced. This parameter maps to `RunAsUser` and `MustRunAsNonRoot`
            policy in the [Users and groups pod security policies](https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups)
            in the _Kubernetes documentation_.
      description: The security context for a job. For more information, see [Configure
        a security context for a pod or container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
        in the _Kubernetes documentation_.
    EksContainerVolumeMount:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name the volume mount. This must match the name of one
            of the volumes in the pod.
        mountPath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The path on the container where the volume is mounted.
        subPath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A sub-path inside the referenced volume instead of its root.
        readOnly:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If this value is `true`, the container has read-only access
            to the volume. Otherwise, the container can write to the volume. The default
            value is `false`.
      description: The volume mounts for a container for an Amazon EKS job. For more
        information about volumes and volume mounts in Kubernetes, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/)
        in the _Kubernetes documentation_.
    EksContainerVolumeMounts:
      type: array
      items:
        $ref: '#/components/schemas/EksContainerVolumeMount'
    EksContainers:
      type: array
      items:
        $ref: '#/components/schemas/EksContainer'
    EksEmptyDir:
      type: object
      properties:
        medium:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The medium to store the volume. The default value is an empty\
            \ string, which uses the storage of the node.\n\n\"\"\n\n    \n\n**(Default)**\
            \ Use the disk storage of the node.\n\n\"Memory\"\n\n    \n\nUse the `tmpfs`\
            \ volume that's backed by the RAM of the node. Contents of the volume\
            \ are lost when the node reboots, and any storage on the volume counts\
            \ against the container's memory limit."
        sizeLimit:
          allOf:
          - $ref: '#/components/schemas/Quantity'
          description: The maximum size of the volume. By default, there's no maximum
            size defined.
      description: Specifies the configuration of a Kubernetes `emptyDir` volume.
        An `emptyDir` volume is first created when a pod is assigned to a node. It
        exists as long as that pod is running on that node. The `emptyDir` volume
        is initially empty. All containers in the pod can read and write the files
        in the `emptyDir` volume. However, the `emptyDir` volume can be mounted at
        the same or different paths in each container. When a pod is removed from
        a node for any reason, the data in the `emptyDir` is deleted permanently.
        For more information, see [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir)
        in the _Kubernetes documentation_.
    EksHostPath:
      type: object
      properties:
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The path of the file or directory on the host to mount into
            containers on the pod.
      description: Specifies the configuration of a Kubernetes `hostPath` volume.
        A `hostPath` volume mounts an existing file or directory from the host node's
        filesystem into your pod. For more information, see [hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath)
        in the _Kubernetes documentation_.
    EksLabelsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    EksLimits:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Quantity'
    EksMetadata:
      type: object
      properties:
        labels:
          allOf:
          - $ref: '#/components/schemas/EksLabelsMap'
          description: Key-value pairs used to identify, sort, and organize cube resources.
            Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens
            (-), and underscores (_). Labels can be added or modified at any time.
            Each resource can have multiple labels, but each key must be unique for
            a given object.
        annotations:
          allOf:
          - $ref: '#/components/schemas/EksAnnotationsMap'
          description: "Key-value pairs used to attach arbitrary, non-identifying\
            \ metadata to Kubernetes objects. Valid annotation keys have two segments:\
            \ an optional prefix and a name, separated by a slash (/).\n\n  * The\
            \ prefix is optional and must be 253 characters or less. If specified,\
            \ the prefix must be a DNS subdomain− a series of DNS labels separated\
            \ by dots (.), and it must end with a slash (/).\n\n  * The name segment\
            \ is required and must be 63 characters or less. It can include alphanumeric\
            \ characters ([a-z0-9A-Z]), dashes (-), underscores (_), and dots (.),\
            \ but must begin and end with an alphanumeric character.\n\nAnnotation\
            \ values must be 255 characters or less.\n\nAnnotations can be added or\
            \ modified at any time. Each resource can have multiple annotations."
        namespace:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The namespace of the Amazon EKS cluster. In Kubernetes, namespaces\
            \ provide a mechanism for isolating groups of resources within a single\
            \ cluster. Names of resources need to be unique within a namespace, but\
            \ not across namespaces. Batch places Batch Job pods in this namespace.\
            \ If this field is provided, the value can't be empty or null. It must\
            \ meet the following requirements:\n\n  * 1-63 characters long\n\n  *\
            \ Can't be set to default\n\n  * Can't start with `kube`\n\n  * Must match\
            \ the following regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$`\n\
            \nFor more information, see [Namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)\
            \ in the _Kubernetes documentation_. This namespace can be different from\
            \ the `kubernetesNamespace` set in the compute environment's `EksConfiguration`,\
            \ but must have identical role-based access control (RBAC) roles as the\
            \ compute environment's `kubernetesNamespace`. For multi-node parallel\
            \ jobs, the same value must be provided across all the node ranges."
      description: Describes and uniquely identifies Kubernetes resources. For example,
        the compute environment that a pod runs in or the `jobID` for a job running
        in the pod. For more information, see [ Understanding Kubernetes Objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/)
        in the _Kubernetes documentation_.
    EksPersistentVolumeClaim:
      type: object
      properties:
        claimName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the `persistentVolumeClaim` bounded to a `persistentVolume`.
            For more information, see [ Persistent Volume Claims](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims)
            in the _Kubernetes documentation_.
        readOnly:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: An optional boolean value indicating if the mount is read only.
            Default is false. For more information, see [ Read Only Mounts](https://kubernetes.io/docs/concepts/storage/volumes/#read-only-mounts)
            in the _Kubernetes documentation_.
      required:
      - claimName
      description: A `persistentVolumeClaim` volume is used to mount a [PersistentVolume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/)
        into a Pod. PersistentVolumeClaims are a way for users to "claim" durable
        storage without knowing the details of the particular cloud environment. See
        the information about [PersistentVolumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/)
        in the _Kubernetes documentation_.
    EksPodProperties:
      type: object
      properties:
        serviceAccountName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the service account that's used to run the pod.
            For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html)
            and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html)
            in the _Amazon EKS User Guide_ and [Configure service accounts for pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)
            in the _Kubernetes documentation_.
        hostNetwork:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates if the pod uses the hosts' network IP address. The
            default value is `true`. Setting this to `false` enables the Kubernetes
            pod networking model. Most Batch workloads are egress-only and don't require
            the overhead of IP allocation for each pod for incoming connections. For
            more information, see [Host namespaces](https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces)
            and [Pod networking](https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking)
            in the _Kubernetes documentation_.
        dnsPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The DNS policy for the pod. The default value is `ClusterFirst`.
            If the `hostNetwork` parameter is not specified, the default is `ClusterFirstWithHostNet`.
            `ClusterFirst` indicates that any DNS query that does not match the configured
            cluster domain suffix is forwarded to the upstream nameserver inherited
            from the node. For more information, see [Pod''s DNS policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy)
            in the _Kubernetes documentation_.


            Valid values: `Default` | `ClusterFirst` | `ClusterFirstWithHostNet`'
        imagePullSecrets:
          allOf:
          - $ref: '#/components/schemas/ImagePullSecrets'
          description: 'References a Kubernetes secret resource. It holds a list of
            secrets. These secrets help to gain access to pull an images from a private
            registry.


            `ImagePullSecret$name` is required when this object is used.'
        containers:
          allOf:
          - $ref: '#/components/schemas/EksContainers'
          description: 'The properties of the container that''s used on the Amazon
            EKS pod.


            This object is limited to 10 elements.'
        initContainers:
          allOf:
          - $ref: '#/components/schemas/EksContainers'
          description: 'These containers run before application containers, always
            runs to completion, and must complete successfully before the next container
            starts. These containers are registered with the Amazon EKS Connector
            agent and persists the registration information in the Kubernetes backend
            data store. For more information, see [Init Containers](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)
            in the _Kubernetes documentation_.


            This object is limited to 10 elements.'
        volumes:
          allOf:
          - $ref: '#/components/schemas/EksVolumes'
          description: Specifies the volumes for a job definition that uses Amazon
            EKS resources.
        metadata:
          allOf:
          - $ref: '#/components/schemas/EksMetadata'
          description: Metadata about the Kubernetes pod. For more information, see
            [Understanding Kubernetes Objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/)
            in the _Kubernetes documentation_.
        shareProcessNamespace:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates if the processes in a container are shared, or visible,
            to other containers in the same pod. For more information, see [Share
            Process Namespace between Containers in a Pod](https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/).
      description: The properties for the pod.
    EksPodPropertiesDetail:
      type: object
      properties:
        serviceAccountName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the service account that's used to run the pod.
            For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html)
            and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html)
            in the _Amazon EKS User Guide_ and [Configure service accounts for pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)
            in the _Kubernetes documentation_.
        hostNetwork:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates if the pod uses the hosts' network IP address. The
            default value is `true`. Setting this to `false` enables the Kubernetes
            pod networking model. Most Batch workloads are egress-only and don't require
            the overhead of IP allocation for each pod for incoming connections. For
            more information, see [Host namespaces](https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces)
            and [Pod networking](https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking)
            in the _Kubernetes documentation_.
        dnsPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The DNS policy for the pod. The default value is `ClusterFirst`.
            If the `hostNetwork` parameter is not specified, the default is `ClusterFirstWithHostNet`.
            `ClusterFirst` indicates that any DNS query that does not match the configured
            cluster domain suffix is forwarded to the upstream nameserver inherited
            from the node. If no value was specified for `dnsPolicy` in the [RegisterJobDefinition](https://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
            API operation, then no value will be returned for `dnsPolicy` by either
            of [DescribeJobDefinitions](https://docs.aws.amazon.com/batch/latest/APIReference/API_DescribeJobDefinitions.html)
            or [DescribeJobs](https://docs.aws.amazon.com/batch/latest/APIReference/API_DescribeJobs.html)
            API operations. The pod spec setting will contain either `ClusterFirst`
            or `ClusterFirstWithHostNet`, depending on the value of the `hostNetwork`
            parameter. For more information, see [Pod''s DNS policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy)
            in the _Kubernetes documentation_.


            Valid values: `Default` | `ClusterFirst` | `ClusterFirstWithHostNet`'
        imagePullSecrets:
          allOf:
          - $ref: '#/components/schemas/ImagePullSecrets'
          description: Displays the reference pointer to the Kubernetes secret resource.
            These secrets help to gain access to pull an images from a private registry.
        containers:
          allOf:
          - $ref: '#/components/schemas/EksContainerDetails'
          description: The properties of the container that's used on the Amazon EKS
            pod.
        initContainers:
          allOf:
          - $ref: '#/components/schemas/EksContainerDetails'
          description: The container registered with the Amazon EKS Connector agent
            and persists the registration information in the Kubernetes backend data
            store.
        volumes:
          allOf:
          - $ref: '#/components/schemas/EksVolumes'
          description: Specifies the volumes for a job definition using Amazon EKS
            resources.
        podName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the pod for this job.
        nodeName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the node for this job.
        metadata:
          allOf:
          - $ref: '#/components/schemas/EksMetadata'
          description: Describes and uniquely identifies Kubernetes resources. For
            example, the compute environment that a pod runs in or the `jobID` for
            a job running in the pod. For more information, see [Understanding Kubernetes
            Objects](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/)
            in the _Kubernetes documentation_.
        shareProcessNamespace:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates if the processes in a container are shared, or visible,
            to other containers in the same pod. For more information, see [Share
            Process Namespace between Containers in a Pod](https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/).
      description: The details for the pod.
    EksPodPropertiesOverride:
      type: object
      properties:
        containers:
          allOf:
          - $ref: '#/components/schemas/EksContainerOverrideList'
          description: The overrides for the container that's used on the Amazon EKS
            pod.
        initContainers:
          allOf:
          - $ref: '#/components/schemas/EksContainerOverrideList'
          description: The overrides for the `initContainers` defined in the Amazon
            EKS pod. These containers run before application containers, always run
            to completion, and must complete successfully before the next container
            starts. These containers are registered with the Amazon EKS Connector
            agent and persists the registration information in the Kubernetes backend
            data store. For more information, see [Init Containers](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)
            in the _Kubernetes documentation_.
        metadata:
          allOf:
          - $ref: '#/components/schemas/EksMetadata'
          description: Metadata about the overrides for the container that's used
            on the Amazon EKS pod.
      description: An object that contains overrides for the Kubernetes pod properties
        of a job.
    EksProperties:
      type: object
      properties:
        podProperties:
          allOf:
          - $ref: '#/components/schemas/EksPodProperties'
          description: The properties for the Kubernetes pod resources of a job.
      description: An object that contains the properties for the Kubernetes resources
        of a job.
    EksPropertiesDetail:
      type: object
      properties:
        podProperties:
          allOf:
          - $ref: '#/components/schemas/EksPodPropertiesDetail'
          description: The properties for the Kubernetes pod resources of a job.
      description: An object that contains the details for the Kubernetes resources
        of a job.
    EksPropertiesOverride:
      type: object
      properties:
        podProperties:
          allOf:
          - $ref: '#/components/schemas/EksPodPropertiesOverride'
          description: The overrides for the Kubernetes pod resources of a job.
      description: An object that contains overrides for the Kubernetes resources
        of a job.
    EksRequests:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Quantity'
    EksSecret:
      type: object
      properties:
        secretName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the secret. The name must be allowed as a DNS subdomain
            name. For more information, see [DNS subdomain names](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names)
            in the _Kubernetes documentation_.
        optional:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the secret or the secret's keys must be defined.
      required:
      - secretName
      description: Specifies the configuration of a Kubernetes `secret` volume. For
        more information, see [secret](https://kubernetes.io/docs/concepts/storage/volumes/#secret)
        in the _Kubernetes documentation_.
    EksVolume:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the volume. The name must be allowed as a DNS subdomain
            name. For more information, see [DNS subdomain names](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names)
            in the _Kubernetes documentation_.
        hostPath:
          allOf:
          - $ref: '#/components/schemas/EksHostPath'
          description: Specifies the configuration of a Kubernetes `hostPath` volume.
            For more information, see [hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath)
            in the _Kubernetes documentation_.
        emptyDir:
          allOf:
          - $ref: '#/components/schemas/EksEmptyDir'
          description: Specifies the configuration of a Kubernetes `emptyDir` volume.
            For more information, see [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir)
            in the _Kubernetes documentation_.
        secret:
          allOf:
          - $ref: '#/components/schemas/EksSecret'
          description: Specifies the configuration of a Kubernetes `secret` volume.
            For more information, see [secret](https://kubernetes.io/docs/concepts/storage/volumes/#secret)
            in the _Kubernetes documentation_.
        persistentVolumeClaim:
          allOf:
          - $ref: '#/components/schemas/EksPersistentVolumeClaim'
          description: Specifies the configuration of a Kubernetes `persistentVolumeClaim`
            bounded to a `persistentVolume`. For more information, see [ Persistent
            Volume Claims](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims)
            in the _Kubernetes documentation_.
      required:
      - name
      description: Specifies an Amazon EKS volume for a job definition.
    EksVolumes:
      type: array
      items:
        $ref: '#/components/schemas/EksVolume'
    EnvironmentVariables:
      type: array
      items:
        $ref: '#/components/schemas/KeyValuePair'
    EphemeralStorage:
      type: object
      properties:
        sizeInGiB:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total amount, in GiB, of ephemeral storage to set for the
            task. The minimum supported value is `21` GiB and the maximum supported
            value is `200` GiB.
      required:
      - sizeInGiB
      description: The amount of ephemeral storage to allocate for the task. This
        parameter is used to expand the total amount of ephemeral storage available,
        beyond the default amount, for tasks hosted on Fargate.
    EvaluateOnExit:
      type: object
      properties:
        onStatusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Contains a glob pattern to match against the `StatusReason`
            returned for a job. The pattern can contain up to 512 characters. It can
            contain letters, numbers, periods (.), colons (:), and white spaces (including
            spaces or tabs). It can optionally end with an asterisk (*) so that only
            the start of the string needs to be an exact match.
        onReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Contains a glob pattern to match against the `Reason` returned
            for a job. The pattern can contain up to 512 characters. It can contain
            letters, numbers, periods (.), colons (:), and white space (including
            spaces and tabs). It can optionally end with an asterisk (*) so that only
            the start of the string needs to be an exact match.
        onExitCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Contains a glob pattern to match against the decimal representation
            of the `ExitCode` returned for a job. The pattern can be up to 512 characters
            long. It can contain only numbers, and can end with an asterisk (*) so
            that only the start of the string needs to be an exact match.


            The string can contain up to 512 characters.'
        action:
          allOf:
          - $ref: '#/components/schemas/RetryAction'
          description: Specifies the action to take if all of the specified conditions
            (`onStatusReason`, `onReason`, and `onExitCode`) are met. The values aren't
            case sensitive.
      required:
      - action
      description: Specifies an array of up to 5 conditions to be met, and an action
        to take (`RETRY` or `EXIT`) if all conditions are met. If none of the `EvaluateOnExit`
        conditions in a `RetryStrategy` match, then the job is retried.
    EvaluateOnExitList:
      type: array
      items:
        $ref: '#/components/schemas/EvaluateOnExit'
    FairsharePolicy:
      type: object
      properties:
        shareDecaySeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The amount of time (in seconds) to use to calculate a fair-share
            percentage for each share identifier in use. A value of zero (0) indicates
            the default minimum time window (600 seconds). The maximum supported value
            is 604800 (1 week).


            The decay allows for more recently run jobs to have more weight than jobs
            that ran earlier. Consider adjusting this number if you have jobs that
            (on average) run longer than ten minutes, or a large difference in job
            count or job run times between share identifiers, and the allocation of
            resources doesn''t meet your needs.'
        computeReservation:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'A value used to reserve some of the available maximum vCPU
            for share identifiers that aren''t already used.


            The reserved ratio is `(_computeReservation_ /100)^_ActiveFairShares_
            ` where ` _ActiveFairShares_ ` is the number of active share identifiers.


            For example, a `computeReservation` value of 50 indicates that Batch reserves
            50% of the maximum available vCPU if there''s only one share identifier.
            It reserves 25% if there are two share identifiers. It reserves 12.5%
            if there are three share identifiers. A `computeReservation` value of
            25 indicates that Batch should reserve 25% of the maximum available vCPU
            if there''s only one share identifier, 6.25% if there are two fair share
            identifiers, and 1.56% if there are three share identifiers.


            The minimum value is 0 and the maximum value is 99.'
        shareDistribution:
          allOf:
          - $ref: '#/components/schemas/ShareAttributesList'
          description: An array of `SharedIdentifier` objects that contain the weights
            for the share identifiers for the fair-share policy. Share identifiers
            that aren't included have a default weight of `1.0`.
      description: The fair-share scheduling policy details.
    FargatePlatformConfiguration:
      type: object
      properties:
        platformVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Fargate platform version where the jobs are running. A
            platform version is specified only for jobs that are running on Fargate
            resources. If one isn't specified, the `LATEST` platform version is used
            by default. This uses a recent, approved version of the Fargate platform
            for compute resources. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
            in the _Amazon Elastic Container Service Developer Guide_.
      description: The platform configuration for jobs that are running on Fargate
        resources. Jobs that run on Amazon EC2 resources must not specify this parameter.
    FirelensConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/FirelensConfigurationType'
          description: The log router to use. The valid values are `fluentd` or `fluentbit`.
        options:
          allOf:
          - $ref: '#/components/schemas/FirelensConfigurationOptionsMap'
          description: The options to use when configuring the log router. This field
            is optional and can be used to specify a custom configuration file or
            to add additional metadata, such as the task, task definition, cluster,
            and container instance details to the log event. If specified, the syntax
            to use is `"options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}`.
            For more information, see [Creating a task definition that uses a FireLens
            configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html#firelens-taskdef)
            in the _Amazon Elastic Container Service Developer Guide_.
      required:
      - type
      description: The FireLens configuration for the container. This is used to specify
        and configure a log router for container logs. For more information, see [Custom
        log](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
        routing in the _Amazon Elastic Container Service Developer Guide_.
    FirelensConfigurationOptionsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    FirelensConfigurationType:
      type: string
      enum:
      - fluentd
      - fluentbit
    Float:
      type: number
      format: float
    FrontOfQueueDetail:
      type: object
      properties:
        jobs:
          allOf:
          - $ref: '#/components/schemas/FrontOfQueueJobSummaryList'
          description: The Amazon Resource Names (ARNs) of the first 100 `RUNNABLE`
            jobs in a named job queue. For first-in-first-out (FIFO) job queues, jobs
            are ordered based on their submission time. For fair-share scheduling
            (FSS) job queues, jobs are ordered based on their job priority and share
            usage.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when each of the first
            100 `RUNNABLE` jobs were last updated.
      description: Contains a list of the first 100 `RUNNABLE` jobs associated to
        a single job queue.
    FrontOfQueueJobSummary:
      type: object
      properties:
        jobArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN for a job in a named job queue.
        earliestTimeAtPosition:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the job transitioned
            to its current position in the job queue.
      description: An object that represents summary details for the first 100 `RUNNABLE`
        jobs in a job queue.
    FrontOfQueueJobSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/FrontOfQueueJobSummary'
    GetJobQueueSnapshotRequest:
      type: object
      properties:
        jobQueue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job queue’s name or full queue Amazon Resource Name (ARN).
      required:
      - jobQueue
    GetJobQueueSnapshotResponse:
      type: object
      properties:
        frontOfQueue:
          allOf:
          - $ref: '#/components/schemas/FrontOfQueueDetail'
          description: The list of the first 100 `RUNNABLE` jobs in each job queue.
            For first-in-first-out (FIFO) job queues, jobs are ordered based on their
            submission time. For fair-share scheduling (FSS) job queues, jobs are
            ordered based on their job priority and share usage.
    Host:
      type: object
      properties:
        sourcePath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The path on the host container instance that''s presented
            to the container. If this parameter is empty, then the Docker daemon has
            assigned a host path for you. If this parameter contains a file location,
            then the data volume persists at the specified location on the host container
            instance until you delete it manually. If the source path location doesn''t
            exist on the host container instance, the Docker daemon creates it. If
            the location does exist, the contents of the source path folder are exported.


            This parameter isn''t applicable to jobs that run on Fargate resources.
            Don''t provide this for these jobs.'
      description: Determine whether your data volume persists on the host container
        instance and where it's stored. If this parameter is empty, then the Docker
        daemon assigns a host path for your data volume. However, the data isn't guaranteed
        to persist after the containers that are associated with it stop running.
    ImageIdOverride:
      type: string
      minLength: 1
      maxLength: 256
    ImagePullSecret:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Provides a unique identifier for the `ImagePullSecret`. This
            object is required when `EksPodProperties$imagePullSecrets` is used.
      required:
      - name
      description: References a Kubernetes secret resource. This name of the secret
        must start and end with an alphanumeric character, is required to be lowercase,
        can include periods (.) and hyphens (-), and can't contain more than 253 characters.
    ImagePullSecrets:
      type: array
      items:
        $ref: '#/components/schemas/ImagePullSecret'
    ImageType:
      type: string
      minLength: 1
      maxLength: 256
    Integer:
      type: integer
    JQState:
      type: string
      enum:
      - ENABLED
      - DISABLED
    JQStatus:
      type: string
      enum:
      - CREATING
      - UPDATING
      - DELETING
      - DELETED
      - VALID
      - INVALID
    JobDefinition:
      type: object
      properties:
        jobDefinitionName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the job definition.
        jobDefinitionArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) for the job definition.
        revision:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The revision of the job definition.
        status:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The status of the job definition.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of job definition. It's either `container` or `multinode`.
            If the job is run on Fargate resources, then `multinode` isn't supported.
            For more information about multi-node parallel jobs, see [Creating a multi-node
            parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html)
            in the _Batch User Guide_.
        schedulingPriority:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The scheduling priority of the job definition. This only affects
            jobs in job queues with a fair-share policy. Jobs with a higher scheduling
            priority are scheduled before jobs with a lower scheduling priority.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ParametersMap'
          description: Default parameters or parameter substitution placeholders that
            are set in the job definition. Parameters are specified as a key-value
            pair mapping. Parameters in a `SubmitJob` request override any corresponding
            parameter defaults from the job definition. For more information about
            specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html)
            in the _Batch User Guide_.
        retryStrategy:
          allOf:
          - $ref: '#/components/schemas/RetryStrategy'
          description: The retry strategy to use for failed jobs that are submitted
            with this job definition.
        containerProperties:
          allOf:
          - $ref: '#/components/schemas/ContainerProperties'
          description: An object with properties specific to Amazon ECS-based jobs.
            When `containerProperties` is used in the job definition, it can't be
            used in addition to `eksProperties`, `ecsProperties`, or `nodeProperties`.
        timeout:
          allOf:
          - $ref: '#/components/schemas/JobTimeout'
          description: The timeout time for jobs that are submitted with this job
            definition. After the amount of time you specify passes, Batch terminates
            your jobs if they aren't finished.
        nodeProperties:
          allOf:
          - $ref: '#/components/schemas/NodeProperties'
          description: 'An object with properties that are specific to multi-node
            parallel jobs. When `nodeProperties` is used in the job definition, it
            can''t be used in addition to `containerProperties`, `ecsProperties`,
            or `eksProperties`.


            If the job runs on Fargate resources, don''t specify `nodeProperties`.
            Use `containerProperties` instead.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags that are applied to the job definition.
        propagateTags:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to propagate the tags from the job or job
            definition to the corresponding Amazon ECS task. If no value is specified,
            the tags aren't propagated. Tags can only be propagated to the tasks when
            the tasks are created. For tags with the same name, job tags are given
            priority over job definitions tags. If the total number of combined tags
            from the job and job definition is over 50, the job is moved to the `FAILED`
            state.
        platformCapabilities:
          allOf:
          - $ref: '#/components/schemas/PlatformCapabilityList'
          description: The platform capabilities required by the job definition. If
            no value is specified, it defaults to `EC2`. Jobs run on Fargate resources
            specify `FARGATE`.
        ecsProperties:
          allOf:
          - $ref: '#/components/schemas/EcsProperties'
          description: An object that contains the properties for the Amazon ECS resources
            of a job.When `ecsProperties` is used in the job definition, it can't
            be used in addition to `containerProperties`, `eksProperties`, or `nodeProperties`.
        eksProperties:
          allOf:
          - $ref: '#/components/schemas/EksProperties'
          description: An object with properties that are specific to Amazon EKS-based
            jobs. When `eksProperties` is used in the job definition, it can't be
            used in addition to `containerProperties`, `ecsProperties`, or `nodeProperties`.
        containerOrchestrationType:
          allOf:
          - $ref: '#/components/schemas/OrchestrationType'
          description: The orchestration type of the compute environment. The valid
            values are `ECS` (default) or `EKS`.
        consumableResourceProperties:
          allOf:
          - $ref: '#/components/schemas/ConsumableResourceProperties'
          description: Contains a list of consumable resources required by the job.
      required:
      - jobDefinitionName
      - jobDefinitionArn
      - revision
      - type
      description: An object that represents an Batch job definition.
    JobDefinitionList:
      type: array
      items:
        $ref: '#/components/schemas/JobDefinition'
    JobDefinitionType:
      type: string
      enum:
      - container
      - multinode
    JobDependency:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job ID of the Batch job that's associated with this dependency.
        type:
          allOf:
          - $ref: '#/components/schemas/ArrayJobDependency'
          description: The type of the job dependency.
      description: An object that represents an Batch job dependency.
    JobDependencyList:
      type: array
      items:
        $ref: '#/components/schemas/JobDependency'
    JobDetail:
      type: object
      properties:
        jobArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job.
        jobName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job name.
        jobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job ID.
        jobQueue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job queue that the job
            is associated with.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: 'The current status for the job.


            If your jobs don''t progress to `STARTING`, see [Jobs stuck in RUNNABLE
            status](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#job_stuck_in_runnable)
            in the troubleshooting section of the _Batch User Guide_.'
        shareIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The share identifier for the job.
        schedulingPriority:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The scheduling policy of the job definition. This only affects
            jobs in job queues with a fair-share policy. Jobs with a higher scheduling
            priority are scheduled before jobs with a lower scheduling priority.
        attempts:
          allOf:
          - $ref: '#/components/schemas/AttemptDetails'
          description: A list of job attempts that are associated with this job.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "A short, human-readable string to provide more details for\
            \ the current status of the job.\n\n  * `CAPACITY:INSUFFICIENT_INSTANCE_CAPACITY`\
            \ \\- All compute environments have insufficient capacity to service the\
            \ job.\n\n  * `MISCONFIGURATION:COMPUTE_ENVIRONMENT_MAX_RESOURCE` \\-\
            \ All compute environments have a `maxVcpu` setting that is smaller than\
            \ the job requirements.\n\n  * `MISCONFIGURATION:JOB_RESOURCE_REQUIREMENT`\
            \ \\- All compute environments have no connected instances that meet the\
            \ job requirements.\n\n  * `MISCONFIGURATION:SERVICE_ROLE_PERMISSIONS`\
            \ \\- All compute environments have problems with the service role permissions."
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the job was created.
            For non-array jobs and parent array jobs, this is when the job entered
            the `SUBMITTED` state. This is specifically at the time [SubmitJob](https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html)
            was called. For array child jobs, this is when the child job was spawned
            by its parent and entered the `PENDING` state.
        retryStrategy:
          allOf:
          - $ref: '#/components/schemas/RetryStrategy'
          description: The retry strategy to use for this job if an attempt fails.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the job was started.
            More specifically, it's when the job transitioned from the `STARTING`
            state to the `RUNNING` state.
        stoppedAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the job was stopped.
            More specifically, it's when the job transitioned from the `RUNNING` state
            to a terminal state, such as `SUCCEEDED` or `FAILED`.
        dependsOn:
          allOf:
          - $ref: '#/components/schemas/JobDependencyList'
          description: A list of job IDs that this job depends on.
        jobDefinition:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job definition that this
            job uses.
        parameters:
          allOf:
          - $ref: '#/components/schemas/ParametersMap'
          description: Additional parameters that are passed to the job that replace
            parameter substitution placeholders or override any corresponding parameter
            defaults from the job definition.
        container:
          allOf:
          - $ref: '#/components/schemas/ContainerDetail'
          description: An object that represents the details for the container that's
            associated with the job. If the details are for a multiple-container job,
            this object will be empty.
        nodeDetails:
          allOf:
          - $ref: '#/components/schemas/NodeDetails'
          description: An object that represents the details of a node that's associated
            with a multi-node parallel job.
        nodeProperties:
          allOf:
          - $ref: '#/components/schemas/NodeProperties'
          description: 'An object that represents the node properties of a multi-node
            parallel job.


            This isn''t applicable to jobs that are running on Fargate resources.'
        arrayProperties:
          allOf:
          - $ref: '#/components/schemas/ArrayPropertiesDetail'
          description: The array properties of the job, if it's an array job.
        timeout:
          allOf:
          - $ref: '#/components/schemas/JobTimeout'
          description: The timeout configuration for the job.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags that are applied to the job.
        propagateTags:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to propagate the tags from the job or job
            definition to the corresponding Amazon ECS task. If no value is specified,
            the tags aren't propagated. Tags can only be propagated to the tasks when
            the tasks are created. For tags with the same name, job tags are given
            priority over job definitions tags. If the total number of combined tags
            from the job and job definition is over 50, the job is moved to the `FAILED`
            state.
        platformCapabilities:
          allOf:
          - $ref: '#/components/schemas/PlatformCapabilityList'
          description: The platform capabilities required by the job definition. If
            no value is specified, it defaults to `EC2`. Jobs run on Fargate resources
            specify `FARGATE`.
        eksProperties:
          allOf:
          - $ref: '#/components/schemas/EksPropertiesDetail'
          description: An object with various properties that are specific to Amazon
            EKS based jobs.
        eksAttempts:
          allOf:
          - $ref: '#/components/schemas/EksAttemptDetails'
          description: A list of job attempts that are associated with this job.
        ecsProperties:
          allOf:
          - $ref: '#/components/schemas/EcsPropertiesDetail'
          description: An object with properties that are specific to Amazon ECS-based
            jobs.
        isCancelled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the job is canceled.
        isTerminated:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the job is terminated.
        consumableResourceProperties:
          allOf:
          - $ref: '#/components/schemas/ConsumableResourceProperties'
          description: Contains a list of consumable resources required by the job.
      required:
      - jobName
      - jobId
      - jobQueue
      - status
      - startedAt
      - jobDefinition
      description: An object that represents an Batch job.
    JobDetailList:
      type: array
      items:
        $ref: '#/components/schemas/JobDetail'
    JobExecutionTimeoutMinutes:
      type: integer
      format: int64
      minimum: 1
      maximum: 360
    JobQueueDetail:
      type: object
      properties:
        jobQueueName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job queue name.
        jobQueueArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job queue.
        state:
          allOf:
          - $ref: '#/components/schemas/JQState'
          description: Describes the ability of the queue to accept new jobs. If the
            job queue state is `ENABLED`, it can accept jobs. If the job queue state
            is `DISABLED`, new jobs can't be added to the queue, but jobs already
            in the queue can finish.
        schedulingPolicyArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the scheduling policy. The
            format is `aws:_Partition_ :batch:_Region_ :_Account_ :scheduling-policy/_Name_
            `. For example, `aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy`.
        status:
          allOf:
          - $ref: '#/components/schemas/JQStatus'
          description: The status of the job queue (for example, `CREATING` or `VALID`).
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short, human-readable string to provide additional details
            for the current status of the job queue.
        priority:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The priority of the job queue. Job queue priority determines
            the order that job queues are evaluated when multiple queues dispatch
            jobs within a shared compute environment. A higher value for `priority`
            indicates a higher priority. Queues are evaluated in cycles, in descending
            order by priority. For example, a job queue with a priority value of `10`
            is evaluated before a queue with a priority value of `1`. All of the compute
            environments must be either Amazon EC2 (`EC2` or `SPOT`) or Fargate (`FARGATE`
            or `FARGATE_SPOT`). Amazon EC2 and Fargate compute environments can''t
            be mixed.


            Job queue priority doesn''t guarantee that a particular job executes before
            a job in a lower priority queue. Jobs added to higher priority queues
            during the queue evaluation cycle might not be evaluated until the next
            cycle. A job is dispatched from a queue only if resources are available
            when the queue is evaluated. If there are insufficient resources available
            at that time, the cycle proceeds to the next queue. This means that jobs
            added to higher priority queues might have to wait for jobs in multiple
            lower priority queues to complete before they are dispatched. You can
            use job dependencies to control the order for jobs from queues with different
            priorities. For more information, see [Job Dependencies](https://docs.aws.amazon.com/batch/latest/userguide/job_dependencies.html)
            in the _Batch User Guide_.'
        computeEnvironmentOrder:
          allOf:
          - $ref: '#/components/schemas/ComputeEnvironmentOrders'
          description: The compute environments that are attached to the job queue
            and the order that job placement is preferred. Compute environments are
            selected for job placement in ascending order.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags that are applied to the job queue. For more information,
            see [Tagging your Batch resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html)
            in _Batch User Guide_.
        jobStateTimeLimitActions:
          allOf:
          - $ref: '#/components/schemas/JobStateTimeLimitActions'
          description: The set of actions that Batch perform on jobs that remain at
            the head of the job queue in the specified state longer than specified
            times. Batch will perform each action after `maxTimeSeconds` has passed.
      required:
      - jobQueueName
      - jobQueueArn
      - state
      - priority
      - computeEnvironmentOrder
      description: An object that represents the details for an Batch job queue.
    JobQueueDetailList:
      type: array
      items:
        $ref: '#/components/schemas/JobQueueDetail'
    JobStateTimeLimitAction:
      type: object
      properties:
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason to log for the action being taken.
        state:
          allOf:
          - $ref: '#/components/schemas/JobStateTimeLimitActionsState'
          description: The state of the job needed to trigger the action. The only
            supported value is `RUNNABLE`.
        maxTimeSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The approximate amount of time, in seconds, that must pass
            with the job in the specified state before the action is taken. The minimum
            value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).
        action:
          allOf:
          - $ref: '#/components/schemas/JobStateTimeLimitActionsAction'
          description: The action to take when a job is at the head of the job queue
            in the specified state for the specified period of time. The only supported
            value is `CANCEL`, which will cancel the job.
      required:
      - reason
      - state
      - maxTimeSeconds
      - action
      description: Specifies an action that Batch will take after the job has remained
        at the head of the queue in the specified state for longer than the specified
        time.
    JobStateTimeLimitActions:
      type: array
      items:
        $ref: '#/components/schemas/JobStateTimeLimitAction'
    JobStateTimeLimitActionsAction:
      type: string
      enum:
      - CANCEL
    JobStateTimeLimitActionsState:
      type: string
      enum:
      - RUNNABLE
    JobStatus:
      type: string
      enum:
      - SUBMITTED
      - PENDING
      - RUNNABLE
      - STARTING
      - RUNNING
      - SUCCEEDED
      - FAILED
    JobSummary:
      type: object
      properties:
        jobArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job.
        jobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job ID.
        jobName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job name.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the job was created.
            For non-array jobs and parent array jobs, this is when the job entered
            the `SUBMITTED` state (at the time [SubmitJob](https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html)
            was called). For array child jobs, this is when the child job was spawned
            by its parent and entered the `PENDING` state.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The current status for the job.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short, human-readable string to provide more details for
            the current status of the job.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp for when the job was started. More specifically,
            it's when the job transitioned from the `STARTING` state to the `RUNNING`
            state.
        stoppedAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp for when the job was stopped. More specifically,
            it's when the job transitioned from the `RUNNING` state to a terminal
            state, such as `SUCCEEDED` or `FAILED`.
        container:
          allOf:
          - $ref: '#/components/schemas/ContainerSummary'
          description: An object that represents the details of the container that's
            associated with the job.
        arrayProperties:
          allOf:
          - $ref: '#/components/schemas/ArrayPropertiesSummary'
          description: The array properties of the job, if it's an array job.
        nodeProperties:
          allOf:
          - $ref: '#/components/schemas/NodePropertiesSummary'
          description: 'The node properties for a single node in a job summary list.


            This isn''t applicable to jobs that are running on Fargate resources.'
        jobDefinition:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job definition.
      required:
      - jobId
      - jobName
      description: An object that represents summary details of a job.
    JobSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/JobSummary'
    JobTimeout:
      type: object
      properties:
        attemptDurationSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The job timeout time (in seconds) that''s measured from the
            job attempt''s `startedAt` timestamp. After this time passes, Batch terminates
            your jobs if they aren''t finished. The minimum value for the timeout
            is 60 seconds.


            For array jobs, the timeout applies to the child jobs, not to the parent
            array job.


            For multi-node parallel (MNP) jobs, the timeout applies to the whole job,
            not to the individual nodes.'
      description: An object that represents a job timeout configuration.
    KeyValuePair:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the key-value pair. For environment variables,
            this is the name of the environment variable.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of the key-value pair. For environment variables,
            this is the value of the environment variable.
      description: A key-value pair object.
    KeyValuesPair:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the filter. Filter names are case sensitive.
        values:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The filter values.
      description: A filter name and value pair that's used to return a more specific
        list of results from a `ListJobs` or `ListJobsByConsumableResource` API operation.
    KubernetesVersion:
      type: string
      minLength: 1
      maxLength: 256
    LaunchTemplateSpecification:
      type: object
      properties:
        launchTemplateId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the launch template.
        launchTemplateName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the launch template.
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The version number of the launch template, `$Default`, or
            `$Latest`.


            If the value is `$Default`, the default version of the launch template
            is used. If the value is `$Latest`, the latest version of the launch template
            is used.


            If the AMI ID that''s used in a compute environment is from the launch
            template, the AMI isn''t changed when the compute environment is updated.
            It''s only changed if the `updateToLatestImageVersion` parameter for the
            compute environment is set to `true`. During an infrastructure update,
            if either `$Default` or `$Latest` is specified, Batch re-evaluates the
            launch template version, and it might use a different version of the launch
            template. This is the case even if the launch template isn''t specified
            in the update. When updating a compute environment, changing the launch
            template requires an infrastructure update of the compute environment.
            For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            Default: `$Default`


            Latest: `$Latest`'
        overrides:
          allOf:
          - $ref: '#/components/schemas/LaunchTemplateSpecificationOverrideList'
          description: 'A launch template to use in place of the default launch template.
            You must specify either the launch template ID or launch template name
            in the request, but not both.


            You can specify up to ten (10) launch template overrides that are associated
            to unique instance types or families for each compute environment.


            To unset all override templates for a compute environment, you can pass
            an empty array to the [UpdateComputeEnvironment.overrides](https://docs.aws.amazon.com/batch/latest/APIReference/API_UpdateComputeEnvironment.html)
            parameter, or not include the `overrides` parameter when submitting the
            `UpdateComputeEnvironment` API operation.'
      description: 'An object that represents a launch template that''s associated
        with a compute resource. You must specify either the launch template ID or
        launch template name in the request, but not both.


        If security groups are specified using both the `securityGroupIds` parameter
        of `CreateComputeEnvironment` and the launch template, the values in the `securityGroupIds`
        parameter of `CreateComputeEnvironment` will be used.


        This object isn''t applicable to jobs that are running on Fargate resources.'
    LaunchTemplateSpecificationOverride:
      type: object
      properties:
        launchTemplateId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The ID of the launch template.


            **Note:** If you specify the `launchTemplateId` you can''t specify the
            `launchTemplateName` as well.'
        launchTemplateName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The name of the launch template.


            **Note:** If you specify the `launchTemplateName` you can''t specify the
            `launchTemplateId` as well.'
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The version number of the launch template, `$Default`, or
            `$Latest`.


            If the value is `$Default`, the default version of the launch template
            is used. If the value is `$Latest`, the latest version of the launch template
            is used.


            If the AMI ID that''s used in a compute environment is from the launch
            template, the AMI isn''t changed when the compute environment is updated.
            It''s only changed if the `updateToLatestImageVersion` parameter for the
            compute environment is set to `true`. During an infrastructure update,
            if either `$Default` or `$Latest` is specified, Batch re-evaluates the
            launch template version, and it might use a different version of the launch
            template. This is the case even if the launch template isn''t specified
            in the update. When updating a compute environment, changing the launch
            template requires an infrastructure update of the compute environment.
            For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            Default: `$Default`


            Latest: `$Latest`'
        targetInstanceTypes:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: "The instance type or family that this override launch template\
            \ should be applied to.\n\nThis parameter is required when defining a\
            \ launch template override.\n\nInformation included in this parameter\
            \ must meet the following requirements:\n\n  * Must be a valid Amazon\
            \ EC2 instance type or family.\n\n  * `optimal` isn't allowed.\n\n  *\
            \ `targetInstanceTypes` can target only instance types and families that\
            \ are included within the [ `ComputeResource.instanceTypes` ](https://docs.aws.amazon.com/batch/latest/APIReference/API_ComputeResource.html#Batch-Type-ComputeResource-instanceTypes)\
            \ set. `targetInstanceTypes` doesn't need to include all of the instances\
            \ from the `instanceType` set, but at least a subset. For example, if\
            \ `ComputeResource.instanceTypes` includes `[m5, g5]`, `targetInstanceTypes`\
            \ can include `[m5.2xlarge]` and `[m5.large]` but not `[c5.large]`.\n\n\
            \  * `targetInstanceTypes` included within the same launch template override\
            \ or across launch template overrides can't overlap for the same compute\
            \ environment. For example, you can't define one launch template override\
            \ to target an instance family and another define an instance type within\
            \ this same family."
      description: 'An object that represents a launch template to use in place of
        the default launch template. You must specify either the launch template ID
        or launch template name in the request, but not both.


        If security groups are specified using both the `securityGroupIds` parameter
        of `CreateComputeEnvironment` and the launch template, the values in the `securityGroupIds`
        parameter of `CreateComputeEnvironment` will be used.


        You can define up to ten (10) overrides for each compute environment.


        This object isn''t applicable to jobs that are running on Fargate resources.


        To unset all override templates for a compute environment, you can pass an
        empty array to the [UpdateComputeEnvironment.overrides](https://docs.aws.amazon.com/batch/latest/APIReference/API_UpdateComputeEnvironment.html)
        parameter, or not include the `overrides` parameter when submitting the `UpdateComputeEnvironment`
        API operation.'
    LaunchTemplateSpecificationOverrideList:
      type: array
      items:
        $ref: '#/components/schemas/LaunchTemplateSpecificationOverride'
    LinuxParameters:
      type: object
      properties:
        devices:
          allOf:
          - $ref: '#/components/schemas/DevicesList'
          description: 'Any of the host devices to expose to the container. This parameter
            maps to `Devices` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--device` option to [docker run](https://docs.docker.com/engine/reference/run/).


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t provide it for these jobs.'
        initProcessEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'If true, run an `init` process inside the container that forwards
            signals and reaps processes. This parameter maps to the `--init` option
            to [docker run](https://docs.docker.com/engine/reference/run/). This parameter
            requires version 1.25 of the Docker Remote API or greater on your container
            instance. To check the Docker Remote API version on your container instance,
            log in to your container instance and run the following command: `sudo
            docker version | grep "Server API version"`'
        sharedMemorySize:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The value for the size (in MiB) of the `/dev/shm` volume.
            This parameter maps to the `--shm-size` option to [docker run](https://docs.docker.com/engine/reference/run/).


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t provide it for these jobs.'
        tmpfs:
          allOf:
          - $ref: '#/components/schemas/TmpfsList'
          description: 'The container path, mount options, and size (in MiB) of the
            `tmpfs` mount. This parameter maps to the `--tmpfs` option to [docker
            run](https://docs.docker.com/engine/reference/run/).


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t provide this parameter for this resource type.'
        maxSwap:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The total amount of swap memory (in MiB) a container can use.
            This parameter is translated to the `--memory-swap` option to [docker
            run](https://docs.docker.com/engine/reference/run/) where the value is
            the sum of the container memory plus the `maxSwap` value. For more information,
            see [ `--memory-swap` details](https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details)
            in the Docker documentation.


            If a `maxSwap` value of `0` is specified, the container doesn''t use swap.
            Accepted values are `0` or any positive integer. If the `maxSwap` parameter
            is omitted, the container doesn''t use the swap configuration for the
            container instance on which it runs. A `maxSwap` value must be set for
            the `swappiness` parameter to be used.


            This parameter isn''t applicable to jobs that are running on Fargate resources.
            Don''t provide it for these jobs.'
        swappiness:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: "You can use this parameter to tune a container's memory swappiness\
            \ behavior. A `swappiness` value of `0` causes swapping to not occur unless\
            \ absolutely necessary. A `swappiness` value of `100` causes pages to\
            \ be swapped aggressively. Valid values are whole numbers between `0`\
            \ and `100`. If the `swappiness` parameter isn't specified, a default\
            \ value of `60` is used. If a value isn't specified for `maxSwap`, then\
            \ this parameter is ignored. If `maxSwap` is set to 0, the container doesn't\
            \ use swap. This parameter maps to the `--memory-swappiness` option to\
            \ [docker run](https://docs.docker.com/engine/reference/run/).\n\nConsider\
            \ the following when you use a per-container swap configuration.\n\n \
            \ * Swap space must be enabled and allocated on the container instance\
            \ for the containers to use.\n\nBy default, the Amazon ECS optimized AMIs\
            \ don't have swap enabled. You must enable swap on the instance to use\
            \ this feature. For more information, see [Instance store swap volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html)\
            \ in the _Amazon EC2 User Guide for Linux Instances_ or [How do I allocate\
            \ memory to work as swap space in an Amazon EC2 instance by using a swap\
            \ file?](http://aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/)\n\
            \n  * The swap space parameters are only supported for job definitions\
            \ using EC2 resources.\n\n  * If the `maxSwap` and `swappiness` parameters\
            \ are omitted from a job definition, each container has a default `swappiness`\
            \ value of 60. Moreover, the total swap usage is limited to two times\
            \ the memory reservation of the container.\n\nThis parameter isn't applicable\
            \ to jobs that are running on Fargate resources. Don't provide it for\
            \ these jobs."
      description: Linux-specific modifications that are applied to the container,
        such as details for device mappings.
    ListAttemptEcsTaskDetails:
      type: array
      items:
        $ref: '#/components/schemas/AttemptEcsTaskDetails'
    ListAttemptTaskContainerDetails:
      type: array
      items:
        $ref: '#/components/schemas/AttemptTaskContainerDetails'
    ListConsumableResourcesFilterList:
      type: array
      items:
        $ref: '#/components/schemas/KeyValuesPair'
    ListConsumableResourcesRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/ListConsumableResourcesFilterList'
          description: "The filters to apply to the consumable resource list query.\
            \ If used, only those consumable resources that match the filter are listed.\
            \ Filter names and values can be:\n\n  * name: `CONSUMABLE_RESOURCE_NAME\
            \ `\n\nvalues: case-insensitive matches for the consumable resource name.\
            \ If a filter value ends with an asterisk (*), it matches any consumable\
            \ resource name that begins with the string before the '*'."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results returned by `ListConsumableResources`
            in paginated output. When this parameter is used, `ListConsumableResources`
            only returns `maxResults` results in a single page and a `nextToken` response
            element. The remaining results of the initial request can be seen by sending
            another `ListConsumableResources` request with the returned `nextToken`
            value. This value can be between 1 and 100. If this parameter isn't used,
            then `ListConsumableResources` returns up to 100 results and a `nextToken`
            value if applicable.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The `nextToken` value returned from a previous paginated `ListConsumableResources`
            request where `maxResults` was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results
            that returned the `nextToken` value. This value is `null` when there are
            no more results to return.


            Treat this token as an opaque identifier that''s only used to retrieve
            the next items in a list and not for other programmatic purposes.'
    ListConsumableResourcesResponse:
      type: object
      properties:
        consumableResources:
          allOf:
          - $ref: '#/components/schemas/ConsumableResourceSummaryList'
          description: A list of consumable resources that match the request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListConsumableResources`
            request. When the results of a `ListConsumableResources` request exceed
            `maxResults`, this value can be used to retrieve the next page of results.
            This value is `null` when there are no more results to return.
      required:
      - consumableResources
    ListEcsTaskDetails:
      type: array
      items:
        $ref: '#/components/schemas/EcsTaskDetails'
    ListEcsTaskProperties:
      type: array
      items:
        $ref: '#/components/schemas/EcsTaskProperties'
    ListJobsByConsumableResourceFilterList:
      type: array
      items:
        $ref: '#/components/schemas/KeyValuesPair'
    ListJobsByConsumableResourceRequest:
      type: object
      properties:
        consumableResource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name or ARN of the consumable resource.
        filters:
          allOf:
          - $ref: '#/components/schemas/ListJobsByConsumableResourceFilterList'
          description: "The filters to apply to the job list query. If used, only\
            \ those jobs requiring the specified consumable resource (`consumableResource`)\
            \ and that match the value of the filters are listed. The filter names\
            \ and values can be:\n\n  * name: `JOB_STATUS`\n\nvalues: `SUBMITTED |\
            \ PENDING | RUNNABLE | STARTING | RUNNING | SUCCEEDED | FAILED`\n\n  *\
            \ name: `JOB_NAME `\n\nThe values are case-insensitive matches for the\
            \ job name. If a filter value ends with an asterisk (*), it matches any\
            \ job name that begins with the string before the '*'."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results returned by `ListJobsByConsumableResource`
            in paginated output. When this parameter is used, `ListJobsByConsumableResource`
            only returns `maxResults` results in a single page and a `nextToken` response
            element. The remaining results of the initial request can be seen by sending
            another `ListJobsByConsumableResource` request with the returned `nextToken`
            value. This value can be between 1 and 100. If this parameter isn't used,
            then `ListJobsByConsumableResource` returns up to 100 results and a `nextToken`
            value if applicable.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The `nextToken` value returned from a previous paginated `ListJobsByConsumableResource`
            request where `maxResults` was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results
            that returned the `nextToken` value. This value is `null` when there are
            no more results to return.


            Treat this token as an opaque identifier that''s only used to retrieve
            the next items in a list and not for other programmatic purposes.'
      required:
      - consumableResource
    ListJobsByConsumableResourceResponse:
      type: object
      properties:
        jobs:
          allOf:
          - $ref: '#/components/schemas/ListJobsByConsumableResourceSummaryList'
          description: The list of jobs that require the specified consumable resources.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListJobsByConsumableResource`
            request. When the results of a `ListJobsByConsumableResource` request
            exceed `maxResults`, this value can be used to retrieve the next page
            of results. This value is `null` when there are no more results to return.
      required:
      - jobs
    ListJobsByConsumableResourceSummary:
      type: object
      properties:
        jobArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job.
        jobQueueArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job queue.
        jobName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the job.
        jobDefinitionArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job definition.
        shareIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The fair-share scheduling policy identifier for the job.
        jobStatus:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The status of the job. Can be one of:\n\n  * `SUBMITTED`\n\
            \n  * `PENDING`\n\n  * `RUNNABLE`\n\n  * `STARTING`\n\n  * `RUNNING`\n\
            \n  * `SUCCEEDED`\n\n  * `FAILED`"
        quantity:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total amount of the consumable resource that is available.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short, human-readable string to provide more details for
            the current status of the job.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp for when the job was started. More specifically,
            it's when the job transitioned from the `STARTING` state to the `RUNNING`
            state.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in milliseconds) for when the consumable
            resource was created.
        consumableResourceProperties:
          allOf:
          - $ref: '#/components/schemas/ConsumableResourceProperties'
          description: Contains a list of consumable resources required by the job.
      required:
      - jobArn
      - jobQueueArn
      - jobName
      - jobStatus
      - quantity
      - createdAt
      - consumableResourceProperties
      description: Current information about a consumable resource required by a job.
    ListJobsByConsumableResourceSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ListJobsByConsumableResourceSummary'
    ListJobsFilterList:
      type: array
      items:
        $ref: '#/components/schemas/KeyValuesPair'
    ListJobsRequest:
      type: object
      properties:
        jobQueue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name or full Amazon Resource Name (ARN) of the job queue
            used to list jobs.
        arrayJobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job ID for an array job. Specifying an array job ID with
            this parameter lists all child jobs from within the specified array.
        multiNodeJobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job ID for a multi-node parallel job. Specifying a multi-node
            parallel job ID with this parameter lists all nodes that are associated
            with the specified job.
        jobStatus:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The job status used to filter jobs in the specified queue.
            If the `filters` parameter is specified, the `jobStatus` parameter is
            ignored and jobs with any status are returned. If you don't specify a
            status, only `RUNNING` jobs are returned.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: "The maximum number of results returned by `ListJobs` in a\
            \ paginated output. When this parameter is used, `ListJobs` returns up\
            \ to `maxResults` results in a single page and a `nextToken` response\
            \ element, if applicable. The remaining results of the initial request\
            \ can be seen by sending another `ListJobs` request with the returned\
            \ `nextToken` value.\n\nThe following outlines key parameters and limitations:\n\
            \n  * The minimum value is 1. \n\n  * When `--job-status` is used, Batch\
            \ returns up to 1000 values. \n\n  * When `--filters` is used, Batch returns\
            \ up to 100 values.\n\n  * If neither parameter is used, then `ListJobs`\
            \ returns up to 1000 results (jobs that are in the `RUNNING` status) and\
            \ a `nextToken` value, if applicable."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The `nextToken` value returned from a previous paginated `ListJobs`
            request where `maxResults` was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results
            that returned the `nextToken` value. This value is `null` when there are
            no more results to return.


            Treat this token as an opaque identifier that''s only used to retrieve
            the next items in a list and not for other programmatic purposes.'
        filters:
          allOf:
          - $ref: '#/components/schemas/ListJobsFilterList'
          description: "The filter to apply to the query. Only one filter can be used\
            \ at a time. When the filter is used, `jobStatus` is ignored. The filter\
            \ doesn't apply to child jobs in an array or multi-node parallel (MNP)\
            \ jobs. The results are sorted by the `createdAt` field, with the most\
            \ recent jobs being first.\n\nJOB_NAME\n\n    \n\nThe value of the filter\
            \ is a case-insensitive match for the job name. If the value ends with\
            \ an asterisk (*), the filter matches any job name that begins with the\
            \ string before the '*'. This corresponds to the `jobName` value. For\
            \ example, `test1` matches both `Test1` and `test1`, and `test1*` matches\
            \ both `test1` and `Test10`. When the `JOB_NAME` filter is used, the results\
            \ are grouped by the job name and version.\n\nJOB_DEFINITION\n\n    \n\
            \nThe value for the filter is the name or Amazon Resource Name (ARN) of\
            \ the job definition. This corresponds to the `jobDefinition` value. The\
            \ value is case sensitive. When the value for the filter is the job definition\
            \ name, the results include all the jobs that used any revision of that\
            \ job definition name. If the value ends with an asterisk (*), the filter\
            \ matches any job definition name that begins with the string before the\
            \ '*'. For example, `jd1` matches only `jd1`, and `jd1*` matches both\
            \ `jd1` and `jd1A`. The version of the job definition that's used doesn't\
            \ affect the sort order. When the `JOB_DEFINITION` filter is used and\
            \ the ARN is used (which is in the form `arn:${Partition}:batch:${Region}:${Account}:job-definition/${JobDefinitionName}:${Revision}`),\
            \ the results include jobs that used the specified revision of the job\
            \ definition. Asterisk (*) isn't supported when the ARN is used.\n\nBEFORE_CREATED_AT\n\
            \n    \n\nThe value for the filter is the time that's before the job was\
            \ created. This corresponds to the `createdAt` value. The value is a string\
            \ representation of the number of milliseconds since 00:00:00 UTC (midnight)\
            \ on January 1, 1970.\n\nAFTER_CREATED_AT\n\n    \n\nThe value for the\
            \ filter is the time that's after the job was created. This corresponds\
            \ to the `createdAt` value. The value is a string representation of the\
            \ number of milliseconds since 00:00:00 UTC (midnight) on January 1, 1970."
      description: Contains the parameters for `ListJobs`.
    ListJobsResponse:
      type: object
      properties:
        jobSummaryList:
          allOf:
          - $ref: '#/components/schemas/JobSummaryList'
          description: A list of job summaries that match the request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListJobs` request.
            When the results of a `ListJobs` request exceed `maxResults`, this value
            can be used to retrieve the next page of results. This value is `null`
            when there are no more results to return.
      required:
      - jobSummaryList
    ListSchedulingPoliciesRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results that's returned by `ListSchedulingPolicies`
            in paginated output. When this parameter is used, `ListSchedulingPolicies`
            only returns `maxResults` results in a single page and a `nextToken` response
            element. You can see the remaining results of the initial request by sending
            another `ListSchedulingPolicies` request with the returned `nextToken`
            value. This value can be between 1 and 100. If this parameter isn't used,
            `ListSchedulingPolicies` returns up to 100 results and a `nextToken` value
            if applicable.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The `nextToken` value that''s returned from a previous paginated
            `ListSchedulingPolicies` request where `maxResults` was used and the results
            exceeded the value of that parameter. Pagination continues from the end
            of the previous results that returned the `nextToken` value. This value
            is `null` when there are no more results to return.


            Treat this token as an opaque identifier that''s only used to retrieve
            the next items in a list and not for other programmatic purposes.'
      description: Contains the parameters for `ListSchedulingPolicies`.
    ListSchedulingPoliciesResponse:
      type: object
      properties:
        schedulingPolicies:
          allOf:
          - $ref: '#/components/schemas/SchedulingPolicyListingDetailList'
          description: A list of scheduling policies that match the request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `nextToken` value to include in a future `ListSchedulingPolicies`
            request. When the results of a `ListSchedulingPolicies` request exceed
            `maxResults`, this value can be used to retrieve the next page of results.
            This value is `null` when there are no more results to return.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) that identifies the resource
            that tags are listed for. Batch resources that support tags are compute
            environments, jobs, job definitions, job queues, and scheduling policies.
            ARNs for child jobs of array and multi-node parallel (MNP) jobs aren't
            supported.
      required:
      - resourceArn
      description: Contains the parameters for `ListTagsForResource`.
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags for the resource.
    ListTaskContainerDetails:
      type: array
      items:
        $ref: '#/components/schemas/TaskContainerDetails'
    ListTaskContainerOverrides:
      type: array
      items:
        $ref: '#/components/schemas/TaskContainerOverrides'
    ListTaskContainerProperties:
      type: array
      items:
        $ref: '#/components/schemas/TaskContainerProperties'
    ListTaskPropertiesOverride:
      type: array
      items:
        $ref: '#/components/schemas/TaskPropertiesOverride'
    LogConfiguration:
      type: object
      properties:
        logDriver:
          allOf:
          - $ref: '#/components/schemas/LogDriver'
          description: "The log driver to use for the container. The valid values\
            \ that are listed for this parameter are log drivers that the Amazon ECS\
            \ container agent can communicate with by default.\n\nThe supported log\
            \ drivers are `awslogs`, `fluentd`, `gelf`, `json-file`, `journald`, `logentries`,\
            \ `syslog`, and `splunk`.\n\nJobs that are running on Fargate resources\
            \ are restricted to the `awslogs` and `splunk` log drivers.\n\nawsfirelens\n\
            \n    \n\nSpecifies the firelens logging driver. For more information\
            \ on configuring Firelens, see [Send Amazon ECS logs to an Amazon Web\
            \ Services service or Amazon Web Services Partner](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)\
            \ in the _Amazon Elastic Container Service Developer Guide_.\n\nawslogs\n\
            \n    \n\nSpecifies the Amazon CloudWatch Logs logging driver. For more\
            \ information, see [Using the awslogs log driver](https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html)\
            \ in the _Batch User Guide_ and [Amazon CloudWatch Logs logging driver](https://docs.docker.com/config/containers/logging/awslogs/)\
            \ in the Docker documentation.\n\nfluentd\n\n    \n\nSpecifies the Fluentd\
            \ logging driver. For more information including usage and options, see\
            \ [Fluentd logging driver](https://docs.docker.com/config/containers/logging/fluentd/)\
            \ in the _Docker documentation_.\n\ngelf\n\n    \n\nSpecifies the Graylog\
            \ Extended Format (GELF) logging driver. For more information including\
            \ usage and options, see [Graylog Extended Format logging driver](https://docs.docker.com/config/containers/logging/gelf/)\
            \ in the _Docker documentation_.\n\njournald\n\n    \n\nSpecifies the\
            \ journald logging driver. For more information including usage and options,\
            \ see [Journald logging driver](https://docs.docker.com/config/containers/logging/journald/)\
            \ in the _Docker documentation_.\n\njson-file\n\n    \n\nSpecifies the\
            \ JSON file logging driver. For more information including usage and options,\
            \ see [JSON File logging driver](https://docs.docker.com/config/containers/logging/json-file/)\
            \ in the _Docker documentation_.\n\nsplunk\n\n    \n\nSpecifies the Splunk\
            \ logging driver. For more information including usage and options, see\
            \ [Splunk logging driver](https://docs.docker.com/config/containers/logging/splunk/)\
            \ in the _Docker documentation_.\n\nsyslog\n\n    \n\nSpecifies the syslog\
            \ logging driver. For more information including usage and options, see\
            \ [Syslog logging driver](https://docs.docker.com/config/containers/logging/syslog/)\
            \ in the _Docker documentation_.\n\nIf you have a custom driver that's\
            \ not listed earlier that you want to work with the Amazon ECS container\
            \ agent, you can fork the Amazon ECS container agent project that's [available\
            \ on GitHub](https://github.com/aws/amazon-ecs-agent) and customize it\
            \ to work with that driver. We encourage you to submit pull requests for\
            \ changes that you want to have included. However, Amazon Web Services\
            \ doesn't currently support running modified copies of this software.\n\
            \nThis parameter requires version 1.18 of the Docker Remote API or greater\
            \ on your container instance. To check the Docker Remote API version on\
            \ your container instance, log in to your container instance and run the\
            \ following command: `sudo docker version | grep \"Server API version\"\
            `"
        options:
          allOf:
          - $ref: '#/components/schemas/LogConfigurationOptionsMap'
          description: 'The configuration options to send to the log driver. This
            parameter requires version 1.19 of the Docker Remote API or greater on
            your container instance. To check the Docker Remote API version on your
            container instance, log in to your container instance and run the following
            command: `sudo docker version | grep "Server API version"`'
        secretOptions:
          allOf:
          - $ref: '#/components/schemas/SecretList'
          description: The secrets to pass to the log configuration. For more information,
            see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html)
            in the _Batch User Guide_.
      required:
      - logDriver
      description: Log configuration options to send to a custom log driver for the
        container.
    LogConfigurationOptionsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    LogDriver:
      type: string
      enum:
      - json-file
      - syslog
      - journald
      - gelf
      - fluentd
      - awslogs
      - splunk
      - awsfirelens
    Long:
      type: integer
      format: int64
    MountPoint:
      type: object
      properties:
        containerPath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The path on the container where the host volume is mounted.
        readOnly:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: If this value is `true`, the container has read-only access
            to the volume. Otherwise, the container can write to the volume. The default
            value is `false`.
        sourceVolume:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the volume to mount.
      description: Details for a Docker volume mount point that's used in a job's
        container properties. This parameter maps to `Volumes` in the [Create a container](https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerCreate)
        section of the _Docker Remote API_ and the `--volume` option to docker run.
    MountPoints:
      type: array
      items:
        $ref: '#/components/schemas/MountPoint'
    NetworkConfiguration:
      type: object
      properties:
        assignPublicIp:
          allOf:
          - $ref: '#/components/schemas/AssignPublicIp'
          description: Indicates whether the job has a public IP address. For a job
            that's running on Fargate resources in a private subnet to send outbound
            traffic to the internet (for example, to pull container images), the private
            subnet requires a NAT gateway be attached to route requests to the internet.
            For more information, see [Amazon ECS task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
            in the _Amazon Elastic Container Service Developer Guide_. The default
            value is "`DISABLED`".
      description: The network configuration for jobs that are running on Fargate
        resources. Jobs that are running on Amazon EC2 resources must not specify
        this parameter.
    NetworkInterface:
      type: object
      properties:
        attachmentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The attachment ID for the network interface.
        ipv6Address:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The private IPv6 address for the network interface.
        privateIpv4Address:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The private IPv4 address for the network interface.
      description: An object that represents the elastic network interface for a multi-node
        parallel job node.
    NetworkInterfaceList:
      type: array
      items:
        $ref: '#/components/schemas/NetworkInterface'
    NodeDetails:
      type: object
      properties:
        nodeIndex:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The node index for the node. Node index numbering starts at
            zero. This index is also available on the node with the `AWS_BATCH_JOB_NODE_INDEX`
            environment variable.
        isMainNode:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the current node is the main node for a multi-node
            parallel job.
      description: An object that represents the details of a multi-node parallel
        job node.
    NodeOverrides:
      type: object
      properties:
        numNodes:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: "The number of nodes to use with a multi-node parallel job.\
            \ This value overrides the number of nodes that are specified in the job\
            \ definition. To use this override, you must meet the following conditions:\n\
            \n  * There must be at least one node range in your job definition that\
            \ has an open upper boundary, such as `:` or `n:`.\n\n  * The lower boundary\
            \ of the node range that's specified in the job definition must be fewer\
            \ than the number of nodes specified in the override.\n\n  * The main\
            \ node index that's specified in the job definition must be fewer than\
            \ the number of nodes specified in the override."
        nodePropertyOverrides:
          allOf:
          - $ref: '#/components/schemas/NodePropertyOverrides'
          description: The node property overrides for the job.
      description: 'An object that represents any node overrides to a job definition
        that''s used in a [SubmitJob](https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html)
        API operation.


        This parameter isn''t applicable to jobs that are running on Fargate resources.
        Don''t provide it for these jobs. Rather, use `containerOverrides` instead.'
    NodeProperties:
      type: object
      properties:
        numNodes:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of nodes that are associated with a multi-node parallel
            job.
        mainNode:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies the node index for the main node of a multi-node
            parallel job. This node index value must be fewer than the number of nodes.
        nodeRangeProperties:
          allOf:
          - $ref: '#/components/schemas/NodeRangeProperties'
          description: A list of node ranges and their properties that are associated
            with a multi-node parallel job.
      required:
      - numNodes
      - mainNode
      - nodeRangeProperties
      description: 'An object that represents the node properties of a multi-node
        parallel job.


        Node properties can''t be specified for Amazon EKS based job definitions.'
    NodePropertiesSummary:
      type: object
      properties:
        isMainNode:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the current node is the main node for a multi-node
            parallel job.
        numNodes:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of nodes that are associated with a multi-node parallel
            job.
        nodeIndex:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The node index for the node. Node index numbering begins at
            zero. This index is also available on the node with the `AWS_BATCH_JOB_NODE_INDEX`
            environment variable.
      description: An object that represents the properties of a node that's associated
        with a multi-node parallel job.
    NodePropertyOverride:
      type: object
      properties:
        targetNodes:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The range of nodes, using node index values, that's used to
            override. A range of `0:3` indicates nodes with index values of `0` through
            `3`. If the starting range value is omitted (`:n`), then `0` is used to
            start the range. If the ending range value is omitted (`n:`), then the
            highest possible node index is used to end the range.
        containerOverrides:
          allOf:
          - $ref: '#/components/schemas/ContainerOverrides'
          description: The overrides that are sent to a node range.
        ecsPropertiesOverride:
          allOf:
          - $ref: '#/components/schemas/EcsPropertiesOverride'
          description: An object that contains the properties that you want to replace
            for the existing Amazon ECS resources of a job.
        instanceTypes:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: An object that contains the instance types that you want to
            replace for the existing resources of a job.
        eksPropertiesOverride:
          allOf:
          - $ref: '#/components/schemas/EksPropertiesOverride'
          description: An object that contains the properties that you want to replace
            for the existing Amazon EKS resources of a job.
        consumableResourcePropertiesOverride:
          allOf:
          - $ref: '#/components/schemas/ConsumableResourceProperties'
          description: An object that contains overrides for the consumable resources
            of a job.
      required:
      - targetNodes
      description: The object that represents any node overrides to a job definition
        that's used in a [SubmitJob](https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html)
        API operation.
    NodePropertyOverrides:
      type: array
      items:
        $ref: '#/components/schemas/NodePropertyOverride'
    NodeRangeProperties:
      type: array
      items:
        $ref: '#/components/schemas/NodeRangeProperty'
    NodeRangeProperty:
      type: object
      properties:
        targetNodes:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The range of nodes, using node index values. A range of `0:3`
            indicates nodes with index values of `0` through `3`. If the starting
            range value is omitted (`:n`), then `0` is used to start the range. If
            the ending range value is omitted (`n:`), then the highest possible node
            index is used to end the range. Your accumulative node ranges must account
            for all nodes (`0:n`). You can nest node ranges (for example, `0:10` and
            `4:5`). In this case, the `4:5` range properties override the `0:10` properties.
        container:
          allOf:
          - $ref: '#/components/schemas/ContainerProperties'
          description: The container details for the node range.
        instanceTypes:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The instance types of the underlying host infrastructure of
            a multi-node parallel job.


            This parameter isn''t applicable to jobs that are running on Fargate resources.


            In addition, this list object is currently limited to one element.'
        ecsProperties:
          allOf:
          - $ref: '#/components/schemas/EcsProperties'
          description: This is an object that represents the properties of the node
            range for a multi-node parallel job.
        eksProperties:
          allOf:
          - $ref: '#/components/schemas/EksProperties'
          description: This is an object that represents the properties of the node
            range for a multi-node parallel job.
        consumableResourceProperties:
          allOf:
          - $ref: '#/components/schemas/ConsumableResourceProperties'
          description: Contains a list of consumable resources required by a job.
      required:
      - targetNodes
      description: This is an object that represents the properties of the node range
        for a multi-node parallel job.
    OrchestrationType:
      type: string
      enum:
      - ECS
      - EKS
    ParametersMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    PlatformCapability:
      type: string
      enum:
      - EC2
      - FARGATE
    PlatformCapabilityList:
      type: array
      items:
        $ref: '#/components/schemas/PlatformCapability'
    Quantity:
      type: string
      minLength: 1
      maxLength: 256
    RegisterJobDefinitionRequest:
      type: object
      properties:
        jobDefinitionName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the job definition to register. It can be up to
            128 letters long. It can contain uppercase and lowercase letters, numbers,
            hyphens (-), and underscores (_).
        type:
          allOf:
          - $ref: '#/components/schemas/JobDefinitionType'
          description: "The type of job definition. For more information about multi-node\
            \ parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html)\
            \ in the _Batch User Guide_.\n\n  * If the value is `container`, then\
            \ one of the following is required: `containerProperties`, `ecsProperties`,\
            \ or `eksProperties`.\n\n  * If the value is `multinode`, then `nodeProperties`\
            \ is required.\n\nIf the job is run on Fargate resources, then `multinode`\
            \ isn't supported."
        parameters:
          allOf:
          - $ref: '#/components/schemas/ParametersMap'
          description: Default parameter substitution placeholders to set in the job
            definition. Parameters are specified as a key-value pair mapping. Parameters
            in a `SubmitJob` request override any corresponding parameter defaults
            from the job definition.
        schedulingPriority:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The scheduling priority for jobs that are submitted with this
            job definition. This only affects jobs in job queues with a fair-share
            policy. Jobs with a higher scheduling priority are scheduled before jobs
            with a lower scheduling priority.


            The minimum supported value is 0 and the maximum supported value is 9999.'
        containerProperties:
          allOf:
          - $ref: '#/components/schemas/ContainerProperties'
          description: 'An object with properties specific to Amazon ECS-based single-node
            container-based jobs. If the job definition''s `type` parameter is `container`,
            then you must specify either `containerProperties` or `nodeProperties`.
            This must not be specified for Amazon EKS-based job definitions.


            If the job runs on Fargate resources, then you must not specify `nodeProperties`;
            use only `containerProperties`.'
        nodeProperties:
          allOf:
          - $ref: '#/components/schemas/NodeProperties'
          description: 'An object with properties specific to multi-node parallel
            jobs. If you specify node properties for a job, it becomes a multi-node
            parallel job. For more information, see [Multi-node Parallel Jobs](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-parallel-jobs.html)
            in the _Batch User Guide_.


            If the job runs on Fargate resources, then you must not specify `nodeProperties`;
            use `containerProperties` instead.


            If the job runs on Amazon EKS resources, then you must not specify `nodeProperties`.'
        retryStrategy:
          allOf:
          - $ref: '#/components/schemas/RetryStrategy'
          description: The retry strategy to use for failed jobs that are submitted
            with this job definition. Any retry strategy that's specified during a
            SubmitJob operation overrides the retry strategy defined here. If a job
            is terminated due to a timeout, it isn't retried.
        propagateTags:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether to propagate the tags from the job or job
            definition to the corresponding Amazon ECS task. If no value is specified,
            the tags are not propagated. Tags can only be propagated to the tasks
            during task creation. For tags with the same name, job tags are given
            priority over job definitions tags. If the total number of combined tags
            from the job and job definition is over 50, the job is moved to the `FAILED`
            state.


            If the job runs on Amazon EKS resources, then you must not specify `propagateTags`.'
        timeout:
          allOf:
          - $ref: '#/components/schemas/JobTimeout'
          description: The timeout configuration for jobs that are submitted with
            this job definition, after which Batch terminates your jobs if they have
            not finished. If a job is terminated due to a timeout, it isn't retried.
            The minimum value for the timeout is 60 seconds. Any timeout configuration
            that's specified during a SubmitJob operation overrides the timeout configuration
            defined here. For more information, see [Job Timeouts](https://docs.aws.amazon.com/batch/latest/userguide/job_timeouts.html)
            in the _Batch User Guide_.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags that you apply to the job definition to help you categorize
            and organize your resources. Each tag consists of a key and an optional
            value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html)
            in _Batch User Guide_.
        platformCapabilities:
          allOf:
          - $ref: '#/components/schemas/PlatformCapabilityList'
          description: 'The platform capabilities required by the job definition.
            If no value is specified, it defaults to `EC2`. To run the job on Fargate
            resources, specify `FARGATE`.


            If the job runs on Amazon EKS resources, then you must not specify `platformCapabilities`.'
        eksProperties:
          allOf:
          - $ref: '#/components/schemas/EksProperties'
          description: An object with properties that are specific to Amazon EKS-based
            jobs. This must not be specified for Amazon ECS based job definitions.
        ecsProperties:
          allOf:
          - $ref: '#/components/schemas/EcsProperties'
          description: An object with properties that are specific to Amazon ECS-based
            jobs. This must not be specified for Amazon EKS-based job definitions.
        consumableResourceProperties:
          allOf:
          - $ref: '#/components/schemas/ConsumableResourceProperties'
          description: Contains a list of consumable resources required by the job.
      required:
      - jobDefinitionName
      - type
      description: Contains the parameters for `RegisterJobDefinition`.
    RegisterJobDefinitionResponse:
      type: object
      properties:
        jobDefinitionName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the job definition.
        jobDefinitionArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job definition.
        revision:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The revision of the job definition.
      required:
      - jobDefinitionName
      - jobDefinitionArn
      - revision
    RepositoryCredentials:
      type: object
      properties:
        credentialsParameter:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the secret containing the
            private repository credentials.
      required:
      - credentialsParameter
      description: The repository credentials for private registry authentication.
    ResourceRequirement:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The quantity of the specified resource to reserve for the\
            \ container. The values vary based on the `type` specified.\n\ntype=\"\
            GPU\"\n\n    \n\nThe number of physical GPUs to reserve for the container.\
            \ Make sure that the number of GPUs reserved for all containers in a job\
            \ doesn't exceed the number of available GPUs on the compute resource\
            \ that the job is launched on.\n\nGPUs aren't available for jobs that\
            \ are running on Fargate resources.\n\ntype=\"MEMORY\"\n\n    \n\nThe\
            \ memory hard limit (in MiB) present to the container. This parameter\
            \ is supported for jobs that are running on Amazon EC2 resources. If your\
            \ container attempts to exceed the memory specified, the container is\
            \ terminated. This parameter maps to `Memory` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)\
            \ section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)\
            \ and the `--memory` option to [docker run](https://docs.docker.com/engine/reference/run/).\
            \ You must specify at least 4 MiB of memory for a job. This is required\
            \ but can be specified in several places for multi-node parallel (MNP)\
            \ jobs. It must be specified for each node at least once. This parameter\
            \ maps to `Memory` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)\
            \ section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)\
            \ and the `--memory` option to [docker run](https://docs.docker.com/engine/reference/run/).\n\
            \nIf you're trying to maximize your resource utilization by providing\
            \ your jobs as much memory as possible for a particular instance type,\
            \ see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html)\
            \ in the _Batch User Guide_.\n\nFor jobs that are running on Fargate resources,\
            \ then `value` is the hard limit (in MiB), and must match one of the supported\
            \ values and the `VCPU` values must be one of the values supported for\
            \ that memory value.\n\nvalue = 512\n\n    \n\n`VCPU` = 0.25\n\nvalue\
            \ = 1024\n\n    \n\n`VCPU` = 0.25 or 0.5\n\nvalue = 2048\n\n    \n\n`VCPU`\
            \ = 0.25, 0.5, or 1\n\nvalue = 3072\n\n    \n\n`VCPU` = 0.5, or 1\n\n\
            value = 4096\n\n    \n\n`VCPU` = 0.5, 1, or 2\n\nvalue = 5120, 6144, or\
            \ 7168\n\n    \n\n`VCPU` = 1 or 2\n\nvalue = 8192\n\n    \n\n`VCPU` =\
            \ 1, 2, or 4\n\nvalue = 9216, 10240, 11264, 12288, 13312, 14336, or 15360\n\
            \n    \n\n`VCPU` = 2 or 4\n\nvalue = 16384\n\n    \n\n`VCPU` = 2, 4, or\
            \ 8\n\nvalue = 17408, 18432, 19456, 21504, 22528, 23552, 25600, 26624,\
            \ 27648, 29696, or 30720\n\n    \n\n`VCPU` = 4\n\nvalue = 20480, 24576,\
            \ or 28672\n\n    \n\n`VCPU` = 4 or 8\n\nvalue = 36864, 45056, 53248,\
            \ or 61440\n\n    \n\n`VCPU` = 8\n\nvalue = 32768, 40960, 49152, or 57344\n\
            \n    \n\n`VCPU` = 8 or 16\n\nvalue = 65536, 73728, 81920, 90112, 98304,\
            \ 106496, 114688, or 122880\n\n    \n\n`VCPU` = 16\n\ntype=\"VCPU\"\n\n\
            \    \n\nThe number of vCPUs reserved for the container. This parameter\
            \ maps to `CpuShares` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)\
            \ section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)\
            \ and the `--cpu-shares` option to [docker run](https://docs.docker.com/engine/reference/run/).\
            \ Each vCPU is equivalent to 1,024 CPU shares. For Amazon EC2 resources,\
            \ you must specify at least one vCPU. This is required but can be specified\
            \ in several places; it must be specified for each node at least once.\n\
            \nThe default for the Fargate On-Demand vCPU resource count quota is 6\
            \ vCPUs. For more information about Fargate quotas, see [Fargate quotas](https://docs.aws.amazon.com/general/latest/gr/ecs-service.html#service-quotas-fargate)\
            \ in the _Amazon Web Services General Reference_.\n\nFor jobs that are\
            \ running on Fargate resources, then `value` must match one of the supported\
            \ values and the `MEMORY` values must be one of the values supported for\
            \ that `VCPU` value. The supported values are 0.25, 0.5, 1, 2, 4, 8, and\
            \ 16\n\nvalue = 0.25\n\n    \n\n`MEMORY` = 512, 1024, or 2048\n\nvalue\
            \ = 0.5\n\n    \n\n`MEMORY` = 1024, 2048, 3072, or 4096\n\nvalue = 1\n\
            \n    \n\n`MEMORY` = 2048, 3072, 4096, 5120, 6144, 7168, or 8192\n\nvalue\
            \ = 2\n\n    \n\n`MEMORY` = 4096, 5120, 6144, 7168, 8192, 9216, 10240,\
            \ 11264, 12288, 13312, 14336, 15360, or 16384\n\nvalue = 4\n\n    \n\n\
            `MEMORY` = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384,\
            \ 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624,\
            \ 27648, 28672, 29696, or 30720\n\nvalue = 8\n\n    \n\n`MEMORY` = 16384,\
            \ 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344,\
            \ or 61440\n\nvalue = 16\n\n    \n\n`MEMORY` = 32768, 40960, 49152, 57344,\
            \ 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880"
        type:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of resource to assign to a container. The supported
            resources include `GPU`, `MEMORY`, and `VCPU`.
      required:
      - value
      - type
      description: The type and amount of a resource to assign to a container. The
        supported resources include `GPU`, `MEMORY`, and `VCPU`.
    ResourceRequirements:
      type: array
      items:
        $ref: '#/components/schemas/ResourceRequirement'
    ResourceType:
      type: string
      enum:
      - GPU
      - VCPU
      - MEMORY
    RetryAction:
      type: string
      enum:
      - RETRY
      - EXIT
    RetryStrategy:
      type: object
      properties:
        attempts:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of times to move a job to the `RUNNABLE` status.
            You can specify between 1 and 10 attempts. If the value of `attempts`
            is greater than one, the job is retried on failure the same number of
            attempts as the value.
        evaluateOnExit:
          allOf:
          - $ref: '#/components/schemas/EvaluateOnExitList'
          description: Array of up to 5 objects that specify the conditions where
            jobs are retried or failed. If this parameter is specified, then the `attempts`
            parameter must also be specified. If none of the listed conditions match,
            then the job is retried.
      description: The retry strategy that's associated with a job. For more information,
        see [Automated job retries](https://docs.aws.amazon.com/batch/latest/userguide/job_retries.html)
        in the _Batch User Guide_.
    RuntimePlatform:
      type: object
      properties:
        operatingSystemFamily:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The operating system for the compute environment. Valid values
            are: `LINUX` (default), `WINDOWS_SERVER_2019_CORE`, `WINDOWS_SERVER_2019_FULL`,
            `WINDOWS_SERVER_2022_CORE`, and `WINDOWS_SERVER_2022_FULL`.


            The following parameters can’t be set for Windows containers: `linuxParameters`,
            `privileged`, `user`, `ulimits`, `readonlyRootFilesystem`, and `efsVolumeConfiguration`.


            The Batch Scheduler checks the compute environments that are attached
            to the job queue before registering a task definition with Fargate. In
            this scenario, the job queue is where the job is submitted. If the job
            requires a Windows container and the first compute environment is `LINUX`,
            the compute environment is skipped and the next compute environment is
            checked until a Windows-based compute environment is found.


            Fargate Spot is not supported for `ARM64` and Windows-based containers
            on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows
            job is submitted to a job queue with only Fargate Spot compute environments.
            However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments
            to the same job queue.'
        cpuArchitecture:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The vCPU architecture. The default value is `X86_64`. Valid
            values are `X86_64` and `ARM64`.


            This parameter must be set to `X86_64` for Windows containers.


            Fargate Spot is not supported for `ARM64` and Windows-based containers
            on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows
            job is submitted to a job queue with only Fargate Spot compute environments.
            However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments
            to the same job queue.'
      description: An object that represents the compute environment architecture
        for Batch jobs on Fargate.
    SchedulingPolicyDetail:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the fair-share scheduling policy.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the scheduling policy. An
            example is `arn:_aws_ :batch:_us-east-1_ :_123456789012_ :scheduling-policy/_HighPriority_
            `.
        fairsharePolicy:
          allOf:
          - $ref: '#/components/schemas/FairsharePolicy'
          description: The fair-share scheduling policy details.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags that you apply to the fair-share scheduling policy
            to categorize and organize your resources. Each tag consists of a key
            and an optional value. For more information, see [Tagging Amazon Web Services
            resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
            in _Amazon Web Services General Reference_.
      required:
      - name
      - arn
      description: An object that represents a scheduling policy.
    SchedulingPolicyDetailList:
      type: array
      items:
        $ref: '#/components/schemas/SchedulingPolicyDetail'
    SchedulingPolicyListingDetail:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Amazon Resource Name (ARN) of the scheduling policy.
      required:
      - arn
      description: An object that contains the details of a scheduling policy that's
        returned in a `ListSchedulingPolicy` action.
    SchedulingPolicyListingDetailList:
      type: array
      items:
        $ref: '#/components/schemas/SchedulingPolicyListingDetail'
    Secret:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the secret.
        valueFrom:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The secret to expose to the container. The supported values
            are either the full Amazon Resource Name (ARN) of the Secrets Manager
            secret or the full ARN of the parameter in the Amazon Web Services Systems
            Manager Parameter Store.


            If the Amazon Web Services Systems Manager Parameter Store parameter exists
            in the same Region as the job you''re launching, then you can use either
            the full Amazon Resource Name (ARN) or name of the parameter. If the parameter
            exists in a different Region, then the full ARN must be specified.'
      required:
      - name
      - valueFrom
      description: "An object that represents the secret to expose to your container.\
        \ Secrets can be exposed to a container in the following ways:\n\n  * To inject\
        \ sensitive data into your containers as environment variables, use the `secrets`\
        \ container definition parameter.\n\n  * To reference sensitive information\
        \ in the log configuration of a container, use the `secretOptions` container\
        \ definition parameter.\n\nFor more information, see [Specifying sensitive\
        \ data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html)\
        \ in the _Batch User Guide_."
    SecretList:
      type: array
      items:
        $ref: '#/components/schemas/Secret'
    ServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: These errors are usually caused by a server issue.
    ShareAttributes:
      type: object
      properties:
        shareIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'A share identifier or share identifier prefix. If the string
            ends with an asterisk (*), this entry specifies the weight factor to use
            for share identifiers that start with that prefix. The list of share identifiers
            in a fair-share policy can''t overlap. For example, you can''t have one
            that specifies a `shareIdentifier` of `UserA*` and another that specifies
            a `shareIdentifier` of `UserA-1`.


            There can be no more than 500 share identifiers active in a job queue.


            The string is limited to 255 alphanumeric characters, and can be followed
            by an asterisk (*).'
        weightFactor:
          allOf:
          - $ref: '#/components/schemas/Float'
          description: 'The weight factor for the share identifier. The default value
            is 1.0. A lower value has a higher priority for compute resources. For
            example, jobs that use a share identifier with a weight factor of 0.125
            (1/8) get 8 times the compute resources of jobs that use a share identifier
            with a weight factor of 1.


            The smallest supported value is 0.0001, and the largest supported value
            is 999.9999.'
      required:
      - shareIdentifier
      description: Specifies the weights for the share identifiers for the fair-share
        policy. Share identifiers that aren't included have a default weight of `1.0`.
    ShareAttributesList:
      type: array
      items:
        $ref: '#/components/schemas/ShareAttributes'
    String:
      type: string
    StringList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    SubmitJobRequest:
      type: object
      properties:
        jobName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the job. It can be up to 128 letters long. The
            first character must be alphanumeric, can contain uppercase and lowercase
            letters, numbers, hyphens (-), and underscores (_).
        jobQueue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job queue where the job is submitted. You can specify either
            the name or the Amazon Resource Name (ARN) of the queue.
        shareIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The share identifier for the job. Don''t specify this parameter
            if the job queue doesn''t have a fair-share scheduling policy. If the
            job queue has a fair-share scheduling policy, then this parameter must
            be specified.


            This string is limited to 255 alphanumeric characters, and can be followed
            by an asterisk (*).'
        schedulingPriorityOverride:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The scheduling priority for the job. This only affects jobs
            in job queues with a fair-share policy. Jobs with a higher scheduling
            priority are scheduled before jobs with a lower scheduling priority. This
            overrides any scheduling priority in the job definition and works only
            within a single share identifier.


            The minimum supported value is 0 and the maximum supported value is 9999.'
        arrayProperties:
          allOf:
          - $ref: '#/components/schemas/ArrayProperties'
          description: The array properties for the submitted job, such as the size
            of the array. The array size can be between 2 and 10,000. If you specify
            array properties for a job, it becomes an array job. For more information,
            see [Array Jobs](https://docs.aws.amazon.com/batch/latest/userguide/array_jobs.html)
            in the _Batch User Guide_.
        dependsOn:
          allOf:
          - $ref: '#/components/schemas/JobDependencyList'
          description: A list of dependencies for the job. A job can depend upon a
            maximum of 20 jobs. You can specify a `SEQUENTIAL` type dependency without
            specifying a job ID for array jobs so that each child array job completes
            sequentially, starting at index 0. You can also specify an `N_TO_N` type
            dependency with a job ID for array jobs. In that case, each index child
            of this job must wait for the corresponding index child of each dependency
            to complete before it can begin.
        jobDefinition:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The job definition used by this job. This value can be one
            of `definition-name`, `definition-name:revision`, or the Amazon Resource
            Name (ARN) for the job definition, with or without the revision (`arn:aws:batch:_region_
            :_account_ :job-definition/_definition-name_ :_revision_ `, or `arn:aws:batch:_region_
            :_account_ :job-definition/_definition-name_ `).


            If the revision is not specified, then the latest active revision is used.'
        parameters:
          allOf:
          - $ref: '#/components/schemas/ParametersMap'
          description: Additional parameters passed to the job that replace parameter
            substitution placeholders that are set in the job definition. Parameters
            are specified as a key and value pair mapping. Parameters in a `SubmitJob`
            request override any corresponding parameter defaults from the job definition.
        containerOverrides:
          allOf:
          - $ref: '#/components/schemas/ContainerOverrides'
          description: An object with properties that override the defaults for the
            job definition that specify the name of a container in the specified job
            definition and the overrides it should receive. You can override the default
            command for a container, which is specified in the job definition or the
            Docker image, with a `command` override. You can also override existing
            environment variables on a container or add new environment variables
            to it with an `environment` override.
        nodeOverrides:
          allOf:
          - $ref: '#/components/schemas/NodeOverrides'
          description: 'A list of node overrides in JSON format that specify the node
            range to target and the container overrides for that node range.


            This parameter isn''t applicable to jobs that are running on Fargate resources;
            use `containerOverrides` instead.'
        retryStrategy:
          allOf:
          - $ref: '#/components/schemas/RetryStrategy'
          description: The retry strategy to use for failed jobs from this SubmitJob
            operation. When a retry strategy is specified here, it overrides the retry
            strategy defined in the job definition.
        propagateTags:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether to propagate the tags from the job or job
            definition to the corresponding Amazon ECS task. If no value is specified,
            the tags aren't propagated. Tags can only be propagated to the tasks during
            task creation. For tags with the same name, job tags are given priority
            over job definitions tags. If the total number of combined tags from the
            job and job definition is over 50, the job is moved to the `FAILED` state.
            When specified, this overrides the tag propagation setting in the job
            definition.
        timeout:
          allOf:
          - $ref: '#/components/schemas/JobTimeout'
          description: The timeout configuration for this SubmitJob operation. You
            can specify a timeout duration after which Batch terminates your jobs
            if they haven't finished. If a job is terminated due to a timeout, it
            isn't retried. The minimum value for the timeout is 60 seconds. This configuration
            overrides any timeout configuration specified in the job definition. For
            array jobs, child jobs have the same timeout configuration as the parent
            job. For more information, see [Job Timeouts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html)
            in the _Amazon Elastic Container Service Developer Guide_.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags that you apply to the job request to help you categorize
            and organize your resources. Each tag consists of a key and an optional
            value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
            in _Amazon Web Services General Reference_.
        eksPropertiesOverride:
          allOf:
          - $ref: '#/components/schemas/EksPropertiesOverride'
          description: An object, with properties that override defaults for the job
            definition, can only be specified for jobs that are run on Amazon EKS
            resources.
        ecsPropertiesOverride:
          allOf:
          - $ref: '#/components/schemas/EcsPropertiesOverride'
          description: An object, with properties that override defaults for the job
            definition, can only be specified for jobs that are run on Amazon ECS
            resources.
        consumableResourcePropertiesOverride:
          allOf:
          - $ref: '#/components/schemas/ConsumableResourceProperties'
          description: An object that contains overrides for the consumable resources
            of a job.
      required:
      - jobName
      - jobQueue
      - jobDefinition
      description: Contains the parameters for `SubmitJob`.
    SubmitJobResponse:
      type: object
      properties:
        jobArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) for the job.
        jobName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the job.
        jobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique identifier for the job.
      required:
      - jobName
      - jobId
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeysList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the resource that tags are
            added to. Batch resources that support tags are compute environments,
            jobs, job definitions, job queues, and scheduling policies. ARNs for child
            jobs of array and multi-node parallel (MNP) jobs aren't supported.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagrisTagsMap'
          description: The tags that you apply to the resource to help you categorize
            and organize your resources. Each tag consists of a key and an optional
            value. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
            in _Amazon Web Services General Reference_.
      required:
      - resourceArn
      - tags
      description: Contains the parameters for `TagResource`.
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TagrisTagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    TaskContainerDependency:
      type: object
      properties:
        containerName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique identifier for the container.
        condition:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The dependency condition of the container. The following are\
            \ the available conditions and their behavior:\n\n  * `START` \\- This\
            \ condition emulates the behavior of links and volumes today. It validates\
            \ that a dependent container is started before permitting other containers\
            \ to start. \n\n  * `COMPLETE` \\- This condition validates that a dependent\
            \ container runs to completion (exits) before permitting other containers\
            \ to start. This can be useful for nonessential containers that run a\
            \ script and then exit. This condition can't be set on an essential container.\
            \ \n\n  * `SUCCESS` \\- This condition is the same as `COMPLETE`, but\
            \ it also requires that the container exits with a zero status. This condition\
            \ can't be set on an essential container."
      description: A list of containers that this task depends on.
    TaskContainerDependencyList:
      type: array
      items:
        $ref: '#/components/schemas/TaskContainerDependency'
    TaskContainerDetails:
      type: object
      properties:
        command:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The command that's passed to the container. This parameter
            maps to `Cmd` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `COMMAND` parameter to [docker run](https://docs.docker.com/engine/reference/run/).
            For more information, see <https://docs.docker.com/engine/reference/builder/#cmd>.
        dependsOn:
          allOf:
          - $ref: '#/components/schemas/TaskContainerDependencyList'
          description: A list of containers that this container depends on.
        environment:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariables'
          description: 'The environment variables to pass to a container. This parameter
            maps to `Env` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--env` option to [docker run](https://docs.docker.com/engine/reference/run/).


            We don''t recommend using plaintext environment variables for sensitive
            information, such as credential data.'
        essential:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'If the essential parameter of a container is marked as `true`,
            and that container fails or stops for any reason, all other containers
            that are part of the task are stopped. If the `essential` parameter of
            a container is marked as false, its failure doesn''t affect the rest of
            the containers in a task. If this parameter is omitted, a container is
            assumed to be essential.


            All jobs must have at least one essential container. If you have an application
            that''s composed of multiple containers, group containers that are used
            for a common purpose into components, and separate the different components
            into multiple task definitions. For more information, see [Application
            Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html)
            in the _Amazon Elastic Container Service Developer Guide_.'
        firelensConfiguration:
          allOf:
          - $ref: '#/components/schemas/FirelensConfiguration'
          description: The FireLens configuration for the container. This is used
            to specify and configure a log router for container logs. For more information,
            see [Custom log](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
            routing in the _Amazon Elastic Container Service Developer Guide_.
        image:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The image used to start a container. This string is passed
            directly to the Docker daemon. By default, images in the Docker Hub registry
            are available. Other repositories are specified with either `repository-url/image:tag`
            or `repository-url/image@digest`. Up to 255 letters (uppercase and lowercase),
            numbers, hyphens, underscores, colons, periods, forward slashes, and number
            signs are allowed. This parameter maps to `Image` in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the `IMAGE` parameter of the [ _docker run_ ](https://docs.docker.com/engine/reference/run/#security-configuration).
        linuxParameters:
          allOf:
          - $ref: '#/components/schemas/LinuxParameters'
          description: 'Linux-specific modifications that are applied to the container,
            such as Linux kernel capabilities. For more information, see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).


            This parameter is not supported for Windows containers.'
        logConfiguration:
          allOf:
          - $ref: '#/components/schemas/LogConfiguration'
          description: 'The log configuration specification for the container.


            This parameter maps to `LogConfig` in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the `--log-driver` option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration).


            By default, containers use the same logging driver that the Docker daemon
            uses. However the container can use a different logging driver than the
            Docker daemon by specifying a log driver with this parameter in the container
            definition. To use a different logging driver for a container, the log
            system must be configured properly on the container instance (or on a
            different log server for remote logging options). For more information
            about the options for different supported log drivers, see [Configure
            logging drivers ](https://docs.docker.com/engine/admin/logging/overview/)
            in the _Docker documentation_.


            Amazon ECS currently supports a subset of the logging drivers available
            to the Docker daemon (shown in the `LogConfiguration` data type). Additional
            log drivers may be available in future releases of the Amazon ECS container
            agent.


            This parameter requires version 1.18 of the Docker Remote API or greater
            on your container instance. To check the Docker Remote API version on
            your container instance, log in to your container instance and run the
            following command: sudo docker version `--format ''{{.Server.APIVersion}}''`


            The Amazon ECS container agent running on a container instance must register
            the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS`
            environment variable before containers placed on that instance can use
            these log configuration options. For more information, see [Amazon ECS
            container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
            in the _Amazon Elastic Container Service Developer Guide_.'
        mountPoints:
          allOf:
          - $ref: '#/components/schemas/MountPoints'
          description: 'The mount points for data volumes in your container.


            This parameter maps to `Volumes` in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the [\--volume]() option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration).


            Windows containers can mount whole directories on the same drive as `$env:ProgramData`.
            Windows containers can''t mount directories on a different drive, and
            mount point can''t be across drives.'
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of a container.
        privileged:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'When this parameter is `true`, the container is given elevated
            privileges on the host container instance (similar to the `root` user).
            This parameter maps to `Privileged` in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the `--privileged` option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration).


            This parameter is not supported for Windows containers or tasks run on
            Fargate.'
        readonlyRootFilesystem:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'When this parameter is true, the container is given read-only
            access to its root file system. This parameter maps to `ReadonlyRootfs`
            in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the `--read-only` option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration).


            This parameter is not supported for Windows containers.'
        repositoryCredentials:
          allOf:
          - $ref: '#/components/schemas/RepositoryCredentials'
          description: The private repository authentication credentials to use.
        resourceRequirements:
          allOf:
          - $ref: '#/components/schemas/ResourceRequirements'
          description: The type and amount of a resource to assign to a container.
            The only supported resource is a GPU.
        secrets:
          allOf:
          - $ref: '#/components/schemas/SecretList'
          description: The secrets to pass to the container. For more information,
            see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
            in the Amazon Elastic Container Service Developer Guide.
        ulimits:
          allOf:
          - $ref: '#/components/schemas/Ulimits'
          description: 'A list of `ulimits` to set in the container. If a `ulimit`
            value is specified in a task definition, it overrides the default values
            set by Docker. This parameter maps to `Ulimits` in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the `--ulimit` option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration).


            Amazon ECS tasks hosted on Fargate use the default resource limit values
            set by the operating system with the exception of the nofile resource
            limit parameter which Fargate overrides. The `nofile` resource limit sets
            a restriction on the number of open files that a container can use. The
            default `nofile` soft limit is `1024` and the default hard limit is `65535`.


            This parameter requires version 1.18 of the Docker Remote API or greater
            on your container instance. To check the Docker Remote API version on
            your container instance, log in to your container instance and run the
            following command: sudo docker version `--format ''{{.Server.APIVersion}}''`


            This parameter is not supported for Windows containers.'
        user:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The user to use inside the container. This parameter maps\
            \ to User in the Create a container section of the Docker Remote API and\
            \ the --user option to docker run.\n\nWhen running tasks using the `host`\
            \ network mode, don't run containers using the `root user (UID 0)`. We\
            \ recommend using a non-root user for better security.\n\nYou can specify\
            \ the `user` using the following formats. If specifying a UID or GID,\
            \ you must specify it as a positive integer.\n\n  * `user`\n\n  * `user:group`\n\
            \n  * `uid`\n\n  * `uid:gid`\n\n  * `user:gi`\n\n  * `uid:group`\n\n \
            \ * ``\n\nThis parameter is not supported for Windows containers."
        exitCode:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The exit code returned upon completion.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A short (255 max characters) human-readable string to provide
            additional details for a running or stopped container.
        logStreamName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the CloudWatch Logs log stream that's associated
            with the container. The log group for Batch jobs is /aws/batch/job. Each
            container attempt receives a log stream name when they reach the `RUNNING`
            status.
        networkInterfaces:
          allOf:
          - $ref: '#/components/schemas/NetworkInterfaceList'
          description: The network interfaces that are associated with the job.
      description: The details for the container in this task attempt.
    TaskContainerOverrides:
      type: object
      properties:
        command:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The command to send to the container that overrides the default
            command from the Docker image or the job definition.


            This parameter can''t contain an empty string.'
        environment:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariables'
          description: 'The environment variables to send to the container. You can
            add new environment variables, which are added to the container at launch,
            or you can override the existing environment variables from the Docker
            image or the job definition.


            Environment variables cannot start with `AWS_BATCH`. This naming convention
            is reserved for variables that Batch sets.'
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pointer to the container that you want to override. The container's
            name provides a unique identifier for the container being used.
        resourceRequirements:
          allOf:
          - $ref: '#/components/schemas/ResourceRequirements'
          description: The type and amount of resources to assign to a container.
            This overrides the settings in the job definition. The supported resources
            include `GPU`, `MEMORY`, and `VCPU`.
      description: 'The overrides that should be sent to a container.


        For information about using Batch overrides when you connect event sources
        to targets, see [BatchContainerOverrides](https://docs.aws.amazon.com/eventbridge/latest/pipes-reference/API_BatchContainerOverrides.html).'
    TaskContainerProperties:
      type: object
      properties:
        command:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The command that''s passed to the container. This parameter
            maps to `Cmd` in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `COMMAND` parameter to [docker run](https://docs.docker.com/engine/reference/run/).
            For more information, see [Dockerfile reference: CMD](https://docs.docker.com/engine/reference/builder/#cmd).'
        dependsOn:
          allOf:
          - $ref: '#/components/schemas/TaskContainerDependencyList'
          description: A list of containers that this container depends on.
        environment:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariables'
          description: 'The environment variables to pass to a container. This parameter
            maps to Env in the [Create a container](https://docs.docker.com/engine/api/v1.23/#create-a-container)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.23/)
            and the `--env` parameter to [docker run](https://docs.docker.com/engine/reference/run/).


            We don''t recommend using plaintext environment variables for sensitive
            information, such as credential data.


            Environment variables cannot start with `AWS_BATCH`. This naming convention
            is reserved for variables that Batch sets.'
        essential:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'If the essential parameter of a container is marked as `true`,
            and that container fails or stops for any reason, all other containers
            that are part of the task are stopped. If the `essential` parameter of
            a container is marked as false, its failure doesn''t affect the rest of
            the containers in a task. If this parameter is omitted, a container is
            assumed to be essential.


            All jobs must have at least one essential container. If you have an application
            that''s composed of multiple containers, group containers that are used
            for a common purpose into components, and separate the different components
            into multiple task definitions. For more information, see [Application
            Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html)
            in the _Amazon Elastic Container Service Developer Guide_.'
        firelensConfiguration:
          allOf:
          - $ref: '#/components/schemas/FirelensConfiguration'
          description: The FireLens configuration for the container. This is used
            to specify and configure a log router for container logs. For more information,
            see [Custom log](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
            routing in the _Amazon Elastic Container Service Developer Guide_.
        image:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The image used to start a container. This string is passed
            directly to the Docker daemon. By default, images in the Docker Hub registry
            are available. Other repositories are specified with either `repository-url/image:tag`
            or `repository-url/image@digest`. Up to 255 letters (uppercase and lowercase),
            numbers, hyphens, underscores, colons, periods, forward slashes, and number
            signs are allowed. This parameter maps to `Image` in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the `IMAGE` parameter of the [ _docker run_ ](https://docs.docker.com/engine/reference/run/#security-configuration).
        linuxParameters:
          allOf:
          - $ref: '#/components/schemas/LinuxParameters'
          description: Linux-specific modifications that are applied to the container,
            such as Linux kernel capabilities. For more information, see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
        logConfiguration:
          allOf:
          - $ref: '#/components/schemas/LogConfiguration'
          description: 'The log configuration specification for the container.


            This parameter maps to `LogConfig` in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the `--log-driver` option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration).


            By default, containers use the same logging driver that the Docker daemon
            uses. However the container can use a different logging driver than the
            Docker daemon by specifying a log driver with this parameter in the container
            definition. To use a different logging driver for a container, the log
            system must be configured properly on the container instance (or on a
            different log server for remote logging options). For more information
            about the options for different supported log drivers, see [Configure
            logging drivers ](https://docs.docker.com/engine/admin/logging/overview/)
            in the _Docker documentation_.


            Amazon ECS currently supports a subset of the logging drivers available
            to the Docker daemon (shown in the `LogConfiguration` data type). Additional
            log drivers may be available in future releases of the Amazon ECS container
            agent.


            This parameter requires version 1.18 of the Docker Remote API or greater
            on your container instance. To check the Docker Remote API version on
            your container instance, log in to your container instance and run the
            following command: sudo docker version `--format ''{{.Server.APIVersion}}''`


            The Amazon ECS container agent running on a container instance must register
            the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS`
            environment variable before containers placed on that instance can use
            these log configuration options. For more information, see [Amazon ECS
            container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
            in the _Amazon Elastic Container Service Developer Guide_.'
        mountPoints:
          allOf:
          - $ref: '#/components/schemas/MountPoints'
          description: 'The mount points for data volumes in your container.


            This parameter maps to `Volumes` in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the [\--volume]() option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration).


            Windows containers can mount whole directories on the same drive as `$env:ProgramData`.
            Windows containers can''t mount directories on a different drive, and
            mount point can''t be across drives.'
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of a container. The name can be used as a unique identifier
            to target your `dependsOn` and `Overrides` objects.
        privileged:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'When this parameter is `true`, the container is given elevated
            privileges on the host container instance (similar to the `root` user).
            This parameter maps to `Privileged` in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the `--privileged` option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration).


            This parameter is not supported for Windows containers or tasks run on
            Fargate.'
        readonlyRootFilesystem:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'When this parameter is true, the container is given read-only
            access to its root file system. This parameter maps to `ReadonlyRootfs`
            in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the `--read-only` option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration).


            This parameter is not supported for Windows containers.'
        repositoryCredentials:
          allOf:
          - $ref: '#/components/schemas/RepositoryCredentials'
          description: The private repository authentication credentials to use.
        resourceRequirements:
          allOf:
          - $ref: '#/components/schemas/ResourceRequirements'
          description: The type and amount of a resource to assign to a container.
            The only supported resource is a GPU.
        secrets:
          allOf:
          - $ref: '#/components/schemas/SecretList'
          description: The secrets to pass to the container. For more information,
            see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
            in the Amazon Elastic Container Service Developer Guide.
        ulimits:
          allOf:
          - $ref: '#/components/schemas/Ulimits'
          description: 'A list of `ulimits` to set in the container. If a `ulimit`
            value is specified in a task definition, it overrides the default values
            set by Docker. This parameter maps to `Ulimits` in the [Create a container](https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
            section of the [Docker Remote API](https://docs.docker.com/engine/api/v1.35/)
            and the `--ulimit` option to [docker run](https://docs.docker.com/engine/reference/run/#security-configuration).


            Amazon ECS tasks hosted on Fargate use the default resource limit values
            set by the operating system with the exception of the nofile resource
            limit parameter which Fargate overrides. The `nofile` resource limit sets
            a restriction on the number of open files that a container can use. The
            default `nofile` soft limit is `1024` and the default hard limit is `65535`.


            This parameter requires version 1.18 of the Docker Remote API or greater
            on your container instance. To check the Docker Remote API version on
            your container instance, log in to your container instance and run the
            following command: sudo docker version `--format ''{{.Server.APIVersion}}''`


            This parameter is not supported for Windows containers.'
        user:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The user to use inside the container. This parameter maps\
            \ to User in the Create a container section of the Docker Remote API and\
            \ the --user option to docker run.\n\nWhen running tasks using the `host`\
            \ network mode, don't run containers using the `root user (UID 0)`. We\
            \ recommend using a non-root user for better security.\n\nYou can specify\
            \ the `user` using the following formats. If specifying a UID or GID,\
            \ you must specify it as a positive integer.\n\n  * `user`\n\n  * `user:group`\n\
            \n  * `uid`\n\n  * `uid:gid`\n\n  * `user:gi`\n\n  * `uid:group`\n\nThis\
            \ parameter is not supported for Windows containers."
      required:
      - image
      description: Container properties are used for Amazon ECS-based job definitions.
        These properties to describe the container that's launched as part of a job.
    TaskPropertiesOverride:
      type: object
      properties:
        containers:
          allOf:
          - $ref: '#/components/schemas/ListTaskContainerOverrides'
          description: The overrides for the container definition of a job.
      description: An object that contains overrides for the task definition of a
        job.
    TerminateJobRequest:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Batch job ID of the job to terminate.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'A message to attach to the job that explains the reason for
            canceling it. This message is returned by future DescribeJobs operations
            on the job. It is also recorded in the Batch activity logs.


            This parameter has as limit of 1024 characters.'
      required:
      - jobId
      - reason
      description: Contains the parameters for `TerminateJob`.
    TerminateJobResponse:
      type: object
      properties: {}
    Tmpfs:
      type: object
      properties:
        containerPath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The absolute file path in the container where the `tmpfs` volume
            is mounted.
        size:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The size (in MiB) of the `tmpfs` volume.
        mountOptions:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: 'The list of `tmpfs` volume mount options.


            Valid values: "`defaults`" | "`ro`" | "`rw`" | "`suid`" | "`nosuid`" |
            "`dev`" | "`nodev`" | "`exec`" | "`noexec`" | "`sync`" | "`async`" | "`dirsync`"
            | "`remount`" | "`mand`" | "`nomand`" | "`atime`" | "`noatime`" | "`diratime`"
            | "`nodiratime`" | "`bind`" | "`rbind" | "unbindable" | "runbindable"
            | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" |
            "relatime`" | "`norelatime`" | "`strictatime`" | "`nostrictatime`" | "`mode`"
            | "`uid`" | "`gid`" | "`nr_inodes`" | "`nr_blocks`" | "`mpol`"'
      required:
      - containerPath
      - size
      description: 'The container path, mount options, and size of the `tmpfs` mount.


        This object isn''t applicable to jobs that are running on Fargate resources.'
    TmpfsList:
      type: array
      items:
        $ref: '#/components/schemas/Tmpfs'
    Ulimit:
      type: object
      properties:
        hardLimit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The hard limit for the `ulimit` type.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The `type` of the `ulimit`. Valid values are: `core` | `cpu`
            | `data` | `fsize` | `locks` | `memlock` | `msgqueue` | `nice` | `nofile`
            | `nproc` | `rss` | `rtprio` | `rttime` | `sigpending` | `stack`.'
        softLimit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The soft limit for the `ulimit` type.
      required:
      - hardLimit
      - name
      - softLimit
      description: 'The `ulimit` settings to pass to the container. For more information,
        see [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html).


        This object isn''t applicable to jobs that are running on Fargate resources.'
    Ulimits:
      type: array
      items:
        $ref: '#/components/schemas/Ulimit'
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the resource from which to
            delete tags. Batch resources that support tags are compute environments,
            jobs, job definitions, job queues, and scheduling policies. ARNs for child
            jobs of array and multi-node parallel (MNP) jobs aren't supported.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeysList'
          description: The keys of the tags to be removed.
      required:
      - resourceArn
      - tagKeys
      description: Contains the parameters for `UntagResource`.
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateComputeEnvironmentRequest:
      type: object
      properties:
        computeEnvironment:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name or full Amazon Resource Name (ARN) of the compute
            environment to update.
        state:
          allOf:
          - $ref: '#/components/schemas/CEState'
          description: 'The state of the compute environment. Compute environments
            in the `ENABLED` state can accept jobs from a queue and scale in or out
            automatically based on the workload demand of its associated queues.


            If the state is `ENABLED`, then the Batch scheduler can attempt to place
            jobs from an associated job queue on the compute resources within the
            environment. If the compute environment is managed, then it can scale
            its instances out or in automatically, based on the job queue demand.


            If the state is `DISABLED`, then the Batch scheduler doesn''t attempt
            to place jobs within the environment. Jobs in a `STARTING` or `RUNNING`
            state continue to progress normally. Managed compute environments in the
            `DISABLED` state don''t scale out.


            Compute environments in a `DISABLED` state may continue to incur billing
            charges. To prevent additional charges, turn off and then delete the compute
            environment. For more information, see [State](https://docs.aws.amazon.com/batch/latest/userguide/compute_environment_parameters.html#compute_environment_state)
            in the _Batch User Guide_.


            When an instance is idle, the instance scales down to the `minvCpus` value.
            However, the instance size doesn''t change. For example, consider a `c5.8xlarge`
            instance with a `minvCpus` value of `4` and a `desiredvCpus` value of
            `36`. This instance doesn''t scale down to a `c5.large` instance.'
        unmanagedvCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of vCPUs expected to be used for an unmanaged
            compute environment. Don't specify this parameter for a managed compute
            environment. This parameter is only used for fair-share scheduling to
            reserve vCPU capacity for new share identifiers. If this parameter isn't
            provided for a fair-share job queue, no vCPU capacity is reserved.
        computeResources:
          allOf:
          - $ref: '#/components/schemas/ComputeResourceUpdate'
          description: Details of the compute resources managed by the compute environment.
            Required for a managed compute environment. For more information, see
            [Compute Environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html)
            in the _Batch User Guide_.
        serviceRole:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The full Amazon Resource Name (ARN) of the IAM role that allows
            Batch to make calls to other Amazon Web Services services on your behalf.
            For more information, see [Batch service IAM role](https://docs.aws.amazon.com/batch/latest/userguide/service_IAM_role.html)
            in the _Batch User Guide_.


            If the compute environment has a service-linked role, it can''t be changed
            to use a regular IAM role. Likewise, if the compute environment has a
            regular IAM role, it can''t be changed to use a service-linked role. To
            update the parameters for the compute environment that require an infrastructure
            update to change, the **AWSServiceRoleForBatch** service-linked role must
            be used. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.


            If your specified role has a path other than `/`, then you must either
            specify the full role ARN (recommended) or prefix the role name with the
            path.


            Depending on how you created your Batch service role, its ARN might contain
            the `service-role` path prefix. When you only specify the name of the
            service role, Batch assumes that your ARN doesn''t use the `service-role`
            path prefix. Because of this, we recommend that you specify the full ARN
            of your service role when you create compute environments.'
        updatePolicy:
          allOf:
          - $ref: '#/components/schemas/UpdatePolicy'
          description: Specifies the updated infrastructure update policy for the
            compute environment. For more information about infrastructure updates,
            see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
            in the _Batch User Guide_.
        context:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Reserved.
      required:
      - computeEnvironment
      description: Contains the parameters for `UpdateComputeEnvironment`.
    UpdateComputeEnvironmentResponse:
      type: object
      properties:
        computeEnvironmentName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the compute environment. It can be up to 128 characters
            long. It can contain uppercase and lowercase letters, numbers, hyphens
            (-), and underscores (_).
        computeEnvironmentArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the compute environment.
    UpdateConsumableResourceRequest:
      type: object
      properties:
        consumableResource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name or ARN of the consumable resource to be updated.
        operation:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "Indicates how the quantity of the consumable resource will\
            \ be updated. Must be one of:\n\n  * `SET`\n\nSets the quantity of the\
            \ resource to the value specified by the `quantity` parameter.\n\n  *\
            \ `ADD`\n\nIncreases the quantity of the resource by the value specified\
            \ by the `quantity` parameter.\n\n  * `REMOVE`\n\nReduces the quantity\
            \ of the resource by the value specified by the `quantity` parameter."
        quantity:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The change in the total quantity of the consumable resource.
            The `operation` parameter determines whether the value specified here
            will be the new total quantity, or the amount by which the total quantity
            will be increased or reduced. Must be a non-negative value.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          description: If this parameter is specified and two update requests with
            identical payloads and `clientToken`s are received, these requests are
            considered the same request and the second request is rejected. A `clientToken`
            is valid for 8 hours or until one hour after the consumable resource is
            deleted, whichever is less.
      required:
      - consumableResource
    UpdateConsumableResourceResponse:
      type: object
      properties:
        consumableResourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the consumable resource to be updated.
        consumableResourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the consumable resource.
        totalQuantity:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total amount of the consumable resource that is available.
      required:
      - consumableResourceName
      - consumableResourceArn
    UpdateJobQueueRequest:
      type: object
      properties:
        jobQueue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name or the Amazon Resource Name (ARN) of the job queue.
        state:
          allOf:
          - $ref: '#/components/schemas/JQState'
          description: Describes the queue's ability to accept new jobs. If the job
            queue state is `ENABLED`, it can accept jobs. If the job queue state is
            `DISABLED`, new jobs can't be added to the queue, but jobs already in
            the queue can finish.
        schedulingPolicyArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Amazon Resource Name (ARN) of the fair-share scheduling policy.
            Once a job queue is created, the fair-share scheduling policy can be replaced
            but not removed. The format is `aws:_Partition_ :batch:_Region_ :_Account_
            :scheduling-policy/_Name_ `. For example, `aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy`.
        priority:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The priority of the job queue. Job queues with a higher priority
            (or a higher integer value for the `priority` parameter) are evaluated
            first when associated with the same compute environment. Priority is determined
            in descending order. For example, a job queue with a priority value of
            `10` is given scheduling preference over a job queue with a priority value
            of `1`. All of the compute environments must be either EC2 (`EC2` or `SPOT`)
            or Fargate (`FARGATE` or `FARGATE_SPOT`). EC2 and Fargate compute environments
            can't be mixed.
        computeEnvironmentOrder:
          allOf:
          - $ref: '#/components/schemas/ComputeEnvironmentOrders'
          description: 'Details the set of compute environments mapped to a job queue
            and their order relative to each other. This is one of the parameters
            used by the job scheduler to determine which compute environment runs
            a given job. Compute environments must be in the `VALID` state before
            you can associate them with a job queue. All of the compute environments
            must be either EC2 (`EC2` or `SPOT`) or Fargate (`FARGATE` or `FARGATE_SPOT`).
            EC2 and Fargate compute environments can''t be mixed.


            All compute environments that are associated with a job queue must share
            the same architecture. Batch doesn''t support mixing compute environment
            architecture types in a single job queue.'
        jobStateTimeLimitActions:
          allOf:
          - $ref: '#/components/schemas/JobStateTimeLimitActions'
          description: 'The set of actions that Batch perform on jobs that remain
            at the head of the job queue in the specified state longer than specified
            times. Batch will perform each action after `maxTimeSeconds` has passed.
            (**Note** : The minimum value for maxTimeSeconds is 600 (10 minutes) and
            its maximum value is 86,400 (24 hours).)'
      required:
      - jobQueue
      description: Contains the parameters for `UpdateJobQueue`.
    UpdateJobQueueResponse:
      type: object
      properties:
        jobQueueName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the job queue.
        jobQueueArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job queue.
    UpdatePolicy:
      type: object
      properties:
        terminateJobsOnUpdate:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether jobs are automatically terminated when the
            computer environment infrastructure is updated. The default value is `false`.
        jobExecutionTimeoutMinutes:
          allOf:
          - $ref: '#/components/schemas/JobExecutionTimeoutMinutes'
          description: Specifies the job timeout (in minutes) when the compute environment
            infrastructure is updated. The default value is 30.
      description: Specifies the infrastructure update policy for the Amazon EC2 compute
        environment. For more information about infrastructure updates, see [Updating
        compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html)
        in the _Batch User Guide_.
    UpdateSchedulingPolicyRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the scheduling policy to
            update.
        fairsharePolicy:
          allOf:
          - $ref: '#/components/schemas/FairsharePolicy'
          description: The fair-share policy scheduling details.
      required:
      - arn
      description: Contains the parameters for `UpdateSchedulingPolicy`.
    UpdateSchedulingPolicyResponse:
      type: object
      properties: {}
    Volume:
      type: object
      properties:
        host:
          allOf:
          - $ref: '#/components/schemas/Host'
          description: 'The contents of the `host` parameter determine whether your
            data volume persists on the host container instance and where it''s stored.
            If the host parameter is empty, then the Docker daemon assigns a host
            path for your data volume. However, the data isn''t guaranteed to persist
            after the containers that are associated with it stop running.


            This parameter isn''t applicable to jobs that are running on Fargate resources
            and shouldn''t be provided.'
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the volume. It can be up to 255 characters long.
            It can contain uppercase and lowercase letters, numbers, hyphens (-),
            and underscores (_). This name is referenced in the `sourceVolume` parameter
            of container definition `mountPoints`.
        efsVolumeConfiguration:
          allOf:
          - $ref: '#/components/schemas/EFSVolumeConfiguration'
          description: This parameter is specified when you're using an Amazon Elastic
            File System file system for job storage. Jobs that are running on Fargate
            resources must specify a `platformVersion` of at least `1.4.0`.
      description: A data volume that's used in a job's container properties.
    Volumes:
      type: array
      items:
        $ref: '#/components/schemas/Volume'
