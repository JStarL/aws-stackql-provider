openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: codeartifact
  x-aws-serviceName: codeartifact
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-09-22'
  title: CodeArtifact
  description: "CodeArtifact is a fully managed artifact repository compatible with\
    \ language-native package managers and build tools such as npm, Apache Maven,\
    \ pip, and dotnet. You can use CodeArtifact to share packages with development\
    \ teams and pull packages. Packages can be pulled from both public and CodeArtifact\
    \ repositories. You can also create an upstream relationship between a CodeArtifact\
    \ repository and another repository, which effectively merges their contents from\
    \ the point of view of a package manager client.\n\n**CodeArtifact concepts**\n\
    \n  * **Repository** : A CodeArtifact repository contains a set of [package versions](https://docs.aws.amazon.com/codeartifact/latest/ug/welcome.html#welcome-concepts-package-version),\
    \ each of which maps to a set of assets, or files. Repositories are polyglot,\
    \ so a single repository can contain packages of any supported type. Each repository\
    \ exposes endpoints for fetching and publishing packages using tools such as the\
    \ **`npm` ** CLI or the Maven CLI (**`mvn` **). For a list of supported package\
    \ managers, see the [CodeArtifact User Guide](https://docs.aws.amazon.com/codeartifact/latest/ug/welcome.html).\n\
    \n  * **Domain** : Repositories are aggregated into a higher-level entity known\
    \ as a _domain_. All package assets and metadata are stored in the domain, but\
    \ are consumed through repositories. A given package asset, such as a Maven JAR\
    \ file, is stored once per domain, no matter how many repositories it's present\
    \ in. All of the assets and metadata in a domain are encrypted with the same customer\
    \ master key (CMK) stored in Key Management Service (KMS).\n\nEach repository\
    \ is a member of a single domain and can't be moved to a different domain.\n\n\
    The domain allows organizational policy to be applied across multiple repositories,\
    \ such as which accounts can access repositories in the domain, and which public\
    \ repositories can be used as sources of packages.\n\nAlthough an organization\
    \ can have multiple domains, we recommend a single production domain that contains\
    \ all published artifacts so that teams can find and share packages across their\
    \ organization.\n\n  * **Package** : A _package_ is a bundle of software and the\
    \ metadata required to resolve dependencies and install the software. CodeArtifact\
    \ supports npm, PyPI, Maven, NuGet, Swift, Ruby, Cargo, and generic package formats.\
    \ For more information about the supported package formats and how to use CodeArtifact\
    \ with them, see the [CodeArtifact User Guide](https://docs.aws.amazon.com/codeartifact/latest/ug/welcome.html).\n\
    \nIn CodeArtifact, a package consists of:\n\n    * A _name_ (for example, `webpack`\
    \ is the name of a popular npm package)\n\n    * An optional namespace (for example,\
    \ `@types` in `@types/node`)\n\n    * A set of versions (for example, `1.0.0`,\
    \ `1.0.1`, `1.0.2`, etc.)\n\n    * Package-level metadata (for example, npm tags)\n\
    \n  * **Package group** : A group of packages that match a specified definition.\
    \ Package groups can be used to apply configuration to multiple packages that\
    \ match a defined pattern using package format, package namespace, and package\
    \ name. You can use package groups to more conveniently configure package origin\
    \ controls for multiple packages. Package origin controls are used to block or\
    \ allow ingestion or publishing of new package versions, which protects users\
    \ from malicious actions known as dependency substitution attacks.\n\n  * **Package\
    \ version** : A version of a package, such as `@types/node 12.6.9`. The version\
    \ number format and semantics vary for different package formats. For example,\
    \ npm package versions must conform to the [Semantic Versioning specification](https://semver.org/).\
    \ In CodeArtifact, a package version consists of the version identifier, metadata\
    \ at the package version level, and a set of assets.\n\n  * **Upstream repository**\
    \ : One repository is _upstream_ of another when the package versions in it can\
    \ be accessed from the repository endpoint of the downstream repository, effectively\
    \ merging the contents of the two repositories from the point of view of a client.\
    \ CodeArtifact allows creating an upstream relationship between two repositories.\n\
    \n  * **Asset** : An individual file stored in CodeArtifact associated with a\
    \ package version, such as an npm `.tgz` file or Maven POM and JAR files.\n\n\
    **CodeArtifact supported API operations**\n\n  * `AssociateExternalConnection`:\
    \ Adds an existing external connection to a repository. \n\n  * `CopyPackageVersions`:\
    \ Copies package versions from one repository to another repository in the same\
    \ domain.\n\n  * `CreateDomain`: Creates a domain.\n\n  * `CreatePackageGroup`:\
    \ Creates a package group.\n\n  * `CreateRepository`: Creates a CodeArtifact repository\
    \ in a domain. \n\n  * `DeleteDomain`: Deletes a domain. You cannot delete a domain\
    \ that contains repositories. \n\n  * `DeleteDomainPermissionsPolicy`: Deletes\
    \ the resource policy that is set on a domain.\n\n  * `DeletePackage`: Deletes\
    \ a package and all associated package versions.\n\n  * `DeletePackageGroup`:\
    \ Deletes a package group. Does not delete packages or package versions that are\
    \ associated with a package group.\n\n  * `DeletePackageVersions`: Deletes versions\
    \ of a package. After a package has been deleted, it can be republished, but its\
    \ assets and metadata cannot be restored because they have been permanently removed\
    \ from storage.\n\n  * `DeleteRepository`: Deletes a repository. \n\n  * `DeleteRepositoryPermissionsPolicy`:\
    \ Deletes the resource policy that is set on a repository.\n\n  * `DescribeDomain`:\
    \ Returns a `DomainDescription` object that contains information about the requested\
    \ domain.\n\n  * `DescribePackage`: Returns a [PackageDescription](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html)\
    \ object that contains details about a package. \n\n  * `DescribePackageGroup`:\
    \ Returns a [PackageGroup](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageGroup.html)\
    \ object that contains details about a package group. \n\n  * `DescribePackageVersion`:\
    \ Returns a [PackageVersionDescription](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html)\
    \ object that contains details about a package version. \n\n  * `DescribeRepository`:\
    \ Returns a `RepositoryDescription` object that contains detailed information\
    \ about the requested repository. \n\n  * `DisposePackageVersions`: Disposes versions\
    \ of a package. A package version with the status `Disposed` cannot be restored\
    \ because they have been permanently removed from storage.\n\n  * `DisassociateExternalConnection`:\
    \ Removes an existing external connection from a repository. \n\n  * `GetAssociatedPackageGroup`:\
    \ Returns the most closely associated package group to the specified package.\n\
    \n  * `GetAuthorizationToken`: Generates a temporary authorization token for accessing\
    \ repositories in the domain. The token expires the authorization period has passed.\
    \ The default authorization period is 12 hours and can be customized to any length\
    \ with a maximum of 12 hours.\n\n  * `GetDomainPermissionsPolicy`: Returns the\
    \ policy of a resource that is attached to the specified domain. \n\n  * `GetPackageVersionAsset`:\
    \ Returns the contents of an asset that is in a package version. \n\n  * `GetPackageVersionReadme`:\
    \ Gets the readme file or descriptive text for a package version.\n\n  * `GetRepositoryEndpoint`:\
    \ Returns the endpoint of a repository for a specific package format. A repository\
    \ has one endpoint for each package format: \n\n    * `cargo`\n\n    * `generic`\n\
    \n    * `maven`\n\n    * `npm`\n\n    * `nuget`\n\n    * `pypi`\n\n    * `ruby`\n\
    \n    * `swift`\n\n  * `GetRepositoryPermissionsPolicy`: Returns the resource\
    \ policy that is set on a repository. \n\n  * `ListAllowedRepositoriesForGroup`:\
    \ Lists the allowed repositories for a package group that has origin configuration\
    \ set to `ALLOW_SPECIFIC_REPOSITORIES`.\n\n  * `ListAssociatedPackages`: Returns\
    \ a list of packages associated with the requested package group.\n\n  * `ListDomains`:\
    \ Returns a list of `DomainSummary` objects. Each returned `DomainSummary` object\
    \ contains information about a domain.\n\n  * `ListPackages`: Lists the packages\
    \ in a repository.\n\n  * `ListPackageGroups`: Returns a list of package groups\
    \ in the requested domain.\n\n  * `ListPackageVersionAssets`: Lists the assets\
    \ for a given package version.\n\n  * `ListPackageVersionDependencies`: Returns\
    \ a list of the direct dependencies for a package version. \n\n  * `ListPackageVersions`:\
    \ Returns a list of package versions for a specified package in a repository.\n\
    \n  * `ListRepositories`: Returns a list of repositories owned by the Amazon Web\
    \ Services account that called this method.\n\n  * `ListRepositoriesInDomain`:\
    \ Returns a list of the repositories in a domain.\n\n  * `ListSubPackageGroups`:\
    \ Returns a list of direct children of the specified package group.\n\n  * `PublishPackageVersion`:\
    \ Creates a new package version containing one or more assets.\n\n  * `PutDomainPermissionsPolicy`:\
    \ Attaches a resource policy to a domain.\n\n  * `PutPackageOriginConfiguration`:\
    \ Sets the package origin configuration for a package, which determine how new\
    \ versions of the package can be added to a specific repository.\n\n  * `PutRepositoryPermissionsPolicy`:\
    \ Sets the resource policy on a repository that specifies permissions to access\
    \ it. \n\n  * `UpdatePackageGroup`: Updates a package group. This API cannot be\
    \ used to update a package group's origin configuration or pattern.\n\n  * `UpdatePackageGroupOriginConfiguration`:\
    \ Updates the package origin configuration for a package group.\n\n  * `UpdatePackageVersionsStatus`:\
    \ Updates the status of one or more versions of a package.\n\n  * `UpdateRepository`:\
    \ Updates the properties of a repository."
servers:
- description: The CodeArtifact regional endpoint
  url: https://codeartifact.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /v1/repository/external-connection:
    post:
      operationId: AssociateExternalConnection
      description: |-
        Adds an existing external connection to a repository. One external connection is allowed per repository.

        A repository can have one or more upstream repositories, or an external connection.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: external-connection
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ExternalConnectionName'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DisassociateExternalConnection
      description: |-
        Removes an existing external connection from a repository.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: external-connection
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ExternalConnectionName'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/versions/copy:
    post:
      operationId: CopyPackageVersions
      description: |-
        Copies package versions from one repository to another repository in the same domain.

        You must specify `versions` or `versionRevisions`. You cannot specify both.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: source-repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: destination-repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                versions:
                  $ref: '#/components/schemas/PackageVersionList'
                versionRevisions:
                  $ref: '#/components/schemas/PackageVersionRevisionMap'
                allowOverwrite:
                  $ref: '#/components/schemas/BooleanOptional'
                includeFromUpstream:
                  $ref: '#/components/schemas/BooleanOptional'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/domain:
    post:
      operationId: CreateDomain
      description: |-
        Creates a domain. CodeArtifact _domains_ make it easier to manage multiple repositories across an organization. You can use a domain to apply permissions across many repositories owned by different Amazon Web Services accounts. An asset is stored only once in a domain, even if it's in multiple repositories.

        Although you can have multiple domains, we recommend a single production domain that contains all published artifacts so that your development teams can find and share packages. You can use a second pre-production domain to test changes to the production domain configuration.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                encryptionKey:
                  $ref: '#/components/schemas/Arn'
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteDomain
      description: |-
        Deletes a domain. You cannot delete a domain that contains repositories. If you want to delete a domain with repositories, first delete its repositories.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeDomain
      description: |-
        Returns a [DomainDescription](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DomainDescription.html) object that contains information about the requested domain.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package-group:
    post:
      operationId: CreatePackageGroup
      description: |-
        Creates a package group. For more information about creating package groups, including example CLI commands, see [Create a package group](https://docs.aws.amazon.com/codeartifact/latest/ug/create-package-group.html) in the _CodeArtifact User Guide_.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                packageGroup:
                  $ref: '#/components/schemas/PackageGroupPattern'
                contactInfo:
                  $ref: '#/components/schemas/PackageGroupContactInfo'
                description:
                  $ref: '#/components/schemas/Description'
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeletePackageGroup
      description: |-
        Deletes a package group. Deleting a package group does not delete packages or package versions associated with the package group. When a package group is deleted, the direct child package groups will become children of the package group's direct parent package group. Therefore, if any of the child groups are inheriting any settings from the parent, those settings could change.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: package-group
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribePackageGroup
      description: |-
        Returns a [PackageGroupDescription](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageGroupDescription.html) object that contains information about the requested package group.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: package-group
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageGroupPattern'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdatePackageGroup
      description: |-
        Updates a package group. This API cannot be used to update a package group's origin configuration or pattern. To update a package group's origin configuration, use [UpdatePackageGroupOriginConfiguration](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdatePackageGroupOriginConfiguration.html).
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                packageGroup:
                  $ref: '#/components/schemas/PackageGroupPattern'
                contactInfo:
                  $ref: '#/components/schemas/PackageGroupContactInfo'
                description:
                  $ref: '#/components/schemas/Description'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/repository:
    post:
      operationId: CreateRepository
      description: |-
        Creates a repository.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                upstreams:
                  $ref: '#/components/schemas/UpstreamRepositoryList'
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteRepository
      description: |-
        Deletes a repository.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeRepository
      description: |-
        Returns a `RepositoryDescription` object that contains detailed information about the requested repository.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateRepository
      description: |-
        Update the properties of a repository.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                upstreams:
                  $ref: '#/components/schemas/UpstreamRepositoryList'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/domain/permissions/policy:
    delete:
      operationId: DeleteDomainPermissionsPolicy
      description: |-
        Deletes the resource policy set on a domain.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: policy-revision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PolicyRevision'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetDomainPermissionsPolicy
      description: |-
        Returns the resource policy attached to the specified domain.

        The policy is a resource-based policy, not an identity-based policy. For more information, see [Identity-based policies and resource-based policies ](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html) in the _IAM User Guide_.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutDomainPermissionsPolicy
      description: |-
        Sets a resource policy on a domain that specifies permissions to access it.

        When you call `PutDomainPermissionsPolicy`, the resource policy on the domain is ignored when evaluting permissions. This ensures that the owner of a domain cannot lock themselves out of the domain, which would prevent them from being able to update the resource policy.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  $ref: '#/components/schemas/DomainName'
                domainOwner:
                  $ref: '#/components/schemas/AccountId'
                policyRevision:
                  $ref: '#/components/schemas/PolicyRevision'
                policyDocument:
                  $ref: '#/components/schemas/PolicyDocument'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package:
    delete:
      operationId: DeletePackage
      description: |-
        Deletes a package and all associated package versions. A deleted package cannot be restored. To delete one or more package versions, use the [DeletePackageVersions](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DeletePackageVersions.html) API.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribePackage
      description: |-
        Returns a [PackageDescription](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html) object that contains information about the requested package.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: PutPackageOriginConfiguration
      description: |-
        Sets the package origin configuration for a package.

        The package origin configuration determines how new versions of a package can be added to a repository. You can allow or block direct publishing of new package versions, or ingestion and retaining of new package versions from an external connection or upstream source. For more information about package origin controls and configuration, see [Editing package origin controls](https://docs.aws.amazon.com/codeartifact/latest/ug/package-origin-controls.html) in the _CodeArtifact User Guide_.

        `PutPackageOriginConfiguration` can be called on a package that doesn't yet exist in the repository. When called on a package that does not exist, a package is created in the repository with no versions and the requested restrictions are set on the package. This can be used to preemptively block ingesting or retaining any versions from external connections or upstream repositories, or to block publishing any versions of the package into the repository before connecting any package managers or publishers to the repository.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restrictions:
                  $ref: '#/components/schemas/PackageOriginRestrictions'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/versions/delete:
    post:
      operationId: DeletePackageVersions
      description: |-
        Deletes one or more versions of a package. A deleted package version cannot be restored in your repository. If you want to remove a package version from your repository and be able to restore it later, set its status to `Archived`. Archived packages cannot be downloaded from a repository and don't show up with list package APIs (for example, [ListPackageVersions](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html)), but you can restore them using [UpdatePackageVersionsStatus](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdatePackageVersionsStatus.html).
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                versions:
                  $ref: '#/components/schemas/PackageVersionList'
                expectedStatus:
                  $ref: '#/components/schemas/PackageVersionStatus'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/repository/permissions/policies:
    delete:
      operationId: DeleteRepositoryPermissionsPolicy
      description: |-
        Deletes the resource policy that is set on a repository. After a resource policy is deleted, the permissions allowed and denied by the deleted policy are removed. The effect of deleting a resource policy might not be immediate.

        Use `DeleteRepositoryPermissionsPolicy` with caution. After a policy is deleted, Amazon Web Services users, roles, and accounts lose permissions to perform the repository actions granted by the deleted policy.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: policy-revision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PolicyRevision'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/version:
    get:
      operationId: DescribePackageVersion
      description: |-
        Returns a [PackageVersionDescription](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html) object that contains information about the requested package version.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      - name: version
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageVersion'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/versions/dispose:
    post:
      operationId: DisposePackageVersions
      description: |-
        Deletes the assets in package versions and sets the package versions' status to `Disposed`. A disposed package version cannot be restored in your repository because its assets are deleted.

        To view all disposed package versions in a repository, use [ListPackageVersions](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html) and set the [status](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html#API_ListPackageVersions_RequestSyntax) parameter to `Disposed`.

        To view information about a disposed package version, use [DescribePackageVersion](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DescribePackageVersion.html).
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                versions:
                  $ref: '#/components/schemas/PackageVersionList'
                versionRevisions:
                  $ref: '#/components/schemas/PackageVersionRevisionMap'
                expectedStatus:
                  $ref: '#/components/schemas/PackageVersionStatus'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/get-associated-package-group:
    get:
      operationId: GetAssociatedPackageGroup
      description: |-
        Returns the most closely associated package group to the specified package. This API does not require that the package exist in any repository in the domain. As such, `GetAssociatedPackageGroup` can be used to see which package group's origin configuration applies to a package before that package is in a repository. This can be helpful to check if public packages are blocked without ingesting them.

        For information package group association and matching, see [Package group definition syntax and matching behavior](https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-definition-syntax-matching-behavior.html) in the _CodeArtifact User Guide_.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/authorization-token:
    post:
      operationId: GetAuthorizationToken
      description: |-
        Generates a temporary authorization token for accessing repositories in the domain. This API requires the `codeartifact:GetAuthorizationToken` and `sts:GetServiceBearerToken` permissions. For more information about authorization tokens, see [CodeArtifact authentication and tokens](https://docs.aws.amazon.com/codeartifact/latest/ug/tokens-authentication.html).

        CodeArtifact authorization tokens are valid for a period of 12 hours when created with the `login` command. You can call `login` periodically to refresh the token. When you create an authorization token with the `GetAuthorizationToken` API, you can set a custom authorization period, up to a maximum of 12 hours, with the `durationSeconds` parameter.

        The authorization period begins after `login` or `GetAuthorizationToken` is called. If `login` or `GetAuthorizationToken` is called while assuming a role, the token lifetime is independent of the maximum session duration of the role. For example, if you call `sts assume-role` and specify a session duration of 15 minutes, then generate a CodeArtifact authorization token, the token will be valid for the full authorization period even though this is longer than the 15-minute session duration.

        See [Using IAM Roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) for more information on controlling session duration.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: duration
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AuthorizationTokenDurationSeconds'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/version/asset:
    get:
      operationId: GetPackageVersionAsset
      description: |-
        Returns an asset (or file) that is in a package. For example, for a Maven package version, use `GetPackageVersionAsset` to download a `JAR` file, a `POM` file, or any other assets in the package version.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      - name: version
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageVersion'
      - name: asset
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/AssetName'
      - name: revision
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageVersionRevision'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/version/readme:
    get:
      operationId: GetPackageVersionReadme
      description: |-
        Gets the readme file or descriptive text for a package version.

        The returned text might contain formatting. For example, it might contain formatting for Markdown or reStructuredText.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      - name: version
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageVersion'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/repository/endpoint:
    get:
      operationId: GetRepositoryEndpoint
      description: |-
        Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each package format:

          * `cargo`

          * `generic`

          * `maven`

          * `npm`

          * `nuget`

          * `pypi`

          * `ruby`

          * `swift`
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: endpointType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EndpointType'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/repository/permissions/policy:
    get:
      operationId: GetRepositoryPermissionsPolicy
      description: |-
        Returns the resource policy that is set on a repository.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutRepositoryPermissionsPolicy
      description: |-
        Sets the resource policy on a repository that specifies permissions to access it.

        When you call `PutRepositoryPermissionsPolicy`, the resource policy on the repository is ignored when evaluting permissions. This ensures that the owner of a repository cannot lock themselves out of the repository, which would prevent them from being able to update the resource policy.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policyRevision:
                  $ref: '#/components/schemas/PolicyRevision'
                policyDocument:
                  $ref: '#/components/schemas/PolicyDocument'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package-group-allowed-repositories:
    get:
      operationId: ListAllowedRepositoriesForGroup
      description: |-
        Lists the repositories in the added repositories list of the specified restriction type for a package group. For more information about restriction types and added repository lists, see [Package group origin controls](https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-origin-controls.html) in the _CodeArtifact User Guide_.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: package-group
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageGroupPattern'
      - name: originRestrictionType
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageGroupOriginRestrictionType'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListAllowedRepositoriesForGroupMaxResults'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/list-associated-packages:
    get:
      operationId: ListAssociatedPackages
      description: |-
        Returns a list of packages associated with the requested package group. For information package group association and matching, see [Package group definition syntax and matching behavior](https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-definition-syntax-matching-behavior.html) in the _CodeArtifact User Guide_.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: package-group
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageGroupPattern'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListPackagesMaxResults'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: preview
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/BooleanOptional'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/domains:
    post:
      operationId: ListDomains
      description: |-
        Returns a list of [DomainSummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html) objects for all domains owned by the Amazon Web Services account that makes this call. Each returned `DomainSummary` object contains information about a domain.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/ListDomainsMaxResults'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package-groups:
    post:
      operationId: ListPackageGroups
      description: |-
        Returns a list of package groups in the requested domain.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListPackageGroupsMaxResults'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: prefix
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageGroupPatternPrefix'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/version/assets:
    post:
      operationId: ListPackageVersionAssets
      description: |-
        Returns a list of [AssetSummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_AssetSummary.html) objects for assets in a package version.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      - name: version
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageVersion'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListPackageVersionAssetsMaxResults'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/version/dependencies:
    post:
      operationId: ListPackageVersionDependencies
      description: |-
        Returns the direct dependencies for a package version. The dependencies are returned as [PackageDependency](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDependency.html) objects. CodeArtifact extracts the dependencies for a package version from the metadata file for the package format (for example, the `package.json` file for npm packages and the `pom.xml` file for Maven). Any package version dependencies that are not listed in the configuration file are not returned.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      - name: version
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageVersion'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/versions:
    post:
      operationId: ListPackageVersions
      description: |-
        Returns a list of [PackageVersionSummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html) objects for package versions in a repository that match the request parameters. Package versions of all statuses will be returned by default when calling `list-package-versions` with no `--status` parameter.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageVersionStatus'
      - name: sortBy
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageVersionSortType'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListPackageVersionsMaxResults'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: originType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageVersionOriginType'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/packages:
    post:
      operationId: ListPackages
      description: |-
        Returns a list of [PackageSummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageSummary.html) objects for packages in a repository that match the request parameters.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package-prefix
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageName'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListPackagesMaxResults'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: publish
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AllowPublish'
      - name: upstream
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AllowUpstream'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/repositories:
    post:
      operationId: ListRepositories
      description: |-
        Returns a list of [RepositorySummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html) objects. Each `RepositorySummary` contains information about a repository in the specified Amazon Web Services account and that matches the input parameters.
      parameters:
      - name: repository-prefix
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListRepositoriesMaxResults'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/domain/repositories:
    post:
      operationId: ListRepositoriesInDomain
      description: |-
        Returns a list of [RepositorySummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html) objects. Each `RepositorySummary` contains information about a repository in the specified domain and that matches the input parameters.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: administrator-account
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository-prefix
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListRepositoriesInDomainMaxResults'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package-groups/sub-groups:
    post:
      operationId: ListSubPackageGroups
      description: |-
        Returns a list of direct children of the specified package group.

        For information package group hierarchy, see [Package group definition syntax and matching behavior](https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-definition-syntax-matching-behavior.html) in the _CodeArtifact User Guide_.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: package-group
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageGroupPattern'
      - name: max-results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListPackageGroupsMaxResults'
      - name: next-token
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/tags:
    post:
      operationId: ListTagsForResource
      description: |-
        Gets information about Amazon Web Services tags for a specified Amazon Resource Name (ARN) in CodeArtifact.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/version/publish:
    post:
      operationId: PublishPackageVersion
      description: |-
        Creates a new package version containing one or more assets (or files).

        The `unfinished` flag can be used to keep the package version in the `Unfinished` state until all of its assets have been uploaded (see [Package version status](https://docs.aws.amazon.com/codeartifact/latest/ug/packages-overview.html#package-version-status.html#package-version-status) in the _CodeArtifact user guide_). To set the package version’s status to `Published`, omit the `unfinished` flag when uploading the final asset, or set the status using [UpdatePackageVersionStatus](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdatePackageVersionsStatus.html). Once a package version’s status is set to `Published`, it cannot change back to `Unfinished`.

        Only generic packages can be published using this API. For more information, see [Using generic packages](https://docs.aws.amazon.com/codeartifact/latest/ug/using-generic.html) in the _CodeArtifact User Guide_.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      - name: version
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageVersion'
      - name: asset
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/AssetName'
      - name: x-amz-content-sha256
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/SHA256'
      - name: unfinished
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/BooleanOptional'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assetContent:
                  $ref: '#/components/schemas/Asset'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/tag:
    post:
      operationId: TagResource
      description: |-
        Adds or updates tags for a resource in CodeArtifact.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/untag:
    post:
      operationId: UntagResource
      description: |-
        Removes tags from a resource in CodeArtifact.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagKeys:
                  $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package-group-origin-configuration:
    put:
      operationId: UpdatePackageGroupOriginConfiguration
      description: |-
        Updates the package origin configuration for a package group.

        The package origin configuration determines how new versions of a package can be added to a repository. You can allow or block direct publishing of new package versions, or ingestion and retaining of new package versions from an external connection or upstream source. For more information about package group origin controls and configuration, see [Package group origin controls](https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-origin-controls.html) in the _CodeArtifact User Guide_.
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: package-group
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageGroupPattern'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restrictions:
                  $ref: '#/components/schemas/OriginRestrictions'
                addAllowedRepositories:
                  $ref: '#/components/schemas/PackageGroupAllowedRepositoryList'
                removeAllowedRepositories:
                  $ref: '#/components/schemas/PackageGroupAllowedRepositoryList'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The operation did not succeed because it would have exceeded a service limit for your account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /v1/package/versions/update_status:
    post:
      operationId: UpdatePackageVersionsStatus
      description: |-
        Updates the status of one or more versions of a package. Using `UpdatePackageVersionsStatus`, you can update the status of package versions to `Archived`, `Published`, or `Unlisted`. To set the status of a package version to `Disposed`, use [DisposePackageVersions](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DisposePackageVersions.html).
      parameters:
      - name: domain
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: domain-owner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: repository
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RepositoryName'
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageFormat'
      - name: namespace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PackageNamespace'
      - name: package
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PackageName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                versions:
                  $ref: '#/components/schemas/PackageVersionList'
                versionRevisions:
                  $ref: '#/components/schemas/PackageVersionRevisionMap'
                expectedStatus:
                  $ref: '#/components/schemas/PackageVersionStatus'
                targetStatus:
                  $ref: '#/components/schemas/PackageVersionStatus'
      responses:
        '200': {}
        '403':
          description: |-
            The operation did not succeed because of an unauthorized access attempt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The operation did not succeed because prerequisites are not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The operation did not succeed because of an error that occurred inside CodeArtifact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The operation did not succeed because the resource requested is not found in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The operation did not succeed because too many requests are sent to the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The operation did not succeed because a parameter in the request was sent with an invalid value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The operation did not succeed because of an unauthorized access
        attempt.
    AccountId:
      type: string
      pattern: ^[0-9]{12}$
      minLength: 12
      maxLength: 12
    AllowPublish:
      type: string
      enum:
      - ALLOW
      - BLOCK
    AllowUpstream:
      type: string
      enum:
      - ALLOW
      - BLOCK
    Arn:
      type: string
      pattern: ^\S+$
      minLength: 1
      maxLength: 1011
    Asset:
      type: string
      format: byte
    AssetHashes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/HashValue'
    AssetName:
      type: string
      pattern: ^\P{C}+$
      minLength: 1
      maxLength: 255
    AssetSummary:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the asset.
        size:
          allOf:
          - $ref: '#/components/schemas/LongOptional'
          description: The size of the asset.
        hashes:
          allOf:
          - $ref: '#/components/schemas/AssetHashes'
          description: The hashes of the asset.
      required:
      - name
      description: Contains details about a package version asset.
    AssetSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/AssetSummary'
    AssociateExternalConnectionRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to which the external connection
            is added.
        externalConnection:
          allOf:
          - $ref: '#/components/schemas/ExternalConnectionName'
          description: "The name of the external connection to add to the repository.\
            \ The following values are supported:\n\n  * `public:npmjs` \\- for the\
            \ npm public repository. \n\n  * `public:nuget-org` \\- for the NuGet\
            \ Gallery. \n\n  * `public:pypi` \\- for the Python Package Index. \n\n\
            \  * `public:maven-central` \\- for Maven Central. \n\n  * `public:maven-googleandroid`\
            \ \\- for the Google Android repository. \n\n  * `public:maven-gradleplugins`\
            \ \\- for the Gradle plugins repository. \n\n  * `public:maven-commonsware`\
            \ \\- for the CommonsWare Android repository. \n\n  * `public:maven-clojars`\
            \ \\- for the Clojars repository. \n\n  * `public:ruby-gems-org` \\- for\
            \ RubyGems.org. \n\n  * `public:crates-io` \\- for Crates.io."
      required:
      - domain
      - repository
      - externalConnection
    AssociateExternalConnectionResult:
      type: object
      properties:
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          description: Information about the connected repository after processing
            the request.
    AssociatedPackage:
      type: object
      properties:
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format that specifies the type of the associated package.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the associated package. The package component\
            \ that specifies its namespace depends on its type. For example:\n\n \
            \ * The namespace of a Maven package version is its `groupId`. \n\n  *\
            \ The namespace of an npm or Swift package version is its `scope`. \n\n\
            \  * The namespace of a generic package is its `namespace`.\n\n  * Python,\
            \ NuGet, Ruby, and Cargo package versions do not contain a corresponding\
            \ component, package versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the associated package.
        associationType:
          allOf:
          - $ref: '#/components/schemas/PackageGroupAssociationType'
          description: Describes the strength of the association between the package
            and package group. A strong match can be thought of as an exact match,
            and a weak match can be thought of as a variation match, for example,
            the package name matches a variation of the package group pattern. For
            more information about package group pattern matching, including strong
            and weak matches, see [Package group definition syntax and matching behavior](https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-definition-syntax-matching-behavior.html)
            in the _CodeArtifact User Guide_.
      description: A package associated with a package group.
    AssociatedPackageList:
      type: array
      items:
        $ref: '#/components/schemas/AssociatedPackage'
    AuthorizationTokenDurationSeconds:
      type: integer
      format: int64
      minimum: 0
      maximum: 43200
    BooleanOptional:
      type: boolean
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the resource.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of Amazon Web Services resource.
      required:
      - message
      description: The operation did not succeed because prerequisites are not met.
    CopyPackageVersionsRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the source and destination
            repositories.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        sourceRepository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the package versions
            to be copied.
        destinationRepository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository into which package versions are
            copied.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package versions to be copied.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package versions to be copied. The package\
            \ component that specifies its namespace depends on its type. For example:\n\
            \nThe namespace is required when copying package versions of the following\
            \ formats:\n\n  * Maven\n\n  * Swift\n\n  * generic\n\n  * The namespace\
            \ of a Maven package version is its `groupId`. \n\n  * The namespace of\
            \ an npm or Swift package version is its `scope`. \n\n  * The namespace\
            \ of a generic package is its `namespace`.\n\n  * Python, NuGet, Ruby,\
            \ and Cargo package versions do not contain a corresponding component,\
            \ package versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package that contains the versions to be copied.
        versions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionList'
          description: 'The versions of the package to be copied.


            You must specify `versions` or `versionRevisions`. You cannot specify
            both.'
        versionRevisions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevisionMap'
          description: 'A list of key-value pairs. The keys are package versions and
            the values are package version revisions. A `CopyPackageVersion` operation
            succeeds if the specified versions in the source repository match the
            specified package version revision.


            You must specify `versions` or `versionRevisions`. You cannot specify
            both.'
        allowOverwrite:
          allOf:
          - $ref: '#/components/schemas/BooleanOptional'
          description: Set to true to overwrite a package version that already exists
            in the destination repository. If set to false and the package version
            already exists in the destination repository, the package version is returned
            in the `failedVersions` field of the response with an `ALREADY_EXISTS`
            error code.
        includeFromUpstream:
          allOf:
          - $ref: '#/components/schemas/BooleanOptional'
          description: Set to true to copy packages from repositories that are upstream
            from the source repository to the destination repository. The default
            setting is false. For more information, see [Working with upstream repositories](https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html).
      required:
      - domain
      - sourceRepository
      - destinationRepository
      - format
      - package
    CopyPackageVersionsResult:
      type: object
      properties:
        successfulVersions:
          allOf:
          - $ref: '#/components/schemas/SuccessfulPackageVersionInfoMap'
          description: A list of the package versions that were successfully copied
            to your repository.
        failedVersions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionErrorMap'
          description: "A map of package versions that failed to copy and their error\
            \ codes. The possible error codes are in the `PackageVersionError` data\
            \ type. They are:\n\n  * `ALREADY_EXISTS`\n\n  * `MISMATCHED_REVISION`\n\
            \n  * `MISMATCHED_STATUS`\n\n  * `NOT_ALLOWED`\n\n  * `NOT_FOUND`\n\n\
            \  * `SKIPPED`"
    CreateDomainRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain to create. All domain names in an Amazon
            Web Services Region that are in the same Amazon Web Services account must
            be unique. The domain name is used as the prefix in DNS hostnames. Do
            not use sensitive information in a domain name because it is publicly
            discoverable.
        encryptionKey:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: 'The encryption key for the domain. This is used to encrypt
            content stored in a domain. An encryption key can be a key ID, a key Amazon
            Resource Name (ARN), a key alias, or a key alias ARN. To specify an `encryptionKey`,
            your IAM role must have `kms:DescribeKey` and `kms:CreateGrant` permissions
            on the encryption key that is used. For more information, see [DescribeKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestSyntax)
            in the _Key Management Service API Reference_ and [Key Management Service
            API Permissions Reference](https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html)
            in the _Key Management Service Developer Guide_.


            CodeArtifact supports only symmetric CMKs. Do not associate an asymmetric
            CMK with your domain. For more information, see [Using symmetric and asymmetric
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html)
            in the _Key Management Service Developer Guide_.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: One or more tag key-value pairs for the domain.
      required:
      - domain
    CreateDomainResult:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainDescription'
          description: Contains information about the created domain after processing
            the request.
    CreatePackageGroupRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain in which you want to create a package
            group.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPattern'
          description: The pattern of the package group to create. The pattern is
            also the identifier of the package group.
        contactInfo:
          allOf:
          - $ref: '#/components/schemas/PackageGroupContactInfo'
          description: The contact information for the created package group.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the package group.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: One or more tag key-value pairs for the package group.
      required:
      - domain
      - packageGroup
    CreatePackageGroupResult:
      type: object
      properties:
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupDescription'
          description: Information about the created package group after processing
            the request.
    CreateRepositoryRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the created repository.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to create.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the created repository.
        upstreams:
          allOf:
          - $ref: '#/components/schemas/UpstreamRepositoryList'
          description: A list of upstream repositories to associate with the repository.
            The order of the upstream repositories in the list determines their priority
            order when CodeArtifact looks for a requested package version. For more
            information, see [Working with upstream repositories](https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html).
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: One or more tag key-value pairs for the repository.
      required:
      - domain
      - repository
    CreateRepositoryResult:
      type: object
      properties:
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          description: Information about the created repository after processing the
            request.
    DeleteDomainPermissionsPolicyRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain associated with the resource policy
            to be deleted.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        policyRevision:
          allOf:
          - $ref: '#/components/schemas/PolicyRevision'
          description: The current revision of the resource policy to be deleted.
            This revision is used for optimistic locking, which prevents others from
            overwriting your changes to the domain's resource policy.
      required:
      - domain
    DeleteDomainPermissionsPolicyResult:
      type: object
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicy'
          description: Information about the deleted resource policy after processing
            the request.
    DeleteDomainRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain to delete.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
      required:
      - domain
    DeleteDomainResult:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainDescription'
          description: Contains information about the deleted domain after processing
            the request.
    DeletePackageGroupRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain that contains the package group to be deleted.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pattern of the package group to be deleted.
      required:
      - domain
      - packageGroup
    DeletePackageGroupResult:
      type: object
      properties:
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupDescription'
          description: Information about the deleted package group after processing
            the request.
    DeletePackageRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the package to delete.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the package to delete.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the requested package to delete.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package to delete. The package component\
            \ that specifies its namespace depends on its type. For example:\n\nThe\
            \ namespace is required when deleting packages of the following formats:\n\
            \n  * Maven\n\n  * Swift\n\n  * generic\n\n  * The namespace of a Maven\
            \ package version is its `groupId`. \n\n  * The namespace of an npm or\
            \ Swift package version is its `scope`. \n\n  * The namespace of a generic\
            \ package is its `namespace`.\n\n  * Python, NuGet, Ruby, and Cargo package\
            \ versions do not contain a corresponding component, package versions\
            \ of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package to delete.
      required:
      - domain
      - repository
      - format
      - package
    DeletePackageResult:
      type: object
      properties:
        deletedPackage:
          $ref: '#/components/schemas/PackageSummary'
    DeletePackageVersionsRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the package to delete.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the package versions
            to delete.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package versions to delete.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package versions to be deleted. The package\
            \ component that specifies its namespace depends on its type. For example:\n\
            \nThe namespace is required when deleting package versions of the following\
            \ formats:\n\n  * Maven\n\n  * Swift\n\n  * generic\n\n  * The namespace\
            \ of a Maven package version is its `groupId`. \n\n  * The namespace of\
            \ an npm or Swift package version is its `scope`. \n\n  * The namespace\
            \ of a generic package is its `namespace`.\n\n  * Python, NuGet, Ruby,\
            \ and Cargo package versions do not contain a corresponding component,\
            \ package versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package with the versions to delete.
        versions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionList'
          description: An array of strings that specify the versions of the package
            to delete.
        expectedStatus:
          allOf:
          - $ref: '#/components/schemas/PackageVersionStatus'
          description: The expected status of the package version to delete.
      required:
      - domain
      - repository
      - format
      - package
      - versions
    DeletePackageVersionsResult:
      type: object
      properties:
        successfulVersions:
          allOf:
          - $ref: '#/components/schemas/SuccessfulPackageVersionInfoMap'
          description: A list of the package versions that were successfully deleted.
            The status of every successful version will be `Deleted`.
        failedVersions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionErrorMap'
          description: "A `PackageVersionError` object that contains a map of errors\
            \ codes for the deleted package that failed. The possible error codes\
            \ are:\n\n  * `ALREADY_EXISTS`\n\n  * `MISMATCHED_REVISION`\n\n  * `MISMATCHED_STATUS`\n\
            \n  * `NOT_ALLOWED`\n\n  * `NOT_FOUND`\n\n  * `SKIPPED`"
    DeleteRepositoryPermissionsPolicyRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository associated
            with the resource policy to be deleted.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that is associated with the resource
            policy to be deleted
        policyRevision:
          allOf:
          - $ref: '#/components/schemas/PolicyRevision'
          description: The revision of the repository's resource policy to be deleted.
            This revision is used for optimistic locking, which prevents others from
            accidentally overwriting your changes to the repository's resource policy.
      required:
      - domain
      - repository
    DeleteRepositoryPermissionsPolicyResult:
      type: object
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicy'
          description: Information about the deleted policy after processing the request.
    DeleteRepositoryRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository to delete.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to delete.
      required:
      - domain
      - repository
    DeleteRepositoryResult:
      type: object
      properties:
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          description: Information about the deleted repository after processing the
            request.
    DescribeDomainRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: A string that specifies the name of the requested domain.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
      required:
      - domain
    DescribeDomainResult:
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/DomainDescription'
    DescribePackageGroupRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the package group.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPattern'
          description: The pattern of the requested package group.
      required:
      - domain
      - packageGroup
    DescribePackageGroupResult:
      type: object
      properties:
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupDescription'
          description: A [PackageGroupDescription](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageGroupDescription.html)
            object that contains information about the requested package group.
    DescribePackageRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository that contains
            the package.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the requested package.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format that specifies the type of the requested package.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the requested package. The package component\
            \ that specifies its namespace depends on its type. For example:\n\nThe\
            \ namespace is required when requesting packages of the following formats:\n\
            \n  * Maven\n\n  * Swift\n\n  * generic\n\n  * The namespace of a Maven\
            \ package version is its `groupId`. \n\n  * The namespace of an npm or\
            \ Swift package version is its `scope`. \n\n  * The namespace of a generic\
            \ package is its `namespace`.\n\n  * Python, NuGet, Ruby, and Cargo package\
            \ versions do not contain a corresponding component, package versions\
            \ of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the requested package.
      required:
      - domain
      - repository
      - format
      - package
    DescribePackageResult:
      type: object
      properties:
        package:
          allOf:
          - $ref: '#/components/schemas/PackageDescription'
          description: A [PackageDescription](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html)
            object that contains information about the requested package.
      required:
      - package
    DescribePackageVersionRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository that contains
            the package version.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the package version.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format that specifies the type of the requested package version.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the requested package version. The package\
            \ component that specifies its namespace depends on its type. For example:\n\
            \nThe namespace is required when requesting package versions of the following\
            \ formats:\n\n  * Maven\n\n  * Swift\n\n  * generic\n\n  * The namespace\
            \ of a Maven package version is its `groupId`. \n\n  * The namespace of\
            \ an npm or Swift package version is its `scope`. \n\n  * The namespace\
            \ of a generic package is its `namespace`.\n\n  * Python, NuGet, Ruby,\
            \ and Cargo package versions do not contain a corresponding component,\
            \ package versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the requested package version.
        packageVersion:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: A string that contains the package version (for example, `3.5.2`).
      required:
      - domain
      - repository
      - format
      - package
      - packageVersion
    DescribePackageVersionResult:
      type: object
      properties:
        packageVersion:
          allOf:
          - $ref: '#/components/schemas/PackageVersionDescription'
          description: A [PackageVersionDescription](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html)
            object that contains information about the requested package version.
      required:
      - packageVersion
    DescribeRepositoryRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository to describe.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: A string that specifies the name of the requested repository.
      required:
      - domain
      - repository
    DescribeRepositoryResult:
      type: object
      properties:
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          description: A `RepositoryDescription` object that contains the requested
            repository information.
    Description:
      type: string
      pattern: ^\P{C}*$
      minLength: 0
      maxLength: 1000
    DisassociateExternalConnectionRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository from which
            to remove the external repository.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository from which the external connection
            will be removed.
        externalConnection:
          allOf:
          - $ref: '#/components/schemas/ExternalConnectionName'
          description: The name of the external connection to be removed from the
            repository.
      required:
      - domain
      - repository
      - externalConnection
    DisassociateExternalConnectionResult:
      type: object
      properties:
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          description: The repository associated with the removed external connection.
    DisposePackageVersionsRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository you want
            to dispose.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the package versions
            you want to dispose.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format that specifies the type of package versions you want
            to dispose.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package versions to be disposed. The\
            \ package component that specifies its namespace depends on its type.\
            \ For example:\n\nThe namespace is required when disposing package versions\
            \ of the following formats:\n\n  * Maven\n\n  * Swift\n\n  * generic\n\
            \n  * The namespace of a Maven package version is its `groupId`. \n\n\
            \  * The namespace of an npm or Swift package version is its `scope`.\
            \ \n\n  * The namespace of a generic package is its `namespace`.\n\n \
            \ * Python, NuGet, Ruby, and Cargo package versions do not contain a corresponding\
            \ component, package versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package with the versions you want to dispose.
        versions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionList'
          description: The versions of the package you want to dispose.
        versionRevisions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevisionMap'
          description: The revisions of the package versions you want to dispose.
        expectedStatus:
          allOf:
          - $ref: '#/components/schemas/PackageVersionStatus'
          description: The expected status of the package version to dispose.
      required:
      - domain
      - repository
      - format
      - package
      - versions
    DisposePackageVersionsResult:
      type: object
      properties:
        successfulVersions:
          allOf:
          - $ref: '#/components/schemas/SuccessfulPackageVersionInfoMap'
          description: A list of the package versions that were successfully disposed.
        failedVersions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionErrorMap'
          description: "A `PackageVersionError` object that contains a map of errors\
            \ codes for the disposed package versions that failed. The possible error\
            \ codes are:\n\n  * `ALREADY_EXISTS`\n\n  * `MISMATCHED_REVISION`\n\n\
            \  * `MISMATCHED_STATUS`\n\n  * `NOT_ALLOWED`\n\n  * `NOT_FOUND`\n\n \
            \ * `SKIPPED`"
    DomainDescription:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain.
        owner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services account ID that owns the domain.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the domain.
        status:
          allOf:
          - $ref: '#/components/schemas/DomainStatus'
          description: The current status of a domain.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp that represents the date and time the domain was
            created.
        encryptionKey:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of an Key Management Service (KMS) key associated with
            a domain.
        repositoryCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of repositories in the domain.
        assetSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total size of all assets in the domain.
        s3BucketArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the Amazon S3 bucket that
            is used to store package assets in the domain.
      description: Information about a domain. A domain is a container for repositories.
        When you create a domain, it is empty until you add one or more repositories.
    DomainEntryPoint:
      type: object
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that a package was originally published
            to.
        externalConnectionName:
          allOf:
          - $ref: '#/components/schemas/ExternalConnectionName'
          description: The name of the external connection that a package was ingested
            from.
      description: 'Information about how a package originally entered the CodeArtifact
        domain. For packages published directly to CodeArtifact, the entry point is
        the repository it was published to. For packages ingested from an external
        repository, the entry point is the external connection that it was ingested
        from. An external connection is a CodeArtifact repository that is connected
        to an external repository such as the npm registry or NuGet gallery.


        If a package version exists in a repository and is updated, for example if
        a package of the same version is added with additional assets, the package
        version''s `DomainEntryPoint` will not change from the original package version''s
        value.'
    DomainName:
      type: string
      pattern: ^[a-z][a-z0-9\-]{0,48}[a-z0-9]$
      minLength: 2
      maxLength: 50
    DomainStatus:
      type: string
      enum:
      - Active
      - Deleted
    DomainSummary:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain.
        owner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the domain.
        status:
          allOf:
          - $ref: '#/components/schemas/DomainStatus'
          description: A string that contains the status of the domain.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp that contains the date and time the domain was
            created.
        encryptionKey:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The key used to encrypt the domain.
      description: Information about a domain, including its name, Amazon Resource
        Name (ARN), and status. The [ListDomains](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListDomains.html)
        operation returns a list of `DomainSummary` objects.
    DomainSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/DomainSummary'
    EndpointType:
      type: string
      enum:
      - dualstack
      - ipv4
    ErrorMessage:
      type: string
    ExternalConnectionName:
      type: string
      pattern: ^[A-Za-z0-9][A-Za-z0-9._\-:]{1,99}$
      minLength: 2
      maxLength: 100
    ExternalConnectionStatus:
      type: string
      enum:
      - Available
    GetAssociatedPackageGroupRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the package from which
            to get the associated package group.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package from which to get the associated
            package group.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package from which to get the associated\
            \ package group. The package component that specifies its namespace depends\
            \ on its type. For example:\n\nThe namespace is required when getting\
            \ associated package groups from packages of the following formats:\n\n\
            \  * Maven\n\n  * Swift\n\n  * generic\n\n  * The namespace of a Maven\
            \ package version is its `groupId`. \n\n  * The namespace of an npm or\
            \ Swift package version is its `scope`. \n\n  * The namespace of a generic\
            \ package is its `namespace`.\n\n  * Python, NuGet, Ruby, and Cargo package\
            \ versions do not contain a corresponding component, package versions\
            \ of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The package from which to get the associated package group.
      required:
      - domain
      - format
      - package
    GetAssociatedPackageGroupResult:
      type: object
      properties:
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupDescription'
          description: The package group that is associated with the requested package.
        associationType:
          allOf:
          - $ref: '#/components/schemas/PackageGroupAssociationType'
          description: Describes the strength of the association between the package
            and package group. A strong match is also known as an exact match, and
            a weak match is known as a relative match.
    GetAuthorizationTokenRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that is in scope for the generated authorization
            token.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        durationSeconds:
          allOf:
          - $ref: '#/components/schemas/AuthorizationTokenDurationSeconds'
          description: The time, in seconds, that the generated authorization token
            is valid. Valid values are `0` and any number between `900` (15 minutes)
            and `43200` (12 hours). A value of `0` will set the expiration of the
            authorization token to the same expiration of the user's role's temporary
            credentials.
      required:
      - domain
    GetAuthorizationTokenResult:
      type: object
      properties:
        authorizationToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The returned authentication token.
        expiration:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp that specifies the date and time the authorization
            token expires.
    GetDomainPermissionsPolicyRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain to which the resource policy is attached.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
      required:
      - domain
    GetDomainPermissionsPolicyResult:
      type: object
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicy'
          description: The returned resource policy.
    GetPackageVersionAssetRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository that contains
            the package version with the requested asset.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The repository that contains the package version with the requested
            asset.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format that specifies the type of the package version with
            the requested asset file.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package version with the requested asset\
            \ file. The package component that specifies its namespace depends on\
            \ its type. For example:\n\nThe namespace is required when requesting\
            \ assets from package versions of the following formats:\n\n  * Maven\n\
            \n  * Swift\n\n  * generic\n\n  * The namespace of a Maven package version\
            \ is its `groupId`. \n\n  * The namespace of an npm or Swift package version\
            \ is its `scope`. \n\n  * The namespace of a generic package is its `namespace`.\n\
            \n  * Python, NuGet, Ruby, and Cargo package versions do not contain a\
            \ corresponding component, package versions of those formats do not have\
            \ a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package that contains the requested asset.
        packageVersion:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: A string that contains the package version (for example, `3.5.2`).
        asset:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the requested asset.
        packageVersionRevision:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevision'
          description: The name of the package version revision that contains the
            requested asset.
      required:
      - domain
      - repository
      - format
      - package
      - packageVersion
      - asset
    GetPackageVersionAssetResult:
      type: object
      properties:
        asset:
          allOf:
          - $ref: '#/components/schemas/Asset'
          description: The binary file, or asset, that is downloaded.
        assetName:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: The name of the asset that is downloaded.
        packageVersion:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: A string that contains the package version (for example, `3.5.2`).
        packageVersionRevision:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevision'
          description: The name of the package version revision that contains the
            downloaded asset.
    GetPackageVersionReadmeRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository that contains
            the package version with the requested readme file.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The repository that contains the package with the requested
            readme file.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format that specifies the type of the package version with
            the requested readme file.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package version with the requested readme\
            \ file. The package component that specifies its namespace depends on\
            \ its type. For example:\n\nThe namespace is required when requesting\
            \ the readme from package versions of the following formats:\n\n  * Maven\n\
            \n  * Swift\n\n  * generic\n\n  * The namespace of a Maven package version\
            \ is its `groupId`. \n\n  * The namespace of an npm or Swift package version\
            \ is its `scope`. \n\n  * The namespace of a generic package is its `namespace`.\n\
            \n  * Python, NuGet, Ruby, and Cargo package versions do not contain a\
            \ corresponding component, package versions of those formats do not have\
            \ a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package version that contains the requested
            readme file.
        packageVersion:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: A string that contains the package version (for example, `3.5.2`).
      required:
      - domain
      - repository
      - format
      - package
      - packageVersion
    GetPackageVersionReadmeResult:
      type: object
      properties:
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package with the requested readme file.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package version with the requested readme\
            \ file. The package component that specifies its namespace depends on\
            \ its type. For example:\n\n  * The namespace of a Maven package version\
            \ is its `groupId`. \n\n  * The namespace of an npm or Swift package version\
            \ is its `scope`. \n\n  * The namespace of a generic package is its `namespace`.\n\
            \n  * Python, NuGet, Ruby, and Cargo package versions do not contain a\
            \ corresponding component, package versions of those formats do not have\
            \ a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package that contains the returned readme file.
        version:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: The version of the package with the requested readme file.
        versionRevision:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevision'
          description: The current revision associated with the package version.
        readme:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The text of the returned readme file.
    GetRepositoryEndpointRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain that contains the repository. It does not include
            dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: Returns which endpoint of a repository to return. A repository
            has one endpoint for each package format.
        endpointType:
          allOf:
          - $ref: '#/components/schemas/EndpointType'
          description: A string that specifies the type of endpoint.
      required:
      - domain
      - repository
      - format
    GetRepositoryEndpointResult:
      type: object
      properties:
        repositoryEndpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A string that specifies the URL of the returned endpoint.
    GetRepositoryPermissionsPolicyRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain containing the repository whose associated
            resource policy is to be retrieved.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository whose associated resource policy
            is to be retrieved.
      required:
      - domain
      - repository
    GetRepositoryPermissionsPolicyResult:
      type: object
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicy'
          description: The returned resource policy.
    HashAlgorithm:
      type: string
      enum:
      - MD5
      - SHA-1
      - SHA-256
      - SHA-512
    HashValue:
      type: string
      pattern: ^[0-9a-f]+$
      minLength: 32
      maxLength: 512
    Integer:
      type: integer
      default: 0
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The operation did not succeed because of an error that occurred
        inside CodeArtifact.
    LicenseInfo:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Name of the license.
        url:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The URL for license data.
      description: Details of the license data.
    LicenseInfoList:
      type: array
      items:
        $ref: '#/components/schemas/LicenseInfo'
    ListAllowedRepositoriesForGroupMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    ListAllowedRepositoriesForGroupRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the package group from
            which to list allowed repositories.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPattern'
          description: The pattern of the package group from which to list allowed
            repositories.
        originRestrictionType:
          allOf:
          - $ref: '#/components/schemas/PackageGroupOriginRestrictionType'
          description: The origin configuration restriction type of which to list
            allowed repositories.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListAllowedRepositoriesForGroupMaxResults'
          description: The maximum number of results to return per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
      required:
      - domain
      - packageGroup
      - originRestrictionType
    ListAllowedRepositoriesForGroupResult:
      type: object
      properties:
        allowedRepositories:
          allOf:
          - $ref: '#/components/schemas/RepositoryNameList'
          description: The list of allowed repositories for the package group and
            origin configuration restriction type.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
    ListAssociatedPackagesRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the package group from
            which to list associated packages.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPattern'
          description: The pattern of the package group from which to list associated
            packages.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListPackagesMaxResults'
          description: The maximum number of results to return per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
        preview:
          allOf:
          - $ref: '#/components/schemas/BooleanOptional'
          description: When this flag is included, `ListAssociatedPackages` will return
            a list of packages that would be associated with a package group, even
            if it does not exist.
      required:
      - domain
      - packageGroup
    ListAssociatedPackagesResult:
      type: object
      properties:
        packages:
          allOf:
          - $ref: '#/components/schemas/AssociatedPackageList'
          description: The list of packages associated with the requested package
            group.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
    ListDomainsMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    ListDomainsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListDomainsMaxResults'
          description: The maximum number of results to return per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
    ListDomainsResult:
      type: object
      properties:
        domains:
          allOf:
          - $ref: '#/components/schemas/DomainSummaryList'
          description: The returned list of [DomainSummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DomainSummary.html)
            objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
    ListPackageGroupsMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    ListPackageGroupsRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain for which you want to list package groups.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListPackageGroupsMaxResults'
          description: The maximum number of results to return per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
        prefix:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPatternPrefix'
          description: A prefix for which to search package groups. When included,
            `ListPackageGroups` will return only package groups with patterns that
            match the prefix.
      required:
      - domain
    ListPackageGroupsResult:
      type: object
      properties:
        packageGroups:
          allOf:
          - $ref: '#/components/schemas/PackageGroupSummaryList'
          description: The list of package groups in the requested domain.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
    ListPackageVersionAssetsMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    ListPackageVersionAssetsRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository associated
            with the package version assets.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the package that contains
            the requested package version assets.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package that contains the requested package
            version assets.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package version that contains the requested\
            \ package version assets. The package component that specifies its namespace\
            \ depends on its type. For example:\n\nThe namespace is required requesting\
            \ assets from package versions of the following formats:\n\n  * Maven\n\
            \n  * Swift\n\n  * generic\n\n  * The namespace of a Maven package version\
            \ is its `groupId`. \n\n  * The namespace of an npm or Swift package version\
            \ is its `scope`. \n\n  * The namespace of a generic package is its `namespace`.\n\
            \n  * Python, NuGet, Ruby, and Cargo package versions do not contain a\
            \ corresponding component, package versions of those formats do not have\
            \ a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package that contains the requested package
            version assets.
        packageVersion:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: A string that contains the package version (for example, `3.5.2`).
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListPackageVersionAssetsMaxResults'
          description: The maximum number of results to return per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
      required:
      - domain
      - repository
      - format
      - package
      - packageVersion
    ListPackageVersionAssetsResult:
      type: object
      properties:
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package that contains the requested package
            version assets.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package version that contains the requested\
            \ package version assets. The package component that specifies its namespace\
            \ depends on its type. For example:\n\n  * The namespace of a Maven package\
            \ version is its `groupId`. \n\n  * The namespace of an npm or Swift package\
            \ version is its `scope`. \n\n  * The namespace of a generic package is\
            \ its `namespace`.\n\n  * Python, NuGet, Ruby, and Cargo package versions\
            \ do not contain a corresponding component, package versions of those\
            \ formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package that contains the requested package
            version assets.
        version:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: The version of the package associated with the requested assets.
        versionRevision:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevision'
          description: The current revision associated with the package version.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are additional results, this is the token for the
            next set of results.
        assets:
          allOf:
          - $ref: '#/components/schemas/AssetSummaryList'
          description: The returned list of [AssetSummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_AssetSummary.html)
            objects.
    ListPackageVersionDependenciesRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository that contains
            the requested package version dependencies.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the requested package
            version.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package with the requested dependencies.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package version with the requested dependencies.\
            \ The package component that specifies its namespace depends on its type.\
            \ For example:\n\nThe namespace is required when listing dependencies\
            \ from package versions of the following formats:\n\n  * Maven\n\n  *\
            \ The namespace of a Maven package version is its `groupId`. \n\n  * The\
            \ namespace of an npm package version is its `scope`. \n\n  * Python and\
            \ NuGet package versions do not contain a corresponding component, package\
            \ versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package versions' package.
        packageVersion:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: A string that contains the package version (for example, `3.5.2`).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
      required:
      - domain
      - repository
      - format
      - package
      - packageVersion
    ListPackageVersionDependenciesResult:
      type: object
      properties:
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format that specifies the type of the package that contains
            the returned dependencies.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package version that contains the returned\
            \ dependencies. The package component that specifies its namespace depends\
            \ on its type. For example:\n\nThe namespace is required when listing\
            \ dependencies from package versions of the following formats:\n\n  *\
            \ Maven\n\n  * The namespace of a Maven package version is its `groupId`.\
            \ \n\n  * The namespace of an npm package version is its `scope`. \n\n\
            \  * Python and NuGet package versions do not contain a corresponding\
            \ component, package versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package that contains the returned package
            versions dependencies.
        version:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: The version of the package that is specified in the request.
        versionRevision:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevision'
          description: The current revision associated with the package version.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
        dependencies:
          allOf:
          - $ref: '#/components/schemas/PackageDependencyList'
          description: The returned list of [PackageDependency](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDependency.html)
            objects.
    ListPackageVersionsMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    ListPackageVersionsRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository that contains
            the requested package versions.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the requested package
            versions.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package versions you want to list.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package that contains the requested package\
            \ versions. The package component that specifies its namespace depends\
            \ on its type. For example:\n\nThe namespace is required when deleting\
            \ package versions of the following formats:\n\n  * Maven\n\n  * Swift\n\
            \n  * generic\n\n  * The namespace of a Maven package version is its `groupId`.\
            \ \n\n  * The namespace of an npm or Swift package version is its `scope`.\
            \ \n\n  * The namespace of a generic package is its `namespace`.\n\n \
            \ * Python, NuGet, Ruby, and Cargo package versions do not contain a corresponding\
            \ component, package versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package for which you want to request package
            versions.
        status:
          allOf:
          - $ref: '#/components/schemas/PackageVersionStatus'
          description: A string that filters the requested package versions by status.
        sortBy:
          allOf:
          - $ref: '#/components/schemas/PackageVersionSortType'
          description: How to sort the requested list of package versions.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListPackageVersionsMaxResults'
          description: The maximum number of results to return per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
        originType:
          allOf:
          - $ref: '#/components/schemas/PackageVersionOriginType'
          description: The `originType` used to filter package versions. Only package
            versions with the provided `originType` will be returned.
      required:
      - domain
      - repository
      - format
      - package
    ListPackageVersionsResult:
      type: object
      properties:
        defaultDisplayVersion:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: "The default package version to display. This depends on the\
            \ package format:\n\n  * For Maven and PyPI packages, it's the most recently\
            \ published package version. \n\n  * For npm packages, it's the version\
            \ referenced by the `latest` tag. If the `latest` tag is not set, it's\
            \ the most recently published package version."
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format of the package.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package that contains the requested package\
            \ versions. The package component that specifies its namespace depends\
            \ on its type. For example:\n\n  * The namespace of a Maven package version\
            \ is its `groupId`. \n\n  * The namespace of an npm or Swift package version\
            \ is its `scope`. \n\n  * The namespace of a generic package is its `namespace`.\n\
            \n  * Python, NuGet, Ruby, and Cargo package versions do not contain a\
            \ corresponding component, package versions of those formats do not have\
            \ a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package.
        versions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionSummaryList'
          description: The returned list of [PackageVersionSummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html)
            objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are additional results, this is the token for the
            next set of results.
    ListPackagesMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    ListPackagesRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository that contains
            the requested packages.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the requested packages.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format used to filter requested packages. Only packages
            from the provided format will be returned.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace prefix used to filter requested packages. Only\
            \ packages with a namespace that starts with the provided string value\
            \ are returned. Note that although this option is called `--namespace`\
            \ and not `--namespace-prefix`, it has prefix-matching behavior.\n\nEach\
            \ package format uses namespace as follows:\n\n  * The namespace of a\
            \ Maven package version is its `groupId`. \n\n  * The namespace of an\
            \ npm or Swift package version is its `scope`. \n\n  * The namespace of\
            \ a generic package is its `namespace`.\n\n  * Python, NuGet, Ruby, and\
            \ Cargo package versions do not contain a corresponding component, package\
            \ versions of those formats do not have a namespace."
        packagePrefix:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: A prefix used to filter requested packages. Only packages with
            names that start with `packagePrefix` are returned.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListPackagesMaxResults'
          description: The maximum number of results to return per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
        publish:
          allOf:
          - $ref: '#/components/schemas/AllowPublish'
          description: The value of the `Publish` package origin control restriction
            used to filter requested packages. Only packages with the provided restriction
            are returned. For more information, see [PackageOriginRestrictions](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html).
        upstream:
          allOf:
          - $ref: '#/components/schemas/AllowUpstream'
          description: The value of the `Upstream` package origin control restriction
            used to filter requested packages. Only packages with the provided restriction
            are returned. For more information, see [PackageOriginRestrictions](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html).
      required:
      - domain
      - repository
    ListPackagesResult:
      type: object
      properties:
        packages:
          allOf:
          - $ref: '#/components/schemas/PackageSummaryList'
          description: The list of returned [PackageSummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageSummary.html)
            objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are additional results, this is the token for the
            next set of results.
    ListRepositoriesInDomainMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    ListRepositoriesInDomainRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the returned list of repositories.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        administratorAccount:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: Filter the list of repositories to only include those that
            are managed by the Amazon Web Services account ID.
        repositoryPrefix:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: A prefix used to filter returned repositories. Only repositories
            with names that start with `repositoryPrefix` are returned.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListRepositoriesInDomainMaxResults'
          description: The maximum number of results to return per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
      required:
      - domain
    ListRepositoriesInDomainResult:
      type: object
      properties:
        repositories:
          allOf:
          - $ref: '#/components/schemas/RepositorySummaryList'
          description: The returned list of repositories.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are additional results, this is the token for the
            next set of results.
    ListRepositoriesMaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    ListRepositoriesRequest:
      type: object
      properties:
        repositoryPrefix:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: A prefix used to filter returned repositories. Only repositories
            with names that start with `repositoryPrefix` are returned.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListRepositoriesMaxResults'
          description: The maximum number of results to return per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
    ListRepositoriesResult:
      type: object
      properties:
        repositories:
          allOf:
          - $ref: '#/components/schemas/RepositorySummaryList'
          description: The returned list of [RepositorySummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html)
            objects.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are additional results, this is the token for the
            next set of results.
    ListSubPackageGroupsRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain which contains the package group from
            which to list sub package groups.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPattern'
          description: The pattern of the package group from which to list sub package
            groups.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ListPackageGroupsMaxResults'
          description: The maximum number of results to return per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next set of results. Use the value returned
            in the previous response in the next request to retrieve the next set
            of results.
      required:
      - domain
      - packageGroup
    ListSubPackageGroupsResult:
      type: object
      properties:
        packageGroups:
          allOf:
          - $ref: '#/components/schemas/PackageGroupSummaryList'
          description: A list of sub package groups for the requested package group.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are additional results, this is the token for the
            next set of results.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the resource to get tags
            for.
      required:
      - resourceArn
    ListTagsForResourceResult:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A list of tag key and value pairs associated with the specified
            resource.
    Long:
      type: integer
      format: int64
      default: 0
    LongOptional:
      type: integer
      format: int64
    OriginRestrictions:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PackageGroupOriginRestrictionMode'
    PackageDependency:
      type: object
      properties:
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package that this package depends on.\
            \ The package component that specifies its namespace depends on its type.\
            \ For example:\n\n  * The namespace of a Maven package version is its\
            \ `groupId`. \n\n  * The namespace of an npm or Swift package version\
            \ is its `scope`. \n\n  * The namespace of a generic package is its `namespace`.\n\
            \n  * Python, NuGet, Ruby, and Cargo package versions do not contain a\
            \ corresponding component, package versions of those formats do not have\
            \ a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package that this package depends on.
        dependencyType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: "The type of a package dependency. The possible values depend\
            \ on the package type.\n\n  * npm: `regular`, `dev`, `peer`, `optional`\n\
            \n  * maven: `optional`, `parent`, `compile`, `runtime`, `test`, `system`,\
            \ `provided`.\n\nNote that `parent` is not a regular Maven dependency\
            \ type; instead this is extracted from the `` element if one is defined\
            \ in the package version's POM file.\n\n  * nuget: The `dependencyType`\
            \ field is never set for NuGet packages.\n\n  * pypi: `Requires-Dist`"
        versionRequirement:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The required version, or version range, of the package that
            this package depends on. The version format is specific to the package
            type. For example, the following are possible valid required versions:
            `1.2.3`, `^2.3.4`, or `4.x`.'
      description: Details about a package dependency.
    PackageDependencyList:
      type: array
      items:
        $ref: '#/components/schemas/PackageDependency'
    PackageDescription:
      type: object
      properties:
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format that specifies the type of the package.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package. The package component that specifies\
            \ its namespace depends on its type. For example:\n\n  * The namespace\
            \ of a Maven package version is its `groupId`. \n\n  * The namespace of\
            \ an npm or Swift package version is its `scope`. \n\n  * The namespace\
            \ of a generic package is its `namespace`.\n\n  * Python, NuGet, Ruby,\
            \ and Cargo package versions do not contain a corresponding component,\
            \ package versions of those formats do not have a namespace."
        name:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package.
        originConfiguration:
          allOf:
          - $ref: '#/components/schemas/PackageOriginConfiguration'
          description: The package origin configuration for the package.
      description: Details about a package.
    PackageFormat:
      type: string
      enum:
      - npm
      - pypi
      - maven
      - nuget
      - generic
      - ruby
      - swift
      - cargo
    PackageGroupAllowedRepository:
      type: object
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the allowed repository.
        originRestrictionType:
          allOf:
          - $ref: '#/components/schemas/PackageGroupOriginRestrictionType'
          description: The origin configuration restriction type of the allowed repository.
      description: Details about an allowed repository for a package group, including
        its name and origin configuration.
    PackageGroupAllowedRepositoryList:
      type: array
      items:
        $ref: '#/components/schemas/PackageGroupAllowedRepository'
    PackageGroupAllowedRepositoryUpdate:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/RepositoryNameList'
    PackageGroupAllowedRepositoryUpdateType:
      type: string
      enum:
      - ADDED
      - REMOVED
    PackageGroupAllowedRepositoryUpdates:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PackageGroupAllowedRepositoryUpdate'
    PackageGroupAssociationType:
      type: string
      enum:
      - STRONG
      - WEAK
    PackageGroupContactInfo:
      type: string
      pattern: ^\P{C}*$
      minLength: 0
      maxLength: 1000
    PackageGroupDescription:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the package group.
        pattern:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPattern'
          description: The pattern of the package group. The pattern determines which
            packages are associated with the package group.
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the package group.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp that represents the date and time the package group
            was created.
        contactInfo:
          allOf:
          - $ref: '#/components/schemas/PackageGroupContactInfo'
          description: The contact information of the package group.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the package group.
        originConfiguration:
          allOf:
          - $ref: '#/components/schemas/PackageGroupOriginConfiguration'
          description: The package group origin configuration that determines how
            package versions can enter repositories.
        parent:
          allOf:
          - $ref: '#/components/schemas/PackageGroupReference'
          description: The direct parent package group of the package group.
      description: The description of the package group.
    PackageGroupOriginConfiguration:
      type: object
      properties:
        restrictions:
          allOf:
          - $ref: '#/components/schemas/PackageGroupOriginRestrictions'
          description: The origin configuration settings that determine how package
            versions can enter repositories.
      description: The package group origin configuration that determines how package
        versions can enter repositories.
    PackageGroupOriginRestriction:
      type: object
      properties:
        mode:
          allOf:
          - $ref: '#/components/schemas/PackageGroupOriginRestrictionMode'
          description: The package group origin restriction setting. If the value
            of `mode` is `ALLOW`, `ALLOW_SPECIFIC_REPOSITORIES`, or `BLOCK`, then
            the value of `effectiveMode` is the same. Otherwise, when the value is
            `INHERIT`, then the value of `effectiveMode` is the value of `mode` of
            the first parent group which does not have a value of `INHERIT`.
        effectiveMode:
          allOf:
          - $ref: '#/components/schemas/PackageGroupOriginRestrictionMode'
          description: The effective package group origin restriction setting. If
            the value of `mode` is `ALLOW`, `ALLOW_SPECIFIC_REPOSITORIES`, or `BLOCK`,
            then the value of `effectiveMode` is the same. Otherwise, when the value
            of `mode` is `INHERIT`, then the value of `effectiveMode` is the value
            of `mode` of the first parent group which does not have a value of `INHERIT`.
        inheritedFrom:
          allOf:
          - $ref: '#/components/schemas/PackageGroupReference'
          description: The parent package group that the package group origin restrictions
            are inherited from.
        repositoriesCount:
          allOf:
          - $ref: '#/components/schemas/LongOptional'
          description: The number of repositories in the allowed repository list.
      description: Contains information about the configured restrictions of the origin
        controls of a package group.
    PackageGroupOriginRestrictionMode:
      type: string
      enum:
      - ALLOW
      - ALLOW_SPECIFIC_REPOSITORIES
      - BLOCK
      - INHERIT
    PackageGroupOriginRestrictionType:
      type: string
      enum:
      - EXTERNAL_UPSTREAM
      - INTERNAL_UPSTREAM
      - PUBLISH
    PackageGroupOriginRestrictions:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PackageGroupOriginRestriction'
    PackageGroupPattern:
      type: string
      pattern: ^[^\p{C}\p{IsWhitespace}]+$
      minLength: 2
      maxLength: 520
    PackageGroupPatternPrefix:
      type: string
      pattern: ^\P{C}*$
      minLength: 0
      maxLength: 520
    PackageGroupReference:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the package group.
        pattern:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPattern'
          description: The pattern of the package group. The pattern determines which
            packages are associated with the package group, and is also the identifier
            of the package group.
      description: Information about the identifiers of a package group.
    PackageGroupSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the package group.
        pattern:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPattern'
          description: The pattern of the package group. The pattern determines which
            packages are associated with the package group.
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain that contains the package group.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp that represents the date and time the repository
            was created.
        contactInfo:
          allOf:
          - $ref: '#/components/schemas/PackageGroupContactInfo'
          description: The contact information of the package group.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the package group.
        originConfiguration:
          allOf:
          - $ref: '#/components/schemas/PackageGroupOriginConfiguration'
          description: Details about the package origin configuration of a package
            group.
        parent:
          allOf:
          - $ref: '#/components/schemas/PackageGroupReference'
          description: The direct parent package group of the package group.
      description: Details about a package group.
    PackageGroupSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/PackageGroupSummary'
    PackageName:
      type: string
      pattern: ^[^#/\s]+$
      minLength: 1
      maxLength: 255
    PackageNamespace:
      type: string
      pattern: ^[^#/\s]+$
      minLength: 1
      maxLength: 255
    PackageOriginConfiguration:
      type: object
      properties:
        restrictions:
          allOf:
          - $ref: '#/components/schemas/PackageOriginRestrictions'
          description: A `PackageOriginRestrictions` object that contains information
            about the upstream and publish package origin configuration for the package.
      description: Details about the package origin configuration of a package.
    PackageOriginRestrictions:
      type: object
      properties:
        publish:
          allOf:
          - $ref: '#/components/schemas/AllowPublish'
          description: The package origin configuration that determines if new versions
            of the package can be published directly to the repository.
        upstream:
          allOf:
          - $ref: '#/components/schemas/AllowUpstream'
          description: The package origin configuration that determines if new versions
            of the package can be added to the repository from an external connection
            or upstream source.
      required:
      - publish
      - upstream
      description: Details about the origin restrictions set on the package. The package
        origin restrictions determine how new versions of a package can be added to
        a specific repository.
    PackageSummary:
      type: object
      properties:
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package. The package component that specifies\
            \ its namespace depends on its type. For example:\n\n  * The namespace\
            \ of a Maven package version is its `groupId`. \n\n  * The namespace of\
            \ an npm or Swift package version is its `scope`. \n\n  * The namespace\
            \ of a generic package is its `namespace`.\n\n  * Python, NuGet, Ruby,\
            \ and Cargo package versions do not contain a corresponding component,\
            \ package versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package.
        originConfiguration:
          allOf:
          - $ref: '#/components/schemas/PackageOriginConfiguration'
          description: A [PackageOriginConfiguration](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginConfiguration.html)
            object that contains a [PackageOriginRestrictions](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html)
            object that contains information about the upstream and publish package
            origin restrictions.
      description: Details about a package, including its format, namespace, and name.
    PackageSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/PackageSummary'
    PackageVersion:
      type: string
      pattern: ^[^#/\s]+$
      minLength: 1
      maxLength: 255
    PackageVersionDescription:
      type: object
      properties:
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package version.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package version. The package component\
            \ that specifies its namespace depends on its type. For example:\n\n \
            \ * The namespace of a Maven package version is its `groupId`. \n\n  *\
            \ The namespace of an npm or Swift package version is its `scope`. \n\n\
            \  * The namespace of a generic package is its `namespace`.\n\n  * Python,\
            \ NuGet, Ruby, and Cargo package versions do not contain a corresponding\
            \ component, package versions of those formats do not have a namespace."
        packageName:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the requested package.
        displayName:
          allOf:
          - $ref: '#/components/schemas/String255'
          description: The name of the package that is displayed. The `displayName`
            varies depending on the package version's format. For example, if an npm
            package is named `ui`, is in the namespace `vue`, and has the format `npm`,
            then the `displayName` is `@vue/ui`.
        version:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: The version of the package.
        summary:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A summary of the package version. The summary is extracted
            from the package. The information in and detail level of the summary depends
            on the package version's format.
        homePage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The homepage associated with the package.
        sourceCodeRepository:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The repository for the source code in the package version,
            or the source code used to build it.
        publishedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp that contains the date and time the package version
            was published.
        licenses:
          allOf:
          - $ref: '#/components/schemas/LicenseInfoList'
          description: Information about licenses associated with the package version.
        revision:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevision'
          description: The revision of the package version.
        status:
          allOf:
          - $ref: '#/components/schemas/PackageVersionStatus'
          description: A string that contains the status of the package version.
        origin:
          allOf:
          - $ref: '#/components/schemas/PackageVersionOrigin'
          description: A [PackageVersionOrigin](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionOrigin.html)
            object that contains information about how the package version was added
            to the repository.
      description: Details about a package version.
    PackageVersionError:
      type: object
      properties:
        errorCode:
          allOf:
          - $ref: '#/components/schemas/PackageVersionErrorCode'
          description: "The error code associated with the error. Valid error codes\
            \ are:\n\n  * `ALREADY_EXISTS`\n\n  * `MISMATCHED_REVISION`\n\n  * `MISMATCHED_STATUS`\n\
            \n  * `NOT_ALLOWED`\n\n  * `NOT_FOUND`\n\n  * `SKIPPED`"
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The error message associated with the error.
      description: l An error associated with package.
    PackageVersionErrorCode:
      type: string
      enum:
      - ALREADY_EXISTS
      - MISMATCHED_REVISION
      - MISMATCHED_STATUS
      - NOT_ALLOWED
      - NOT_FOUND
      - SKIPPED
    PackageVersionErrorMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PackageVersionError'
    PackageVersionList:
      type: array
      items:
        $ref: '#/components/schemas/PackageVersion'
    PackageVersionOrigin:
      type: object
      properties:
        domainEntryPoint:
          allOf:
          - $ref: '#/components/schemas/DomainEntryPoint'
          description: A [DomainEntryPoint](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DomainEntryPoint.html)
            object that contains information about from which repository or external
            connection the package version was added to the domain.
        originType:
          allOf:
          - $ref: '#/components/schemas/PackageVersionOriginType'
          description: Describes how the package version was originally added to the
            domain. An `INTERNAL` origin type means the package version was published
            directly to a repository in the domain. An `EXTERNAL` origin type means
            the package version was ingested from an external connection.
      description: Information about how a package version was added to a repository.
    PackageVersionOriginType:
      type: string
      enum:
      - INTERNAL
      - EXTERNAL
      - UNKNOWN
    PackageVersionRevision:
      type: string
      pattern: ^\S+$
      minLength: 1
      maxLength: 50
    PackageVersionRevisionMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PackageVersionRevision'
    PackageVersionSortType:
      type: string
      enum:
      - PUBLISHED_TIME
    PackageVersionStatus:
      type: string
      enum:
      - Published
      - Unfinished
      - Unlisted
      - Archived
      - Disposed
      - Deleted
    PackageVersionSummary:
      type: object
      properties:
        version:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: Information about a package version.
        revision:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevision'
          description: The revision associated with a package version.
        status:
          allOf:
          - $ref: '#/components/schemas/PackageVersionStatus'
          description: 'A string that contains the status of the package version.
            It can be one of the following:'
        origin:
          allOf:
          - $ref: '#/components/schemas/PackageVersionOrigin'
          description: A [PackageVersionOrigin](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionOrigin.html)
            object that contains information about how the package version was added
            to the repository.
      required:
      - version
      - status
      description: Details about a package version, including its status, version,
        and revision. The [ListPackageVersions](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html)
        operation returns a list of `PackageVersionSummary` objects.
    PackageVersionSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/PackageVersionSummary'
    PaginationToken:
      type: string
      pattern: ^\S+$
      minLength: 1
      maxLength: 2000
    PolicyDocument:
      type: string
      pattern: ^[\P{C}\s]+$
      minLength: 1
      maxLength: 7168
    PolicyRevision:
      type: string
      pattern: ^\S+$
      minLength: 1
      maxLength: 100
    PublishPackageVersionRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository that contains
            the package version to publish.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the AWS account that owns the
            domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that the package version will be
            published to.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: 'A format that specifies the type of the package version with
            the requested asset file.


            The only supported value is `generic`.'
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: The namespace of the package version to publish.
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package version to publish.
        packageVersion:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: The package version to publish (for example, `3.5.2`).
        assetContent:
          allOf:
          - $ref: '#/components/schemas/Asset'
          description: The content of the asset to publish.
        assetName:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          description: 'The name of the asset to publish. Asset names can include
            Unicode letters and numbers, and the following special characters: `~
            ! @ ^ & ( ) - ` _ + [ ] { } ; , . ``'
        assetSHA256:
          allOf:
          - $ref: '#/components/schemas/SHA256'
          description: 'The SHA256 hash of the `assetContent` to publish. This value
            must be calculated by the caller and provided with the request (see [Publishing
            a generic package](https://docs.aws.amazon.com/codeartifact/latest/ug/using-generic.html#publishing-generic-packages)
            in the _CodeArtifact User Guide_).


            This value is used as an integrity check to verify that the `assetContent`
            has not changed after it was originally sent.'
        unfinished:
          allOf:
          - $ref: '#/components/schemas/BooleanOptional'
          description: 'Specifies whether the package version should remain in the
            `unfinished` state. If omitted, the package version status will be set
            to `Published` (see [Package version status](https://docs.aws.amazon.com/codeartifact/latest/ug/packages-overview.html#package-version-status)
            in the _CodeArtifact User Guide_).


            Valid values: `unfinished`'
      required:
      - domain
      - repository
      - format
      - package
      - packageVersion
      - assetContent
      - assetName
      - assetSHA256
    PublishPackageVersionResult:
      type: object
      properties:
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: The format of the package version.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: The namespace of the package version.
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package.
        version:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: The version of the package.
        versionRevision:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevision'
          description: The revision of the package version.
        status:
          allOf:
          - $ref: '#/components/schemas/PackageVersionStatus'
          description: A string that contains the status of the package version. For
            more information, see [Package version status](https://docs.aws.amazon.com/codeartifact/latest/ug/packages-overview.html#package-version-status.html#package-version-status)
            in the _CodeArtifact User Guide_.
        asset:
          allOf:
          - $ref: '#/components/schemas/AssetSummary'
          description: An [AssetSummary](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_AssetSummary.html)
            for the published asset.
    PutDomainPermissionsPolicyRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain on which to set the resource policy.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        policyRevision:
          allOf:
          - $ref: '#/components/schemas/PolicyRevision'
          description: The current revision of the resource policy to be set. This
            revision is used for optimistic locking, which prevents others from overwriting
            your changes to the domain's resource policy.
        policyDocument:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: A valid displayable JSON Aspen policy string to be set as the
            access control resource policy on the provided domain.
      required:
      - domain
      - policyDocument
    PutDomainPermissionsPolicyResult:
      type: object
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicy'
          description: The resource policy that was set after processing the request.
    PutPackageOriginConfigurationRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository that contains
            the package.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository that contains the package.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format that specifies the type of the package to be updated.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package to be updated. The package component\
            \ that specifies its namespace depends on its type. For example:\n\n \
            \ * The namespace of a Maven package version is its `groupId`. \n\n  *\
            \ The namespace of an npm or Swift package version is its `scope`. \n\n\
            \  * The namespace of a generic package is its `namespace`.\n\n  * Python,\
            \ NuGet, Ruby, and Cargo package versions do not contain a corresponding\
            \ component, package versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package to be updated.
        restrictions:
          allOf:
          - $ref: '#/components/schemas/PackageOriginRestrictions'
          description: 'A [PackageOriginRestrictions](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html)
            object that contains information about the `upstream` and `publish` package
            origin restrictions. The `upstream` restriction determines if new package
            versions can be ingested or retained from external connections or upstream
            repositories. The `publish` restriction determines if new package versions
            can be published directly to the repository.


            You must include both the desired `upstream` and `publish` restrictions.'
      required:
      - domain
      - repository
      - format
      - package
      - restrictions
    PutPackageOriginConfigurationResult:
      type: object
      properties:
        originConfiguration:
          allOf:
          - $ref: '#/components/schemas/PackageOriginConfiguration'
          description: A [PackageOriginConfiguration](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginConfiguration.html)
            object that describes the origin configuration set for the package. It
            contains a [PackageOriginRestrictions](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html)
            object that describes how new versions of the package can be introduced
            to the repository.
    PutRepositoryPermissionsPolicyRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain containing the repository to set the
            resource policy on.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to set the resource policy on.
        policyRevision:
          allOf:
          - $ref: '#/components/schemas/PolicyRevision'
          description: Sets the revision of the resource policy that specifies permissions
            to access the repository. This revision is used for optimistic locking,
            which prevents others from overwriting your changes to the repository's
            resource policy.
        policyDocument:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: A valid displayable JSON Aspen policy string to be set as the
            access control resource policy on the provided repository.
      required:
      - domain
      - repository
      - policyDocument
    PutRepositoryPermissionsPolicyResult:
      type: object
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/ResourcePolicy'
          description: The resource policy that was set after processing the request.
    RepositoryDescription:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository.
        administratorAccount:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that manages the repository.
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain that contains the repository. It does not include
            dashes or spaces.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the repository.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A text description of the repository.
        upstreams:
          allOf:
          - $ref: '#/components/schemas/UpstreamRepositoryInfoList'
          description: A list of upstream repositories to associate with the repository.
            The order of the upstream repositories in the list determines their priority
            order when CodeArtifact looks for a requested package version. For more
            information, see [Working with upstream repositories](https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html).
        externalConnections:
          allOf:
          - $ref: '#/components/schemas/RepositoryExternalConnectionInfoList'
          description: An array of external connections associated with the repository.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp that represents the date and time the repository
            was created.
      description: The details of a repository stored in CodeArtifact. A CodeArtifact
        repository contains a set of package versions, each of which maps to a set
        of assets. Repositories are polyglot—a single repository can contain packages
        of any supported type. Each repository exposes endpoints for fetching and
        publishing packages using tools like the `npm` CLI, the Maven CLI (`mvn`),
        and `pip`. You can create up to 100 repositories per Amazon Web Services account.
    RepositoryExternalConnectionInfo:
      type: object
      properties:
        externalConnectionName:
          allOf:
          - $ref: '#/components/schemas/ExternalConnectionName'
          description: The name of the external connection associated with a repository.
        packageFormat:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: "The package format associated with a repository's external\
            \ connection. The valid package formats are:\n\n  * `npm`: A Node Package\
            \ Manager (npm) package. \n\n  * `pypi`: A Python Package Index (PyPI)\
            \ package. \n\n  * `maven`: A Maven package that contains compiled code\
            \ in a distributable format, such as a JAR file. \n\n  * `nuget`: A NuGet\
            \ package. \n\n  * `generic`: A generic package. \n\n  * `ruby`: A Ruby\
            \ package. \n\n  * `swift`: A Swift package. \n\n  * `cargo`: A Cargo\
            \ package."
        status:
          allOf:
          - $ref: '#/components/schemas/ExternalConnectionStatus'
          description: The status of the external connection of a repository. There
            is one valid value, `Available`.
      description: Contains information about the external connection of a repository.
    RepositoryExternalConnectionInfoList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryExternalConnectionInfo'
    RepositoryName:
      type: string
      pattern: ^[A-Za-z0-9][A-Za-z0-9._\-]{1,99}$
      minLength: 2
      maxLength: 100
    RepositoryNameList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryName'
    RepositorySummary:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository.
        administratorAccount:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services account ID that manages the repository.
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the repository.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the repository.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp that represents the date and time the repository
            was created.
      description: Details about a repository, including its Amazon Resource Name
        (ARN), description, and domain information. The [ListRepositories](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListRepositories.html)
        operation returns a list of `RepositorySummary` objects.
    RepositorySummaryList:
      type: array
      items:
        $ref: '#/components/schemas/RepositorySummary'
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the resource.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of Amazon Web Services resource.
      required:
      - message
      description: The operation did not succeed because the resource requested is
        not found in the service.
    ResourcePolicy:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the resource associated with the resource policy
        revision:
          allOf:
          - $ref: '#/components/schemas/PolicyRevision'
          description: The current revision of the resource policy.
        document:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: The resource policy formatted in JSON.
      description: An CodeArtifact resource policy that contains a resource ARN, document
        details, and a revision.
    ResourceType:
      type: string
      enum:
      - domain
      - repository
      - package
      - package-version
      - asset
    RetryAfterSeconds:
      type: integer
    SHA256:
      type: string
      pattern: ^[0-9a-f]+$
      minLength: 64
      maxLength: 64
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the resource.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of Amazon Web Services resource.
      required:
      - message
      description: The operation did not succeed because it would have exceeded a
        service limit for your account.
    String:
      type: string
    String255:
      type: string
      minLength: 1
      maxLength: 255
    SuccessfulPackageVersionInfo:
      type: object
      properties:
        revision:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The revision of a package version.
        status:
          allOf:
          - $ref: '#/components/schemas/PackageVersionStatus'
          description: The status of a package version.
      description: Contains the revision and status of a package version.
    SuccessfulPackageVersionInfoMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SuccessfulPackageVersionInfo'
    Tag:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          description: The tag key.
        value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: The tag value.
      required:
      - key
      - value
      description: A tag is a key-value pair that can be used to manage, search for,
        or filter resources in CodeArtifact.
    TagKey:
      type: string
      pattern: ^\P{C}+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to add or update tags for.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: The tags you want to modify or add to the resource.
      required:
      - resourceArn
      - tags
    TagResourceResult:
      type: object
      properties: {}
    TagValue:
      type: string
      pattern: ^\P{C}*$
      minLength: 0
      maxLength: 256
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/RetryAfterSeconds'
          description: The time period, in seconds, to wait before retrying the request.
      required:
      - message
      description: The operation did not succeed because too many requests are sent
        to the service.
    Timestamp:
      type: string
      format: date-time
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the resource that you want
            to remove tags from.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The tag key for each tag that you want to remove from the resource.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResult:
      type: object
      properties: {}
    UpdatePackageGroupOriginConfigurationRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain which contains the package group for
            which to update the origin configuration.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPattern'
          description: The pattern of the package group for which to update the origin
            configuration.
        restrictions:
          allOf:
          - $ref: '#/components/schemas/OriginRestrictions'
          description: The origin configuration settings that determine how package
            versions can enter repositories.
        addAllowedRepositories:
          allOf:
          - $ref: '#/components/schemas/PackageGroupAllowedRepositoryList'
          description: The repository name and restrictions to add to the allowed
            repository list of the specified package group.
        removeAllowedRepositories:
          allOf:
          - $ref: '#/components/schemas/PackageGroupAllowedRepositoryList'
          description: The repository name and restrictions to remove from the allowed
            repository list of the specified package group.
      required:
      - domain
      - packageGroup
    UpdatePackageGroupOriginConfigurationResult:
      type: object
      properties:
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupDescription'
          description: The package group and information about it after processing
            the request.
        allowedRepositoryUpdates:
          allOf:
          - $ref: '#/components/schemas/PackageGroupAllowedRepositoryUpdates'
          description: Information about the updated allowed repositories after processing
            the request.
    UpdatePackageGroupRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain which contains the package group to
            be updated.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupPattern'
          description: The pattern of the package group to be updated.
        contactInfo:
          allOf:
          - $ref: '#/components/schemas/PackageGroupContactInfo'
          description: Contact information which you want to update the requested
            package group with.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description you want to update the requested package group
            with.
      required:
      - domain
      - packageGroup
    UpdatePackageGroupResult:
      type: object
      properties:
        packageGroup:
          allOf:
          - $ref: '#/components/schemas/PackageGroupDescription'
          description: The package group and information about it after the request
            has been processed.
    UpdatePackageVersionsStatusRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that contains the repository that contains
            the package versions with a status to be updated.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The repository that contains the package versions with the
            status you want to update.
        format:
          allOf:
          - $ref: '#/components/schemas/PackageFormat'
          description: A format that specifies the type of the package with the statuses
            to update.
        namespace:
          allOf:
          - $ref: '#/components/schemas/PackageNamespace'
          description: "The namespace of the package version to be updated. The package\
            \ component that specifies its namespace depends on its type. For example:\n\
            \n  * The namespace of a Maven package version is its `groupId`. \n\n\
            \  * The namespace of an npm or Swift package version is its `scope`.\
            \ \n\n  * The namespace of a generic package is its `namespace`.\n\n \
            \ * Python, NuGet, Ruby, and Cargo package versions do not contain a corresponding\
            \ component, package versions of those formats do not have a namespace."
        package:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: The name of the package with the version statuses to update.
        versions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionList'
          description: An array of strings that specify the versions of the package
            with the statuses to update.
        versionRevisions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionRevisionMap'
          description: A map of package versions and package version revisions. The
            map `key` is the package version (for example, `3.5.2`), and the map `value`
            is the package version revision.
        expectedStatus:
          allOf:
          - $ref: '#/components/schemas/PackageVersionStatus'
          description: The package version’s expected status before it is updated.
            If `expectedStatus` is provided, the package version's status is updated
            only if its status at the time `UpdatePackageVersionsStatus` is called
            matches `expectedStatus`.
        targetStatus:
          allOf:
          - $ref: '#/components/schemas/PackageVersionStatus'
          description: The status you want to change the package version status to.
      required:
      - domain
      - repository
      - format
      - package
      - versions
      - targetStatus
    UpdatePackageVersionsStatusResult:
      type: object
      properties:
        successfulVersions:
          allOf:
          - $ref: '#/components/schemas/SuccessfulPackageVersionInfoMap'
          description: A list of `PackageVersionError` objects, one for each package
            version with a status that failed to update.
        failedVersions:
          allOf:
          - $ref: '#/components/schemas/PackageVersionErrorMap'
          description: A list of `SuccessfulPackageVersionInfo` objects, one for each
            package version with a status that successfully updated.
    UpdateRepositoryRequest:
      type: object
      properties:
        domain:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain associated with the repository to update.
        domainOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The 12-digit account number of the Amazon Web Services account
            that owns the domain. It does not include dashes or spaces.
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of the repository to update.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: An updated repository description.
        upstreams:
          allOf:
          - $ref: '#/components/schemas/UpstreamRepositoryList'
          description: A list of upstream repositories to associate with the repository.
            The order of the upstream repositories in the list determines their priority
            order when CodeArtifact looks for a requested package version. For more
            information, see [Working with upstream repositories](https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html).
      required:
      - domain
      - repository
    UpdateRepositoryResult:
      type: object
      properties:
        repository:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          description: The updated repository.
    UpstreamRepository:
      type: object
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of an upstream repository.
      required:
      - repositoryName
      description: Information about an upstream repository. A list of `UpstreamRepository`
        objects is an input parameter to [CreateRepository](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_CreateRepository.html)
        and [UpdateRepository](https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdateRepository.html).
    UpstreamRepositoryInfo:
      type: object
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          description: The name of an upstream repository.
      description: Information about an upstream repository.
    UpstreamRepositoryInfoList:
      type: array
      items:
        $ref: '#/components/schemas/UpstreamRepositoryInfo'
    UpstreamRepositoryList:
      type: array
      items:
        $ref: '#/components/schemas/UpstreamRepository'
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: ''
      required:
      - message
      description: The operation did not succeed because a parameter in the request
        was sent with an invalid value.
    ValidationExceptionReason:
      type: string
      enum:
      - CANNOT_PARSE
      - ENCRYPTION_KEY_ERROR
      - FIELD_VALIDATION_FAILED
      - UNKNOWN_OPERATION
      - OTHER
