openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: kinesis_video_signaling
  x-aws-serviceName: kinesisvideosignaling
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2019-12-04'
  title: Amazon Kinesis Video Signaling Channels
  description: |-
    Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.
servers:
- description: The Amazon Kinesis Video Signaling Channels regional endpoint
  url: https://kinesisvideo.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /v1/get-ice-server-config:
    post:
      operationId: GetIceServerConfig
      description: |-
        Gets the Interactive Connectivity Establishment (ICE) server configuration information, including URIs, username, and password which can be used to configure the WebRTC connection. The ICE component uses this configuration information to setup the WebRTC connection, including authenticating with the Traversal Using Relays around NAT (TURN) relay server.

        TURN is a protocol that is used to improve the connectivity of peer-to-peer applications. By providing a cloud-based relay service, TURN ensures that a connection can be established even when one or more peers are incapable of a direct peer-to-peer connection. For more information, see [A REST API For Access To TURN Services](https://tools.ietf.org/html/draft-uberti-rtcweb-turn-rest-00).

        You can invoke this API to establish a fallback mechanism in case either of the peers is unable to establish a direct peer-to-peer connection over a signaling channel. You must specify either a signaling channel ARN or the client ID in order to invoke this API.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ChannelARN:
                  $ref: '#/components/schemas/ResourceARN'
                ClientId:
                  $ref: '#/components/schemas/ClientId'
                Service:
                  $ref: '#/components/schemas/Service'
                Username:
                  $ref: '#/components/schemas/Username'
      responses:
        '200': {}
        '400':
          description: |-
            If the client session is expired. Once the client is connected, the session is valid for 45 minutes. Client should reconnect to the channel to continue sending/receiving messages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionExpiredException'
        '401':
          description: |-
            The caller is not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '404':
          description: |-
            The specified resource is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /v1/send-alexa-offer-to-master:
    post:
      operationId: SendAlexaOfferToMaster
      description: |-
        This API allows you to connect WebRTC-enabled devices with Alexa display devices. When invoked, it sends the Alexa Session Description Protocol (SDP) offer to the master peer. The offer is delivered as soon as the master is connected to the specified signaling channel. This API returns the SDP answer from the connected master. If the master is not connected to the signaling channel, redelivery requests are made until the message expires.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ChannelARN:
                  $ref: '#/components/schemas/ResourceARN'
                SenderClientId:
                  $ref: '#/components/schemas/ClientId'
                MessagePayload:
                  $ref: '#/components/schemas/MessagePayload'
      responses:
        '200': {}
        '400':
          description: |-
            The value for this input parameter is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '401':
          description: |-
            The caller is not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '404':
          description: |-
            The specified resource is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
components:
  schemas:
    Answer:
      type: string
      minLength: 1
      maxLength: 10000
    ClientId:
      type: string
      pattern: ^[a-zA-Z0-9_.-]+$
      minLength: 1
      maxLength: 256
    ClientLimitExceededException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: Your request was throttled because you have exceeded the limit
        of allowed client calls. Try making the call later.
    ErrorMessage:
      type: string
    GetIceServerConfigRequest:
      type: object
      properties:
        ChannelARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: The ARN of the signaling channel to be used for the peer-to-peer
            connection between configured peers.
        ClientId:
          allOf:
          - $ref: '#/components/schemas/ClientId'
          description: Unique identifier for the viewer. Must be unique within the
            signaling channel.
        Service:
          allOf:
          - $ref: '#/components/schemas/Service'
          description: Specifies the desired service. Currently, `TURN` is the only
            valid value.
        Username:
          allOf:
          - $ref: '#/components/schemas/Username'
          description: An optional user ID to be associated with the credentials.
      required:
      - ChannelARN
    GetIceServerConfigResponse:
      type: object
      properties:
        IceServerList:
          allOf:
          - $ref: '#/components/schemas/IceServerList'
          description: The list of ICE server information objects.
    IceServer:
      type: object
      properties:
        Uris:
          allOf:
          - $ref: '#/components/schemas/Uris'
          description: An array of URIs, in the form specified in the [I-D.petithuguenin-behave-turn-uris](https://tools.ietf.org/html/draft-petithuguenin-behave-turn-uris-03)
            spec. These URIs provide the different addresses and/or protocols that
            can be used to reach the TURN server.
        Username:
          allOf:
          - $ref: '#/components/schemas/Username'
          description: A username to login to the ICE server.
        Password:
          allOf:
          - $ref: '#/components/schemas/Password'
          description: A password to login to the ICE server.
        Ttl:
          allOf:
          - $ref: '#/components/schemas/Ttl'
          description: The period of time, in seconds, during which the username and
            password are valid.
      description: A structure for the ICE server connection data.
    IceServerList:
      type: array
      items:
        $ref: '#/components/schemas/IceServer'
    InvalidArgumentException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The value for this input parameter is invalid.
    InvalidClientException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The specified client is invalid.
    MessagePayload:
      type: string
      pattern: ^[a-zA-Z0-9+/=]+$
      minLength: 1
      maxLength: 10000
    NotAuthorizedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The caller is not authorized to perform this operation.
    Password:
      type: string
      pattern: ^[a-zA-Z0-9_.-]+$
      minLength: 1
      maxLength: 256
    ResourceARN:
      type: string
      pattern: ^arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+$
      minLength: 1
      maxLength: 1024
    ResourceNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The specified resource is not found.
    SendAlexaOfferToMasterRequest:
      type: object
      properties:
        ChannelARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: The ARN of the signaling channel by which Alexa and the master
            peer communicate.
        SenderClientId:
          allOf:
          - $ref: '#/components/schemas/ClientId'
          description: The unique identifier for the sender client.
        MessagePayload:
          allOf:
          - $ref: '#/components/schemas/MessagePayload'
          description: The base64-encoded SDP offer content.
      required:
      - ChannelARN
      - SenderClientId
      - MessagePayload
    SendAlexaOfferToMasterResponse:
      type: object
      properties:
        Answer:
          allOf:
          - $ref: '#/components/schemas/Answer'
          description: The base64-encoded SDP answer content.
    Service:
      type: string
      enum:
      - TURN
    SessionExpiredException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: If the client session is expired. Once the client is connected,
        the session is valid for 45 minutes. Client should reconnect to the channel
        to continue sending/receiving messages.
    Ttl:
      type: integer
      minimum: 30
      maximum: 86400
    Uri:
      type: string
      minLength: 1
      maxLength: 256
    Uris:
      type: array
      items:
        $ref: '#/components/schemas/Uri'
    Username:
      type: string
      pattern: ^[a-zA-Z0-9_.-]+$
      minLength: 1
      maxLength: 256
