openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: braket
  x-aws-serviceName: braket
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2019-09-01'
  title: Braket
  description: |-
    The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.

    Additional Resources:

      * [Amazon Braket Developer Guide](https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html)
servers:
- description: The Braket regional endpoint
  url: https://braket.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /job/{jobArn}/cancel:
    put:
      operationId: CancelJob
      description: |-
        Cancels an Amazon Braket job.
      parameters:
      - name: jobArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/JobArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            An error occurred due to a conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The throttling rate limit is met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /quantum-task/{quantumTaskArn}/cancel:
    put:
      operationId: CancelQuantumTask
      description: |-
        Cancels the specified task.
      parameters:
      - name: quantumTaskArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/QuantumTaskArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/String64'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            An error occurred due to a conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The throttling rate limit is met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /job:
    post:
      operationId: CreateJob
      description: |-
        Creates an Amazon Braket job.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/String64'
                algorithmSpecification:
                  $ref: '#/components/schemas/AlgorithmSpecification'
                inputDataConfig:
                  $ref: '#/components/schemas/InputConfigList'
                outputDataConfig:
                  $ref: '#/components/schemas/JobOutputDataConfig'
                checkpointConfig:
                  $ref: '#/components/schemas/JobCheckpointConfig'
                jobName:
                  $ref: '#/components/schemas/String'
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
                stoppingCondition:
                  $ref: '#/components/schemas/JobStoppingCondition'
                instanceConfig:
                  $ref: '#/components/schemas/InstanceConfig'
                hyperParameters:
                  $ref: '#/components/schemas/HyperParameters'
                deviceConfig:
                  $ref: '#/components/schemas/DeviceConfig'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                associations:
                  $ref: '#/components/schemas/Associations'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            An error occurred due to a conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '424':
          description: |-
            The specified device is currently offline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceOfflineException'
        '410':
          description: |-
            The specified device has been retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceRetiredException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '402':
          description: |-
            The request failed because a service quota is exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The throttling rate limit is met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /quantum-task:
    post:
      operationId: CreateQuantumTask
      description: |-
        Creates a quantum task.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/String64'
                deviceArn:
                  $ref: '#/components/schemas/DeviceArn'
                deviceParameters:
                  $ref: '#/components/schemas/JsonValue'
                shots:
                  $ref: '#/components/schemas/Long'
                outputS3Bucket:
                  $ref: '#/components/schemas/String'
                outputS3KeyPrefix:
                  $ref: '#/components/schemas/String'
                action:
                  $ref: '#/components/schemas/JsonValue'
                tags:
                  $ref: '#/components/schemas/TagsMap'
                jobToken:
                  $ref: '#/components/schemas/JobToken'
                associations:
                  $ref: '#/components/schemas/Associations'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '424':
          description: |-
            The specified device is currently offline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceOfflineException'
        '410':
          description: |-
            The specified device has been retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceRetiredException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '402':
          description: |-
            The request failed because a service quota is exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The throttling rate limit is met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /device/{deviceArn}:
    get:
      operationId: GetDevice
      description: |-
        Retrieves the devices available in Amazon Braket.

        For backwards compatibility with older versions of BraketSchemas, OpenQASM information is omitted from GetDevice API calls. To get this information the user-agent needs to present a recent version of the BraketSchemas (1.8.0 or later). The Braket SDK automatically reports this for you. If you do not see OpenQASM results in the GetDevice response when using a Braket SDK, you may need to set AWS_EXECUTION_ENV environment variable to configure user-agent. See the code examples provided below for how to do this for the AWS CLI, Boto3, and the Go, Java, and JavaScript/TypeScript SDKs.
      parameters:
      - name: deviceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DeviceArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The throttling rate limit is met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /job/{jobArn}:
    get:
      operationId: GetJob
      description: |-
        Retrieves the specified Amazon Braket job.
      parameters:
      - name: jobArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/JobArn'
      - name: additionalAttributeNames
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/HybridJobAdditionalAttributeNamesList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The throttling rate limit is met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /quantum-task/{quantumTaskArn}:
    get:
      operationId: GetQuantumTask
      description: |-
        Retrieves the specified quantum task.
      parameters:
      - name: quantumTaskArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/QuantumTaskArn'
      - name: additionalAttributeNames
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/QuantumTaskAdditionalAttributeNamesList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The throttling rate limit is met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Shows the tags associated with this resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Add a tag to the specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '200': {}
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Remove tags from a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeys'
      responses:
        '200': {}
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '404':
          description: |-
            The specified resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /devices:
    post:
      operationId: SearchDevices
      description: |-
        Searches for devices using the specified filters.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  $ref: '#/components/schemas/String'
                maxResults:
                  $ref: '#/components/schemas/Integer'
                filters:
                  $ref: '#/components/schemas/SearchDevicesFilterList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '429':
          description: |-
            The throttling rate limit is met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /jobs:
    post:
      operationId: SearchJobs
      description: |-
        Searches for Amazon Braket jobs that match the specified filter values.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  $ref: '#/components/schemas/String'
                maxResults:
                  $ref: '#/components/schemas/Integer'
                filters:
                  $ref: '#/components/schemas/SearchJobsFilterList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '429':
          description: |-
            The throttling rate limit is met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /quantum-tasks:
    post:
      operationId: SearchQuantumTasks
      description: |-
        Searches for tasks that match the specified filter values.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  $ref: '#/components/schemas/String'
                maxResults:
                  $ref: '#/components/schemas/Integer'
                filters:
                  $ref: '#/components/schemas/SearchQuantumTasksFilterList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception, or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceException'
        '429':
          description: |-
            The throttling rate limit is met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: You do not have sufficient access to perform this action.
    AlgorithmSpecification:
      type: object
      properties:
        scriptModeConfig:
          allOf:
          - $ref: '#/components/schemas/ScriptModeConfig'
          description: Configures the paths to the Python scripts used for entry and
            training.
        containerImage:
          allOf:
          - $ref: '#/components/schemas/ContainerImage'
          description: The container image used to create an Amazon Braket job.
      description: Defines the Amazon Braket job to be created. Specifies the container
        image the job uses and the paths to the Python scripts used for entry and
        training.
    Association:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/BraketResourceArn'
          description: The Amazon Braket resource arn.
        type:
          allOf:
          - $ref: '#/components/schemas/AssociationType'
          description: The association type for the specified Amazon Braket resource
            arn.
      required:
      - arn
      - type
      description: The Amazon Braket resource and the association type.
    AssociationType:
      type: string
      enum:
      - RESERVATION_TIME_WINDOW_ARN
    Associations:
      type: array
      items:
        $ref: '#/components/schemas/Association'
    BraketResourceArn:
      type: string
      pattern: ^arn:aws[a-z\-]*:braket:[a-z0-9\-]*:[0-9]{12}:.*$
    CancelJobRequest:
      type: object
      properties:
        jobArn:
          allOf:
          - $ref: '#/components/schemas/JobArn'
          description: The ARN of the Amazon Braket job to cancel.
      required:
      - jobArn
    CancelJobResponse:
      type: object
      properties:
        jobArn:
          allOf:
          - $ref: '#/components/schemas/JobArn'
          description: The ARN of the Amazon Braket job.
        cancellationStatus:
          allOf:
          - $ref: '#/components/schemas/CancellationStatus'
          description: The status of the job cancellation request.
      required:
      - jobArn
      - cancellationStatus
    CancelQuantumTaskRequest:
      type: object
      properties:
        quantumTaskArn:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskArn'
          description: The ARN of the task to cancel.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String64'
          description: The client token associated with the request.
      required:
      - quantumTaskArn
      - clientToken
    CancelQuantumTaskResponse:
      type: object
      properties:
        quantumTaskArn:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskArn'
          description: The ARN of the task.
        cancellationStatus:
          allOf:
          - $ref: '#/components/schemas/CancellationStatus'
          description: The status of the cancellation request.
      required:
      - quantumTaskArn
      - cancellationStatus
    CancellationStatus:
      type: string
      enum:
      - CANCELLING
      - CANCELLED
    CompressionType:
      type: string
      enum:
      - NONE
      - GZIP
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: An error occurred due to a conflict.
    ContainerImage:
      type: object
      properties:
        uri:
          allOf:
          - $ref: '#/components/schemas/Uri'
          description: The URI locating the container image.
      required:
      - uri
      description: The container image used to create an Amazon Braket job.
    CreateJobRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String64'
          description: A unique token that guarantees that the call to this API is
            idempotent.
        algorithmSpecification:
          allOf:
          - $ref: '#/components/schemas/AlgorithmSpecification'
          description: Definition of the Amazon Braket job to be created. Specifies
            the container image the job uses and information about the Python scripts
            used for entry and training.
        inputDataConfig:
          allOf:
          - $ref: '#/components/schemas/InputConfigList'
          description: A list of parameters that specify the name and type of input
            data and where it is located.
        outputDataConfig:
          allOf:
          - $ref: '#/components/schemas/JobOutputDataConfig'
          description: The path to the S3 location where you want to store job artifacts
            and the encryption key used to store them.
        checkpointConfig:
          allOf:
          - $ref: '#/components/schemas/JobCheckpointConfig'
          description: Information about the output locations for job checkpoint data.
        jobName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon Braket job.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that Amazon Braket
            can assume to perform tasks on behalf of a user. It can access user resources,
            run an Amazon Braket job container on behalf of user, and output resources
            to the users' s3 buckets.
        stoppingCondition:
          allOf:
          - $ref: '#/components/schemas/JobStoppingCondition'
          description: The user-defined criteria that specifies when a job stops running.
        instanceConfig:
          allOf:
          - $ref: '#/components/schemas/InstanceConfig'
          description: Configuration of the resource instances to use while running
            the hybrid job on Amazon Braket.
        hyperParameters:
          allOf:
          - $ref: '#/components/schemas/HyperParameters'
          description: Algorithm-specific parameters used by an Amazon Braket job
            that influence the quality of the training job. The values are set with
            a string of JSON key:value pairs, where the key is the name of the hyperparameter
            and the value is the value of th hyperparameter.
        deviceConfig:
          allOf:
          - $ref: '#/components/schemas/DeviceConfig'
          description: The quantum processing unit (QPU) or simulator used to create
            an Amazon Braket job.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A tag object that consists of a key and an optional value,
            used to manage metadata for Amazon Braket resources.
        associations:
          allOf:
          - $ref: '#/components/schemas/Associations'
          description: The list of Amazon Braket resources associated with the hybrid
            job.
      required:
      - clientToken
      - algorithmSpecification
      - outputDataConfig
      - jobName
      - roleArn
      - instanceConfig
      - deviceConfig
    CreateJobResponse:
      type: object
      properties:
        jobArn:
          allOf:
          - $ref: '#/components/schemas/JobArn'
          description: The ARN of the Amazon Braket job created.
      required:
      - jobArn
    CreateQuantumTaskRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String64'
          description: The client token associated with the request.
        deviceArn:
          allOf:
          - $ref: '#/components/schemas/DeviceArn'
          description: The ARN of the device to run the task on.
        deviceParameters:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: The parameters for the device to run the task on.
        shots:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of shots to use for the task.
        outputS3Bucket:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The S3 bucket to store task result files in.
        outputS3KeyPrefix:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key prefix for the location in the S3 bucket to store task
            results in.
        action:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: The action associated with the task.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Tags to be added to the quantum task you're creating.
        jobToken:
          allOf:
          - $ref: '#/components/schemas/JobToken'
          description: The token for an Amazon Braket job that associates it with
            the quantum task.
        associations:
          allOf:
          - $ref: '#/components/schemas/Associations'
          description: The list of Amazon Braket resources associated with the quantum
            task.
      required:
      - clientToken
      - deviceArn
      - shots
      - outputS3Bucket
      - outputS3KeyPrefix
      - action
    CreateQuantumTaskResponse:
      type: object
      properties:
        quantumTaskArn:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskArn'
          description: The ARN of the task created by the request.
      required:
      - quantumTaskArn
    DataSource:
      type: object
      properties:
        s3DataSource:
          allOf:
          - $ref: '#/components/schemas/S3DataSource'
          description: Information about the data stored in Amazon S3 used by the
            Amazon Braket job.
      required:
      - s3DataSource
      description: Information about the source of the data used by the Amazon Braket
        job.
    DeviceArn:
      type: string
      minLength: 1
      maxLength: 256
    DeviceConfig:
      type: object
      properties:
        device:
          allOf:
          - $ref: '#/components/schemas/String256'
          description: The primary quantum processing unit (QPU) or simulator used
            to create and run an Amazon Braket job.
      required:
      - device
      description: Configures the quantum processing units (QPUs) or simulator used
        to create and run an Amazon Braket job.
    DeviceOfflineException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The specified device is currently offline.
    DeviceQueueInfo:
      type: object
      properties:
        queue:
          allOf:
          - $ref: '#/components/schemas/QueueName'
          description: The name of the queue.
        queueSize:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The number of jobs or tasks in the queue for a given device.
        queuePriority:
          allOf:
          - $ref: '#/components/schemas/QueuePriority'
          description: Optional. Specifies the priority of the queue. Tasks in a priority
            queue are processed before the tasks in a normal queue.
      required:
      - queue
      - queueSize
      description: Information about tasks and jobs queued on a device.
    DeviceQueueInfoList:
      type: array
      items:
        $ref: '#/components/schemas/DeviceQueueInfo'
    DeviceRetiredException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The specified device has been retired.
    DeviceStatus:
      type: string
      enum:
      - ONLINE
      - OFFLINE
      - RETIRED
    DeviceSummary:
      type: object
      properties:
        deviceArn:
          allOf:
          - $ref: '#/components/schemas/DeviceArn'
          description: The ARN of the device.
        deviceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the device.
        providerName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The provider of the device.
        deviceType:
          allOf:
          - $ref: '#/components/schemas/DeviceType'
          description: The type of the device.
        deviceStatus:
          allOf:
          - $ref: '#/components/schemas/DeviceStatus'
          description: The status of the device.
      required:
      - deviceArn
      - deviceName
      - providerName
      - deviceType
      - deviceStatus
      description: Includes information about the device.
    DeviceSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/DeviceSummary'
    DeviceType:
      type: string
      enum:
      - QPU
      - SIMULATOR
    GetDeviceRequest:
      type: object
      properties:
        deviceArn:
          allOf:
          - $ref: '#/components/schemas/DeviceArn'
          description: The ARN of the device to retrieve.
      required:
      - deviceArn
    GetDeviceResponse:
      type: object
      properties:
        deviceArn:
          allOf:
          - $ref: '#/components/schemas/DeviceArn'
          description: The ARN of the device.
        deviceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the device.
        providerName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the partner company for the device.
        deviceType:
          allOf:
          - $ref: '#/components/schemas/DeviceType'
          description: The type of the device.
        deviceStatus:
          allOf:
          - $ref: '#/components/schemas/DeviceStatus'
          description: The status of the device.
        deviceCapabilities:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: Details about the capabilities of the device.
        deviceQueueInfo:
          allOf:
          - $ref: '#/components/schemas/DeviceQueueInfoList'
          description: List of information about tasks and jobs queued on a device.
      required:
      - deviceArn
      - deviceName
      - providerName
      - deviceType
      - deviceStatus
      - deviceCapabilities
    GetJobRequest:
      type: object
      properties:
        jobArn:
          allOf:
          - $ref: '#/components/schemas/JobArn'
          description: The ARN of the job to retrieve.
        additionalAttributeNames:
          allOf:
          - $ref: '#/components/schemas/HybridJobAdditionalAttributeNamesList'
          description: A list of attributes to return information for.
      required:
      - jobArn
    GetJobResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/JobPrimaryStatus'
          description: The status of the Amazon Braket job.
        jobArn:
          allOf:
          - $ref: '#/components/schemas/JobArn'
          description: The ARN of the Amazon Braket job.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that Amazon Braket
            can assume to perform tasks on behalf of a user. It can access user resources,
            run an Amazon Braket job container on behalf of user, and output resources
            to the s3 buckets of a user.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String1024'
          description: A description of the reason why an Amazon Braket job failed,
            if it failed.
        jobName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon Braket job.
        hyperParameters:
          allOf:
          - $ref: '#/components/schemas/HyperParameters'
          description: Algorithm-specific parameters used by an Amazon Braket job
            that influence the quality of the traiing job. The values are set with
            a string of JSON key:value pairs, where the key is the name of the hyperparameter
            and the value is the value of th hyperparameter.
        inputDataConfig:
          allOf:
          - $ref: '#/components/schemas/InputConfigList'
          description: A list of parameters that specify the name and type of input
            data and where it is located.
        outputDataConfig:
          allOf:
          - $ref: '#/components/schemas/JobOutputDataConfig'
          description: The path to the S3 location where job artifacts are stored
            and the encryption key used to store them there.
        stoppingCondition:
          allOf:
          - $ref: '#/components/schemas/JobStoppingCondition'
          description: The user-defined criteria that specifies when to stop a job
            running.
        checkpointConfig:
          allOf:
          - $ref: '#/components/schemas/JobCheckpointConfig'
          description: Information about the output locations for job checkpoint data.
        algorithmSpecification:
          allOf:
          - $ref: '#/components/schemas/AlgorithmSpecification'
          description: Definition of the Amazon Braket job created. Specifies the
            container image the job uses, information about the Python scripts used
            for entry and training, and the user-defined metrics used to evaluation
            the job.
        instanceConfig:
          allOf:
          - $ref: '#/components/schemas/InstanceConfig'
          description: The resource instances to use while running the hybrid job
            on Amazon Braket.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the Amazon Braket job was created.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the Amazon Braket job was started.
        endedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the Amazon Braket job ended.
        billableDuration:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The billable time the Amazon Braket job used to complete.
        deviceConfig:
          allOf:
          - $ref: '#/components/schemas/DeviceConfig'
          description: The quantum processing unit (QPU) or simulator used to run
            the Amazon Braket job.
        events:
          allOf:
          - $ref: '#/components/schemas/JobEvents'
          description: Details about the type and time events occurred related to
            the Amazon Braket job.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A tag object that consists of a key and an optional value,
            used to manage metadata for Amazon Braket resources.
        queueInfo:
          allOf:
          - $ref: '#/components/schemas/HybridJobQueueInfo'
          description: Queue information for the requested job. Only returned if `QueueInfo`
            is specified in the `additionalAttributeNames"` field in the `GetJob`
            API request.
        associations:
          allOf:
          - $ref: '#/components/schemas/Associations'
          description: The list of Amazon Braket resources associated with the hybrid
            job.
      required:
      - status
      - jobArn
      - roleArn
      - jobName
      - outputDataConfig
      - algorithmSpecification
      - instanceConfig
      - createdAt
    GetQuantumTaskRequest:
      type: object
      properties:
        quantumTaskArn:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskArn'
          description: The ARN of the task to retrieve.
        additionalAttributeNames:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskAdditionalAttributeNamesList'
          description: A list of attributes to return information for.
      required:
      - quantumTaskArn
    GetQuantumTaskResponse:
      type: object
      properties:
        quantumTaskArn:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskArn'
          description: The ARN of the task.
        status:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskStatus'
          description: The status of the task.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that a task failed.
        deviceArn:
          allOf:
          - $ref: '#/components/schemas/DeviceArn'
          description: The ARN of the device the task was run on.
        deviceParameters:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: The parameters for the device on which the task ran.
        shots:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of shots used in the task.
        outputS3Bucket:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The S3 bucket where task results are stored.
        outputS3Directory:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The folder in the S3 bucket where task results are stored.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the task was created.
        endedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the task ended.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: The tags that belong to this task.
        jobArn:
          allOf:
          - $ref: '#/components/schemas/JobArn'
          description: The ARN of the Amazon Braket job associated with the quantum
            task.
        queueInfo:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskQueueInfo'
          description: Queue information for the requested quantum task. Only returned
            if `QueueInfo` is specified in the `additionalAttributeNames"` field in
            the `GetQuantumTask` API request.
        associations:
          allOf:
          - $ref: '#/components/schemas/Associations'
          description: The list of Amazon Braket resources associated with the quantum
            task.
      required:
      - quantumTaskArn
      - status
      - deviceArn
      - deviceParameters
      - shots
      - outputS3Bucket
      - outputS3Directory
      - createdAt
    HybridJobAdditionalAttributeName:
      type: string
      enum:
      - QueueInfo
    HybridJobAdditionalAttributeNamesList:
      type: array
      items:
        $ref: '#/components/schemas/HybridJobAdditionalAttributeName'
    HybridJobQueueInfo:
      type: object
      properties:
        queue:
          allOf:
          - $ref: '#/components/schemas/QueueName'
          description: The name of the queue.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Current position of the job in the jobs queue.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Optional. Provides more information about the queue position.
            For example, if the job is complete and no longer in the queue, the message
            field contains that information.
      required:
      - queue
      - position
      description: Information about the queue for a specified job.
    HyperParameters:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    InputConfigList:
      type: array
      items:
        $ref: '#/components/schemas/InputFileConfig'
    InputFileConfig:
      type: object
      properties:
        channelName:
          allOf:
          - $ref: '#/components/schemas/String64'
          description: A named input source that an Amazon Braket job can consume.
        contentType:
          allOf:
          - $ref: '#/components/schemas/String256'
          description: The MIME type of the data.
        dataSource:
          allOf:
          - $ref: '#/components/schemas/DataSource'
          description: The location of the channel data.
      required:
      - channelName
      - dataSource
      description: A list of parameters that specify the input channels, type of input
        data, and where it is located.
    InstanceConfig:
      type: object
      properties:
        instanceType:
          allOf:
          - $ref: '#/components/schemas/InstanceType'
          description: Configures the type resource instances to use while running
            an Amazon Braket hybrid job.
        volumeSizeInGb:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The size of the storage volume, in GB, that user wants to provision.
        instanceCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Configures the number of resource instances to use while running
            an Amazon Braket job on Amazon Braket. The default value is 1.
      required:
      - instanceType
      - volumeSizeInGb
      description: Configures the resource instances to use while running the Amazon
        Braket hybrid job on Amazon Braket.
    InstanceType:
      type: string
      enum:
      - ml.m4.xlarge
      - ml.m4.2xlarge
      - ml.m4.4xlarge
      - ml.m4.10xlarge
      - ml.m4.16xlarge
      - ml.g4dn.xlarge
      - ml.g4dn.2xlarge
      - ml.g4dn.4xlarge
      - ml.g4dn.8xlarge
      - ml.g4dn.12xlarge
      - ml.g4dn.16xlarge
      - ml.m5.large
      - ml.m5.xlarge
      - ml.m5.2xlarge
      - ml.m5.4xlarge
      - ml.m5.12xlarge
      - ml.m5.24xlarge
      - ml.c4.xlarge
      - ml.c4.2xlarge
      - ml.c4.4xlarge
      - ml.c4.8xlarge
      - ml.p2.xlarge
      - ml.p2.8xlarge
      - ml.p2.16xlarge
      - ml.p3.2xlarge
      - ml.p3.8xlarge
      - ml.p3.16xlarge
      - ml.p3dn.24xlarge
      - ml.p4d.24xlarge
      - ml.c5.xlarge
      - ml.c5.2xlarge
      - ml.c5.4xlarge
      - ml.c5.9xlarge
      - ml.c5.18xlarge
      - ml.c5n.xlarge
      - ml.c5n.2xlarge
      - ml.c5n.4xlarge
      - ml.c5n.9xlarge
      - ml.c5n.18xlarge
    InternalServiceException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request processing has failed because of an unknown error,
        exception, or failure.
    JobArn:
      type: string
      pattern: ^arn:aws[a-z\-]*:braket:[a-z0-9\-]+:[0-9]{12}:job/.*$
    JobCheckpointConfig:
      type: object
      properties:
        localPath:
          allOf:
          - $ref: '#/components/schemas/String4096'
          description: (Optional) The local directory where checkpoints are written.
            The default directory is `/opt/braket/checkpoints/`.
        s3Uri:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: Identifies the S3 path where you want Amazon Braket to store
            checkpoints. For example, `s3://bucket-name/key-name-prefix`.
      required:
      - s3Uri
      description: Contains information about the output locations for job checkpoint
        data.
    JobEventDetails:
      type: object
      properties:
        eventType:
          allOf:
          - $ref: '#/components/schemas/JobEventType'
          description: The type of event that occurred related to the Amazon Braket
            job.
        timeOfEvent:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The type of event that occurred related to the Amazon Braket
            job.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A message describing the event that occurred related to the
            Amazon Braket job.
      description: Details about the type and time events occurred related to the
        Amazon Braket job.
    JobEventType:
      type: string
      enum:
      - WAITING_FOR_PRIORITY
      - QUEUED_FOR_EXECUTION
      - STARTING_INSTANCE
      - DOWNLOADING_DATA
      - RUNNING
      - DEPRIORITIZED_DUE_TO_INACTIVITY
      - UPLOADING_RESULTS
      - COMPLETED
      - FAILED
      - MAX_RUNTIME_EXCEEDED
      - CANCELLED
    JobEvents:
      type: array
      items:
        $ref: '#/components/schemas/JobEventDetails'
    JobOutputDataConfig:
      type: object
      properties:
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/String2048'
          description: The AWS Key Management Service (AWS KMS) key that Amazon Braket
            uses to encrypt the job training artifacts at rest using Amazon S3 server-side
            encryption.
        s3Path:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: Identifies the S3 path where you want Amazon Braket to store
            the job training artifacts. For example, `s3://bucket-name/key-name-prefix`.
      required:
      - s3Path
      description: Specifies the path to the S3 location where you want to store job
        artifacts and the encryption key used to store them.
    JobPrimaryStatus:
      type: string
      enum:
      - QUEUED
      - RUNNING
      - COMPLETED
      - FAILED
      - CANCELLING
      - CANCELLED
    JobStoppingCondition:
      type: object
      properties:
        maxRuntimeInSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum length of time, in seconds, that an Amazon Braket
            job can run.
      description: Specifies limits for how long an Amazon Braket job can run.
    JobSummary:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/JobPrimaryStatus'
          description: The status of the Amazon Braket job.
        jobArn:
          allOf:
          - $ref: '#/components/schemas/JobArn'
          description: The ARN of the Amazon Braket job.
        jobName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Amazon Braket job.
        device:
          allOf:
          - $ref: '#/components/schemas/String256'
          description: Provides summary information about the primary device used
            by an Amazon Braket job.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the Amazon Braket job was created.
        startedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the Amazon Braket job was started.
        endedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the Amazon Braket job ended.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A tag object that consists of a key and an optional value,
            used to manage metadata for Amazon Braket resources.
      required:
      - status
      - jobArn
      - jobName
      - device
      - createdAt
      description: Provides summary information about an Amazon Braket job.
    JobSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/JobSummary'
    JobToken:
      type: string
      minLength: 1
      maxLength: 128
    JsonValue:
      type: string
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the `resourceArn` for the resource whose tags to display.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Displays the key, value pairs of tags associated with this
            resource.
    QuantumTaskAdditionalAttributeName:
      type: string
      enum:
      - QueueInfo
    QuantumTaskAdditionalAttributeNamesList:
      type: array
      items:
        $ref: '#/components/schemas/QuantumTaskAdditionalAttributeName'
    QuantumTaskArn:
      type: string
      minLength: 0
      maxLength: 256
    QuantumTaskQueueInfo:
      type: object
      properties:
        queue:
          allOf:
          - $ref: '#/components/schemas/QueueName'
          description: The name of the queue.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Current position of the task in the quantum tasks queue.
        queuePriority:
          allOf:
          - $ref: '#/components/schemas/QueuePriority'
          description: Optional. Specifies the priority of the queue. Quantum tasks
            in a priority queue are processed before the tasks in a normal queue.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Optional. Provides more information about the queue position.
            For example, if the task is complete and no longer in the queue, the message
            field contains that information.
      required:
      - queue
      - position
      description: Information about the queue for the specified quantum task.
    QuantumTaskStatus:
      type: string
      enum:
      - CREATED
      - QUEUED
      - RUNNING
      - COMPLETED
      - FAILED
      - CANCELLING
      - CANCELLED
    QuantumTaskSummary:
      type: object
      properties:
        quantumTaskArn:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskArn'
          description: The ARN of the task.
        status:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskStatus'
          description: The status of the task.
        deviceArn:
          allOf:
          - $ref: '#/components/schemas/DeviceArn'
          description: The ARN of the device the task ran on.
        shots:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The shots used for the task.
        outputS3Bucket:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The S3 bucket where the task result file is stored..
        outputS3Directory:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The folder in the S3 bucket where the task result file is stored.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the task was created.
        endedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time at which the task finished.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Displays the key, value pairs of tags associated with this
            quantum task.
      required:
      - quantumTaskArn
      - status
      - deviceArn
      - shots
      - outputS3Bucket
      - outputS3Directory
      - createdAt
      description: Includes information about a quantum task.
    QuantumTaskSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/QuantumTaskSummary'
    QueueName:
      type: string
      enum:
      - QUANTUM_TASKS_QUEUE
      - JOBS_QUEUE
    QueuePriority:
      type: string
      enum:
      - Normal
      - Priority
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The specified resource was not found.
    RoleArn:
      type: string
      pattern: ^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
    S3DataSource:
      type: object
      properties:
        s3Uri:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: Depending on the value specified for the `S3DataType`, identifies
            either a key name prefix or a manifest that locates the S3 data source.
      required:
      - s3Uri
      description: Information about the data stored in Amazon S3 used by the Amazon
        Braket job.
    S3Path:
      type: string
      pattern: ^(https|s3)://([^/]+)/?(.*)$
      maxLength: 1024
    ScriptModeConfig:
      type: object
      properties:
        entryPoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The path to the Python script that serves as the entry point
            for an Amazon Braket job.
        s3Uri:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: The URI that specifies the S3 path to the Python script module
            that contains the training script used by an Amazon Braket job.
        compressionType:
          allOf:
          - $ref: '#/components/schemas/CompressionType'
          description: The type of compression used by the Python scripts for an Amazon
            Braket job.
      required:
      - entryPoint
      - s3Uri
      description: Contains information about the Python scripts used for entry and
        by an Amazon Braket job.
    SearchDevicesFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name to use to filter results.
        values:
          allOf:
          - $ref: '#/components/schemas/String256List'
          description: The values to use to filter results.
      required:
      - name
      - values
      description: The filter to use for searching devices.
    SearchDevicesFilterList:
      type: array
      items:
        $ref: '#/components/schemas/SearchDevicesFilter'
    SearchDevicesRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A token used for pagination of results returned in the response.
            Use the token returned from the previous request continue results where
            the previous request ended.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to return in the response.
        filters:
          allOf:
          - $ref: '#/components/schemas/SearchDevicesFilterList'
          description: The filter values to use to search for a device.
      required:
      - filters
    SearchDevicesResponse:
      type: object
      properties:
        devices:
          allOf:
          - $ref: '#/components/schemas/DeviceSummaryList'
          description: An array of `DeviceSummary` objects for devices that match
            the specified filter values.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A token used for pagination of results, or null if there are
            no additional results. Use the token value in a subsequent request to
            continue results where the previous request ended.
      required:
      - devices
    SearchJobsFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String64'
          description: The name to use for the jobs filter.
        values:
          allOf:
          - $ref: '#/components/schemas/String256List'
          description: The values to use for the jobs filter.
        operator:
          allOf:
          - $ref: '#/components/schemas/SearchJobsFilterOperator'
          description: An operator to use for the jobs filter.
      required:
      - name
      - values
      - operator
      description: A filter used to search for Amazon Braket jobs.
    SearchJobsFilterList:
      type: array
      items:
        $ref: '#/components/schemas/SearchJobsFilter'
    SearchJobsFilterOperator:
      type: string
      enum:
      - LT
      - LTE
      - EQUAL
      - GT
      - GTE
      - BETWEEN
      - CONTAINS
    SearchJobsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A token used for pagination of results returned in the response.
            Use the token returned from the previous request to continue results where
            the previous request ended.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to return in the response.
        filters:
          allOf:
          - $ref: '#/components/schemas/SearchJobsFilterList'
          description: The filter values to use when searching for a job.
      required:
      - filters
    SearchJobsResponse:
      type: object
      properties:
        jobs:
          allOf:
          - $ref: '#/components/schemas/JobSummaryList'
          description: An array of `JobSummary` objects for devices that match the
            specified filter values.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A token used for pagination of results, or `null` if there
            are no additional results. Use the token value in a subsequent request
            to continue results where the previous request ended.
      required:
      - jobs
    SearchQuantumTasksFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String64'
          description: The name of the device used for the task.
        values:
          allOf:
          - $ref: '#/components/schemas/String256List'
          description: The values to use for the filter.
        operator:
          allOf:
          - $ref: '#/components/schemas/SearchQuantumTasksFilterOperator'
          description: An operator to use in the filter.
      required:
      - name
      - values
      - operator
      description: A filter to use to search for tasks.
    SearchQuantumTasksFilterList:
      type: array
      items:
        $ref: '#/components/schemas/SearchQuantumTasksFilter'
    SearchQuantumTasksFilterOperator:
      type: string
      enum:
      - LT
      - LTE
      - EQUAL
      - GT
      - GTE
      - BETWEEN
    SearchQuantumTasksRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A token used for pagination of results returned in the response.
            Use the token returned from the previous request continue results where
            the previous request ended.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Maximum number of results to return in the response.
        filters:
          allOf:
          - $ref: '#/components/schemas/SearchQuantumTasksFilterList'
          description: Array of `SearchQuantumTasksFilter` objects.
      required:
      - filters
    SearchQuantumTasksResponse:
      type: object
      properties:
        quantumTasks:
          allOf:
          - $ref: '#/components/schemas/QuantumTaskSummaryList'
          description: An array of `QuantumTaskSummary` objects for tasks that match
            the specified filters.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A token used for pagination of results, or null if there are
            no additional results. Use the token value in a subsequent request to
            continue results where the previous request ended.
      required:
      - quantumTasks
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request failed because a service quota is exceeded.
    String1024:
      type: string
      minLength: 1
      maxLength: 1024
    String2048:
      type: string
      minLength: 1
      maxLength: 2048
    String256:
      type: string
      minLength: 1
      maxLength: 256
    String256List:
      type: array
      items:
        $ref: '#/components/schemas/String256'
    String4096:
      type: string
      minLength: 1
      maxLength: 4096
    String64:
      type: string
      minLength: 1
      maxLength: 64
    TagKeys:
      type: array
      items:
        type: string
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the `resourceArn` of the resource to which a tag will
            be added.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: Specify the tags to add to the resource.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The throttling rate limit is met.
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the `resourceArn` for the resource from which to remove
            the tags.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeys'
          description: Specify the keys for the tags to remove from the resource.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    Uri:
      type: string
      pattern: \d{10,14}\.dkr\.ecr.[a-z0-9-]+\.amazonaws\.com\/.+(@sha256)?:.+
      minLength: 1
      maxLength: 255
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The input fails to satisfy the constraints specified by an AWS
        service.
