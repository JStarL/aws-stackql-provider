openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: ivschat
  x-aws-serviceName: ivschat
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-05'
  version: '2020-07-14'
  title: Amazon Interactive Video Service Chat
  description: "**Introduction**\n\nThe Amazon IVS Chat control-plane API enables\
    \ you to create and manage Amazon IVS Chat resources. You also need to integrate\
    \ with the [ Amazon IVS Chat Messaging API](https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/chat-messaging-api.html),\
    \ to enable users to interact with chat rooms in real time.\n\nThe API is an AWS\
    \ regional service. For a list of supported regions and Amazon IVS Chat HTTPS\
    \ service endpoints, see the Amazon IVS Chat information on the [Amazon IVS page](https://docs.aws.amazon.com/general/latest/gr/ivs.html)\
    \ in the _AWS General Reference_.\n\nThis document describes HTTP operations.\
    \ There is a separate _messaging_ API for managing Chat resources; see the [ Amazon\
    \ IVS Chat Messaging API Reference](https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/chat-messaging-api.html).\n\
    \n**Notes on terminology:**\n\n  * You create service applications using the Amazon\
    \ IVS Chat API. We refer to these as _applications_.\n\n  * You create front-end\
    \ client applications (browser and Android/iOS apps) using the Amazon IVS Chat\
    \ Messaging API. We refer to these as _clients_. \n\n**Resources**\n\nThe following\
    \ resources are part of Amazon IVS Chat:\n\n  * **LoggingConfiguration** — A configuration\
    \ that allows customers to store and record sent messages in a chat room. See\
    \ the Logging Configuration endpoints for more information.\n\n  * **Room** —\
    \ The central Amazon IVS Chat resource through which clients connect to and exchange\
    \ chat messages. See the Room endpoints for more information.\n\n**Tagging**\n\
    \nA _tag_ is a metadata label that you assign to an AWS resource. A tag comprises\
    \ a _key_ and a _value_ , both set by you. For example, you might set a tag as\
    \ `topic:nature` to label a particular video category. See [Best practices and\
    \ strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)\
    \ in _Tagging Amazon Web Services Resources and Tag Editor_ for details, including\
    \ restrictions that apply to tags and \"Tag naming limits and requirements\";\
    \ Amazon IVS Chat has no service-specific constraints beyond what is documented\
    \ there.\n\nTags can help you identify and organize your AWS resources. For example,\
    \ you can use the same tag for different resources to indicate that they are related.\
    \ You can also use tags to manage access (see [Access Tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html)).\n\
    \nThe Amazon IVS Chat API has these tag-related operations: TagResource, UntagResource,\
    \ and ListTagsForResource. The following resource supports tagging: Room.\n\n\
    At most 50 tags can be applied to a resource.\n\n**API Access Security**\n\nYour\
    \ Amazon IVS Chat applications (service applications and clients) must be authenticated\
    \ and authorized to access Amazon IVS Chat resources. Note the differences between\
    \ these concepts:\n\n  * _Authentication_ is about verifying identity. Requests\
    \ to the Amazon IVS Chat API must be signed to verify your identity.\n\n  * _Authorization_\
    \ is about granting permissions. Your IAM roles need to have permissions for Amazon\
    \ IVS Chat API requests.\n\nUsers (viewers) connect to a room using secure access\
    \ tokens that you create using the CreateChatToken operation through the AWS SDK.\
    \ You call CreateChatToken for every user’s chat session, passing identity and\
    \ authorization information about the user.\n\n**Signing API Requests**\n\nHTTP\
    \ API requests must be signed with an AWS SigV4 signature using your AWS security\
    \ credentials. The AWS Command Line Interface (CLI) and the AWS SDKs take care\
    \ of signing the underlying API calls for you. However, if your application calls\
    \ the Amazon IVS Chat HTTP API directly, it’s your responsibility to sign the\
    \ requests.\n\nYou generate a signature using valid AWS credentials for an IAM\
    \ role that has permission to perform the requested action. For example, DeleteMessage\
    \ requests must be made using an IAM role that has the `ivschat:DeleteMessage`\
    \ permission.\n\nFor more information:\n\n  * Authentication and generating signatures\
    \ — See [Authenticating Requests (Amazon Web Services Signature Version 4)](https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html)\
    \ in the _Amazon Web Services General Reference_.\n\n  * Managing Amazon IVS permissions\
    \ — See [Identity and Access Management](https://docs.aws.amazon.com/ivs/latest/userguide/security-iam.html)\
    \ on the Security page of the _Amazon IVS User Guide_.\n\n**Amazon Resource Names\
    \ (ARNs)**\n\nARNs uniquely identify AWS resources. An ARN is required when you\
    \ need to specify a resource unambiguously across all of AWS, such as in IAM policies\
    \ and API calls. For more information, see [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)\
    \ in the _AWS General Reference_."
servers:
- description: The Amazon Interactive Video Service Chat regional endpoint
  url: https://ivschat.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths: {}
components:
  schemas:
    BucketName:
      type: string
      pattern: ^[a-z0-9-.]+$
      minLength: 3
      maxLength: 63
    ChatToken:
      type: string
    ChatTokenAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    ChatTokenCapabilities:
      type: array
      items:
        $ref: '#/components/schemas/ChatTokenCapability'
    ChatTokenCapability:
      type: string
      enum:
      - SEND_MESSAGE
      - DISCONNECT_USER
      - DELETE_MESSAGE
    CreateLoggingConfigurationState:
      type: string
      enum:
      - ACTIVE
    DeliveryStreamName:
      type: string
      pattern: ^[a-zA-Z0-9_.-]+$
      minLength: 1
      maxLength: 64
    DestinationConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/S3DestinationConfiguration'
        description: |-
          An Amazon S3 destination configuration where chat activity will be logged.
      - allOf:
        - $ref: '#/components/schemas/CloudWatchLogsDestinationConfiguration'
        description: |-
          An Amazon CloudWatch Logs destination configuration where chat activity will be logged.
      - allOf:
        - $ref: '#/components/schemas/FirehoseDestinationConfiguration'
        description: |-
          An Amazon Kinesis Data Firehose destination configuration where chat activity will be logged.
      description: |-
        A complex type that describes a location where chat logs will be stored. Each member represents the configuration of one log destination. For logging, you define only one type of destination (for CloudWatch Logs, Kinesis Firehose, or S3).
    ErrorMessage:
      type: string
    EventAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    EventName:
      type: string
      minLength: 1
      maxLength: 100
    FallbackResult:
      type: string
      enum:
      - ALLOW
      - DENY
    FieldName:
      type: string
    ID:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 12
      maxLength: 12
    LambdaArn:
      type: string
      pattern: ^$|^arn:aws:lambda:[a-z0-9-]+:[0-9]{12}:function:.+
      minLength: 0
      maxLength: 170
    Limit:
      type: integer
      default: 0
    LogGroupName:
      type: string
      pattern: ^[\.\-_/#A-Za-z0-9]+$
      minLength: 1
      maxLength: 512
    LoggingConfigurationArn:
      type: string
      pattern: ^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    LoggingConfigurationID:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 12
      maxLength: 12
    LoggingConfigurationIdentifier:
      type: string
      pattern: ^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    LoggingConfigurationIdentifierList:
      type: array
      items:
        $ref: '#/components/schemas/LoggingConfigurationIdentifier'
    LoggingConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/LoggingConfigurationSummary'
    LoggingConfigurationName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      maxLength: 128
    LoggingConfigurationState:
      type: string
      enum:
      - CREATING
      - CREATE_FAILED
      - DELETING
      - DELETE_FAILED
      - UPDATING
      - UPDATE_FAILED
      - ACTIVE
    MaxLoggingConfigurationResults:
      type: integer
      minimum: 1
      maximum: 50
    MaxRoomResults:
      type: integer
      minimum: 1
      maximum: 50
    MessageID:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 12
      maxLength: 12
    PaginationToken:
      type: string
      minLength: 0
      maxLength: 1024
    Reason:
      type: string
      minLength: 1
      maxLength: 256
    ResourceArn:
      type: string
      pattern: ^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    ResourceId:
      type: string
      pattern: ^[a-zA-Z0-9]+$
    ResourceType:
      type: string
      enum:
      - ROOM
    RoomArn:
      type: string
      pattern: ^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    RoomID:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 12
      maxLength: 12
    RoomIdentifier:
      type: string
      pattern: ^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    RoomList:
      type: array
      items:
        $ref: '#/components/schemas/RoomSummary'
    RoomMaxMessageLength:
      type: integer
      minimum: 1
      maximum: 500
    RoomMaxMessageRatePerSecond:
      type: integer
      minimum: 1
      maximum: 100
    RoomName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      maxLength: 128
    SessionDurationInMinutes:
      type: integer
      minimum: 1
      maximum: 180
    String:
      type: string
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tags:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    Time:
      type: string
      format: date-time
    UpdateLoggingConfigurationState:
      type: string
      enum:
      - ACTIVE
    UserID:
      type: string
      minLength: 1
      maxLength: 128
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - UNKNOWN_OPERATION
      - FIELD_VALIDATION_FAILED
      - OTHER
