openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: ivschat
  x-aws-serviceName: ivschat
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-07-14'
  title: Amazon Interactive Video Service Chat
  description: "**Introduction**\n\nThe Amazon IVS Chat control-plane API enables\
    \ you to create and manage Amazon IVS Chat resources. You also need to integrate\
    \ with the [ Amazon IVS Chat Messaging API](https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/chat-messaging-api.html),\
    \ to enable users to interact with chat rooms in real time.\n\nThe API is an AWS\
    \ regional service. For a list of supported regions and Amazon IVS Chat HTTPS\
    \ service endpoints, see the Amazon IVS Chat information on the [Amazon IVS page](https://docs.aws.amazon.com/general/latest/gr/ivs.html)\
    \ in the _AWS General Reference_.\n\nThis document describes HTTP operations.\
    \ There is a separate _messaging_ API for managing Chat resources; see the [ Amazon\
    \ IVS Chat Messaging API Reference](https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/chat-messaging-api.html).\n\
    \n**Notes on terminology:**\n\n  * You create service applications using the Amazon\
    \ IVS Chat API. We refer to these as _applications_.\n\n  * You create front-end\
    \ client applications (browser and Android/iOS apps) using the Amazon IVS Chat\
    \ Messaging API. We refer to these as _clients_. \n\n**Resources**\n\nThe following\
    \ resources are part of Amazon IVS Chat:\n\n  * **LoggingConfiguration** — A configuration\
    \ that allows customers to store and record sent messages in a chat room. See\
    \ the Logging Configuration endpoints for more information.\n\n  * **Room** —\
    \ The central Amazon IVS Chat resource through which clients connect to and exchange\
    \ chat messages. See the Room endpoints for more information.\n\n**Tagging**\n\
    \nA _tag_ is a metadata label that you assign to an AWS resource. A tag comprises\
    \ a _key_ and a _value_ , both set by you. For example, you might set a tag as\
    \ `topic:nature` to label a particular video category. See [Best practices and\
    \ strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)\
    \ in _Tagging Amazon Web Services Resources and Tag Editor_ for details, including\
    \ restrictions that apply to tags and \"Tag naming limits and requirements\";\
    \ Amazon IVS Chat has no service-specific constraints beyond what is documented\
    \ there.\n\nTags can help you identify and organize your AWS resources. For example,\
    \ you can use the same tag for different resources to indicate that they are related.\
    \ You can also use tags to manage access (see [Access Tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html)).\n\
    \nThe Amazon IVS Chat API has these tag-related operations: TagResource, UntagResource,\
    \ and ListTagsForResource. The following resource supports tagging: Room.\n\n\
    At most 50 tags can be applied to a resource.\n\n**API Access Security**\n\nYour\
    \ Amazon IVS Chat applications (service applications and clients) must be authenticated\
    \ and authorized to access Amazon IVS Chat resources. Note the differences between\
    \ these concepts:\n\n  * _Authentication_ is about verifying identity. Requests\
    \ to the Amazon IVS Chat API must be signed to verify your identity.\n\n  * _Authorization_\
    \ is about granting permissions. Your IAM roles need to have permissions for Amazon\
    \ IVS Chat API requests.\n\nUsers (viewers) connect to a room using secure access\
    \ tokens that you create using the CreateChatToken operation through the AWS SDK.\
    \ You call CreateChatToken for every user’s chat session, passing identity and\
    \ authorization information about the user.\n\n**Signing API Requests**\n\nHTTP\
    \ API requests must be signed with an AWS SigV4 signature using your AWS security\
    \ credentials. The AWS Command Line Interface (CLI) and the AWS SDKs take care\
    \ of signing the underlying API calls for you. However, if your application calls\
    \ the Amazon IVS Chat HTTP API directly, it’s your responsibility to sign the\
    \ requests.\n\nYou generate a signature using valid AWS credentials for an IAM\
    \ role that has permission to perform the requested action. For example, DeleteMessage\
    \ requests must be made using an IAM role that has the `ivschat:DeleteMessage`\
    \ permission.\n\nFor more information:\n\n  * Authentication and generating signatures\
    \ — See [Authenticating Requests (Amazon Web Services Signature Version 4)](https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html)\
    \ in the _Amazon Web Services General Reference_.\n\n  * Managing Amazon IVS permissions\
    \ — See [Identity and Access Management](https://docs.aws.amazon.com/ivs/latest/userguide/security-iam.html)\
    \ on the Security page of the _Amazon IVS User Guide_.\n\n**Amazon Resource Names\
    \ (ARNs)**\n\nARNs uniquely identify AWS resources. An ARN is required when you\
    \ need to specify a resource unambiguously across all of AWS, such as in IAM policies\
    \ and API calls. For more information, see [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)\
    \ in the _AWS General Reference_."
servers:
- description: The Amazon Interactive Video Service Chat regional endpoint
  url: https://ivschat.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /CreateChatToken:
    post:
      operationId: CreateChatToken
      description: |-
        Creates an encrypted token that is used by a chat participant to establish an individual WebSocket chat connection to a room. When the token is used to connect to chat, the connection is valid for the session duration specified in the request. The token becomes invalid at the token-expiration timestamp included in the response.

        Use the `capabilities` field to permit an end user to send messages or moderate a room.

        The `attributes` field securely attaches structured data to the chat session; the data is included within each message sent by the end user and received by other participants in the room. Common use cases for attributes include passing end-user profile data like an icon, display name, colors, badges, and other display features.

        Encryption keys are owned by Amazon IVS Chat and never used directly by your application.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomIdentifier:
                  $ref: '#/components/schemas/RoomIdentifier'
                userId:
                  $ref: '#/components/schemas/UserID'
                capabilities:
                  $ref: '#/components/schemas/ChatTokenCapabilities'
                sessionDurationInMinutes:
                  $ref: '#/components/schemas/SessionDurationInMinutes'
                attributes:
                  $ref: '#/components/schemas/ChatTokenAttributes'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CreateLoggingConfiguration:
    post:
      operationId: CreateLoggingConfiguration
      description: |-
        Creates a logging configuration that allows clients to store and record sent messages.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/LoggingConfigurationName'
                destinationConfiguration:
                  $ref: '#/components/schemas/DestinationConfiguration'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /CreateRoom:
    post:
      operationId: CreateRoom
      description: |-
        Creates a room that allows clients to connect and pass messages.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/RoomName'
                maximumMessageRatePerSecond:
                  $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
                maximumMessageLength:
                  $ref: '#/components/schemas/RoomMaxMessageLength'
                messageReviewHandler:
                  $ref: '#/components/schemas/MessageReviewHandler'
                tags:
                  $ref: '#/components/schemas/Tags'
                loggingConfigurationIdentifiers:
                  $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeleteLoggingConfiguration:
    post:
      operationId: DeleteLoggingConfiguration
      description: |-
        Deletes the specified logging configuration.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  $ref: '#/components/schemas/LoggingConfigurationIdentifier'
      responses:
        '204': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeleteMessage:
    post:
      operationId: DeleteMessage
      description: |-
        Sends an event to a specific room which directs clients to delete a specific message; that is, unrender it from view and delete it from the client’s chat history. This event’s `EventName` is `aws:DELETE_MESSAGE`. This replicates the [ DeleteMessage](https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-deletemessage-publish.html) WebSocket operation in the Amazon IVS Chat Messaging API.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomIdentifier:
                  $ref: '#/components/schemas/RoomIdentifier'
                id:
                  $ref: '#/components/schemas/MessageID'
                reason:
                  $ref: '#/components/schemas/Reason'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DeleteRoom:
    post:
      operationId: DeleteRoom
      description: |-
        Deletes the specified room.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  $ref: '#/components/schemas/RoomIdentifier'
      responses:
        '204': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /DisconnectUser:
    post:
      operationId: DisconnectUser
      description: |-
        Disconnects all connections using a specified user ID from a room. This replicates the [ DisconnectUser](https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-disconnectuser-publish.html) WebSocket operation in the Amazon IVS Chat Messaging API.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomIdentifier:
                  $ref: '#/components/schemas/RoomIdentifier'
                userId:
                  $ref: '#/components/schemas/UserID'
                reason:
                  $ref: '#/components/schemas/Reason'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetLoggingConfiguration:
    post:
      operationId: GetLoggingConfiguration
      description: |-
        Gets the specified logging configuration.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  $ref: '#/components/schemas/LoggingConfigurationIdentifier'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /GetRoom:
    post:
      operationId: GetRoom
      description: |-
        Gets the specified room.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  $ref: '#/components/schemas/RoomIdentifier'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListLoggingConfigurations:
    post:
      operationId: ListLoggingConfigurations
      description: |-
        Gets summary information about all your logging configurations in the AWS region where the API request is processed.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxLoggingConfigurationResults'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ListRooms:
    post:
      operationId: ListRooms
      description: |-
        Gets summary information about all your rooms in the AWS region where the API request is processed. Results are sorted in descending order of `updateTime`.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/RoomName'
                nextToken:
                  $ref: '#/components/schemas/PaginationToken'
                maxResults:
                  $ref: '#/components/schemas/MaxRoomResults'
                messageReviewHandlerUri:
                  $ref: '#/components/schemas/LambdaArn'
                loggingConfigurationIdentifier:
                  $ref: '#/components/schemas/LoggingConfigurationIdentifier'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Gets information about AWS tags for the specified ARN.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      responses:
        '200': {}
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Adds or updates tags for the AWS resource with the specified ARN.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes tags from the resource with the specified ARN.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /SendEvent:
    post:
      operationId: SendEvent
      description: |-
        Sends an event to a room. Use this within your application’s business logic to send events to clients of a room; e.g., to notify clients to change the way the chat UI is rendered.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomIdentifier:
                  $ref: '#/components/schemas/RoomIdentifier'
                eventName:
                  $ref: '#/components/schemas/EventName'
                attributes:
                  $ref: '#/components/schemas/EventAttributes'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UpdateLoggingConfiguration:
    post:
      operationId: UpdateLoggingConfiguration
      description: |-
        Updates a specified logging configuration.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  $ref: '#/components/schemas/LoggingConfigurationIdentifier'
                name:
                  $ref: '#/components/schemas/LoggingConfigurationName'
                destinationConfiguration:
                  $ref: '#/components/schemas/DestinationConfiguration'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '409':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /UpdateRoom:
    post:
      operationId: UpdateRoom
      description: |-
        Updates a room’s configuration.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  $ref: '#/components/schemas/RoomIdentifier'
                name:
                  $ref: '#/components/schemas/RoomName'
                maximumMessageRatePerSecond:
                  $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
                maximumMessageLength:
                  $ref: '#/components/schemas/RoomMaxMessageLength'
                messageReviewHandler:
                  $ref: '#/components/schemas/MessageReviewHandler'
                loggingConfigurationIdentifiers:
                  $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
      responses:
        '200': {}
        '403':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
        '404':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: ''
    BucketName:
      type: string
      pattern: ^[a-z0-9-.]+$
      minLength: 3
      maxLength: 63
    ChatToken:
      type: string
    ChatTokenAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    ChatTokenCapabilities:
      type: array
      items:
        $ref: '#/components/schemas/ChatTokenCapability'
    ChatTokenCapability:
      type: string
      enum:
      - SEND_MESSAGE
      - DISCONNECT_USER
      - DELETE_MESSAGE
    CloudWatchLogsDestinationConfiguration:
      type: object
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          description: Name of the Amazon Cloudwatch Logs destination where chat activity
            will be logged.
      required:
      - logGroupName
      description: Specifies a CloudWatch Logs location where chat logs will be stored.
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: ''
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: ''
      required:
      - message
      - resourceId
      - resourceType
      description: ''
    CreateChatTokenRequest:
      type: object
      properties:
        roomIdentifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          description: Identifier of the room that the client is trying to access.
            Currently this must be an ARN.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserID'
          description: Application-provided ID that uniquely identifies the user associated
            with this token. This can be any UTF-8 encoded text.
        capabilities:
          allOf:
          - $ref: '#/components/schemas/ChatTokenCapabilities'
          description: 'Set of capabilities that the user is allowed to perform in
            the room. Default: None (the capability to view messages is implicitly
            included in all requests).'
        sessionDurationInMinutes:
          allOf:
          - $ref: '#/components/schemas/SessionDurationInMinutes'
          description: 'Session duration (in minutes), after which the session expires.
            Default: 60 (1 hour).'
        attributes:
          allOf:
          - $ref: '#/components/schemas/ChatTokenAttributes'
          description: Application-provided attributes to encode into the token and
            attach to a chat session. Map keys and values can contain UTF-8 encoded
            text. The maximum length of this field is 1 KB total.
      required:
      - roomIdentifier
      - userId
    CreateChatTokenResponse:
      type: object
      properties:
        token:
          allOf:
          - $ref: '#/components/schemas/ChatToken'
          description: The issued client token, encrypted.
        tokenExpirationTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time after which the token is no longer valid and cannot be
            used to connect to a room. This is an ISO 8601 timestamp; _note that this
            is returned as a string_.
        sessionExpirationTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time after which an end user's session is no longer valid.
            This is an ISO 8601 timestamp; _note that this is returned as a string_.
    CreateLoggingConfigurationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          description: Logging-configuration name. The value does not need to be unique.
        destinationConfiguration:
          allOf:
          - $ref: '#/components/schemas/DestinationConfiguration'
          description: A complex type that contains a destination configuration for
            where chat content will be logged. There can be only one type of destination
            (`cloudWatchLogs`, `firehose`, or `s3`) in a `destinationConfiguration`.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags to attach to the resource. Array of maps, each of the
            form `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging Amazon Web Services Resources and Tag Editor_ for details,
            including restrictions that apply to tags and "Tag naming limits and requirements";
            Amazon IVS Chat has no constraints on tags beyond what is documented there.
      required:
      - destinationConfiguration
    CreateLoggingConfigurationResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationArn'
          description: Logging-configuration ARN, assigned by the system.
        id:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationID'
          description: Logging-configuration ID, generated by the system. This is
            a relative identifier, the part of the ARN that uniquely identifies the
            logging configuration.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time when the logging configuration was created. This is an
            ISO 8601 timestamp; _note that this is returned as a string_.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time of the logging configuration’s last update. This is an
            ISO 8601 timestamp; _note that this is returned as a string_.
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          description: Logging-configuration name, from the request (if specified).
        destinationConfiguration:
          allOf:
          - $ref: '#/components/schemas/DestinationConfiguration'
          description: A complex type that contains a destination configuration for
            where chat content will be logged, from the request. There is only one
            type of destination (`cloudWatchLogs`, `firehose`, or `s3`) in a `destinationConfiguration`.
        state:
          allOf:
          - $ref: '#/components/schemas/CreateLoggingConfigurationState'
          description: The state of the logging configuration. When the state is `ACTIVE`,
            the configuration is ready to log chat content.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource, from the request (if specified).
            Array of maps, each of the form `string:string (key:value)`.
    CreateLoggingConfigurationState:
      type: string
      enum:
      - ACTIVE
    CreateRoomRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          description: Room name. The value does not need to be unique.
        maximumMessageRatePerSecond:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
          description: 'Maximum number of messages per second that can be sent to
            the room (by all clients). Default: 10.'
        maximumMessageLength:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageLength'
          description: 'Maximum number of characters in a single message. Messages
            are expected to be UTF-8 encoded and this limit applies specifically to
            rune/code-point count, not number of bytes. Default: 500.'
        messageReviewHandler:
          allOf:
          - $ref: '#/components/schemas/MessageReviewHandler'
          description: Configuration information for optional review of messages.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags to attach to the resource. Array of maps, each of the
            form `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging Amazon Web Services Resources and Tag Editor_ for details,
            including restrictions that apply to tags and "Tag naming limits and requirements";
            Amazon IVS Chat has no constraints beyond what is documented there.
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          description: Array of logging-configuration identifiers attached to the
            room.
    CreateRoomResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RoomArn'
          description: Room ARN, assigned by the system.
        id:
          allOf:
          - $ref: '#/components/schemas/RoomID'
          description: Room ID, generated by the system. This is a relative identifier,
            the part of the ARN that uniquely identifies the room.
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          description: Room name, from the request (if specified).
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time when the room was created. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time of the room’s last update. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        maximumMessageRatePerSecond:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
          description: Maximum number of messages per second that can be sent to the
            room (by all clients), from the request (if specified).
        maximumMessageLength:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageLength'
          description: Maximum number of characters in a single message, from the
            request (if specified).
        messageReviewHandler:
          allOf:
          - $ref: '#/components/schemas/MessageReviewHandler'
          description: Configuration information for optional review of messages.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource, from the request (if specified).
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          description: Array of logging configurations attached to the room, from
            the request (if specified).
    DeleteLoggingConfigurationRequest:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifier'
          description: Identifier of the logging configuration to be deleted.
      required:
      - identifier
    DeleteMessageRequest:
      type: object
      properties:
        roomIdentifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          description: Identifier of the room where the message should be deleted.
            Currently this must be an ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/MessageID'
          description: ID of the message to be deleted. This is the `Id` field in
            the received message (see [ Message (Subscribe)](https://docs.aws.amazon.com/ivs/latest/chatmsgapireference/actions-message-subscribe.html)
            in the Chat Messaging API).
        reason:
          allOf:
          - $ref: '#/components/schemas/Reason'
          description: Reason for deleting the message.
      required:
      - roomIdentifier
      - id
    DeleteMessageResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ID'
          description: Operation identifier, generated by Amazon IVS Chat.
    DeleteRoomRequest:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          description: Identifier of the room to be deleted. Currently this must be
            an ARN.
      required:
      - identifier
    DeliveryStreamName:
      type: string
      pattern: ^[a-zA-Z0-9_.-]+$
      minLength: 1
      maxLength: 64
    DestinationConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/S3DestinationConfiguration'
        description: |-
          An Amazon S3 destination configuration where chat activity will be logged.
      - allOf:
        - $ref: '#/components/schemas/CloudWatchLogsDestinationConfiguration'
        description: |-
          An Amazon CloudWatch Logs destination configuration where chat activity will be logged.
      - allOf:
        - $ref: '#/components/schemas/FirehoseDestinationConfiguration'
        description: |-
          An Amazon Kinesis Data Firehose destination configuration where chat activity will be logged.
      description: |-
        A complex type that describes a location where chat logs will be stored. Each member represents the configuration of one log destination. For logging, you define only one type of destination (for CloudWatch Logs, Kinesis Firehose, or S3).
    DisconnectUserRequest:
      type: object
      properties:
        roomIdentifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          description: Identifier of the room from which the user's clients should
            be disconnected. Currently this must be an ARN.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserID'
          description: ID of the user (connection) to disconnect from the room.
        reason:
          allOf:
          - $ref: '#/components/schemas/Reason'
          description: Reason for disconnecting the user.
      required:
      - roomIdentifier
      - userId
    DisconnectUserResponse:
      type: object
      properties: {}
    ErrorMessage:
      type: string
    EventAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    EventName:
      type: string
      minLength: 1
      maxLength: 100
    FallbackResult:
      type: string
      enum:
      - ALLOW
      - DENY
    FieldName:
      type: string
    FirehoseDestinationConfiguration:
      type: object
      properties:
        deliveryStreamName:
          allOf:
          - $ref: '#/components/schemas/DeliveryStreamName'
          description: Name of the Amazon Kinesis Firehose delivery stream where chat
            activity will be logged.
      required:
      - deliveryStreamName
      description: Specifies a Kinesis Firehose location where chat logs will be stored.
    GetLoggingConfigurationRequest:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifier'
          description: Identifier of the logging configuration to be retrieved.
      required:
      - identifier
    GetLoggingConfigurationResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationArn'
          description: Logging-configuration ARN, from the request (if `identifier`
            was an ARN).
        id:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationID'
          description: Logging-configuration ID, generated by the system. This is
            a relative identifier, the part of the ARN that uniquely identifies the
            logging configuration.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time when the logging configuration was created. This is an
            ISO 8601 timestamp; _note that this is returned as a string_.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time of the logging configuration’s last update. This is an
            ISO 8601 timestamp; _note that this is returned as a string_.
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          description: Logging-configuration name. This value does not need to be
            unique.
        destinationConfiguration:
          allOf:
          - $ref: '#/components/schemas/DestinationConfiguration'
          description: A complex type that contains a destination configuration for
            where chat content will be logged. There is only one type of destination
            (`cloudWatchLogs`, `firehose`, or `s3`) in a `destinationConfiguration`.
        state:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationState'
          description: The state of the logging configuration. When the state is `ACTIVE`,
            the configuration is ready to log chat content.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`.
    GetRoomRequest:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          description: Identifier of the room for which the configuration is to be
            retrieved. Currently this must be an ARN.
      required:
      - identifier
    GetRoomResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RoomArn'
          description: Room ARN, from the request (if `identifier` was an ARN).
        id:
          allOf:
          - $ref: '#/components/schemas/RoomID'
          description: Room ID, generated by the system. This is a relative identifier,
            the part of the ARN that uniquely identifies the room.
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          description: Room name. The value does not need to be unique.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time when the room was created. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time of the room’s last update. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        maximumMessageRatePerSecond:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
          description: 'Maximum number of messages per second that can be sent to
            the room (by all clients). Default: 10.'
        maximumMessageLength:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageLength'
          description: 'Maximum number of characters in a single message. Messages
            are expected to be UTF-8 encoded and this limit applies specifically to
            rune/code-point count, not number of bytes. Default: 500.'
        messageReviewHandler:
          allOf:
          - $ref: '#/components/schemas/MessageReviewHandler'
          description: Configuration information for optional review of messages.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`.
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          description: Array of logging configurations attached to the room.
    ID:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 12
      maxLength: 12
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: ''
    LambdaArn:
      type: string
      pattern: ^$|^arn:aws:lambda:[a-z0-9-]+:[0-9]{12}:function:.+
      minLength: 0
      maxLength: 170
    Limit:
      type: integer
      default: 0
    ListLoggingConfigurationsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first logging configurations to retrieve. This is used
            for pagination; see the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxLoggingConfigurationResults'
          description: 'Maximum number of logging configurations to return. Default:
            50.'
    ListLoggingConfigurationsResponse:
      type: object
      properties:
        loggingConfigurations:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationList'
          description: List of the matching logging configurations (summary information
            only). There is only one type of destination (`cloudWatchLogs`, `firehose`,
            or `s3`) in a `destinationConfiguration`.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more logging configurations than `maxResults`,
            use `nextToken` in the request to get the next set.
      required:
      - loggingConfigurations
    ListRoomsRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          description: Filters the list to match the specified room name.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The first room to retrieve. This is used for pagination; see
            the `nextToken` response field.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxRoomResults'
          description: 'Maximum number of rooms to return. Default: 50.'
        messageReviewHandlerUri:
          allOf:
          - $ref: '#/components/schemas/LambdaArn'
          description: Filters the list to match the specified message review handler
            URI.
        loggingConfigurationIdentifier:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifier'
          description: Logging-configuration identifier.
    ListRoomsResponse:
      type: object
      properties:
        rooms:
          allOf:
          - $ref: '#/components/schemas/RoomList'
          description: List of the matching rooms (summary information only).
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: If there are more rooms than `maxResults`, use `nextToken`
            in the request to get the next set.
      required:
      - rooms
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The ARN of the resource to be retrieved. The ARN must be URL-encoded.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`.
      required:
      - tags
    LogGroupName:
      type: string
      pattern: ^[\.\-_/#A-Za-z0-9]+$
      minLength: 1
      maxLength: 512
    LoggingConfigurationArn:
      type: string
      pattern: ^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    LoggingConfigurationID:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 12
      maxLength: 12
    LoggingConfigurationIdentifier:
      type: string
      pattern: ^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    LoggingConfigurationIdentifierList:
      type: array
      items:
        $ref: '#/components/schemas/LoggingConfigurationIdentifier'
    LoggingConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/LoggingConfigurationSummary'
    LoggingConfigurationName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      maxLength: 128
    LoggingConfigurationState:
      type: string
      enum:
      - CREATING
      - CREATE_FAILED
      - DELETING
      - DELETE_FAILED
      - UPDATING
      - UPDATE_FAILED
      - ACTIVE
    LoggingConfigurationSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationArn'
          description: Logging-configuration ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationID'
          description: Logging-configuration ID, generated by the system. This is
            a relative identifier, the part of the ARN that uniquely identifies the
            room.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time when the logging configuration was created. This is an
            ISO 8601 timestamp; _note that this is returned as a string_.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time of the logging configuration’s last update. This is an
            ISO 8601 timestamp; _note that this is returned as a string_.
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          description: Logging-configuration name. The value does not need to be unique.
        destinationConfiguration:
          allOf:
          - $ref: '#/components/schemas/DestinationConfiguration'
          description: A complex type that contains a destination configuration for
            where chat content will be logged.
        state:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationState'
          description: The state of the logging configuration. When this is `ACTIVE`,
            the configuration is ready for logging chat content.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags to attach to the resource. Array of maps, each of the
            form `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging Amazon Web Services Resources and Tag Editor_ for details,
            including restrictions that apply to tags and "Tag naming limits and requirements";
            Amazon IVS Chat has no constraints on tags beyond what is documented there.
      description: Summary information about a logging configuration.
    MaxLoggingConfigurationResults:
      type: integer
      minimum: 1
      maximum: 50
    MaxRoomResults:
      type: integer
      minimum: 1
      maximum: 50
    MessageID:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 12
      maxLength: 12
    MessageReviewHandler:
      type: object
      properties:
        uri:
          allOf:
          - $ref: '#/components/schemas/LambdaArn'
          description: Identifier of the message review handler. Currently this must
            be an ARN of a lambda function.
        fallbackResult:
          allOf:
          - $ref: '#/components/schemas/FallbackResult'
          description: 'Specifies the fallback behavior (whether the message is allowed
            or denied) if the handler does not return a valid response, encounters
            an error, or times out. (For the timeout period, see [ Service Quotas](https://docs.aws.amazon.com/ivs/latest/userguide/service-quotas.html).)
            If allowed, the message is delivered with returned content to all users
            connected to the room. If denied, the message is not delivered to any
            user. Default: `ALLOW`.'
      description: Configuration information for optional message review.
    PaginationToken:
      type: string
      minLength: 0
      maxLength: 1024
    PendingVerification:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: ''
    Reason:
      type: string
      minLength: 1
      maxLength: 256
    ResourceArn:
      type: string
      pattern: ^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    ResourceId:
      type: string
      pattern: ^[a-zA-Z0-9]+$
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: ''
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: ''
      required:
      - message
      - resourceId
      - resourceType
      description: ''
    ResourceType:
      type: string
      enum:
      - ROOM
    RoomArn:
      type: string
      pattern: ^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    RoomID:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 12
      maxLength: 12
    RoomIdentifier:
      type: string
      pattern: ^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 128
    RoomList:
      type: array
      items:
        $ref: '#/components/schemas/RoomSummary'
    RoomMaxMessageLength:
      type: integer
      minimum: 1
      maximum: 500
    RoomMaxMessageRatePerSecond:
      type: integer
      minimum: 1
      maximum: 100
    RoomName:
      type: string
      pattern: ^[a-zA-Z0-9-_]*$
      maxLength: 128
    RoomSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RoomArn'
          description: Room ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/RoomID'
          description: Room ID, generated by the system. This is a relative identifier,
            the part of the ARN that uniquely identifies the room.
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          description: Room name. The value does not need to be unique.
        messageReviewHandler:
          allOf:
          - $ref: '#/components/schemas/MessageReviewHandler'
          description: Configuration information for optional review of messages.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time when the room was created. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time of the room’s last update. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging Amazon Web Services Resources and Tag Editor_ for details,
            including restrictions that apply to tags and "Tag naming limits and requirements";
            Amazon IVS Chat has no constraints beyond what is documented there.
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          description: List of logging-configuration identifiers attached to the room.
      description: Summary information about a room.
    S3DestinationConfiguration:
      type: object
      properties:
        bucketName:
          allOf:
          - $ref: '#/components/schemas/BucketName'
          description: Name of the Amazon S3 bucket where chat activity will be logged.
      required:
      - bucketName
      description: Specifies an S3 location where chat logs will be stored.
    SendEventRequest:
      type: object
      properties:
        roomIdentifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          description: Identifier of the room to which the event will be sent. Currently
            this must be an ARN.
        eventName:
          allOf:
          - $ref: '#/components/schemas/EventName'
          description: Application-defined name of the event to send to clients.
        attributes:
          allOf:
          - $ref: '#/components/schemas/EventAttributes'
          description: Application-defined metadata to attach to the event sent to
            clients. The maximum length of the metadata is 1 KB total.
      required:
      - roomIdentifier
      - eventName
    SendEventResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ID'
          description: An identifier generated by Amazon IVS Chat. This identifier
            must be used in subsequent operations for this message, such as DeleteMessage.
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: ''
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: ''
        limit:
          allOf:
          - $ref: '#/components/schemas/Limit'
          description: ''
      required:
      - message
      - resourceId
      - resourceType
      - limit
      description: ''
    SessionDurationInMinutes:
      type: integer
      minimum: 1
      maximum: 180
    String:
      type: string
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The ARN of the resource to be tagged. The ARN must be URL-encoded.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Array of tags to be added or updated. Array of maps, each of
            the form `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging Amazon Web Services Resources and Tag Editor_ for details,
            including restrictions that apply to tags and "Tag naming limits and requirements";
            Amazon IVS Chat has no constraints beyond what is documented there.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tags:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: ''
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: ''
        limit:
          allOf:
          - $ref: '#/components/schemas/Limit'
          description: ''
      required:
      - message
      - resourceId
      - resourceType
      - limit
      description: ''
    Time:
      type: string
      format: date-time
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The ARN of the resource to be untagged. The ARN must be URL-encoded.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: Array of tags to be removed. Array of maps, each of the form
            `string:string (key:value)`. See [Best practices and strategies](https://docs.aws.amazon.com/tag-editor/latest/userguide/best-practices-and-strats.html)
            in _Tagging Amazon Web Services Resources and Tag Editor_ for details,
            including restrictions that apply to tags and "Tag naming limits and requirements";
            Amazon IVS Chat has no constraints beyond what is documented there.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateLoggingConfigurationRequest:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifier'
          description: Identifier of the logging configuration to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          description: Logging-configuration name. The value does not need to be unique.
        destinationConfiguration:
          allOf:
          - $ref: '#/components/schemas/DestinationConfiguration'
          description: A complex type that contains a destination configuration for
            where chat content will be logged. There can be only one type of destination
            (`cloudWatchLogs`, `firehose`, or `s3`) in a `destinationConfiguration`.
      required:
      - identifier
    UpdateLoggingConfigurationResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationArn'
          description: Logging-configuration ARN, from the request (if `identifier`
            was an ARN).
        id:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationID'
          description: Logging-configuration ID, generated by the system. This is
            a relative identifier, the part of the ARN that uniquely identifies the
            room.
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time when the logging configuration was created. This is an
            ISO 8601 timestamp; _note that this is returned as a string_.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time of the logging configuration’s last update. This is an
            ISO 8601 timestamp; _note that this is returned as a string_.
        name:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationName'
          description: Logging-configuration name, from the request (if specified).
        destinationConfiguration:
          allOf:
          - $ref: '#/components/schemas/DestinationConfiguration'
          description: A complex type that contains a destination configuration for
            where chat content will be logged, from the request. There is only one
            type of destination (`cloudWatchLogs`, `firehose`, or `s3`) in a `destinationConfiguration`.
        state:
          allOf:
          - $ref: '#/components/schemas/UpdateLoggingConfigurationState'
          description: The state of the logging configuration. When the state is `ACTIVE`,
            the configuration is ready to log chat content.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`.
    UpdateLoggingConfigurationState:
      type: string
      enum:
      - ACTIVE
    UpdateRoomRequest:
      type: object
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/RoomIdentifier'
          description: Identifier of the room to be updated. Currently this must be
            an ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          description: Room name. The value does not need to be unique.
        maximumMessageRatePerSecond:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
          description: 'Maximum number of messages per second that can be sent to
            the room (by all clients). Default: 10.'
        maximumMessageLength:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageLength'
          description: 'The maximum number of characters in a single message. Messages
            are expected to be UTF-8 encoded and this limit applies specifically to
            rune/code-point count, not number of bytes. Default: 500.'
        messageReviewHandler:
          allOf:
          - $ref: '#/components/schemas/MessageReviewHandler'
          description: Configuration information for optional review of messages.
            Specify an empty `uri` string to disassociate a message review handler
            from the specified room.
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          description: Array of logging-configuration identifiers attached to the
            room.
      required:
      - identifier
    UpdateRoomResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RoomArn'
          description: Room ARN, from the request (if `identifier` was an ARN).
        id:
          allOf:
          - $ref: '#/components/schemas/RoomID'
          description: Room ID, generated by the system. This is a relative identifier,
            the part of the ARN that uniquely identifies the room.
        name:
          allOf:
          - $ref: '#/components/schemas/RoomName'
          description: Room name, from the request (if specified).
        createTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time when the room was created. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time of the room’s last update. This is an ISO 8601 timestamp;
            _note that this is returned as a string_.
        maximumMessageRatePerSecond:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageRatePerSecond'
          description: Maximum number of messages per second that can be sent to the
            room (by all clients), from the request (if specified).
        maximumMessageLength:
          allOf:
          - $ref: '#/components/schemas/RoomMaxMessageLength'
          description: Maximum number of characters in a single message, from the
            request (if specified).
        messageReviewHandler:
          allOf:
          - $ref: '#/components/schemas/MessageReviewHandler'
          description: Configuration information for optional review of messages.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags attached to the resource. Array of maps, each of the form
            `string:string (key:value)`.
        loggingConfigurationIdentifiers:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationIdentifierList'
          description: Array of logging configurations attached to the room, from
            the request (if specified).
    UserID:
      type: string
      minLength: 1
      maxLength: 128
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: ''
        fieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: ''
      required:
      - message
      - reason
      description: ''
    ValidationExceptionField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/FieldName'
          description: Name of the field which failed validation.
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: Explanation of the reason for the validation error.
      required:
      - name
      - message
      description: This object is used in the ValidationException error.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - UNKNOWN_OPERATION
      - FIELD_VALIDATION_FAILED
      - OTHER
