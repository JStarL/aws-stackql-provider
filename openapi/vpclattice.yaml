openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: vpc_lattice
  x-aws-serviceName: vpclattice
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2022-11-30'
  title: Amazon VPC Lattice
  description: |-
    Amazon VPC Lattice is a fully managed application networking service that you use to connect, secure, and monitor all of your services across multiple accounts and virtual private clouds (VPCs). Amazon VPC Lattice interconnects your microservices and legacy services within a logical boundary, so that you can discover and manage them more efficiently. For more information, see the [Amazon VPC Lattice User Guide](https://docs.aws.amazon.com/vpc-lattice/latest/ug/)
servers:
- description: The Amazon VPC Lattice regional endpoint
  url: https://vpc-lattice.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules:
    patch:
      operationId: BatchUpdateRule
      description: |-
        Updates the listener rules in a batch. You can use this operation to change the priority of listener rules. This can be useful when bulk updating or swapping rule priority.

        **Required permissions:** `vpc-lattice:UpdateRule`

        For more information, see [How Amazon VPC Lattice works with IAM](https://docs.aws.amazon.com/vpc-lattice/latest/ug/security_iam_service-with-iam.html) in the _Amazon VPC Lattice User Guide_.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: listenerIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListenerIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rules:
                  $ref: '#/components/schemas/RuleUpdateList'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: CreateRule
      description: |-
        Creates a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions. For more information, see [Listener rules](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules) in the _Amazon VPC Lattice User Guide_.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: listenerIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListenerIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/RuleName'
                match:
                  $ref: '#/components/schemas/RuleMatch'
                priority:
                  $ref: '#/components/schemas/RulePriority'
                action:
                  $ref: '#/components/schemas/RuleAction'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListRules
      description: |-
        Lists the rules for the specified listener.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: listenerIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListenerIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /accesslogsubscriptions:
    post:
      operationId: CreateAccessLogSubscription
      description: |-
        Enables access logs to be sent to Amazon CloudWatch, Amazon S3, and Amazon Kinesis Data Firehose. The service network owner can use the access logs to audit the services in the network. The service network owner can only see access logs from clients and services that are associated with their service network. Access log entries represent traffic originated from VPCs associated with that network. For more information, see [Access logs](https://docs.aws.amazon.com/vpc-lattice/latest/ug/monitoring-access-logs.html) in the _Amazon VPC Lattice User Guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                resourceIdentifier:
                  $ref: '#/components/schemas/ResourceIdentifier'
                destinationArn:
                  $ref: '#/components/schemas/AccessLogDestinationArn'
                serviceNetworkLogType:
                  $ref: '#/components/schemas/ServiceNetworkLogType'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListAccessLogSubscriptions
      description: |-
        Lists the access log subscriptions for the specified service network or service.
      parameters:
      - name: resourceIdentifier
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /services/{serviceIdentifier}/listeners:
    post:
      operationId: CreateListener
      description: |-
        Creates a listener for a service. Before you start using your Amazon VPC Lattice service, you must add one or more listeners. A listener is a process that checks for connection requests to your services. For more information, see [Listeners](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html) in the _Amazon VPC Lattice User Guide_.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ListenerName'
                protocol:
                  $ref: '#/components/schemas/ListenerProtocol'
                port:
                  $ref: '#/components/schemas/Port'
                defaultAction:
                  $ref: '#/components/schemas/RuleAction'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListListeners
      description: |-
        Lists the listeners for the specified service.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /resourceconfigurations:
    post:
      operationId: CreateResourceConfiguration
      description: |-
        Creates a resource configuration. A resource configuration defines a specific resource. You can associate a resource configuration with a service network or a VPC endpoint.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceConfigurationName'
                type:
                  $ref: '#/components/schemas/ResourceConfigurationType'
                portRanges:
                  $ref: '#/components/schemas/PortRangeList'
                protocol:
                  $ref: '#/components/schemas/ProtocolType'
                resourceGatewayIdentifier:
                  $ref: '#/components/schemas/ResourceGatewayIdentifier'
                resourceConfigurationGroupIdentifier:
                  $ref: '#/components/schemas/ResourceConfigurationIdentifier'
                resourceConfigurationDefinition:
                  $ref: '#/components/schemas/ResourceConfigurationDefinition'
                allowAssociationToShareableServiceNetwork:
                  $ref: '#/components/schemas/Boolean'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListResourceConfigurations
      description: |-
        Lists the resource configurations owned by or shared with this account.
      parameters:
      - name: resourceGatewayIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResourceGatewayIdentifier'
      - name: resourceConfigurationGroupIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResourceConfigurationIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /resourcegateways:
    post:
      operationId: CreateResourceGateway
      description: |-
        Creates a resource gateway.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                name:
                  $ref: '#/components/schemas/ResourceGatewayName'
                vpcIdentifier:
                  $ref: '#/components/schemas/VpcId'
                subnetIds:
                  $ref: '#/components/schemas/SubnetList'
                securityGroupIds:
                  $ref: '#/components/schemas/SecurityGroupList'
                ipAddressType:
                  $ref: '#/components/schemas/ResourceGatewayIpAddressType'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListResourceGateways
      description: |-
        Lists the resource gateways that you own or that were shared with you.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /services:
    post:
      operationId: CreateService
      description: |-
        Creates a service. A service is any software application that can run on instances containers, or serverless functions within an account or virtual private cloud (VPC).

        For more information, see [Services](https://docs.aws.amazon.com/vpc-lattice/latest/ug/services.html) in the _Amazon VPC Lattice User Guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                name:
                  $ref: '#/components/schemas/ServiceName'
                tags:
                  $ref: '#/components/schemas/TagMap'
                customDomainName:
                  $ref: '#/components/schemas/ServiceCustomDomainName'
                certificateArn:
                  $ref: '#/components/schemas/CertificateArn'
                authType:
                  $ref: '#/components/schemas/AuthType'
      responses:
        '201': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListServices
      description: |-
        Lists the services owned by the caller account or shared with the caller account.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /servicenetworks:
    post:
      operationId: CreateServiceNetwork
      description: |-
        Creates a service network. A service network is a logical boundary for a collection of services. You can associate services and VPCs with a service network.

        For more information, see [Service networks](https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html) in the _Amazon VPC Lattice User Guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                name:
                  $ref: '#/components/schemas/ServiceNetworkName'
                authType:
                  $ref: '#/components/schemas/AuthType'
                tags:
                  $ref: '#/components/schemas/TagMap'
                sharingConfig:
                  $ref: '#/components/schemas/SharingConfig'
      responses:
        '201': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListServiceNetworks
      description: |-
        Lists the service networks owned by or shared with this account. The account ID in the ARN shows which account owns the service network.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /servicenetworkresourceassociations:
    post:
      operationId: CreateServiceNetworkResourceAssociation
      description: |-
        Associates the specified service network with the specified resource configuration. This allows the resource configuration to receive connections through the service network, including through a service network VPC endpoint.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                resourceConfigurationIdentifier:
                  $ref: '#/components/schemas/ResourceConfigurationIdentifier'
                serviceNetworkIdentifier:
                  $ref: '#/components/schemas/ServiceNetworkIdentifierWithoutRegex'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListServiceNetworkResourceAssociations
      description: |-
        Lists the associations between a service network and a resource configuration.
      parameters:
      - name: serviceNetworkIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ServiceNetworkIdentifier'
      - name: resourceConfigurationIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResourceConfigurationIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /servicenetworkserviceassociations:
    post:
      operationId: CreateServiceNetworkServiceAssociation
      description: |-
        Associates the specified service with the specified service network. For more information, see [Manage service associations](https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-network-associations.html#service-network-service-associations) in the _Amazon VPC Lattice User Guide_.

        You can't use this operation if the service and service network are already associated or if there is a disassociation or deletion in progress. If the association fails, you can retry the operation by deleting the association and recreating it.

        You cannot associate a service and service network that are shared with a caller. The caller must own either the service or the service network.

        As a result of this operation, the association is created in the service network account and the association owner account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                serviceIdentifier:
                  $ref: '#/components/schemas/ServiceIdentifier'
                serviceNetworkIdentifier:
                  $ref: '#/components/schemas/ServiceNetworkIdentifier'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListServiceNetworkServiceAssociations
      description: |-
        Lists the associations between a service network and a service. You can filter the list either by service or service network. You must provide either the service network identifier or the service identifier.

        Every association in Amazon VPC Lattice has a unique Amazon Resource Name (ARN), such as when a service network is associated with a VPC or when a service is associated with a service network. If the association is for a resource is shared with another account, the association includes the local account ID as the prefix in the ARN.
      parameters:
      - name: serviceNetworkIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ServiceNetworkIdentifier'
      - name: serviceIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /servicenetworkvpcassociations:
    post:
      operationId: CreateServiceNetworkVpcAssociation
      description: |-
        Associates a VPC with a service network. When you associate a VPC with the service network, it enables all the resources within that VPC to be clients and communicate with other services in the service network. For more information, see [Manage VPC associations](https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-network-associations.html#service-network-vpc-associations) in the _Amazon VPC Lattice User Guide_.

        You can't use this operation if there is a disassociation in progress. If the association fails, retry by deleting the association and recreating it.

        As a result of this operation, the association gets created in the service network account and the VPC owner account.

        If you add a security group to the service network and VPC association, the association must continue to always have at least one security group. You can add or edit security groups at any time. However, to remove all security groups, you must first delete the association and recreate it without security groups.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                serviceNetworkIdentifier:
                  $ref: '#/components/schemas/ServiceNetworkIdentifier'
                vpcIdentifier:
                  $ref: '#/components/schemas/VpcId'
                securityGroupIds:
                  $ref: '#/components/schemas/SecurityGroupList'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListServiceNetworkVpcAssociations
      description: |-
        Lists the associations between a service network and a VPC. You can filter the list either by VPC or service network. You must provide either the ID of the service network identifier or the ID of the VPC.
      parameters:
      - name: serviceNetworkIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ServiceNetworkIdentifier'
      - name: vpcIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/VpcId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /targetgroups:
    post:
      operationId: CreateTargetGroup
      description: |-
        Creates a target group. A target group is a collection of targets, or compute resources, that run your application or service. A target group can only be used by a single service.

        For more information, see [Target groups](https://docs.aws.amazon.com/vpc-lattice/latest/ug/target-groups.html) in the _Amazon VPC Lattice User Guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/TargetGroupName'
                type:
                  $ref: '#/components/schemas/TargetGroupType'
                config:
                  $ref: '#/components/schemas/TargetGroupConfig'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListTargetGroups
      description: |-
        Lists your target groups. You can narrow your search by using the filters below in your request.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: vpcIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/VpcId'
      - name: targetGroupType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/TargetGroupType'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /accesslogsubscriptions/{accessLogSubscriptionIdentifier}:
    delete:
      operationId: DeleteAccessLogSubscription
      description: |-
        Deletes the specified access log subscription.
      parameters:
      - name: accessLogSubscriptionIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AccessLogSubscriptionIdentifier'
      responses:
        '204': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAccessLogSubscription
      description: |-
        Retrieves information about the specified access log subscription.
      parameters:
      - name: accessLogSubscriptionIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AccessLogSubscriptionIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateAccessLogSubscription
      description: |-
        Updates the specified access log subscription.
      parameters:
      - name: accessLogSubscriptionIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AccessLogSubscriptionIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationArn:
                  $ref: '#/components/schemas/AccessLogDestinationArn'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /authpolicy/{resourceIdentifier}:
    delete:
      operationId: DeleteAuthPolicy
      description: |-
        Deletes the specified auth policy. If an auth is set to `AWS_IAM` and the auth policy is deleted, all requests are denied. If you are trying to remove the auth policy completely, you must set the auth type to `NONE`. If auth is enabled on the resource, but no auth policy is set, all requests are denied.
      parameters:
      - name: resourceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdentifier'
      responses:
        '204': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAuthPolicy
      description: |-
        Retrieves information about the auth policy for the specified service or service network.
      parameters:
      - name: resourceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutAuthPolicy
      description: |-
        Creates or updates the auth policy. The policy string in JSON must not contain newlines or blank lines.

        For more information, see [Auth policies](https://docs.aws.amazon.com/vpc-lattice/latest/ug/auth-policies.html) in the _Amazon VPC Lattice User Guide_.
      parameters:
      - name: resourceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policy:
                  $ref: '#/components/schemas/AuthPolicyString'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /services/{serviceIdentifier}/listeners/{listenerIdentifier}:
    delete:
      operationId: DeleteListener
      description: |-
        Deletes the specified listener.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: listenerIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListenerIdentifier'
      responses:
        '204': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetListener
      description: |-
        Retrieves information about the specified listener for the specified service.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: listenerIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListenerIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateListener
      description: |-
        Updates the specified listener for the specified service.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: listenerIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListenerIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                defaultAction:
                  $ref: '#/components/schemas/RuleAction'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /resourceconfigurations/{resourceConfigurationIdentifier}:
    delete:
      operationId: DeleteResourceConfiguration
      description: |-
        Deletes the specified resource configuration.
      parameters:
      - name: resourceConfigurationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceConfigurationIdentifier'
      responses:
        '204': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetResourceConfiguration
      description: |-
        Retrieves information about the specified resource configuration.
      parameters:
      - name: resourceConfigurationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceConfigurationIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateResourceConfiguration
      description: |-
        Updates the specified resource configuration.
      parameters:
      - name: resourceConfigurationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceConfigurationIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceConfigurationDefinition:
                  $ref: '#/components/schemas/ResourceConfigurationDefinition'
                allowAssociationToShareableServiceNetwork:
                  $ref: '#/components/schemas/Boolean'
                portRanges:
                  $ref: '#/components/schemas/PortRangeList'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /resourceendpointassociations/{resourceEndpointAssociationIdentifier}:
    delete:
      operationId: DeleteResourceEndpointAssociation
      description: |-
        Disassociates the resource configuration from the resource VPC endpoint.
      parameters:
      - name: resourceEndpointAssociationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceEndpointAssociationIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /resourcegateways/{resourceGatewayIdentifier}:
    delete:
      operationId: DeleteResourceGateway
      description: |-
        Deletes the specified resource gateway.
      parameters:
      - name: resourceGatewayIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceGatewayIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetResourceGateway
      description: |-
        Retrieves information about the specified resource gateway.
      parameters:
      - name: resourceGatewayIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceGatewayIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateResourceGateway
      description: |-
        Updates the specified resource gateway.
      parameters:
      - name: resourceGatewayIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceGatewayIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                securityGroupIds:
                  $ref: '#/components/schemas/SecurityGroupList'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /resourcepolicy/{resourceArn}:
    delete:
      operationId: DeleteResourcePolicy
      description: |-
        Deletes the specified resource policy.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      responses:
        '204': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetResourcePolicy
      description: |-
        Retrieves information about the specified resource policy. The resource policy is an IAM policy created on behalf of the resource owner when they share a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutResourcePolicy
      description: |-
        Attaches a resource-based permission policy to a service or service network. The policy must contain the same actions and condition statements as the Amazon Web Services Resource Access Manager permission for sharing services and service networks.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                policy:
                  $ref: '#/components/schemas/PolicyString'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules/{ruleIdentifier}:
    delete:
      operationId: DeleteRule
      description: |-
        Deletes a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions. You can delete additional listener rules, but you cannot delete the default rule.

        For more information, see [Listener rules](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules) in the _Amazon VPC Lattice User Guide_.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: listenerIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListenerIdentifier'
      - name: ruleIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RuleIdentifier'
      responses:
        '204': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetRule
      description: |-
        Retrieves information about the specified listener rules. You can also retrieve information about the default listener rule. For more information, see [Listener rules](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules) in the _Amazon VPC Lattice User Guide_.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: listenerIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListenerIdentifier'
      - name: ruleIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RuleIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateRule
      description: |-
        Updates a specified rule for the listener. You can't modify a default listener rule. To modify a default listener rule, use `UpdateListener`.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      - name: listenerIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ListenerIdentifier'
      - name: ruleIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RuleIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                match:
                  $ref: '#/components/schemas/RuleMatch'
                priority:
                  $ref: '#/components/schemas/RulePriority'
                action:
                  $ref: '#/components/schemas/RuleAction'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /services/{serviceIdentifier}:
    delete:
      operationId: DeleteService
      description: |-
        Deletes a service. A service can't be deleted if it's associated with a service network. If you delete a service, all resources related to the service, such as the resource policy, auth policy, listeners, listener rules, and access log subscriptions, are also deleted. For more information, see [Delete a service](https://docs.aws.amazon.com/vpc-lattice/latest/ug/services.html#delete-service) in the _Amazon VPC Lattice User Guide_.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetService
      description: |-
        Retrieves information about the specified service.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateService
      description: |-
        Updates the specified service.
      parameters:
      - name: serviceIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                certificateArn:
                  $ref: '#/components/schemas/CertificateArn'
                authType:
                  $ref: '#/components/schemas/AuthType'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /servicenetworks/{serviceNetworkIdentifier}:
    delete:
      operationId: DeleteServiceNetwork
      description: |-
        Deletes a service network. You can only delete the service network if there is no service or VPC associated with it. If you delete a service network, all resources related to the service network, such as the resource policy, auth policy, and access log subscriptions, are also deleted. For more information, see [Delete a service network](https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html#delete-service-network) in the _Amazon VPC Lattice User Guide_.
      parameters:
      - name: serviceNetworkIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkIdentifier'
      responses:
        '204': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetServiceNetwork
      description: |-
        Retrieves information about the specified service network.
      parameters:
      - name: serviceNetworkIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateServiceNetwork
      description: |-
        Updates the specified service network.
      parameters:
      - name: serviceNetworkIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authType:
                  $ref: '#/components/schemas/AuthType'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /servicenetworkresourceassociations/{serviceNetworkResourceAssociationIdentifier}:
    delete:
      operationId: DeleteServiceNetworkResourceAssociation
      description: |-
        Deletes the association between a service network and a resource configuration.
      parameters:
      - name: serviceNetworkResourceAssociationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkResourceAssociationIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetServiceNetworkResourceAssociation
      description: |-
        Retrieves information about the specified association between a service network and a resource configuration.
      parameters:
      - name: serviceNetworkResourceAssociationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkResourceAssociationIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /servicenetworkserviceassociations/{serviceNetworkServiceAssociationIdentifier}:
    delete:
      operationId: DeleteServiceNetworkServiceAssociation
      description: |-
        Deletes the association between a service and a service network. This operation fails if an association is still in progress.
      parameters:
      - name: serviceNetworkServiceAssociationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkServiceAssociationIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetServiceNetworkServiceAssociation
      description: |-
        Retrieves information about the specified association between a service network and a service.
      parameters:
      - name: serviceNetworkServiceAssociationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkServiceAssociationIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /servicenetworkvpcassociations/{serviceNetworkVpcAssociationIdentifier}:
    delete:
      operationId: DeleteServiceNetworkVpcAssociation
      description: |-
        Disassociates the VPC from the service network. You can't disassociate the VPC if there is a create or update association in progress.
      parameters:
      - name: serviceNetworkVpcAssociationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkVpcAssociationIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetServiceNetworkVpcAssociation
      description: |-
        Retrieves information about the specified association between a service network and a VPC.
      parameters:
      - name: serviceNetworkVpcAssociationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkVpcAssociationIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateServiceNetworkVpcAssociation
      description: |-
        Updates the service network and VPC association. If you add a security group to the service network and VPC association, the association must continue to have at least one security group. You can add or edit security groups at any time. However, to remove all security groups, you must first delete the association and then recreate it without security groups.
      parameters:
      - name: serviceNetworkVpcAssociationIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkVpcAssociationIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                securityGroupIds:
                  $ref: '#/components/schemas/SecurityGroupList'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /targetgroups/{targetGroupIdentifier}:
    delete:
      operationId: DeleteTargetGroup
      description: |-
        Deletes a target group. You can't delete a target group if it is used in a listener rule or if the target group creation is in progress.
      parameters:
      - name: targetGroupIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TargetGroupIdentifier'
      responses:
        '200': {}
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetTargetGroup
      description: |-
        Retrieves information about the specified target group.
      parameters:
      - name: targetGroupIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TargetGroupIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateTargetGroup
      description: |-
        Updates the specified target group.
      parameters:
      - name: targetGroupIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TargetGroupIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                healthCheck:
                  $ref: '#/components/schemas/HealthCheckConfig'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /targetgroups/{targetGroupIdentifier}/deregistertargets:
    post:
      operationId: DeregisterTargets
      description: |-
        Deregisters the specified targets from the specified target group.
      parameters:
      - name: targetGroupIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TargetGroupIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targets:
                  $ref: '#/components/schemas/TargetList'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /resourceendpointassociations:
    get:
      operationId: ListResourceEndpointAssociations
      description: |-
        Lists the associations for the specified VPC endpoint.
      parameters:
      - name: resourceConfigurationIdentifier
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResourceConfigurationIdentifier'
      - name: resourceEndpointAssociationIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResourceEndpointAssociationIdentifier'
      - name: vpcEndpointId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/VpcEndpointId'
      - name: vpcEndpointOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/VpcEndpointOwner'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /servicenetworkvpcendpointassociations:
    get:
      operationId: ListServiceNetworkVpcEndpointAssociations
      description: |-
        Lists the associations between a service network and a VPC endpoint.
      parameters:
      - name: serviceNetworkIdentifier
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ServiceNetworkIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Lists the tags for the specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Adds the specified tags to the specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes the specified tags from the specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeys'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /targetgroups/{targetGroupIdentifier}/listtargets:
    post:
      operationId: ListTargets
      description: |-
        Lists the targets for the target group. By default, all targets are included. You can use this API to check the health status of targets. You can also ﬁlter the results by target.
      parameters:
      - name: targetGroupIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TargetGroupIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targets:
                  $ref: '#/components/schemas/TargetList'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /targetgroups/{targetGroupIdentifier}/registertargets:
    post:
      operationId: RegisterTargets
      description: |-
        Registers the targets with the target group. If it's a Lambda target, you can only have one target in a target group.
      parameters:
      - name: targetGroupIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TargetGroupIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targets:
                  $ref: '#/components/schemas/TargetList'
      responses:
        '200': {}
        '403':
          description: |-
            The user does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with the current state of the resource. Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input does not satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The user does not have sufficient access to perform this action.
    AccessLogDestinationArn:
      type: string
      pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      minLength: 20
      maxLength: 2048
    AccessLogSubscriptionArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:accesslogsubscription/als-[0-9a-z]{17}$
      minLength: 20
      maxLength: 2048
    AccessLogSubscriptionId:
      type: string
      pattern: ^als-[0-9a-z]{17}$
      minLength: 21
      maxLength: 21
    AccessLogSubscriptionIdentifier:
      type: string
      pattern: ^((als-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:accesslogsubscription/als-[0-9a-z]{17}))$
      minLength: 17
      maxLength: 2048
    AccessLogSubscriptionList:
      type: array
      items:
        $ref: '#/components/schemas/AccessLogSubscriptionSummary'
    AccessLogSubscriptionSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionId'
          description: The ID of the access log subscription.
        arn:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionArn'
          description: The Amazon Resource Name (ARN) of the access log subscription
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The ID of the service or service network.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of the service or service network.
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/AccessLogDestinationArn'
          description: The Amazon Resource Name (ARN) of the destination.
        serviceNetworkLogType:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkLogType'
          description: Log type of the service network.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the access log subscription was created,
            in ISO-8601 format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the access log subscription was last
            updated, in ISO-8601 format.
      required:
      - id
      - arn
      - resourceId
      - resourceArn
      - destinationArn
      - createdAt
      - lastUpdatedAt
      description: Summary information about an access log subscription.
    AccountId:
      type: string
      pattern: ^[0-9]{12}$
      minLength: 1
      maxLength: 12
    Arn:
      type: string
      pattern: ^arn:[a-z0-9][-.a-z0-9]{0,62}:vpc-lattice:([a-z0-9][-.a-z0-9]{0,62})?:\d{12}?:[^/].{0,1023}$
      maxLength: 1224
    ArnResource:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WildcardArn'
          description: The Amazon Resource Name (ARN) of the resource.
      description: The Amazon Resource Name (ARN) of the resource.
    AuthPolicyState:
      type: string
      enum:
      - Active
      - Inactive
    AuthPolicyString:
      type: string
      maxLength: 10000
    AuthType:
      type: string
      enum:
      - NONE
      - AWS_IAM
    BatchUpdateRuleRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        listenerIdentifier:
          allOf:
          - $ref: '#/components/schemas/ListenerIdentifier'
          description: The ID or ARN of the listener.
        rules:
          allOf:
          - $ref: '#/components/schemas/RuleUpdateList'
          description: The rules for the specified listener.
      required:
      - serviceIdentifier
      - listenerIdentifier
      - rules
    BatchUpdateRuleResponse:
      type: object
      properties:
        successful:
          allOf:
          - $ref: '#/components/schemas/RuleUpdateSuccessList'
          description: The rules that were successfully updated.
        unsuccessful:
          allOf:
          - $ref: '#/components/schemas/RuleUpdateFailureList'
          description: The rules that the operation couldn't update.
    Boolean:
      type: boolean
    CertificateArn:
      type: string
      pattern: ^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate/[0-9a-z-]+)?$
      maxLength: 2048
    ClientToken:
      type: string
      pattern: '[!-~]+'
      minLength: 1
      maxLength: 64
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resource ID.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resource type.
      required:
      - message
      - resourceId
      - resourceType
      description: The request conflicts with the current state of the resource. Updating
        or deleting a resource can cause an inconsistent state.
    CreateAccessLogSubscriptionRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        resourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceIdentifier'
          description: The ID or ARN of the service network or service.
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/AccessLogDestinationArn'
          description: The Amazon Resource Name (ARN) of the destination. The supported
            destination types are CloudWatch Log groups, Kinesis Data Firehose delivery
            streams, and Amazon S3 buckets.
        serviceNetworkLogType:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkLogType'
          description: The type of log that monitors your Amazon VPC Lattice service
            networks.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the access log subscription.
      required:
      - resourceIdentifier
      - destinationArn
    CreateAccessLogSubscriptionResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionId'
          description: The ID of the access log subscription.
        arn:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionArn'
          description: The Amazon Resource Name (ARN) of the access log subscription.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The ID of the service network or service.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of the service network or service.
        serviceNetworkLogType:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkLogType'
          description: The type of log that monitors your Amazon VPC Lattice service
            networks.
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/AccessLogDestinationArn'
          description: The Amazon Resource Name (ARN) of the log destination.
      required:
      - id
      - arn
      - resourceId
      - resourceArn
      - destinationArn
    CreateListenerRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        name:
          allOf:
          - $ref: '#/components/schemas/ListenerName'
          description: The name of the listener. A listener name must be unique within
            a service. The valid characters are a-z, 0-9, and hyphens (-). You can't
            use a hyphen as the first or last character, or immediately after another
            hyphen.
        protocol:
          allOf:
          - $ref: '#/components/schemas/ListenerProtocol'
          description: The listener protocol.
        port:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The listener port. You can specify a value from 1 to 65535.
            For HTTP, the default is 80. For HTTPS, the default is 443.
        defaultAction:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action for the default rule. Each listener has a default
            rule. The default rule is used if no other rules match.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the listener.
      required:
      - serviceIdentifier
      - name
      - protocol
      - defaultAction
    CreateListenerResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ListenerArn'
          description: The Amazon Resource Name (ARN) of the listener.
        id:
          allOf:
          - $ref: '#/components/schemas/ListenerId'
          description: The ID of the listener.
        name:
          allOf:
          - $ref: '#/components/schemas/ListenerName'
          description: The name of the listener.
        protocol:
          allOf:
          - $ref: '#/components/schemas/ListenerProtocol'
          description: The protocol of the listener.
        port:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The port number of the listener.
        serviceArn:
          allOf:
          - $ref: '#/components/schemas/ServiceArn'
          description: The Amazon Resource Name (ARN) of the service.
        serviceId:
          allOf:
          - $ref: '#/components/schemas/ServiceId'
          description: The ID of the service.
        defaultAction:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action for the default rule.
    CreateResourceConfigurationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationName'
          description: The name of the resource configuration. The name must be unique
            within the account. The valid characters are a-z, 0-9, and hyphens (-).
            You can't use a hyphen as the first or last character, or immediately
            after another hyphen.
        type:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationType'
          description: "The type of resource configuration.\n\n  * `SINGLE` \\- A\
            \ single resource.\n\n  * `GROUP` \\- A group of resources. You must create\
            \ a group resource configuration before you create a child resource configuration.\n\
            \n  * `CHILD` \\- A single resource that is part of a group resource configuration.\n\
            \n  * `ARN` \\- An Amazon Web Services resource."
        portRanges:
          allOf:
          - $ref: '#/components/schemas/PortRangeList'
          description: '(SINGLE, GROUP, CHILD) The TCP port ranges that a consumer
            can use to access a resource configuration (for example: 1-65535). You
            can separate port ranges using commas (for example: 1,2,22-30).'
        protocol:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: (SINGLE, GROUP) The protocol accepted by the resource configuration.
        resourceGatewayIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayIdentifier'
          description: (SINGLE, GROUP, ARN) The ID or ARN of the resource gateway
            used to connect to the resource configuration. For a child resource configuration,
            this value is inherited from the parent resource configuration.
        resourceConfigurationGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationIdentifier'
          description: (CHILD) The ID or ARN of the parent resource configuration
            (type is `GROUP`). This is used to associate a child resource configuration
            with a group resource configuration.
        resourceConfigurationDefinition:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationDefinition'
          description: (SINGLE, CHILD, ARN) The resource configuration.
        allowAssociationToShareableServiceNetwork:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: (SINGLE, GROUP, ARN) Specifies whether the resource configuration
            can be associated with a sharable service network. The default is false.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the resource configuration.
      required:
      - name
      - type
    CreateResourceConfigurationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the resource configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationName'
          description: The name of the resource configuration.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationArn'
          description: The Amazon Resource Name (ARN) of the resource configuration.
        resourceGatewayId:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayId'
          description: The ID of the resource gateway associated with the resource
            configuration.
        resourceConfigurationGroupId:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the parent resource configuration (type is GROUP).
        type:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationType'
          description: The type of resource configuration.
        portRanges:
          allOf:
          - $ref: '#/components/schemas/PortRangeList'
          description: The port range.
        protocol:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The protocol.
        status:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationStatus'
          description: The current status of the resource configuration.
        resourceConfigurationDefinition:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationDefinition'
          description: The resource configuration.
        allowAssociationToShareableServiceNetwork:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the resource configuration can be associated
            with a sharable service network.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the resource configuration was created,
            in ISO-8601 format.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason that the request failed.
    CreateResourceGatewayRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayName'
          description: The name of the resource gateway.
        vpcIdentifier:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC for the resource gateway.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetList'
          description: The IDs of the VPC subnets in which to create the resource
            gateway.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The IDs of the security groups to apply to the resource gateway.
            The security groups must be in the same VPC.
        ipAddressType:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayIpAddressType'
          description: The type of IP address used by the resource gateway.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the resource gateway.
      required:
      - name
      - vpcIdentifier
      - subnetIds
    CreateResourceGatewayResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayName'
          description: The name of the resource gateway.
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayId'
          description: The ID of the resource gateway.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayArn'
          description: The Amazon Resource Name (ARN) of the resource gateway.
        status:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayStatus'
          description: The status of the resource gateway.
        vpcIdentifier:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetList'
          description: The IDs of the resource gateway subnets.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The IDs of the security groups for the resource gateway.
        ipAddressType:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayIpAddressType'
          description: The type of IP address for the resource gateway.
    CreateRuleRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        listenerIdentifier:
          allOf:
          - $ref: '#/components/schemas/ListenerIdentifier'
          description: The ID or ARN of the listener.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the rule. The name must be unique within the listener.
            The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen
            as the first or last character, or immediately after another hyphen.
        match:
          allOf:
          - $ref: '#/components/schemas/RuleMatch'
          description: The rule match.
        priority:
          allOf:
          - $ref: '#/components/schemas/RulePriority'
          description: The priority assigned to the rule. Each rule for a specific
            listener must have a unique priority. The lower the priority number the
            higher the priority.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action for the default rule.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the rule.
      required:
      - serviceIdentifier
      - listenerIdentifier
      - name
      - match
      - priority
      - action
    CreateRuleResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RuleArn'
          description: The Amazon Resource Name (ARN) of the rule.
        id:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the rule.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the rule.
        match:
          allOf:
          - $ref: '#/components/schemas/RuleMatch'
          description: The rule match. The `RuleMatch` must be an `HttpMatch`. This
            means that the rule should be an exact match on HTTP constraints which
            are made up of the HTTP method, path, and header.
        priority:
          allOf:
          - $ref: '#/components/schemas/RulePriority'
          description: The priority assigned to the rule. The lower the priority number
            the higher the priority.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The rule action.
    CreateServiceNetworkRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkName'
          description: The name of the service network. The name must be unique to
            the account. The valid characters are a-z, 0-9, and hyphens (-). You can't
            use a hyphen as the first or last character, or immediately after another
            hyphen.
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: "The type of IAM policy.\n\n  * `NONE`: The resource does not\
            \ use an IAM policy. This is the default.\n\n  * `AWS_IAM`: The resource\
            \ uses an IAM policy. When this type is used, auth is enabled and an auth\
            \ policy is required."
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the service network.
        sharingConfig:
          allOf:
          - $ref: '#/components/schemas/SharingConfig'
          description: Specify if the service network should be enabled for sharing.
      required:
      - name
    CreateServiceNetworkResourceAssociationRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        resourceConfigurationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationIdentifier'
          description: The ID of the resource configuration to associate with the
            service network.
        serviceNetworkIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifierWithoutRegex'
          description: The ID of the service network to associate with the resource
            configuration.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the association.
      required:
      - resourceConfigurationIdentifier
      - serviceNetworkIdentifier
    CreateServiceNetworkResourceAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationId'
          description: The ID of the association.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationStatus'
          description: The status of the association.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The ID of the account that created the association.
    CreateServiceNetworkResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkId'
          description: The ID of the service network.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkName'
          description: The name of the service network.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkArn'
          description: The Amazon Resource Name (ARN) of the service network.
        sharingConfig:
          allOf:
          - $ref: '#/components/schemas/SharingConfig'
          description: Specifies if the service network is enabled for sharing.
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: The type of IAM policy.
    CreateServiceNetworkServiceAssociationRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        serviceNetworkIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifier'
          description: The ID or ARN of the service network. You must use an ARN if
            the resources are in different accounts.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the association.
      required:
      - serviceIdentifier
      - serviceNetworkIdentifier
    CreateServiceNetworkServiceAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationIdentifier'
          description: The ID of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationStatus'
          description: The association status.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that created the association.
        customDomainName:
          allOf:
          - $ref: '#/components/schemas/ServiceCustomDomainName'
          description: The custom domain name of the service.
        dnsEntry:
          allOf:
          - $ref: '#/components/schemas/DnsEntry'
          description: The DNS name of the service.
    CreateServiceNetworkVpcAssociationRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        serviceNetworkIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifier'
          description: The ID or ARN of the service network. You must use an ARN if
            the resources are in different accounts.
        vpcIdentifier:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The IDs of the security groups. Security groups aren't added
            by default. You can add a security group to apply network level controls
            to control which resources in a VPC are allowed to access the service
            network and its services. For more information, see [Control traffic to
            resources using security groups](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html)
            in the _Amazon VPC User Guide_.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the association.
      required:
      - serviceNetworkIdentifier
      - vpcIdentifier
    CreateServiceNetworkVpcAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationId'
          description: The ID of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationStatus'
          description: The association status.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that created the association.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The IDs of the security groups.
    CreateServiceRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the service. The name must be unique within the
            account. The valid characters are a-z, 0-9, and hyphens (-). You can't
            use a hyphen as the first or last character, or immediately after another
            hyphen.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the service.
        customDomainName:
          allOf:
          - $ref: '#/components/schemas/ServiceCustomDomainName'
          description: The custom domain name of the service.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/CertificateArn'
          description: The Amazon Resource Name (ARN) of the certificate.
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: "The type of IAM policy.\n\n  * `NONE`: The resource does not\
            \ use an IAM policy. This is the default.\n\n  * `AWS_IAM`: The resource\
            \ uses an IAM policy. When this type is used, auth is enabled and an auth\
            \ policy is required."
      required:
      - name
    CreateServiceResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceId'
          description: The ID of the service.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceArn'
          description: The Amazon Resource Name (ARN) of the service.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the service.
        customDomainName:
          allOf:
          - $ref: '#/components/schemas/ServiceCustomDomainName'
          description: The custom domain name of the service.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/CertificateArn'
          description: The Amazon Resource Name (ARN) of the certificate.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceStatus'
          description: The status. If the status is `CREATE_FAILED`, you must delete
            and recreate the service.
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: The type of IAM policy.
        dnsEntry:
          allOf:
          - $ref: '#/components/schemas/DnsEntry'
          description: The public DNS name of the service.
    CreateTargetGroupRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/TargetGroupName'
          description: The name of the target group. The name must be unique within
            the account. The valid characters are a-z, 0-9, and hyphens (-). You can't
            use a hyphen as the first or last character, or immediately after another
            hyphen.
        type:
          allOf:
          - $ref: '#/components/schemas/TargetGroupType'
          description: The type of target group.
        config:
          allOf:
          - $ref: '#/components/schemas/TargetGroupConfig'
          description: The target group configuration.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. If you retry a request that completed
            successfully using the same client token and parameters, the retry succeeds
            without performing any actions. If the parameters aren't identical, the
            retry fails.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the target group.
      required:
      - name
      - type
    CreateTargetGroupResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/TargetGroupId'
          description: The ID of the target group.
        arn:
          allOf:
          - $ref: '#/components/schemas/TargetGroupArn'
          description: The Amazon Resource Name (ARN) of the target group.
        name:
          allOf:
          - $ref: '#/components/schemas/TargetGroupName'
          description: The name of the target group.
        type:
          allOf:
          - $ref: '#/components/schemas/TargetGroupType'
          description: The type of target group.
        config:
          allOf:
          - $ref: '#/components/schemas/TargetGroupConfig'
          description: The target group configuration.
        status:
          allOf:
          - $ref: '#/components/schemas/TargetGroupStatus'
          description: The status. You can retry the operation if the status is `CREATE_FAILED`.
            However, if you retry it while the status is `CREATE_IN_PROGRESS`, there
            is no change in the status.
    DeleteAccessLogSubscriptionRequest:
      type: object
      properties:
        accessLogSubscriptionIdentifier:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionIdentifier'
          description: The ID or ARN of the access log subscription.
      required:
      - accessLogSubscriptionIdentifier
    DeleteAccessLogSubscriptionResponse:
      type: object
      properties: {}
    DeleteAuthPolicyRequest:
      type: object
      properties:
        resourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceIdentifier'
          description: The ID or ARN of the resource.
      required:
      - resourceIdentifier
    DeleteAuthPolicyResponse:
      type: object
      properties: {}
    DeleteListenerRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        listenerIdentifier:
          allOf:
          - $ref: '#/components/schemas/ListenerIdentifier'
          description: The ID or ARN of the listener.
      required:
      - serviceIdentifier
      - listenerIdentifier
    DeleteListenerResponse:
      type: object
      properties: {}
    DeleteResourceConfigurationRequest:
      type: object
      properties:
        resourceConfigurationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationIdentifier'
          description: The ID or ARN of the resource configuration.
      required:
      - resourceConfigurationIdentifier
    DeleteResourceConfigurationResponse:
      type: object
      properties: {}
    DeleteResourceEndpointAssociationRequest:
      type: object
      properties:
        resourceEndpointAssociationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceEndpointAssociationIdentifier'
          description: The ID or ARN of the association.
      required:
      - resourceEndpointAssociationIdentifier
    DeleteResourceEndpointAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceEndpointAssociationId'
          description: The ID of the association.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceEndpointAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        resourceConfigurationId:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the resource configuration.
        resourceConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationArn'
          description: The Amazon Resource Name (ARN) of the resource configuration
            associated with the VPC endpoint of type resource.
        vpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: The ID of the resource VPC endpoint that is associated with
            the resource configuration.
    DeleteResourceGatewayRequest:
      type: object
      properties:
        resourceGatewayIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayIdentifier'
          description: The ID or ARN of the resource gateway.
      required:
      - resourceGatewayIdentifier
    DeleteResourceGatewayResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayId'
          description: The ID of the resource gateway.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayArn'
          description: The Amazon Resource Name (ARN) of the resource gateway.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayName'
          description: The name of the resource gateway.
        status:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayStatus'
          description: The status of the resource gateway.
    DeleteResourcePolicyRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of the resource.
      required:
      - resourceArn
    DeleteResourcePolicyResponse:
      type: object
      properties: {}
    DeleteRuleRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        listenerIdentifier:
          allOf:
          - $ref: '#/components/schemas/ListenerIdentifier'
          description: The ID or ARN of the listener.
        ruleIdentifier:
          allOf:
          - $ref: '#/components/schemas/RuleIdentifier'
          description: The ID or ARN of the rule.
      required:
      - serviceIdentifier
      - listenerIdentifier
      - ruleIdentifier
    DeleteRuleResponse:
      type: object
      properties: {}
    DeleteServiceNetworkRequest:
      type: object
      properties:
        serviceNetworkIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifier'
          description: The ID or ARN of the service network.
      required:
      - serviceNetworkIdentifier
    DeleteServiceNetworkResourceAssociationRequest:
      type: object
      properties:
        serviceNetworkResourceAssociationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationIdentifier'
          description: The ID of the association.
      required:
      - serviceNetworkResourceAssociationIdentifier
    DeleteServiceNetworkResourceAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationId'
          description: The ID of the association.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationStatus'
          description: The status of the association.
    DeleteServiceNetworkResponse:
      type: object
      properties: {}
    DeleteServiceNetworkServiceAssociationRequest:
      type: object
      properties:
        serviceNetworkServiceAssociationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationIdentifier'
          description: The ID or ARN of the association.
      required:
      - serviceNetworkServiceAssociationIdentifier
    DeleteServiceNetworkServiceAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationIdentifier'
          description: The ID of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationStatus'
          description: The status. You can retry the operation if the status is `DELETE_FAILED`.
            However, if you retry it when the status is `DELETE_IN_PROGRESS`, there
            is no change in the status.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
    DeleteServiceNetworkVpcAssociationRequest:
      type: object
      properties:
        serviceNetworkVpcAssociationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationIdentifier'
          description: The ID or ARN of the association.
      required:
      - serviceNetworkVpcAssociationIdentifier
    DeleteServiceNetworkVpcAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationId'
          description: The ID of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationStatus'
          description: The status. You can retry the operation if the status is `DELETE_FAILED`.
            However, if you retry it while the status is `DELETE_IN_PROGRESS`, there
            is no change in the status.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
    DeleteServiceRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
      required:
      - serviceIdentifier
    DeleteServiceResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceId'
          description: The ID of the service.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceArn'
          description: The Amazon Resource Name (ARN) of the service.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the service.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceStatus'
          description: The status. You can retry the operation if the status is `DELETE_FAILED`.
            However, if you retry it while the status is `DELETE_IN_PROGRESS`, the
            status doesn't change.
    DeleteTargetGroupRequest:
      type: object
      properties:
        targetGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/TargetGroupIdentifier'
          description: The ID or ARN of the target group.
      required:
      - targetGroupIdentifier
    DeleteTargetGroupResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/TargetGroupId'
          description: The ID of the target group.
        arn:
          allOf:
          - $ref: '#/components/schemas/TargetGroupArn'
          description: The Amazon Resource Name (ARN) of the target group.
        status:
          allOf:
          - $ref: '#/components/schemas/TargetGroupStatus'
          description: The status. You can retry the operation if the status is `DELETE_FAILED`.
            However, if you retry it while the status is `DELETE_IN_PROGRESS`, the
            status doesn't change.
    DeregisterTargetsRequest:
      type: object
      properties:
        targetGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/TargetGroupIdentifier'
          description: The ID or ARN of the target group.
        targets:
          allOf:
          - $ref: '#/components/schemas/TargetList'
          description: The targets to deregister.
      required:
      - targetGroupIdentifier
      - targets
    DeregisterTargetsResponse:
      type: object
      properties:
        successful:
          allOf:
          - $ref: '#/components/schemas/TargetList'
          description: The targets that were successfully deregistered.
        unsuccessful:
          allOf:
          - $ref: '#/components/schemas/TargetFailureList'
          description: The targets that the operation couldn't deregister.
    DnsEntry:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The domain name of the service.
        hostedZoneId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the hosted zone.
      description: Describes the DNS information of a service.
    DnsResource:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain name of the resource.
        ipAddressType:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationIpAddressType'
          description: The type of IP address.
      description: The DNS name of the resource.
    DomainName:
      type: string
      minLength: 3
      maxLength: 255
    FailureCode:
      type: string
    FailureMessage:
      type: string
    FixedResponseAction:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/HttpStatusCode'
          description: The HTTP response code.
      required:
      - statusCode
      description: Describes an action that returns a custom HTTP response.
    ForwardAction:
      type: object
      properties:
        targetGroups:
          allOf:
          - $ref: '#/components/schemas/WeightedTargetGroupList'
          description: 'The target groups. Traffic matching the rule is forwarded
            to the specified target groups. With forward actions, you can assign a
            weight that controls the prioritization and selection of each target group.
            This means that requests are distributed to individual target groups based
            on their weights. For example, if two target groups have the same weight,
            each target group receives half of the traffic.


            The default value is 1. This means that if only one target group is provided,
            there is no need to set the weight; 100% of the traffic goes to that target
            group.'
      required:
      - targetGroups
      description: Describes a forward action. You can use forward actions to route
        requests to one or more target groups.
    GetAccessLogSubscriptionRequest:
      type: object
      properties:
        accessLogSubscriptionIdentifier:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionIdentifier'
          description: The ID or ARN of the access log subscription.
      required:
      - accessLogSubscriptionIdentifier
    GetAccessLogSubscriptionResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionId'
          description: The ID of the access log subscription.
        arn:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionArn'
          description: The Amazon Resource Name (ARN) of the access log subscription.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The ID of the service network or service.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of the service network or service.
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/AccessLogDestinationArn'
          description: The Amazon Resource Name (ARN) of the access log destination.
        serviceNetworkLogType:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkLogType'
          description: The log type for the service network.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the access log subscription was created,
            in ISO-8601 format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the access log subscription was last
            updated, in ISO-8601 format.
      required:
      - id
      - arn
      - resourceId
      - resourceArn
      - destinationArn
      - createdAt
      - lastUpdatedAt
    GetAuthPolicyRequest:
      type: object
      properties:
        resourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceIdentifier'
          description: The ID or ARN of the service network or service.
      required:
      - resourceIdentifier
    GetAuthPolicyResponse:
      type: object
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/AuthPolicyString'
          description: The auth policy.
        state:
          allOf:
          - $ref: '#/components/schemas/AuthPolicyState'
          description: The state of the auth policy. The auth policy is only active
            when the auth type is set to `AWS_IAM`. If you provide a policy, then
            authentication and authorization decisions are made based on this policy
            and the client's IAM policy. If the auth type is `NONE`, then any auth
            policy that you provide remains inactive. For more information, see [Create
            a service network](https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html#create-service-network)
            in the _Amazon VPC Lattice User Guide_.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the auth policy was created, in ISO-8601
            format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the auth policy was last updated, in
            ISO-8601 format.
    GetListenerRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        listenerIdentifier:
          allOf:
          - $ref: '#/components/schemas/ListenerIdentifier'
          description: The ID or ARN of the listener.
      required:
      - serviceIdentifier
      - listenerIdentifier
    GetListenerResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ListenerArn'
          description: The Amazon Resource Name (ARN) of the listener.
        id:
          allOf:
          - $ref: '#/components/schemas/ListenerId'
          description: The ID of the listener.
        name:
          allOf:
          - $ref: '#/components/schemas/ListenerName'
          description: The name of the listener.
        protocol:
          allOf:
          - $ref: '#/components/schemas/ListenerProtocol'
          description: The listener protocol.
        port:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The listener port.
        serviceArn:
          allOf:
          - $ref: '#/components/schemas/ServiceArn'
          description: The Amazon Resource Name (ARN) of the service.
        serviceId:
          allOf:
          - $ref: '#/components/schemas/ServiceId'
          description: The ID of the service.
        defaultAction:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The actions for the default listener rule.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the listener was created, in ISO-8601
            format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the listener was last updated, in ISO-8601
            format.
    GetResourceConfigurationRequest:
      type: object
      properties:
        resourceConfigurationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationIdentifier'
          description: The ID of the resource configuration.
      required:
      - resourceConfigurationIdentifier
    GetResourceConfigurationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the resource configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationName'
          description: The name of the resource configuration.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationArn'
          description: The Amazon Resource Name (ARN) of the resource configuration.
        resourceGatewayId:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayId'
          description: The ID of the resource gateway used to connect to the resource
            configuration in a given VPC. You can specify the resource gateway identifier
            only for resource configurations with type SINGLE, GROUP, or ARN.
        resourceConfigurationGroupId:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the group resource configuration.
        type:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationType'
          description: "The type of resource configuration.\n\n  * `SINGLE` \\- A\
            \ single resource.\n\n  * `GROUP` \\- A group of resources.\n\n  * `CHILD`\
            \ \\- A single resource that is part of a group resource configuration.\n\
            \n  * `ARN` \\- An Amazon Web Services resource."
        allowAssociationToShareableServiceNetwork:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the resource configuration is associated
            with a sharable service network.
        portRanges:
          allOf:
          - $ref: '#/components/schemas/PortRangeList'
          description: 'The TCP port ranges that a consumer can use to access a resource
            configuration. You can separate port ranges with a comma. Example: 1-65535
            or 1,2,22-30'
        protocol:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The TCP protocol accepted by the specified resource configuration.
        customDomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The custom domain name of the resource configuration.
        status:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationStatus'
          description: The status of the resource configuration.
        resourceConfigurationDefinition:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationDefinition'
          description: The resource configuration.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the resource configuration was created,
            in ISO-8601 format.
        amazonManaged:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the resource configuration was created and
            is managed by Amazon.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason the create-resource-configuration request failed.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent date and time that the resource configuration
            was updated, in ISO-8601 format.
    GetResourceGatewayRequest:
      type: object
      properties:
        resourceGatewayIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayIdentifier'
          description: The ID of the resource gateway.
      required:
      - resourceGatewayIdentifier
    GetResourceGatewayResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayName'
          description: The name of the resource gateway.
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayId'
          description: The ID of the resource gateway.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayArn'
          description: The Amazon Resource Name (ARN) of the resource gateway.
        status:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayStatus'
          description: The status for the resource gateway.
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC for the resource gateway.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetList'
          description: The IDs of the VPC subnets for resource gateway.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The security group IDs associated with the resource gateway.
        ipAddressType:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayIpAddressType'
          description: The type of IP address for the resource gateway.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the resource gateway was created, in
            ISO-8601 format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the resource gateway was last updated,
            in ISO-8601 format.
    GetResourcePolicyRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of the service network or service.
      required:
      - resourceArn
    GetResourcePolicyResponse:
      type: object
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/PolicyString'
          description: An IAM policy.
    GetRuleRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        listenerIdentifier:
          allOf:
          - $ref: '#/components/schemas/ListenerIdentifier'
          description: The ID or ARN of the listener.
        ruleIdentifier:
          allOf:
          - $ref: '#/components/schemas/RuleIdentifier'
          description: The ID or ARN of the listener rule.
      required:
      - serviceIdentifier
      - listenerIdentifier
      - ruleIdentifier
    GetRuleResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RuleArn'
          description: The Amazon Resource Name (ARN) of the listener.
        id:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the listener.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the listener.
        isDefault:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether this is the default rule.
        match:
          allOf:
          - $ref: '#/components/schemas/RuleMatch'
          description: The rule match.
        priority:
          allOf:
          - $ref: '#/components/schemas/RulePriority'
          description: The priority level for the specified rule.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action for the default rule.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the listener rule was created, in ISO-8601
            format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the listener rule was last updated,
            in ISO-8601 format.
    GetServiceNetworkRequest:
      type: object
      properties:
        serviceNetworkIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifier'
          description: The ID or ARN of the service network.
      required:
      - serviceNetworkIdentifier
    GetServiceNetworkResourceAssociationRequest:
      type: object
      properties:
        serviceNetworkResourceAssociationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationIdentifier'
          description: The ID of the association.
      required:
      - serviceNetworkResourceAssociationIdentifier
    GetServiceNetworkResourceAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationId'
          description: The ID of the association.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationStatus'
          description: The status of the association.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that created the association.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the association was created, in ISO-8601
            format.
        resourceConfigurationId:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the resource configuration that is associated with
            the service network.
        resourceConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationArn'
          description: The Amazon Resource Name (ARN) of the association.
        resourceConfigurationName:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationName'
          description: The name of the resource configuration that is associated with
            the service network.
        serviceNetworkId:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifierWithoutRegex'
          description: The ID of the service network that is associated with the resource
            configuration.
        serviceNetworkArn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifierWithoutRegex'
          description: The Amazon Resource Name (ARN) of the service network that
            is associated with the resource configuration.
        serviceNetworkName:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkNameWithoutRegex'
          description: The name of the service network that is associated with the
            resource configuration.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason the association request failed.
        failureCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The failure code.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent date and time that the association was updated,
            in ISO-8601 format.
        privateDnsEntry:
          allOf:
          - $ref: '#/components/schemas/DnsEntry'
          description: The private DNS entry for the service.
        dnsEntry:
          allOf:
          - $ref: '#/components/schemas/DnsEntry'
          description: The DNS entry for the service.
        isManagedAssociation:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the association is managed by Amazon.
    GetServiceNetworkResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkId'
          description: The ID of the service network.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkName'
          description: The name of the service network.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the service network was created, in
            ISO-8601 format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time of the last update, in ISO-8601 format.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkArn'
          description: The Amazon Resource Name (ARN) of the service network.
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: The type of IAM policy.
        sharingConfig:
          allOf:
          - $ref: '#/components/schemas/SharingConfig'
          description: Specifies if the service network is enabled for sharing.
        numberOfAssociatedVPCs:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of VPCs associated with the service network.
        numberOfAssociatedServices:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of services associated with the service network.
    GetServiceNetworkServiceAssociationRequest:
      type: object
      properties:
        serviceNetworkServiceAssociationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationIdentifier'
          description: The ID or ARN of the association.
      required:
      - serviceNetworkServiceAssociationIdentifier
    GetServiceNetworkServiceAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationIdentifier'
          description: The ID of the service network and service association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationStatus'
          description: The status of the association.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that created the association.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the association was created, in ISO-8601
            format.
        serviceId:
          allOf:
          - $ref: '#/components/schemas/ServiceId'
          description: The ID of the service.
        serviceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the service.
        serviceArn:
          allOf:
          - $ref: '#/components/schemas/ServiceArn'
          description: The Amazon Resource Name (ARN) of the service.
        serviceNetworkId:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkId'
          description: The ID of the service network.
        serviceNetworkName:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkName'
          description: The name of the service network.
        serviceNetworkArn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkArn'
          description: The Amazon Resource Name (ARN) of the service network.
        dnsEntry:
          allOf:
          - $ref: '#/components/schemas/DnsEntry'
          description: The DNS name of the service.
        customDomainName:
          allOf:
          - $ref: '#/components/schemas/ServiceCustomDomainName'
          description: The custom domain name of the service.
        failureMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The failure message.
        failureCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The failure code.
    GetServiceNetworkVpcAssociationRequest:
      type: object
      properties:
        serviceNetworkVpcAssociationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationIdentifier'
          description: The ID or ARN of the association.
      required:
      - serviceNetworkVpcAssociationIdentifier
    GetServiceNetworkVpcAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationId'
          description: The ID of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationStatus'
          description: The status of the association.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that created the association.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the association was created, in ISO-8601
            format.
        serviceNetworkId:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkId'
          description: The ID of the service network.
        serviceNetworkName:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkName'
          description: The name of the service network.
        serviceNetworkArn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkArn'
          description: The Amazon Resource Name (ARN) of the service network.
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The IDs of the security groups.
        failureMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The failure message.
        failureCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The failure code.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the association was last updated, in
            ISO-8601 format.
    GetServiceRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
      required:
      - serviceIdentifier
    GetServiceResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceId'
          description: The ID of the service.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the service.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceArn'
          description: The Amazon Resource Name (ARN) of the service.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the service was created, in ISO-8601
            format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the service was last updated, in ISO-8601
            format.
        dnsEntry:
          allOf:
          - $ref: '#/components/schemas/DnsEntry'
          description: The DNS name of the service.
        customDomainName:
          allOf:
          - $ref: '#/components/schemas/ServiceCustomDomainName'
          description: The custom domain name of the service.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/CertificateArn'
          description: The Amazon Resource Name (ARN) of the certificate.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceStatus'
          description: The status of the service.
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: The type of IAM policy.
        failureCode:
          allOf:
          - $ref: '#/components/schemas/FailureCode'
          description: The failure code.
        failureMessage:
          allOf:
          - $ref: '#/components/schemas/FailureMessage'
          description: The failure message.
    GetTargetGroupRequest:
      type: object
      properties:
        targetGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/TargetGroupIdentifier'
          description: The ID or ARN of the target group.
      required:
      - targetGroupIdentifier
    GetTargetGroupResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/TargetGroupId'
          description: The ID of the target group.
        arn:
          allOf:
          - $ref: '#/components/schemas/TargetGroupArn'
          description: The Amazon Resource Name (ARN) of the target group.
        name:
          allOf:
          - $ref: '#/components/schemas/TargetGroupName'
          description: The name of the target group.
        type:
          allOf:
          - $ref: '#/components/schemas/TargetGroupType'
          description: The target group type.
        config:
          allOf:
          - $ref: '#/components/schemas/TargetGroupConfig'
          description: The target group configuration.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the target group was created, in ISO-8601
            format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the target group was last updated, in
            ISO-8601 format.
        status:
          allOf:
          - $ref: '#/components/schemas/TargetGroupStatus'
          description: The status.
        serviceArns:
          allOf:
          - $ref: '#/components/schemas/ServiceArnList'
          description: The Amazon Resource Names (ARNs) of the service.
        failureMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The failure message.
        failureCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The failure code.
    HeaderMatch:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/HeaderMatchName'
          description: The name of the header.
        match:
          allOf:
          - $ref: '#/components/schemas/HeaderMatchType'
          description: The header match type.
        caseSensitive:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the match is case sensitive.
      required:
      - name
      - match
      description: Describes the constraints for a header match. Matches incoming
        requests with rule based on request header value before applying rule action.
    HeaderMatchContains:
      type: string
      minLength: 1
      maxLength: 200
    HeaderMatchExact:
      type: string
      minLength: 1
      maxLength: 200
    HeaderMatchList:
      type: array
      items:
        $ref: '#/components/schemas/HeaderMatch'
    HeaderMatchName:
      type: string
      minLength: 1
      maxLength: 100
    HeaderMatchPrefix:
      type: string
      minLength: 1
      maxLength: 200
    HeaderMatchType:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/HeaderMatchExact'
        description: |-
          An exact type match.
      - allOf:
        - $ref: '#/components/schemas/HeaderMatchPrefix'
        description: |-
          A prefix type match. Matches the value with the prefix.
      - allOf:
        - $ref: '#/components/schemas/HeaderMatchContains'
        description: |-
          A contains type match.
      description: |-
        Describes a header match type.
    HealthCheckConfig:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether health checking is enabled.
        protocol:
          allOf:
          - $ref: '#/components/schemas/TargetGroupProtocol'
          description: The protocol used when performing health checks on targets.
            The possible protocols are `HTTP` and `HTTPS`. The default is `HTTP`.
        protocolVersion:
          allOf:
          - $ref: '#/components/schemas/HealthCheckProtocolVersion'
          description: The protocol version used when performing health checks on
            targets. The possible protocol versions are `HTTP1` and `HTTP2`.
        port:
          allOf:
          - $ref: '#/components/schemas/HealthCheckPort'
          description: The port used when performing health checks on targets. The
            default setting is the port that a target receives traffic on.
        path:
          allOf:
          - $ref: '#/components/schemas/HealthCheckPath'
          description: The destination for health checks on the targets. If the protocol
            version is `HTTP/1.1` or `HTTP/2`, specify a valid URI (for example, `/path?query`).
            The default path is `/`. Health checks are not supported if the protocol
            version is `gRPC`, however, you can choose `HTTP/1.1` or `HTTP/2` and
            specify a valid URI.
        healthCheckIntervalSeconds:
          allOf:
          - $ref: '#/components/schemas/HealthCheckIntervalSeconds'
          description: The approximate amount of time, in seconds, between health
            checks of an individual target. The range is 5–300 seconds. The default
            is 30 seconds.
        healthCheckTimeoutSeconds:
          allOf:
          - $ref: '#/components/schemas/HealthCheckTimeoutSeconds'
          description: The amount of time, in seconds, to wait before reporting a
            target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
        healthyThresholdCount:
          allOf:
          - $ref: '#/components/schemas/HealthyThresholdCount'
          description: The number of consecutive successful health checks required
            before considering an unhealthy target healthy. The range is 2–10. The
            default is 5.
        unhealthyThresholdCount:
          allOf:
          - $ref: '#/components/schemas/UnhealthyThresholdCount'
          description: The number of consecutive failed health checks required before
            considering a target unhealthy. The range is 2–10. The default is 2.
        matcher:
          allOf:
          - $ref: '#/components/schemas/Matcher'
          description: The codes to use when checking for a successful response from
            a target.
      description: Describes the health check configuration of a target group. Health
        check configurations aren't used for target groups of type `LAMBDA` or `ALB`.
    HealthCheckIntervalSeconds:
      type: integer
      minimum: 0
      maximum: 300
    HealthCheckPath:
      type: string
      pattern: (^/[a-zA-Z0-9@:%_+.~#?&/=-]*$|(^$))
      minLength: 0
      maxLength: 2048
    HealthCheckPort:
      type: integer
      minimum: 0
      maximum: 65535
    HealthCheckProtocolVersion:
      type: string
      enum:
      - HTTP1
      - HTTP2
    HealthCheckTimeoutSeconds:
      type: integer
      minimum: 0
      maximum: 120
    HealthyThresholdCount:
      type: integer
      minimum: 0
      maximum: 10
    HttpCodeMatcher:
      type: string
      pattern: (^[0-9-,]+$|(^$))
      minLength: 0
      maxLength: 2000
    HttpMatch:
      type: object
      properties:
        method:
          allOf:
          - $ref: '#/components/schemas/HttpMethod'
          description: The HTTP method type.
        pathMatch:
          allOf:
          - $ref: '#/components/schemas/PathMatch'
          description: The path match.
        headerMatches:
          allOf:
          - $ref: '#/components/schemas/HeaderMatchList'
          description: The header matches. Matches incoming requests with rule based
            on request header value before applying rule action.
      description: Describes criteria that can be applied to incoming requests.
    HttpMethod:
      type: string
      maxLength: 16
    HttpStatusCode:
      type: integer
      minimum: 100
      maximum: 599
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of seconds to wait before retrying.
      required:
      - message
      description: An unexpected error occurred while processing the request.
    IpAddress:
      type: string
      minLength: 4
      maxLength: 39
    IpAddressType:
      type: string
      enum:
      - IPV4
      - IPV6
    IpResource:
      type: object
      properties:
        ipAddress:
          allOf:
          - $ref: '#/components/schemas/IpAddress'
          description: The IP address of the IP resource.
      description: Describes an IP resource.
    LambdaEventStructureVersion:
      type: string
      enum:
      - V1
      - V2
    ListAccessLogSubscriptionsRequest:
      type: object
      properties:
        resourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceIdentifier'
          description: The ID or ARN of the service network or service.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
      required:
      - resourceIdentifier
    ListAccessLogSubscriptionsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionList'
          description: Information about the access log subscriptions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
      required:
      - items
    ListListenersRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
      required:
      - serviceIdentifier
    ListListenersResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListenerSummaryList'
          description: Information about the listeners.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
      required:
      - items
    ListResourceConfigurationsRequest:
      type: object
      properties:
        resourceGatewayIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayIdentifier'
          description: The ID of the resource gateway for the resource configuration.
        resourceConfigurationGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationIdentifier'
          description: The ID of the group resource configuration.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum page size.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
    ListResourceConfigurationsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationSummaryList'
          description: Information about the resource configurations.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
    ListResourceEndpointAssociationsRequest:
      type: object
      properties:
        resourceConfigurationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationIdentifier'
          description: The ID for the resource configuration associated with the VPC
            endpoint.
        resourceEndpointAssociationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceEndpointAssociationIdentifier'
          description: The ID of the association.
        vpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: The ID of the VPC endpoint in the association.
        vpcEndpointOwner:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointOwner'
          description: The owner of the VPC endpoint in the association.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum page size.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
      required:
      - resourceConfigurationIdentifier
    ListResourceEndpointAssociationsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ResourceEndpointAssociationList'
          description: Information about the VPC endpoint associations.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
      required:
      - items
    ListResourceGatewaysRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum page size.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
    ListResourceGatewaysResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayList'
          description: Information about the resource gateways.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
    ListRulesRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        listenerIdentifier:
          allOf:
          - $ref: '#/components/schemas/ListenerIdentifier'
          description: The ID or ARN of the listener.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
      required:
      - serviceIdentifier
      - listenerIdentifier
    ListRulesResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/RuleSummaryList'
          description: Information about the rules.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
      required:
      - items
    ListServiceNetworkResourceAssociationsRequest:
      type: object
      properties:
        serviceNetworkIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifier'
          description: The ID of the service network.
        resourceConfigurationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationIdentifier'
          description: The ID of the resource configurationk.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum page size.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
    ListServiceNetworkResourceAssociationsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationList'
          description: Information about the associations.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
      required:
      - items
    ListServiceNetworkServiceAssociationsRequest:
      type: object
      properties:
        serviceNetworkIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifier'
          description: The ID or ARN of the service network.
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
    ListServiceNetworkServiceAssociationsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationList'
          description: Information about the associations.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
      required:
      - items
    ListServiceNetworkVpcAssociationsRequest:
      type: object
      properties:
        serviceNetworkIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifier'
          description: The ID or ARN of the service network.
        vpcIdentifier:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID or ARN of the VPC.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
    ListServiceNetworkVpcAssociationsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationList'
          description: Information about the associations.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
      required:
      - items
    ListServiceNetworkVpcEndpointAssociationsRequest:
      type: object
      properties:
        serviceNetworkIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifier'
          description: The ID of the service network associated with the VPC endpoint.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum page size.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
      required:
      - serviceNetworkIdentifier
    ListServiceNetworkVpcEndpointAssociationsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcEndpointAssociationList'
          description: Information about the association between the VPC endpoint
            and service network.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
      required:
      - items
    ListServiceNetworksRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
    ListServiceNetworksResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkList'
          description: Information about the service networks.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
      required:
      - items
    ListServicesRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
    ListServicesResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ServiceList'
          description: Information about the services.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the resource.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Information about the tags.
    ListTargetGroupsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
        vpcIdentifier:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID or ARN of the VPC.
        targetGroupType:
          allOf:
          - $ref: '#/components/schemas/TargetGroupType'
          description: The target group type.
    ListTargetGroupsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/TargetGroupList'
          description: Information about the target groups.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
    ListTargetsRequest:
      type: object
      properties:
        targetGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/TargetGroupIdentifier'
          description: The ID or ARN of the target group.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for the next page of results.
        targets:
          allOf:
          - $ref: '#/components/schemas/TargetList'
          description: The targets.
      required:
      - targetGroupIdentifier
    ListTargetsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/TargetSummaryList'
          description: Information about the targets.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If there are additional results, a pagination token for the
            next page of results.
      required:
      - items
    ListenerArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}$
      minLength: 20
      maxLength: 2048
    ListenerId:
      type: string
      pattern: ^listener-[0-9a-z]{17}$
      minLength: 26
      maxLength: 26
    ListenerIdentifier:
      type: string
      pattern: ^((listener-[0-9a-z]{17})|(^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}$))$
      minLength: 20
      maxLength: 2048
    ListenerName:
      type: string
      pattern: ^(?!listener-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
      minLength: 3
      maxLength: 63
    ListenerProtocol:
      type: string
      enum:
      - HTTP
      - HTTPS
      - TLS_PASSTHROUGH
    ListenerSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ListenerArn'
          description: The Amazon Resource Name (ARN) of the listener.
        id:
          allOf:
          - $ref: '#/components/schemas/ListenerId'
          description: The ID of the listener.
        name:
          allOf:
          - $ref: '#/components/schemas/ListenerName'
          description: The name of the listener.
        protocol:
          allOf:
          - $ref: '#/components/schemas/ListenerProtocol'
          description: The listener protocol.
        port:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The listener port.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the listener was created, in ISO-8601
            format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the listener was last updated, in ISO-8601
            format.
      description: Summary information about a listener.
    ListenerSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ListenerSummary'
    Matcher:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/HttpCodeMatcher'
        description: |-
          The HTTP code to use when checking for a successful response from a target.
      description: |-
        Describes the codes to use when checking for a successful response from a target for health checks.
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    NextToken:
      type: string
      minLength: 1
      maxLength: 2048
    PathMatch:
      type: object
      properties:
        match:
          allOf:
          - $ref: '#/components/schemas/PathMatchType'
          description: The type of path match.
        caseSensitive:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the match is case sensitive.
      required:
      - match
      description: Describes the conditions that can be applied when matching a path
        for incoming requests.
    PathMatchExact:
      type: string
      pattern: ^/[a-zA-Z0-9@:%_+.~#?&/=-]*$
      minLength: 1
      maxLength: 200
    PathMatchPrefix:
      type: string
      pattern: ^/[a-zA-Z0-9@:%_+.~#?&/=-]*$
      minLength: 1
      maxLength: 200
    PathMatchType:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/PathMatchExact'
        description: |-
          An exact match of the path.
      - allOf:
        - $ref: '#/components/schemas/PathMatchPrefix'
        description: |-
          A prefix match of the path.
      description: |-
        Describes a path match type. Each rule can include only one of the following types of paths.
    PolicyString:
      type: string
      pattern: ^.*\S.*$
      minLength: 1
      maxLength: 10000
    Port:
      type: integer
      minimum: 1
      maximum: 65535
    PortRange:
      type: string
      pattern: ^((\d{1,5}\-\d{1,5})|(\d+))$
      minLength: 1
      maxLength: 11
    PortRangeList:
      type: array
      items:
        $ref: '#/components/schemas/PortRange'
    ProtocolType:
      type: string
      enum:
      - TCP
    PutAuthPolicyRequest:
      type: object
      properties:
        resourceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceIdentifier'
          description: The ID or ARN of the service network or service for which the
            policy is created.
        policy:
          allOf:
          - $ref: '#/components/schemas/AuthPolicyString'
          description: The auth policy. The policy string in JSON must not contain
            newlines or blank lines.
      required:
      - resourceIdentifier
      - policy
    PutAuthPolicyResponse:
      type: object
      properties:
        policy:
          allOf:
          - $ref: '#/components/schemas/AuthPolicyString'
          description: The auth policy. The policy string in JSON must not contain
            newlines or blank lines.
        state:
          allOf:
          - $ref: '#/components/schemas/AuthPolicyState'
          description: The state of the auth policy. The auth policy is only active
            when the auth type is set to `AWS_IAM`. If you provide a policy, then
            authentication and authorization decisions are made based on this policy
            and the client's IAM policy. If the Auth type is `NONE`, then, any auth
            policy that you provide remains inactive. For more information, see [Create
            a service network](https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html#create-service-network)
            in the _Amazon VPC Lattice User Guide_.
    PutResourcePolicyRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The ID or ARN of the service network or service for which the
            policy is created.
        policy:
          allOf:
          - $ref: '#/components/schemas/PolicyString'
          description: An IAM policy. The policy string in JSON must not contain newlines
            or blank lines.
      required:
      - resourceArn
      - policy
    PutResourcePolicyResponse:
      type: object
      properties: {}
    RegisterTargetsRequest:
      type: object
      properties:
        targetGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/TargetGroupIdentifier'
          description: The ID or ARN of the target group.
        targets:
          allOf:
          - $ref: '#/components/schemas/TargetList'
          description: The targets.
      required:
      - targetGroupIdentifier
      - targets
    RegisterTargetsResponse:
      type: object
      properties:
        successful:
          allOf:
          - $ref: '#/components/schemas/TargetList'
          description: The targets that were successfully registered.
        unsuccessful:
          allOf:
          - $ref: '#/components/schemas/TargetFailureList'
          description: The targets that were not registered.
    ResourceArn:
      type: string
      pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc)|(resourceconfiguration/rcfg))-[0-9a-z]{17}$
      minLength: 20
      maxLength: 200
    ResourceConfigurationArn:
      type: string
      pattern: ^arn:[a-z0-9f\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourceconfiguration/rcfg-[0-9a-z]{17}$
      minLength: 20
      maxLength: 2048
    ResourceConfigurationDefinition:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/DnsResource'
        description: |-
          The DNS name of the resource.
      - allOf:
        - $ref: '#/components/schemas/IpResource'
        description: |-
          The IP resource.
      - allOf:
        - $ref: '#/components/schemas/ArnResource'
        description: |-
          The Amazon Resource Name (ARN) of the resource.
      description: |-
        Describes a resource configuration.
    ResourceConfigurationId:
      type: string
      pattern: ^rcfg-[0-9a-z]{17}$
      minLength: 22
      maxLength: 22
    ResourceConfigurationIdentifier:
      type: string
      pattern: ^((rcfg-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourceconfiguration/rcfg-[0-9a-z]{17}))$
      minLength: 20
      maxLength: 2048
    ResourceConfigurationIpAddressType:
      type: string
      enum:
      - IPV4
      - IPV6
      - DUALSTACK
    ResourceConfigurationName:
      type: string
      pattern: ^(?!rcfg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
      minLength: 3
      maxLength: 40
    ResourceConfigurationStatus:
      type: string
      enum:
      - ACTIVE
      - CREATE_IN_PROGRESS
      - UPDATE_IN_PROGRESS
      - DELETE_IN_PROGRESS
      - CREATE_FAILED
      - UPDATE_FAILED
      - DELETE_FAILED
    ResourceConfigurationSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the resource configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationName'
          description: The name of the resource configuration.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationArn'
          description: The Amazon Resource Name (ARN) of the resource configuration.
        resourceGatewayId:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayId'
          description: The ID of the resource gateway.
        resourceConfigurationGroupId:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the group resource configuration.
        type:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationType'
          description: "The type of resource configuration.\n\n  * `SINGLE` \\- A\
            \ single resource.\n\n  * `GROUP` \\- A group of resources.\n\n  * `CHILD`\
            \ \\- A single resource that is part of a group resource configuration.\n\
            \n  * `ARN` \\- An Amazon Web Services resource."
        status:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationStatus'
          description: The status of the resource configuration.
        amazonManaged:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the resource configuration was created and
            is managed by Amazon.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the resource configuration was created,
            in ISO-8601 format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent date and time that the resource configuration
            was updated, in ISO-8601 format.
      description: Summary information about a resource configuration.
    ResourceConfigurationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ResourceConfigurationSummary'
    ResourceConfigurationType:
      type: string
      enum:
      - GROUP
      - CHILD
      - SINGLE
      - ARN
    ResourceEndpointAssociationArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourceendpointassociation/rea-[0-9a-f]{17}$
      minLength: 21
      maxLength: 2048
    ResourceEndpointAssociationId:
      type: string
      pattern: ^rea-[0-9a-f]{17}$
      minLength: 21
      maxLength: 21
    ResourceEndpointAssociationIdentifier:
      type: string
      pattern: ^((rea-[0-9a-f]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourceendpointassociation/rea-[0-9a-f]{17}))$
      minLength: 21
      maxLength: 2048
    ResourceEndpointAssociationList:
      type: array
      items:
        $ref: '#/components/schemas/ResourceEndpointAssociationSummary'
    ResourceEndpointAssociationSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceEndpointAssociationId'
          description: The ID of the VPC endpoint association.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceEndpointAssociationArn'
          description: The Amazon Resource Name (ARN) of the VPC endpoint association.
        resourceConfigurationId:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the resource configuration.
        resourceConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationArn'
          description: The Amazon Resource Name (ARN) of the resource configuration.
        resourceConfigurationName:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationName'
          description: The name of the resource configuration.
        vpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: The ID of the VPC endpoint.
        vpcEndpointOwner:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointOwner'
          description: The owner of the VPC endpoint.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that created the association.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the VPC endpoint association was created,
            in ISO-8601 format.
      description: Summary information about a VPC endpoint association.
    ResourceGatewayArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourcegateway/rgw-[0-9a-z]{17}$
      minLength: 20
      maxLength: 2048
    ResourceGatewayId:
      type: string
      pattern: ^rgw-[0-9a-z]{17}$
      minLength: 21
      maxLength: 21
    ResourceGatewayIdentifier:
      type: string
      pattern: ^((rgw-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourcegateway/rgw-[0-9a-z]{17}))$
      minLength: 17
      maxLength: 2048
    ResourceGatewayIpAddressType:
      type: string
      enum:
      - IPV4
      - IPV6
      - DUALSTACK
    ResourceGatewayList:
      type: array
      items:
        $ref: '#/components/schemas/ResourceGatewaySummary'
    ResourceGatewayName:
      type: string
      pattern: ^(?!rgw-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
      minLength: 3
      maxLength: 40
    ResourceGatewayStatus:
      type: string
      enum:
      - ACTIVE
      - CREATE_IN_PROGRESS
      - UPDATE_IN_PROGRESS
      - DELETE_IN_PROGRESS
      - CREATE_FAILED
      - UPDATE_FAILED
      - DELETE_FAILED
    ResourceGatewaySummary:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayName'
          description: The name of the resource gateway.
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayId'
          description: The ID of the resource gateway.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayArn'
          description: The Amazon Resource Name (ARN) of the resource gateway.
        status:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayStatus'
          description: The name of the resource gateway.
        vpcIdentifier:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC for the resource gateway.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetList'
          description: The IDs of the VPC subnets for the resource gateway.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The IDs of the security groups applied to the resource gateway.
        ipAddressType:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayIpAddressType'
          description: The type of IP address used by the resource gateway.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the VPC endpoint association was created,
            in ISO-8601 format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The most recent date and time that the resource gateway was
            updated, in ISO-8601 format.
      description: Summary information about a resource gateway.
    ResourceId:
      type: string
      pattern: ^((sn)|(svc))-[0-9a-z]{17}$
      minLength: 20
      maxLength: 50
    ResourceIdentifier:
      type: string
      pattern: ^((((sn)|(svc)|(rcfg))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(resourceconfiguration/rcfg)|(service/svc))-[0-9a-z]{17}))$
      minLength: 17
      maxLength: 200
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resource ID.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resource type.
      required:
      - message
      - resourceId
      - resourceType
      description: The request references a resource that does not exist.
    RuleAction:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ForwardAction'
        description: |-
          The forward action. Traffic that matches the rule is forwarded to the specified target groups.
      - allOf:
        - $ref: '#/components/schemas/FixedResponseAction'
        description: |-
          The fixed response action. The rule returns a custom HTTP response.
      description: |-
        Describes the action for a rule.
    RuleArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}/rule/rule-[0-9a-z]{17}$
      minLength: 20
      maxLength: 2048
    RuleId:
      type: string
      pattern: ^rule-[0-9a-z]{17}$
      minLength: 5
      maxLength: 22
    RuleIdentifier:
      type: string
      pattern: ^((rule-[0-9a-z]{17})|(^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}/rule/rule-[0-9a-z]{17}$))$
      minLength: 20
      maxLength: 2048
    RuleMatch:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/HttpMatch'
        description: |-
          The HTTP criteria that a rule must match.
      description: |-
        Describes a rule match.
    RuleName:
      type: string
      pattern: ^(?!rule-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
      minLength: 3
      maxLength: 63
    RulePriority:
      type: integer
      minimum: 1
      maximum: 100
    RuleSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RuleArn'
          description: The Amazon Resource Name (ARN) of the rule.
        id:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the rule.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the rule.
        isDefault:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether this is the default listener rule.
        priority:
          allOf:
          - $ref: '#/components/schemas/RulePriority'
          description: The priority of the rule.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the listener rule was created, in ISO-8601
            format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the listener rule was last updated,
            in ISO-8601 format.
      description: Summary information about a listener rule.
    RuleSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/RuleSummary'
    RuleUpdate:
      type: object
      properties:
        ruleIdentifier:
          allOf:
          - $ref: '#/components/schemas/RuleIdentifier'
          description: The ID or ARN of the rule.
        match:
          allOf:
          - $ref: '#/components/schemas/RuleMatch'
          description: The rule match.
        priority:
          allOf:
          - $ref: '#/components/schemas/RulePriority'
          description: The rule priority. A listener can't have multiple rules with
            the same priority.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The rule action.
      required:
      - ruleIdentifier
      description: Describes a rule update.
    RuleUpdateFailure:
      type: object
      properties:
        ruleIdentifier:
          allOf:
          - $ref: '#/components/schemas/RuleIdentifier'
          description: The ID or ARN of the rule.
        failureCode:
          allOf:
          - $ref: '#/components/schemas/FailureCode'
          description: The failure code.
        failureMessage:
          allOf:
          - $ref: '#/components/schemas/FailureMessage'
          description: The failure message.
      description: Describes a rule update that failed.
    RuleUpdateFailureList:
      type: array
      items:
        $ref: '#/components/schemas/RuleUpdateFailure'
    RuleUpdateList:
      type: array
      items:
        $ref: '#/components/schemas/RuleUpdate'
    RuleUpdateSuccess:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RuleArn'
          description: The Amazon Resource Name (ARN) of the listener.
        id:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the listener.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the listener.
        isDefault:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether this is the default rule.
        match:
          allOf:
          - $ref: '#/components/schemas/RuleMatch'
          description: The rule match.
        priority:
          allOf:
          - $ref: '#/components/schemas/RulePriority'
          description: The rule priority.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action for the rule.
      description: Describes a successful rule update.
    RuleUpdateSuccessList:
      type: array
      items:
        $ref: '#/components/schemas/RuleUpdateSuccess'
    SecurityGroupId:
      type: string
      pattern: ^sg-(([0-9a-z]{8})|([0-9a-z]{17}))$
      minLength: 5
      maxLength: 200
    SecurityGroupList:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupId'
    ServiceArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
      minLength: 20
      maxLength: 2048
    ServiceArnList:
      type: array
      items:
        $ref: '#/components/schemas/ServiceArn'
    ServiceCustomDomainName:
      type: string
      minLength: 3
      maxLength: 255
    ServiceId:
      type: string
      pattern: ^svc-[0-9a-z]{17}$
      minLength: 21
      maxLength: 21
    ServiceIdentifier:
      type: string
      pattern: ^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$
      minLength: 17
      maxLength: 2048
    ServiceList:
      type: array
      items:
        $ref: '#/components/schemas/ServiceSummary'
    ServiceLoadBalancerAssociationIdentifier:
      type: string
      pattern: ^((slba-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:serviceloadbalancerassociation/slba-[0-9a-z]{17}))$
      minLength: 17
      maxLength: 200
    ServiceName:
      type: string
      pattern: ^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
      minLength: 3
      maxLength: 40
    ServiceNetworkArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
      minLength: 32
      maxLength: 2048
    ServiceNetworkArnWithoutRegex:
      type: string
      minLength: 10
      maxLength: 2048
    ServiceNetworkEndpointAssociation:
      type: object
      properties:
        vpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the VPC endpoint associated with the service network.
        vpcId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the VPC for the association.
        vpcEndpointOwnerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The owner of the VPC endpoint associated with the service network.
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the association.
        state:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The state of the association.
        serviceNetworkArn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkArn'
          description: The Amazon Resource Name (ARN) of the service network.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the association was created, in ISO-8601
            format.
      description: Describes the association between a service network and a VPC endpoint.
    ServiceNetworkId:
      type: string
      pattern: ^sn-[0-9a-z]{17}$
      minLength: 20
      maxLength: 20
    ServiceNetworkIdentifier:
      type: string
      pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
      minLength: 3
      maxLength: 2048
    ServiceNetworkIdentifierWithoutRegex:
      type: string
      minLength: 3
      maxLength: 2048
    ServiceNetworkList:
      type: array
      items:
        $ref: '#/components/schemas/ServiceNetworkSummary'
    ServiceNetworkLogType:
      type: string
      enum:
      - SERVICE
      - RESOURCE
    ServiceNetworkName:
      type: string
      pattern: ^(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
      minLength: 3
      maxLength: 63
    ServiceNetworkNameWithoutRegex:
      type: string
      minLength: 3
      maxLength: 100
    ServiceNetworkResourceAssociationArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkresourceassociation/snra-[0-9a-f]{17}$
      minLength: 22
      maxLength: 2048
    ServiceNetworkResourceAssociationId:
      type: string
      pattern: ^snra-[0-9a-f]{17}$
      minLength: 22
      maxLength: 22
    ServiceNetworkResourceAssociationIdentifier:
      type: string
      pattern: ^((snra-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkresourceassociation/snra-[0-9a-f]{17}))$
      minLength: 22
      maxLength: 2048
    ServiceNetworkResourceAssociationList:
      type: array
      items:
        $ref: '#/components/schemas/ServiceNetworkResourceAssociationSummary'
    ServiceNetworkResourceAssociationStatus:
      type: string
      enum:
      - CREATE_IN_PROGRESS
      - ACTIVE
      - PARTIAL
      - DELETE_IN_PROGRESS
      - CREATE_FAILED
      - DELETE_FAILED
    ServiceNetworkResourceAssociationSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationId'
          description: The ID of the association between the service network and resource
            configuration.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkResourceAssociationStatus'
          description: The status of the service network associated with the resource
            configuration.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that created the association.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the association was created, in ISO-8601
            format.
        resourceConfigurationId:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the resource configuration associated with the service
            network.
        resourceConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationArn'
          description: The Amazon Resource Name (ARN) of the association.
        resourceConfigurationName:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationName'
          description: The name of the resource configuration associated with the
            service network.
        serviceNetworkId:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifierWithoutRegex'
          description: The ID of the service network associated with the resource
            configuration.
        serviceNetworkArn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkArnWithoutRegex'
          description: The Amazon Resource Name (ARN) of the service network associated
            with the resource configuration.
        serviceNetworkName:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkNameWithoutRegex'
          description: The name of the service network associated with the resource
            configuration.
        dnsEntry:
          allOf:
          - $ref: '#/components/schemas/DnsEntry'
          description: The DNS entry for the service.
        privateDnsEntry:
          allOf:
          - $ref: '#/components/schemas/DnsEntry'
          description: The private DNS entry for the service.
        isManagedAssociation:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the association is managed by Amazon.
        failureCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The failure code.
      description: Summary information about an association between a service network
        and a resource configuration.
    ServiceNetworkServiceAssociationArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkserviceassociation/snsa-[0-9a-z]{17}$
      minLength: 20
      maxLength: 2048
    ServiceNetworkServiceAssociationIdentifier:
      type: string
      pattern: ^((snsa-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkserviceassociation/snsa-[0-9a-z]{17}))$
      minLength: 17
      maxLength: 2048
    ServiceNetworkServiceAssociationList:
      type: array
      items:
        $ref: '#/components/schemas/ServiceNetworkServiceAssociationSummary'
    ServiceNetworkServiceAssociationStatus:
      type: string
      enum:
      - CREATE_IN_PROGRESS
      - ACTIVE
      - DELETE_IN_PROGRESS
      - CREATE_FAILED
      - DELETE_FAILED
    ServiceNetworkServiceAssociationSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationIdentifier'
          description: The ID of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationStatus'
          description: The status. If the deletion fails, try to delete again.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkServiceAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that created the association.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the association was created, in ISO-8601
            format.
        serviceId:
          allOf:
          - $ref: '#/components/schemas/ServiceId'
          description: The ID of the service.
        serviceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the service.
        serviceArn:
          allOf:
          - $ref: '#/components/schemas/ServiceArn'
          description: The Amazon Resource Name (ARN) of the service.
        serviceNetworkId:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkId'
          description: The ID of the service network.
        serviceNetworkName:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkName'
          description: The name of the service network.
        serviceNetworkArn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkArn'
          description: The Amazon Resource Name (ARN) of the service network.
        dnsEntry:
          allOf:
          - $ref: '#/components/schemas/DnsEntry'
          description: The DNS information.
        customDomainName:
          allOf:
          - $ref: '#/components/schemas/ServiceCustomDomainName'
          description: The custom domain name of the service.
      description: Summary information about an association between a service network
        and a service.
    ServiceNetworkSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkId'
          description: The ID of the service network.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkName'
          description: The name of the service network.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkArn'
          description: The Amazon Resource Name (ARN) of the service network.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the service network was created, in
            ISO-8601 format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the service network was last updated,
            in ISO-8601 format.
        numberOfAssociatedVPCs:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of VPCs associated with the service network.
        numberOfAssociatedServices:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of services associated with the service network.
        numberOfAssociatedResourceConfigurations:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of resource configurations associated with a service
            network.
      description: Summary information about a service network.
    ServiceNetworkVpcAssociationArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkvpcassociation/snva-[0-9a-z]{17}$
      minLength: 20
      maxLength: 2048
    ServiceNetworkVpcAssociationId:
      type: string
      pattern: ^snva-[0-9a-z]{17}$
      minLength: 22
      maxLength: 22
    ServiceNetworkVpcAssociationIdentifier:
      type: string
      pattern: ^((snva-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkvpcassociation/snva-[0-9a-z]{17}))$
      minLength: 17
      maxLength: 2048
    ServiceNetworkVpcAssociationList:
      type: array
      items:
        $ref: '#/components/schemas/ServiceNetworkVpcAssociationSummary'
    ServiceNetworkVpcAssociationStatus:
      type: string
      enum:
      - CREATE_IN_PROGRESS
      - ACTIVE
      - UPDATE_IN_PROGRESS
      - DELETE_IN_PROGRESS
      - CREATE_FAILED
      - DELETE_FAILED
      - UPDATE_FAILED
    ServiceNetworkVpcAssociationSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationId'
          description: The ID of the association.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationStatus'
          description: The status.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that created the association.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the association was created, in ISO-8601
            format.
        serviceNetworkId:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkId'
          description: The ID of the service network.
        serviceNetworkName:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkName'
          description: The name of the service network.
        serviceNetworkArn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkArn'
          description: The Amazon Resource Name (ARN) of the service network.
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the association was last updated, in
            ISO-8601 format.
      description: Summary information about an association between a service network
        and a VPC.
    ServiceNetworkVpcEndpointAssociationList:
      type: array
      items:
        $ref: '#/components/schemas/ServiceNetworkEndpointAssociation'
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resource ID.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resource type.
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The service code.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the service quota that was exceeded.
      required:
      - message
      - resourceType
      - serviceCode
      - quotaCode
      description: The request would cause a service quota to be exceeded.
    ServiceStatus:
      type: string
      enum:
      - ACTIVE
      - CREATE_IN_PROGRESS
      - DELETE_IN_PROGRESS
      - CREATE_FAILED
      - DELETE_FAILED
    ServiceSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceId'
          description: The ID of the service.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the service.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceArn'
          description: The Amazon Resource Name (ARN) of the service.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the service was created, in ISO-8601
            format.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the service was last updated, in ISO-8601
            format.
        dnsEntry:
          allOf:
          - $ref: '#/components/schemas/DnsEntry'
          description: The DNS information.
        customDomainName:
          allOf:
          - $ref: '#/components/schemas/ServiceCustomDomainName'
          description: The custom domain name of the service.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceStatus'
          description: The status.
      description: Summary information about a service.
    SharingConfig:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies if the service network is enabled for sharing.
      description: Specifies if the service network should be enabled for sharing.
    SubnetId:
      type: string
      minLength: 5
      maxLength: 200
    SubnetList:
      type: array
      items:
        $ref: '#/components/schemas/SubnetId'
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeys:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags for the resource.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Target:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the target. If the target group type is `INSTANCE`,
            this is an instance ID. If the target group type is `IP`, this is an IP
            address. If the target group type is `LAMBDA`, this is the ARN of a Lambda
            function. If the target group type is `ALB`, this is the ARN of an Application
            Load Balancer.
        port:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The port on which the target is listening. For HTTP, the default
            is 80. For HTTPS, the default is 443.
      required:
      - id
      description: Describes a target.
    TargetFailure:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the target. If the target group type is `INSTANCE`,
            this is an instance ID. If the target group type is `IP`, this is an IP
            address. If the target group type is `LAMBDA`, this is the ARN of a Lambda
            function. If the target group type is `ALB`, this is the ARN of an Application
            Load Balancer.
        port:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The port on which the target is listening. This parameter doesn't
            apply if the target is a Lambda function.
        failureCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The failure code.
        failureMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The failure message.
      description: Describes a target failure.
    TargetFailureList:
      type: array
      items:
        $ref: '#/components/schemas/TargetFailure'
    TargetGroupArn:
      type: string
      pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:targetgroup/tg-[0-9a-z]{17}$
      minLength: 20
      maxLength: 2048
    TargetGroupConfig:
      type: object
      properties:
        port:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The port on which the targets are listening. For HTTP, the
            default is 80. For HTTPS, the default is 443. Not supported if the target
            group type is `LAMBDA`.
        protocol:
          allOf:
          - $ref: '#/components/schemas/TargetGroupProtocol'
          description: The protocol to use for routing traffic to the targets. The
            default is the protocol of the target group. Not supported if the target
            group type is `LAMBDA`.
        protocolVersion:
          allOf:
          - $ref: '#/components/schemas/TargetGroupProtocolVersion'
          description: The protocol version. The default is `HTTP1`. Not supported
            if the target group type is `LAMBDA`.
        ipAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The type of IP address used for the target group. Supported
            only if the target group type is `IP`. The default is `IPV4`.
        vpcIdentifier:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC. Not supported if the target group type is
            `LAMBDA`.
        healthCheck:
          allOf:
          - $ref: '#/components/schemas/HealthCheckConfig'
          description: The health check configuration. Not supported if the target
            group type is `LAMBDA` or `ALB`.
        lambdaEventStructureVersion:
          allOf:
          - $ref: '#/components/schemas/LambdaEventStructureVersion'
          description: The version of the event structure that your Lambda function
            receives. Supported only if the target group type is `LAMBDA`. The default
            is `V1`.
      description: 'Describes the configuration of a target group.


        For more information, see [Target groups](https://docs.aws.amazon.com/vpc-lattice/latest/ug/target-groups.html)
        in the _Amazon VPC Lattice User Guide_.'
    TargetGroupId:
      type: string
      pattern: ^tg-[0-9a-z]{17}$
      minLength: 20
      maxLength: 20
    TargetGroupIdentifier:
      type: string
      pattern: ^((tg-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:targetgroup/tg-[0-9a-z]{17}))$
      minLength: 17
      maxLength: 2048
    TargetGroupList:
      type: array
      items:
        $ref: '#/components/schemas/TargetGroupSummary'
    TargetGroupName:
      type: string
      pattern: ^(?!tg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
      minLength: 3
      maxLength: 128
    TargetGroupProtocol:
      type: string
      enum:
      - HTTP
      - HTTPS
      - TCP
    TargetGroupProtocolVersion:
      type: string
      enum:
      - HTTP1
      - HTTP2
      - GRPC
    TargetGroupStatus:
      type: string
      enum:
      - CREATE_IN_PROGRESS
      - ACTIVE
      - DELETE_IN_PROGRESS
      - CREATE_FAILED
      - DELETE_FAILED
    TargetGroupSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/TargetGroupId'
          description: The ID of the target group.
        arn:
          allOf:
          - $ref: '#/components/schemas/TargetGroupArn'
          description: The ARN (Amazon Resource Name) of the target group.
        name:
          allOf:
          - $ref: '#/components/schemas/TargetGroupName'
          description: The name of the target group.
        type:
          allOf:
          - $ref: '#/components/schemas/TargetGroupType'
          description: The target group type.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the target group was created, in ISO-8601
            format.
        port:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The port of the target group.
        protocol:
          allOf:
          - $ref: '#/components/schemas/TargetGroupProtocol'
          description: The protocol of the target group.
        ipAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The type of IP address used for the target group. The possible
            values are `IPV4` and `IPV6`. This is an optional parameter. If not specified,
            the default is `IPV4`.
        vpcIdentifier:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC of the target group.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the target group was last updated, in
            ISO-8601 format.
        status:
          allOf:
          - $ref: '#/components/schemas/TargetGroupStatus'
          description: The status.
        serviceArns:
          allOf:
          - $ref: '#/components/schemas/ServiceArnList'
          description: The Amazon Resource Names (ARNs) of the service.
        lambdaEventStructureVersion:
          allOf:
          - $ref: '#/components/schemas/LambdaEventStructureVersion'
          description: The version of the event structure that your Lambda function
            receives. Supported only if the target group type is `LAMBDA`.
      description: 'Summary information about a target group.


        For more information, see [Target groups](https://docs.aws.amazon.com/vpc-lattice/latest/ug/target-groups.html)
        in the _Amazon VPC Lattice User Guide_.'
    TargetGroupType:
      type: string
      enum:
      - IP
      - LAMBDA
      - INSTANCE
      - ALB
    TargetGroupWeight:
      type: integer
      minimum: 0
      maximum: 999
    TargetList:
      type: array
      items:
        $ref: '#/components/schemas/Target'
    TargetStatus:
      type: string
      enum:
      - DRAINING
      - UNAVAILABLE
      - HEALTHY
      - UNHEALTHY
      - INITIAL
      - UNUSED
    TargetSummary:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the target. If the target group type is `INSTANCE`,
            this is an instance ID. If the target group type is `IP`, this is an IP
            address. If the target group type is `LAMBDA`, this is the ARN of a Lambda
            function. If the target type is `ALB`, this is the ARN of an Application
            Load Balancer.
        port:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The port on which the target is listening.
        status:
          allOf:
          - $ref: '#/components/schemas/TargetStatus'
          description: "The status of the target.\n\n  * `DRAINING`: The target is\
            \ being deregistered. No new connections are sent to this target while\
            \ current connections are being drained. The default draining time is\
            \ 5 minutes.\n\n  * `UNAVAILABLE`: Health checks are unavailable for the\
            \ target group.\n\n  * `HEALTHY`: The target is healthy.\n\n  * `UNHEALTHY`:\
            \ The target is unhealthy.\n\n  * `INITIAL`: Initial health checks on\
            \ the target are being performed.\n\n  * `UNUSED`: Target group is not\
            \ used in a service."
        reasonCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The code for why the target status is what it is.
      description: Summary information about a target.
    TargetSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/TargetSummary'
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The service code.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the service quota that was exceeded.
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of seconds to wait before retrying.
      required:
      - message
      description: The limit on the number of requests per second was exceeded.
    Timestamp:
      type: string
      format: date-time
    UnhealthyThresholdCount:
      type: integer
      minimum: 0
      maximum: 10
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the resource.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeys'
          description: The tag keys of the tags to remove.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateAccessLogSubscriptionRequest:
      type: object
      properties:
        accessLogSubscriptionIdentifier:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionIdentifier'
          description: The ID or ARN of the access log subscription.
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/AccessLogDestinationArn'
          description: The Amazon Resource Name (ARN) of the access log destination.
      required:
      - accessLogSubscriptionIdentifier
      - destinationArn
    UpdateAccessLogSubscriptionResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionId'
          description: The ID of the access log subscription.
        arn:
          allOf:
          - $ref: '#/components/schemas/AccessLogSubscriptionArn'
          description: The Amazon Resource Name (ARN) of the access log subscription.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The ID of the resource.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of the access log subscription.
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/AccessLogDestinationArn'
          description: The Amazon Resource Name (ARN) of the access log destination.
      required:
      - id
      - arn
      - resourceId
      - resourceArn
      - destinationArn
    UpdateListenerRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        listenerIdentifier:
          allOf:
          - $ref: '#/components/schemas/ListenerIdentifier'
          description: The ID or ARN of the listener.
        defaultAction:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action for the default rule.
      required:
      - serviceIdentifier
      - listenerIdentifier
      - defaultAction
    UpdateListenerResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ListenerArn'
          description: The Amazon Resource Name (ARN) of the listener.
        id:
          allOf:
          - $ref: '#/components/schemas/ListenerId'
          description: The ID of the listener.
        name:
          allOf:
          - $ref: '#/components/schemas/ListenerName'
          description: The name of the listener.
        protocol:
          allOf:
          - $ref: '#/components/schemas/ListenerProtocol'
          description: The protocol of the listener.
        port:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The listener port.
        serviceArn:
          allOf:
          - $ref: '#/components/schemas/ServiceArn'
          description: The Amazon Resource Name (ARN) of the service.
        serviceId:
          allOf:
          - $ref: '#/components/schemas/ServiceId'
          description: The ID of the service.
        defaultAction:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: The action for the default rule.
    UpdateResourceConfigurationRequest:
      type: object
      properties:
        resourceConfigurationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationIdentifier'
          description: The ID of the resource configuration.
        resourceConfigurationDefinition:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationDefinition'
          description: The resource configuration.
        allowAssociationToShareableServiceNetwork:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether to add the resource configuration to service
            networks that are shared with other accounts.
        portRanges:
          allOf:
          - $ref: '#/components/schemas/PortRangeList'
          description: 'The TCP port ranges that a consumer can use to access a resource
            configuration. You can separate port ranges with a comma. Example: 1-65535
            or 1,2,22-30'
      required:
      - resourceConfigurationIdentifier
    UpdateResourceConfigurationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the resource configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationName'
          description: The name of the resource configuration.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationArn'
          description: The Amazon Resource Name (ARN) of the resource configuration.
        resourceGatewayId:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayId'
          description: The ID of the resource gateway associated with the resource
            configuration.
        resourceConfigurationGroupId:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationId'
          description: The ID of the group resource configuration.
        type:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationType'
          description: "The type of resource configuration.\n\n  * `SINGLE` \\- A\
            \ single resource.\n\n  * `GROUP` \\- A group of resources.\n\n  * `CHILD`\
            \ \\- A single resource that is part of a group resource configuration.\n\
            \n  * `ARN` \\- An Amazon Web Services resource."
        portRanges:
          allOf:
          - $ref: '#/components/schemas/PortRangeList'
          description: 'The TCP port ranges that a consumer can use to access a resource
            configuration. You can separate port ranges with a comma. Example: 1-65535
            or 1,2,22-30'
        allowAssociationToShareableServiceNetwork:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether to add the resource configuration to service
            networks that are shared with other accounts.
        protocol:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The TCP protocol accepted by the specified resource configuration.
        status:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationStatus'
          description: The status of the resource configuration.
        resourceConfigurationDefinition:
          allOf:
          - $ref: '#/components/schemas/ResourceConfigurationDefinition'
          description: The resource configuration.
    UpdateResourceGatewayRequest:
      type: object
      properties:
        resourceGatewayIdentifier:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayIdentifier'
          description: The ID or ARN of the resource gateway.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The IDs of the security groups associated with the resource
            gateway.
      required:
      - resourceGatewayIdentifier
    UpdateResourceGatewayResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayName'
          description: The name of the resource gateway.
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayId'
          description: The ID of the resource gateway.
        arn:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayArn'
          description: The Amazon Resource Name (ARN) of the resource gateway.
        status:
          allOf:
          - $ref: '#/components/schemas/ResourceGatewayStatus'
          description: The status of the resource gateway.
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC for the resource gateway.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetList'
          description: The IDs of the VPC subnets for the resource gateway.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The IDs of the security groups associated with the resource
            gateway.
        ipAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The type of IP address used by the resource gateway.
    UpdateRuleRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        listenerIdentifier:
          allOf:
          - $ref: '#/components/schemas/ListenerIdentifier'
          description: The ID or ARN of the listener.
        ruleIdentifier:
          allOf:
          - $ref: '#/components/schemas/RuleIdentifier'
          description: The ID or ARN of the rule.
        match:
          allOf:
          - $ref: '#/components/schemas/RuleMatch'
          description: The rule match.
        priority:
          allOf:
          - $ref: '#/components/schemas/RulePriority'
          description: The rule priority. A listener can't have multiple rules with
            the same priority.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: Information about the action for the specified listener rule.
      required:
      - serviceIdentifier
      - listenerIdentifier
      - ruleIdentifier
    UpdateRuleResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RuleArn'
          description: The Amazon Resource Name (ARN) of the listener.
        id:
          allOf:
          - $ref: '#/components/schemas/RuleId'
          description: The ID of the listener.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the listener.
        isDefault:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether this is the default rule.
        match:
          allOf:
          - $ref: '#/components/schemas/RuleMatch'
          description: The rule match.
        priority:
          allOf:
          - $ref: '#/components/schemas/RulePriority'
          description: The rule priority.
        action:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: Information about the action for the specified listener rule.
    UpdateServiceNetworkRequest:
      type: object
      properties:
        serviceNetworkIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkIdentifier'
          description: The ID or ARN of the service network.
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: "The type of IAM policy.\n\n  * `NONE`: The resource does not\
            \ use an IAM policy. This is the default.\n\n  * `AWS_IAM`: The resource\
            \ uses an IAM policy. When this type is used, auth is enabled and an auth\
            \ policy is required."
      required:
      - serviceNetworkIdentifier
      - authType
    UpdateServiceNetworkResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkId'
          description: The ID of the service network.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkName'
          description: The name of the service network.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkArn'
          description: The Amazon Resource Name (ARN) of the service network.
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: The type of IAM policy.
    UpdateServiceNetworkVpcAssociationRequest:
      type: object
      properties:
        serviceNetworkVpcAssociationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationIdentifier'
          description: The ID or ARN of the association.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The IDs of the security groups.
      required:
      - serviceNetworkVpcAssociationIdentifier
      - securityGroupIds
    UpdateServiceNetworkVpcAssociationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationId'
          description: The ID of the association.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationArn'
          description: The Amazon Resource Name (ARN) of the association.
        status:
          allOf:
          - $ref: '#/components/schemas/ServiceNetworkVpcAssociationStatus'
          description: The status. You can retry the operation if the status is `DELETE_FAILED`.
            However, if you retry it while the status is `DELETE_IN_PROGRESS`, there
            is no change in the status.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that created the association.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupList'
          description: The IDs of the security groups.
    UpdateServiceRequest:
      type: object
      properties:
        serviceIdentifier:
          allOf:
          - $ref: '#/components/schemas/ServiceIdentifier'
          description: The ID or ARN of the service.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/CertificateArn'
          description: The Amazon Resource Name (ARN) of the certificate.
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: "The type of IAM policy.\n\n  * `NONE`: The resource does not\
            \ use an IAM policy. This is the default.\n\n  * `AWS_IAM`: The resource\
            \ uses an IAM policy. When this type is used, auth is enabled and an auth\
            \ policy is required."
      required:
      - serviceIdentifier
    UpdateServiceResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ServiceId'
          description: The ID of the service.
        arn:
          allOf:
          - $ref: '#/components/schemas/ServiceArn'
          description: The Amazon Resource Name (ARN) of the service.
        name:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          description: The name of the service.
        customDomainName:
          allOf:
          - $ref: '#/components/schemas/ServiceCustomDomainName'
          description: The custom domain name of the service.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/CertificateArn'
          description: The Amazon Resource Name (ARN) of the certificate.
        authType:
          allOf:
          - $ref: '#/components/schemas/AuthType'
          description: The type of IAM policy.
    UpdateTargetGroupRequest:
      type: object
      properties:
        targetGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/TargetGroupIdentifier'
          description: The ID or ARN of the target group.
        healthCheck:
          allOf:
          - $ref: '#/components/schemas/HealthCheckConfig'
          description: The health check configuration.
      required:
      - targetGroupIdentifier
      - healthCheck
    UpdateTargetGroupResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/TargetGroupId'
          description: The ID of the target group.
        arn:
          allOf:
          - $ref: '#/components/schemas/TargetGroupArn'
          description: The Amazon Resource Name (ARN) of the target group.
        name:
          allOf:
          - $ref: '#/components/schemas/TargetGroupName'
          description: The name of the target group.
        type:
          allOf:
          - $ref: '#/components/schemas/TargetGroupType'
          description: The target group type.
        config:
          allOf:
          - $ref: '#/components/schemas/TargetGroupConfig'
          description: The target group configuration.
        status:
          allOf:
          - $ref: '#/components/schemas/TargetGroupStatus'
          description: The status.
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: The reason.
        fieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: The fields that failed validation.
      required:
      - message
      - reason
      description: The input does not satisfy the constraints specified by an Amazon
        Web Services service.
    ValidationExceptionField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the validation exception.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Additional information about why the validation failed.
      required:
      - name
      - message
      description: Describes a validation failure.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - unknownOperation
      - cannotParse
      - fieldValidationFailed
      - other
    VpcEndpointId:
      type: string
      pattern: ^vpce-[0-9a-f]{17}$
      minLength: 22
      maxLength: 22
    VpcEndpointOwner:
      type: string
      pattern: ^\d{12}$
      minLength: 12
      maxLength: 12
    VpcId:
      type: string
      pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
      minLength: 5
      maxLength: 50
    WeightedTargetGroup:
      type: object
      properties:
        targetGroupIdentifier:
          allOf:
          - $ref: '#/components/schemas/TargetGroupIdentifier'
          description: The ID or ARN of the target group.
        weight:
          allOf:
          - $ref: '#/components/schemas/TargetGroupWeight'
          description: Only required if you specify multiple target groups for a forward
            action. The weight determines how requests are distributed to the target
            group. For example, if you specify two target groups, each with a weight
            of 10, each target group receives half the requests. If you specify two
            target groups, one with a weight of 10 and the other with a weight of
            20, the target group with a weight of 20 receives twice as many requests
            as the other target group. If there's only one target group specified,
            then the default value is 100.
      required:
      - targetGroupIdentifier
      description: Describes the weight of a target group.
    WeightedTargetGroupList:
      type: array
      items:
        $ref: '#/components/schemas/WeightedTargetGroup'
    WildcardArn:
      type: string
      pattern: ^arn:[a-z0-9][-.a-z0-9]{0,62}:[a-z0-9][-.a-z0-9]{0,62}:([a-z0-9][-.a-z0-9]{0,62})?:\d{12}?:[^/].{0,1023}$
      minLength: 20
      maxLength: 2048
