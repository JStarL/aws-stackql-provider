openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: finspace
  x-aws-serviceName: finspace
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2021-03-12'
  title: FinSpace User Environment Management service
  description: |-
    The FinSpace management service provides the APIs for managing FinSpace environments.
servers:
- description: The FinSpace User Environment Management service regional endpoint
  url: https://finspace.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /environment:
    post:
      operationId: CreateEnvironment
      description: |-
        Create a new FinSpace environment.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/EnvironmentName'
                description:
                  $ref: '#/components/schemas/Description'
                kmsKeyId:
                  $ref: '#/components/schemas/KmsKeyId'
                tags:
                  $ref: '#/components/schemas/TagMap'
                federationMode:
                  $ref: '#/components/schemas/FederationMode'
                federationParameters:
                  $ref: '#/components/schemas/FederationParameters'
                superuserParameters:
                  $ref: '#/components/schemas/SuperuserParameters'
                dataBundles:
                  $ref: '#/components/schemas/DataBundleArns'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '402':
          description: |-
            You have exceeded your service quota. To perform the requested action, remove some of the relevant resources, or use Service Quotas to request a service quota increase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListEnvironments
      description: |-
        A list of all of your FinSpace environments.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResultLimit'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/databases/{databaseName}/changesets:
    post:
      operationId: CreateKxChangeset
      description: |-
        Creates a changeset for a kdb database. A changeset allows you to add and delete existing files by using an ordered list of change requests.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                changeRequests:
                  $ref: '#/components/schemas/ChangeRequests'
                clientToken:
                  $ref: '#/components/schemas/ClientTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListKxChangesets
      description: |-
        Returns a list of all the changesets for a database.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/clusters:
    post:
      operationId: CreateKxCluster
      description: |-
        Creates a new kdb cluster.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                clusterName:
                  $ref: '#/components/schemas/KxClusterName'
                clusterType:
                  $ref: '#/components/schemas/KxClusterType'
                tickerplantLogConfiguration:
                  $ref: '#/components/schemas/TickerplantLogConfiguration'
                databases:
                  $ref: '#/components/schemas/KxDatabaseConfigurations'
                cacheStorageConfigurations:
                  $ref: '#/components/schemas/KxCacheStorageConfigurations'
                autoScalingConfiguration:
                  $ref: '#/components/schemas/AutoScalingConfiguration'
                clusterDescription:
                  $ref: '#/components/schemas/KxClusterDescription'
                capacityConfiguration:
                  $ref: '#/components/schemas/CapacityConfiguration'
                releaseLabel:
                  $ref: '#/components/schemas/ReleaseLabel'
                vpcConfiguration:
                  $ref: '#/components/schemas/VpcConfiguration'
                initializationScript:
                  $ref: '#/components/schemas/InitializationScriptFilePath'
                commandLineArguments:
                  $ref: '#/components/schemas/KxCommandLineArguments'
                code:
                  $ref: '#/components/schemas/CodeConfiguration'
                executionRole:
                  $ref: '#/components/schemas/ExecutionRoleArn'
                savedownStorageConfiguration:
                  $ref: '#/components/schemas/KxSavedownStorageConfiguration'
                azMode:
                  $ref: '#/components/schemas/KxAzMode'
                availabilityZoneId:
                  $ref: '#/components/schemas/AvailabilityZoneId'
                tags:
                  $ref: '#/components/schemas/TagMap'
                scalingGroupConfiguration:
                  $ref: '#/components/schemas/KxScalingGroupConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListKxClusters
      description: |-
        Returns a list of clusters.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: clusterType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/KxClusterType'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /kx/environments/{environmentId}/databases:
    post:
      operationId: CreateKxDatabase
      description: |-
        Creates a new kdb database in the environment.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                databaseName:
                  $ref: '#/components/schemas/DatabaseName'
                description:
                  $ref: '#/components/schemas/Description'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The specified resource group already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListKxDatabases
      description: |-
        Returns a list of all the databases in the kdb environment.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/databases/{databaseName}/dataviews:
    post:
      operationId: CreateKxDataview
      description: |-
        Creates a snapshot of kdb database with tiered storage capabilities and a pre-warmed cache, ready for mounting on kdb clusters. Dataviews are only available for clusters running on a scaling group. They are not supported on dedicated clusters.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dataviewName:
                  $ref: '#/components/schemas/KxDataviewName'
                azMode:
                  $ref: '#/components/schemas/KxAzMode'
                availabilityZoneId:
                  $ref: '#/components/schemas/AvailabilityZoneId'
                changesetId:
                  $ref: '#/components/schemas/ChangesetId'
                segmentConfigurations:
                  $ref: '#/components/schemas/KxDataviewSegmentConfigurationList'
                autoUpdate:
                  $ref: '#/components/schemas/booleanValue'
                readWrite:
                  $ref: '#/components/schemas/booleanValue'
                description:
                  $ref: '#/components/schemas/Description'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The specified resource group already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListKxDataviews
      description: |-
        Returns a list of all the dataviews in the database.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments:
    post:
      operationId: CreateKxEnvironment
      description: |-
        Creates a managed kdb environment for the account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/KxEnvironmentName'
                description:
                  $ref: '#/components/schemas/Description'
                kmsKeyId:
                  $ref: '#/components/schemas/KmsKeyARN'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '402':
          description: |-
            You have exceeded your service quota. To perform the requested action, remove some of the relevant resources, or use Service Quotas to request a service quota increase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListKxEnvironments
      description: |-
        Returns a list of kdb environments created in an account.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/BoxedInteger'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/scalingGroups:
    post:
      operationId: CreateKxScalingGroup
      description: |-
        Creates a new scaling group.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                scalingGroupName:
                  $ref: '#/components/schemas/KxScalingGroupName'
                hostType:
                  $ref: '#/components/schemas/KxHostType'
                availabilityZoneId:
                  $ref: '#/components/schemas/AvailabilityZoneId'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListKxScalingGroups
      description: |-
        Returns a list of scaling groups in a kdb environment.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /kx/environments/{environmentId}/users:
    post:
      operationId: CreateKxUser
      description: |-
        Creates a user in FinSpace kdb environment with an associated IAM role.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  $ref: '#/components/schemas/KxUserNameString'
                iamRole:
                  $ref: '#/components/schemas/RoleArn'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The specified resource group already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListKxUsers
      description: |-
        Lists all the users in a kdb environment.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResultLimit'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/kxvolumes:
    post:
      operationId: CreateKxVolume
      description: |-
        Creates a new volume with a specific amount of throughput and storage capacity.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                volumeType:
                  $ref: '#/components/schemas/KxVolumeType'
                volumeName:
                  $ref: '#/components/schemas/KxVolumeName'
                description:
                  $ref: '#/components/schemas/Description'
                nas1Configuration:
                  $ref: '#/components/schemas/KxNAS1Configuration'
                azMode:
                  $ref: '#/components/schemas/KxAzMode'
                availabilityZoneIds:
                  $ref: '#/components/schemas/AvailabilityZoneIds'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The specified resource group already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListKxVolumes
      description: |-
        Lists all the volumes in a kdb environment.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: volumeType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/KxVolumeType'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /environment/{environmentId}:
    delete:
      operationId: DeleteEnvironment
      description: |-
        Delete an FinSpace environment.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetEnvironment
      description: |-
        Returns the FinSpace environment object.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateEnvironment
      description: |-
        Update your FinSpace environment.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/EnvironmentName'
                description:
                  $ref: '#/components/schemas/Description'
                federationMode:
                  $ref: '#/components/schemas/FederationMode'
                federationParameters:
                  $ref: '#/components/schemas/FederationParameters'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/clusters/{clusterName}:
    delete:
      operationId: DeleteKxCluster
      description: |-
        Deletes a kdb cluster.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: clusterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxClusterName'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetKxCluster
      description: |-
        Retrieves information about a kdb cluster.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: clusterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxClusterName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /kx/environments/{environmentId}/clusters/{clusterName}/nodes/{nodeId}:
    delete:
      operationId: DeleteKxClusterNode
      description: |-
        Deletes the specified nodes from a cluster.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: clusterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxClusterName'
      - name: nodeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxClusterNodeIdString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/databases/{databaseName}:
    delete:
      operationId: DeleteKxDatabase
      description: |-
        Deletes the specified database and all of its associated data. This action is irreversible. You must copy any data out of the database before deleting it if the data is to be retained.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      - name: clientToken
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ClientTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetKxDatabase
      description: |-
        Returns database information for the specified environment ID.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateKxDatabase
      description: |-
        Updates information for the given kdb database.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                clientToken:
                  $ref: '#/components/schemas/ClientTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/databases/{databaseName}/dataviews/{dataviewName}:
    delete:
      operationId: DeleteKxDataview
      description: |-
        Deletes the specified dataview. Before deleting a dataview, make sure that it is not in use by any cluster.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      - name: dataviewName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxDataviewName'
      - name: clientToken
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ClientTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetKxDataview
      description: |-
        Retrieves details of the dataview.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      - name: dataviewName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxDataviewName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateKxDataview
      description: |-
        Updates the specified dataview. The dataviews get automatically updated when any new changesets are ingested. Each update of the dataview creates a new version, including changeset details and cache configurations
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      - name: dataviewName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxDataviewName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                changesetId:
                  $ref: '#/components/schemas/ChangesetId'
                segmentConfigurations:
                  $ref: '#/components/schemas/KxDataviewSegmentConfigurationList'
                clientToken:
                  $ref: '#/components/schemas/ClientTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The specified resource group already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}:
    delete:
      operationId: DeleteKxEnvironment
      description: |-
        Deletes the kdb environment. This action is irreversible. Deleting a kdb environment will remove all the associated data and any services running in it.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetKxEnvironment
      description: |-
        Retrieves all the information for the specified kdb environment.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateKxEnvironment
      description: |-
        Updates information for the given kdb environment.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/KxEnvironmentName'
                description:
                  $ref: '#/components/schemas/Description'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/scalingGroups/{scalingGroupName}:
    delete:
      operationId: DeleteKxScalingGroup
      description: |-
        Deletes the specified scaling group. This action is irreversible. You cannot delete a scaling group until all the clusters running on it have been deleted.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: scalingGroupName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxScalingGroupName'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetKxScalingGroup
      description: |-
        Retrieves details of a scaling group.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: scalingGroupName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxScalingGroupName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /kx/environments/{environmentId}/users/{userName}:
    delete:
      operationId: DeleteKxUser
      description: |-
        Deletes a user in the specified kdb environment.
      parameters:
      - name: userName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxUserNameString'
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetKxUser
      description: |-
        Retrieves information about the specified kdb user.
      parameters:
      - name: userName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxUserNameString'
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateKxUser
      description: |-
        Updates the user details. You can only update the IAM role associated with a user.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      - name: userName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxUserNameString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                iamRole:
                  $ref: '#/components/schemas/RoleArn'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /kx/environments/{environmentId}/kxvolumes/{volumeName}:
    delete:
      operationId: DeleteKxVolume
      description: |-
        Deletes a volume. You can only delete a volume if it's not attached to a cluster or a dataview. When a volume is deleted, any data on the volume is lost. This action is irreversible.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: volumeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxVolumeName'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientTokenString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetKxVolume
      description: |-
        Retrieves the information about the volume.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: volumeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxVolumeName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    patch:
      operationId: UpdateKxVolume
      description: |-
        Updates the throughput or capacity of a volume. During the update process, the filesystem might be unavailable for a few minutes. You can retry any operations after the update is complete.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: volumeName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxVolumeName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                clientToken:
                  $ref: '#/components/schemas/ClientTokenString'
                nas1Configuration:
                  $ref: '#/components/schemas/KxNAS1Configuration'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /kx/environments/{environmentId}/databases/{databaseName}/changesets/{changesetId}:
    get:
      operationId: GetKxChangeset
      description: |-
        Returns information about a kdb changeset.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EnvironmentId'
      - name: databaseName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatabaseName'
      - name: changesetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ChangesetId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/connectionString:
    get:
      operationId: GetKxConnectionString
      description: |-
        Retrieves a connection string for a user to connect to a kdb cluster. You must call this API using the same role that you have defined while creating a user.
      parameters:
      - name: userArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/KxUserArn'
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      - name: clusterName
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/KxClusterName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /kx/environments/{environmentId}/clusters/{clusterName}/nodes:
    get:
      operationId: ListKxClusterNodes
      description: |-
        Lists all the nodes in a kdb cluster.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: clusterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxClusterName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResultLimit'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        A list of all tags for a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FinSpaceTaggableArn'
      responses:
        '200': {}
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The request is invalid. Something is wrong with the input to the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
    post:
      operationId: TagResource
      description: |-
        Adds metadata tags to a FinSpace resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FinSpaceTaggableArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The request is invalid. Something is wrong with the input to the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
    delete:
      operationId: UntagResource
      description: |-
        Removes metadata tags from a FinSpace resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FinSpaceTaggableArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The request is invalid. Something is wrong with the input to the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /kx/environments/{environmentId}/clusters/{clusterName}/configuration/code:
    put:
      operationId: UpdateKxClusterCodeConfiguration
      description: |-
        Allows you to update code configuration on a running cluster. By using this API you can update the code, the initialization script path, and the command line arguments for a specific cluster. The configuration that you want to update will override any existing configurations on the cluster.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: clusterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxClusterName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientTokenString'
                code:
                  $ref: '#/components/schemas/CodeConfiguration'
                initializationScript:
                  $ref: '#/components/schemas/InitializationScriptFilePath'
                commandLineArguments:
                  $ref: '#/components/schemas/KxCommandLineArguments'
                deploymentConfiguration:
                  $ref: '#/components/schemas/KxClusterCodeDeploymentConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /kx/environments/{environmentId}/clusters/{clusterName}/configuration/databases:
    put:
      operationId: UpdateKxClusterDatabases
      description: |-
        Updates the databases mounted on a kdb cluster, which includes the `changesetId` and all the dbPaths to be cached. This API does not allow you to change a database name or add a database if you created a cluster without one.

        Using this API you can point a cluster to a different changeset and modify a list of partitions being cached.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxEnvironmentId'
      - name: clusterName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/KxClusterName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientTokenString'
                databases:
                  $ref: '#/components/schemas/KxDatabaseConfigurations'
                deploymentConfiguration:
                  $ref: '#/components/schemas/KxDeploymentConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /kx/environments/{environmentId}/network:
    put:
      operationId: UpdateKxEnvironmentNetwork
      description: |-
        Updates environment network to connect to your internal network by using a transit gateway. This API supports request to create a transit gateway attachment from FinSpace VPC to your transit gateway ID and create a custom Route-53 outbound resolvers.

        Once you send a request to update a network, you cannot change it again. Network update might require termination of any clusters that are running in the existing network.
      parameters:
      - name: environmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transitGatewayConfiguration:
                  $ref: '#/components/schemas/TransitGatewayConfiguration'
                customDNSConfiguration:
                  $ref: '#/components/schemas/CustomDNSConfiguration'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There was a conflict with this action, and it could not be completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: You do not have sufficient access to perform this action.
    AttachedClusterList:
      type: array
      items:
        $ref: '#/components/schemas/KxClusterName'
    AttributeMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FederationAttributeValue'
    AutoScalingConfiguration:
      type: object
      properties:
        minNodeCount:
          allOf:
          - $ref: '#/components/schemas/NodeCount'
          description: The lowest number of nodes to scale. This value must be at
            least 1 and less than the `maxNodeCount`. If the nodes in a cluster belong
            to multiple availability zones, then `minNodeCount` must be at least 3.
        maxNodeCount:
          allOf:
          - $ref: '#/components/schemas/NodeCount'
          description: The highest number of nodes to scale. This value cannot be
            greater than 5.
        autoScalingMetric:
          allOf:
          - $ref: '#/components/schemas/AutoScalingMetric'
          description: The metric your cluster will track in order to scale in and
            out. For example, `CPU_UTILIZATION_PERCENTAGE` is the average CPU usage
            across all the nodes in a cluster.
        metricTarget:
          allOf:
          - $ref: '#/components/schemas/AutoScalingMetricTarget'
          description: The desired value of the chosen `autoScalingMetric`. When the
            metric drops below this value, the cluster will scale in. When the metric
            goes above this value, the cluster will scale out. You can set the target
            value between 1 and 100 percent.
        scaleInCooldownSeconds:
          allOf:
          - $ref: '#/components/schemas/CooldownTime'
          description: The duration in seconds that FinSpace will wait after a scale
            in event before initiating another scaling event.
        scaleOutCooldownSeconds:
          allOf:
          - $ref: '#/components/schemas/CooldownTime'
          description: The duration in seconds that FinSpace will wait after a scale
            out event before initiating another scaling event.
      description: The configuration based on which FinSpace will scale in or scale
        out nodes in your cluster.
    AutoScalingMetric:
      type: string
      enum:
      - CPU_UTILIZATION_PERCENTAGE
    AutoScalingMetricTarget:
      type: number
      format: double
      minimum: 1
      maximum: 100
    AvailabilityZoneId:
      type: string
      pattern: ^[a-zA-Z0-9-]+$
      minLength: 8
      maxLength: 12
    AvailabilityZoneIds:
      type: array
      items:
        $ref: '#/components/schemas/AvailabilityZoneId'
    BoxedInteger:
      type: integer
    CapacityConfiguration:
      type: object
      properties:
        nodeType:
          allOf:
          - $ref: '#/components/schemas/NodeType'
          description: "The type that determines the hardware of the host computer\
            \ used for your cluster instance. Each node type offers different memory\
            \ and storage capabilities. Choose a node type based on the requirements\
            \ of the application or software that you plan to run on your instance.\n\
            \nYou can only specify one of the following values:\n\n  * `kx.s.large`\
            \ – The node type with a configuration of 12 GiB memory and 2 vCPUs.\n\
            \n  * `kx.s.xlarge` – The node type with a configuration of 27 GiB memory\
            \ and 4 vCPUs.\n\n  * `kx.s.2xlarge` – The node type with a configuration\
            \ of 54 GiB memory and 8 vCPUs.\n\n  * `kx.s.4xlarge` – The node type\
            \ with a configuration of 108 GiB memory and 16 vCPUs.\n\n  * `kx.s.8xlarge`\
            \ – The node type with a configuration of 216 GiB memory and 32 vCPUs.\n\
            \n  * `kx.s.16xlarge` – The node type with a configuration of 432 GiB\
            \ memory and 64 vCPUs.\n\n  * `kx.s.32xlarge` – The node type with a configuration\
            \ of 864 GiB memory and 128 vCPUs."
        nodeCount:
          allOf:
          - $ref: '#/components/schemas/NodeCount'
          description: The number of instances running in a cluster.
      description: A structure for the metadata of a cluster. It includes information
        like the CPUs needed, memory of instances, and number of instances.
    ChangeRequest:
      type: object
      properties:
        changeType:
          allOf:
          - $ref: '#/components/schemas/ChangeType'
          description: "Defines the type of change request. A `changeType` can have\
            \ the following values:\n\n  * PUT – Adds or updates files in a database.\n\
            \n  * DELETE – Deletes files in a database."
        s3Path:
          allOf:
          - $ref: '#/components/schemas/S3Path'
          description: Defines the S3 path of the source file that is required to
            add or update files in a database.
        dbPath:
          allOf:
          - $ref: '#/components/schemas/DbPath'
          description: Defines the path within the database directory.
      required:
      - changeType
      - dbPath
      description: A list of change request objects.
    ChangeRequests:
      type: array
      items:
        $ref: '#/components/schemas/ChangeRequest'
    ChangeType:
      type: string
      enum:
      - PUT
      - DELETE
    ChangesetId:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 1
      maxLength: 26
    ChangesetStatus:
      type: string
      enum:
      - PENDING
      - PROCESSING
      - FAILED
      - COMPLETED
    ClientToken:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 36
    ClientTokenString:
      type: string
      pattern: ^[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 64
    ClusterNodeCount:
      type: integer
      minimum: 1
    CodeConfiguration:
      type: object
      properties:
        s3Bucket:
          allOf:
          - $ref: '#/components/schemas/S3Bucket'
          description: A unique name for the S3 bucket.
        s3Key:
          allOf:
          - $ref: '#/components/schemas/S3Key'
          description: The full S3 path (excluding bucket) to the .zip file. This
            file contains the code that is loaded onto the cluster when it's started.
        s3ObjectVersion:
          allOf:
          - $ref: '#/components/schemas/S3ObjectVersion'
          description: The version of an S3 object.
      description: The structure of the customer code available within the running
        cluster.
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
        reason:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage2'
          description: The reason for the conflict exception.
      description: There was a conflict with this action, and it could not be completed.
    CooldownTime:
      type: number
      format: double
      minimum: 0
      maximum: 100000
    CpuCount:
      type: number
      format: double
      minimum: 0.1
    CreateEnvironmentRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name of the FinSpace environment to be created.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the FinSpace environment to be created.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          description: The KMS key id to encrypt your data in the FinSpace environment.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Add tags to your FinSpace environment.
        federationMode:
          allOf:
          - $ref: '#/components/schemas/FederationMode'
          description: "Authentication mode for the environment.\n\n  * `FEDERATED`\
            \ \\- Users access FinSpace through Single Sign On (SSO) via your Identity\
            \ provider.\n\n  * `LOCAL` \\- Users access FinSpace via email and password\
            \ managed within the FinSpace environment."
        federationParameters:
          allOf:
          - $ref: '#/components/schemas/FederationParameters'
          description: Configuration information when authentication mode is FEDERATED.
        superuserParameters:
          allOf:
          - $ref: '#/components/schemas/SuperuserParameters'
          description: Configuration information for the superuser.
        dataBundles:
          allOf:
          - $ref: '#/components/schemas/DataBundleArns'
          description: "The list of Amazon Resource Names (ARN) of the data bundles\
            \ to install. Currently supported data bundle ARNs:\n\n  * `arn:aws:finspace:${Region}::data-bundle/capital-markets-sample`\
            \ \\- Contains sample Capital Markets datasets, categories and controlled\
            \ vocabularies.\n\n  * `arn:aws:finspace:${Region}::data-bundle/taq` (default)\
            \ - Contains trades and quotes data in addition to sample Capital Markets\
            \ data."
      required:
      - name
    CreateEnvironmentResponse:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The unique identifier for FinSpace environment that you created.
        environmentArn:
          allOf:
          - $ref: '#/components/schemas/EnvironmentArn'
          description: The Amazon Resource Name (ARN) of the FinSpace environment
            that you created.
        environmentUrl:
          allOf:
          - $ref: '#/components/schemas/url'
          description: The sign-in URL for the web application of the FinSpace environment
            you created.
    CreateKxChangesetRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier of the kdb environment.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
        changeRequests:
          allOf:
          - $ref: '#/components/schemas/ChangeRequests'
          description: "A list of change request objects that are run in order. A\
            \ change request object consists of `changeType` , `s3Path`, and `dbPath`.\
            \ A changeType can have the following values:\n\n  * PUT – Adds or updates\
            \ files in a database.\n\n  * DELETE – Deletes files in a database.\n\n\
            All the change requests require a mandatory `dbPath` attribute that defines\
            \ the path within the database directory. All database paths must start\
            \ with a leading / and end with a trailing /. The `s3Path` attribute defines\
            \ the s3 source file path and is required for a PUT change type. The `s3path`\
            \ must end with a trailing / if it is a directory and must end without\
            \ a trailing / if it is a file.\n\nHere are few examples of how you can\
            \ use the change request object:\n\n  1. This request adds a single sym\
            \ file at database root location. \n\n`{ \"changeType\": \"PUT\", \"s3Path\"\
            :\"s3://bucket/db/sym\", \"dbPath\":\"/\"}`\n\n  2. This request adds\
            \ files in the given `s3Path` under the 2020.01.02 partition of the database.\n\
            \n`{ \"changeType\": \"PUT\", \"s3Path\":\"s3://bucket/db/2020.01.02/\"\
            , \"dbPath\":\"/2020.01.02/\"}`\n\n  3. This request adds files in the\
            \ given `s3Path` under the _taq_ table partition of the database.\n\n\
            `[ { \"changeType\": \"PUT\", \"s3Path\":\"s3://bucket/db/2020.01.02/taq/\"\
            , \"dbPath\":\"/2020.01.02/taq/\"}]`\n\n  4. This request deletes the\
            \ 2020.01.02 partition of the database.\n\n`[{ \"changeType\": \"DELETE\"\
            , \"dbPath\": \"/2020.01.02/\"} ]`\n\n  5. The _DELETE_ request allows\
            \ you to delete the existing files under the 2020.01.02 partition of the\
            \ database, and the _PUT_ request adds a new taq table under it.\n\n`[\
            \ {\"changeType\": \"DELETE\", \"dbPath\":\"/2020.01.02/\"}, {\"changeType\"\
            : \"PUT\", \"s3Path\":\"s3://bucket/db/2020.01.02/taq/\", \"dbPath\":\"\
            /2020.01.02/taq/\"}]`"
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - databaseName
      - changeRequests
      - clientToken
    CreateKxChangesetResponse:
      type: object
      properties:
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier for the changeset.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        changeRequests:
          allOf:
          - $ref: '#/components/schemas/ChangeRequests'
          description: A list of change requests.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the changeset was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the changeset was updated in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        status:
          allOf:
          - $ref: '#/components/schemas/ChangesetStatus'
          description: "Status of the changeset creation process.\n\n  * Pending –\
            \ Changeset creation is pending.\n\n  * Processing – Changeset creation\
            \ is running.\n\n  * Failed – Changeset creation has failed.\n\n  * Complete\
            \ – Changeset creation has succeeded."
        errorInfo:
          allOf:
          - $ref: '#/components/schemas/ErrorInfo'
          description: The details of the error that you receive when creating a changeset.
            It consists of the type of error and the error message.
    CreateKxClusterRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: A unique name for the cluster that you want to create.
        clusterType:
          allOf:
          - $ref: '#/components/schemas/KxClusterType'
          description: "Specifies the type of KDB database that is being created.\
            \ The following types are available:\n\n  * HDB – A Historical Database.\
            \ The data is only accessible with read-only permissions from one of the\
            \ FinSpace managed kdb databases mounted to the cluster.\n\n  * RDB –\
            \ A Realtime Database. This type of database captures all the data from\
            \ a ticker plant and stores it in memory until the end of day, after which\
            \ it writes all of its data to a disk and reloads the HDB. This cluster\
            \ type requires local storage for temporary storage of data during the\
            \ savedown process. If you specify this field in your request, you must\
            \ provide the `savedownStorageConfiguration` parameter.\n\n  * GATEWAY\
            \ – A gateway cluster allows you to access data across processes in kdb\
            \ systems. It allows you to create your own routing logic using the initialization\
            \ scripts and custom code. This type of cluster does not require a writable\
            \ local storage.\n\n  * GP – A general purpose cluster allows you to quickly\
            \ iterate on code during development by granting greater access to system\
            \ commands and enabling a fast reload of custom code. This cluster type\
            \ can optionally mount databases including cache and savedown storage.\
            \ For this cluster type, the node count is fixed at 1. It does not support\
            \ autoscaling and supports only `SINGLE` AZ mode.\n\n  * Tickerplant –\
            \ A tickerplant cluster allows you to subscribe to feed handlers based\
            \ on IAM permissions. It can publish to RDBs, other Tickerplants, and\
            \ real-time subscribers (RTS). Tickerplants can persist messages to log,\
            \ which is readable by any RDB environment. It supports only single-node\
            \ that is only one kdb process."
        tickerplantLogConfiguration:
          allOf:
          - $ref: '#/components/schemas/TickerplantLogConfiguration'
          description: A configuration to store Tickerplant logs. It consists of a
            list of volumes that will be mounted to your cluster. For the cluster
            type `Tickerplant`, the location of the TP volume on the cluster will
            be available by using the global variable `.aws.tp_log_path`.
        databases:
          allOf:
          - $ref: '#/components/schemas/KxDatabaseConfigurations'
          description: A list of databases that will be available for querying.
        cacheStorageConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxCacheStorageConfigurations'
          description: The configurations for a read only cache storage associated
            with a cluster. This cache will be stored as an FSx Lustre that reads
            from the S3 store.
        autoScalingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AutoScalingConfiguration'
          description: The configuration based on which FinSpace will scale in or
            scale out nodes in your cluster.
        clusterDescription:
          allOf:
          - $ref: '#/components/schemas/KxClusterDescription'
          description: A description of the cluster.
        capacityConfiguration:
          allOf:
          - $ref: '#/components/schemas/CapacityConfiguration'
          description: A structure for the metadata of a cluster. It includes information
            like the CPUs needed, memory of instances, and number of instances.
        releaseLabel:
          allOf:
          - $ref: '#/components/schemas/ReleaseLabel'
          description: The version of FinSpace managed kdb to run.
        vpcConfiguration:
          allOf:
          - $ref: '#/components/schemas/VpcConfiguration'
          description: Configuration details about the network where the Privatelink
            endpoint of the cluster resides.
        initializationScript:
          allOf:
          - $ref: '#/components/schemas/InitializationScriptFilePath'
          description: Specifies a Q program that will be run at launch of a cluster.
            It is a relative path within _.zip_ file that contains the custom code,
            which will be loaded on the cluster. It must include the file name itself.
            For example, `somedir/init.q`.
        commandLineArguments:
          allOf:
          - $ref: '#/components/schemas/KxCommandLineArguments'
          description: Defines the key-value pairs to make them available inside the
            cluster.
        code:
          allOf:
          - $ref: '#/components/schemas/CodeConfiguration'
          description: The details of the custom code that you want to use inside
            a cluster when analyzing a data. It consists of the S3 source bucket,
            location, S3 object version, and the relative path from where the custom
            code is loaded into the cluster.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/ExecutionRoleArn'
          description: An IAM role that defines a set of permissions associated with
            a cluster. These permissions are assumed when a cluster attempts to access
            another cluster.
        savedownStorageConfiguration:
          allOf:
          - $ref: '#/components/schemas/KxSavedownStorageConfiguration'
          description: The size and type of the temporary storage that is used to
            hold data during the savedown process. This parameter is required when
            you choose `clusterType` as RDB. All the data written to this storage
            space is lost when the cluster node is restarted.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: "The number of availability zones you want to assign per cluster.\
            \ This can be one of the following\n\n  * `SINGLE` – Assigns one availability\
            \ zone per cluster.\n\n  * `MULTI` – Assigns all the availability zones\
            \ per cluster."
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The availability zone identifiers for the requested regions.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of key-value pairs to label the cluster. You can add
            up to 50 tags to a cluster.
        scalingGroupConfiguration:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupConfiguration'
          description: The structure that stores the configuration details of a scaling
            group.
      required:
      - environmentId
      - clusterName
      - clusterType
      - releaseLabel
      - vpcConfiguration
      - azMode
    CreateKxClusterResponse:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment.
        status:
          allOf:
          - $ref: '#/components/schemas/KxClusterStatus'
          description: "The status of cluster creation.\n\n  * PENDING – The cluster\
            \ is pending creation.\n\n  * CREATING – The cluster creation process\
            \ is in progress.\n\n  * CREATE_FAILED – The cluster creation process\
            \ has failed.\n\n  * RUNNING – The cluster creation process is running.\n\
            \n  * UPDATING – The cluster is in the process of being updated.\n\n \
            \ * DELETING – The cluster is in the process of being deleted.\n\n  *\
            \ DELETED – The cluster has been deleted.\n\n  * DELETE_FAILED – The cluster\
            \ failed to delete."
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxClusterStatusReason'
          description: The error message when a failed state occurs.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: A unique name for the cluster.
        clusterType:
          allOf:
          - $ref: '#/components/schemas/KxClusterType'
          description: "Specifies the type of KDB database that is being created.\
            \ The following types are available:\n\n  * HDB – A Historical Database.\
            \ The data is only accessible with read-only permissions from one of the\
            \ FinSpace managed kdb databases mounted to the cluster.\n\n  * RDB –\
            \ A Realtime Database. This type of database captures all the data from\
            \ a ticker plant and stores it in memory until the end of day, after which\
            \ it writes all of its data to a disk and reloads the HDB. This cluster\
            \ type requires local storage for temporary storage of data during the\
            \ savedown process. If you specify this field in your request, you must\
            \ provide the `savedownStorageConfiguration` parameter.\n\n  * GATEWAY\
            \ – A gateway cluster allows you to access data across processes in kdb\
            \ systems. It allows you to create your own routing logic using the initialization\
            \ scripts and custom code. This type of cluster does not require a writable\
            \ local storage.\n\n  * GP – A general purpose cluster allows you to quickly\
            \ iterate on code during development by granting greater access to system\
            \ commands and enabling a fast reload of custom code. This cluster type\
            \ can optionally mount databases including cache and savedown storage.\
            \ For this cluster type, the node count is fixed at 1. It does not support\
            \ autoscaling and supports only `SINGLE` AZ mode.\n\n  * Tickerplant –\
            \ A tickerplant cluster allows you to subscribe to feed handlers based\
            \ on IAM permissions. It can publish to RDBs, other Tickerplants, and\
            \ real-time subscribers (RTS). Tickerplants can persist messages to log,\
            \ which is readable by any RDB environment. It supports only single-node\
            \ that is only one kdb process."
        tickerplantLogConfiguration:
          $ref: '#/components/schemas/TickerplantLogConfiguration'
        volumes:
          allOf:
          - $ref: '#/components/schemas/Volumes'
          description: A list of volumes mounted on the cluster.
        databases:
          allOf:
          - $ref: '#/components/schemas/KxDatabaseConfigurations'
          description: A list of databases that will be available for querying.
        cacheStorageConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxCacheStorageConfigurations'
          description: The configurations for a read only cache storage associated
            with a cluster. This cache will be stored as an FSx Lustre that reads
            from the S3 store.
        autoScalingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AutoScalingConfiguration'
          description: The configuration based on which FinSpace will scale in or
            scale out nodes in your cluster.
        clusterDescription:
          allOf:
          - $ref: '#/components/schemas/KxClusterDescription'
          description: A description of the cluster.
        capacityConfiguration:
          allOf:
          - $ref: '#/components/schemas/CapacityConfiguration'
          description: A structure for the metadata of a cluster. It includes information
            like the CPUs needed, memory of instances, and number of instances.
        releaseLabel:
          allOf:
          - $ref: '#/components/schemas/ReleaseLabel'
          description: A version of the FinSpace managed kdb to run.
        vpcConfiguration:
          allOf:
          - $ref: '#/components/schemas/VpcConfiguration'
          description: Configuration details about the network where the Privatelink
            endpoint of the cluster resides.
        initializationScript:
          allOf:
          - $ref: '#/components/schemas/InitializationScriptFilePath'
          description: Specifies a Q program that will be run at launch of a cluster.
            It is a relative path within _.zip_ file that contains the custom code,
            which will be loaded on the cluster. It must include the file name itself.
            For example, `somedir/init.q`.
        commandLineArguments:
          allOf:
          - $ref: '#/components/schemas/KxCommandLineArguments'
          description: Defines the key-value pairs to make them available inside the
            cluster.
        code:
          allOf:
          - $ref: '#/components/schemas/CodeConfiguration'
          description: The details of the custom code that you want to use inside
            a cluster when analyzing a data. It consists of the S3 source bucket,
            location, S3 object version, and the relative path from where the custom
            code is loaded into the cluster.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/ExecutionRoleArn'
          description: An IAM role that defines a set of permissions associated with
            a cluster. These permissions are assumed when a cluster attempts to access
            another cluster.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the cluster was modified. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        savedownStorageConfiguration:
          allOf:
          - $ref: '#/components/schemas/KxSavedownStorageConfiguration'
          description: The size and type of the temporary storage that is used to
            hold data during the savedown process. This parameter is required when
            you choose `clusterType` as RDB. All the data written to this storage
            space is lost when the cluster node is restarted.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: "The number of availability zones you want to assign per cluster.\
            \ This can be one of the following\n\n  * `SINGLE` – Assigns one availability\
            \ zone per cluster.\n\n  * `MULTI` – Assigns all the availability zones\
            \ per cluster."
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The availability zone identifiers for the requested regions.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the cluster was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        scalingGroupConfiguration:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupConfiguration'
          description: The structure that stores the configuration details of a scaling
            group.
    CreateKxDatabaseRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the database.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of key-value pairs to label the kdb database. You can
            add up to 50 tags to your kdb database
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - databaseName
      - clientToken
    CreateKxDatabaseResponse:
      type: object
      properties:
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
        databaseArn:
          allOf:
          - $ref: '#/components/schemas/DatabaseArn'
          description: The ARN identifier of the database.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the database.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the database is created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the database was updated in FinSpace. The
            value is determined as epoch time in milliseconds. For example, the value
            for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    CreateKxDataviewRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment, where you want
            to create the dataview.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the database where you want to create a dataview.
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: A unique identifier for the dataview.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: The number of availability zones you want to assign per volume.
            Currently, FinSpace only supports `SINGLE` for volumes. This places dataview
            in a single AZ.
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The identifier of the availability zones.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier of the changeset that you want to use to
            ingest data.
        segmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxDataviewSegmentConfigurationList'
          description: The configuration that contains the database path of the data
            that you want to place on each selected volume. Each segment must have
            a unique database path for each volume. If you do not explicitly specify
            any database path for a volume, they are accessible from the cluster through
            the default S3/object store segment.
        autoUpdate:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: The option to specify whether you want to apply all the future
            additions and corrections automatically to the dataview, when you ingest
            new changesets. The default value is false.
        readWrite:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: "The option to specify whether you want to make the dataview\
            \ writable to perform database maintenance. The following are some considerations\
            \ related to writable dataviews.\n\n  * You cannot create partial writable\
            \ dataviews. When you create writeable dataviews you must provide the\
            \ entire database path.\n\n  * You cannot perform updates on a writeable\
            \ dataview. Hence, `autoUpdate` must be set as **False** if `readWrite`\
            \ is **True** for a dataview.\n\n  * You must also use a unique volume\
            \ for creating a writeable dataview. So, if you choose a volume that is\
            \ already in use by another dataview, the dataview creation fails.\n\n\
            \  * Once you create a dataview as writeable, you cannot change it to\
            \ read-only. So, you cannot update the `readWrite` parameter later."
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the dataview.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of key-value pairs to label the dataview. You can add
            up to 50 tags to a dataview.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - databaseName
      - dataviewName
      - azMode
      - clientToken
    CreateKxDataviewResponse:
      type: object
      properties:
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: A unique identifier for the dataview.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the database where you want to create a dataview.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment, where you want
            to create the dataview.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: The number of availability zones you want to assign per volume.
            Currently, FinSpace only supports `SINGLE` for volumes. This places dataview
            in a single AZ.
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The identifier of the availability zones.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier for the changeset.
        segmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxDataviewSegmentConfigurationList'
          description: The configuration that contains the database path of the data
            that you want to place on each selected volume. Each segment must have
            a unique database path for each volume. If you do not explicitly specify
            any database path for a volume, they are accessible from the cluster through
            the default S3/object store segment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the dataview.
        autoUpdate:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: The option to select whether you want to apply all the future
            additions and corrections automatically to the dataview when you ingest
            new changesets. The default value is false.
        readWrite:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: Returns True if the dataview is created as writeable and False
            otherwise.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the dataview was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the dataview was updated in FinSpace. The
            value is determined as epoch time in milliseconds. For example, the value
            for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        status:
          allOf:
          - $ref: '#/components/schemas/KxDataviewStatus'
          description: "The status of dataview creation.\n\n  * `CREATING` – The dataview\
            \ creation is in progress.\n\n  * `UPDATING` – The dataview is in the\
            \ process of being updated.\n\n  * `ACTIVE` – The dataview is active."
    CreateKxEnvironmentRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentName'
          description: The name of the kdb environment that you want to create.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the kdb environment.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyARN'
          description: The KMS key ID to encrypt your data in the FinSpace environment.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of key-value pairs to label the kdb environment. You
            can add up to 50 tags to your kdb environment.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - name
      - kmsKeyId
    CreateKxEnvironmentResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentName'
          description: The name of the kdb environment.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: The status of the kdb environment.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the kdb environment.
        environmentArn:
          allOf:
          - $ref: '#/components/schemas/EnvironmentArn'
          description: The ARN identifier of the environment.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          description: The KMS key ID to encrypt your data in the FinSpace environment.
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb environment was created in FinSpace.
    CreateKxScalingGroupRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment, where you want
            to create the scaling group.
        scalingGroupName:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupName'
          description: A unique identifier for the kdb scaling group.
        hostType:
          allOf:
          - $ref: '#/components/schemas/KxHostType'
          description: "The memory and CPU capabilities of the scaling group host\
            \ on which FinSpace Managed kdb clusters will be placed.\n\nYou can add\
            \ one of the following values:\n\n  * `kx.sg.large` – The host type with\
            \ a configuration of 16 GiB memory and 2 vCPUs.\n\n  * `kx.sg.xlarge`\
            \ – The host type with a configuration of 32 GiB memory and 4 vCPUs.\n\
            \n  * `kx.sg.2xlarge` – The host type with a configuration of 64 GiB memory\
            \ and 8 vCPUs.\n\n  * `kx.sg.4xlarge` – The host type with a configuration\
            \ of 108 GiB memory and 16 vCPUs.\n\n  * `kx.sg.8xlarge` – The host type\
            \ with a configuration of 216 GiB memory and 32 vCPUs.\n\n  * `kx.sg.16xlarge`\
            \ – The host type with a configuration of 432 GiB memory and 64 vCPUs.\n\
            \n  * `kx.sg.32xlarge` – The host type with a configuration of 864 GiB\
            \ memory and 128 vCPUs.\n\n  * `kx.sg1.16xlarge` – The host type with\
            \ a configuration of 1949 GiB memory and 64 vCPUs.\n\n  * `kx.sg1.24xlarge`\
            \ – The host type with a configuration of 2948 GiB memory and 96 vCPUs."
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The identifier of the availability zones.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of key-value pairs to label the scaling group. You can
            add up to 50 tags to a scaling group.
      required:
      - clientToken
      - environmentId
      - scalingGroupName
      - hostType
      - availabilityZoneId
    CreateKxScalingGroupResponse:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment, where you create
            the scaling group.
        scalingGroupName:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupName'
          description: A unique identifier for the kdb scaling group.
        hostType:
          allOf:
          - $ref: '#/components/schemas/KxHostType'
          description: The memory and CPU capabilities of the scaling group host on
            which FinSpace Managed kdb clusters will be placed.
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The identifier of the availability zones.
        status:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupStatus'
          description: "The status of scaling group.\n\n  * CREATING – The scaling\
            \ group creation is in progress.\n\n  * CREATE_FAILED – The scaling group\
            \ creation has failed.\n\n  * ACTIVE – The scaling group is active.\n\n\
            \  * UPDATING – The scaling group is in the process of being updated.\n\
            \n  * UPDATE_FAILED – The update action failed.\n\n  * DELETING – The\
            \ scaling group is in the process of being deleted.\n\n  * DELETE_FAILED\
            \ – The system failed to delete the scaling group.\n\n  * DELETED – The\
            \ scaling group is successfully deleted."
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the scaling group was updated in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the scaling group was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    CreateKxUserRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment where you want
            to create a user.
        userName:
          allOf:
          - $ref: '#/components/schemas/KxUserNameString'
          description: A unique identifier for the user.
        iamRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM role ARN that will be associated with the user.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of key-value pairs to label the user. You can add up
            to 50 tags to a user.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - userName
      - iamRole
    CreateKxUserResponse:
      type: object
      properties:
        userName:
          allOf:
          - $ref: '#/components/schemas/KxUserNameString'
          description: A unique identifier for the user.
        userArn:
          allOf:
          - $ref: '#/components/schemas/KxUserArn'
          description: The Amazon Resource Name (ARN) that identifies the user. For
            more information about ARNs and how to use ARNs in policies, see [IAM
            Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html)
            in the _IAM User Guide_.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        iamRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM role ARN that will be associated with the user.
    CreateKxVolumeRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment, whose clusters
            can attach to the volume.
        volumeType:
          allOf:
          - $ref: '#/components/schemas/KxVolumeType'
          description: The type of file system volume. Currently, FinSpace only supports
            `NAS_1` volume type. When you select `NAS_1` volume type, you must also
            provide `nas1Configuration`.
        volumeName:
          allOf:
          - $ref: '#/components/schemas/KxVolumeName'
          description: A unique identifier for the volume.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the volume.
        nas1Configuration:
          allOf:
          - $ref: '#/components/schemas/KxNAS1Configuration'
          description: Specifies the configuration for the Network attached storage
            (NAS_1) file system volume. This parameter is required when you choose
            `volumeType` as _NAS_1_.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: The number of availability zones you want to assign per volume.
            Currently, FinSpace only supports `SINGLE` for volumes. This places dataview
            in a single AZ.
        availabilityZoneIds:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneIds'
          description: The identifier of the availability zones.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of key-value pairs to label the volume. You can add
            up to 50 tags to a volume.
      required:
      - environmentId
      - volumeType
      - volumeName
      - azMode
      - availabilityZoneIds
    CreateKxVolumeResponse:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment, whose clusters
            can attach to the volume.
        volumeName:
          allOf:
          - $ref: '#/components/schemas/KxVolumeName'
          description: A unique identifier for the volume.
        volumeType:
          allOf:
          - $ref: '#/components/schemas/KxVolumeType'
          description: The type of file system volume. Currently, FinSpace only supports
            `NAS_1` volume type.
        volumeArn:
          allOf:
          - $ref: '#/components/schemas/KxVolumeArn'
          description: The ARN identifier of the volume.
        nas1Configuration:
          allOf:
          - $ref: '#/components/schemas/KxNAS1Configuration'
          description: Specifies the configuration for the Network attached storage
            (NAS_1) file system volume.
        status:
          allOf:
          - $ref: '#/components/schemas/KxVolumeStatus'
          description: "The status of volume creation.\n\n  * CREATING – The volume\
            \ creation is in progress.\n\n  * CREATE_FAILED – The volume creation\
            \ has failed.\n\n  * ACTIVE – The volume is active.\n\n  * UPDATING –\
            \ The volume is in the process of being updated.\n\n  * UPDATE_FAILED\
            \ – The update action failed.\n\n  * UPDATED – The volume is successfully\
            \ updated.\n\n  * DELETING – The volume is in the process of being deleted.\n\
            \n  * DELETE_FAILED – The system failed to delete the volume.\n\n  * DELETED\
            \ – The volume is successfully deleted."
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxVolumeStatusReason'
          description: The error message when a failed state occurs.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: The number of availability zones you want to assign per volume.
            Currently, FinSpace only supports `SINGLE` for volumes. This places dataview
            in a single AZ.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the volume.
        availabilityZoneIds:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneIds'
          description: The identifier of the availability zones.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the volume was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    CustomDNSConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/CustomDNSServer'
    CustomDNSServer:
      type: object
      properties:
        customDNSServerName:
          allOf:
          - $ref: '#/components/schemas/ValidHostname'
          description: The name of the DNS server.
        customDNSServerIP:
          allOf:
          - $ref: '#/components/schemas/ValidIPAddress'
          description: The IP address of the DNS server.
      required:
      - customDNSServerName
      - customDNSServerIP
      description: A list of DNS server name and server IP. This is used to set up
        Route-53 outbound resolvers.
    DataBundleArn:
      type: string
      pattern: ^arn:aws:finspace:[A-Za-z0-9_/.-]{0,63}:\d*:data-bundle/[0-9A-Za-z_-]{1,128}$
      minLength: 20
      maxLength: 2048
    DataBundleArns:
      type: array
      items:
        $ref: '#/components/schemas/DataBundleArn'
    DatabaseArn:
      type: string
    DatabaseName:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
      minLength: 3
      maxLength: 63
    DbPath:
      type: string
      pattern: ^(\*)*[\/\?\*]([^\/]+\/){0,2}[^\/]*$
      minLength: 1
      maxLength: 1025
    DbPaths:
      type: array
      items:
        $ref: '#/components/schemas/DbPath'
    DeleteEnvironmentRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The identifier for the FinSpace environment.
      required:
      - environmentId
    DeleteEnvironmentResponse:
      type: object
      properties: {}
    DeleteKxClusterNodeRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: The name of the cluster, for which you want to delete the nodes.
        nodeId:
          allOf:
          - $ref: '#/components/schemas/KxClusterNodeIdString'
          description: A unique identifier for the node that you want to delete.
      required:
      - environmentId
      - clusterName
      - nodeId
    DeleteKxClusterNodeResponse:
      type: object
      properties: {}
    DeleteKxClusterRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: The name of the cluster that you want to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - clusterName
    DeleteKxClusterResponse:
      type: object
      properties: {}
    DeleteKxDatabaseRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database that you want to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - databaseName
      - clientToken
    DeleteKxDatabaseResponse:
      type: object
      properties: {}
    DeleteKxDataviewRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment, from where you
            want to delete the dataview.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the database whose dataview you want to delete.
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: The name of the dataview that you want to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - databaseName
      - dataviewName
      - clientToken
    DeleteKxDataviewResponse:
      type: object
      properties: {}
    DeleteKxEnvironmentRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
    DeleteKxEnvironmentResponse:
      type: object
      properties: {}
    DeleteKxScalingGroupRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment, from where you
            want to delete the dataview.
        scalingGroupName:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupName'
          description: A unique identifier for the kdb scaling group.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - scalingGroupName
    DeleteKxScalingGroupResponse:
      type: object
      properties: {}
    DeleteKxUserRequest:
      type: object
      properties:
        userName:
          allOf:
          - $ref: '#/components/schemas/KxUserNameString'
          description: A unique identifier for the user that you want to delete.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - userName
      - environmentId
    DeleteKxUserResponse:
      type: object
      properties: {}
    DeleteKxVolumeRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment, whose clusters
            can attach to the volume.
        volumeName:
          allOf:
          - $ref: '#/components/schemas/KxVolumeName'
          description: The name of the volume that you want to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - volumeName
    DeleteKxVolumeResponse:
      type: object
      properties: {}
    Description:
      type: string
      pattern: ^[a-zA-Z0-9. ]{1,1000}$
      minLength: 1
      maxLength: 1000
    EmailId:
      type: string
      pattern: ^[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+[.]+[A-Za-z]+$
      minLength: 1
      maxLength: 128
    Environment:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name of the FinSpace environment.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The identifier of the FinSpace environment.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The ID of the AWS account in which the FinSpace environment
            is created.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: The current status of creation of the FinSpace environment.
        environmentUrl:
          allOf:
          - $ref: '#/components/schemas/url'
          description: The sign-in URL for the web application of your FinSpace environment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the FinSpace environment.
        environmentArn:
          allOf:
          - $ref: '#/components/schemas/EnvironmentArn'
          description: The Amazon Resource Name (ARN) of your FinSpace environment.
        sageMakerStudioDomainUrl:
          allOf:
          - $ref: '#/components/schemas/SmsDomainUrl'
          description: The URL of the integrated FinSpace notebook environment in
            your web application.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          description: The KMS key id used to encrypt in the FinSpace environment.
        dedicatedServiceAccountId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The AWS account ID of the dedicated service account associated
            with your FinSpace environment.
        federationMode:
          allOf:
          - $ref: '#/components/schemas/FederationMode'
          description: The authentication mode for the environment.
        federationParameters:
          allOf:
          - $ref: '#/components/schemas/FederationParameters'
          description: Configuration information when authentication mode is FEDERATED.
      description: Represents an FinSpace environment.
    EnvironmentArn:
      type: string
      pattern: ^arn:aws:finspace:[A-Za-z0-9_/.-]{0,63}:\d+:environment/[0-9A-Za-z_-]{1,128}$
      minLength: 20
      maxLength: 2048
    EnvironmentErrorMessage:
      type: string
      pattern: ^[a-zA-Z0-9. ]{1,1000}$
      minLength: 0
      maxLength: 1000
    EnvironmentId:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 32
    EnvironmentList:
      type: array
      items:
        $ref: '#/components/schemas/Environment'
    EnvironmentName:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$
      minLength: 1
      maxLength: 255
    EnvironmentStatus:
      type: string
      enum:
      - CREATE_REQUESTED
      - CREATING
      - CREATED
      - DELETE_REQUESTED
      - DELETING
      - DELETED
      - FAILED_CREATION
      - RETRY_DELETION
      - FAILED_DELETION
      - UPDATE_NETWORK_REQUESTED
      - UPDATING_NETWORK
      - FAILED_UPDATING_NETWORK
      - SUSPENDED
    ErrorDetails:
      type: string
      enum:
      - The inputs to this request are invalid.
      - Service limits have been exceeded.
      - Missing required permission to perform this request.
      - One or more inputs to this request were not found.
      - The system temporarily lacks sufficient resources to process the request.
      - An internal error has occurred.
      - Cancelled
      - A user recoverable error has occurred
    ErrorInfo:
      type: object
      properties:
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: Specifies the error message that appears if a flow fails.
        errorType:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: Specifies the type of error.
      description: Provides details in the event of a failed flow, including the error
        type and the related error message.
    ErrorMessage:
      type: string
      minLength: 0
      maxLength: 1000
    ErrorMessage2:
      type: string
    ExecutionRoleArn:
      type: string
      pattern: ^arn:aws[a-z0-9-]*:iam::\d{12}:role\/[\w-\/.@+=,]{1,1017}$
      minLength: 1
      maxLength: 1024
    FederationAttributeKey:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 32
    FederationAttributeValue:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 1000
    FederationMode:
      type: string
      enum:
      - FEDERATED
      - LOCAL
    FederationParameters:
      type: object
      properties:
        samlMetadataDocument:
          allOf:
          - $ref: '#/components/schemas/SamlMetadataDocument'
          description: SAML 2.0 Metadata document from identity provider (IdP).
        samlMetadataURL:
          allOf:
          - $ref: '#/components/schemas/url'
          description: Provide the metadata URL from your SAML 2.0 compliant identity
            provider (IdP).
        applicationCallBackURL:
          allOf:
          - $ref: '#/components/schemas/url'
          description: The redirect or sign-in URL that should be entered into the
            SAML 2.0 compliant identity provider configuration (IdP).
        federationURN:
          allOf:
          - $ref: '#/components/schemas/urn'
          description: The Uniform Resource Name (URN). Also referred as Service Provider
            URN or Audience URI or Service Provider Entity ID.
        federationProviderName:
          allOf:
          - $ref: '#/components/schemas/FederationProviderName'
          description: Name of the identity provider (IdP).
        attributeMap:
          allOf:
          - $ref: '#/components/schemas/AttributeMap'
          description: SAML attribute name and value. The name must always be `Email`
            and the value should be set to the attribute definition in which user
            email is set. For example, name would be `Email` and value `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress`.
            Please check your SAML 2.0 compliant identity provider (IdP) documentation
            for details.
      description: Configuration information when authentication mode is FEDERATED.
    FederationProviderName:
      type: string
      pattern: ^[^_\p{Z}][\p{L}\p{M}\p{S}\p{N}\p{P}][^_\p{Z}]+$
      minLength: 1
      maxLength: 32
    FinSpaceTaggableArn:
      type: string
      pattern: ^arn:aws:finspace:[A-Za-z0-9_/.-]{0,63}:\d+:(environment|kxEnvironment)/[0-9A-Za-z_-]{1,128}(/(kxCluster|kxUser|kxVolume|kxScalingGroup)/[a-zA-Z0-9_-]{1,255}|/(kxDatabase/[a-zA-Z0-9_-]{1,255}(/kxDataview/[a-zA-Z0-9_-]{1,255})?))?$
      minLength: 20
      maxLength: 2048
    GetEnvironmentRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The identifier of the FinSpace environment.
      required:
      - environmentId
    GetEnvironmentResponse:
      type: object
      properties:
        environment:
          allOf:
          - $ref: '#/components/schemas/Environment'
          description: The name of the FinSpace environment.
    GetKxChangesetRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier of the changeset for which you want to
            retrieve data.
      required:
      - environmentId
      - databaseName
      - changesetId
    GetKxChangesetResponse:
      type: object
      properties:
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier for the changeset.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        changeRequests:
          allOf:
          - $ref: '#/components/schemas/ChangeRequests'
          description: A list of change request objects that are run in order.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the changeset was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        activeFromTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Beginning time from which the changeset is active. The value
            is determined as epoch time in milliseconds. For example, the value for
            Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the changeset was updated in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        status:
          allOf:
          - $ref: '#/components/schemas/ChangesetStatus'
          description: "Status of the changeset creation process.\n\n  * Pending –\
            \ Changeset creation is pending.\n\n  * Processing – Changeset creation\
            \ is running.\n\n  * Failed – Changeset creation has failed.\n\n  * Complete\
            \ – Changeset creation has succeeded."
        errorInfo:
          allOf:
          - $ref: '#/components/schemas/ErrorInfo'
          description: Provides details in the event of a failed flow, including the
            error type and the related error message.
    GetKxClusterRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: The name of the cluster that you want to retrieve.
      required:
      - environmentId
      - clusterName
    GetKxClusterResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/KxClusterStatus'
          description: "The status of cluster creation.\n\n  * PENDING – The cluster\
            \ is pending creation.\n\n  * CREATING – The cluster creation process\
            \ is in progress.\n\n  * CREATE_FAILED – The cluster creation process\
            \ has failed.\n\n  * RUNNING – The cluster creation process is running.\n\
            \n  * UPDATING – The cluster is in the process of being updated.\n\n \
            \ * DELETING – The cluster is in the process of being deleted.\n\n  *\
            \ DELETED – The cluster has been deleted.\n\n  * DELETE_FAILED – The cluster\
            \ failed to delete."
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxClusterStatusReason'
          description: The error message when a failed state occurs.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: A unique name for the cluster.
        clusterType:
          allOf:
          - $ref: '#/components/schemas/KxClusterType'
          description: "Specifies the type of KDB database that is being created.\
            \ The following types are available:\n\n  * HDB – A Historical Database.\
            \ The data is only accessible with read-only permissions from one of the\
            \ FinSpace managed kdb databases mounted to the cluster.\n\n  * RDB –\
            \ A Realtime Database. This type of database captures all the data from\
            \ a ticker plant and stores it in memory until the end of day, after which\
            \ it writes all of its data to a disk and reloads the HDB. This cluster\
            \ type requires local storage for temporary storage of data during the\
            \ savedown process. If you specify this field in your request, you must\
            \ provide the `savedownStorageConfiguration` parameter.\n\n  * GATEWAY\
            \ – A gateway cluster allows you to access data across processes in kdb\
            \ systems. It allows you to create your own routing logic using the initialization\
            \ scripts and custom code. This type of cluster does not require a writable\
            \ local storage.\n\n  * GP – A general purpose cluster allows you to quickly\
            \ iterate on code during development by granting greater access to system\
            \ commands and enabling a fast reload of custom code. This cluster type\
            \ can optionally mount databases including cache and savedown storage.\
            \ For this cluster type, the node count is fixed at 1. It does not support\
            \ autoscaling and supports only `SINGLE` AZ mode.\n\n  * Tickerplant –\
            \ A tickerplant cluster allows you to subscribe to feed handlers based\
            \ on IAM permissions. It can publish to RDBs, other Tickerplants, and\
            \ real-time subscribers (RTS). Tickerplants can persist messages to log,\
            \ which is readable by any RDB environment. It supports only single-node\
            \ that is only one kdb process."
        tickerplantLogConfiguration:
          $ref: '#/components/schemas/TickerplantLogConfiguration'
        volumes:
          allOf:
          - $ref: '#/components/schemas/Volumes'
          description: A list of volumes attached to the cluster.
        databases:
          allOf:
          - $ref: '#/components/schemas/KxDatabaseConfigurations'
          description: A list of databases mounted on the cluster.
        cacheStorageConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxCacheStorageConfigurations'
          description: The configurations for a read only cache storage associated
            with a cluster. This cache will be stored as an FSx Lustre that reads
            from the S3 store.
        autoScalingConfiguration:
          allOf:
          - $ref: '#/components/schemas/AutoScalingConfiguration'
          description: The configuration based on which FinSpace will scale in or
            scale out nodes in your cluster.
        clusterDescription:
          allOf:
          - $ref: '#/components/schemas/KxClusterDescription'
          description: A description of the cluster.
        capacityConfiguration:
          allOf:
          - $ref: '#/components/schemas/CapacityConfiguration'
          description: A structure for the metadata of a cluster. It includes information
            like the CPUs needed, memory of instances, and number of instances.
        releaseLabel:
          allOf:
          - $ref: '#/components/schemas/ReleaseLabel'
          description: The version of FinSpace managed kdb to run.
        vpcConfiguration:
          allOf:
          - $ref: '#/components/schemas/VpcConfiguration'
          description: Configuration details about the network where the Privatelink
            endpoint of the cluster resides.
        initializationScript:
          allOf:
          - $ref: '#/components/schemas/InitializationScriptFilePath'
          description: Specifies a Q program that will be run at launch of a cluster.
            It is a relative path within _.zip_ file that contains the custom code,
            which will be loaded on the cluster. It must include the file name itself.
            For example, `somedir/init.q`.
        commandLineArguments:
          allOf:
          - $ref: '#/components/schemas/KxCommandLineArguments'
          description: Defines key-value pairs to make them available inside the cluster.
        code:
          allOf:
          - $ref: '#/components/schemas/CodeConfiguration'
          description: The details of the custom code that you want to use inside
            a cluster when analyzing a data. It consists of the S3 source bucket,
            location, S3 object version, and the relative path from where the custom
            code is loaded into the cluster.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/ExecutionRoleArn'
          description: An IAM role that defines a set of permissions associated with
            a cluster. These permissions are assumed when a cluster attempts to access
            another cluster.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the cluster was modified. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        savedownStorageConfiguration:
          allOf:
          - $ref: '#/components/schemas/KxSavedownStorageConfiguration'
          description: The size and type of the temporary storage that is used to
            hold data during the savedown process. This parameter is required when
            you choose `clusterType` as RDB. All the data written to this storage
            space is lost when the cluster node is restarted.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: "The number of availability zones you want to assign per cluster.\
            \ This can be one of the following\n\n  * `SINGLE` – Assigns one availability\
            \ zone per cluster.\n\n  * `MULTI` – Assigns all the availability zones\
            \ per cluster."
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The availability zone identifiers for the requested regions.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the cluster was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        scalingGroupConfiguration:
          $ref: '#/components/schemas/KxScalingGroupConfiguration'
    GetKxConnectionStringRequest:
      type: object
      properties:
        userArn:
          allOf:
          - $ref: '#/components/schemas/KxUserArn'
          description: The Amazon Resource Name (ARN) that identifies the user. For
            more information about ARNs and how to use ARNs in policies, see [IAM
            Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html)
            in the _IAM User Guide_.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: A name of the kdb cluster.
      required:
      - userArn
      - environmentId
      - clusterName
    GetKxConnectionStringResponse:
      type: object
      properties:
        signedConnectionString:
          allOf:
          - $ref: '#/components/schemas/SignedKxConnectionString'
          description: The signed connection string that you can use to connect to
            clusters.
    GetKxDatabaseRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
      required:
      - environmentId
      - databaseName
    GetKxDatabaseResponse:
      type: object
      properties:
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database for which the information is retrieved.
        databaseArn:
          allOf:
          - $ref: '#/components/schemas/DatabaseArn'
          description: The ARN identifier of the database.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the database.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the database is created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the database was modified. The value is
            determined as epoch time in milliseconds. For example, the value for Monday,
            November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastCompletedChangesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier for the changeset.
        numBytes:
          allOf:
          - $ref: '#/components/schemas/numBytes'
          description: The total number of bytes in the database.
        numChangesets:
          allOf:
          - $ref: '#/components/schemas/numChangesets'
          description: The total number of changesets in the database.
        numFiles:
          allOf:
          - $ref: '#/components/schemas/numFiles'
          description: The total number of files in the database.
    GetKxDataviewRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment, from where you
            want to retrieve the dataview details.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the database where you created the dataview.
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: A unique identifier for the dataview.
      required:
      - environmentId
      - databaseName
      - dataviewName
    GetKxDataviewResponse:
      type: object
      properties:
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the database where you created the dataview.
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: A unique identifier for the dataview.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: The number of availability zones you want to assign per volume.
            Currently, FinSpace only supports `SINGLE` for volumes. This places dataview
            in a single AZ.
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The identifier of the availability zones.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier of the changeset that you want to use to
            ingest data.
        segmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxDataviewSegmentConfigurationList'
          description: The configuration that contains the database path of the data
            that you want to place on each selected volume. Each segment must have
            a unique database path for each volume. If you do not explicitly specify
            any database path for a volume, they are accessible from the cluster through
            the default S3/object store segment.
        activeVersions:
          allOf:
          - $ref: '#/components/schemas/KxDataviewActiveVersionList'
          description: The current active changeset versions of the database on the
            given dataview.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the dataview.
        autoUpdate:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: The option to specify whether you want to apply all the future
            additions and corrections automatically to the dataview when new changesets
            are ingested. The default value is false.
        readWrite:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: Returns True if the dataview is created as writeable and False
            otherwise.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment, from where you
            want to retrieve the dataview details.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the dataview was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the dataview was updated in FinSpace. The
            value is determined as epoch time in milliseconds. For example, the value
            for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        status:
          allOf:
          - $ref: '#/components/schemas/KxDataviewStatus'
          description: "The status of dataview creation.\n\n  * `CREATING` – The dataview\
            \ creation is in progress.\n\n  * `UPDATING` – The dataview is in the\
            \ process of being updated.\n\n  * `ACTIVE` – The dataview is active."
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxDataviewStatusReason'
          description: The error message when a failed state occurs.
    GetKxEnvironmentRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
      required:
      - environmentId
    GetKxEnvironmentResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentName'
          description: The name of the kdb environment.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The unique identifier of the AWS account that is used to create
            the kdb environment.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: The status of the kdb environment.
        tgwStatus:
          allOf:
          - $ref: '#/components/schemas/tgwStatus'
          description: The status of the network configuration.
        dnsStatus:
          allOf:
          - $ref: '#/components/schemas/dnsStatus'
          description: The status of DNS configuration.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/EnvironmentErrorMessage'
          description: Specifies the error message that appears if a flow fails.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the kdb environment.
        environmentArn:
          allOf:
          - $ref: '#/components/schemas/EnvironmentArn'
          description: The ARN identifier of the environment.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          description: The KMS key ID to encrypt your data in the FinSpace environment.
        dedicatedServiceAccountId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the AWS environment infrastructure
            account.
        transitGatewayConfiguration:
          $ref: '#/components/schemas/TransitGatewayConfiguration'
        customDNSConfiguration:
          allOf:
          - $ref: '#/components/schemas/CustomDNSConfiguration'
          description: A list of DNS server name and server IP. This is used to set
            up Route-53 outbound resolvers.
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb environment was created in FinSpace.
        updateTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb environment was updated.
        availabilityZoneIds:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneIds'
          description: The identifier of the availability zones where subnets for
            the environment are created.
        certificateAuthorityArn:
          allOf:
          - $ref: '#/components/schemas/stringValueLength1to255'
          description: The Amazon Resource Name (ARN) of the certificate authority
            of the kdb environment.
    GetKxScalingGroupRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment.
        scalingGroupName:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupName'
          description: A unique identifier for the kdb scaling group.
      required:
      - environmentId
      - scalingGroupName
    GetKxScalingGroupResponse:
      type: object
      properties:
        scalingGroupName:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupName'
          description: A unique identifier for the kdb scaling group.
        scalingGroupArn:
          allOf:
          - $ref: '#/components/schemas/arn'
          description: The ARN identifier for the scaling group.
        hostType:
          allOf:
          - $ref: '#/components/schemas/KxHostType'
          description: "The memory and CPU capabilities of the scaling group host\
            \ on which FinSpace Managed kdb clusters will be placed.\n\nIt can have\
            \ one of the following values:\n\n  * `kx.sg.large` – The host type with\
            \ a configuration of 16 GiB memory and 2 vCPUs.\n\n  * `kx.sg.xlarge`\
            \ – The host type with a configuration of 32 GiB memory and 4 vCPUs.\n\
            \n  * `kx.sg.2xlarge` – The host type with a configuration of 64 GiB memory\
            \ and 8 vCPUs.\n\n  * `kx.sg.4xlarge` – The host type with a configuration\
            \ of 108 GiB memory and 16 vCPUs.\n\n  * `kx.sg.8xlarge` – The host type\
            \ with a configuration of 216 GiB memory and 32 vCPUs.\n\n  * `kx.sg.16xlarge`\
            \ – The host type with a configuration of 432 GiB memory and 64 vCPUs.\n\
            \n  * `kx.sg.32xlarge` – The host type with a configuration of 864 GiB\
            \ memory and 128 vCPUs.\n\n  * `kx.sg1.16xlarge` – The host type with\
            \ a configuration of 1949 GiB memory and 64 vCPUs.\n\n  * `kx.sg1.24xlarge`\
            \ – The host type with a configuration of 2948 GiB memory and 96 vCPUs."
        clusters:
          allOf:
          - $ref: '#/components/schemas/KxClusterNameList'
          description: The list of Managed kdb clusters that are currently active
            in the given scaling group.
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The identifier of the availability zones.
        status:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupStatus'
          description: "The status of scaling group.\n\n  * CREATING – The scaling\
            \ group creation is in progress.\n\n  * CREATE_FAILED – The scaling group\
            \ creation has failed.\n\n  * ACTIVE – The scaling group is active.\n\n\
            \  * UPDATING – The scaling group is in the process of being updated.\n\
            \n  * UPDATE_FAILED – The update action failed.\n\n  * DELETING – The\
            \ scaling group is in the process of being deleted.\n\n  * DELETE_FAILED\
            \ – The system failed to delete the scaling group.\n\n  * DELETED – The\
            \ scaling group is successfully deleted."
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxClusterStatusReason'
          description: The error message when a failed state occurs.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the scaling group was updated in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the scaling group was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    GetKxUserRequest:
      type: object
      properties:
        userName:
          allOf:
          - $ref: '#/components/schemas/KxUserNameString'
          description: A unique identifier for the user.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
      required:
      - userName
      - environmentId
    GetKxUserResponse:
      type: object
      properties:
        userName:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the user.
        userArn:
          allOf:
          - $ref: '#/components/schemas/KxUserArn'
          description: The Amazon Resource Name (ARN) that identifies the user. For
            more information about ARNs and how to use ARNs in policies, see [IAM
            Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html)
            in the _IAM User Guide_.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        iamRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM role ARN that is associated with the user.
    GetKxVolumeRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment, whose clusters
            can attach to the volume.
        volumeName:
          allOf:
          - $ref: '#/components/schemas/KxVolumeName'
          description: A unique identifier for the volume.
      required:
      - environmentId
      - volumeName
    GetKxVolumeResponse:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment, whose clusters
            can attach to the volume.
        volumeName:
          allOf:
          - $ref: '#/components/schemas/KxVolumeName'
          description: A unique identifier for the volume.
        volumeType:
          allOf:
          - $ref: '#/components/schemas/KxVolumeType'
          description: The type of file system volume. Currently, FinSpace only supports
            `NAS_1` volume type.
        volumeArn:
          allOf:
          - $ref: '#/components/schemas/KxVolumeArn'
          description: The ARN identifier of the volume.
        nas1Configuration:
          allOf:
          - $ref: '#/components/schemas/KxNAS1Configuration'
          description: Specifies the configuration for the Network attached storage
            (NAS_1) file system volume.
        status:
          allOf:
          - $ref: '#/components/schemas/KxVolumeStatus'
          description: "The status of volume creation.\n\n  * CREATING – The volume\
            \ creation is in progress.\n\n  * CREATE_FAILED – The volume creation\
            \ has failed.\n\n  * ACTIVE – The volume is active.\n\n  * UPDATING –\
            \ The volume is in the process of being updated.\n\n  * UPDATE_FAILED\
            \ – The update action failed.\n\n  * UPDATED – The volume is successfully\
            \ updated.\n\n  * DELETING – The volume is in the process of being deleted.\n\
            \n  * DELETE_FAILED – The system failed to delete the volume.\n\n  * DELETED\
            \ – The volume is successfully deleted."
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxVolumeStatusReason'
          description: The error message when a failed state occurs.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the volume was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the volume.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: The number of availability zones you want to assign per volume.
            Currently, FinSpace only supports `SINGLE` for volumes. This places dataview
            in a single AZ.
        availabilityZoneIds:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneIds'
          description: The identifier of the availability zones.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the volume was updated in FinSpace. The
            value is determined as epoch time in milliseconds. For example, the value
            for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        attachedClusters:
          allOf:
          - $ref: '#/components/schemas/KxAttachedClusters'
          description: A list of cluster identifiers that a volume is attached to.
    IPAddressType:
      type: string
      enum:
      - IP_V4
    IcmpTypeCode:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/IcmpTypeOrCode'
          description: The ICMP type. A value of _-1_ means all types.
        code:
          allOf:
          - $ref: '#/components/schemas/IcmpTypeOrCode'
          description: The ICMP code. A value of _-1_ means all codes for the specified
            ICMP type.
      required:
      - type
      - code
      description: Defines the ICMP protocol that consists of the ICMP type and code.
    IcmpTypeOrCode:
      type: integer
      default: 0
    IdType:
      type: string
      pattern: ^[a-zA-Z0-9]{1,26}$
      minLength: 1
      maxLength: 26
    InitializationScriptFilePath:
      type: string
      pattern: ^[a-zA-Z0-9\_\-\.\/\\]+$
      minLength: 1
      maxLength: 255
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: The request processing has failed because of an unknown error,
        exception or failure.
    InvalidRequestException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: The request is invalid. Something is wrong with the input to the
        request.
    KmsKeyARN:
      type: string
      pattern: ^arn:aws:kms:.*:\d+:.*$
      minLength: 1
      maxLength: 1000
    KmsKeyId:
      type: string
      pattern: ^[a-zA-Z-0-9-:\/]*$
      minLength: 1
      maxLength: 1000
    KxAttachedCluster:
      type: object
      properties:
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: A unique name for the attached cluster.
        clusterType:
          allOf:
          - $ref: '#/components/schemas/KxClusterType'
          description: Specifies the type of cluster. The volume for TP and RDB cluster
            types will be used for TP logs.
        clusterStatus:
          allOf:
          - $ref: '#/components/schemas/KxClusterStatus'
          description: "The status of the attached cluster.\n\n  * PENDING – The cluster\
            \ is pending creation.\n\n  * CREATING – The cluster creation process\
            \ is in progress.\n\n  * CREATE_FAILED – The cluster creation process\
            \ has failed.\n\n  * RUNNING – The cluster creation process is running.\n\
            \n  * UPDATING – The cluster is in the process of being updated.\n\n \
            \ * DELETING – The cluster is in the process of being deleted.\n\n  *\
            \ DELETED – The cluster has been deleted.\n\n  * DELETE_FAILED – The cluster\
            \ failed to delete."
      description: The structure containing the metadata of the attached clusters.
    KxAttachedClusters:
      type: array
      items:
        $ref: '#/components/schemas/KxAttachedCluster'
    KxAzMode:
      type: string
      enum:
      - SINGLE
      - MULTI
    KxCacheStorageConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/KxCacheStorageType'
          description: "The type of cache storage. The valid values are:\n\n  * CACHE_1000\
            \ – This type provides at least 1000 MB/s disk access throughput. \n\n\
            \  * CACHE_250 – This type provides at least 250 MB/s disk access throughput.\
            \ \n\n  * CACHE_12 – This type provides at least 12 MB/s disk access throughput.\
            \ \n\nFor cache type `CACHE_1000` and `CACHE_250` you can select cache\
            \ size as 1200 GB or increments of 2400 GB. For cache type `CACHE_12`\
            \ you can select the cache size in increments of 6000 GB."
        size:
          allOf:
          - $ref: '#/components/schemas/KxCacheStorageSize'
          description: The size of cache in Gigabytes.
      required:
      - type
      - size
      description: The configuration for read only disk cache associated with a cluster.
    KxCacheStorageConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/KxCacheStorageConfiguration'
    KxCacheStorageSize:
      type: integer
    KxCacheStorageType:
      type: string
      minLength: 8
      maxLength: 10
    KxChangesetListEntry:
      type: object
      properties:
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier for the changeset.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the changeset was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        activeFromTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Beginning time from which the changeset is active. The value
            is determined as epoch time in milliseconds. For example, the value for
            Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the changeset was modified. The value
            is determined as epoch time in milliseconds. For example, the value for
            Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        status:
          allOf:
          - $ref: '#/components/schemas/ChangesetStatus'
          description: "Status of the changeset.\n\n  * Pending – Changeset creation\
            \ is pending.\n\n  * Processing – Changeset creation is running.\n\n \
            \ * Failed – Changeset creation has failed.\n\n  * Complete – Changeset\
            \ creation has succeeded."
      description: Details of changeset.
    KxChangesets:
      type: array
      items:
        $ref: '#/components/schemas/KxChangesetListEntry'
    KxCluster:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/KxClusterStatus'
          description: "The status of a cluster.\n\n  * PENDING – The cluster is pending\
            \ creation.\n\n  * CREATING –The cluster creation process is in progress.\n\
            \n  * CREATE_FAILED– The cluster creation process has failed.\n\n  * RUNNING\
            \ – The cluster creation process is running.\n\n  * UPDATING – The cluster\
            \ is in the process of being updated.\n\n  * DELETING – The cluster is\
            \ in the process of being deleted.\n\n  * DELETED – The cluster has been\
            \ deleted.\n\n  * DELETE_FAILED – The cluster failed to delete."
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxClusterStatusReason'
          description: The error message when a failed state occurs.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: A unique name for the cluster.
        clusterType:
          allOf:
          - $ref: '#/components/schemas/KxClusterType'
          description: "Specifies the type of KDB database that is being created.\
            \ The following types are available:\n\n  * HDB – A Historical Database.\
            \ The data is only accessible with read-only permissions from one of the\
            \ FinSpace managed kdb databases mounted to the cluster.\n\n  * RDB –\
            \ A Realtime Database. This type of database captures all the data from\
            \ a ticker plant and stores it in memory until the end of day, after which\
            \ it writes all of its data to a disk and reloads the HDB. This cluster\
            \ type requires local storage for temporary storage of data during the\
            \ savedown process. If you specify this field in your request, you must\
            \ provide the `savedownStorageConfiguration` parameter.\n\n  * GATEWAY\
            \ – A gateway cluster allows you to access data across processes in kdb\
            \ systems. It allows you to create your own routing logic using the initialization\
            \ scripts and custom code. This type of cluster does not require a writable\
            \ local storage.\n\n  * GP – A general purpose cluster allows you to quickly\
            \ iterate on code during development by granting greater access to system\
            \ commands and enabling a fast reload of custom code. This cluster type\
            \ can optionally mount databases including cache and savedown storage.\
            \ For this cluster type, the node count is fixed at 1. It does not support\
            \ autoscaling and supports only `SINGLE` AZ mode.\n\n  * Tickerplant –\
            \ A tickerplant cluster allows you to subscribe to feed handlers based\
            \ on IAM permissions. It can publish to RDBs, other Tickerplants, and\
            \ real-time subscribers (RTS). Tickerplants can persist messages to log,\
            \ which is readable by any RDB environment. It supports only single-node\
            \ that is only one kdb process."
        clusterDescription:
          allOf:
          - $ref: '#/components/schemas/KxClusterDescription'
          description: A description of the cluster.
        releaseLabel:
          allOf:
          - $ref: '#/components/schemas/ReleaseLabel'
          description: A version of the FinSpace managed kdb to run.
        volumes:
          allOf:
          - $ref: '#/components/schemas/Volumes'
          description: A list of volumes attached to the cluster.
        initializationScript:
          allOf:
          - $ref: '#/components/schemas/InitializationScriptFilePath'
          description: Specifies a Q program that will be run at launch of a cluster.
            It is a relative path within _.zip_ file that contains the custom code,
            which will be loaded on the cluster. It must include the file name itself.
            For example, `somedir/init.q`.
        executionRole:
          allOf:
          - $ref: '#/components/schemas/ExecutionRoleArn'
          description: An IAM role that defines a set of permissions associated with
            a cluster. These permissions are assumed when a cluster attempts to access
            another cluster.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: "The number of availability zones assigned per cluster. This\
            \ can be one of the following:\n\n  * `SINGLE` – Assigns one availability\
            \ zone per cluster.\n\n  * `MULTI` – Assigns all the availability zones\
            \ per cluster."
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The availability zone identifiers for the requested regions.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the cluster was modified. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the cluster was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
      description: The details of a kdb cluster.
    KxClusterCodeDeploymentConfiguration:
      type: object
      properties:
        deploymentStrategy:
          allOf:
          - $ref: '#/components/schemas/KxClusterCodeDeploymentStrategy'
          description: "The type of deployment that you want on a cluster.\n\n  *\
            \ ROLLING – This options updates the cluster by stopping the exiting q\
            \ process and starting a new q process with updated configuration.\n\n\
            \  * NO_RESTART – This option updates the cluster without stopping the\
            \ running q process. It is only available for `GP` type cluster. This\
            \ option is quicker as it reduces the turn around time to update configuration\
            \ on a cluster. \n\nWith this deployment mode, you cannot update the `initializationScript`\
            \ and `commandLineArguments` parameters.\n\n  * FORCE – This option updates\
            \ the cluster by immediately stopping all the running processes before\
            \ starting up new ones with the updated configuration."
      required:
      - deploymentStrategy
      description: The configuration that allows you to choose how you want to update
        code on a cluster. Depending on the option you choose, you can reduce the
        time it takes to update the cluster.
    KxClusterCodeDeploymentStrategy:
      type: string
      enum:
      - NO_RESTART
      - ROLLING
      - FORCE
    KxClusterDescription:
      type: string
      pattern: ^[a-zA-Z0-9\_\-\.\s]+$
      minLength: 1
      maxLength: 1000
    KxClusterName:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
      minLength: 3
      maxLength: 63
    KxClusterNameList:
      type: array
      items:
        $ref: '#/components/schemas/KxClusterName'
    KxClusterNodeIdString:
      type: string
      minLength: 1
      maxLength: 40
    KxClusterStatus:
      type: string
      enum:
      - PENDING
      - CREATING
      - CREATE_FAILED
      - RUNNING
      - UPDATING
      - DELETING
      - DELETED
      - DELETE_FAILED
    KxClusterStatusReason:
      type: string
      pattern: ^[a-zA-Z0-9\_\-\.\s]+$
      minLength: 1
      maxLength: 250
    KxClusterType:
      type: string
      enum:
      - HDB
      - RDB
      - GATEWAY
      - GP
      - TICKERPLANT
    KxClusters:
      type: array
      items:
        $ref: '#/components/schemas/KxCluster'
    KxCommandLineArgument:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/KxCommandLineArgumentKey'
          description: The name of the key.
        value:
          allOf:
          - $ref: '#/components/schemas/KxCommandLineArgumentValue'
          description: The value of the key.
      description: Defines the key-value pairs to make them available inside the cluster.
    KxCommandLineArgumentKey:
      type: string
      pattern: ^(?![Aa][Ww][Ss])(s|([a-zA-Z][a-zA-Z0-9_]+))|(AWS_ZIP_DEFAULT)$
      minLength: 1
      maxLength: 1024
    KxCommandLineArgumentValue:
      type: string
      pattern: ^[a-zA-Z0-9_:./,; ]+$
      minLength: 1
      maxLength: 1024
    KxCommandLineArguments:
      type: array
      items:
        $ref: '#/components/schemas/KxCommandLineArgument'
    KxDatabaseCacheConfiguration:
      type: object
      properties:
        cacheType:
          allOf:
          - $ref: '#/components/schemas/KxCacheStorageType'
          description: "The type of disk cache. This parameter is used to map the\
            \ database path to cache storage. The valid values are:\n\n  * CACHE_1000\
            \ – This type provides at least 1000 MB/s disk access throughput."
        dbPaths:
          allOf:
          - $ref: '#/components/schemas/DbPaths'
          description: Specifies the portions of database that will be loaded into
            the cache for access.
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: The name of the dataview to be used for caching historical
            data on disk.
      required:
      - cacheType
      - dbPaths
      description: The structure of database cache configuration that is used for
        mapping database paths to cache types in clusters.
    KxDatabaseCacheConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/KxDatabaseCacheConfiguration'
    KxDatabaseConfiguration:
      type: object
      properties:
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database. When this parameter is specified
            in the structure, S3 with the whole database is included by default.
        cacheConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxDatabaseCacheConfigurations'
          description: Configuration details for the disk cache used to increase performance
            reading from a kdb database mounted to the cluster.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier of the changeset that is associated with
            the cluster.
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: The name of the dataview to be used for caching historical
            data on disk.
        dataviewConfiguration:
          allOf:
          - $ref: '#/components/schemas/KxDataviewConfiguration'
          description: The configuration of the dataview to be used with specified
            cluster.
      required:
      - databaseName
      description: The configuration of data that is available for querying from this
        database.
    KxDatabaseConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/KxDatabaseConfiguration'
    KxDatabaseListEntry:
      type: object
      properties:
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the database was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the database was modified. The value is
            determined as epoch time in milliseconds. For example, the value for Monday,
            November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
      description: Details about a FinSpace managed kdb database
    KxDatabases:
      type: array
      items:
        $ref: '#/components/schemas/KxDatabaseListEntry'
    KxDataviewActiveVersion:
      type: object
      properties:
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier for the changeset.
        segmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxDataviewSegmentConfigurationList'
          description: The configuration that contains the database path of the data
            that you want to place on each selected volume. Each segment must have
            a unique database path for each volume. If you do not explicitly specify
            any database path for a volume, they are accessible from the cluster through
            the default S3/object store segment.
        attachedClusters:
          allOf:
          - $ref: '#/components/schemas/AttachedClusterList'
          description: The list of clusters that are currently using this dataview.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the dataview version was active. The
            value is determined as epoch time in milliseconds. For example, the value
            for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        versionId:
          allOf:
          - $ref: '#/components/schemas/VersionId'
          description: A unique identifier of the active version.
      description: The active version of the dataview that is currently in use by
        this cluster.
    KxDataviewActiveVersionList:
      type: array
      items:
        $ref: '#/components/schemas/KxDataviewActiveVersion'
    KxDataviewConfiguration:
      type: object
      properties:
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: The unique identifier of the dataview.
        dataviewVersionId:
          allOf:
          - $ref: '#/components/schemas/VersionId'
          description: The version of the dataview corresponding to a given changeset.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier for the changeset.
        segmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxDataviewSegmentConfigurationList'
          description: The db path and volume configuration for the segmented database.
      description: The structure that stores the configuration details of a dataview.
    KxDataviewListEntry:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: A unique identifier of the database.
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: A unique identifier of the dataview.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: The number of availability zones you want to assign per volume.
            Currently, FinSpace only supports `SINGLE` for volumes. This places dataview
            in a single AZ.
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The identifier of the availability zones.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier for the changeset.
        segmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxDataviewSegmentConfigurationList'
          description: The configuration that contains the database path of the data
            that you want to place on each selected volume. Each segment must have
            a unique database path for each volume. If you do not explicitly specify
            any database path for a volume, they are accessible from the cluster through
            the default S3/object store segment.
        activeVersions:
          allOf:
          - $ref: '#/components/schemas/KxDataviewActiveVersionList'
          description: The active changeset versions for the given dataview entry.
        status:
          allOf:
          - $ref: '#/components/schemas/KxDataviewStatus'
          description: The status of a given dataview entry.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the dataview list entry.
        autoUpdate:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: The option to specify whether you want to apply all the future
            additions and corrections automatically to the dataview when you ingest
            new changesets. The default value is false.
        readWrite:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: Returns True if the dataview is created as writeable and False
            otherwise.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the dataview list entry was created
            in FinSpace. The value is determined as epoch time in milliseconds. For
            example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified
            as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the dataview list was updated in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxDataviewStatusReason'
          description: The error message when a failed state occurs.
      description: A collection of kdb dataview entries.
    KxDataviewName:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
      minLength: 3
      maxLength: 63
    KxDataviewSegmentConfiguration:
      type: object
      properties:
        dbPaths:
          allOf:
          - $ref: '#/components/schemas/SegmentConfigurationDbPathList'
          description: The database path of the data that you want to place on each
            selected volume for the segment. Each segment must have a unique database
            path for each volume.
        volumeName:
          allOf:
          - $ref: '#/components/schemas/KxVolumeName'
          description: The name of the volume where you want to add data.
        onDemand:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: Enables on-demand caching on the selected database path when
            a particular file or a column of the database is accessed. When on demand
            caching is **True** , dataviews perform minimal loading of files on the
            filesystem as needed. When it is set to **False** , everything is cached.
            The default value is **False**.
      required:
      - dbPaths
      - volumeName
      description: The configuration that contains the database path of the data that
        you want to place on each selected volume. Each segment must have a unique
        database path for each volume. If you do not explicitly specify any database
        path for a volume, they are accessible from the cluster through the default
        S3/object store segment.
    KxDataviewSegmentConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/KxDataviewSegmentConfiguration'
    KxDataviewStatus:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - UPDATING
      - FAILED
      - DELETING
    KxDataviewStatusReason:
      type: string
      pattern: ^[a-zA-Z0-9\_\-\.\s]+$
      minLength: 1
      maxLength: 250
    KxDataviews:
      type: array
      items:
        $ref: '#/components/schemas/KxDataviewListEntry'
    KxDeploymentConfiguration:
      type: object
      properties:
        deploymentStrategy:
          allOf:
          - $ref: '#/components/schemas/KxDeploymentStrategy'
          description: "The type of deployment that you want on a cluster.\n\n  *\
            \ ROLLING – This options updates the cluster by stopping the exiting q\
            \ process and starting a new q process with updated configuration.\n\n\
            \  * NO_RESTART – This option updates the cluster without stopping the\
            \ running q process. It is only available for `HDB` type cluster. This\
            \ option is quicker as it reduces the turn around time to update configuration\
            \ on a cluster. \n\nWith this deployment mode, you cannot update the `initializationScript`\
            \ and `commandLineArguments` parameters."
      required:
      - deploymentStrategy
      description: The configuration that allows you to choose how you want to update
        the databases on a cluster. Depending on the option you choose, you can reduce
        the time it takes to update the cluster.
    KxDeploymentStrategy:
      type: string
      enum:
      - NO_RESTART
      - ROLLING
    KxEnvironment:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentName'
          description: The name of the kdb environment.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The unique identifier of the AWS account in which you create
            the kdb environment.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: "The status of the environment creation.\n\n  * CREATE_REQUESTED\
            \ – Environment creation has been requested.\n\n  * CREATING – Environment\
            \ is in the process of being created.\n\n  * FAILED_CREATION – Environment\
            \ creation has failed.\n\n  * CREATED – Environment is successfully created\
            \ and is currently active.\n\n  * DELETE REQUESTED – Environment deletion\
            \ has been requested.\n\n  * DELETING – Environment is in the process\
            \ of being deleted.\n\n  * RETRY_DELETION – Initial environment deletion\
            \ failed, system is reattempting delete.\n\n  * DELETED – Environment\
            \ has been deleted.\n\n  * FAILED_DELETION – Environment deletion has\
            \ failed."
        tgwStatus:
          allOf:
          - $ref: '#/components/schemas/tgwStatus'
          description: The status of the network configuration.
        dnsStatus:
          allOf:
          - $ref: '#/components/schemas/dnsStatus'
          description: The status of DNS configuration.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/EnvironmentErrorMessage'
          description: Specifies the error message that appears if a flow fails.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the kdb environment.
        environmentArn:
          allOf:
          - $ref: '#/components/schemas/EnvironmentArn'
          description: The Amazon Resource Name (ARN) of your kdb environment.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          description: The unique identifier of the KMS key.
        dedicatedServiceAccountId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the AWS environment infrastructure
            account.
        transitGatewayConfiguration:
          allOf:
          - $ref: '#/components/schemas/TransitGatewayConfiguration'
          description: Specifies the transit gateway and network configuration to
            connect the kdb environment to an internal network.
        customDNSConfiguration:
          allOf:
          - $ref: '#/components/schemas/CustomDNSConfiguration'
          description: A list of DNS server name and server IP. This is used to set
            up Route-53 outbound resolvers.
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb environment was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        updateTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb environment was modified in
            FinSpace. The value is determined as epoch time in milliseconds. For example,
            the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as
            1635768000000.
        availabilityZoneIds:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneIds'
          description: The identifier of the availability zones where subnets for
            the environment are created.
        certificateAuthorityArn:
          allOf:
          - $ref: '#/components/schemas/stringValueLength1to255'
          description: 'The Amazon Resource Name (ARN) of the certificate authority:'
      description: The details of a kdb environment.
    KxEnvironmentId:
      type: string
      pattern: ^[a-z0-9]+$
      minLength: 1
      maxLength: 32
    KxEnvironmentList:
      type: array
      items:
        $ref: '#/components/schemas/KxEnvironment'
    KxEnvironmentName:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
      minLength: 3
      maxLength: 63
    KxHostType:
      type: string
      pattern: ^[a-zA-Z0-9._]+$
      minLength: 1
      maxLength: 32
    KxNAS1Configuration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/KxNAS1Type'
          description: The type of the network attached storage.
        size:
          allOf:
          - $ref: '#/components/schemas/KxNAS1Size'
          description: The size of the network attached storage. For storage type
            `SSD_1000` and `SSD_250` you can select the minimum size as 1200 GB or
            increments of 2400 GB. For storage type `HDD_12` you can select the minimum
            size as 6000 GB or increments of 6000 GB.
      description: The structure containing the size and type of the network attached
        storage (NAS_1) file system volume.
    KxNAS1Size:
      type: integer
      minimum: 1200
    KxNAS1Type:
      type: string
      enum:
      - SSD_1000
      - SSD_250
      - HDD_12
    KxNode:
      type: object
      properties:
        nodeId:
          allOf:
          - $ref: '#/components/schemas/KxClusterNodeIdString'
          description: A unique identifier for the node.
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The identifier of the availability zones where subnets for
            the environment are created.
        launchTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when a particular node is started. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        status:
          allOf:
          - $ref: '#/components/schemas/KxNodeStatus'
          description: "Specifies the status of the cluster nodes.\n\n  * `RUNNING`\
            \ – The node is actively serving.\n\n  * `PROVISIONING` – The node is\
            \ being prepared."
      description: A structure that stores metadata for a kdb node.
    KxNodeStatus:
      type: string
      enum:
      - RUNNING
      - PROVISIONING
    KxNodeSummaries:
      type: array
      items:
        $ref: '#/components/schemas/KxNode'
    KxSavedownStorageConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/KxSavedownStorageType'
          description: "The type of writeable storage space for temporarily storing\
            \ your savedown data. The valid values are:\n\n  * SDS01 – This type represents\
            \ 3000 IOPS and io2 ebs volume type."
        size:
          allOf:
          - $ref: '#/components/schemas/KxSavedownStorageSize'
          description: The size of temporary storage in gibibytes.
        volumeName:
          allOf:
          - $ref: '#/components/schemas/KxVolumeName'
          description: The name of the kdb volume that you want to use as writeable
            save-down storage for clusters.
      description: The size and type of temporary storage that is used to hold data
        during the savedown process. All the data written to this storage space is
        lost when the cluster node is restarted.
    KxSavedownStorageSize:
      type: integer
      minimum: 10
      maximum: 16000
    KxSavedownStorageType:
      type: string
      enum:
      - SDS01
    KxScalingGroup:
      type: object
      properties:
        scalingGroupName:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupName'
          description: A unique identifier for the kdb scaling group.
        hostType:
          allOf:
          - $ref: '#/components/schemas/KxHostType'
          description: "The memory and CPU capabilities of the scaling group host\
            \ on which FinSpace Managed kdb clusters will be placed.\n\nYou can add\
            \ one of the following values:\n\n  * `kx.sg.large` – The host type with\
            \ a configuration of 16 GiB memory and 2 vCPUs.\n\n  * `kx.sg.xlarge`\
            \ – The host type with a configuration of 32 GiB memory and 4 vCPUs.\n\
            \n  * `kx.sg.2xlarge` – The host type with a configuration of 64 GiB memory\
            \ and 8 vCPUs.\n\n  * `kx.sg.4xlarge` – The host type with a configuration\
            \ of 108 GiB memory and 16 vCPUs.\n\n  * `kx.sg.8xlarge` – The host type\
            \ with a configuration of 216 GiB memory and 32 vCPUs.\n\n  * `kx.sg.16xlarge`\
            \ – The host type with a configuration of 432 GiB memory and 64 vCPUs.\n\
            \n  * `kx.sg.32xlarge` – The host type with a configuration of 864 GiB\
            \ memory and 128 vCPUs.\n\n  * `kx.sg1.16xlarge` – The host type with\
            \ a configuration of 1949 GiB memory and 64 vCPUs.\n\n  * `kx.sg1.24xlarge`\
            \ – The host type with a configuration of 2948 GiB memory and 96 vCPUs."
        clusters:
          allOf:
          - $ref: '#/components/schemas/KxClusterNameList'
          description: The list of clusters currently active in a given scaling group.
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The identifier of the availability zones.
        status:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupStatus'
          description: The status of scaling groups.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxClusterStatusReason'
          description: The error message when a failed state occurs.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the scaling group was updated in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the scaling group was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
      description: A structure for storing metadata of scaling group.
    KxScalingGroupConfiguration:
      type: object
      properties:
        scalingGroupName:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupName'
          description: A unique identifier for the kdb scaling group.
        memoryLimit:
          allOf:
          - $ref: '#/components/schemas/MemoryMib'
          description: An optional hard limit on the amount of memory a kdb cluster
            can use.
        memoryReservation:
          allOf:
          - $ref: '#/components/schemas/MemoryMib'
          description: A reservation of the minimum amount of memory that should be
            available on the scaling group for a kdb cluster to be successfully placed
            in a scaling group.
        nodeCount:
          allOf:
          - $ref: '#/components/schemas/ClusterNodeCount'
          description: The number of kdb cluster nodes.
        cpu:
          allOf:
          - $ref: '#/components/schemas/CpuCount'
          description: The number of vCPUs that you want to reserve for each node
            of this kdb cluster on the scaling group host.
      required:
      - scalingGroupName
      - memoryReservation
      - nodeCount
      description: The structure that stores the capacity configuration details of
        a scaling group.
    KxScalingGroupList:
      type: array
      items:
        $ref: '#/components/schemas/KxScalingGroup'
    KxScalingGroupName:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
      minLength: 3
      maxLength: 63
    KxScalingGroupStatus:
      type: string
      enum:
      - CREATING
      - CREATE_FAILED
      - ACTIVE
      - DELETING
      - DELETED
      - DELETE_FAILED
    KxUser:
      type: object
      properties:
        userArn:
          allOf:
          - $ref: '#/components/schemas/KxUserArn'
          description: The Amazon Resource Name (ARN) that identifies the user. For
            more information about ARNs and how to use ARNs in policies, see [IAM
            Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html)
            in the _IAM User Guide_.
        userName:
          allOf:
          - $ref: '#/components/schemas/KxUserNameString'
          description: A unique identifier for the user.
        iamRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM role ARN that is associated with the user.
        createTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb user was created.
        updateTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb user was updated.
      description: A structure that stores metadata for a kdb user.
    KxUserArn:
      type: string
      pattern: ^arn:aws:finspace:[A-Za-z0-9_/.-]{0,63}:\d+:kxEnvironment/[0-9A-Za-z_-]{1,128}/kxUser/[0-9A-Za-z_-]{1,128}$
      minLength: 20
      maxLength: 2048
    KxUserList:
      type: array
      items:
        $ref: '#/components/schemas/KxUser'
    KxUserNameString:
      type: string
      pattern: ^[0-9A-Za-z_-]{1,50}$
      minLength: 1
      maxLength: 50
    KxVolume:
      type: object
      properties:
        volumeName:
          allOf:
          - $ref: '#/components/schemas/KxVolumeName'
          description: A unique identifier for the volume.
        volumeType:
          allOf:
          - $ref: '#/components/schemas/KxVolumeType'
          description: The type of file system volume. Currently, FinSpace only supports
            `NAS_1` volume type.
        status:
          allOf:
          - $ref: '#/components/schemas/KxVolumeStatus'
          description: "The status of volume.\n\n  * CREATING – The volume creation\
            \ is in progress.\n\n  * CREATE_FAILED – The volume creation has failed.\n\
            \n  * ACTIVE – The volume is active.\n\n  * UPDATING – The volume is in\
            \ the process of being updated.\n\n  * UPDATE_FAILED – The update action\
            \ failed.\n\n  * UPDATED – The volume is successfully updated.\n\n  *\
            \ DELETING – The volume is in the process of being deleted.\n\n  * DELETE_FAILED\
            \ – The system failed to delete the volume.\n\n  * DELETED – The volume\
            \ is successfully deleted."
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the volume.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxVolumeStatusReason'
          description: The error message when a failed state occurs.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: The number of availability zones you want to assign per volume.
            Currently, FinSpace only supports `SINGLE` for volumes. This places dataview
            in a single AZ.
        availabilityZoneIds:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneIds'
          description: The identifier of the availability zones.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the volume was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the volume was updated in FinSpace. The
            value is determined as epoch time in milliseconds. For example, the value
            for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
      description: The structure that contains the metadata of the volume.
    KxVolumeArn:
      type: string
      pattern: ^arn:aws:finspace:[A-Za-z0-9_/.-]{0,63}:\d+:kxEnvironment/[0-9A-Za-z_-]{1,128}(/kxSharedVolume/[a-zA-Z0-9_-]{1,255})?$
      minLength: 20
      maxLength: 2048
    KxVolumeName:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
      minLength: 3
      maxLength: 63
    KxVolumeStatus:
      type: string
      enum:
      - CREATING
      - CREATE_FAILED
      - ACTIVE
      - UPDATING
      - UPDATED
      - UPDATE_FAILED
      - DELETING
      - DELETED
      - DELETE_FAILED
    KxVolumeStatusReason:
      type: string
      pattern: ^[a-zA-Z0-9\_\-\.\s]+$
      minLength: 1
      maxLength: 250
    KxVolumeType:
      type: string
      enum:
      - NAS_1
    KxVolumes:
      type: array
      items:
        $ref: '#/components/schemas/KxVolume'
    LimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: A service limit or quota is exceeded.
    ListEnvironmentsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token generated by FinSpace that specifies where to continue
            pagination if a previous request was truncated. To get the next set of
            pages, pass in the `nextToken`nextToken value from the response object
            of the previous page call.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ResultLimit'
          description: The maximum number of results to return in this request.
    ListEnvironmentsResponse:
      type: object
      properties:
        environments:
          allOf:
          - $ref: '#/components/schemas/EnvironmentList'
          description: A list of all of your FinSpace environments.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that you can use in a subsequent call to retrieve the
            next set of results.
    ListKxChangesetsRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in this request.
      required:
      - environmentId
      - databaseName
    ListKxChangesetsResponse:
      type: object
      properties:
        kxChangesets:
          allOf:
          - $ref: '#/components/schemas/KxChangesets'
          description: A list of changesets for a database.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListKxClusterNodesRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: A unique name for the cluster.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ResultLimit'
          description: The maximum number of results to return in this request.
      required:
      - environmentId
      - clusterName
    ListKxClusterNodesResponse:
      type: object
      properties:
        nodes:
          allOf:
          - $ref: '#/components/schemas/KxNodeSummaries'
          description: A list of nodes associated with the cluster.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListKxClustersRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment.
        clusterType:
          allOf:
          - $ref: '#/components/schemas/KxClusterType'
          description: "Specifies the type of KDB database that is being created.\
            \ The following types are available:\n\n  * HDB – A Historical Database.\
            \ The data is only accessible with read-only permissions from one of the\
            \ FinSpace managed kdb databases mounted to the cluster.\n\n  * RDB –\
            \ A Realtime Database. This type of database captures all the data from\
            \ a ticker plant and stores it in memory until the end of day, after which\
            \ it writes all of its data to a disk and reloads the HDB. This cluster\
            \ type requires local storage for temporary storage of data during the\
            \ savedown process. If you specify this field in your request, you must\
            \ provide the `savedownStorageConfiguration` parameter.\n\n  * GATEWAY\
            \ – A gateway cluster allows you to access data across processes in kdb\
            \ systems. It allows you to create your own routing logic using the initialization\
            \ scripts and custom code. This type of cluster does not require a writable\
            \ local storage.\n\n  * GP – A general purpose cluster allows you to quickly\
            \ iterate on code during development by granting greater access to system\
            \ commands and enabling a fast reload of custom code. This cluster type\
            \ can optionally mount databases including cache and savedown storage.\
            \ For this cluster type, the node count is fixed at 1. It does not support\
            \ autoscaling and supports only `SINGLE` AZ mode.\n\n  * Tickerplant –\
            \ A tickerplant cluster allows you to subscribe to feed handlers based\
            \ on IAM permissions. It can publish to RDBs, other Tickerplants, and\
            \ real-time subscribers (RTS). Tickerplants can persist messages to log,\
            \ which is readable by any RDB environment. It supports only single-node\
            \ that is only one kdb process."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in this request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
      required:
      - environmentId
    ListKxClustersResponse:
      type: object
      properties:
        kxClusterSummaries:
          allOf:
          - $ref: '#/components/schemas/KxClusters'
          description: Lists the cluster details.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListKxDatabasesRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in this request.
      required:
      - environmentId
    ListKxDatabasesResponse:
      type: object
      properties:
        kxDatabases:
          allOf:
          - $ref: '#/components/schemas/KxDatabases'
          description: A list of databases in the kdb environment.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListKxDataviewsRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment, for which you
            want to retrieve a list of dataviews.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the database where the dataviews were created.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in this request.
      required:
      - environmentId
      - databaseName
    ListKxDataviewsResponse:
      type: object
      properties:
        kxDataviews:
          allOf:
          - $ref: '#/components/schemas/KxDataviews'
          description: The list of kdb dataviews that are currently active for the
            given database.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListKxEnvironmentsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/BoxedInteger'
          description: The maximum number of results to return in this request.
    ListKxEnvironmentsResponse:
      type: object
      properties:
        environments:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentList'
          description: A list of environments in an account.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListKxScalingGroupsRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment, for which you
            want to retrieve a list of scaling groups.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in this request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
      required:
      - environmentId
    ListKxScalingGroupsResponse:
      type: object
      properties:
        scalingGroups:
          allOf:
          - $ref: '#/components/schemas/KxScalingGroupList'
          description: A list of scaling groups available in a kdb environment.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListKxUsersRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ResultLimit'
          description: The maximum number of results to return in this request.
      required:
      - environmentId
    ListKxUsersResponse:
      type: object
      properties:
        users:
          allOf:
          - $ref: '#/components/schemas/KxUserList'
          description: A list of users in a kdb environment.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListKxVolumesRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment, whose clusters
            can attach to the volume.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return in this request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        volumeType:
          allOf:
          - $ref: '#/components/schemas/KxVolumeType'
          description: The type of file system volume. Currently, FinSpace only supports
            `NAS_1` volume type.
      required:
      - environmentId
    ListKxVolumesResponse:
      type: object
      properties:
        kxVolumeSummaries:
          allOf:
          - $ref: '#/components/schemas/KxVolumes'
          description: A summary of volumes.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/FinSpaceTaggableArn'
          description: The Amazon Resource Name of the resource.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of all tags for a resource.
    MaxResults:
      type: integer
      default: 0
      minimum: 0
      maximum: 100
    MemoryMib:
      type: integer
      minimum: 6
    NameString:
      type: string
      pattern: ^[a-zA-Z0-9]{1,50}$
      minLength: 1
      maxLength: 50
    NetworkACLConfiguration:
      type: array
      items:
        $ref: '#/components/schemas/NetworkACLEntry'
    NetworkACLEntry:
      type: object
      properties:
        ruleNumber:
          allOf:
          - $ref: '#/components/schemas/RuleNumber'
          description: The rule number for the entry. For example _100_. All the network
            ACL entries are processed in ascending order by rule number.
        protocol:
          allOf:
          - $ref: '#/components/schemas/Protocol'
          description: The protocol number. A value of _-1_ means all the protocols.
        ruleAction:
          allOf:
          - $ref: '#/components/schemas/RuleAction'
          description: Indicates whether to allow or deny the traffic that matches
            the rule.
        portRange:
          allOf:
          - $ref: '#/components/schemas/PortRange'
          description: The range of ports the rule applies to.
        icmpTypeCode:
          allOf:
          - $ref: '#/components/schemas/IcmpTypeCode'
          description: Defines the ICMP protocol that consists of the ICMP type and
            code.
        cidrBlock:
          allOf:
          - $ref: '#/components/schemas/ValidCIDRBlock'
          description: The IPv4 network range to allow or deny, in CIDR notation.
            For example, `172.16.0.0/24`. We modify the specified CIDR block to its
            canonical form. For example, if you specify `100.68.0.18/18`, we modify
            it to `100.68.0.0/18`.
      required:
      - ruleNumber
      - protocol
      - ruleAction
      - cidrBlock
      description: The network access control list (ACL) is an optional layer of security
        for your VPC that acts as a firewall for controlling traffic in and out of
        one or more subnets. The entry is a set of numbered ingress and egress rules
        that determine whether a packet should be allowed in or out of a subnet associated
        with the ACL. We process the entries in the ACL according to the rule numbers,
        in ascending order.
    NodeCount:
      type: integer
      minimum: 1
    NodeType:
      type: string
      pattern: ^[a-zA-Z0-9._]+$
      minLength: 1
      maxLength: 32
    PaginationToken:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 1000
    Port:
      type: integer
      default: 0
      minimum: 0
      maximum: 65535
    PortRange:
      type: object
      properties:
        from:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The first port in the range.
        to:
          allOf:
          - $ref: '#/components/schemas/Port'
          description: The last port in the range.
      required:
      - from
      - to
      description: The range of ports the rule applies to.
    Protocol:
      type: string
      pattern: ^-1|[0-9]+$
      minLength: 1
      maxLength: 5
    ReleaseLabel:
      type: string
      pattern: ^[a-zA-Z0-9._-]+$
      minLength: 1
      maxLength: 16
    ResourceAlreadyExistsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: The specified resource group already exists.
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: One or more resources can't be found.
    ResultLimit:
      type: integer
      default: 0
      minimum: 0
      maximum: 100
    RoleArn:
      type: string
      pattern: ^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
      minLength: 20
      maxLength: 2048
    RuleAction:
      type: string
      enum:
      - allow
      - deny
    RuleNumber:
      type: integer
      minimum: 1
      maximum: 32766
    S3Bucket:
      type: string
      pattern: ^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$
      minLength: 3
      maxLength: 255
    S3Key:
      type: string
      pattern: ^[a-zA-Z0-9\/\!\-_\.\*'\(\)]+$
      minLength: 1
      maxLength: 1024
    S3ObjectVersion:
      type: string
      minLength: 1
      maxLength: 1000
    S3Path:
      type: string
      pattern: ^s3:\/\/[a-z0-9][a-z0-9-.]{1,61}[a-z0-9]\/([^\/]+\/)*[^\/]*$
      minLength: 9
      maxLength: 1093
    SamlMetadataDocument:
      type: string
      pattern: .*
      minLength: 1000
      maxLength: 10000000
    SecurityGroupIdList:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupIdString'
    SecurityGroupIdString:
      type: string
      pattern: ^sg-([a-z0-9]{8}$|[a-z0-9]{17}$)$
      minLength: 1
      maxLength: 1024
    SegmentConfigurationDbPathList:
      type: array
      items:
        $ref: '#/components/schemas/DbPath'
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: You have exceeded your service quota. To perform the requested
        action, remove some of the relevant resources, or use Service Quotas to request
        a service quota increase.
    SignedKxConnectionString:
      type: string
      pattern: ^(:|:tcps:\/\/)[a-zA-Z0-9-\.\_]+:\d+:[a-zA-Z0-9-\.\_]+:\S+$
      minLength: 1
      maxLength: 2048
    SmsDomainUrl:
      type: string
      pattern: ^[a-zA-Z-0-9-:\/.]*$
      minLength: 1
      maxLength: 1000
    SubnetIdList:
      type: array
      items:
        $ref: '#/components/schemas/SubnetIdString'
    SubnetIdString:
      type: string
      pattern: ^subnet-([a-z0-9]{8}$|[a-z0-9]{17}$)$
      minLength: 1
      maxLength: 1024
    SuperuserParameters:
      type: object
      properties:
        emailAddress:
          allOf:
          - $ref: '#/components/schemas/EmailId'
          description: The email address of the superuser.
        firstName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The first name of the superuser.
        lastName:
          allOf:
          - $ref: '#/components/schemas/NameString'
          description: The last name of the superuser.
      required:
      - emailAddress
      - firstName
      - lastName
      description: Configuration information for the superuser.
    TagKey:
      type: string
      pattern: ^(?!aws:)[a-zA-Z+-=._:/]+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/FinSpaceTaggableArn'
          description: The Amazon Resource Name (ARN) for the resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: One or more tags to be assigned to the resource.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      pattern: ^[a-zA-Z0-9+-=._:@ ]+$
      minLength: 1
      maxLength: 256
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: The request was denied due to request throttling.
    TickerplantLogConfiguration:
      type: object
      properties:
        tickerplantLogVolumes:
          allOf:
          - $ref: '#/components/schemas/TickerplantLogVolumes'
          description: The name of the volumes for tickerplant logs.
      description: A configuration to store the Tickerplant logs. It consists of a
        list of volumes that will be mounted to your cluster. For the cluster type
        `Tickerplant`, the location of the TP volume on the cluster will be available
        by using the global variable `.aws.tp_log_path`.
    TickerplantLogVolumes:
      type: array
      items:
        $ref: '#/components/schemas/VolumeName'
    Timestamp:
      type: string
      format: date-time
    TransitGatewayConfiguration:
      type: object
      properties:
        transitGatewayID:
          allOf:
          - $ref: '#/components/schemas/TransitGatewayID'
          description: The identifier of the transit gateway created by the customer
            to connect outbound traffics from kdb network to your internal network.
        routableCIDRSpace:
          allOf:
          - $ref: '#/components/schemas/ValidCIDRSpace'
          description: The routing CIDR on behalf of kdb environment. It could be
            any "/26 range in the 100.64.0.0 CIDR space. After providing, it will
            be added to the customer's transit gateway routing table so that the traffics
            could be routed to kdb network.
        attachmentNetworkAclConfiguration:
          allOf:
          - $ref: '#/components/schemas/NetworkACLConfiguration'
          description: The rules that define how you manage the outbound traffic from
            kdb network to your internal network.
      required:
      - transitGatewayID
      - routableCIDRSpace
      description: The structure of the transit gateway and network configuration
        that is used to connect the kdb environment to an internal network.
    TransitGatewayID:
      type: string
      minLength: 1
      maxLength: 32
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/FinSpaceTaggableArn'
          description: A FinSpace resource from which you want to remove a tag or
            tags. The value for this parameter is an Amazon Resource Name (ARN).
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The tag keys (names) of one or more tags to be removed.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateEnvironmentRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The identifier of the FinSpace environment.
        name:
          allOf:
          - $ref: '#/components/schemas/EnvironmentName'
          description: The name of the environment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the environment.
        federationMode:
          allOf:
          - $ref: '#/components/schemas/FederationMode'
          description: "Authentication mode for the environment.\n\n  * `FEDERATED`\
            \ \\- Users access FinSpace through Single Sign On (SSO) via your Identity\
            \ provider.\n\n  * `LOCAL` \\- Users access FinSpace via email and password\
            \ managed within the FinSpace environment."
        federationParameters:
          $ref: '#/components/schemas/FederationParameters'
      required:
      - environmentId
    UpdateEnvironmentResponse:
      type: object
      properties:
        environment:
          allOf:
          - $ref: '#/components/schemas/Environment'
          description: Returns the FinSpace environment object.
    UpdateKxClusterCodeConfigurationRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier of the kdb environment.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: The name of the cluster.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        code:
          $ref: '#/components/schemas/CodeConfiguration'
        initializationScript:
          allOf:
          - $ref: '#/components/schemas/InitializationScriptFilePath'
          description: 'Specifies a Q program that will be run at launch of a cluster.
            It is a relative path within _.zip_ file that contains the custom code,
            which will be loaded on the cluster. It must include the file name itself.
            For example, `somedir/init.q`.


            You cannot update this parameter for a `NO_RESTART` deployment.'
        commandLineArguments:
          allOf:
          - $ref: '#/components/schemas/KxCommandLineArguments'
          description: 'Specifies the key-value pairs to make them available inside
            the cluster.


            You cannot update this parameter for a `NO_RESTART` deployment.'
        deploymentConfiguration:
          allOf:
          - $ref: '#/components/schemas/KxClusterCodeDeploymentConfiguration'
          description: The configuration that allows you to choose how you want to
            update the code on a cluster.
      required:
      - environmentId
      - clusterName
      - code
    UpdateKxClusterCodeConfigurationResponse:
      type: object
      properties: {}
    UpdateKxClusterDatabasesRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: The unique identifier of a kdb environment.
        clusterName:
          allOf:
          - $ref: '#/components/schemas/KxClusterName'
          description: A unique name for the cluster that you want to modify.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        databases:
          allOf:
          - $ref: '#/components/schemas/KxDatabaseConfigurations'
          description: The structure of databases mounted on the cluster.
        deploymentConfiguration:
          allOf:
          - $ref: '#/components/schemas/KxDeploymentConfiguration'
          description: The configuration that allows you to choose how you want to
            update the databases on a cluster.
      required:
      - environmentId
      - clusterName
      - databases
    UpdateKxClusterDatabasesResponse:
      type: object
      properties: {}
    UpdateKxDatabaseRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the database.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - databaseName
      - clientToken
    UpdateKxDatabaseResponse:
      type: object
      properties:
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the kdb database.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the database.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the database was modified. The value is
            determined as epoch time in milliseconds. For example, the value for Monday,
            November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    UpdateKxDataviewRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment, where you want
            to update the dataview.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the database.
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: The name of the dataview that you want to update.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description for a dataview.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier for the changeset.
        segmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxDataviewSegmentConfigurationList'
          description: The configuration that contains the database path of the data
            that you want to place on each selected volume. Each segment must have
            a unique database path for each volume. If you do not explicitly specify
            any database path for a volume, they are accessible from the cluster through
            the default S3/object store segment.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - databaseName
      - dataviewName
      - clientToken
    UpdateKxDataviewResponse:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/EnvironmentId'
          description: A unique identifier for the kdb environment, where you want
            to update the dataview.
        databaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the database.
        dataviewName:
          allOf:
          - $ref: '#/components/schemas/KxDataviewName'
          description: The name of the database under which the dataview was created.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: The number of availability zones you want to assign per volume.
            Currently, FinSpace only supports `SINGLE` for volumes. This places dataview
            in a single AZ.
        availabilityZoneId:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneId'
          description: The identifier of the availability zones.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: A unique identifier for the changeset.
        segmentConfigurations:
          allOf:
          - $ref: '#/components/schemas/KxDataviewSegmentConfigurationList'
          description: The configuration that contains the database path of the data
            that you want to place on each selected volume. Each segment must have
            a unique database path for each volume. If you do not explicitly specify
            any database path for a volume, they are accessible from the cluster through
            the default S3/object store segment.
        activeVersions:
          allOf:
          - $ref: '#/components/schemas/KxDataviewActiveVersionList'
          description: The current active changeset versions of the database on the
            given dataview.
        status:
          allOf:
          - $ref: '#/components/schemas/KxDataviewStatus'
          description: "The status of dataview creation.\n\n  * `CREATING` – The dataview\
            \ creation is in progress.\n\n  * `UPDATING` – The dataview is in the\
            \ process of being updated.\n\n  * `ACTIVE` – The dataview is active."
        autoUpdate:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: The option to specify whether you want to apply all the future
            additions and corrections automatically to the dataview when new changesets
            are ingested. The default value is false.
        readWrite:
          allOf:
          - $ref: '#/components/schemas/booleanValue'
          description: Returns True if the dataview is created as writeable and False
            otherwise.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the dataview.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the dataview was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the dataview was updated in FinSpace. The
            value is determined as epoch time in milliseconds. For example, the value
            for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
    UpdateKxEnvironmentNetworkRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        transitGatewayConfiguration:
          allOf:
          - $ref: '#/components/schemas/TransitGatewayConfiguration'
          description: Specifies the transit gateway and network configuration to
            connect the kdb environment to an internal network.
        customDNSConfiguration:
          allOf:
          - $ref: '#/components/schemas/CustomDNSConfiguration'
          description: A list of DNS server name and server IP. This is used to set
            up Route-53 outbound resolvers.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
    UpdateKxEnvironmentNetworkResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentName'
          description: The name of the kdb environment.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The unique identifier of the AWS account that is used to create
            the kdb environment.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: The status of the kdb environment.
        tgwStatus:
          allOf:
          - $ref: '#/components/schemas/tgwStatus'
          description: The status of the network configuration.
        dnsStatus:
          allOf:
          - $ref: '#/components/schemas/dnsStatus'
          description: The status of DNS configuration.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/EnvironmentErrorMessage'
          description: Specifies the error message that appears if a flow fails.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the environment.
        environmentArn:
          allOf:
          - $ref: '#/components/schemas/EnvironmentArn'
          description: The ARN identifier of the environment.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          description: The KMS key ID to encrypt your data in the FinSpace environment.
        dedicatedServiceAccountId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the AWS environment infrastructure
            account.
        transitGatewayConfiguration:
          $ref: '#/components/schemas/TransitGatewayConfiguration'
        customDNSConfiguration:
          allOf:
          - $ref: '#/components/schemas/CustomDNSConfiguration'
          description: A list of DNS server name and server IP. This is used to set
            up Route-53 outbound resolvers.
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb environment was created in FinSpace.
        updateTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb environment was updated.
        availabilityZoneIds:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneIds'
          description: The identifier of the availability zones where subnets for
            the environment are created.
    UpdateKxEnvironmentRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        name:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentName'
          description: The name of the kdb environment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the kdb environment.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
    UpdateKxEnvironmentResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentName'
          description: The name of the kdb environment.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        awsAccountId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The unique identifier of the AWS account that is used to create
            the kdb environment.
        status:
          allOf:
          - $ref: '#/components/schemas/EnvironmentStatus'
          description: The status of the kdb environment.
        tgwStatus:
          allOf:
          - $ref: '#/components/schemas/tgwStatus'
          description: The status of the network configuration.
        dnsStatus:
          allOf:
          - $ref: '#/components/schemas/dnsStatus'
          description: The status of DNS configuration.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/EnvironmentErrorMessage'
          description: Specifies the error message that appears if a flow fails.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the environment.
        environmentArn:
          allOf:
          - $ref: '#/components/schemas/EnvironmentArn'
          description: The ARN identifier of the environment.
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          description: The KMS key ID to encrypt your data in the FinSpace environment.
        dedicatedServiceAccountId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the AWS environment infrastructure
            account.
        transitGatewayConfiguration:
          $ref: '#/components/schemas/TransitGatewayConfiguration'
        customDNSConfiguration:
          allOf:
          - $ref: '#/components/schemas/CustomDNSConfiguration'
          description: A list of DNS server name and server IP. This is used to set
            up Route-53 outbound resolvers.
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb environment was created in FinSpace.
        updateTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the kdb environment was updated.
        availabilityZoneIds:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneIds'
          description: The identifier of the availability zones where subnets for
            the environment are created.
    UpdateKxUserRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        userName:
          allOf:
          - $ref: '#/components/schemas/KxUserNameString'
          description: A unique identifier for the user.
        iamRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM role ARN that is associated with the user.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - environmentId
      - userName
      - iamRole
    UpdateKxUserResponse:
      type: object
      properties:
        userName:
          allOf:
          - $ref: '#/components/schemas/KxUserNameString'
          description: A unique identifier for the user.
        userArn:
          allOf:
          - $ref: '#/components/schemas/KxUserArn'
          description: The Amazon Resource Name (ARN) that identifies the user. For
            more information about ARNs and how to use ARNs in policies, see [IAM
            Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html)
            in the _IAM User Guide_.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: A unique identifier for the kdb environment.
        iamRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM role ARN that is associated with the user.
    UpdateKxVolumeRequest:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment where you created
            the storage volume.
        volumeName:
          allOf:
          - $ref: '#/components/schemas/KxVolumeName'
          description: A unique identifier for the volume.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the volume.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        nas1Configuration:
          allOf:
          - $ref: '#/components/schemas/KxNAS1Configuration'
          description: Specifies the configuration for the Network attached storage
            (NAS_1) file system volume.
      required:
      - environmentId
      - volumeName
    UpdateKxVolumeResponse:
      type: object
      properties:
        environmentId:
          allOf:
          - $ref: '#/components/schemas/KxEnvironmentId'
          description: A unique identifier for the kdb environment where you want
            to update the volume.
        volumeName:
          allOf:
          - $ref: '#/components/schemas/KxVolumeName'
          description: A unique identifier for the volume that you want to update.
        volumeType:
          allOf:
          - $ref: '#/components/schemas/KxVolumeType'
          description: The type of file system volume. Currently, FinSpace only supports
            `NAS_1` volume type.
        volumeArn:
          allOf:
          - $ref: '#/components/schemas/KxVolumeArn'
          description: The ARN identifier of the volume.
        nas1Configuration:
          allOf:
          - $ref: '#/components/schemas/KxNAS1Configuration'
          description: Specifies the configuration for the Network attached storage
            (NAS_1) file system volume.
        status:
          allOf:
          - $ref: '#/components/schemas/KxVolumeStatus'
          description: "The status of the volume.\n\n  * CREATING – The volume creation\
            \ is in progress.\n\n  * CREATE_FAILED – The volume creation has failed.\n\
            \n  * ACTIVE – The volume is active.\n\n  * UPDATING – The volume is in\
            \ the process of being updated.\n\n  * UPDATE_FAILED – The update action\
            \ failed.\n\n  * UPDATED – The volume is successfully updated.\n\n  *\
            \ DELETING – The volume is in the process of being deleted.\n\n  * DELETE_FAILED\
            \ – The system failed to delete the volume.\n\n  * DELETED – The volume\
            \ is successfully deleted."
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description for the volume.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/KxVolumeStatusReason'
          description: The error message when a failed state occurs.
        createdTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp at which the volume was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        azMode:
          allOf:
          - $ref: '#/components/schemas/KxAzMode'
          description: The number of availability zones you want to assign per volume.
            Currently, FinSpace only supports `SINGLE` for volumes. This places dataview
            in a single AZ.
        availabilityZoneIds:
          allOf:
          - $ref: '#/components/schemas/AvailabilityZoneIds'
          description: The identifier of the availability zones.
        lastModifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time that the volume was updated in FinSpace. The
            value is determined as epoch time in milliseconds. For example, the value
            for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        attachedClusters:
          allOf:
          - $ref: '#/components/schemas/KxAttachedClusters'
          description: Specifies the clusters that a volume is attached to.
    ValidCIDRBlock:
      type: string
      pattern: ^(?:\d{1,3}\.){3}\d{1,3}(?:\/(?:3[0-2]|[12]\d|\d))$
      minLength: 1
      maxLength: 18
    ValidCIDRSpace:
      type: string
    ValidHostname:
      type: string
      pattern: ^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$
      minLength: 3
      maxLength: 255
    ValidIPAddress:
      type: string
      pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: The input fails to satisfy the constraints specified by an AWS
        service.
    VersionId:
      type: string
      minLength: 1
      maxLength: 26
    Volume:
      type: object
      properties:
        volumeName:
          allOf:
          - $ref: '#/components/schemas/VolumeName'
          description: A unique identifier for the volume.
        volumeType:
          allOf:
          - $ref: '#/components/schemas/VolumeType'
          description: The type of file system volume. Currently, FinSpace only supports
            `NAS_1` volume type.
      description: The structure that consists of name and type of volume.
    VolumeName:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
      minLength: 3
      maxLength: 63
    VolumeType:
      type: string
      enum:
      - NAS_1
    Volumes:
      type: array
      items:
        $ref: '#/components/schemas/Volume'
    VpcConfiguration:
      type: object
      properties:
        vpcId:
          allOf:
          - $ref: '#/components/schemas/VpcIdString'
          description: The identifier of the VPC endpoint.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          description: The unique identifier of the VPC security group applied to
            the VPC endpoint ENI for the cluster.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          description: The identifier of the subnet that the Privatelink VPC endpoint
            uses to connect to the cluster.
        ipAddressType:
          allOf:
          - $ref: '#/components/schemas/IPAddressType'
          description: "The IP address type for cluster network configuration parameters.\
            \ The following type is available:\n\n  * IP_V4 – IP address version 4"
      description: Configuration details about the network where the Privatelink endpoint
        of the cluster resides.
    VpcIdString:
      type: string
      pattern: ^vpc-([a-z0-9]{8}$|[a-z0-9]{17}$)$
      minLength: 1
      maxLength: 1024
    arn:
      type: string
      pattern: ^arn:*:*:*:*:*$
      minLength: 20
      maxLength: 2048
    booleanValue:
      type: boolean
      default: false
    dnsStatus:
      type: string
      enum:
      - NONE
      - UPDATE_REQUESTED
      - UPDATING
      - FAILED_UPDATE
      - SUCCESSFULLY_UPDATED
    numBytes:
      type: integer
      format: int64
      default: 0
    numChangesets:
      type: integer
      default: 0
    numFiles:
      type: integer
      default: 0
    stringValueLength1to255:
      type: string
      minLength: 1
      maxLength: 255
    tgwStatus:
      type: string
      enum:
      - NONE
      - UPDATE_REQUESTED
      - UPDATING
      - FAILED_UPDATE
      - SUCCESSFULLY_UPDATED
    url:
      type: string
      pattern: ^https?://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]$
      minLength: 1
      maxLength: 1000
    urn:
      type: string
      pattern: ^[A-Za-z0-9._\-:\/#\+]+$
      minLength: 1
      maxLength: 255
