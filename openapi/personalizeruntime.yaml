openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: personalize_runtime
  x-aws-serviceName: personalizeruntime
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-05-22'
  title: Amazon Personalize Runtime
  description: ""
servers:
- description: The Amazon Personalize Runtime regional endpoint
  url: https://personalize-runtime.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /action-recommendations:
    post:
      operationId: GetActionRecommendations
      description: |-
        Returns a list of recommended actions in sorted in descending order by prediction score. Use the `GetActionRecommendations` API if you have a custom campaign that deploys a solution version trained with a PERSONALIZED_ACTIONS recipe.

        For more information about PERSONALIZED_ACTIONS recipes, see [PERSONALIZED_ACTIONS recipes](https://docs.aws.amazon.com/personalize/latest/dg/nexts-best-action-recipes.html). For more information about getting action recommendations, see [Getting action recommendations](https://docs.aws.amazon.com/personalize/latest/dg/get-action-recommendations.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                campaignArn:
                  $ref: '#/components/schemas/Arn'
                userId:
                  $ref: '#/components/schemas/UserID'
                numResults:
                  $ref: '#/components/schemas/NumResults'
                filterArn:
                  $ref: '#/components/schemas/Arn'
                filterValues:
                  $ref: '#/components/schemas/FilterValues'
      responses:
        '200': {}
        '400':
          description: |-
            Provide a valid value for the field or parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /personalize-ranking:
    post:
      operationId: GetPersonalizedRanking
      description: |-
        Re-ranks a list of recommended items for the given user. The first item in the list is deemed the most likely item to be of interest to the user.

        The solution backing the campaign must have been created using a recipe of type PERSONALIZED_RANKING.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                campaignArn:
                  $ref: '#/components/schemas/Arn'
                inputList:
                  $ref: '#/components/schemas/InputList'
                userId:
                  $ref: '#/components/schemas/UserID'
                context:
                  $ref: '#/components/schemas/Context'
                filterArn:
                  $ref: '#/components/schemas/Arn'
                filterValues:
                  $ref: '#/components/schemas/FilterValues'
                metadataColumns:
                  $ref: '#/components/schemas/MetadataColumns'
      responses:
        '200': {}
        '400':
          description: |-
            Provide a valid value for the field or parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /recommendations:
    post:
      operationId: GetRecommendations
      description: |-
        Returns a list of recommended items. For campaigns, the campaign's Amazon Resource Name (ARN) is required and the required user and item input depends on the recipe type used to create the solution backing the campaign as follows:

          * USER_PERSONALIZATION - `userId` required, `itemId` not used

          * RELATED_ITEMS - `itemId` required, `userId` not used

        Campaigns that are backed by a solution created using a recipe of type PERSONALIZED_RANKING use the API.

        For recommenders, the recommender's ARN is required and the required item and user input depends on the use case (domain-based recipe) backing the recommender. For information on use case requirements see [Choosing recommender use cases](https://docs.aws.amazon.com/personalize/latest/dg/domain-use-cases.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                campaignArn:
                  $ref: '#/components/schemas/Arn'
                itemId:
                  $ref: '#/components/schemas/ItemID'
                userId:
                  $ref: '#/components/schemas/UserID'
                numResults:
                  $ref: '#/components/schemas/NumResults'
                context:
                  $ref: '#/components/schemas/Context'
                filterArn:
                  $ref: '#/components/schemas/Arn'
                filterValues:
                  $ref: '#/components/schemas/FilterValues'
                recommenderArn:
                  $ref: '#/components/schemas/Arn'
                promotions:
                  $ref: '#/components/schemas/PromotionList'
                metadataColumns:
                  $ref: '#/components/schemas/MetadataColumns'
      responses:
        '200': {}
        '400':
          description: |-
            Provide a valid value for the field or parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
components:
  schemas:
    ActionID:
      type: string
      minLength: 0
      maxLength: 256
    ActionList:
      type: array
      items:
        $ref: '#/components/schemas/PredictedAction'
    Arn:
      type: string
      pattern: ^arn:([a-z\d-]+):personalize:.*:.*:.+$
      minLength: 0
      maxLength: 256
    AttributeName:
      type: string
      pattern: ^[A-Za-z\d_]+$
      minLength: 0
      maxLength: 150
    AttributeValue:
      type: string
      minLength: 0
      maxLength: 1000
    ColumnName:
      type: string
      minLength: 0
      maxLength: 150
    ColumnNamesList:
      type: array
      items:
        $ref: '#/components/schemas/ColumnName'
    ColumnValue:
      type: string
      minLength: 0
      maxLength: 20000
    Context:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
    DatasetType:
      type: string
      minLength: 0
      maxLength: 256
    ErrorMessage:
      type: string
    FilterAttributeName:
      type: string
      pattern: ^[A-Za-z0-9_]+$
      minLength: 0
      maxLength: 50
    FilterAttributeValue:
      type: string
      minLength: 0
      maxLength: 1000
    FilterValues:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FilterAttributeValue'
    GetActionRecommendationsRequest:
      type: object
      properties:
        campaignArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the campaign to use for getting
            action recommendations. This campaign must deploy a solution version trained
            with a PERSONALIZED_ACTIONS recipe.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserID'
          description: The user ID of the user to provide action recommendations for.
        numResults:
          allOf:
          - $ref: '#/components/schemas/NumResults'
          description: The number of results to return. The default is 5. The maximum
            is 100.
        filterArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: 'The ARN of the filter to apply to the returned recommendations.
            For more information, see [Filtering Recommendations](https://docs.aws.amazon.com/personalize/latest/dg/filter.html).


            When using this parameter, be sure the filter resource is `ACTIVE`.'
        filterValues:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: 'The values to use when filtering recommendations. For each
            placeholder parameter in your filter expression, provide the parameter
            name (in matching case) as a key and the filter value(s) as the corresponding
            value. Separate multiple values for one parameter with a comma.


            For filter expressions that use an `INCLUDE` element to include actions,
            you must provide values for all parameters that are defined in the expression.
            For filters with expressions that use an `EXCLUDE` element to exclude
            actions, you can omit the `filter-values`. In this case, Amazon Personalize
            doesn''t use that portion of the expression to filter recommendations.


            For more information, see [Filtering recommendations and user segments](https://docs.aws.amazon.com/personalize/latest/dg/filter.html).'
    GetActionRecommendationsResponse:
      type: object
      properties:
        actionList:
          allOf:
          - $ref: '#/components/schemas/ActionList'
          description: A list of action recommendations sorted in descending order
            by prediction score. There can be a maximum of 100 actions in the list.
            For information about action scores, see [How action recommendation scoring
            works](https://docs.aws.amazon.com/personalize/latest/dg/how-action-recommendation-scoring-works.html).
        recommendationId:
          allOf:
          - $ref: '#/components/schemas/RecommendationID'
          description: The ID of the recommendation.
    GetPersonalizedRankingRequest:
      type: object
      properties:
        campaignArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the campaign to use for generating
            the personalized ranking.
        inputList:
          allOf:
          - $ref: '#/components/schemas/InputList'
          description: A list of items (by `itemId`) to rank. If an item was not included
            in the training dataset, the item is appended to the end of the reranked
            list. If you are including metadata in recommendations, the maximum is
            50. Otherwise, the maximum is 500.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserID'
          description: The user for which you want the campaign to provide a personalized
            ranking.
        context:
          allOf:
          - $ref: '#/components/schemas/Context'
          description: The contextual metadata to use when getting recommendations.
            Contextual metadata includes any interaction information that might be
            relevant when getting a user's recommendations, such as the user's current
            location or device type.
        filterArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of a filter you created to include
            items or exclude items from recommendations for a given user. For more
            information, see [Filtering Recommendations](https://docs.aws.amazon.com/personalize/latest/dg/filter.html).
        filterValues:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: 'The values to use when filtering recommendations. For each
            placeholder parameter in your filter expression, provide the parameter
            name (in matching case) as a key and the filter value(s) as the corresponding
            value. Separate multiple values for one parameter with a comma.


            For filter expressions that use an `INCLUDE` element to include items,
            you must provide values for all parameters that are defined in the expression.
            For filters with expressions that use an `EXCLUDE` element to exclude
            items, you can omit the `filter-values`.In this case, Amazon Personalize
            doesn''t use that portion of the expression to filter recommendations.


            For more information, see [Filtering Recommendations](https://docs.aws.amazon.com/personalize/latest/dg/filter.html).'
        metadataColumns:
          allOf:
          - $ref: '#/components/schemas/MetadataColumns'
          description: 'If you enabled metadata in recommendations when you created
            or updated the campaign, specify metadata columns from your Items dataset
            to include in the personalized ranking. The map key is `ITEMS` and the
            value is a list of column names from your Items dataset. The maximum number
            of columns you can provide is 10.


            For information about enabling metadata for a campaign, see [Enabling
            metadata in recommendations for a campaign](https://docs.aws.amazon.com/personalize/latest/dg/campaigns.html#create-campaign-return-metadata).'
      required:
      - campaignArn
      - inputList
      - userId
    GetPersonalizedRankingResponse:
      type: object
      properties:
        personalizedRanking:
          allOf:
          - $ref: '#/components/schemas/ItemList'
          description: A list of items in order of most likely interest to the user.
            The maximum is 500.
        recommendationId:
          allOf:
          - $ref: '#/components/schemas/RecommendationID'
          description: The ID of the recommendation.
    GetRecommendationsRequest:
      type: object
      properties:
        campaignArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the campaign to use for getting
            recommendations.
        itemId:
          allOf:
          - $ref: '#/components/schemas/ItemID'
          description: 'The item ID to provide recommendations for.


            Required for `RELATED_ITEMS` recipe type.'
        userId:
          allOf:
          - $ref: '#/components/schemas/UserID'
          description: 'The user ID to provide recommendations for.


            Required for `USER_PERSONALIZATION` recipe type.'
        numResults:
          allOf:
          - $ref: '#/components/schemas/NumResults'
          description: The number of results to return. The default is 25. If you
            are including metadata in recommendations, the maximum is 50. Otherwise,
            the maximum is 500.
        context:
          allOf:
          - $ref: '#/components/schemas/Context'
          description: The contextual metadata to use when getting recommendations.
            Contextual metadata includes any interaction information that might be
            relevant when getting a user's recommendations, such as the user's current
            location or device type.
        filterArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: 'The ARN of the filter to apply to the returned recommendations.
            For more information, see [Filtering Recommendations](https://docs.aws.amazon.com/personalize/latest/dg/filter.html).


            When using this parameter, be sure the filter resource is `ACTIVE`.'
        filterValues:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: 'The values to use when filtering recommendations. For each
            placeholder parameter in your filter expression, provide the parameter
            name (in matching case) as a key and the filter value(s) as the corresponding
            value. Separate multiple values for one parameter with a comma.


            For filter expressions that use an `INCLUDE` element to include items,
            you must provide values for all parameters that are defined in the expression.
            For filters with expressions that use an `EXCLUDE` element to exclude
            items, you can omit the `filter-values`.In this case, Amazon Personalize
            doesn''t use that portion of the expression to filter recommendations.


            For more information, see [Filtering recommendations and user segments](https://docs.aws.amazon.com/personalize/latest/dg/filter.html).'
        recommenderArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the recommender to use to
            get recommendations. Provide a recommender ARN if you created a Domain
            dataset group with a recommender for a domain use case.
        promotions:
          allOf:
          - $ref: '#/components/schemas/PromotionList'
          description: The promotions to apply to the recommendation request. A promotion
            defines additional business rules that apply to a configurable subset
            of recommended items.
        metadataColumns:
          allOf:
          - $ref: '#/components/schemas/MetadataColumns'
          description: 'If you enabled metadata in recommendations when you created
            or updated the campaign or recommender, specify the metadata columns from
            your Items dataset to include in item recommendations. The map key is
            `ITEMS` and the value is a list of column names from your Items dataset.
            The maximum number of columns you can provide is 10.


            For information about enabling metadata for a campaign, see [Enabling
            metadata in recommendations for a campaign](https://docs.aws.amazon.com/personalize/latest/dg/campaigns.html#create-campaign-return-metadata).
            For information about enabling metadata for a recommender, see [Enabling
            metadata in recommendations for a recommender](https://docs.aws.amazon.com/personalize/latest/dg/creating-recommenders.html#create-recommender-return-metadata).'
    GetRecommendationsResponse:
      type: object
      properties:
        itemList:
          allOf:
          - $ref: '#/components/schemas/ItemList'
          description: A list of recommendations sorted in descending order by prediction
            score. There can be a maximum of 500 items in the list.
        recommendationId:
          allOf:
          - $ref: '#/components/schemas/RecommendationID'
          description: The ID of the recommendation.
    InputList:
      type: array
      items:
        $ref: '#/components/schemas/ItemID'
    InvalidInputException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: Provide a valid value for the field or parameter.
    ItemID:
      type: string
      minLength: 0
      maxLength: 256
    ItemList:
      type: array
      items:
        $ref: '#/components/schemas/PredictedItem'
    Metadata:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ColumnValue'
    MetadataColumns:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ColumnNamesList'
    Name:
      type: string
      pattern: ^[a-zA-Z0-9][a-zA-Z0-9\-_]*$
      minLength: 1
      maxLength: 63
    NumResults:
      type: integer
      default: 0
      minimum: 0
    PercentPromotedItems:
      type: integer
      minimum: 1
      maximum: 100
    PredictedAction:
      type: object
      properties:
        actionId:
          allOf:
          - $ref: '#/components/schemas/ActionID'
          description: The ID of the recommended action.
        score:
          allOf:
          - $ref: '#/components/schemas/Score'
          description: The score of the recommended action. For information about
            action scores, see [How action recommendation scoring works](https://docs.aws.amazon.com/personalize/latest/dg/how-action-recommendation-scoring-works.html).
      description: 'An object that identifies an action.


        The API returns a list of `PredictedAction`s.'
    PredictedItem:
      type: object
      properties:
        itemId:
          allOf:
          - $ref: '#/components/schemas/ItemID'
          description: The recommended item ID.
        score:
          allOf:
          - $ref: '#/components/schemas/Score'
          description: A numeric representation of the model's certainty that the
            item will be the next user selection. For more information on scoring
            logic, see how-scores-work.
        promotionName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the promotion that included the predicted item.
        metadata:
          allOf:
          - $ref: '#/components/schemas/Metadata'
          description: Metadata about the item from your Items dataset.
        reason:
          allOf:
          - $ref: '#/components/schemas/ReasonList'
          description: "If you use User-Personalization-v2, a list of reasons for\
            \ why the item was included in recommendations. Possible reasons include\
            \ the following:\n\n  * Promoted item - Indicates the item was included\
            \ as part of a promotion that you applied in your recommendation request.\n\
            \n  * Exploration - Indicates the item was included with exploration.\
            \ With exploration, recommendations include items with less interactions\
            \ data or relevance for the user. For more information about exploration,\
            \ see [Exploration](https://docs.aws.amazon.com/personalize/latest/dg/use-case-recipe-features.html#about-exploration).\n\
            \n  * Popular item - Indicates the item was included as a placeholder\
            \ popular item. If you use a filter, depending on how many recommendations\
            \ the filter removes, Amazon Personalize might add placeholder items to\
            \ meet the `numResults` for your recommendation request. These items are\
            \ popular items, based on interactions data, that satisfy your filter\
            \ criteria. They don't have a relevance score for the user."
      description: 'An object that identifies an item.


        The and APIs return a list of `PredictedItem`s.'
    Promotion:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the promotion.
        percentPromotedItems:
          allOf:
          - $ref: '#/components/schemas/PercentPromotedItems'
          description: The percentage of recommended items to apply the promotion
            to.
        filterArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the filter used by the promotion.
            This filter defines the criteria for promoted items. For more information,
            see [Promotion filters](https://docs.aws.amazon.com/personalize/latest/dg/promoting-items.html#promotion-filters).
        filterValues:
          allOf:
          - $ref: '#/components/schemas/FilterValues'
          description: 'The values to use when promoting items. For each placeholder
            parameter in your promotion''s filter expression, provide the parameter
            name (in matching case) as a key and the filter value(s) as the corresponding
            value. Separate multiple values for one parameter with a comma.


            For filter expressions that use an `INCLUDE` element to include items,
            you must provide values for all parameters that are defined in the expression.
            For filters with expressions that use an `EXCLUDE` element to exclude
            items, you can omit the `filter-values`. In this case, Amazon Personalize
            doesn''t use that portion of the expression to filter recommendations.


            For more information on creating filters, see [Filtering recommendations
            and user segments](https://docs.aws.amazon.com/personalize/latest/dg/filter.html).'
      description: Contains information on a promotion. A promotion defines additional
        business rules that apply to a configurable subset of recommended items.
    PromotionList:
      type: array
      items:
        $ref: '#/components/schemas/Promotion'
    Reason:
      type: string
      minLength: 0
      maxLength: 256
    ReasonList:
      type: array
      items:
        $ref: '#/components/schemas/Reason'
    RecommendationID:
      type: string
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The specified resource does not exist.
    Score:
      type: number
      format: double
    UserID:
      type: string
      minLength: 0
      maxLength: 256
