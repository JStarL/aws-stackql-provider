openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: lambda
  x-aws-serviceName: lambda
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2015-03-31'
  title: AWS Lambda
  description: "Lambda\n\n**Overview**\n\nLambda is a compute service that lets you\
    \ run code without provisioning or managing servers. Lambda runs your code on\
    \ a high-availability compute infrastructure and performs all of the administration\
    \ of the compute resources, including server and operating system maintenance,\
    \ capacity provisioning and automatic scaling, code monitoring and logging. With\
    \ Lambda, you can run code for virtually any type of application or backend service.\
    \ For more information about the Lambda service, see [What is Lambda](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html)\
    \ in the **Lambda Developer Guide**.\n\nThe _Lambda API Reference_ provides information\
    \ about each of the API methods, including details about the parameters in each\
    \ API request and response.\n\nYou can use Software Development Kits (SDKs), Integrated\
    \ Development Environment (IDE) Toolkits, and command line tools to access the\
    \ API. For installation instructions, see [Tools for Amazon Web Services](http://aws.amazon.com/tools/).\n\
    \nFor a list of Region-specific endpoints that Lambda supports, see [Lambda endpoints\
    \ and quotas ](https://docs.aws.amazon.com/general/latest/gr/lambda-service.html)\
    \ in the _Amazon Web Services General Reference._.\n\nWhen making the API calls,\
    \ you will need to authenticate your request by providing a signature. Lambda\
    \ supports signature version 4. For more information, see [Signature Version 4\
    \ signing process](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html)\
    \ in the _Amazon Web Services General Reference._.\n\n**CA certificates**\n\n\
    Because Amazon Web Services SDKs use the CA certificates from your computer, changes\
    \ to the certificates on the Amazon Web Services servers can cause connection\
    \ failures when you attempt to use an SDK. You can prevent these failures by keeping\
    \ your computer's CA certificates and operating system up-to-date. If you encounter\
    \ this issue in a corporate environment and do not manage your own computer, you\
    \ might need to ask an administrator to assist with the update process. The following\
    \ list shows minimum operating system and Java versions:\n\n  * Microsoft Windows\
    \ versions that have updates from January 2005 or later installed contain at least\
    \ one of the required CAs in their trust list. \n\n  * Mac OS X 10.4 with Java\
    \ for Mac OS X 10.4 Release 5 (February 2007), Mac OS X 10.5 (October 2007), and\
    \ later versions contain at least one of the required CAs in their trust list.\
    \ \n\n  * Red Hat Enterprise Linux 5 (March 2007), 6, and 7 and CentOS 5, 6, and\
    \ 7 all contain at least one of the required CAs in their default trusted CA list.\
    \ \n\n  * Java 1.4.2_12 (May 2006), 5 Update 2 (March 2005), and all later versions,\
    \ including Java 6 (December 2006), 7, and 8, contain at least one of the required\
    \ CAs in their default trusted CA list. \n\nWhen accessing the Lambda management\
    \ console or Lambda API endpoints, whether through browsers or programmatically,\
    \ you will need to ensure your client machines support any of the following CAs:\n\
    \n  * Amazon Root CA 1\n\n  * Starfield Services Root Certificate Authority -\
    \ G2\n\n  * Starfield Class 2 Certification Authority\n\nRoot certificates from\
    \ the first two authorities are available from [Amazon trust services](https://www.amazontrust.com/repository/),\
    \ but keeping your computer up-to-date is the more straightforward solution. To\
    \ learn more about ACM-provided certificates, see [Amazon Web Services Certificate\
    \ Manager FAQs.](http://aws.amazon.com/certificate-manager/faqs/#certificates)"
servers:
- description: The AWS Lambda regional endpoint
  url: https://lambda.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy:
    post:
      operationId: AddLayerVersionPermission
      description: |-
        Adds permissions to the resource-based policy of a version of an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html). Use this action to grant layer usage permission to other accounts. You can grant permission to a single account, all accounts in an organization, or all Amazon Web Services accounts.

        To revoke permission, call RemoveLayerVersionPermission with the statement ID that you specified when you added it.
      parameters:
      - name: LayerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerName'
      - name: VersionNumber
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerVersionNumber'
      - name: RevisionId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                StatementId:
                  $ref: '#/components/schemas/StatementId'
                Action:
                  $ref: '#/components/schemas/LayerPermissionAllowedAction'
                Principal:
                  $ref: '#/components/schemas/LayerPermissionAllowedPrincipal'
                OrganizationId:
                  $ref: '#/components/schemas/OrganizationId'
      responses:
        '201': {}
        '400':
          description: |-
            The permissions policy for the resource is too large. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLengthExceededException'
        '412':
          description: |-
            The RevisionId provided does not match the latest RevisionId for the Lambda function or alias.

              * **For AddPermission and RemovePermission API operations:** Call `GetPolicy` to retrieve the latest RevisionId for your resource.

              * **For all other API operations:** Call `GetFunction` or `GetAlias` to retrieve the latest RevisionId for your resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetLayerVersionPolicy
      description: |-
        Returns the permission policy for a version of an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html). For more information, see AddLayerVersionPermission.
      parameters:
      - name: LayerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerName'
      - name: VersionNumber
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerVersionNumber'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2015-03-31/functions/{FunctionName}/policy:
    post:
      operationId: AddPermission
      description: |-
        Grants a [principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying) permission to use a function. You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function. Note: Lambda does not support adding policies to version $LATEST.

        To grant permission to another account, specify the account ID as the `Principal`. To grant permission to an organization defined in Organizations, specify the organization ID as the `PrincipalOrgID`. For Amazon Web Services services, the principal is a domain-style identifier that the service defines, such as `s3.amazonaws.com` or `sns.amazonaws.com`. For Amazon Web Services services, you can also specify the ARN of the associated resource as the `SourceArn`. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function.

        This operation adds a statement to a resource-based permissions policy for the function. For more information about function policies, see [Using resource-based policies for Lambda](https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html).
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                StatementId:
                  $ref: '#/components/schemas/StatementId'
                Action:
                  $ref: '#/components/schemas/Action'
                Principal:
                  $ref: '#/components/schemas/Principal'
                SourceArn:
                  $ref: '#/components/schemas/Arn'
                SourceAccount:
                  $ref: '#/components/schemas/SourceOwner'
                EventSourceToken:
                  $ref: '#/components/schemas/EventSourceToken'
                RevisionId:
                  $ref: '#/components/schemas/String'
                PrincipalOrgID:
                  $ref: '#/components/schemas/PrincipalOrgID'
                FunctionUrlAuthType:
                  $ref: '#/components/schemas/FunctionUrlAuthType'
      responses:
        '201': {}
        '400':
          description: |-
            The permissions policy for the resource is too large. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLengthExceededException'
        '412':
          description: |-
            The RevisionId provided does not match the latest RevisionId for the Lambda function or alias.

              * **For AddPermission and RemovePermission API operations:** Call `GetPolicy` to retrieve the latest RevisionId for your resource.

              * **For all other API operations:** Call `GetFunction` or `GetAlias` to retrieve the latest RevisionId for your resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetPolicy
      description: |-
        Returns the [resource-based IAM policy](https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html) for a function, version, or alias.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NamespacedFunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2015-03-31/functions/{FunctionName}/aliases:
    post:
      operationId: CreateAlias
      description: |-
        Creates an [alias](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) for a Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a different version.

        You can also map an alias to split invocation requests between two versions. Use the `RoutingConfig` parameter to specify a second version and the percentage of invocation requests that it receives.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/Alias'
                FunctionVersion:
                  $ref: '#/components/schemas/Version'
                Description:
                  $ref: '#/components/schemas/Description'
                RoutingConfig:
                  $ref: '#/components/schemas/AliasRoutingConfiguration'
      responses:
        '201': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListAliases
      description: |-
        Returns a list of [aliases](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) for a Lambda function.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: FunctionVersion
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Version'
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxListItems'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2020-04-22/code-signing-configs:
    post:
      operationId: CreateCodeSigningConfig
      description: |-
        Creates a code signing configuration. A [code signing configuration](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html) defines a list of allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment validation checks fail).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/Description'
                AllowedPublishers:
                  $ref: '#/components/schemas/AllowedPublishers'
                CodeSigningPolicies:
                  $ref: '#/components/schemas/CodeSigningPolicies'
                Tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '201': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
    get:
      operationId: ListCodeSigningConfigs
      description: |-
        Returns a list of [code signing configurations](https://docs.aws.amazon.com/lambda/latest/dg/configuring-codesigning.html). A request returns up to 10,000 configurations per call. You can use the `MaxItems` parameter to return fewer configurations per call.
      parameters:
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxListItems'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
  /2015-03-31/event-source-mappings:
    post:
      operationId: CreateEventSourceMapping
      description: |-
        Creates a mapping between an event source and an Lambda function. Lambda reads items from the event source and invokes the function.

        For details about how to configure different event sources, see the following topics.

          * [ Amazon DynamoDB Streams](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-dynamodb-eventsourcemapping)

          * [ Amazon Kinesis](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-eventsourcemapping)

          * [ Amazon SQS](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-eventsource)

          * [ Amazon MQ and RabbitMQ](https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-eventsourcemapping)

          * [ Amazon MSK](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html)

          * [ Apache Kafka](https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html)

          * [ Amazon DocumentDB](https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html)

        The following error handling options are available only for DynamoDB and Kinesis event sources:

          * `BisectBatchOnFunctionError` – If the function returns an error, split the batch in two and retry.

          * `MaximumRecordAgeInSeconds` – Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires

          * `MaximumRetryAttempts` – Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.

          * `ParallelizationFactor` – Process multiple batches from each shard concurrently.

        For stream sources (DynamoDB, Kinesis, Amazon MSK, and self-managed Apache Kafka), the following option is also available:

          * `DestinationConfig` – Send discarded records to an Amazon SQS queue, Amazon SNS topic, or Amazon S3 bucket.

        For information about which configuration parameters apply to each event source, see the following topics.

          * [ Amazon DynamoDB Streams](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-params)

          * [ Amazon Kinesis](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-params)

          * [ Amazon SQS](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#services-sqs-params)

          * [ Amazon MQ and RabbitMQ](https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-params)

          * [ Amazon MSK](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-parms)

          * [ Apache Kafka](https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html#services-kafka-parms)

          * [ Amazon DocumentDB](https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html#docdb-configuration)
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                EventSourceArn:
                  $ref: '#/components/schemas/Arn'
                FunctionName:
                  $ref: '#/components/schemas/FunctionName'
                Enabled:
                  $ref: '#/components/schemas/Enabled'
                BatchSize:
                  $ref: '#/components/schemas/BatchSize'
                FilterCriteria:
                  $ref: '#/components/schemas/FilterCriteria'
                MaximumBatchingWindowInSeconds:
                  $ref: '#/components/schemas/MaximumBatchingWindowInSeconds'
                ParallelizationFactor:
                  $ref: '#/components/schemas/ParallelizationFactor'
                StartingPosition:
                  $ref: '#/components/schemas/EventSourcePosition'
                StartingPositionTimestamp:
                  $ref: '#/components/schemas/Date'
                DestinationConfig:
                  $ref: '#/components/schemas/DestinationConfig'
                MaximumRecordAgeInSeconds:
                  $ref: '#/components/schemas/MaximumRecordAgeInSeconds'
                BisectBatchOnFunctionError:
                  $ref: '#/components/schemas/BisectBatchOnFunctionError'
                MaximumRetryAttempts:
                  $ref: '#/components/schemas/MaximumRetryAttemptsEventSourceMapping'
                Tags:
                  $ref: '#/components/schemas/Tags'
                TumblingWindowInSeconds:
                  $ref: '#/components/schemas/TumblingWindowInSeconds'
                Topics:
                  $ref: '#/components/schemas/Topics'
                Queues:
                  $ref: '#/components/schemas/Queues'
                SourceAccessConfigurations:
                  $ref: '#/components/schemas/SourceAccessConfigurations'
                SelfManagedEventSource:
                  $ref: '#/components/schemas/SelfManagedEventSource'
                FunctionResponseTypes:
                  $ref: '#/components/schemas/FunctionResponseTypeList'
                AmazonManagedKafkaEventSourceConfig:
                  $ref: '#/components/schemas/AmazonManagedKafkaEventSourceConfig'
                SelfManagedKafkaEventSourceConfig:
                  $ref: '#/components/schemas/SelfManagedKafkaEventSourceConfig'
                ScalingConfig:
                  $ref: '#/components/schemas/ScalingConfig'
                DocumentDBEventSourceConfig:
                  $ref: '#/components/schemas/DocumentDBEventSourceConfig'
                KMSKeyArn:
                  $ref: '#/components/schemas/KMSKeyArn'
                MetricsConfig:
                  $ref: '#/components/schemas/EventSourceMappingMetricsConfig'
                ProvisionedPollerConfig:
                  $ref: '#/components/schemas/ProvisionedPollerConfig'
      responses:
        '202': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListEventSourceMappings
      description: |-
        Lists event source mappings. Specify an `EventSourceArn` to show only event source mappings for a single event source.
      parameters:
      - name: EventSourceArn
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Arn'
      - name: FunctionName
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxListItems'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2015-03-31/functions:
    post:
      operationId: CreateFunction
      description: |-
        Creates a Lambda function. To create a function, you need a [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) and an [execution role](https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role). The deployment package is a .zip file archive or container image that contains your function code. The execution role grants the function permission to use Amazon Web Services services, such as Amazon CloudWatch Logs for log streaming and X-Ray for request tracing.

        If the deployment package is a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html), then you set the package type to `Image`. For a container image, the code property must include the URI of a container image in the Amazon ECR registry. You do not need to specify the handler and runtime properties.

        If the deployment package is a [.zip file archive](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip), then you set the package type to `Zip`. For a .zip file archive, the code property specifies the location of the .zip file. You must also specify the handler and runtime properties. The code in the deployment package must be compatible with the target instruction set architecture of the function (`x86-64` or `arm64`). If you do not specify the architecture, then the default value is `x86-64`.

        When you create a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or modify the function. The `State`, `StateReason`, and `StateReasonCode` fields in the response from GetFunctionConfiguration indicate when the function is ready to invoke. For more information, see [Lambda function states](https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html).

        A function has an unpublished version, and can have published versions and aliases. The unpublished version changes when you update your function's code and configuration. A published version is a snapshot of your function code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be changed to map to a different version. Use the `Publish` parameter to create version `1` of your function from its initial configuration.

        The other parameters let you configure version-specific and function-level settings. You can modify version-specific settings later with UpdateFunctionConfiguration. Function-level settings apply to both the unpublished and published versions of the function, and include tags (TagResource) and per-function concurrency limits (PutFunctionConcurrency).

        You can use code signing if your deployment package is a .zip file archive. To enable code signing for this function, specify the ARN of a code-signing configuration. When a user attempts to deploy a code package with UpdateFunctionCode, Lambda checks that the code package has a valid signature from a trusted publisher. The code-signing configuration includes set of signing profiles, which define the trusted publishers for this function.

        If another Amazon Web Services account or an Amazon Web Services service invokes your function, use AddPermission to grant permission by creating a resource-based Identity and Access Management (IAM) policy. You can grant permissions at the function level, on a version, or on an alias.

        To invoke your function directly, use Invoke. To invoke your function in response to events in other Amazon Web Services services, create an event source mapping (CreateEventSourceMapping), or configure a function trigger in the other service. For more information, see [Invoking Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                FunctionName:
                  $ref: '#/components/schemas/FunctionName'
                Runtime:
                  $ref: '#/components/schemas/Runtime'
                Role:
                  $ref: '#/components/schemas/RoleArn'
                Handler:
                  $ref: '#/components/schemas/Handler'
                Code:
                  $ref: '#/components/schemas/FunctionCode'
                Description:
                  $ref: '#/components/schemas/Description'
                Timeout:
                  $ref: '#/components/schemas/Timeout'
                MemorySize:
                  $ref: '#/components/schemas/MemorySize'
                Publish:
                  $ref: '#/components/schemas/Boolean'
                VpcConfig:
                  $ref: '#/components/schemas/VpcConfig'
                PackageType:
                  $ref: '#/components/schemas/PackageType'
                DeadLetterConfig:
                  $ref: '#/components/schemas/DeadLetterConfig'
                Environment:
                  $ref: '#/components/schemas/Environment'
                KMSKeyArn:
                  $ref: '#/components/schemas/KMSKeyArn'
                TracingConfig:
                  $ref: '#/components/schemas/TracingConfig'
                Tags:
                  $ref: '#/components/schemas/Tags'
                Layers:
                  $ref: '#/components/schemas/LayerList'
                FileSystemConfigs:
                  $ref: '#/components/schemas/FileSystemConfigList'
                ImageConfig:
                  $ref: '#/components/schemas/ImageConfig'
                CodeSigningConfigArn:
                  $ref: '#/components/schemas/CodeSigningConfigArn'
                Architectures:
                  $ref: '#/components/schemas/ArchitecturesList'
                EphemeralStorage:
                  $ref: '#/components/schemas/EphemeralStorage'
                SnapStart:
                  $ref: '#/components/schemas/SnapStart'
                LoggingConfig:
                  $ref: '#/components/schemas/LoggingConfig'
      responses:
        '201': {}
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: ListFunctions
      description: |-
        Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50 functions per call.

        Set `FunctionVersion` to `ALL` to include all published versions of each function in addition to the unpublished version.

        The `ListFunctions` operation returns a subset of the FunctionConfiguration fields. To get the additional fields (State, StateReasonCode, StateReason, LastUpdateStatus, LastUpdateStatusReason, LastUpdateStatusReasonCode, RuntimeVersionConfig) for a function or version, use GetFunction.
      parameters:
      - name: MasterRegion
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MasterRegion'
      - name: FunctionVersion
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/FunctionVersion'
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxListItems'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2021-10-31/functions/{FunctionName}/url:
    post:
      operationId: CreateFunctionUrlConfig
      description: |-
        Creates a Lambda function URL with the specified configuration parameters. A function URL is a dedicated HTTP(S) endpoint that you can use to invoke your function.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/FunctionUrlQualifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AuthType:
                  $ref: '#/components/schemas/FunctionUrlAuthType'
                Cors:
                  $ref: '#/components/schemas/Cors'
                InvokeMode:
                  $ref: '#/components/schemas/InvokeMode'
      responses:
        '201': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    delete:
      operationId: DeleteFunctionUrlConfig
      description: |-
        Deletes a Lambda function URL. When you delete a function URL, you can't recover it. Creating a new function URL results in a different URL address.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/FunctionUrlQualifier'
      responses:
        '204': {}
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetFunctionUrlConfig
      description: |-
        Returns details about a Lambda function URL.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/FunctionUrlQualifier'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateFunctionUrlConfig
      description: |-
        Updates the configuration for a Lambda function URL.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/FunctionUrlQualifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AuthType:
                  $ref: '#/components/schemas/FunctionUrlAuthType'
                Cors:
                  $ref: '#/components/schemas/Cors'
                InvokeMode:
                  $ref: '#/components/schemas/InvokeMode'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2015-03-31/functions/{FunctionName}/aliases/{Name}:
    delete:
      operationId: DeleteAlias
      description: |-
        Deletes a Lambda function [alias](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html).
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Alias'
      responses:
        '204': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetAlias
      description: |-
        Returns details about a Lambda function [alias](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html).
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Alias'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateAlias
      description: |-
        Updates the configuration of a Lambda function [alias](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html).
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Alias'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                FunctionVersion:
                  $ref: '#/components/schemas/Version'
                Description:
                  $ref: '#/components/schemas/Description'
                RoutingConfig:
                  $ref: '#/components/schemas/AliasRoutingConfiguration'
                RevisionId:
                  $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '412':
          description: |-
            The RevisionId provided does not match the latest RevisionId for the Lambda function or alias.

              * **For AddPermission and RemovePermission API operations:** Call `GetPolicy` to retrieve the latest RevisionId for your resource.

              * **For all other API operations:** Call `GetFunction` or `GetAlias` to retrieve the latest RevisionId for your resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2020-04-22/code-signing-configs/{CodeSigningConfigArn}:
    delete:
      operationId: DeleteCodeSigningConfig
      description: |-
        Deletes the code signing configuration. You can delete the code signing configuration only if no function is using it.
      parameters:
      - name: CodeSigningConfigArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CodeSigningConfigArn'
      responses:
        '204': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
    get:
      operationId: GetCodeSigningConfig
      description: |-
        Returns information about the specified code signing configuration.
      parameters:
      - name: CodeSigningConfigArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CodeSigningConfigArn'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
    put:
      operationId: UpdateCodeSigningConfig
      description: |-
        Update the code signing configuration. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function.
      parameters:
      - name: CodeSigningConfigArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CodeSigningConfigArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/Description'
                AllowedPublishers:
                  $ref: '#/components/schemas/AllowedPublishers'
                CodeSigningPolicies:
                  $ref: '#/components/schemas/CodeSigningPolicies'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
  /2015-03-31/event-source-mappings/{UUID}:
    delete:
      operationId: DeleteEventSourceMapping
      description: |-
        Deletes an [event source mapping](https://docs.aws.amazon.com/lambda/latest/dg/intro-invocation-modes.html). You can get the identifier of a mapping from the output of ListEventSourceMappings.

        When you delete an event source mapping, it enters a `Deleting` state and might not be completely deleted for several seconds.
      parameters:
      - name: UUID
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The operation conflicts with the resource's availability. For example, you tried to update an event source mapping in the CREATING state, or you tried to delete an event source mapping currently UPDATING.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetEventSourceMapping
      description: |-
        Returns details about an event source mapping. You can get the identifier of a mapping from the output of ListEventSourceMappings.
      parameters:
      - name: UUID
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateEventSourceMapping
      description: |-
        Updates an event source mapping. You can change the function that Lambda invokes, or pause invocation and resume later from the same location.

        For details about how to configure different event sources, see the following topics.

          * [ Amazon DynamoDB Streams](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-dynamodb-eventsourcemapping)

          * [ Amazon Kinesis](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-eventsourcemapping)

          * [ Amazon SQS](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-eventsource)

          * [ Amazon MQ and RabbitMQ](https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-eventsourcemapping)

          * [ Amazon MSK](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html)

          * [ Apache Kafka](https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html)

          * [ Amazon DocumentDB](https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html)

        The following error handling options are available only for DynamoDB and Kinesis event sources:

          * `BisectBatchOnFunctionError` – If the function returns an error, split the batch in two and retry.

          * `MaximumRecordAgeInSeconds` – Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires

          * `MaximumRetryAttempts` – Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.

          * `ParallelizationFactor` – Process multiple batches from each shard concurrently.

        For stream sources (DynamoDB, Kinesis, Amazon MSK, and self-managed Apache Kafka), the following option is also available:

          * `DestinationConfig` – Send discarded records to an Amazon SQS queue, Amazon SNS topic, or Amazon S3 bucket.

        For information about which configuration parameters apply to each event source, see the following topics.

          * [ Amazon DynamoDB Streams](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-params)

          * [ Amazon Kinesis](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-params)

          * [ Amazon SQS](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#services-sqs-params)

          * [ Amazon MQ and RabbitMQ](https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-params)

          * [ Amazon MSK](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-parms)

          * [ Apache Kafka](https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html#services-kafka-parms)

          * [ Amazon DocumentDB](https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html#docdb-configuration)
      parameters:
      - name: UUID
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                FunctionName:
                  $ref: '#/components/schemas/FunctionName'
                Enabled:
                  $ref: '#/components/schemas/Enabled'
                BatchSize:
                  $ref: '#/components/schemas/BatchSize'
                FilterCriteria:
                  $ref: '#/components/schemas/FilterCriteria'
                MaximumBatchingWindowInSeconds:
                  $ref: '#/components/schemas/MaximumBatchingWindowInSeconds'
                DestinationConfig:
                  $ref: '#/components/schemas/DestinationConfig'
                MaximumRecordAgeInSeconds:
                  $ref: '#/components/schemas/MaximumRecordAgeInSeconds'
                BisectBatchOnFunctionError:
                  $ref: '#/components/schemas/BisectBatchOnFunctionError'
                MaximumRetryAttempts:
                  $ref: '#/components/schemas/MaximumRetryAttemptsEventSourceMapping'
                ParallelizationFactor:
                  $ref: '#/components/schemas/ParallelizationFactor'
                SourceAccessConfigurations:
                  $ref: '#/components/schemas/SourceAccessConfigurations'
                TumblingWindowInSeconds:
                  $ref: '#/components/schemas/TumblingWindowInSeconds'
                FunctionResponseTypes:
                  $ref: '#/components/schemas/FunctionResponseTypeList'
                ScalingConfig:
                  $ref: '#/components/schemas/ScalingConfig'
                DocumentDBEventSourceConfig:
                  $ref: '#/components/schemas/DocumentDBEventSourceConfig'
                KMSKeyArn:
                  $ref: '#/components/schemas/KMSKeyArn'
                MetricsConfig:
                  $ref: '#/components/schemas/EventSourceMappingMetricsConfig'
                ProvisionedPollerConfig:
                  $ref: '#/components/schemas/ProvisionedPollerConfig'
      responses:
        '202': {}
        '400':
          description: |-
            The operation conflicts with the resource's availability. For example, you tried to update an event source mapping in the CREATING state, or you tried to delete an event source mapping currently UPDATING.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2015-03-31/functions/{FunctionName}:
    delete:
      operationId: DeleteFunction
      description: |-
        Deletes a Lambda function. To delete a specific function version, use the `Qualifier` parameter. Otherwise, all versions and aliases are deleted. This doesn't require the user to have explicit permissions for DeleteAlias.

        To delete Lambda event source mappings that invoke a function, use DeleteEventSourceMapping. For Amazon Web Services services and resources that invoke your function directly, delete the trigger in the service where you originally configured it.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      responses:
        '204': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetFunction
      description: |-
        Returns information about the function or function version, with a link to download the deployment package that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are returned.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NamespacedFunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2020-06-30/functions/{FunctionName}/code-signing-config:
    delete:
      operationId: DeleteFunctionCodeSigningConfig
      description: |-
        Removes the code signing configuration from the function.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetFunctionCodeSigningConfig
      description: |-
        Returns the code signing configuration for the specified function.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: PutFunctionCodeSigningConfig
      description: |-
        Update the code signing configuration for the function. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CodeSigningConfigArn:
                  $ref: '#/components/schemas/CodeSigningConfigArn'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2017-10-31/functions/{FunctionName}/concurrency:
    delete:
      operationId: DeleteFunctionConcurrency
      description: |-
        Removes a concurrent execution limit from a function.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      responses:
        '204': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: PutFunctionConcurrency
      description: |-
        Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency level.

        Concurrency settings apply to the function as a whole, including all published versions and the unpublished version. Reserving concurrency both ensures that your function has capacity to process the specified number of events simultaneously, and prevents it from scaling beyond that level. Use GetFunction to see the current setting for a function.

        Use GetAccountSettings to see your Regional concurrency limit. You can reserve concurrency for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for functions that aren't configured with a per-function limit. For more information, see [Lambda function scaling](https://docs.aws.amazon.com/lambda/latest/dg/invocation-scaling.html).
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ReservedConcurrentExecutions:
                  $ref: '#/components/schemas/ReservedConcurrentExecutions'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2019-09-25/functions/{FunctionName}/event-invoke-config:
    delete:
      operationId: DeleteFunctionEventInvokeConfig
      description: |-
        Deletes the configuration for asynchronous invocation for a function, version, or alias.

        To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      responses:
        '204': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetFunctionEventInvokeConfig
      description: |-
        Retrieves the configuration for asynchronous invocation for a function, version, or alias.

        To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: PutFunctionEventInvokeConfig
      description: |-
        Configures options for [asynchronous invocation](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html) on a function, version, or alias. If a configuration already exists for a function, version, or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without affecting existing settings for other options, use UpdateFunctionEventInvokeConfig.

        By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with UpdateFunctionConfiguration.

        To send an invocation record to a queue, topic, S3 bucket, function, or event bus, specify a [destination](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations). You can configure separate destinations for successful invocations (on-success) and events that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a dead-letter queue.

        S3 buckets are supported only for on-failure destinations. To retain records of successful invocations, use another destination type.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                MaximumRetryAttempts:
                  $ref: '#/components/schemas/MaximumRetryAttempts'
                MaximumEventAgeInSeconds:
                  $ref: '#/components/schemas/MaximumEventAgeInSeconds'
                DestinationConfig:
                  $ref: '#/components/schemas/DestinationConfig'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    post:
      operationId: UpdateFunctionEventInvokeConfig
      description: |-
        Updates the configuration for asynchronous invocation for a function, version, or alias.

        To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                MaximumRetryAttempts:
                  $ref: '#/components/schemas/MaximumRetryAttempts'
                MaximumEventAgeInSeconds:
                  $ref: '#/components/schemas/MaximumEventAgeInSeconds'
                DestinationConfig:
                  $ref: '#/components/schemas/DestinationConfig'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2018-10-31/layers/{LayerName}/versions/{VersionNumber}:
    delete:
      operationId: DeleteLayerVersion
      description: |-
        Deletes a version of an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html). Deleted versions can no longer be viewed or added to functions. To avoid breaking functions, a copy of the version remains in Lambda until no functions refer to it.
      parameters:
      - name: LayerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerName'
      - name: VersionNumber
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerVersionNumber'
      responses:
        '204': {}
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetLayerVersion
      description: |-
        Returns information about a version of an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html), with a link to download the layer archive that's valid for 10 minutes.
      parameters:
      - name: LayerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerName'
      - name: VersionNumber
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerVersionNumber'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2019-09-30/functions/{FunctionName}/provisioned-concurrency:
    delete:
      operationId: DeleteProvisionedConcurrencyConfig
      description: |-
        Deletes the provisioned concurrency configuration for a function.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Qualifier'
      responses:
        '204': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetProvisionedConcurrencyConfig
      description: |-
        Retrieves the provisioned concurrency configuration for a function's alias or version.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Qualifier'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: PutProvisionedConcurrencyConfig
      description: |-
        Adds a provisioned concurrency configuration to a function's alias or version.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Qualifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProvisionedConcurrentExecutions:
                  $ref: '#/components/schemas/PositiveInteger'
      responses:
        '202': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2016-08-19/account-settings:
    get:
      operationId: GetAccountSettings
      description: |-
        Retrieves details about your account's [limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html) and usage in an Amazon Web Services Region.
      parameters: []
      responses:
        '200': {}
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2019-09-30/functions/{FunctionName}/concurrency:
    get:
      operationId: GetFunctionConcurrency
      description: |-
        Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a function, use PutFunctionConcurrency.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2015-03-31/functions/{FunctionName}/configuration:
    get:
      operationId: GetFunctionConfiguration
      description: |-
        Returns the version-specific settings of a Lambda function or version. The output includes only options that can vary between versions of a function. To modify these settings, use UpdateFunctionConfiguration.

        To get all of a function's details, including function-level settings, use GetFunction.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NamespacedFunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: UpdateFunctionConfiguration
      description: |-
        Modify the version-specific settings of a Lambda function.

        When you update a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute. During this time, you can't modify the function, but you can still invoke it. The `LastUpdateStatus`, `LastUpdateStatusReason`, and `LastUpdateStatusReasonCode` fields in the response from GetFunctionConfiguration indicate when the update is complete and the function is processing events with the new configuration. For more information, see [Lambda function states](https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html).

        These settings can vary between versions of a function and are locked when you publish a version. You can't modify the configuration of a published version, only the unpublished version.

        To configure function concurrency, use PutFunctionConcurrency. To grant invoke permissions to an Amazon Web Services account or Amazon Web Services service, use AddPermission.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Role:
                  $ref: '#/components/schemas/RoleArn'
                Handler:
                  $ref: '#/components/schemas/Handler'
                Description:
                  $ref: '#/components/schemas/Description'
                Timeout:
                  $ref: '#/components/schemas/Timeout'
                MemorySize:
                  $ref: '#/components/schemas/MemorySize'
                VpcConfig:
                  $ref: '#/components/schemas/VpcConfig'
                Environment:
                  $ref: '#/components/schemas/Environment'
                Runtime:
                  $ref: '#/components/schemas/Runtime'
                DeadLetterConfig:
                  $ref: '#/components/schemas/DeadLetterConfig'
                KMSKeyArn:
                  $ref: '#/components/schemas/KMSKeyArn'
                TracingConfig:
                  $ref: '#/components/schemas/TracingConfig'
                RevisionId:
                  $ref: '#/components/schemas/String'
                Layers:
                  $ref: '#/components/schemas/LayerList'
                FileSystemConfigs:
                  $ref: '#/components/schemas/FileSystemConfigList'
                ImageConfig:
                  $ref: '#/components/schemas/ImageConfig'
                EphemeralStorage:
                  $ref: '#/components/schemas/EphemeralStorage'
                SnapStart:
                  $ref: '#/components/schemas/SnapStart'
                LoggingConfig:
                  $ref: '#/components/schemas/LoggingConfig'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '412':
          description: |-
            The RevisionId provided does not match the latest RevisionId for the Lambda function or alias.

              * **For AddPermission and RemovePermission API operations:** Call `GetPolicy` to retrieve the latest RevisionId for your resource.

              * **For all other API operations:** Call `GetFunction` or `GetAlias` to retrieve the latest RevisionId for your resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2024-08-31/functions/{FunctionName}/recursion-config:
    get:
      operationId: GetFunctionRecursionConfig
      description: |-
        Returns your function's [recursive loop detection](https://docs.aws.amazon.com/lambda/latest/dg/invocation-recursion.html) configuration.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UnqualifiedFunctionName'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: PutFunctionRecursionConfig
      description: |-
        Sets your function's [recursive loop detection](https://docs.aws.amazon.com/lambda/latest/dg/invocation-recursion.html) configuration.

        When you configure a Lambda function to output to the same service or resource that invokes the function, it's possible to create an infinite recursive loop. For example, a Lambda function might write a message to an Amazon Simple Queue Service (Amazon SQS) queue, which then invokes the same function. This invocation causes the function to write another message to the queue, which in turn invokes the function again.

        Lambda can detect certain types of recursive loops shortly after they occur. When Lambda detects a recursive loop and your function's recursive loop detection configuration is set to `Terminate`, it stops your function being invoked and notifies you.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UnqualifiedFunctionName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                RecursiveLoop:
                  $ref: '#/components/schemas/RecursiveLoop'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2018-10-31/layers?find=LayerVersion:
    get:
      operationId: GetLayerVersionByArn
      description: |-
        Returns information about a version of an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html), with a link to download the layer archive that's valid for 10 minutes.
      parameters:
      - name: Arn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/LayerVersionArn'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2021-07-20/functions/{FunctionName}/runtime-management-config:
    get:
      operationId: GetRuntimeManagementConfig
      description: |-
        Retrieves the runtime management configuration for a function's version. If the runtime update mode is **Manual** , this includes the ARN of the runtime version and the runtime update mode. If the runtime update mode is **Auto** or **Function update** , this includes the runtime update mode and `null` is returned for the ARN. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NamespacedFunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: PutRuntimeManagementConfig
      description: |-
        Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UpdateRuntimeOn:
                  $ref: '#/components/schemas/UpdateRuntimeOn'
                RuntimeVersionArn:
                  $ref: '#/components/schemas/RuntimeVersionArn'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2015-03-31/functions/{FunctionName}/invocations:
    post:
      operationId: Invoke
      description: |-
        Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or asynchronously. By default, Lambda invokes your function synchronously (i.e. the`InvocationType` is `RequestResponse`). To invoke a function asynchronously, set `InvocationType` to `Event`. Lambda passes the `ClientContext` object to your function for synchronous invocations only.

        For [synchronous invocation](https://docs.aws.amazon.com/lambda/latest/dg/invocation-sync.html), details about the function response, including errors, are included in the response body and headers. For either invocation type, you can find more information in the [execution log](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html) and [trace](https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html).

        When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type, client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an error, Lambda executes the function up to two more times. For more information, see [Error handling and automatic retries in Lambda](https://docs.aws.amazon.com/lambda/latest/dg/invocation-retries.html).

        For [asynchronous invocation](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html), Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple times, even if no error occurs. To retain events that were not processed, configure your function with a [dead-letter queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq).

        The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that prevent your function from executing, such as permissions errors, [quota](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html) errors, or issues with your function's code and configuration. For example, Lambda returns `TooManyRequestsException` if running the function would cause you to exceed a concurrency limit at either the account level (`ConcurrentInvocationLimitExceeded`) or function level (`ReservedFunctionConcurrentInvocationLimitExceeded`).

        For functions with a long timeout, your client might disconnect during synchronous invocation while it waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long connections with timeout or keep-alive settings.

        This operation requires permission for the [lambda:InvokeFunction](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awslambda.html) action. For details on how to set up permissions for cross-account invocations, see [Granting function access to other accounts](https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html#permissions-resource-xaccountinvoke).
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NamespacedFunctionName'
      - name: X-Amz-Invocation-Type
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/InvocationType'
      - name: X-Amz-Log-Type
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/LogType'
      - name: X-Amz-Client-Context
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Payload:
                  $ref: '#/components/schemas/Blob'
      responses:
        '200': {}
        '502':
          description: |-
            Lambda couldn't set up VPC access for the Lambda function because one or more configured subnets has no available IP addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubnetIPAddressLimitReachedException'
        '410':
          description: |-
            An error occurred when reading from or writing to a connected file system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EFSIOException'
        '408':
          description: |-
            Lambda couldn't restore the snapshot within the timeout limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapStartTimeoutException'
        '403':
          description: |-
            The Lambda function couldn't mount the configured file system due to a permission or configuration issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EFSMountFailureException'
        '400':
          description: |-
            The `afterRestore()` [runtime hook](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-runtime-hooks.html) encountered an error. For more information, check the Amazon CloudWatch logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapStartException'
        '413':
          description: |-
            The request payload exceeded the `Invoke` request body JSON input quota. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTooLargeException'
        '409':
          description: |-
            Lambda is initializing your function. You can invoke the function when the [function state](https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html) becomes `Active`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapStartNotReadyException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '415':
          description: |-
            The content type of the `Invoke` request body is not JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaTypeException'
  /2014-11-13/functions/{FunctionName}/invoke-async:
    post:
      operationId: InvokeAsync
      description: |-
        For asynchronous function invocation, use Invoke.

        Invokes a function asynchronously.

        If you do use the InvokeAsync action, note that it doesn't support the use of X-Ray active tracing. Trace ID is not propagated to the function, even if X-Ray active tracing is turned on.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NamespacedFunctionName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                InvokeArgs:
                  $ref: '#/components/schemas/BlobStream'
      responses:
        '202': {}
        '400':
          description: |-
            The request body could not be parsed as JSON, or a request header is invalid. For example, the 'x-amzn-RequestId' header is not a valid UUID string.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestContentException'
        '502':
          description: |-
            The runtime or runtime version specified is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRuntimeException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
  /2021-11-15/functions/{FunctionName}/response-streaming-invocations:
    post:
      operationId: InvokeWithResponseStream
      description: |-
        Configure your Lambda functions to stream response payloads back to clients. For more information, see [Configuring a Lambda function to stream responses](https://docs.aws.amazon.com/lambda/latest/dg/configuration-response-streaming.html).

        This operation requires permission for the [lambda:InvokeFunction](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awslambda.html) action. For details on how to set up permissions for cross-account invocations, see [Granting function access to other accounts](https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html#permissions-resource-xaccountinvoke).
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NamespacedFunctionName'
      - name: X-Amz-Invocation-Type
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ResponseStreamingInvocationType'
      - name: X-Amz-Log-Type
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/LogType'
      - name: X-Amz-Client-Context
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Payload:
                  $ref: '#/components/schemas/Blob'
      responses:
        '200': {}
        '502':
          description: |-
            Lambda couldn't set up VPC access for the Lambda function because one or more configured subnets has no available IP addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubnetIPAddressLimitReachedException'
        '410':
          description: |-
            An error occurred when reading from or writing to a connected file system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EFSIOException'
        '408':
          description: |-
            Lambda couldn't restore the snapshot within the timeout limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapStartTimeoutException'
        '403':
          description: |-
            The Lambda function couldn't mount the configured file system due to a permission or configuration issue.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EFSMountFailureException'
        '400':
          description: |-
            The `afterRestore()` [runtime hook](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-runtime-hooks.html) encountered an error. For more information, check the Amazon CloudWatch logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapStartException'
        '413':
          description: |-
            The request payload exceeded the `Invoke` request body JSON input quota. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTooLargeException'
        '409':
          description: |-
            Lambda is initializing your function. You can invoke the function when the [function state](https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html) becomes `Active`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapStartNotReadyException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '415':
          description: |-
            The content type of the `Invoke` request body is not JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaTypeException'
  /2019-09-25/functions/{FunctionName}/event-invoke-config/list:
    get:
      operationId: ListFunctionEventInvokeConfigs
      description: |-
        Retrieves a list of configurations for asynchronous invocation for a function.

        To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxFunctionEventInvokeConfigListItems'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2021-10-31/functions/{FunctionName}/urls:
    get:
      operationId: ListFunctionUrlConfigs
      description: |-
        Returns a list of Lambda function URLs for the specified function.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxItems'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions:
    get:
      operationId: ListFunctionsByCodeSigningConfig
      description: |-
        List the functions that use the specified code signing configuration. You can use this method prior to deleting a code signing configuration, to verify that no functions are using it.
      parameters:
      - name: CodeSigningConfigArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CodeSigningConfigArn'
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxListItems'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
  /2018-10-31/layers/{LayerName}/versions:
    get:
      operationId: ListLayerVersions
      description: |-
        Lists the versions of an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html). Versions that have been deleted aren't listed. Specify a [runtime identifier](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) to list only versions that indicate that they're compatible with that runtime. Specify a compatible architecture to include only layer versions that are compatible with that architecture.
      parameters:
      - name: CompatibleRuntime
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Runtime'
      - name: LayerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerName'
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxLayerListItems'
      - name: CompatibleArchitecture
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Architecture'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    post:
      operationId: PublishLayerVersion
      description: |-
        Creates an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) from a ZIP archive. Each time you call `PublishLayerVersion` with the same layer name, a new version is created.

        Add layers to your function with CreateFunction or UpdateFunctionConfiguration.
      parameters:
      - name: LayerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/Description'
                Content:
                  $ref: '#/components/schemas/LayerVersionContentInput'
                CompatibleRuntimes:
                  $ref: '#/components/schemas/CompatibleRuntimes'
                LicenseInfo:
                  $ref: '#/components/schemas/LicenseInfo'
                CompatibleArchitectures:
                  $ref: '#/components/schemas/CompatibleArchitectures'
      responses:
        '201': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2018-10-31/layers:
    get:
      operationId: ListLayers
      description: |-
        Lists [Lambda layers](https://docs.aws.amazon.com/lambda/latest/dg/invocation-layers.html) and shows information about the latest version of each. Specify a [runtime identifier](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) to list only layers that indicate that they're compatible with that runtime. Specify a compatible architecture to include only layers that are compatible with that [instruction set architecture](https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html).
      parameters:
      - name: CompatibleRuntime
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Runtime'
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxLayerListItems'
      - name: CompatibleArchitecture
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Architecture'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2019-09-30/functions/{FunctionName}/provisioned-concurrency?List=ALL:
    get:
      operationId: ListProvisionedConcurrencyConfigs
      description: |-
        Retrieves a list of provisioned concurrency configurations for a function.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxProvisionedConcurrencyConfigListItems'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2017-03-31/tags/{Resource}:
    get:
      operationId: ListTags
      description: |-
        Returns a function, event source mapping, or code signing configuration's [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html). You can also view function tags with GetFunction.
      parameters:
      - name: Resource
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaggableResource'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    post:
      operationId: TagResource
      description: |-
        Adds [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to a function, event source mapping, or code signing configuration.
      parameters:
      - name: Resource
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaggableResource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '204': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    delete:
      operationId: UntagResource
      description: |-
        Removes [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) from a function, event source mapping, or code signing configuration.
      parameters:
      - name: Resource
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaggableResource'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '204': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2015-03-31/functions/{FunctionName}/versions:
    get:
      operationId: ListVersionsByFunction
      description: |-
        Returns a list of [versions](https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html), with the version-specific configuration of each. Lambda returns up to 50 versions per call.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NamespacedFunctionName'
      - name: Marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: MaxItems
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxListItems'
      responses:
        '200': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    post:
      operationId: PublishVersion
      description: |-
        Creates a [version](https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html) from the current code and configuration of a function. Use versions to create a snapshot of your function code and configuration that doesn't change.

        Lambda doesn't publish a version if the function's configuration and code haven't changed since the last version. Use UpdateFunctionCode or UpdateFunctionConfiguration to update the function before publishing a version.

        Clients can invoke versions directly or with an alias. To create an alias, use CreateAlias.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CodeSha256:
                  $ref: '#/components/schemas/String'
                Description:
                  $ref: '#/components/schemas/Description'
                RevisionId:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '412':
          description: |-
            The RevisionId provided does not match the latest RevisionId for the Lambda function or alias.

              * **For AddPermission and RemovePermission API operations:** Call `GetPolicy` to retrieve the latest RevisionId for your resource.

              * **For all other API operations:** Call `GetFunction` or `GetAlias` to retrieve the latest RevisionId for your resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}:
    delete:
      operationId: RemoveLayerVersionPermission
      description: |-
        Removes a statement from the permissions policy for a version of an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html). For more information, see AddLayerVersionPermission.
      parameters:
      - name: LayerName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerName'
      - name: VersionNumber
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LayerVersionNumber'
      - name: StatementId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatementId'
      - name: RevisionId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '204': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '412':
          description: |-
            The RevisionId provided does not match the latest RevisionId for the Lambda function or alias.

              * **For AddPermission and RemovePermission API operations:** Call `GetPolicy` to retrieve the latest RevisionId for your resource.

              * **For all other API operations:** Call `GetFunction` or `GetAlias` to retrieve the latest RevisionId for your resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2015-03-31/functions/{FunctionName}/policy/{StatementId}:
    delete:
      operationId: RemovePermission
      description: |-
        Revokes function-use permission from an Amazon Web Services service or another Amazon Web Services account. You can get the ID of the statement from the output of GetPolicy.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      - name: StatementId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NamespacedStatementId'
      - name: Qualifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Qualifier'
      - name: RevisionId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '204': {}
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '412':
          description: |-
            The RevisionId provided does not match the latest RevisionId for the Lambda function or alias.

              * **For AddPermission and RemovePermission API operations:** Call `GetPolicy` to retrieve the latest RevisionId for your resource.

              * **For all other API operations:** Call `GetFunction` or `GetAlias` to retrieve the latest RevisionId for your resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /2015-03-31/functions/{FunctionName}/code:
    put:
      operationId: UpdateFunctionCode
      description: |-
        Updates a Lambda function's code. If code signing is enabled for the function, the code package must be signed by a trusted publisher. For more information, see [Configuring code signing for Lambda](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).

        If the function's package type is `Image`, then you must specify the code package in `ImageUri` as the URI of a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html) in the Amazon ECR registry.

        If the function's package type is `Zip`, then you must specify the deployment package as a [.zip file archive](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip). Enter the Amazon S3 bucket and key of the code .zip file location. You can also provide the function code inline using the `ZipFile` field.

        The code in the deployment package must be compatible with the target instruction set architecture of the function (`x86-64` or `arm64`).

        The function's code is locked when you publish a version. You can't modify the code of a published version, only the unpublished version.

        For a function defined as a container image, Lambda resolves the image tag to an image digest. In Amazon ECR, if you update the image tag to a new image, Lambda does not automatically update the function.
      parameters:
      - name: FunctionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FunctionName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ZipFile:
                  $ref: '#/components/schemas/Blob'
                S3Bucket:
                  $ref: '#/components/schemas/S3Bucket'
                S3Key:
                  $ref: '#/components/schemas/S3Key'
                S3ObjectVersion:
                  $ref: '#/components/schemas/S3ObjectVersion'
                ImageUri:
                  $ref: '#/components/schemas/String'
                Publish:
                  $ref: '#/components/schemas/Boolean'
                DryRun:
                  $ref: '#/components/schemas/Boolean'
                RevisionId:
                  $ref: '#/components/schemas/String'
                Architectures:
                  $ref: '#/components/schemas/ArchitecturesList'
                SourceKMSKeyArn:
                  $ref: '#/components/schemas/KMSKeyArn'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            One of the parameters in the request is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '412':
          description: |-
            The RevisionId provided does not match the latest RevisionId for the Lambda function or alias.

              * **For AddPermission and RemovePermission API operations:** Call `GetPolicy` to retrieve the latest RevisionId for your resource.

              * **For all other API operations:** Call `GetFunction` or `GetAlias` to retrieve the latest RevisionId for your resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
        '409':
          description: |-
            The resource already exists, or another operation is in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '500':
          description: |-
            The Lambda service encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '429':
          description: |-
            The request throughput limit was exceeded. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
components:
  schemas:
    AccountLimit:
      type: object
      properties:
        TotalCodeSize:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The amount of storage space that you can use for all deployment
            packages and layer archives.
        CodeSizeUnzipped:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The maximum size of a function's deployment package and layers
            when they're extracted.
        CodeSizeZipped:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The maximum size of a deployment package when it's uploaded
            directly to Lambda. Use Amazon S3 for larger files.
        ConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of simultaneous function executions.
        UnreservedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/UnreservedConcurrentExecutions'
          description: The maximum number of simultaneous function executions, minus
            the capacity that's reserved for individual functions with PutFunctionConcurrency.
      description: Limits that are related to concurrency and storage. All file and
        storage sizes are in bytes.
    AccountUsage:
      type: object
      properties:
        TotalCodeSize:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The amount of storage space, in bytes, that's being used by
            deployment packages and layer archives.
        FunctionCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of Lambda functions.
      description: The number of functions and amount of storage in use.
    Action:
      type: string
      pattern: ^(lambda:[*]|lambda:[a-zA-Z]+|[*])$
    AddLayerVersionPermissionRequest:
      type: object
      properties:
        LayerName:
          allOf:
          - $ref: '#/components/schemas/LayerName'
          description: The name or Amazon Resource Name (ARN) of the layer.
        VersionNumber:
          allOf:
          - $ref: '#/components/schemas/LayerVersionNumber'
          description: The version number.
        StatementId:
          allOf:
          - $ref: '#/components/schemas/StatementId'
          description: An identifier that distinguishes the policy from others on
            the same layer version.
        Action:
          allOf:
          - $ref: '#/components/schemas/LayerPermissionAllowedAction'
          description: The API action that grants access to the layer. For example,
            `lambda:GetLayerVersion`.
        Principal:
          allOf:
          - $ref: '#/components/schemas/LayerPermissionAllowedPrincipal'
          description: An account ID, or `*` to grant layer usage permission to all
            accounts in an organization, or all Amazon Web Services accounts (if `organizationId`
            is not specified). For the last case, make sure that you really do want
            all Amazon Web Services accounts to have usage permission to this layer.
        OrganizationId:
          allOf:
          - $ref: '#/components/schemas/OrganizationId'
          description: With the principal set to `*`, grant permission to all accounts
            in the specified organization.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Only update the policy if the revision ID matches the ID specified.
            Use this option to avoid modifying a policy that has changed since you
            last read it.
      required:
      - LayerName
      - VersionNumber
      - StatementId
      - Action
      - Principal
    AddLayerVersionPermissionResponse:
      type: object
      properties:
        Statement:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The permission statement.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique identifier for the current revision of the policy.
    AddPermissionRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function, version, or alias.\n\
            \n**Name formats**\n\n  * **Function name** – `my-function` (name-only),\
            \ `my-function:v1` (with alias).\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nYou can\
            \ append a version number or alias to any of the formats. The length constraint\
            \ applies only to the full ARN. If you specify only the function name,\
            \ it is limited to 64 characters in length."
        StatementId:
          allOf:
          - $ref: '#/components/schemas/StatementId'
          description: A statement identifier that differentiates the statement from
            others in the same policy.
        Action:
          allOf:
          - $ref: '#/components/schemas/Action'
          description: The action that the principal can use on the function. For
            example, `lambda:InvokeFunction` or `lambda:GetFunction`.
        Principal:
          allOf:
          - $ref: '#/components/schemas/Principal'
          description: The Amazon Web Services service, Amazon Web Services account,
            IAM user, or IAM role that invokes the function. If you specify a service,
            use `SourceArn` or `SourceAccount` to limit who can invoke the function
            through that service.
        SourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: 'For Amazon Web Services services, the ARN of the Amazon Web
            Services resource that invokes the function. For example, an Amazon S3
            bucket or Amazon SNS topic.


            Note that Lambda configures the comparison using the `StringLike` operator.'
        SourceAccount:
          allOf:
          - $ref: '#/components/schemas/SourceOwner'
          description: For Amazon Web Services service, the ID of the Amazon Web Services
            account that owns the resource. Use this together with `SourceArn` to
            ensure that the specified account owns the resource. It is possible for
            an Amazon S3 bucket to be deleted by its owner and recreated by another
            account.
        EventSourceToken:
          allOf:
          - $ref: '#/components/schemas/EventSourceToken'
          description: For Alexa Smart Home functions, a token that the invoker must
            supply.
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: Specify a version or alias to add permissions to a published
            version of the function.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Update the policy only if the revision ID matches the ID that's
            specified. Use this option to avoid modifying a policy that has changed
            since you last read it.
        PrincipalOrgID:
          allOf:
          - $ref: '#/components/schemas/PrincipalOrgID'
          description: The identifier for your organization in Organizations. Use
            this to grant permissions to all the Amazon Web Services accounts under
            this organization.
        FunctionUrlAuthType:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlAuthType'
          description: The type of authentication that your function URL uses. Set
            to `AWS_IAM` if you want to restrict access to authenticated users only.
            Set to `NONE` if you want to bypass IAM authentication to create a public
            endpoint. For more information, see [Security and auth model for Lambda
            function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
      required:
      - FunctionName
      - StatementId
      - Action
      - Principal
    AddPermissionResponse:
      type: object
      properties:
        Statement:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The permission statement that's added to the function policy.
    AdditionalVersion:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 1024
    AdditionalVersionWeights:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Weight'
    Alias:
      type: string
      pattern: ^(?!^[0-9]+$)([a-zA-Z0-9-_]+)$
      minLength: 1
      maxLength: 128
    AliasConfiguration:
      type: object
      properties:
        AliasArn:
          allOf:
          - $ref: '#/components/schemas/FunctionArn'
          description: The Amazon Resource Name (ARN) of the alias.
        Name:
          allOf:
          - $ref: '#/components/schemas/Alias'
          description: The name of the alias.
        FunctionVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The function version that the alias invokes.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the alias.
        RoutingConfig:
          allOf:
          - $ref: '#/components/schemas/AliasRoutingConfiguration'
          description: The [routing configuration](https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html)
            of the alias.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique identifier that changes when you update the alias.
      description: Provides configuration information about a Lambda function [alias](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html).
    AliasList:
      type: array
      items:
        $ref: '#/components/schemas/AliasConfiguration'
    AliasRoutingConfiguration:
      type: object
      properties:
        AdditionalVersionWeights:
          allOf:
          - $ref: '#/components/schemas/AdditionalVersionWeights'
          description: The second version, and the percentage of traffic that's routed
            to it.
      description: The [traffic-shifting](https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html)
        configuration of a Lambda function alias.
    AllowCredentials:
      type: boolean
    AllowMethodsList:
      type: array
      items:
        $ref: '#/components/schemas/Method'
    AllowOriginsList:
      type: array
      items:
        $ref: '#/components/schemas/Origin'
    AllowedPublishers:
      type: object
      properties:
        SigningProfileVersionArns:
          allOf:
          - $ref: '#/components/schemas/SigningProfileVersionArns'
          description: The Amazon Resource Name (ARN) for each of the signing profiles.
            A signing profile defines a trusted user who can sign a code package.
      required:
      - SigningProfileVersionArns
      description: List of signing profiles that can sign a code package.
    AmazonManagedKafkaEventSourceConfig:
      type: object
      properties:
        ConsumerGroupId:
          allOf:
          - $ref: '#/components/schemas/URI'
          description: The identifier for the Kafka consumer group to join. The consumer
            group ID must be unique among all your Kafka event sources. After creating
            a Kafka event source mapping with the consumer group ID specified, you
            cannot update this value. For more information, see [Customizable consumer
            group ID](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-consumer-group-id).
      description: Specific configuration settings for an Amazon Managed Streaming
        for Apache Kafka (Amazon MSK) event source.
    ApplicationLogLevel:
      type: string
      enum:
      - TRACE
      - DEBUG
      - INFO
      - WARN
      - ERROR
      - FATAL
    Architecture:
      type: string
      enum:
      - x86_64
      - arm64
    ArchitecturesList:
      type: array
      items:
        $ref: '#/components/schemas/Architecture'
    Arn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)$
    BatchSize:
      type: integer
      minimum: 1
      maximum: 10000
    BisectBatchOnFunctionError:
      type: boolean
    Blob:
      type: string
      format: byte
      x-sensitive: true
    BlobStream:
      type: string
      format: byte
    Boolean:
      type: boolean
      default: false
    CodeSigningConfig:
      type: object
      properties:
        CodeSigningConfigId:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigId'
          description: Unique identifer for the Code signing configuration.
        CodeSigningConfigArn:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigArn'
          description: The Amazon Resource Name (ARN) of the Code signing configuration.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Code signing configuration description.
        AllowedPublishers:
          allOf:
          - $ref: '#/components/schemas/AllowedPublishers'
          description: List of allowed publishers.
        CodeSigningPolicies:
          allOf:
          - $ref: '#/components/schemas/CodeSigningPolicies'
          description: The code signing policy controls the validation failure action
            for signature mismatch or expiry.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the Code signing configuration was last
            modified, in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sTZD).
      required:
      - CodeSigningConfigId
      - CodeSigningConfigArn
      - AllowedPublishers
      - CodeSigningPolicies
      - LastModified
      description: Details about a [Code signing configuration](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).
    CodeSigningConfigArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}$
      minLength: 0
      maxLength: 200
    CodeSigningConfigId:
      type: string
      pattern: ^csc-[a-zA-Z0-9-_\.]{17}$
    CodeSigningConfigList:
      type: array
      items:
        $ref: '#/components/schemas/CodeSigningConfig'
    CodeSigningConfigNotFoundException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The specified code signing configuration does not exist.
    CodeSigningPolicies:
      type: object
      properties:
        UntrustedArtifactOnDeployment:
          allOf:
          - $ref: '#/components/schemas/CodeSigningPolicy'
          description: 'Code signing configuration policy for deployment validation
            failure. If you set the policy to `Enforce`, Lambda blocks the deployment
            request if signature validation checks fail. If you set the policy to
            `Warn`, Lambda allows the deployment and creates a CloudWatch log.


            Default value: `Warn`'
      description: Code signing configuration [policies](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html#config-codesigning-policies)
        specify the validation failure action for signature mismatch or expiry.
    CodeSigningPolicy:
      type: string
      enum:
      - Warn
      - Enforce
    CodeStorageExceededException:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception type.
        message:
          $ref: '#/components/schemas/String'
      description: Your Amazon Web Services account has exceeded its maximum total
        code size. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html).
    CodeVerificationFailedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The code signature failed one or more of the validation checks
        for signature mismatch or expiry, and the code signing policy is set to ENFORCE.
        Lambda blocks the deployment.
    CollectionName:
      type: string
      pattern: ^(^(?!(system\x2e)))(^[_a-zA-Z0-9])([^$]*)$
      minLength: 1
      maxLength: 57
    CompatibleArchitectures:
      type: array
      items:
        $ref: '#/components/schemas/Architecture'
    CompatibleRuntimes:
      type: array
      items:
        $ref: '#/components/schemas/Runtime'
    Concurrency:
      type: object
      properties:
        ReservedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/ReservedConcurrentExecutions'
          description: The number of concurrent executions that are reserved for this
            function. For more information, see [Managing Lambda reserved concurrency](https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html).
    Cors:
      type: object
      properties:
        AllowCredentials:
          allOf:
          - $ref: '#/components/schemas/AllowCredentials'
          description: Whether to allow cookies or other credentials in requests to
            your function URL. The default is `false`.
        AllowHeaders:
          allOf:
          - $ref: '#/components/schemas/HeadersList'
          description: 'The HTTP headers that origins can include in requests to your
            function URL. For example: `Date`, `Keep-Alive`, `X-Custom-Header`.'
        AllowMethods:
          allOf:
          - $ref: '#/components/schemas/AllowMethodsList'
          description: 'The HTTP methods that are allowed when calling your function
            URL. For example: `GET`, `POST`, `DELETE`, or the wildcard character (`*`).'
        AllowOrigins:
          allOf:
          - $ref: '#/components/schemas/AllowOriginsList'
          description: 'The origins that can access your function URL. You can list
            any number of specific origins, separated by a comma. For example: `https://www.example.com`,
            `http://localhost:60905`.


            Alternatively, you can grant access to all origins using the wildcard
            character (`*`).'
        ExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/HeadersList'
          description: 'The HTTP headers in your function response that you want to
            expose to origins that call your function URL. For example: `Date`, `Keep-Alive`,
            `X-Custom-Header`.'
        MaxAge:
          allOf:
          - $ref: '#/components/schemas/MaxAge'
          description: The maximum amount of time, in seconds, that web browsers can
            cache results of a preflight request. By default, this is set to `0`,
            which means that the browser doesn't cache results.
      description: The [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
        settings for your Lambda function URL. Use CORS to grant access to your function
        URL from any origin. You can also use CORS to control access for specific
        HTTP headers and methods in requests to your function URL.
    CreateAliasRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Name:
          allOf:
          - $ref: '#/components/schemas/Alias'
          description: The name of the alias.
        FunctionVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The function version that the alias invokes.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the alias.
        RoutingConfig:
          allOf:
          - $ref: '#/components/schemas/AliasRoutingConfiguration'
          description: The [routing configuration](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html#configuring-alias-routing)
            of the alias.
      required:
      - FunctionName
      - Name
      - FunctionVersion
    CreateCodeSigningConfigRequest:
      type: object
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Descriptive name for this code signing configuration.
        AllowedPublishers:
          allOf:
          - $ref: '#/components/schemas/AllowedPublishers'
          description: Signing profiles for this code signing configuration.
        CodeSigningPolicies:
          allOf:
          - $ref: '#/components/schemas/CodeSigningPolicies'
          description: The code signing policies define the actions to take if the
            validation checks fail.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A list of tags to add to the code signing configuration.
      required:
      - AllowedPublishers
    CreateCodeSigningConfigResponse:
      type: object
      properties:
        CodeSigningConfig:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfig'
          description: The code signing configuration.
      required:
      - CodeSigningConfig
    CreateEventSourceMappingRequest:
      type: object
      properties:
        EventSourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: "The Amazon Resource Name (ARN) of the event source.\n\n  *\
            \ **Amazon Kinesis** – The ARN of the data stream or a stream consumer.\n\
            \n  * **Amazon DynamoDB Streams** – The ARN of the stream.\n\n  * **Amazon\
            \ Simple Queue Service** – The ARN of the queue.\n\n  * **Amazon Managed\
            \ Streaming for Apache Kafka** – The ARN of the cluster or the ARN of\
            \ the VPC connection (for [cross-account event source mappings](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#msk-multi-vpc)).\n\
            \n  * **Amazon MQ** – The ARN of the broker.\n\n  * **Amazon DocumentDB**\
            \ – The ARN of the DocumentDB change stream."
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `MyFunction`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\
            \n  * **Version or Alias ARN** – `arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD`.\n\
            \n  * **Partial ARN** – `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it's limited to 64 characters in length."
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Enabled'
          description: 'When true, the event source mapping is active. When false,
            Lambda pauses polling and invocation.


            Default: True'
        BatchSize:
          allOf:
          - $ref: '#/components/schemas/BatchSize'
          description: "The maximum number of records in each batch that Lambda pulls\
            \ from your stream or queue and sends to your function. Lambda passes\
            \ all of the records in the batch to the function in a single call, up\
            \ to the payload limit for synchronous invocation (6 MB).\n\n  * **Amazon\
            \ Kinesis** – Default 100. Max 10,000.\n\n  * **Amazon DynamoDB Streams**\
            \ – Default 100. Max 10,000.\n\n  * **Amazon Simple Queue Service** –\
            \ Default 10. For standard queues the max is 10,000. For FIFO queues the\
            \ max is 10.\n\n  * **Amazon Managed Streaming for Apache Kafka** – Default\
            \ 100. Max 10,000.\n\n  * **Self-managed Apache Kafka** – Default 100.\
            \ Max 10,000.\n\n  * **Amazon MQ (ActiveMQ and RabbitMQ)** – Default 100.\
            \ Max 10,000.\n\n  * **DocumentDB** – Default 100. Max 10,000."
        FilterCriteria:
          allOf:
          - $ref: '#/components/schemas/FilterCriteria'
          description: An object that defines the filter criteria that determine whether
            Lambda should process an event. For more information, see [Lambda event
            filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html).
        MaximumBatchingWindowInSeconds:
          allOf:
          - $ref: '#/components/schemas/MaximumBatchingWindowInSeconds'
          description: 'The maximum amount of time, in seconds, that Lambda spends
            gathering records before invoking the function. You can configure `MaximumBatchingWindowInSeconds`
            to any value from 0 seconds to 300 seconds in increments of seconds.


            For Kinesis, DynamoDB, and Amazon SQS event sources, the default batching
            window is 0 seconds. For Amazon MSK, Self-managed Apache Kafka, Amazon
            MQ, and DocumentDB event sources, the default batching window is 500 ms.
            Note that because you can only change `MaximumBatchingWindowInSeconds`
            in increments of seconds, you cannot revert back to the 500 ms default
            batching window after you have changed it. To restore the default batching
            window, you must create a new event source mapping.


            Related setting: For Kinesis, DynamoDB, and Amazon SQS event sources,
            when you set `BatchSize` to a value greater than 10, you must set `MaximumBatchingWindowInSeconds`
            to at least 1.'
        ParallelizationFactor:
          allOf:
          - $ref: '#/components/schemas/ParallelizationFactor'
          description: (Kinesis and DynamoDB Streams only) The number of batches to
            process from each shard concurrently.
        StartingPosition:
          allOf:
          - $ref: '#/components/schemas/EventSourcePosition'
          description: The position in a stream from which to start reading. Required
            for Amazon Kinesis and Amazon DynamoDB Stream event sources. `AT_TIMESTAMP`
            is supported only for Amazon Kinesis streams, Amazon DocumentDB, Amazon
            MSK, and self-managed Apache Kafka.
        StartingPositionTimestamp:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: With `StartingPosition` set to `AT_TIMESTAMP`, the time from
            which to start reading. `StartingPositionTimestamp` cannot be in the future.
        DestinationConfig:
          allOf:
          - $ref: '#/components/schemas/DestinationConfig'
          description: (Kinesis, DynamoDB Streams, Amazon MSK, and self-managed Kafka
            only) A configuration object that specifies the destination of an event
            after Lambda processes it.
        MaximumRecordAgeInSeconds:
          allOf:
          - $ref: '#/components/schemas/MaximumRecordAgeInSeconds'
          description: (Kinesis and DynamoDB Streams only) Discard records older than
            the specified age. The default value is infinite (-1).
        BisectBatchOnFunctionError:
          allOf:
          - $ref: '#/components/schemas/BisectBatchOnFunctionError'
          description: (Kinesis and DynamoDB Streams only) If the function returns
            an error, split the batch in two and retry.
        MaximumRetryAttempts:
          allOf:
          - $ref: '#/components/schemas/MaximumRetryAttemptsEventSourceMapping'
          description: (Kinesis and DynamoDB Streams only) Discard records after the
            specified number of retries. The default value is infinite (-1). When
            set to infinite (-1), failed records are retried until the record expires.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A list of tags to apply to the event source mapping.
        TumblingWindowInSeconds:
          allOf:
          - $ref: '#/components/schemas/TumblingWindowInSeconds'
          description: (Kinesis and DynamoDB Streams only) The duration in seconds
            of a processing window for DynamoDB and Kinesis Streams event sources.
            A value of 0 seconds indicates no tumbling window.
        Topics:
          allOf:
          - $ref: '#/components/schemas/Topics'
          description: The name of the Kafka topic.
        Queues:
          allOf:
          - $ref: '#/components/schemas/Queues'
          description: (MQ) The name of the Amazon MQ broker destination queue to
            consume.
        SourceAccessConfigurations:
          allOf:
          - $ref: '#/components/schemas/SourceAccessConfigurations'
          description: An array of authentication protocols or VPC components required
            to secure your event source.
        SelfManagedEventSource:
          allOf:
          - $ref: '#/components/schemas/SelfManagedEventSource'
          description: The self-managed Apache Kafka cluster to receive records from.
        FunctionResponseTypes:
          allOf:
          - $ref: '#/components/schemas/FunctionResponseTypeList'
          description: (Kinesis, DynamoDB Streams, and Amazon SQS) A list of current
            response type enums applied to the event source mapping.
        AmazonManagedKafkaEventSourceConfig:
          allOf:
          - $ref: '#/components/schemas/AmazonManagedKafkaEventSourceConfig'
          description: Specific configuration settings for an Amazon Managed Streaming
            for Apache Kafka (Amazon MSK) event source.
        SelfManagedKafkaEventSourceConfig:
          allOf:
          - $ref: '#/components/schemas/SelfManagedKafkaEventSourceConfig'
          description: Specific configuration settings for a self-managed Apache Kafka
            event source.
        ScalingConfig:
          allOf:
          - $ref: '#/components/schemas/ScalingConfig'
          description: (Amazon SQS only) The scaling configuration for the event source.
            For more information, see [Configuring maximum concurrency for Amazon
            SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency).
        DocumentDBEventSourceConfig:
          allOf:
          - $ref: '#/components/schemas/DocumentDBEventSourceConfig'
          description: Specific configuration settings for a DocumentDB event source.
        KMSKeyArn:
          allOf:
          - $ref: '#/components/schemas/KMSKeyArn'
          description: The ARN of the Key Management Service (KMS) customer managed
            key that Lambda uses to encrypt your function's [filter criteria](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-basics).
            By default, Lambda does not encrypt your filter criteria object. Specify
            this property to encrypt data using your own customer managed key.
        MetricsConfig:
          allOf:
          - $ref: '#/components/schemas/EventSourceMappingMetricsConfig'
          description: The metrics configuration for your event source. For more information,
            see [Event source mapping metrics](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics).
        ProvisionedPollerConfig:
          allOf:
          - $ref: '#/components/schemas/ProvisionedPollerConfig'
          description: (Amazon MSK and self-managed Apache Kafka only) The provisioned
            mode configuration for the event source. For more information, see [provisioned
            mode](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html#invocation-eventsourcemapping-provisioned-mode).
      required:
      - FunctionName
    CreateFunctionRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Runtime:
          allOf:
          - $ref: '#/components/schemas/Runtime'
          description: 'The identifier of the function''s [ runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html).
            Runtime is required if the deployment package is a .zip file archive.
            Specifying a runtime results in an error if you''re deploying a function
            using a container image.


            The following list includes deprecated runtimes. Lambda blocks creating
            new functions and updating existing functions shortly after each runtime
            is deprecated. For more information, see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).


            For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).'
        Role:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the function's execution
            role.
        Handler:
          allOf:
          - $ref: '#/components/schemas/Handler'
          description: The name of the method within your code that Lambda calls to
            run your function. Handler is required if the deployment package is a
            .zip file archive. The format includes the file name. It can also include
            namespaces and other qualifiers, depending on the runtime. For more information,
            see [Lambda programming model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
        Code:
          allOf:
          - $ref: '#/components/schemas/FunctionCode'
          description: The code for the function.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the function.
        Timeout:
          allOf:
          - $ref: '#/components/schemas/Timeout'
          description: The amount of time (in seconds) that Lambda allows a function
            to run before stopping it. The default is 3 seconds. The maximum allowed
            value is 900 seconds. For more information, see [Lambda execution environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
        MemorySize:
          allOf:
          - $ref: '#/components/schemas/MemorySize'
          description: The amount of [memory available to the function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console)
            at runtime. Increasing the function memory also increases its CPU allocation.
            The default value is 128 MB. The value can be any multiple of 1 MB.
        Publish:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Set to true to publish the first version of the function during
            creation.
        VpcConfig:
          allOf:
          - $ref: '#/components/schemas/VpcConfig'
          description: For network connectivity to Amazon Web Services resources in
            a VPC, specify a list of security groups and subnets in the VPC. When
            you connect a function to a VPC, it can access resources and the internet
            only through that VPC. For more information, see [Configuring a Lambda
            function to access resources in a VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
        PackageType:
          allOf:
          - $ref: '#/components/schemas/PackageType'
          description: The type of deployment package. Set to `Image` for container
            image and set to `Zip` for .zip file archive.
        DeadLetterConfig:
          allOf:
          - $ref: '#/components/schemas/DeadLetterConfig'
          description: A dead-letter queue configuration that specifies the queue
            or topic where Lambda sends asynchronous events when they fail processing.
            For more information, see [Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq).
        Environment:
          allOf:
          - $ref: '#/components/schemas/Environment'
          description: Environment variables that are accessible from function code
            during execution.
        KMSKeyArn:
          allOf:
          - $ref: '#/components/schemas/KMSKeyArn'
          description: "The ARN of the Key Management Service (KMS) customer managed\
            \ key that's used to encrypt the following resources:\n\n  * The function's\
            \ [environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption).\n\
            \n  * The function's [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html)\
            \ snapshots.\n\n  * When used with `SourceKMSKeyArn`, the unzipped version\
            \ of the .zip deployment package that's used for function invocations.\
            \ For more information, see [ Specifying a customer managed key for Lambda](https://docs.aws.amazon.com/lambda/latest/dg/encrypt-zip-package.html#enable-zip-custom-encryption).\n\
            \n  * The optimized version of the container image that's used for function\
            \ invocations. Note that this is not the same key that's used to protect\
            \ your container image in the Amazon Elastic Container Registry (Amazon\
            \ ECR). For more information, see [Function lifecycle](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-lifecycle).\n\
            \nIf you don't provide a customer managed key, Lambda uses an [Amazon\
            \ Web Services owned key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk)\
            \ or an [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk)."
        TracingConfig:
          allOf:
          - $ref: '#/components/schemas/TracingConfig'
          description: Set `Mode` to `Active` to sample and trace a subset of incoming
            requests with [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html).
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A list of [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html)
            to apply to the function.
        Layers:
          allOf:
          - $ref: '#/components/schemas/LayerList'
          description: A list of [function layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
            to add to the function's execution environment. Specify each layer by
            its ARN, including the version.
        FileSystemConfigs:
          allOf:
          - $ref: '#/components/schemas/FileSystemConfigList'
          description: Connection settings for an Amazon EFS file system.
        ImageConfig:
          allOf:
          - $ref: '#/components/schemas/ImageConfig'
          description: Container image [configuration values](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms)
            that override the values in the container image Dockerfile.
        CodeSigningConfigArn:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigArn'
          description: To enable code signing for this function, specify the ARN of
            a code-signing configuration. A code-signing configuration includes a
            set of signing profiles, which define the trusted publishers for this
            function.
        Architectures:
          allOf:
          - $ref: '#/components/schemas/ArchitecturesList'
          description: The instruction set architecture that the function supports.
            Enter a string array with one of the valid values (arm64 or x86_64). The
            default value is `x86_64`.
        EphemeralStorage:
          allOf:
          - $ref: '#/components/schemas/EphemeralStorage'
          description: The size of the function's `/tmp` directory in MB. The default
            value is 512, but can be any whole number between 512 and 10,240 MB. For
            more information, see [Configuring ephemeral storage (console)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-ephemeral-storage).
        SnapStart:
          allOf:
          - $ref: '#/components/schemas/SnapStart'
          description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html)
            setting.
        LoggingConfig:
          allOf:
          - $ref: '#/components/schemas/LoggingConfig'
          description: The function's Amazon CloudWatch Logs configuration settings.
      required:
      - FunctionName
      - Role
      - Code
    CreateFunctionUrlConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlQualifier'
          description: The alias name.
        AuthType:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlAuthType'
          description: The type of authentication that your function URL uses. Set
            to `AWS_IAM` if you want to restrict access to authenticated users only.
            Set to `NONE` if you want to bypass IAM authentication to create a public
            endpoint. For more information, see [Security and auth model for Lambda
            function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
        Cors:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: The [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
            settings for your function URL.
        InvokeMode:
          allOf:
          - $ref: '#/components/schemas/InvokeMode'
          description: "Use one of the following options:\n\n  * `BUFFERED` – This\
            \ is the default option. Lambda invokes your function using the `Invoke`\
            \ API operation. Invocation results are available when the payload is\
            \ complete. The maximum payload size is 6 MB.\n\n  * `RESPONSE_STREAM`\
            \ – Your function streams payload results as they become available. Lambda\
            \ invokes your function using the `InvokeWithResponseStream` API operation.\
            \ The maximum response payload size is 20 MB, however, you can [request\
            \ a quota increase](https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html)."
      required:
      - FunctionName
      - AuthType
    CreateFunctionUrlConfigResponse:
      type: object
      properties:
        FunctionUrl:
          allOf:
          - $ref: '#/components/schemas/FunctionUrl'
          description: The HTTP URL endpoint for your function.
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/FunctionArn'
          description: The Amazon Resource Name (ARN) of your function.
        AuthType:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlAuthType'
          description: The type of authentication that your function URL uses. Set
            to `AWS_IAM` if you want to restrict access to authenticated users only.
            Set to `NONE` if you want to bypass IAM authentication to create a public
            endpoint. For more information, see [Security and auth model for Lambda
            function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
        Cors:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: The [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
            settings for your function URL.
        CreationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the function URL was created, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime)
            (YYYY-MM-DDThh:mm:ss.sTZD).
        InvokeMode:
          allOf:
          - $ref: '#/components/schemas/InvokeMode'
          description: "Use one of the following options:\n\n  * `BUFFERED` – This\
            \ is the default option. Lambda invokes your function using the `Invoke`\
            \ API operation. Invocation results are available when the payload is\
            \ complete. The maximum payload size is 6 MB.\n\n  * `RESPONSE_STREAM`\
            \ – Your function streams payload results as they become available. Lambda\
            \ invokes your function using the `InvokeWithResponseStream` API operation.\
            \ The maximum response payload size is 20 MB, however, you can [request\
            \ a quota increase](https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html)."
      required:
      - FunctionUrl
      - FunctionArn
      - AuthType
      - CreationTime
    DatabaseName:
      type: string
      pattern: ^[^ /\.$\x22]*$
      minLength: 1
      maxLength: 63
    Date:
      type: string
      format: date-time
    DeadLetterConfig:
      type: object
      properties:
        TargetArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon
            SNS topic.
      description: The [dead-letter queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq)
        for failed asynchronous invocations.
    DeleteAliasRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Name:
          allOf:
          - $ref: '#/components/schemas/Alias'
          description: The name of the alias.
      required:
      - FunctionName
      - Name
    DeleteCodeSigningConfigRequest:
      type: object
      properties:
        CodeSigningConfigArn:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigArn'
          description: The The Amazon Resource Name (ARN) of the code signing configuration.
      required:
      - CodeSigningConfigArn
    DeleteCodeSigningConfigResponse:
      type: object
      properties: {}
    DeleteEventSourceMappingRequest:
      type: object
      properties:
        UUID:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the event source mapping.
      required:
      - UUID
    DeleteFunctionCodeSigningConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
      required:
      - FunctionName
    DeleteFunctionConcurrencyRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
      required:
      - FunctionName
    DeleteFunctionEventInvokeConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function, version, or alias.\n\
            \n**Name formats**\n\n  * **Function name** \\- `my-function` (name-only),\
            \ `my-function:v1` (with alias).\n\n  * **Function ARN** \\- `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** \\- `123456789012:function:my-function`.\n\nYou\
            \ can append a version number or alias to any of the formats. The length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: A version number or alias name.
      required:
      - FunctionName
    DeleteFunctionRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function or version.\n\n**Name\
            \ formats**\n\n  * **Function name** – `my-function` (name-only), `my-function:1`\
            \ (with version).\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nYou can\
            \ append a version number or alias to any of the formats. The length constraint\
            \ applies only to the full ARN. If you specify only the function name,\
            \ it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: Specify a version to delete. You can't delete a version that
            an alias references.
      required:
      - FunctionName
    DeleteFunctionUrlConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlQualifier'
          description: The alias name.
      required:
      - FunctionName
    DeleteLayerVersionRequest:
      type: object
      properties:
        LayerName:
          allOf:
          - $ref: '#/components/schemas/LayerName'
          description: The name or Amazon Resource Name (ARN) of the layer.
        VersionNumber:
          allOf:
          - $ref: '#/components/schemas/LayerVersionNumber'
          description: The version number.
      required:
      - LayerName
      - VersionNumber
    DeleteProvisionedConcurrencyConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: The version number or alias name.
      required:
      - FunctionName
      - Qualifier
    Description:
      type: string
      minLength: 0
      maxLength: 256
    DestinationArn:
      type: string
      pattern: ^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)$
      minLength: 0
      maxLength: 350
    DestinationConfig:
      type: object
      properties:
        OnSuccess:
          allOf:
          - $ref: '#/components/schemas/OnSuccess'
          description: The destination configuration for successful invocations.
        OnFailure:
          allOf:
          - $ref: '#/components/schemas/OnFailure'
          description: The destination configuration for failed invocations.
      description: A configuration object that specifies the destination of an event
        after Lambda processes it.
    DocumentDBEventSourceConfig:
      type: object
      properties:
        DatabaseName:
          allOf:
          - $ref: '#/components/schemas/DatabaseName'
          description: The name of the database to consume within the DocumentDB cluster.
        CollectionName:
          allOf:
          - $ref: '#/components/schemas/CollectionName'
          description: The name of the collection to consume within the database.
            If you do not specify a collection, Lambda consumes all collections.
        FullDocument:
          allOf:
          - $ref: '#/components/schemas/FullDocument'
          description: Determines what DocumentDB sends to your event stream during
            document update operations. If set to UpdateLookup, DocumentDB sends a
            delta describing the changes, along with a copy of the entire document.
            Otherwise, DocumentDB sends only a partial document that contains the
            changes.
      description: Specific configuration settings for a DocumentDB event source.
    EC2AccessDeniedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Need additional permissions to configure VPC settings.
    EC2ThrottledException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Amazon EC2 throttled Lambda during Lambda function initialization
        using the execution role provided for the function.
    EC2UnexpectedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
        EC2ErrorCode:
          $ref: '#/components/schemas/String'
      description: Lambda received an unexpected Amazon EC2 client exception while
        setting up for the Lambda function.
    EFSIOException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: An error occurred when reading from or writing to a connected file
        system.
    EFSMountConnectivityException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The Lambda function couldn't make a network connection to the configured
        file system.
    EFSMountFailureException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The Lambda function couldn't mount the configured file system due
        to a permission or configuration issue.
    EFSMountTimeoutException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The Lambda function made a network connection to the configured
        file system, but the mount operation timed out.
    ENILimitReachedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Lambda couldn't create an elastic network interface in the VPC,
        specified as part of Lambda function configuration, because the limit for
        network interfaces has been reached. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html).
    Enabled:
      type: boolean
    EndPointType:
      type: string
      enum:
      - KAFKA_BOOTSTRAP_SERVERS
    Endpoint:
      type: string
      pattern: ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]):[0-9]{1,5}$
      minLength: 1
      maxLength: 300
    EndpointLists:
      type: array
      items:
        $ref: '#/components/schemas/Endpoint'
    Endpoints:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/EndpointLists'
    Environment:
      type: object
      properties:
        Variables:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariables'
          description: Environment variable key-value pairs. For more information,
            see [Using Lambda environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html).
      description: A function's environment variable settings. You can use environment
        variables to adjust your function's behavior without updating code. An environment
        variable is a pair of strings that are stored in a function's version-specific
        configuration.
    EnvironmentError:
      type: object
      properties:
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error code.
        Message:
          allOf:
          - $ref: '#/components/schemas/SensitiveString'
          description: The error message.
      description: Error messages for environment variables that couldn't be applied.
    EnvironmentResponse:
      type: object
      properties:
        Variables:
          allOf:
          - $ref: '#/components/schemas/EnvironmentVariables'
          description: Environment variable key-value pairs. Omitted from CloudTrail
            logs.
        Error:
          allOf:
          - $ref: '#/components/schemas/EnvironmentError'
          description: Error messages for environment variables that couldn't be applied.
      description: The results of an operation to update or read environment variables.
        If the operation succeeds, the response contains the environment variables.
        If it fails, the response contains details about the error.
    EnvironmentVariableName:
      type: string
      pattern: ^[a-zA-Z]([a-zA-Z0-9_])+$
    EnvironmentVariableValue:
      type: string
    EnvironmentVariables:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/EnvironmentVariableValue'
    EphemeralStorage:
      type: object
      properties:
        Size:
          allOf:
          - $ref: '#/components/schemas/EphemeralStorageSize'
          description: The size of the function's `/tmp` directory.
      required:
      - Size
      description: The size of the function's `/tmp` directory in MB. The default
        value is 512, but can be any whole number between 512 and 10,240 MB. For more
        information, see [Configuring ephemeral storage (console)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-ephemeral-storage).
    EphemeralStorageSize:
      type: integer
      minimum: 512
      maximum: 10240
    EventSourceMappingArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:\d{12}:event-source-mapping:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
      minLength: 85
      maxLength: 120
    EventSourceMappingConfiguration:
      type: object
      properties:
        UUID:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the event source mapping.
        StartingPosition:
          allOf:
          - $ref: '#/components/schemas/EventSourcePosition'
          description: The position in a stream from which to start reading. Required
            for Amazon Kinesis and Amazon DynamoDB Stream event sources. `AT_TIMESTAMP`
            is supported only for Amazon Kinesis streams, Amazon DocumentDB, Amazon
            MSK, and self-managed Apache Kafka.
        StartingPositionTimestamp:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: With `StartingPosition` set to `AT_TIMESTAMP`, the time from
            which to start reading. `StartingPositionTimestamp` cannot be in the future.
        BatchSize:
          allOf:
          - $ref: '#/components/schemas/BatchSize'
          description: 'The maximum number of records in each batch that Lambda pulls
            from your stream or queue and sends to your function. Lambda passes all
            of the records in the batch to the function in a single call, up to the
            payload limit for synchronous invocation (6 MB).


            Default value: Varies by service. For Amazon SQS, the default is 10. For
            all other services, the default is 100.


            Related setting: When you set `BatchSize` to a value greater than 10,
            you must set `MaximumBatchingWindowInSeconds` to at least 1.'
        MaximumBatchingWindowInSeconds:
          allOf:
          - $ref: '#/components/schemas/MaximumBatchingWindowInSeconds'
          description: 'The maximum amount of time, in seconds, that Lambda spends
            gathering records before invoking the function. You can configure `MaximumBatchingWindowInSeconds`
            to any value from 0 seconds to 300 seconds in increments of seconds.


            For streams and Amazon SQS event sources, the default batching window
            is 0 seconds. For Amazon MSK, Self-managed Apache Kafka, Amazon MQ, and
            DocumentDB event sources, the default batching window is 500 ms. Note
            that because you can only change `MaximumBatchingWindowInSeconds` in increments
            of seconds, you cannot revert back to the 500 ms default batching window
            after you have changed it. To restore the default batching window, you
            must create a new event source mapping.


            Related setting: For streams and Amazon SQS event sources, when you set
            `BatchSize` to a value greater than 10, you must set `MaximumBatchingWindowInSeconds`
            to at least 1.'
        ParallelizationFactor:
          allOf:
          - $ref: '#/components/schemas/ParallelizationFactor'
          description: (Kinesis and DynamoDB Streams only) The number of batches to
            process concurrently from each shard. The default value is 1.
        EventSourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the event source.
        FilterCriteria:
          allOf:
          - $ref: '#/components/schemas/FilterCriteria'
          description: 'An object that defines the filter criteria that determine
            whether Lambda should process an event. For more information, see [Lambda
            event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html).


            If filter criteria is encrypted, this field shows up as `null` in the
            response of ListEventSourceMapping API calls. You can view this field
            in plaintext in the response of GetEventSourceMapping and DeleteEventSourceMapping
            calls if you have `kms:Decrypt` permissions for the correct KMS key.'
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/FunctionArn'
          description: The ARN of the Lambda function.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date that the event source mapping was last updated or
            that its state changed.
        LastProcessingResult:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The result of the last Lambda invocation of your function.
        State:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The state of the event source mapping. It can be one of the
            following: `Creating`, `Enabling`, `Enabled`, `Disabling`, `Disabled`,
            `Updating`, or `Deleting`.'
        StateTransitionReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Indicates whether a user or Lambda made the last change to
            the event source mapping.
        DestinationConfig:
          allOf:
          - $ref: '#/components/schemas/DestinationConfig'
          description: (Kinesis, DynamoDB Streams, Amazon MSK, and self-managed Apache
            Kafka event sources only) A configuration object that specifies the destination
            of an event after Lambda processes it.
        Topics:
          allOf:
          - $ref: '#/components/schemas/Topics'
          description: The name of the Kafka topic.
        Queues:
          allOf:
          - $ref: '#/components/schemas/Queues'
          description: (Amazon MQ) The name of the Amazon MQ broker destination queue
            to consume.
        SourceAccessConfigurations:
          allOf:
          - $ref: '#/components/schemas/SourceAccessConfigurations'
          description: An array of the authentication protocol, VPC components, or
            virtual host to secure and define your event source.
        SelfManagedEventSource:
          allOf:
          - $ref: '#/components/schemas/SelfManagedEventSource'
          description: The self-managed Apache Kafka cluster for your event source.
        MaximumRecordAgeInSeconds:
          allOf:
          - $ref: '#/components/schemas/MaximumRecordAgeInSeconds'
          description: '(Kinesis and DynamoDB Streams only) Discard records older
            than the specified age. The default value is -1, which sets the maximum
            age to infinite. When the value is set to infinite, Lambda never discards
            old records.


            The minimum valid value for maximum record age is 60s. Although values
            less than 60 and greater than -1 fall within the parameter''s absolute
            range, they are not allowed'
        BisectBatchOnFunctionError:
          allOf:
          - $ref: '#/components/schemas/BisectBatchOnFunctionError'
          description: (Kinesis and DynamoDB Streams only) If the function returns
            an error, split the batch in two and retry. The default value is false.
        MaximumRetryAttempts:
          allOf:
          - $ref: '#/components/schemas/MaximumRetryAttemptsEventSourceMapping'
          description: (Kinesis and DynamoDB Streams only) Discard records after the
            specified number of retries. The default value is -1, which sets the maximum
            number of retries to infinite. When MaximumRetryAttempts is infinite,
            Lambda retries failed records until the record expires in the event source.
        TumblingWindowInSeconds:
          allOf:
          - $ref: '#/components/schemas/TumblingWindowInSeconds'
          description: (Kinesis and DynamoDB Streams only) The duration in seconds
            of a processing window for DynamoDB and Kinesis Streams event sources.
            A value of 0 seconds indicates no tumbling window.
        FunctionResponseTypes:
          allOf:
          - $ref: '#/components/schemas/FunctionResponseTypeList'
          description: (Kinesis, DynamoDB Streams, and Amazon SQS) A list of current
            response type enums applied to the event source mapping.
        AmazonManagedKafkaEventSourceConfig:
          allOf:
          - $ref: '#/components/schemas/AmazonManagedKafkaEventSourceConfig'
          description: Specific configuration settings for an Amazon Managed Streaming
            for Apache Kafka (Amazon MSK) event source.
        SelfManagedKafkaEventSourceConfig:
          allOf:
          - $ref: '#/components/schemas/SelfManagedKafkaEventSourceConfig'
          description: Specific configuration settings for a self-managed Apache Kafka
            event source.
        ScalingConfig:
          allOf:
          - $ref: '#/components/schemas/ScalingConfig'
          description: (Amazon SQS only) The scaling configuration for the event source.
            For more information, see [Configuring maximum concurrency for Amazon
            SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency).
        DocumentDBEventSourceConfig:
          allOf:
          - $ref: '#/components/schemas/DocumentDBEventSourceConfig'
          description: Specific configuration settings for a DocumentDB event source.
        KMSKeyArn:
          allOf:
          - $ref: '#/components/schemas/KMSKeyArn'
          description: The ARN of the Key Management Service (KMS) customer managed
            key that Lambda uses to encrypt your function's [filter criteria](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-basics).
        FilterCriteriaError:
          allOf:
          - $ref: '#/components/schemas/FilterCriteriaError'
          description: An object that contains details about an error related to filter
            criteria encryption.
        EventSourceMappingArn:
          allOf:
          - $ref: '#/components/schemas/EventSourceMappingArn'
          description: The Amazon Resource Name (ARN) of the event source mapping.
        MetricsConfig:
          allOf:
          - $ref: '#/components/schemas/EventSourceMappingMetricsConfig'
          description: The metrics configuration for your event source. For more information,
            see [Event source mapping metrics](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics).
        ProvisionedPollerConfig:
          allOf:
          - $ref: '#/components/schemas/ProvisionedPollerConfig'
          description: (Amazon MSK and self-managed Apache Kafka only) The provisioned
            mode configuration for the event source. For more information, see [provisioned
            mode](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html#invocation-eventsourcemapping-provisioned-mode).
      description: A mapping between an Amazon Web Services resource and a Lambda
        function. For details, see CreateEventSourceMapping.
    EventSourceMappingMetric:
      type: string
      enum:
      - EventCount
    EventSourceMappingMetricList:
      type: array
      items:
        $ref: '#/components/schemas/EventSourceMappingMetric'
    EventSourceMappingMetricsConfig:
      type: object
      properties:
        Metrics:
          allOf:
          - $ref: '#/components/schemas/EventSourceMappingMetricList'
          description: The metrics you want your event source mapping to produce.
            Include `EventCount` to receive event source mapping metrics related to
            the number of events processed by your event source mapping. For more
            information about these metrics, see [ Event source mapping metrics](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics).
      description: The metrics configuration for your event source. Use this configuration
        object to define which metrics you want your event source mapping to produce.
    EventSourceMappingsList:
      type: array
      items:
        $ref: '#/components/schemas/EventSourceMappingConfiguration'
    EventSourcePosition:
      type: string
      enum:
      - TRIM_HORIZON
      - LATEST
      - AT_TIMESTAMP
    EventSourceToken:
      type: string
      pattern: ^[a-zA-Z0-9._\-]+$
      minLength: 0
      maxLength: 256
    FileSystemArn:
      type: string
      pattern: ^arn:aws[a-zA-Z-]*:elasticfilesystem:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:access-point/fsap-[a-f0-9]{17}$
      minLength: 0
      maxLength: 200
    FileSystemConfig:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/FileSystemArn'
          description: The Amazon Resource Name (ARN) of the Amazon EFS access point
            that provides access to the file system.
        LocalMountPath:
          allOf:
          - $ref: '#/components/schemas/LocalMountPath'
          description: The path where the function can access the file system, starting
            with `/mnt/`.
      required:
      - Arn
      - LocalMountPath
      description: Details about the connection between a Lambda function and an [Amazon
        EFS file system](https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html).
    FileSystemConfigList:
      type: array
      items:
        $ref: '#/components/schemas/FileSystemConfig'
    Filter:
      type: object
      properties:
        Pattern:
          allOf:
          - $ref: '#/components/schemas/Pattern'
          description: A filter pattern. For more information on the syntax of a filter
            pattern, see [ Filter rule syntax](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax).
      description: A structure within a `FilterCriteria` object that defines an event
        filtering pattern.
    FilterCriteria:
      type: object
      properties:
        Filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: A list of filters.
      description: An object that contains the filters for an event source.
    FilterCriteriaError:
      type: object
      properties:
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/FilterCriteriaErrorCode'
          description: The KMS exception that resulted from filter criteria encryption
            or decryption.
        Message:
          allOf:
          - $ref: '#/components/schemas/FilterCriteriaErrorMessage'
          description: The error message.
      description: An object that contains details about an error related to filter
        criteria encryption.
    FilterCriteriaErrorCode:
      type: string
      pattern: ^[A-Za-z]+Exception$
      minLength: 10
      maxLength: 50
    FilterCriteriaErrorMessage:
      type: string
      pattern: .*
      minLength: 10
      maxLength: 2048
    FilterList:
      type: array
      items:
        $ref: '#/components/schemas/Filter'
    FullDocument:
      type: string
      enum:
      - UpdateLookup
      - Default
    FunctionArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?$
    FunctionArnList:
      type: array
      items:
        $ref: '#/components/schemas/FunctionArn'
    FunctionCode:
      type: object
      properties:
        ZipFile:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The base64-encoded contents of the deployment package. Amazon
            Web Services SDK and CLI clients handle the encoding for you.
        S3Bucket:
          allOf:
          - $ref: '#/components/schemas/S3Bucket'
          description: An Amazon S3 bucket in the same Amazon Web Services Region
            as your function. The bucket can be in a different Amazon Web Services
            account.
        S3Key:
          allOf:
          - $ref: '#/components/schemas/S3Key'
          description: The Amazon S3 key of the deployment package.
        S3ObjectVersion:
          allOf:
          - $ref: '#/components/schemas/S3ObjectVersion'
          description: For versioned objects, the version of the deployment package
            object to use.
        ImageUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: URI of a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html)
            in the Amazon ECR registry.
        SourceKMSKeyArn:
          allOf:
          - $ref: '#/components/schemas/KMSKeyArn'
          description: The ARN of the Key Management Service (KMS) customer managed
            key that's used to encrypt your function's .zip deployment package. If
            you don't provide a customer managed key, Lambda uses an [Amazon Web Services
            owned key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk).
      description: The code for the Lambda function. You can either specify an object
        in Amazon S3, upload a .zip file archive deployment package directly, or specify
        the URI of a container image.
    FunctionCodeLocation:
      type: object
      properties:
        RepositoryType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The service that's hosting the file.
        Location:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A presigned URL that you can use to download the deployment
            package.
        ImageUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: URI of a container image in the Amazon ECR registry.
        ResolvedImageUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resolved URI for the image.
        SourceKMSKeyArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the Key Management Service (KMS) customer managed
            key that's used to encrypt your function's .zip deployment package. If
            you don't provide a customer managed key, Lambda uses an [Amazon Web Services
            owned key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk).
      description: Details about a function's deployment package.
    FunctionConfiguration:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/NamespacedFunctionName'
          description: The name of the function.
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/NameSpacedFunctionArn'
          description: The function's Amazon Resource Name (ARN).
        Runtime:
          allOf:
          - $ref: '#/components/schemas/Runtime'
          description: 'The identifier of the function''s [ runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html).
            Runtime is required if the deployment package is a .zip file archive.
            Specifying a runtime results in an error if you''re deploying a function
            using a container image.


            The following list includes deprecated runtimes. Lambda blocks creating
            new functions and updating existing functions shortly after each runtime
            is deprecated. For more information, see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).


            For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).'
        Role:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The function's execution role.
        Handler:
          allOf:
          - $ref: '#/components/schemas/Handler'
          description: The function that Lambda calls to begin running your function.
        CodeSize:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The size of the function's deployment package, in bytes.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The function's description.
        Timeout:
          allOf:
          - $ref: '#/components/schemas/Timeout'
          description: The amount of time in seconds that Lambda allows a function
            to run before stopping it.
        MemorySize:
          allOf:
          - $ref: '#/components/schemas/MemorySize'
          description: The amount of memory available to the function at runtime.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the function was last updated, in [ISO-8601
            format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
        CodeSha256:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The SHA256 hash of the function's deployment package.
        Version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the Lambda function.
        VpcConfig:
          allOf:
          - $ref: '#/components/schemas/VpcConfigResponse'
          description: The function's networking configuration.
        DeadLetterConfig:
          allOf:
          - $ref: '#/components/schemas/DeadLetterConfig'
          description: The function's dead letter queue.
        Environment:
          allOf:
          - $ref: '#/components/schemas/EnvironmentResponse'
          description: The function's [environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html).
            Omitted from CloudTrail logs.
        KMSKeyArn:
          allOf:
          - $ref: '#/components/schemas/KMSKeyArn'
          description: "The ARN of the Key Management Service (KMS) customer managed\
            \ key that's used to encrypt the following resources:\n\n  * The function's\
            \ [environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption).\n\
            \n  * The function's [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html)\
            \ snapshots.\n\n  * When used with `SourceKMSKeyArn`, the unzipped version\
            \ of the .zip deployment package that's used for function invocations.\
            \ For more information, see [ Specifying a customer managed key for Lambda](https://docs.aws.amazon.com/lambda/latest/dg/encrypt-zip-package.html#enable-zip-custom-encryption).\n\
            \n  * The optimized version of the container image that's used for function\
            \ invocations. Note that this is not the same key that's used to protect\
            \ your container image in the Amazon Elastic Container Registry (Amazon\
            \ ECR). For more information, see [Function lifecycle](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-lifecycle).\n\
            \nIf you don't provide a customer managed key, Lambda uses an [Amazon\
            \ Web Services owned key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk)\
            \ or an [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk)."
        TracingConfig:
          allOf:
          - $ref: '#/components/schemas/TracingConfigResponse'
          description: The function's X-Ray tracing configuration.
        MasterArn:
          allOf:
          - $ref: '#/components/schemas/FunctionArn'
          description: For Lambda@Edge functions, the ARN of the main function.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The latest updated revision of the function or alias.
        Layers:
          allOf:
          - $ref: '#/components/schemas/LayersReferenceList'
          description: The function's [layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html).
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The current state of the function. When the state is `Inactive`,
            you can reactivate the function by invoking it.
        StateReason:
          allOf:
          - $ref: '#/components/schemas/StateReason'
          description: The reason for the function's current state.
        StateReasonCode:
          allOf:
          - $ref: '#/components/schemas/StateReasonCode'
          description: The reason code for the function's current state. When the
            code is `Creating`, you can't invoke or modify the function.
        LastUpdateStatus:
          allOf:
          - $ref: '#/components/schemas/LastUpdateStatus'
          description: The status of the last update that was performed on the function.
            This is first set to `Successful` after function creation completes.
        LastUpdateStatusReason:
          allOf:
          - $ref: '#/components/schemas/LastUpdateStatusReason'
          description: The reason for the last update that was performed on the function.
        LastUpdateStatusReasonCode:
          allOf:
          - $ref: '#/components/schemas/LastUpdateStatusReasonCode'
          description: The reason code for the last update that was performed on the
            function.
        FileSystemConfigs:
          allOf:
          - $ref: '#/components/schemas/FileSystemConfigList'
          description: Connection settings for an [Amazon EFS file system](https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html).
        PackageType:
          allOf:
          - $ref: '#/components/schemas/PackageType'
          description: The type of deployment package. Set to `Image` for container
            image and set `Zip` for .zip file archive.
        ImageConfigResponse:
          allOf:
          - $ref: '#/components/schemas/ImageConfigResponse'
          description: The function's image configuration values.
        SigningProfileVersionArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the signing profile version.
        SigningJobArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the signing job.
        Architectures:
          allOf:
          - $ref: '#/components/schemas/ArchitecturesList'
          description: The instruction set architecture that the function supports.
            Architecture is a string array with one of the valid values. The default
            architecture value is `x86_64`.
        EphemeralStorage:
          allOf:
          - $ref: '#/components/schemas/EphemeralStorage'
          description: The size of the function's `/tmp` directory in MB. The default
            value is 512, but can be any whole number between 512 and 10,240 MB. For
            more information, see [Configuring ephemeral storage (console)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-ephemeral-storage).
        SnapStart:
          allOf:
          - $ref: '#/components/schemas/SnapStartResponse'
          description: Set `ApplyOn` to `PublishedVersions` to create a snapshot of
            the initialized execution environment when you publish a function version.
            For more information, see [Improving startup performance with Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html).
        RuntimeVersionConfig:
          allOf:
          - $ref: '#/components/schemas/RuntimeVersionConfig'
          description: The ARN of the runtime and any errors that occured.
        LoggingConfig:
          allOf:
          - $ref: '#/components/schemas/LoggingConfig'
          description: The function's Amazon CloudWatch Logs configuration settings.
      description: Details about a function's configuration.
    FunctionEventInvokeConfig:
      type: object
      properties:
        LastModified:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time that the configuration was last updated.
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/FunctionArn'
          description: The Amazon Resource Name (ARN) of the function.
        MaximumRetryAttempts:
          allOf:
          - $ref: '#/components/schemas/MaximumRetryAttempts'
          description: The maximum number of times to retry when the function returns
            an error.
        MaximumEventAgeInSeconds:
          allOf:
          - $ref: '#/components/schemas/MaximumEventAgeInSeconds'
          description: The maximum age of a request that Lambda sends to a function
            for processing.
        DestinationConfig:
          allOf:
          - $ref: '#/components/schemas/DestinationConfig'
          description: "A destination for events after they have been sent to a function\
            \ for processing.\n\n**Destinations**\n\n  * **Function** \\- The Amazon\
            \ Resource Name (ARN) of a Lambda function.\n\n  * **Queue** \\- The ARN\
            \ of a standard SQS queue.\n\n  * **Bucket** \\- The ARN of an Amazon\
            \ S3 bucket.\n\n  * **Topic** \\- The ARN of a standard SNS topic.\n\n\
            \  * **Event Bus** \\- The ARN of an Amazon EventBridge event bus.\n\n\
            S3 buckets are supported only for on-failure destinations. To retain records\
            \ of successful invocations, use another destination type."
    FunctionEventInvokeConfigList:
      type: array
      items:
        $ref: '#/components/schemas/FunctionEventInvokeConfig'
    FunctionList:
      type: array
      items:
        $ref: '#/components/schemas/FunctionConfiguration'
    FunctionName:
      type: string
      pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
      minLength: 1
      maxLength: 140
    FunctionResponseType:
      type: string
      enum:
      - ReportBatchItemFailures
    FunctionResponseTypeList:
      type: array
      items:
        $ref: '#/components/schemas/FunctionResponseType'
    FunctionUrl:
      type: string
      minLength: 40
      maxLength: 100
    FunctionUrlAuthType:
      type: string
      enum:
      - NONE
      - AWS_IAM
    FunctionUrlConfig:
      type: object
      properties:
        FunctionUrl:
          allOf:
          - $ref: '#/components/schemas/FunctionUrl'
          description: The HTTP URL endpoint for your function.
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/FunctionArn'
          description: The Amazon Resource Name (ARN) of your function.
        CreationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the function URL was created, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime)
            (YYYY-MM-DDThh:mm:ss.sTZD).
        LastModifiedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the function URL configuration was last updated, in [ISO-8601
            format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
        Cors:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: The [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
            settings for your function URL.
        AuthType:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlAuthType'
          description: The type of authentication that your function URL uses. Set
            to `AWS_IAM` if you want to restrict access to authenticated users only.
            Set to `NONE` if you want to bypass IAM authentication to create a public
            endpoint. For more information, see [Security and auth model for Lambda
            function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
        InvokeMode:
          allOf:
          - $ref: '#/components/schemas/InvokeMode'
          description: "Use one of the following options:\n\n  * `BUFFERED` – This\
            \ is the default option. Lambda invokes your function using the `Invoke`\
            \ API operation. Invocation results are available when the payload is\
            \ complete. The maximum payload size is 6 MB.\n\n  * `RESPONSE_STREAM`\
            \ – Your function streams payload results as they become available. Lambda\
            \ invokes your function using the `InvokeWithResponseStream` API operation.\
            \ The maximum response payload size is 20 MB, however, you can [request\
            \ a quota increase](https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html)."
      required:
      - FunctionUrl
      - FunctionArn
      - CreationTime
      - LastModifiedTime
      - AuthType
      description: Details about a Lambda function URL.
    FunctionUrlConfigList:
      type: array
      items:
        $ref: '#/components/schemas/FunctionUrlConfig'
    FunctionUrlQualifier:
      type: string
      pattern: ^(^\$LATEST$)|((?!^[0-9]+$)([a-zA-Z0-9-_]+))$
      minLength: 1
      maxLength: 128
    FunctionVersion:
      type: string
      enum:
      - ALL
    GetAccountSettingsRequest:
      type: object
      properties: {}
    GetAccountSettingsResponse:
      type: object
      properties:
        AccountLimit:
          allOf:
          - $ref: '#/components/schemas/AccountLimit'
          description: Limits that are related to concurrency and code storage.
        AccountUsage:
          allOf:
          - $ref: '#/components/schemas/AccountUsage'
          description: The number of functions and amount of storage in use.
    GetAliasRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Name:
          allOf:
          - $ref: '#/components/schemas/Alias'
          description: The name of the alias.
      required:
      - FunctionName
      - Name
    GetCodeSigningConfigRequest:
      type: object
      properties:
        CodeSigningConfigArn:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigArn'
          description: The The Amazon Resource Name (ARN) of the code signing configuration.
      required:
      - CodeSigningConfigArn
    GetCodeSigningConfigResponse:
      type: object
      properties:
        CodeSigningConfig:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfig'
          description: The code signing configuration
      required:
      - CodeSigningConfig
    GetEventSourceMappingRequest:
      type: object
      properties:
        UUID:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the event source mapping.
      required:
      - UUID
    GetFunctionCodeSigningConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
      required:
      - FunctionName
    GetFunctionCodeSigningConfigResponse:
      type: object
      properties:
        CodeSigningConfigArn:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigArn'
          description: The The Amazon Resource Name (ARN) of the code signing configuration.
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
      required:
      - CodeSigningConfigArn
      - FunctionName
    GetFunctionConcurrencyRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
      required:
      - FunctionName
    GetFunctionConcurrencyResponse:
      type: object
      properties:
        ReservedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/ReservedConcurrentExecutions'
          description: The number of simultaneous executions that are reserved for
            the function.
    GetFunctionConfigurationRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/NamespacedFunctionName'
          description: "The name or ARN of the Lambda function, version, or alias.\n\
            \n**Name formats**\n\n  * **Function name** – `my-function` (name-only),\
            \ `my-function:v1` (with alias).\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nYou can\
            \ append a version number or alias to any of the formats. The length constraint\
            \ applies only to the full ARN. If you specify only the function name,\
            \ it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: Specify a version or alias to get details about a published
            version of the function.
      required:
      - FunctionName
    GetFunctionEventInvokeConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function, version, or alias.\n\
            \n**Name formats**\n\n  * **Function name** \\- `my-function` (name-only),\
            \ `my-function:v1` (with alias).\n\n  * **Function ARN** \\- `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** \\- `123456789012:function:my-function`.\n\nYou\
            \ can append a version number or alias to any of the formats. The length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: A version number or alias name.
      required:
      - FunctionName
    GetFunctionRecursionConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/UnqualifiedFunctionName'
          description: ''
      required:
      - FunctionName
    GetFunctionRecursionConfigResponse:
      type: object
      properties:
        RecursiveLoop:
          allOf:
          - $ref: '#/components/schemas/RecursiveLoop'
          description: 'If your function''s recursive loop detection configuration
            is `Allow`, Lambda doesn''t take any action when it detects your function
            being invoked as part of a recursive loop.


            If your function''s recursive loop detection configuration is `Terminate`,
            Lambda stops your function being invoked and notifies you when it detects
            your function being invoked as part of a recursive loop.


            By default, Lambda sets your function''s configuration to `Terminate`.
            You can update this configuration using the PutFunctionRecursionConfig
            action.'
    GetFunctionRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/NamespacedFunctionName'
          description: "The name or ARN of the Lambda function, version, or alias.\n\
            \n**Name formats**\n\n  * **Function name** – `my-function` (name-only),\
            \ `my-function:v1` (with alias).\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nYou can\
            \ append a version number or alias to any of the formats. The length constraint\
            \ applies only to the full ARN. If you specify only the function name,\
            \ it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: Specify a version or alias to get details about a published
            version of the function.
      required:
      - FunctionName
    GetFunctionResponse:
      type: object
      properties:
        Configuration:
          allOf:
          - $ref: '#/components/schemas/FunctionConfiguration'
          description: The configuration of the function or version.
        Code:
          allOf:
          - $ref: '#/components/schemas/FunctionCodeLocation'
          description: The deployment package of the function or version.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The function's [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html).
            Lambda returns tag data only if you have explicit allow permissions for
            [lambda:ListTags](https://docs.aws.amazon.com/lambda/latest/api/API_ListTags.html).
        TagsError:
          allOf:
          - $ref: '#/components/schemas/TagsError'
          description: An object that contains details about an error related to retrieving
            tags.
        Concurrency:
          allOf:
          - $ref: '#/components/schemas/Concurrency'
          description: The function's [reserved concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html).
    GetFunctionUrlConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlQualifier'
          description: The alias name.
      required:
      - FunctionName
    GetFunctionUrlConfigResponse:
      type: object
      properties:
        FunctionUrl:
          allOf:
          - $ref: '#/components/schemas/FunctionUrl'
          description: The HTTP URL endpoint for your function.
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/FunctionArn'
          description: The Amazon Resource Name (ARN) of your function.
        AuthType:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlAuthType'
          description: The type of authentication that your function URL uses. Set
            to `AWS_IAM` if you want to restrict access to authenticated users only.
            Set to `NONE` if you want to bypass IAM authentication to create a public
            endpoint. For more information, see [Security and auth model for Lambda
            function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
        Cors:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: The [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
            settings for your function URL.
        CreationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the function URL was created, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime)
            (YYYY-MM-DDThh:mm:ss.sTZD).
        LastModifiedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the function URL configuration was last updated, in [ISO-8601
            format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
        InvokeMode:
          allOf:
          - $ref: '#/components/schemas/InvokeMode'
          description: "Use one of the following options:\n\n  * `BUFFERED` – This\
            \ is the default option. Lambda invokes your function using the `Invoke`\
            \ API operation. Invocation results are available when the payload is\
            \ complete. The maximum payload size is 6 MB.\n\n  * `RESPONSE_STREAM`\
            \ – Your function streams payload results as they become available. Lambda\
            \ invokes your function using the `InvokeWithResponseStream` API operation.\
            \ The maximum response payload size is 20 MB, however, you can [request\
            \ a quota increase](https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html)."
      required:
      - FunctionUrl
      - FunctionArn
      - AuthType
      - CreationTime
      - LastModifiedTime
    GetLayerVersionByArnRequest:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/LayerVersionArn'
          description: The ARN of the layer version.
      required:
      - Arn
    GetLayerVersionPolicyRequest:
      type: object
      properties:
        LayerName:
          allOf:
          - $ref: '#/components/schemas/LayerName'
          description: The name or Amazon Resource Name (ARN) of the layer.
        VersionNumber:
          allOf:
          - $ref: '#/components/schemas/LayerVersionNumber'
          description: The version number.
      required:
      - LayerName
      - VersionNumber
    GetLayerVersionPolicyResponse:
      type: object
      properties:
        Policy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The policy document.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique identifier for the current revision of the policy.
    GetLayerVersionRequest:
      type: object
      properties:
        LayerName:
          allOf:
          - $ref: '#/components/schemas/LayerName'
          description: The name or Amazon Resource Name (ARN) of the layer.
        VersionNumber:
          allOf:
          - $ref: '#/components/schemas/LayerVersionNumber'
          description: The version number.
      required:
      - LayerName
      - VersionNumber
    GetLayerVersionResponse:
      type: object
      properties:
        Content:
          allOf:
          - $ref: '#/components/schemas/LayerVersionContentOutput'
          description: Details about the layer version.
        LayerArn:
          allOf:
          - $ref: '#/components/schemas/LayerArn'
          description: The ARN of the layer.
        LayerVersionArn:
          allOf:
          - $ref: '#/components/schemas/LayerVersionArn'
          description: The ARN of the layer version.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the version.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the layer version was created, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime)
            (YYYY-MM-DDThh:mm:ss.sTZD).
        Version:
          allOf:
          - $ref: '#/components/schemas/LayerVersionNumber'
          description: The version number.
        CompatibleRuntimes:
          allOf:
          - $ref: '#/components/schemas/CompatibleRuntimes'
          description: 'The layer''s compatible runtimes.


            The following list includes deprecated runtimes. For more information,
            see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).


            For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).'
        LicenseInfo:
          allOf:
          - $ref: '#/components/schemas/LicenseInfo'
          description: The layer's software license.
        CompatibleArchitectures:
          allOf:
          - $ref: '#/components/schemas/CompatibleArchitectures'
          description: A list of compatible [instruction set architectures](https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html).
    GetPolicyRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/NamespacedFunctionName'
          description: "The name or ARN of the Lambda function, version, or alias.\n\
            \n**Name formats**\n\n  * **Function name** – `my-function` (name-only),\
            \ `my-function:v1` (with alias).\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nYou can\
            \ append a version number or alias to any of the formats. The length constraint\
            \ applies only to the full ARN. If you specify only the function name,\
            \ it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: Specify a version or alias to get the policy for that resource.
      required:
      - FunctionName
    GetPolicyResponse:
      type: object
      properties:
        Policy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resource-based policy.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique identifier for the current revision of the policy.
    GetProvisionedConcurrencyConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: The version number or alias name.
      required:
      - FunctionName
      - Qualifier
    GetProvisionedConcurrencyConfigResponse:
      type: object
      properties:
        RequestedProvisionedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: The amount of provisioned concurrency requested.
        AvailableProvisionedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/NonNegativeInteger'
          description: The amount of provisioned concurrency available.
        AllocatedProvisionedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/NonNegativeInteger'
          description: The amount of provisioned concurrency allocated. When a weighted
            alias is used during linear and canary deployments, this value fluctuates
            depending on the amount of concurrency that is provisioned for the function
            versions.
        Status:
          allOf:
          - $ref: '#/components/schemas/ProvisionedConcurrencyStatusEnum'
          description: The status of the allocation process.
        StatusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: For failed allocations, the reason that provisioned concurrency
            could not be allocated.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that a user last updated the configuration,
            in [ISO 8601 format](https://www.iso.org/iso-8601-date-and-time-format.html).
    GetRuntimeManagementConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/NamespacedFunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: Specify a version of the function. This can be `$LATEST` or
            a published version number. If no value is specified, the configuration
            for the `$LATEST` version is returned.
      required:
      - FunctionName
    GetRuntimeManagementConfigResponse:
      type: object
      properties:
        UpdateRuntimeOn:
          allOf:
          - $ref: '#/components/schemas/UpdateRuntimeOn'
          description: The current runtime update mode of the function.
        RuntimeVersionArn:
          allOf:
          - $ref: '#/components/schemas/RuntimeVersionArn'
          description: The ARN of the runtime the function is configured to use. If
            the runtime update mode is **Manual** , the ARN is returned, otherwise
            `null` is returned.
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/NameSpacedFunctionArn'
          description: The Amazon Resource Name (ARN) of your function.
    Handler:
      type: string
      pattern: ^[^\s]+$
      minLength: 0
      maxLength: 128
    Header:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 1024
    HeadersList:
      type: array
      items:
        $ref: '#/components/schemas/Header'
    HttpStatus:
      type: integer
      default: 0
    ImageConfig:
      type: object
      properties:
        EntryPoint:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: Specifies the entry point to their application, which is typically
            the location of the runtime executable.
        Command:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: Specifies parameters that you want to pass in with ENTRYPOINT.
        WorkingDirectory:
          allOf:
          - $ref: '#/components/schemas/WorkingDirectory'
          description: Specifies the working directory.
      description: Configuration values that override the container image Dockerfile
        settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
    ImageConfigError:
      type: object
      properties:
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Error code.
        Message:
          allOf:
          - $ref: '#/components/schemas/SensitiveString'
          description: Error message.
      description: Error response to `GetFunctionConfiguration`.
    ImageConfigResponse:
      type: object
      properties:
        ImageConfig:
          allOf:
          - $ref: '#/components/schemas/ImageConfig'
          description: Configuration values that override the container image Dockerfile.
        Error:
          allOf:
          - $ref: '#/components/schemas/ImageConfigError'
          description: Error response to `GetFunctionConfiguration`.
      description: Response to a `GetFunctionConfiguration` request.
    Integer:
      type: integer
      default: 0
    InvalidCodeSignatureException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The code signature failed the integrity check. If the integrity
        check fails, then Lambda blocks deployment, even if the code signing policy
        is set to WARN.
    InvalidParameterValueException:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception type.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception message.
      description: One of the parameters in the request is not valid.
    InvalidRequestContentException:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception type.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception message.
      description: The request body could not be parsed as JSON, or a request header
        is invalid. For example, the 'x-amzn-RequestId' header is not a valid UUID
        string.
    InvalidRuntimeException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The runtime or runtime version specified is not supported.
    InvalidSecurityGroupIDException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The security group ID provided in the Lambda function VPC configuration
        is not valid.
    InvalidSubnetIDException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The subnet ID provided in the Lambda function VPC configuration
        is not valid.
    InvalidZipFileException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Lambda could not unzip the deployment package.
    InvocationRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/NamespacedFunctionName'
          description: "The name or ARN of the Lambda function, version, or alias.\n\
            \n**Name formats**\n\n  * **Function name** – `my-function` (name-only),\
            \ `my-function:v1` (with alias).\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nYou can\
            \ append a version number or alias to any of the formats. The length constraint\
            \ applies only to the full ARN. If you specify only the function name,\
            \ it is limited to 64 characters in length."
        InvocationType:
          allOf:
          - $ref: '#/components/schemas/InvocationType'
          description: "Choose from the following options.\n\n  * `RequestResponse`\
            \ (default) – Invoke the function synchronously. Keep the connection open\
            \ until the function returns a response or times out. The API response\
            \ includes the function response and additional data.\n\n  * `Event` –\
            \ Invoke the function asynchronously. Send events that fail multiple times\
            \ to the function's dead-letter queue (if one is configured). The API\
            \ response only includes a status code.\n\n  * `DryRun` – Validate parameter\
            \ values and verify that the user or role has permission to invoke the\
            \ function."
        LogType:
          allOf:
          - $ref: '#/components/schemas/LogType'
          description: Set to `Tail` to include the execution log in the response.
            Applies to synchronously invoked functions only.
        ClientContext:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Up to 3,583 bytes of base64-encoded data about the invoking
            client to pass to the function in the context object. Lambda passes the
            `ClientContext` object to your function for synchronous invocations only.
        Payload:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: 'The JSON that you want to provide to your Lambda function
            as input.


            You can enter the JSON directly. For example, `--payload ''{ "key": "value"
            }''`. You can also specify a file path. For example, `--payload file://payload.json`.'
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: Specify a version or alias to invoke a published version of
            the function.
      required:
      - FunctionName
    InvocationResponse:
      type: object
      properties:
        StatusCode:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The HTTP status code is in the 200 range for a successful request.
            For the `RequestResponse` invocation type, this status code is 200. For
            the `Event` invocation type, this status code is 202. For the `DryRun`
            invocation type, the status code is 204.
        FunctionError:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If present, indicates that an error occurred during function
            execution. Details about the error are included in the response payload.
        LogResult:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The last 4 KB of the execution log, which is base64-encoded.
        Payload:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The response from the function, or an error object.
        ExecutedVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the function that executed. When you invoke
            a function with an alias, this indicates which version the alias resolved
            to.
    InvocationType:
      type: string
      enum:
      - Event
      - RequestResponse
      - DryRun
    InvokeAsyncRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/NamespacedFunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        InvokeArgs:
          allOf:
          - $ref: '#/components/schemas/BlobStream'
          description: The JSON that you want to provide to your Lambda function as
            input.
      required:
      - FunctionName
      - InvokeArgs
    InvokeAsyncResponse:
      type: object
      properties:
        Status:
          allOf:
          - $ref: '#/components/schemas/HttpStatus'
          description: The status code.
      description: A success response (`202 Accepted`) indicates that the request
        is queued for invocation.
    InvokeMode:
      type: string
      enum:
      - BUFFERED
      - RESPONSE_STREAM
    InvokeResponseStreamUpdate:
      type: object
      properties:
        Payload:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: Data returned by your Lambda function.
      description: A chunk of the streamed response payload.
    InvokeWithResponseStreamCompleteEvent:
      type: object
      properties:
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An error code.
        ErrorDetails:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The details of any returned error.
        LogResult:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The last 4 KB of the execution log, which is base64-encoded.
      description: A response confirming that the event stream is complete.
    InvokeWithResponseStreamRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/NamespacedFunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        InvocationType:
          allOf:
          - $ref: '#/components/schemas/ResponseStreamingInvocationType'
          description: "Use one of the following options:\n\n  * `RequestResponse`\
            \ (default) – Invoke the function synchronously. Keep the connection open\
            \ until the function returns a response or times out. The API operation\
            \ response includes the function response and additional data.\n\n  *\
            \ `DryRun` – Validate parameter values and verify that the IAM user or\
            \ role has permission to invoke the function."
        LogType:
          allOf:
          - $ref: '#/components/schemas/LogType'
          description: Set to `Tail` to include the execution log in the response.
            Applies to synchronously invoked functions only.
        ClientContext:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Up to 3,583 bytes of base64-encoded data about the invoking
            client to pass to the function in the context object.
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: The alias name.
        Payload:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: 'The JSON that you want to provide to your Lambda function
            as input.


            You can enter the JSON directly. For example, `--payload ''{ "key": "value"
            }''`. You can also specify a file path. For example, `--payload file://payload.json`.'
      required:
      - FunctionName
    InvokeWithResponseStreamResponse:
      type: object
      properties:
        StatusCode:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: For a successful request, the HTTP status code is in the 200
            range. For the `RequestResponse` invocation type, this status code is
            200. For the `DryRun` invocation type, this status code is 204.
        ExecutedVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the function that executed. When you invoke
            a function with an alias, this indicates which version the alias resolved
            to.
        EventStream:
          allOf:
          - $ref: '#/components/schemas/InvokeWithResponseStreamResponseEvent'
          description: The stream of response payloads.
        ResponseStreamContentType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of data the stream is returning.
    InvokeWithResponseStreamResponseEvent:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/InvokeResponseStreamUpdate'
        description: |-
          A chunk of the streamed response payload.
      - allOf:
        - $ref: '#/components/schemas/InvokeWithResponseStreamCompleteEvent'
        description: |-
          An object that's returned when the stream has ended and all the payload chunks have been returned.
      description: |-
        An object that includes a chunk of the response payload. When the stream has ended, Lambda includes a `InvokeComplete` object.
    KMSAccessDeniedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Lambda couldn't decrypt the environment variables because KMS access
        was denied. Check the Lambda function's KMS permissions.
    KMSDisabledException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Lambda couldn't decrypt the environment variables because the KMS
        key used is disabled. Check the Lambda function's KMS key settings.
    KMSInvalidStateException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Lambda couldn't decrypt the environment variables because the state
        of the KMS key used is not valid for Decrypt. Check the function's KMS key
        settings.
    KMSKeyArn:
      type: string
      pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
    KMSNotFoundException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Lambda couldn't decrypt the environment variables because the KMS
        key was not found. Check the function's KMS key settings.
    LastUpdateStatus:
      type: string
      enum:
      - Successful
      - Failed
      - InProgress
    LastUpdateStatusReason:
      type: string
    LastUpdateStatusReasonCode:
      type: string
      enum:
      - EniLimitExceeded
      - InsufficientRolePermissions
      - InvalidConfiguration
      - InternalError
      - SubnetOutOfIPAddresses
      - InvalidSubnet
      - InvalidSecurityGroup
      - ImageDeleted
      - ImageAccessDenied
      - InvalidImage
      - KMSKeyAccessDenied
      - KMSKeyNotFound
      - InvalidStateKMSKey
      - DisabledKMSKey
      - EFSIOError
      - EFSMountConnectivityError
      - EFSMountFailure
      - EFSMountTimeout
      - InvalidRuntime
      - InvalidZipFileException
      - FunctionError
    Layer:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/LayerVersionArn'
          description: The Amazon Resource Name (ARN) of the function layer.
        CodeSize:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The size of the layer archive in bytes.
        SigningProfileVersionArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) for a signing profile version.
        SigningJobArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of a signing job.
      description: An [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html).
    LayerArn:
      type: string
      pattern: ^arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+$
      minLength: 1
      maxLength: 140
    LayerList:
      type: array
      items:
        $ref: '#/components/schemas/LayerVersionArn'
    LayerName:
      type: string
      pattern: ^(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+$
      minLength: 1
      maxLength: 140
    LayerPermissionAllowedAction:
      type: string
      pattern: ^lambda:GetLayerVersion$
      minLength: 0
      maxLength: 22
    LayerPermissionAllowedPrincipal:
      type: string
      pattern: ^\d{12}|\*|arn:(aws[a-zA-Z-]*):iam::\d{12}:root$
    LayerVersionArn:
      type: string
      pattern: ^arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+$
      minLength: 1
      maxLength: 140
    LayerVersionContentInput:
      type: object
      properties:
        S3Bucket:
          allOf:
          - $ref: '#/components/schemas/S3Bucket'
          description: The Amazon S3 bucket of the layer archive.
        S3Key:
          allOf:
          - $ref: '#/components/schemas/S3Key'
          description: The Amazon S3 key of the layer archive.
        S3ObjectVersion:
          allOf:
          - $ref: '#/components/schemas/S3ObjectVersion'
          description: For versioned objects, the version of the layer archive object
            to use.
        ZipFile:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The base64-encoded contents of the layer archive. Amazon Web
            Services SDK and Amazon Web Services CLI clients handle the encoding for
            you.
      description: A ZIP archive that contains the contents of an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html).
        You can specify either an Amazon S3 location, or upload a layer archive directly.
    LayerVersionContentOutput:
      type: object
      properties:
        Location:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A link to the layer archive in Amazon S3 that is valid for
            10 minutes.
        CodeSha256:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The SHA-256 hash of the layer archive.
        CodeSize:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The size of the layer archive in bytes.
        SigningProfileVersionArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) for a signing profile version.
        SigningJobArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of a signing job.
      description: Details about a version of an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html).
    LayerVersionNumber:
      type: integer
      format: int64
      default: 0
    LayerVersionsList:
      type: array
      items:
        $ref: '#/components/schemas/LayerVersionsListItem'
    LayerVersionsListItem:
      type: object
      properties:
        LayerVersionArn:
          allOf:
          - $ref: '#/components/schemas/LayerVersionArn'
          description: The ARN of the layer version.
        Version:
          allOf:
          - $ref: '#/components/schemas/LayerVersionNumber'
          description: The version number.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the version.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the version was created, in ISO 8601 format.
            For example, `2018-11-27T15:10:45.123+0000`.
        CompatibleRuntimes:
          allOf:
          - $ref: '#/components/schemas/CompatibleRuntimes'
          description: 'The layer''s compatible runtimes.


            The following list includes deprecated runtimes. For more information,
            see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).


            For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).'
        LicenseInfo:
          allOf:
          - $ref: '#/components/schemas/LicenseInfo'
          description: The layer's open-source license.
        CompatibleArchitectures:
          allOf:
          - $ref: '#/components/schemas/CompatibleArchitectures'
          description: A list of compatible [instruction set architectures](https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html).
      description: Details about a version of an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html).
    LayersList:
      type: array
      items:
        $ref: '#/components/schemas/LayersListItem'
    LayersListItem:
      type: object
      properties:
        LayerName:
          allOf:
          - $ref: '#/components/schemas/LayerName'
          description: The name of the layer.
        LayerArn:
          allOf:
          - $ref: '#/components/schemas/LayerArn'
          description: The Amazon Resource Name (ARN) of the function layer.
        LatestMatchingVersion:
          allOf:
          - $ref: '#/components/schemas/LayerVersionsListItem'
          description: The newest version of the layer.
      description: Details about an [Lambda layer](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html).
    LayersReferenceList:
      type: array
      items:
        $ref: '#/components/schemas/Layer'
    LicenseInfo:
      type: string
      minLength: 0
      maxLength: 512
    ListAliasesRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        FunctionVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: Specify a function version to only list aliases that invoke
            that version.
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token that's returned by a previous
            request to retrieve the next page of results.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxListItems'
          description: Limit the number of aliases returned.
      required:
      - FunctionName
    ListAliasesResponse:
      type: object
      properties:
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pagination token that's included if more results are available.
        Aliases:
          allOf:
          - $ref: '#/components/schemas/AliasList'
          description: A list of aliases.
    ListCodeSigningConfigsRequest:
      type: object
      properties:
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token that's returned by a previous
            request to retrieve the next page of results.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxListItems'
          description: Maximum number of items to return.
    ListCodeSigningConfigsResponse:
      type: object
      properties:
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pagination token that's included if more results are available.
        CodeSigningConfigs:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigList'
          description: The code signing configurations
    ListEventSourceMappingsRequest:
      type: object
      properties:
        EventSourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: "The Amazon Resource Name (ARN) of the event source.\n\n  *\
            \ **Amazon Kinesis** – The ARN of the data stream or a stream consumer.\n\
            \n  * **Amazon DynamoDB Streams** – The ARN of the stream.\n\n  * **Amazon\
            \ Simple Queue Service** – The ARN of the queue.\n\n  * **Amazon Managed\
            \ Streaming for Apache Kafka** – The ARN of the cluster or the ARN of\
            \ the VPC connection (for [cross-account event source mappings](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#msk-multi-vpc)).\n\
            \n  * **Amazon MQ** – The ARN of the broker.\n\n  * **Amazon DocumentDB**\
            \ – The ARN of the DocumentDB change stream."
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `MyFunction`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\
            \n  * **Version or Alias ARN** – `arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD`.\n\
            \n  * **Partial ARN** – `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it's limited to 64 characters in length."
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pagination token returned by a previous call.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxListItems'
          description: The maximum number of event source mappings to return. Note
            that ListEventSourceMappings returns a maximum of 100 items in each response,
            even if you set the number higher.
    ListEventSourceMappingsResponse:
      type: object
      properties:
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pagination token that's returned when the response doesn't
            contain all event source mappings.
        EventSourceMappings:
          allOf:
          - $ref: '#/components/schemas/EventSourceMappingsList'
          description: A list of event source mappings.
    ListFunctionEventInvokeConfigsRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `my-function`.\n\n  * **Function ARN** \\\
            - `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token that's returned by a previous
            request to retrieve the next page of results.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxFunctionEventInvokeConfigListItems'
          description: The maximum number of configurations to return.
      required:
      - FunctionName
    ListFunctionEventInvokeConfigsResponse:
      type: object
      properties:
        FunctionEventInvokeConfigs:
          allOf:
          - $ref: '#/components/schemas/FunctionEventInvokeConfigList'
          description: A list of configurations.
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pagination token that's included if more results are available.
    ListFunctionUrlConfigsRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token that's returned by a previous
            request to retrieve the next page of results.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxItems'
          description: The maximum number of function URLs to return in the response.
            Note that `ListFunctionUrlConfigs` returns a maximum of 50 items in each
            response, even if you set the number higher.
      required:
      - FunctionName
    ListFunctionUrlConfigsResponse:
      type: object
      properties:
        FunctionUrlConfigs:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlConfigList'
          description: A list of function URL configurations.
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pagination token that's included if more results are available.
      required:
      - FunctionUrlConfigs
    ListFunctionsByCodeSigningConfigRequest:
      type: object
      properties:
        CodeSigningConfigArn:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigArn'
          description: The The Amazon Resource Name (ARN) of the code signing configuration.
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token that's returned by a previous
            request to retrieve the next page of results.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxListItems'
          description: Maximum number of items to return.
      required:
      - CodeSigningConfigArn
    ListFunctionsByCodeSigningConfigResponse:
      type: object
      properties:
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pagination token that's included if more results are available.
        FunctionArns:
          allOf:
          - $ref: '#/components/schemas/FunctionArnList'
          description: The function ARNs.
    ListFunctionsRequest:
      type: object
      properties:
        MasterRegion:
          allOf:
          - $ref: '#/components/schemas/MasterRegion'
          description: For Lambda@Edge functions, the Amazon Web Services Region of
            the master function. For example, `us-east-1` filters the list of functions
            to include only Lambda@Edge functions replicated from a master function
            in US East (N. Virginia). If specified, you must set `FunctionVersion`
            to `ALL`.
        FunctionVersion:
          allOf:
          - $ref: '#/components/schemas/FunctionVersion'
          description: Set to `ALL` to include entries for all published versions
            of each function.
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token that's returned by a previous
            request to retrieve the next page of results.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxListItems'
          description: The maximum number of functions to return in the response.
            Note that `ListFunctions` returns a maximum of 50 items in each response,
            even if you set the number higher.
    ListFunctionsResponse:
      type: object
      properties:
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pagination token that's included if more results are available.
        Functions:
          allOf:
          - $ref: '#/components/schemas/FunctionList'
          description: A list of Lambda functions.
      description: A list of Lambda functions.
    ListLayerVersionsRequest:
      type: object
      properties:
        CompatibleRuntime:
          allOf:
          - $ref: '#/components/schemas/Runtime'
          description: 'A runtime identifier.


            The following list includes deprecated runtimes. For more information,
            see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).


            For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).'
        LayerName:
          allOf:
          - $ref: '#/components/schemas/LayerName'
          description: The name or Amazon Resource Name (ARN) of the layer.
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pagination token returned by a previous call.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxLayerListItems'
          description: The maximum number of versions to return.
        CompatibleArchitecture:
          allOf:
          - $ref: '#/components/schemas/Architecture'
          description: The compatible [instruction set architecture](https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html).
      required:
      - LayerName
    ListLayerVersionsResponse:
      type: object
      properties:
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pagination token returned when the response doesn't contain
            all versions.
        LayerVersions:
          allOf:
          - $ref: '#/components/schemas/LayerVersionsList'
          description: A list of versions.
    ListLayersRequest:
      type: object
      properties:
        CompatibleRuntime:
          allOf:
          - $ref: '#/components/schemas/Runtime'
          description: 'A runtime identifier.


            The following list includes deprecated runtimes. For more information,
            see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).


            For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).'
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pagination token returned by a previous call.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxLayerListItems'
          description: The maximum number of layers to return.
        CompatibleArchitecture:
          allOf:
          - $ref: '#/components/schemas/Architecture'
          description: The compatible [instruction set architecture](https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html).
    ListLayersResponse:
      type: object
      properties:
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pagination token returned when the response doesn't contain
            all layers.
        Layers:
          allOf:
          - $ref: '#/components/schemas/LayersList'
          description: A list of function layers.
    ListProvisionedConcurrencyConfigsRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token that's returned by a previous
            request to retrieve the next page of results.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxProvisionedConcurrencyConfigListItems'
          description: Specify a number to limit the number of configurations returned.
      required:
      - FunctionName
    ListProvisionedConcurrencyConfigsResponse:
      type: object
      properties:
        ProvisionedConcurrencyConfigs:
          allOf:
          - $ref: '#/components/schemas/ProvisionedConcurrencyConfigList'
          description: A list of provisioned concurrency configurations.
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pagination token that's included if more results are available.
    ListTagsRequest:
      type: object
      properties:
        Resource:
          allOf:
          - $ref: '#/components/schemas/TaggableResource'
          description: 'The resource''s Amazon Resource Name (ARN). Note: Lambda does
            not support adding tags to function aliases or versions.'
      required:
      - Resource
    ListTagsResponse:
      type: object
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The function's tags.
    ListVersionsByFunctionRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/NamespacedFunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Marker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token that's returned by a previous
            request to retrieve the next page of results.
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxListItems'
          description: The maximum number of versions to return. Note that `ListVersionsByFunction`
            returns a maximum of 50 items in each response, even if you set the number
            higher.
      required:
      - FunctionName
    ListVersionsByFunctionResponse:
      type: object
      properties:
        NextMarker:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pagination token that's included if more results are available.
        Versions:
          allOf:
          - $ref: '#/components/schemas/FunctionList'
          description: A list of Lambda function versions.
    LocalMountPath:
      type: string
      pattern: ^/mnt/[a-zA-Z0-9-_.]+$
      minLength: 0
      maxLength: 160
    LogFormat:
      type: string
      enum:
      - JSON
      - Text
    LogGroup:
      type: string
      pattern: ^[\.\-_/#A-Za-z0-9]+$
      minLength: 1
      maxLength: 512
    LogType:
      type: string
      enum:
      - None
      - Tail
    LoggingConfig:
      type: object
      properties:
        LogFormat:
          allOf:
          - $ref: '#/components/schemas/LogFormat'
          description: The format in which Lambda sends your function's application
            and system logs to CloudWatch. Select between plain text and structured
            JSON.
        ApplicationLogLevel:
          allOf:
          - $ref: '#/components/schemas/ApplicationLogLevel'
          description: Set this property to filter the application logs for your function
            that Lambda sends to CloudWatch. Lambda only sends application logs at
            the selected level of detail and lower, where `TRACE` is the highest level
            and `FATAL` is the lowest.
        SystemLogLevel:
          allOf:
          - $ref: '#/components/schemas/SystemLogLevel'
          description: Set this property to filter the system logs for your function
            that Lambda sends to CloudWatch. Lambda only sends system logs at the
            selected level of detail and lower, where `DEBUG` is the highest level
            and `WARN` is the lowest.
        LogGroup:
          allOf:
          - $ref: '#/components/schemas/LogGroup'
          description: The name of the Amazon CloudWatch log group the function sends
            logs to. By default, Lambda functions send logs to a default log group
            named `/aws/lambda/`. To use a different log group, enter an existing
            log group or enter a new log group name.
      description: The function's Amazon CloudWatch Logs configuration settings.
    Long:
      type: integer
      format: int64
      default: 0
    MasterRegion:
      type: string
      pattern: ^ALL|[a-z]{2}(-gov)?-[a-z]+-\d{1}$
    MaxAge:
      type: integer
      minimum: 0
      maximum: 86400
    MaxFunctionEventInvokeConfigListItems:
      type: integer
      minimum: 1
      maximum: 50
    MaxItems:
      type: integer
      minimum: 1
      maximum: 50
    MaxLayerListItems:
      type: integer
      minimum: 1
      maximum: 50
    MaxListItems:
      type: integer
      minimum: 1
      maximum: 10000
    MaxProvisionedConcurrencyConfigListItems:
      type: integer
      minimum: 1
      maximum: 50
    MaximumBatchingWindowInSeconds:
      type: integer
      minimum: 0
      maximum: 300
    MaximumConcurrency:
      type: integer
      minimum: 2
      maximum: 1000
    MaximumEventAgeInSeconds:
      type: integer
      minimum: 60
      maximum: 21600
    MaximumNumberOfPollers:
      type: integer
      minimum: 1
      maximum: 2000
    MaximumRecordAgeInSeconds:
      type: integer
      minimum: -1
      maximum: 604800
    MaximumRetryAttempts:
      type: integer
      minimum: 0
      maximum: 2
    MaximumRetryAttemptsEventSourceMapping:
      type: integer
      minimum: -1
      maximum: 10000
    MemorySize:
      type: integer
      minimum: 128
      maximum: 10240
    Method:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 6
    MinimumNumberOfPollers:
      type: integer
      minimum: 1
      maximum: 200
    NameSpacedFunctionArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?$
    NamespacedFunctionName:
      type: string
      pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
      minLength: 1
      maxLength: 170
    NamespacedStatementId:
      type: string
      pattern: ^([a-zA-Z0-9-_.]+)$
      minLength: 1
      maxLength: 100
    NonNegativeInteger:
      type: integer
      minimum: 0
    NullableBoolean:
      type: boolean
    OnFailure:
      type: object
      properties:
        Destination:
          allOf:
          - $ref: '#/components/schemas/DestinationArn'
          description: 'The Amazon Resource Name (ARN) of the destination resource.


            To retain records of unsuccessful [asynchronous invocations](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations),
            you can configure an Amazon SNS topic, Amazon SQS queue, Amazon S3 bucket,
            Lambda function, or Amazon EventBridge event bus as the destination.


            To retain records of failed invocations from [Kinesis](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html),
            [DynamoDB](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html),
            [self-managed Kafka](https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html#services-smaa-onfailure-destination)
            or [Amazon MSK](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-onfailure-destination),
            you can configure an Amazon SNS topic, Amazon SQS queue, or Amazon S3
            bucket as the destination.'
      description: A destination for events that failed processing.
    OnSuccess:
      type: object
      properties:
        Destination:
          allOf:
          - $ref: '#/components/schemas/DestinationArn'
          description: The Amazon Resource Name (ARN) of the destination resource.
      description: 'A destination for events that were processed successfully.


        To retain records of successful [asynchronous invocations](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations),
        you can configure an Amazon SNS topic, Amazon SQS queue, Lambda function,
        or Amazon EventBridge event bus as the destination.'
    OrganizationId:
      type: string
      pattern: ^o-[a-z0-9]{10,32}$
      minLength: 0
      maxLength: 34
    Origin:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 253
    PackageType:
      type: string
      enum:
      - Zip
      - Image
    ParallelizationFactor:
      type: integer
      minimum: 1
      maximum: 10
    Pattern:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 4096
    PolicyLengthExceededException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: The permissions policy for the resource is too large. For more
        information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html).
    PositiveInteger:
      type: integer
      minimum: 1
    PreconditionFailedException:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception type.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception message.
      description: "The RevisionId provided does not match the latest RevisionId for\
        \ the Lambda function or alias.\n\n  * **For AddPermission and RemovePermission\
        \ API operations:** Call `GetPolicy` to retrieve the latest RevisionId for\
        \ your resource.\n\n  * **For all other API operations:** Call `GetFunction`\
        \ or `GetAlias` to retrieve the latest RevisionId for your resource."
    Principal:
      type: string
      pattern: ^[^\s]+$
    PrincipalOrgID:
      type: string
      pattern: ^o-[a-z0-9]{10,32}$
      minLength: 12
      maxLength: 34
    ProvisionedConcurrencyConfigList:
      type: array
      items:
        $ref: '#/components/schemas/ProvisionedConcurrencyConfigListItem'
    ProvisionedConcurrencyConfigListItem:
      type: object
      properties:
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/FunctionArn'
          description: The Amazon Resource Name (ARN) of the alias or version.
        RequestedProvisionedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: The amount of provisioned concurrency requested.
        AvailableProvisionedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/NonNegativeInteger'
          description: The amount of provisioned concurrency available.
        AllocatedProvisionedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/NonNegativeInteger'
          description: The amount of provisioned concurrency allocated. When a weighted
            alias is used during linear and canary deployments, this value fluctuates
            depending on the amount of concurrency that is provisioned for the function
            versions.
        Status:
          allOf:
          - $ref: '#/components/schemas/ProvisionedConcurrencyStatusEnum'
          description: The status of the allocation process.
        StatusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: For failed allocations, the reason that provisioned concurrency
            could not be allocated.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that a user last updated the configuration,
            in [ISO 8601 format](https://www.iso.org/iso-8601-date-and-time-format.html).
      description: Details about the provisioned concurrency configuration for a function
        alias or version.
    ProvisionedConcurrencyConfigNotFoundException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: The specified configuration does not exist.
    ProvisionedConcurrencyStatusEnum:
      type: string
      enum:
      - IN_PROGRESS
      - READY
      - FAILED
    ProvisionedPollerConfig:
      type: object
      properties:
        MinimumPollers:
          allOf:
          - $ref: '#/components/schemas/MinimumNumberOfPollers'
          description: The minimum number of event pollers this event source can scale
            down to.
        MaximumPollers:
          allOf:
          - $ref: '#/components/schemas/MaximumNumberOfPollers'
          description: The maximum number of event pollers this event source can scale
            up to.
      description: The [ provisioned mode](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html#invocation-eventsourcemapping-provisioned-mode)
        configuration for the event source. Use Provisioned Mode to customize the
        minimum and maximum number of event pollers for your event source. An event
        poller is a compute unit that provides approximately 5 MBps of throughput.
    PublishLayerVersionRequest:
      type: object
      properties:
        LayerName:
          allOf:
          - $ref: '#/components/schemas/LayerName'
          description: The name or Amazon Resource Name (ARN) of the layer.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the version.
        Content:
          allOf:
          - $ref: '#/components/schemas/LayerVersionContentInput'
          description: The function layer archive.
        CompatibleRuntimes:
          allOf:
          - $ref: '#/components/schemas/CompatibleRuntimes'
          description: 'A list of compatible [function runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html).
            Used for filtering with ListLayers and ListLayerVersions.


            The following list includes deprecated runtimes. For more information,
            see [Runtime deprecation policy](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-support-policy).'
        LicenseInfo:
          allOf:
          - $ref: '#/components/schemas/LicenseInfo'
          description: "The layer's software license. It can be any of the following:\n\
            \n  * An [SPDX license identifier](https://spdx.org/licenses/). For example,\
            \ `MIT`.\n\n  * The URL of a license hosted on the internet. For example,\
            \ `https://opensource.org/licenses/MIT`.\n\n  * The full text of the license."
        CompatibleArchitectures:
          allOf:
          - $ref: '#/components/schemas/CompatibleArchitectures'
          description: A list of compatible [instruction set architectures](https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html).
      required:
      - LayerName
      - Content
    PublishLayerVersionResponse:
      type: object
      properties:
        Content:
          allOf:
          - $ref: '#/components/schemas/LayerVersionContentOutput'
          description: Details about the layer version.
        LayerArn:
          allOf:
          - $ref: '#/components/schemas/LayerArn'
          description: The ARN of the layer.
        LayerVersionArn:
          allOf:
          - $ref: '#/components/schemas/LayerVersionArn'
          description: The ARN of the layer version.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the version.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the layer version was created, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime)
            (YYYY-MM-DDThh:mm:ss.sTZD).
        Version:
          allOf:
          - $ref: '#/components/schemas/LayerVersionNumber'
          description: The version number.
        CompatibleRuntimes:
          allOf:
          - $ref: '#/components/schemas/CompatibleRuntimes'
          description: 'The layer''s compatible runtimes.


            The following list includes deprecated runtimes. For more information,
            see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).


            For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).'
        LicenseInfo:
          allOf:
          - $ref: '#/components/schemas/LicenseInfo'
          description: The layer's software license.
        CompatibleArchitectures:
          allOf:
          - $ref: '#/components/schemas/CompatibleArchitectures'
          description: A list of compatible [instruction set architectures](https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html).
    PublishVersionRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        CodeSha256:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Only publish a version if the hash value matches the value
            that's specified. Use this option to avoid publishing a version if the
            function code has changed since you last updated it. You can get the hash
            for the version that you uploaded from the output of UpdateFunctionCode.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the version to override the description in
            the function configuration.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Only update the function if the revision ID matches the ID
            that's specified. Use this option to avoid publishing a version if the
            function configuration has changed since you last updated it.
      required:
      - FunctionName
    PutFunctionCodeSigningConfigRequest:
      type: object
      properties:
        CodeSigningConfigArn:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigArn'
          description: The The Amazon Resource Name (ARN) of the code signing configuration.
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
      required:
      - CodeSigningConfigArn
      - FunctionName
    PutFunctionCodeSigningConfigResponse:
      type: object
      properties:
        CodeSigningConfigArn:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigArn'
          description: The The Amazon Resource Name (ARN) of the code signing configuration.
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
      required:
      - CodeSigningConfigArn
      - FunctionName
    PutFunctionConcurrencyRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        ReservedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/ReservedConcurrentExecutions'
          description: The number of simultaneous executions to reserve for the function.
      required:
      - FunctionName
      - ReservedConcurrentExecutions
    PutFunctionEventInvokeConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function, version, or alias.\n\
            \n**Name formats**\n\n  * **Function name** \\- `my-function` (name-only),\
            \ `my-function:v1` (with alias).\n\n  * **Function ARN** \\- `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** \\- `123456789012:function:my-function`.\n\nYou\
            \ can append a version number or alias to any of the formats. The length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: A version number or alias name.
        MaximumRetryAttempts:
          allOf:
          - $ref: '#/components/schemas/MaximumRetryAttempts'
          description: The maximum number of times to retry when the function returns
            an error.
        MaximumEventAgeInSeconds:
          allOf:
          - $ref: '#/components/schemas/MaximumEventAgeInSeconds'
          description: The maximum age of a request that Lambda sends to a function
            for processing.
        DestinationConfig:
          allOf:
          - $ref: '#/components/schemas/DestinationConfig'
          description: "A destination for events after they have been sent to a function\
            \ for processing.\n\n**Destinations**\n\n  * **Function** \\- The Amazon\
            \ Resource Name (ARN) of a Lambda function.\n\n  * **Queue** \\- The ARN\
            \ of a standard SQS queue.\n\n  * **Bucket** \\- The ARN of an Amazon\
            \ S3 bucket.\n\n  * **Topic** \\- The ARN of a standard SNS topic.\n\n\
            \  * **Event Bus** \\- The ARN of an Amazon EventBridge event bus.\n\n\
            S3 buckets are supported only for on-failure destinations. To retain records\
            \ of successful invocations, use another destination type."
      required:
      - FunctionName
    PutFunctionRecursionConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/UnqualifiedFunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        RecursiveLoop:
          allOf:
          - $ref: '#/components/schemas/RecursiveLoop'
          description: 'If you set your function''s recursive loop detection configuration
            to `Allow`, Lambda doesn''t take any action when it detects your function
            being invoked as part of a recursive loop. We recommend that you only
            use this setting if your design intentionally uses a Lambda function to
            write data back to the same Amazon Web Services resource that invokes
            it.


            If you set your function''s recursive loop detection configuration to
            `Terminate`, Lambda stops your function being invoked and notifies you
            when it detects your function being invoked as part of a recursive loop.


            By default, Lambda sets your function''s configuration to `Terminate`.


            If your design intentionally uses a Lambda function to write data back
            to the same Amazon Web Services resource that invokes the function, then
            use caution and implement suitable guard rails to prevent unexpected charges
            being billed to your Amazon Web Services account. To learn more about
            best practices for using recursive invocation patterns, see [Recursive
            patterns that cause run-away Lambda functions](https://serverlessland.com/content/service/lambda/guides/aws-lambda-operator-guide/recursive-runaway)
            in Serverless Land.'
      required:
      - FunctionName
      - RecursiveLoop
    PutFunctionRecursionConfigResponse:
      type: object
      properties:
        RecursiveLoop:
          allOf:
          - $ref: '#/components/schemas/RecursiveLoop'
          description: 'The status of your function''s recursive loop detection configuration.


            When this value is set to `Allow`and Lambda detects your function being
            invoked as part of a recursive loop, it doesn''t take any action.


            When this value is set to `Terminate` and Lambda detects your function
            being invoked as part of a recursive loop, it stops your function being
            invoked and notifies you.'
    PutProvisionedConcurrencyConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: The version number or alias name.
        ProvisionedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: The amount of provisioned concurrency to allocate for the version
            or alias.
      required:
      - FunctionName
      - Qualifier
      - ProvisionedConcurrentExecutions
    PutProvisionedConcurrencyConfigResponse:
      type: object
      properties:
        RequestedProvisionedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          description: The amount of provisioned concurrency requested.
        AvailableProvisionedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/NonNegativeInteger'
          description: The amount of provisioned concurrency available.
        AllocatedProvisionedConcurrentExecutions:
          allOf:
          - $ref: '#/components/schemas/NonNegativeInteger'
          description: The amount of provisioned concurrency allocated. When a weighted
            alias is used during linear and canary deployments, this value fluctuates
            depending on the amount of concurrency that is provisioned for the function
            versions.
        Status:
          allOf:
          - $ref: '#/components/schemas/ProvisionedConcurrencyStatusEnum'
          description: The status of the allocation process.
        StatusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: For failed allocations, the reason that provisioned concurrency
            could not be allocated.
        LastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that a user last updated the configuration,
            in [ISO 8601 format](https://www.iso.org/iso-8601-date-and-time-format.html).
    PutRuntimeManagementConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: Specify a version of the function. This can be `$LATEST` or
            a published version number. If no value is specified, the configuration
            for the `$LATEST` version is returned.
        UpdateRuntimeOn:
          allOf:
          - $ref: '#/components/schemas/UpdateRuntimeOn'
          description: "Specify the runtime update mode.\n\n  * **Auto (default)**\
            \ \\- Automatically update to the most recent and secure runtime version\
            \ using a [Two-phase runtime version rollout](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-two-phase).\
            \ This is the best choice for most customers to ensure they always benefit\
            \ from runtime updates.\n\n  * **Function update** \\- Lambda updates\
            \ the runtime of your function to the most recent and secure runtime version\
            \ when you update your function. This approach synchronizes runtime updates\
            \ with function deployments, giving you control over when runtime updates\
            \ are applied and allowing you to detect and mitigate rare runtime update\
            \ incompatibilities early. When using this setting, you need to regularly\
            \ update your functions to keep their runtime up-to-date.\n\n  * **Manual**\
            \ \\- You specify a runtime version in your function configuration. The\
            \ function will use this runtime version indefinitely. In the rare case\
            \ where a new runtime version is incompatible with an existing function,\
            \ this allows you to roll back your function to an earlier runtime version.\
            \ For more information, see [Roll back a runtime version](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-rollback)."
        RuntimeVersionArn:
          allOf:
          - $ref: '#/components/schemas/RuntimeVersionArn'
          description: 'The ARN of the runtime version you want the function to use.


            This is only required if you''re using the **Manual** runtime update mode.'
      required:
      - FunctionName
      - UpdateRuntimeOn
    PutRuntimeManagementConfigResponse:
      type: object
      properties:
        UpdateRuntimeOn:
          allOf:
          - $ref: '#/components/schemas/UpdateRuntimeOn'
          description: The runtime update mode.
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/FunctionArn'
          description: The ARN of the function
        RuntimeVersionArn:
          allOf:
          - $ref: '#/components/schemas/RuntimeVersionArn'
          description: The ARN of the runtime the function is configured to use. If
            the runtime update mode is **manual** , the ARN is returned, otherwise
            `null` is returned.
      required:
      - UpdateRuntimeOn
      - FunctionArn
    Qualifier:
      type: string
      pattern: ^(|[a-zA-Z0-9$_-]+)$
      minLength: 1
      maxLength: 128
    Queue:
      type: string
      pattern: ^[\s\S]*$
      minLength: 1
      maxLength: 1000
    Queues:
      type: array
      items:
        $ref: '#/components/schemas/Queue'
    RecursiveInvocationException:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception type.
        Message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception message.
      description: Lambda has detected your function being invoked in a recursive
        loop with other Amazon Web Services resources and stopped your function's
        invocation.
    RecursiveLoop:
      type: string
      enum:
      - Allow
      - Terminate
    RemoveLayerVersionPermissionRequest:
      type: object
      properties:
        LayerName:
          allOf:
          - $ref: '#/components/schemas/LayerName'
          description: The name or Amazon Resource Name (ARN) of the layer.
        VersionNumber:
          allOf:
          - $ref: '#/components/schemas/LayerVersionNumber'
          description: The version number.
        StatementId:
          allOf:
          - $ref: '#/components/schemas/StatementId'
          description: The identifier that was specified when the statement was added.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Only update the policy if the revision ID matches the ID specified.
            Use this option to avoid modifying a policy that has changed since you
            last read it.
      required:
      - LayerName
      - VersionNumber
      - StatementId
    RemovePermissionRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function, version, or alias.\n\
            \n**Name formats**\n\n  * **Function name** – `my-function` (name-only),\
            \ `my-function:v1` (with alias).\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nYou can\
            \ append a version number or alias to any of the formats. The length constraint\
            \ applies only to the full ARN. If you specify only the function name,\
            \ it is limited to 64 characters in length."
        StatementId:
          allOf:
          - $ref: '#/components/schemas/NamespacedStatementId'
          description: Statement ID of the permission to remove.
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: Specify a version or alias to remove permissions from a published
            version of the function.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Update the policy only if the revision ID matches the ID that's
            specified. Use this option to avoid modifying a policy that has changed
            since you last read it.
      required:
      - FunctionName
      - StatementId
    RequestTooLargeException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: The request payload exceeded the `Invoke` request body JSON input
        quota. For more information, see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html).
    ReservedConcurrentExecutions:
      type: integer
      minimum: 0
    ResourceArn:
      type: string
      pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
    ResourceConflictException:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception type.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception message.
      description: The resource already exists, or another operation is in progress.
    ResourceInUseException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The operation conflicts with the resource's availability. For example,
        you tried to update an event source mapping in the CREATING state, or you
        tried to delete an event source mapping currently UPDATING.
    ResourceNotFoundException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The resource specified in the request does not exist.
    ResourceNotReadyException:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception type.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The exception message.
      description: The function is inactive and its VPC connection is no longer available.
        Wait for the VPC connection to reestablish and try again.
    ResponseStreamingInvocationType:
      type: string
      enum:
      - RequestResponse
      - DryRun
    RoleArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
    Runtime:
      type: string
      enum:
      - nodejs
      - nodejs4.3
      - nodejs6.10
      - nodejs8.10
      - nodejs10.x
      - nodejs12.x
      - nodejs14.x
      - nodejs16.x
      - java8
      - java8.al2
      - java11
      - python2.7
      - python3.6
      - python3.7
      - python3.8
      - python3.9
      - dotnetcore1.0
      - dotnetcore2.0
      - dotnetcore2.1
      - dotnetcore3.1
      - dotnet6
      - dotnet8
      - nodejs4.3-edge
      - go1.x
      - ruby2.5
      - ruby2.7
      - provided
      - provided.al2
      - nodejs18.x
      - python3.10
      - java17
      - ruby3.2
      - ruby3.3
      - ruby3.4
      - python3.11
      - nodejs20.x
      - provided.al2023
      - python3.12
      - java21
      - python3.13
      - nodejs22.x
    RuntimeVersionArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z-]*):lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}::runtime:.+$
      minLength: 26
      maxLength: 2048
    RuntimeVersionConfig:
      type: object
      properties:
        RuntimeVersionArn:
          allOf:
          - $ref: '#/components/schemas/RuntimeVersionArn'
          description: The ARN of the runtime version you want the function to use.
        Error:
          allOf:
          - $ref: '#/components/schemas/RuntimeVersionError'
          description: Error response when Lambda is unable to retrieve the runtime
            version for a function.
      description: The ARN of the runtime and any errors that occured.
    RuntimeVersionError:
      type: object
      properties:
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error code.
        Message:
          allOf:
          - $ref: '#/components/schemas/SensitiveString'
          description: The error message.
      description: Any error returned when the runtime version information for the
        function could not be retrieved.
    S3Bucket:
      type: string
      pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
      minLength: 3
      maxLength: 63
    S3Key:
      type: string
      minLength: 1
      maxLength: 1024
    S3ObjectVersion:
      type: string
      minLength: 1
      maxLength: 1024
    ScalingConfig:
      type: object
      properties:
        MaximumConcurrency:
          allOf:
          - $ref: '#/components/schemas/MaximumConcurrency'
          description: Limits the number of concurrent instances that the Amazon SQS
            event source can invoke.
      description: (Amazon SQS only) The scaling configuration for the event source.
        To remove the configuration, pass an empty value.
    SecurityGroupId:
      type: string
    SecurityGroupIds:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupId'
    SelfManagedEventSource:
      type: object
      properties:
        Endpoints:
          allOf:
          - $ref: '#/components/schemas/Endpoints'
          description: 'The list of bootstrap servers for your Kafka brokers in the
            following format: `"KAFKA_BOOTSTRAP_SERVERS": ["abc.xyz.com:xxxx","abc2.xyz.com:xxxx"]`.'
      description: The self-managed Apache Kafka cluster for your event source.
    SelfManagedKafkaEventSourceConfig:
      type: object
      properties:
        ConsumerGroupId:
          allOf:
          - $ref: '#/components/schemas/URI'
          description: The identifier for the Kafka consumer group to join. The consumer
            group ID must be unique among all your Kafka event sources. After creating
            a Kafka event source mapping with the consumer group ID specified, you
            cannot update this value. For more information, see [Customizable consumer
            group ID](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-consumer-group-id).
      description: Specific configuration settings for a self-managed Apache Kafka
        event source.
    SensitiveString:
      type: string
    ServiceException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The Lambda service encountered an internal error.
    SigningProfileVersionArns:
      type: array
      items:
        $ref: '#/components/schemas/Arn'
    SnapStart:
      type: object
      properties:
        ApplyOn:
          allOf:
          - $ref: '#/components/schemas/SnapStartApplyOn'
          description: Set to `PublishedVersions` to create a snapshot of the initialized
            execution environment when you publish a function version.
      description: The function's [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html)
        setting. Set `ApplyOn` to `PublishedVersions` to create a snapshot of the
        initialized execution environment when you publish a function version.
    SnapStartApplyOn:
      type: string
      enum:
      - PublishedVersions
      - None
    SnapStartException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The `afterRestore()` [runtime hook](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-runtime-hooks.html)
        encountered an error. For more information, check the Amazon CloudWatch logs.
    SnapStartNotReadyException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Lambda is initializing your function. You can invoke the function
        when the [function state](https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html)
        becomes `Active`.
    SnapStartOptimizationStatus:
      type: string
      enum:
      - 'On'
      - 'Off'
    SnapStartResponse:
      type: object
      properties:
        ApplyOn:
          allOf:
          - $ref: '#/components/schemas/SnapStartApplyOn'
          description: When set to `PublishedVersions`, Lambda creates a snapshot
            of the execution environment when you publish a function version.
        OptimizationStatus:
          allOf:
          - $ref: '#/components/schemas/SnapStartOptimizationStatus'
          description: When you provide a [qualified Amazon Resource Name (ARN)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using),
            this response element indicates whether SnapStart is activated for the
            specified function version.
      description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html)
        setting.
    SnapStartTimeoutException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Lambda couldn't restore the snapshot within the timeout limit.
    SourceAccessConfiguration:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/SourceAccessType'
          description: "The type of authentication protocol, VPC components, or virtual\
            \ host for your event source. For example: `\"Type\":\"SASL_SCRAM_512_AUTH\"\
            `.\n\n  * `BASIC_AUTH` – (Amazon MQ) The Secrets Manager secret that stores\
            \ your broker credentials.\n\n  * `BASIC_AUTH` – (Self-managed Apache\
            \ Kafka) The Secrets Manager ARN of your secret key used for SASL/PLAIN\
            \ authentication of your Apache Kafka brokers.\n\n  * `VPC_SUBNET` – (Self-managed\
            \ Apache Kafka) The subnets associated with your VPC. Lambda connects\
            \ to these subnets to fetch data from your self-managed Apache Kafka cluster.\n\
            \n  * `VPC_SECURITY_GROUP` – (Self-managed Apache Kafka) The VPC security\
            \ group used to manage access to your self-managed Apache Kafka brokers.\n\
            \n  * `SASL_SCRAM_256_AUTH` – (Self-managed Apache Kafka) The Secrets\
            \ Manager ARN of your secret key used for SASL SCRAM-256 authentication\
            \ of your self-managed Apache Kafka brokers.\n\n  * `SASL_SCRAM_512_AUTH`\
            \ – (Amazon MSK, Self-managed Apache Kafka) The Secrets Manager ARN of\
            \ your secret key used for SASL SCRAM-512 authentication of your self-managed\
            \ Apache Kafka brokers.\n\n  * `VIRTUAL_HOST` –- (RabbitMQ) The name of\
            \ the virtual host in your RabbitMQ broker. Lambda uses this RabbitMQ\
            \ host as the event source. This property cannot be specified in an UpdateEventSourceMapping\
            \ API call.\n\n  * `CLIENT_CERTIFICATE_TLS_AUTH` – (Amazon MSK, self-managed\
            \ Apache Kafka) The Secrets Manager ARN of your secret key containing\
            \ the certificate chain (X.509 PEM), private key (PKCS#8 PEM), and private\
            \ key password (optional) used for mutual TLS authentication of your MSK/Apache\
            \ Kafka brokers.\n\n  * `SERVER_ROOT_CA_CERTIFICATE` – (Self-managed Apache\
            \ Kafka) The Secrets Manager ARN of your secret key containing the root\
            \ CA certificate (X.509 PEM) used for TLS encryption of your Apache Kafka\
            \ brokers."
        URI:
          allOf:
          - $ref: '#/components/schemas/URI'
          description: 'The value for your chosen configuration in `Type`. For example:
            `"URI": "arn:aws:secretsmanager:us-east-1:01234567890:secret:MyBrokerSecretName"`.'
      description: To secure and define access to your event source, you can specify
        the authentication protocol, VPC components, or virtual host.
    SourceAccessConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/SourceAccessConfiguration'
    SourceAccessType:
      type: string
      enum:
      - BASIC_AUTH
      - VPC_SUBNET
      - VPC_SECURITY_GROUP
      - SASL_SCRAM_512_AUTH
      - SASL_SCRAM_256_AUTH
      - VIRTUAL_HOST
      - CLIENT_CERTIFICATE_TLS_AUTH
      - SERVER_ROOT_CA_CERTIFICATE
    SourceOwner:
      type: string
      pattern: ^\d{12}$
      minLength: 0
      maxLength: 12
    State:
      type: string
      enum:
      - Pending
      - Active
      - Inactive
      - Failed
    StateReason:
      type: string
    StateReasonCode:
      type: string
      enum:
      - Idle
      - Creating
      - Restoring
      - EniLimitExceeded
      - InsufficientRolePermissions
      - InvalidConfiguration
      - InternalError
      - SubnetOutOfIPAddresses
      - InvalidSubnet
      - InvalidSecurityGroup
      - ImageDeleted
      - ImageAccessDenied
      - InvalidImage
      - KMSKeyAccessDenied
      - KMSKeyNotFound
      - InvalidStateKMSKey
      - DisabledKMSKey
      - EFSIOError
      - EFSMountConnectivityError
      - EFSMountFailure
      - EFSMountTimeout
      - InvalidRuntime
      - InvalidZipFileException
      - FunctionError
    StatementId:
      type: string
      pattern: ^([a-zA-Z0-9-_]+)$
      minLength: 1
      maxLength: 100
    String:
      type: string
    StringList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    SubnetIPAddressLimitReachedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: Lambda couldn't set up VPC access for the Lambda function because
        one or more configured subnets has no available IP addresses.
    SubnetId:
      type: string
    SubnetIds:
      type: array
      items:
        $ref: '#/components/schemas/SubnetId'
    SystemLogLevel:
      type: string
      enum:
      - DEBUG
      - INFO
      - WARN
    TagKey:
      type: string
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagResourceRequest:
      type: object
      properties:
        Resource:
          allOf:
          - $ref: '#/components/schemas/TaggableResource'
          description: The resource's Amazon Resource Name (ARN).
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A list of tags to apply to the resource.
      required:
      - Resource
      - Tags
    TagValue:
      type: string
    TaggableResource:
      type: string
      pattern: ^arn:(aws[a-zA-Z-]*):lambda:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:\d{12}:(function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?|code-signing-config:csc-[a-z0-9]{17}|event-source-mapping:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$
      minLength: 1
      maxLength: 256
    Tags:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagsError:
      type: object
      properties:
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/TagsErrorCode'
          description: The error code.
        Message:
          allOf:
          - $ref: '#/components/schemas/TagsErrorMessage'
          description: The error message.
      required:
      - ErrorCode
      - Message
      description: An object that contains details about an error related to retrieving
        tags.
    TagsErrorCode:
      type: string
      pattern: ^[A-Za-z]+Exception$
      minLength: 10
      maxLength: 21
    TagsErrorMessage:
      type: string
      pattern: ^.*$
      minLength: 84
      maxLength: 1000
    ThrottleReason:
      type: string
      enum:
      - ConcurrentInvocationLimitExceeded
      - FunctionInvocationRateLimitExceeded
      - ReservedFunctionConcurrentInvocationLimitExceeded
      - ReservedFunctionInvocationRateLimitExceeded
      - CallerRateLimitExceeded
      - ConcurrentSnapshotCreateLimitExceeded
    Timeout:
      type: integer
      minimum: 1
    Timestamp:
      type: string
    TooManyRequestsException:
      type: object
      properties:
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The number of seconds the caller should wait before retrying.
        Type:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
        Reason:
          $ref: '#/components/schemas/ThrottleReason'
      description: The request throughput limit was exceeded. For more information,
        see [Lambda quotas](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html#api-requests).
    Topic:
      type: string
      pattern: ^[^.]([a-zA-Z0-9\-_.]+)$
      minLength: 1
      maxLength: 249
    Topics:
      type: array
      items:
        $ref: '#/components/schemas/Topic'
    TracingConfig:
      type: object
      properties:
        Mode:
          allOf:
          - $ref: '#/components/schemas/TracingMode'
          description: The tracing mode.
      description: The function's [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html)
        tracing configuration. To sample and record incoming requests, set `Mode`
        to `Active`.
    TracingConfigResponse:
      type: object
      properties:
        Mode:
          allOf:
          - $ref: '#/components/schemas/TracingMode'
          description: The tracing mode.
      description: The function's X-Ray tracing configuration.
    TracingMode:
      type: string
      enum:
      - Active
      - PassThrough
    TumblingWindowInSeconds:
      type: integer
      minimum: 0
      maximum: 900
    URI:
      type: string
      pattern: ^[a-zA-Z0-9-\/*:_+=.@-]*$
      minLength: 1
      maxLength: 200
    UnqualifiedFunctionName:
      type: string
      pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)$
      minLength: 1
      maxLength: 140
    UnreservedConcurrentExecutions:
      type: integer
      minimum: 0
    UnsupportedMediaTypeException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: The content type of the `Invoke` request body is not JSON.
    UntagResourceRequest:
      type: object
      properties:
        Resource:
          allOf:
          - $ref: '#/components/schemas/TaggableResource'
          description: The resource's Amazon Resource Name (ARN).
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of tag keys to remove from the resource.
      required:
      - Resource
      - TagKeys
    UpdateAliasRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** \\- `MyFunction`.\n\n  * **Function ARN** \\-\
            \ `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\n  *\
            \ **Partial ARN** \\- `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Name:
          allOf:
          - $ref: '#/components/schemas/Alias'
          description: The name of the alias.
        FunctionVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The function version that the alias invokes.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the alias.
        RoutingConfig:
          allOf:
          - $ref: '#/components/schemas/AliasRoutingConfiguration'
          description: The [routing configuration](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html#configuring-alias-routing)
            of the alias.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Only update the alias if the revision ID matches the ID that's
            specified. Use this option to avoid modifying an alias that has changed
            since you last read it.
      required:
      - FunctionName
      - Name
    UpdateCodeSigningConfigRequest:
      type: object
      properties:
        CodeSigningConfigArn:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfigArn'
          description: The The Amazon Resource Name (ARN) of the code signing configuration.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: Descriptive name for this code signing configuration.
        AllowedPublishers:
          allOf:
          - $ref: '#/components/schemas/AllowedPublishers'
          description: Signing profiles for this code signing configuration.
        CodeSigningPolicies:
          allOf:
          - $ref: '#/components/schemas/CodeSigningPolicies'
          description: The code signing policy.
      required:
      - CodeSigningConfigArn
    UpdateCodeSigningConfigResponse:
      type: object
      properties:
        CodeSigningConfig:
          allOf:
          - $ref: '#/components/schemas/CodeSigningConfig'
          description: The code signing configuration
      required:
      - CodeSigningConfig
    UpdateEventSourceMappingRequest:
      type: object
      properties:
        UUID:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the event source mapping.
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `MyFunction`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:MyFunction`.\n\
            \n  * **Version or Alias ARN** – `arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD`.\n\
            \n  * **Partial ARN** – `123456789012:function:MyFunction`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it's limited to 64 characters in length."
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Enabled'
          description: 'When true, the event source mapping is active. When false,
            Lambda pauses polling and invocation.


            Default: True'
        BatchSize:
          allOf:
          - $ref: '#/components/schemas/BatchSize'
          description: "The maximum number of records in each batch that Lambda pulls\
            \ from your stream or queue and sends to your function. Lambda passes\
            \ all of the records in the batch to the function in a single call, up\
            \ to the payload limit for synchronous invocation (6 MB).\n\n  * **Amazon\
            \ Kinesis** – Default 100. Max 10,000.\n\n  * **Amazon DynamoDB Streams**\
            \ – Default 100. Max 10,000.\n\n  * **Amazon Simple Queue Service** –\
            \ Default 10. For standard queues the max is 10,000. For FIFO queues the\
            \ max is 10.\n\n  * **Amazon Managed Streaming for Apache Kafka** – Default\
            \ 100. Max 10,000.\n\n  * **Self-managed Apache Kafka** – Default 100.\
            \ Max 10,000.\n\n  * **Amazon MQ (ActiveMQ and RabbitMQ)** – Default 100.\
            \ Max 10,000.\n\n  * **DocumentDB** – Default 100. Max 10,000."
        FilterCriteria:
          allOf:
          - $ref: '#/components/schemas/FilterCriteria'
          description: An object that defines the filter criteria that determine whether
            Lambda should process an event. For more information, see [Lambda event
            filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html).
        MaximumBatchingWindowInSeconds:
          allOf:
          - $ref: '#/components/schemas/MaximumBatchingWindowInSeconds'
          description: 'The maximum amount of time, in seconds, that Lambda spends
            gathering records before invoking the function. You can configure `MaximumBatchingWindowInSeconds`
            to any value from 0 seconds to 300 seconds in increments of seconds.


            For Kinesis, DynamoDB, and Amazon SQS event sources, the default batching
            window is 0 seconds. For Amazon MSK, Self-managed Apache Kafka, Amazon
            MQ, and DocumentDB event sources, the default batching window is 500 ms.
            Note that because you can only change `MaximumBatchingWindowInSeconds`
            in increments of seconds, you cannot revert back to the 500 ms default
            batching window after you have changed it. To restore the default batching
            window, you must create a new event source mapping.


            Related setting: For Kinesis, DynamoDB, and Amazon SQS event sources,
            when you set `BatchSize` to a value greater than 10, you must set `MaximumBatchingWindowInSeconds`
            to at least 1.'
        DestinationConfig:
          allOf:
          - $ref: '#/components/schemas/DestinationConfig'
          description: (Kinesis, DynamoDB Streams, Amazon MSK, and self-managed Kafka
            only) A configuration object that specifies the destination of an event
            after Lambda processes it.
        MaximumRecordAgeInSeconds:
          allOf:
          - $ref: '#/components/schemas/MaximumRecordAgeInSeconds'
          description: (Kinesis and DynamoDB Streams only) Discard records older than
            the specified age. The default value is infinite (-1).
        BisectBatchOnFunctionError:
          allOf:
          - $ref: '#/components/schemas/BisectBatchOnFunctionError'
          description: (Kinesis and DynamoDB Streams only) If the function returns
            an error, split the batch in two and retry.
        MaximumRetryAttempts:
          allOf:
          - $ref: '#/components/schemas/MaximumRetryAttemptsEventSourceMapping'
          description: (Kinesis and DynamoDB Streams only) Discard records after the
            specified number of retries. The default value is infinite (-1). When
            set to infinite (-1), failed records are retried until the record expires.
        ParallelizationFactor:
          allOf:
          - $ref: '#/components/schemas/ParallelizationFactor'
          description: (Kinesis and DynamoDB Streams only) The number of batches to
            process from each shard concurrently.
        SourceAccessConfigurations:
          allOf:
          - $ref: '#/components/schemas/SourceAccessConfigurations'
          description: An array of authentication protocols or VPC components required
            to secure your event source.
        TumblingWindowInSeconds:
          allOf:
          - $ref: '#/components/schemas/TumblingWindowInSeconds'
          description: (Kinesis and DynamoDB Streams only) The duration in seconds
            of a processing window for DynamoDB and Kinesis Streams event sources.
            A value of 0 seconds indicates no tumbling window.
        FunctionResponseTypes:
          allOf:
          - $ref: '#/components/schemas/FunctionResponseTypeList'
          description: (Kinesis, DynamoDB Streams, and Amazon SQS) A list of current
            response type enums applied to the event source mapping.
        ScalingConfig:
          allOf:
          - $ref: '#/components/schemas/ScalingConfig'
          description: (Amazon SQS only) The scaling configuration for the event source.
            For more information, see [Configuring maximum concurrency for Amazon
            SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency).
        DocumentDBEventSourceConfig:
          allOf:
          - $ref: '#/components/schemas/DocumentDBEventSourceConfig'
          description: Specific configuration settings for a DocumentDB event source.
        KMSKeyArn:
          allOf:
          - $ref: '#/components/schemas/KMSKeyArn'
          description: The ARN of the Key Management Service (KMS) customer managed
            key that Lambda uses to encrypt your function's [filter criteria](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-basics).
            By default, Lambda does not encrypt your filter criteria object. Specify
            this property to encrypt data using your own customer managed key.
        MetricsConfig:
          allOf:
          - $ref: '#/components/schemas/EventSourceMappingMetricsConfig'
          description: The metrics configuration for your event source. For more information,
            see [Event source mapping metrics](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics).
        ProvisionedPollerConfig:
          allOf:
          - $ref: '#/components/schemas/ProvisionedPollerConfig'
          description: (Amazon MSK and self-managed Apache Kafka only) The provisioned
            mode configuration for the event source. For more information, see [provisioned
            mode](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html#invocation-eventsourcemapping-provisioned-mode).
      required:
      - UUID
    UpdateFunctionCodeRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        ZipFile:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The base64-encoded contents of the deployment package. Amazon
            Web Services SDK and CLI clients handle the encoding for you. Use only
            with a function defined with a .zip file archive deployment package.
        S3Bucket:
          allOf:
          - $ref: '#/components/schemas/S3Bucket'
          description: An Amazon S3 bucket in the same Amazon Web Services Region
            as your function. The bucket can be in a different Amazon Web Services
            account. Use only with a function defined with a .zip file archive deployment
            package.
        S3Key:
          allOf:
          - $ref: '#/components/schemas/S3Key'
          description: The Amazon S3 key of the deployment package. Use only with
            a function defined with a .zip file archive deployment package.
        S3ObjectVersion:
          allOf:
          - $ref: '#/components/schemas/S3ObjectVersion'
          description: For versioned objects, the version of the deployment package
            object to use.
        ImageUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: URI of a container image in the Amazon ECR registry. Do not
            use for a function defined with a .zip file archive.
        Publish:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Set to true to publish a new version of the function after
            updating the code. This has the same effect as calling PublishVersion
            separately.
        DryRun:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Set to true to validate the request parameters and access permissions
            without modifying the function code.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Update the function only if the revision ID matches the ID
            that's specified. Use this option to avoid modifying a function that has
            changed since you last read it.
        Architectures:
          allOf:
          - $ref: '#/components/schemas/ArchitecturesList'
          description: The instruction set architecture that the function supports.
            Enter a string array with one of the valid values (arm64 or x86_64). The
            default value is `x86_64`.
        SourceKMSKeyArn:
          allOf:
          - $ref: '#/components/schemas/KMSKeyArn'
          description: The ARN of the Key Management Service (KMS) customer managed
            key that's used to encrypt your function's .zip deployment package. If
            you don't provide a customer managed key, Lambda uses an Amazon Web Services
            managed key.
      required:
      - FunctionName
    UpdateFunctionConfigurationRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Role:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the function's execution
            role.
        Handler:
          allOf:
          - $ref: '#/components/schemas/Handler'
          description: The name of the method within your code that Lambda calls to
            run your function. Handler is required if the deployment package is a
            .zip file archive. The format includes the file name. It can also include
            namespaces and other qualifiers, depending on the runtime. For more information,
            see [Lambda programming model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the function.
        Timeout:
          allOf:
          - $ref: '#/components/schemas/Timeout'
          description: The amount of time (in seconds) that Lambda allows a function
            to run before stopping it. The default is 3 seconds. The maximum allowed
            value is 900 seconds. For more information, see [Lambda execution environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
        MemorySize:
          allOf:
          - $ref: '#/components/schemas/MemorySize'
          description: The amount of [memory available to the function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console)
            at runtime. Increasing the function memory also increases its CPU allocation.
            The default value is 128 MB. The value can be any multiple of 1 MB.
        VpcConfig:
          allOf:
          - $ref: '#/components/schemas/VpcConfig'
          description: For network connectivity to Amazon Web Services resources in
            a VPC, specify a list of security groups and subnets in the VPC. When
            you connect a function to a VPC, it can access resources and the internet
            only through that VPC. For more information, see [Configuring a Lambda
            function to access resources in a VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
        Environment:
          allOf:
          - $ref: '#/components/schemas/Environment'
          description: Environment variables that are accessible from function code
            during execution.
        Runtime:
          allOf:
          - $ref: '#/components/schemas/Runtime'
          description: 'The identifier of the function''s [ runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html).
            Runtime is required if the deployment package is a .zip file archive.
            Specifying a runtime results in an error if you''re deploying a function
            using a container image.


            The following list includes deprecated runtimes. Lambda blocks creating
            new functions and updating existing functions shortly after each runtime
            is deprecated. For more information, see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).


            For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).'
        DeadLetterConfig:
          allOf:
          - $ref: '#/components/schemas/DeadLetterConfig'
          description: A dead-letter queue configuration that specifies the queue
            or topic where Lambda sends asynchronous events when they fail processing.
            For more information, see [Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq).
        KMSKeyArn:
          allOf:
          - $ref: '#/components/schemas/KMSKeyArn'
          description: "The ARN of the Key Management Service (KMS) customer managed\
            \ key that's used to encrypt the following resources:\n\n  * The function's\
            \ [environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption).\n\
            \n  * The function's [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html)\
            \ snapshots.\n\n  * When used with `SourceKMSKeyArn`, the unzipped version\
            \ of the .zip deployment package that's used for function invocations.\
            \ For more information, see [ Specifying a customer managed key for Lambda](https://docs.aws.amazon.com/lambda/latest/dg/encrypt-zip-package.html#enable-zip-custom-encryption).\n\
            \n  * The optimized version of the container image that's used for function\
            \ invocations. Note that this is not the same key that's used to protect\
            \ your container image in the Amazon Elastic Container Registry (Amazon\
            \ ECR). For more information, see [Function lifecycle](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-lifecycle).\n\
            \nIf you don't provide a customer managed key, Lambda uses an [Amazon\
            \ Web Services owned key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk)\
            \ or an [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk)."
        TracingConfig:
          allOf:
          - $ref: '#/components/schemas/TracingConfig'
          description: Set `Mode` to `Active` to sample and trace a subset of incoming
            requests with [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html).
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Update the function only if the revision ID matches the ID
            that's specified. Use this option to avoid modifying a function that has
            changed since you last read it.
        Layers:
          allOf:
          - $ref: '#/components/schemas/LayerList'
          description: A list of [function layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
            to add to the function's execution environment. Specify each layer by
            its ARN, including the version.
        FileSystemConfigs:
          allOf:
          - $ref: '#/components/schemas/FileSystemConfigList'
          description: Connection settings for an Amazon EFS file system.
        ImageConfig:
          allOf:
          - $ref: '#/components/schemas/ImageConfig'
          description: '[Container image configuration values](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms)
            that override the values in the container image Docker file.'
        EphemeralStorage:
          allOf:
          - $ref: '#/components/schemas/EphemeralStorage'
          description: The size of the function's `/tmp` directory in MB. The default
            value is 512, but can be any whole number between 512 and 10,240 MB. For
            more information, see [Configuring ephemeral storage (console)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-ephemeral-storage).
        SnapStart:
          allOf:
          - $ref: '#/components/schemas/SnapStart'
          description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html)
            setting.
        LoggingConfig:
          allOf:
          - $ref: '#/components/schemas/LoggingConfig'
          description: The function's Amazon CloudWatch Logs configuration settings.
      required:
      - FunctionName
    UpdateFunctionEventInvokeConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function, version, or alias.\n\
            \n**Name formats**\n\n  * **Function name** \\- `my-function` (name-only),\
            \ `my-function:v1` (with alias).\n\n  * **Function ARN** \\- `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** \\- `123456789012:function:my-function`.\n\nYou\
            \ can append a version number or alias to any of the formats. The length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/Qualifier'
          description: A version number or alias name.
        MaximumRetryAttempts:
          allOf:
          - $ref: '#/components/schemas/MaximumRetryAttempts'
          description: The maximum number of times to retry when the function returns
            an error.
        MaximumEventAgeInSeconds:
          allOf:
          - $ref: '#/components/schemas/MaximumEventAgeInSeconds'
          description: The maximum age of a request that Lambda sends to a function
            for processing.
        DestinationConfig:
          allOf:
          - $ref: '#/components/schemas/DestinationConfig'
          description: "A destination for events after they have been sent to a function\
            \ for processing.\n\n**Destinations**\n\n  * **Function** \\- The Amazon\
            \ Resource Name (ARN) of a Lambda function.\n\n  * **Queue** \\- The ARN\
            \ of a standard SQS queue.\n\n  * **Bucket** \\- The ARN of an Amazon\
            \ S3 bucket.\n\n  * **Topic** \\- The ARN of a standard SNS topic.\n\n\
            \  * **Event Bus** \\- The ARN of an Amazon EventBridge event bus.\n\n\
            S3 buckets are supported only for on-failure destinations. To retain records\
            \ of successful invocations, use another destination type."
      required:
      - FunctionName
    UpdateFunctionUrlConfigRequest:
      type: object
      properties:
        FunctionName:
          allOf:
          - $ref: '#/components/schemas/FunctionName'
          description: "The name or ARN of the Lambda function.\n\n**Name formats**\n\
            \n  * **Function name** – `my-function`.\n\n  * **Function ARN** – `arn:aws:lambda:us-west-2:123456789012:function:my-function`.\n\
            \n  * **Partial ARN** – `123456789012:function:my-function`.\n\nThe length\
            \ constraint applies only to the full ARN. If you specify only the function\
            \ name, it is limited to 64 characters in length."
        Qualifier:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlQualifier'
          description: The alias name.
        AuthType:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlAuthType'
          description: The type of authentication that your function URL uses. Set
            to `AWS_IAM` if you want to restrict access to authenticated users only.
            Set to `NONE` if you want to bypass IAM authentication to create a public
            endpoint. For more information, see [Security and auth model for Lambda
            function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
        Cors:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: The [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
            settings for your function URL.
        InvokeMode:
          allOf:
          - $ref: '#/components/schemas/InvokeMode'
          description: "Use one of the following options:\n\n  * `BUFFERED` – This\
            \ is the default option. Lambda invokes your function using the `Invoke`\
            \ API operation. Invocation results are available when the payload is\
            \ complete. The maximum payload size is 6 MB.\n\n  * `RESPONSE_STREAM`\
            \ – Your function streams payload results as they become available. Lambda\
            \ invokes your function using the `InvokeWithResponseStream` API operation.\
            \ The maximum response payload size is 20 MB, however, you can [request\
            \ a quota increase](https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html)."
      required:
      - FunctionName
    UpdateFunctionUrlConfigResponse:
      type: object
      properties:
        FunctionUrl:
          allOf:
          - $ref: '#/components/schemas/FunctionUrl'
          description: The HTTP URL endpoint for your function.
        FunctionArn:
          allOf:
          - $ref: '#/components/schemas/FunctionArn'
          description: The Amazon Resource Name (ARN) of your function.
        AuthType:
          allOf:
          - $ref: '#/components/schemas/FunctionUrlAuthType'
          description: The type of authentication that your function URL uses. Set
            to `AWS_IAM` if you want to restrict access to authenticated users only.
            Set to `NONE` if you want to bypass IAM authentication to create a public
            endpoint. For more information, see [Security and auth model for Lambda
            function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
        Cors:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: The [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
            settings for your function URL.
        CreationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the function URL was created, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime)
            (YYYY-MM-DDThh:mm:ss.sTZD).
        LastModifiedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the function URL configuration was last updated, in [ISO-8601
            format](https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
        InvokeMode:
          allOf:
          - $ref: '#/components/schemas/InvokeMode'
          description: "Use one of the following options:\n\n  * `BUFFERED` – This\
            \ is the default option. Lambda invokes your function using the `Invoke`\
            \ API operation. Invocation results are available when the payload is\
            \ complete. The maximum payload size is 6 MB.\n\n  * `RESPONSE_STREAM`\
            \ – Your function streams payload results as they become available. Lambda\
            \ invokes your function using the `InvokeWithResponseStream` API operation.\
            \ The maximum response payload size is 20 MB, however, you can [request\
            \ a quota increase](https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html)."
      required:
      - FunctionUrl
      - FunctionArn
      - AuthType
      - CreationTime
      - LastModifiedTime
    UpdateRuntimeOn:
      type: string
      enum:
      - Auto
      - Manual
      - FunctionUpdate
    Version:
      type: string
      pattern: ^(\$LATEST|[0-9]+)$
      minLength: 1
      maxLength: 1024
    VpcConfig:
      type: object
      properties:
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIds'
          description: A list of VPC subnet IDs.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIds'
          description: A list of VPC security group IDs.
        Ipv6AllowedForDualStack:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Allows outbound IPv6 traffic on VPC functions that are connected
            to dual-stack subnets.
      description: The VPC security groups and subnets that are attached to a Lambda
        function. For more information, see [Configuring a Lambda function to access
        resources in a VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
    VpcConfigResponse:
      type: object
      properties:
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIds'
          description: A list of VPC subnet IDs.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIds'
          description: A list of VPC security group IDs.
        VpcId:
          allOf:
          - $ref: '#/components/schemas/VpcId'
          description: The ID of the VPC.
        Ipv6AllowedForDualStack:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Allows outbound IPv6 traffic on VPC functions that are connected
            to dual-stack subnets.
      description: The VPC security groups and subnets that are attached to a Lambda
        function.
    VpcId:
      type: string
    Weight:
      type: number
      format: double
      default: 0
      minimum: 0.0
      maximum: 1.0
    WorkingDirectory:
      type: string
      minLength: 0
      maxLength: 1000
