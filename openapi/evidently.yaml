openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: evidently
  x-aws-serviceName: evidently
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2021-02-01'
  title: Amazon CloudWatch Evidently
  description: |-
    You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.

    You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.
servers:
- description: The Amazon CloudWatch Evidently regional endpoint
  url: https://evidently.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /projects/{project}/evaluations:
    post:
      operationId: BatchEvaluateFeature
      description: |-
        This operation assigns feature variation to user sessions. For each user session, you pass in an `entityID` that represents the user. Evidently then checks the evaluation rules and assigns the variation.

        The first rules that are evaluated are the override rules. If the user's `entityID` matches an override rule, the user is served the variation specified by that rule.

        Next, if there is a launch of the feature, the user might be assigned to a variation in the launch. The chance of this depends on the percentage of users that are allocated to that launch. If the user is enrolled in the launch, the variation they are served depends on the allocation of the various feature variations used for the launch.

        If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might be assigned to a variation in the experiment. The chance of this depends on the percentage of users that are allocated to that experiment. If the user is enrolled in the experiment, the variation they are served depends on the allocation of the various feature variations used for the experiment.

        If the user is not assigned to a launch or experiment, they are served the default variation.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requests:
                  $ref: '#/components/schemas/EvaluationRequestsList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/experiments:
    post:
      operationId: CreateExperiment
      description: |-
        Creates an Evidently _experiment_. Before you create an experiment, you must create the feature to use for the experiment.

        An experiment helps you make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it by statistical methods, and provides clear recommendations about which variations perform better.

        You can optionally specify a `segment` to have the experiment consider only certain audience types in the experiment, such as using only user sessions from a certain location or who use a certain internet browser.

        Don't use this operation to update an existing experiment. Instead, use [UpdateExperiment](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateExperiment.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ExperimentName'
                description:
                  $ref: '#/components/schemas/Description'
                treatments:
                  $ref: '#/components/schemas/TreatmentConfigList'
                metricGoals:
                  $ref: '#/components/schemas/MetricGoalConfigList'
                randomizationSalt:
                  $ref: '#/components/schemas/RandomizationSalt'
                samplingRate:
                  $ref: '#/components/schemas/SplitWeight'
                onlineAbConfig:
                  $ref: '#/components/schemas/OnlineAbConfig'
                segment:
                  $ref: '#/components/schemas/SegmentRef'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListExperiments
      description: |-
        Returns configuration details about all the experiments in the specified project.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxExperiments'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ExperimentStatus'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/features:
    post:
      operationId: CreateFeature
      description: |-
        Creates an Evidently _feature_ that you want to launch or test. You can define up to five variations of a feature, and use these variations in your launches and experiments. A feature must be created in a project. For information about creating a project, see [CreateProject](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html).

        Don't use this operation to update an existing feature. Instead, use [UpdateFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateFeature.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/FeatureName'
                evaluationStrategy:
                  $ref: '#/components/schemas/FeatureEvaluationStrategy'
                description:
                  $ref: '#/components/schemas/Description'
                variations:
                  $ref: '#/components/schemas/VariationConfigsList'
                defaultVariation:
                  $ref: '#/components/schemas/VariationName'
                tags:
                  $ref: '#/components/schemas/TagMap'
                entityOverrides:
                  $ref: '#/components/schemas/EntityOverrideMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListFeatures
      description: |-
        Returns configuration details about all the features in the specified project.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxFeatures'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/launches:
    post:
      operationId: CreateLaunch
      description: |-
        Creates a _launch_ of a given feature. Before you create a launch, you must create the feature to use for the launch.

        You can use a launch to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to more users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.

        Don't use this operation to update an existing launch. Instead, use [UpdateLaunch](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateLaunch.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/LaunchName'
                description:
                  $ref: '#/components/schemas/Description'
                scheduledSplitsConfig:
                  $ref: '#/components/schemas/ScheduledSplitsLaunchConfig'
                metricMonitors:
                  $ref: '#/components/schemas/MetricMonitorConfigList'
                groups:
                  $ref: '#/components/schemas/LaunchGroupConfigList'
                randomizationSalt:
                  $ref: '#/components/schemas/RandomizationSalt'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListLaunches
      description: |-
        Returns configuration details about all the launches in the specified project.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxLaunches'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/LaunchStatus'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects:
    post:
      operationId: CreateProject
      description: |-
        Creates a project, which is the logical object in Evidently that can contain features, launches, and experiments. Use projects to group similar features together.

        To update an existing project, use [UpdateProject](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProject.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ProjectName'
                description:
                  $ref: '#/components/schemas/Description'
                dataDelivery:
                  $ref: '#/components/schemas/ProjectDataDeliveryConfig'
                appConfigResource:
                  $ref: '#/components/schemas/ProjectAppConfigResourceConfig'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListProjects
      description: |-
        Returns configuration details about all the projects in the current Region in your account.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxProjects'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /segments:
    post:
      operationId: CreateSegment
      description: |-
        Use this operation to define a _segment_ of your audience. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age.

        Using a segment in an experiment limits that experiment to evaluate only the users who match the segment criteria. Using one or more segments in a launch allows you to define different traffic splits for the different audience segments.

        For more information about segment pattern syntax, see [ Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).

        The pattern that you define for a segment is matched against the value of `evaluationContext`, which is passed into Evidently in the [EvaluateFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html) operation, when Evidently assigns a feature variation to a user.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/SegmentName'
                pattern:
                  $ref: '#/components/schemas/SegmentPattern'
                description:
                  $ref: '#/components/schemas/Description'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListSegments
      description: |-
        Returns a list of audience segments that you have created in your account in this Region.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxSegments'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/experiments/{experiment}:
    delete:
      operationId: DeleteExperiment
      description: |-
        Deletes an Evidently experiment. The feature used for the experiment is not deleted.

        To stop an experiment without deleting it, use [StopExperiment](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopExperiment.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: experiment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ExperimentName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error while processing the request. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service was unavailable. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetExperiment
      description: |-
        Returns the details about one experiment. You must already know the experiment name. To retrieve a list of experiments in your account, use [ListExperiments](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListExperiments.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: experiment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ExperimentName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateExperiment
      description: |-
        Updates an Evidently experiment.

        Don't use this operation to update an experiment's tag. Instead, use [TagResource](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: experiment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ExperimentName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                treatments:
                  $ref: '#/components/schemas/TreatmentConfigList'
                metricGoals:
                  $ref: '#/components/schemas/MetricGoalConfigList'
                randomizationSalt:
                  $ref: '#/components/schemas/RandomizationSalt'
                samplingRate:
                  $ref: '#/components/schemas/SplitWeight'
                segment:
                  $ref: '#/components/schemas/SegmentRef'
                removeSegment:
                  $ref: '#/components/schemas/PrimitiveBoolean'
                onlineAbConfig:
                  $ref: '#/components/schemas/OnlineAbConfig'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/features/{feature}:
    delete:
      operationId: DeleteFeature
      description: |-
        Deletes an Evidently feature.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: feature
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FeatureName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetFeature
      description: |-
        Returns the details about one feature. You must already know the feature name. To retrieve a list of features in your account, use [ListFeatures](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListFeatures.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: feature
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FeatureName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateFeature
      description: |-
        Updates an existing feature.

        You can't use this operation to update the tags of an existing feature. Instead, use [TagResource](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: feature
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FeatureName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                evaluationStrategy:
                  $ref: '#/components/schemas/FeatureEvaluationStrategy'
                description:
                  $ref: '#/components/schemas/Description'
                addOrUpdateVariations:
                  $ref: '#/components/schemas/VariationConfigsList'
                removeVariations:
                  $ref: '#/components/schemas/VariationNameList'
                defaultVariation:
                  $ref: '#/components/schemas/VariationName'
                entityOverrides:
                  $ref: '#/components/schemas/EntityOverrideMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/launches/{launch}:
    delete:
      operationId: DeleteLaunch
      description: |-
        Deletes an Evidently launch. The feature used for the launch is not deleted.

        To stop a launch without deleting it, use [StopLaunch](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopLaunch.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: launch
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LaunchName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetLaunch
      description: |-
        Returns the details about one launch. You must already know the launch name. To retrieve a list of launches in your account, use [ListLaunches](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListLaunches.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: launch
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LaunchName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateLaunch
      description: |-
        Updates a launch of a given feature.

        Don't use this operation to update the tags of an existing launch. Instead, use [TagResource](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: launch
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LaunchName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                groups:
                  $ref: '#/components/schemas/LaunchGroupConfigList'
                metricMonitors:
                  $ref: '#/components/schemas/MetricMonitorConfigList'
                randomizationSalt:
                  $ref: '#/components/schemas/RandomizationSalt'
                scheduledSplitsConfig:
                  $ref: '#/components/schemas/ScheduledSplitsLaunchConfig'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}:
    delete:
      operationId: DeleteProject
      description: |-
        Deletes an Evidently project. Before you can delete a project, you must delete all the features that the project contains. To delete a feature, use [DeleteFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_DeleteFeature.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetProject
      description: |-
        Returns the details about one launch. You must already know the project name. To retrieve a list of projects in your account, use [ListProjects](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListProjects.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateProject
      description: |-
        Updates the description of an existing project.

        To create a new project, use [CreateProject](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html).

        Don't use this operation to update the data storage options of a project. Instead, use [UpdateProjectDataDelivery](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProjectDataDelivery.html).

        Don't use this operation to update the tags of a project. Instead, use [TagResource](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appConfigResource:
                  $ref: '#/components/schemas/ProjectAppConfigResourceConfig'
                description:
                  $ref: '#/components/schemas/Description'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /segments/{segment}:
    delete:
      operationId: DeleteSegment
      description: |-
        Deletes a segment. You can't delete a segment that is being used in a launch or experiment, even if that launch or experiment is not currently running.
      parameters:
      - name: segment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SegmentRef'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetSegment
      description: |-
        Returns information about the specified segment. Specify the segment you want to view by specifying its ARN.
      parameters:
      - name: segment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SegmentRef'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/evaluations/{feature}:
    post:
      operationId: EvaluateFeature
      description: |-
        This operation assigns a feature variation to one given user session. You pass in an `entityID` that represents the user. Evidently then checks the evaluation rules and assigns the variation.

        The first rules that are evaluated are the override rules. If the user's `entityID` matches an override rule, the user is served the variation specified by that rule.

        If there is a current launch with this feature that uses segment overrides, and if the user session's `evaluationContext` matches a segment rule defined in a segment override, the configuration in the segment overrides is used. For more information about segments, see [CreateSegment](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html) and [Use segments to focus your audience](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html).

        If there is a launch with no segment overrides, the user might be assigned to a variation in the launch. The chance of this depends on the percentage of users that are allocated to that launch. If the user is enrolled in the launch, the variation they are served depends on the allocation of the various feature variations used for the launch.

        If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might be assigned to a variation in the experiment. The chance of this depends on the percentage of users that are allocated to that experiment.

        If the experiment uses a segment, then only user sessions with `evaluationContext` values that match the segment rule are used in the experiment.

        If the user is enrolled in the experiment, the variation they are served depends on the allocation of the various feature variations used for the experiment.

        If the user is not assigned to a launch or experiment, they are served the default variation.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: feature
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FeatureName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  $ref: '#/components/schemas/EntityId'
                evaluationContext:
                  $ref: '#/components/schemas/JsonValue'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/experiments/{experiment}/results:
    post:
      operationId: GetExperimentResults
      description: |-
        Retrieves the results of a running or completed experiment. No results are available until there have been 100 events for each variation and at least 10 minutes have passed since the start of the experiment. To increase the statistical power, Evidently performs an additional offline p-value analysis at the end of the experiment. Offline p-value analysis can detect statistical significance in some cases where the anytime p-values used during the experiment do not find statistical significance.

        Experiment results are available up to 63 days after the start of the experiment. They are not available after that because of CloudWatch data retention policies.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: experiment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ExperimentName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startTime:
                  $ref: '#/components/schemas/Timestamp'
                endTime:
                  $ref: '#/components/schemas/Timestamp'
                metricNames:
                  $ref: '#/components/schemas/MetricNameList'
                treatmentNames:
                  $ref: '#/components/schemas/TreatmentNameList'
                baseStat:
                  $ref: '#/components/schemas/ExperimentBaseStat'
                resultStats:
                  $ref: '#/components/schemas/ExperimentResultRequestTypeList'
                reportNames:
                  $ref: '#/components/schemas/ExperimentReportNameList'
                period:
                  $ref: '#/components/schemas/ResultsPeriod'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /segments/{segment}/references:
    get:
      operationId: ListSegmentReferences
      description: |-
        Use this operation to find which experiments or launches are using a specified segment.
      parameters:
      - name: segment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SegmentRef'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxReferences'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: type
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/SegmentReferenceResourceType'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Displays the tags associated with an Evidently resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      responses:
        '200': {}
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Assigns one or more tags (key-value pairs) to the specified CloudWatch Evidently resource. Projects, features, launches, and experiments can be tagged.

        Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.

        Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.

        You can use the `TagResource` action with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.

        You can associate as many as 50 tags with a resource.

        For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes one or more tags from the specified resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Arn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /events/projects/{project}:
    post:
      operationId: PutProjectEvents
      description: |-
        Sends performance events to Evidently. These events can be used to evaluate a launch or an experiment.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                events:
                  $ref: '#/components/schemas/EventList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/experiments/{experiment}/start:
    post:
      operationId: StartExperiment
      description: |-
        Starts an existing experiment. To create an experiment, use [CreateExperiment](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateExperiment.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: experiment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ExperimentName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                analysisCompleteTime:
                  $ref: '#/components/schemas/Timestamp'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/launches/{launch}/start:
    post:
      operationId: StartLaunch
      description: |-
        Starts an existing launch. To create a launch, use [CreateLaunch](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateLaunch.html).
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: launch
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LaunchName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/experiments/{experiment}/cancel:
    post:
      operationId: StopExperiment
      description: |-
        Stops an experiment that is currently running. If you stop an experiment, you can't resume it or restart it.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: experiment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ExperimentName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                desiredState:
                  $ref: '#/components/schemas/ExperimentStopDesiredState'
                reason:
                  $ref: '#/components/schemas/Description'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/launches/{launch}/cancel:
    post:
      operationId: StopLaunch
      description: |-
        Stops a launch that is currently running. After you stop a launch, you will not be able to resume it or restart it. Also, it will not be evaluated as a rule for traffic allocation, and the traffic that was allocated to the launch will instead be available to the feature's experiment, if there is one. Otherwise, all traffic will be served the default variation after the launch is stopped.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      - name: launch
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LaunchName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                desiredState:
                  $ref: '#/components/schemas/LaunchStopDesiredState'
                reason:
                  $ref: '#/components/schemas/Description'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /test-segment-pattern:
    post:
      operationId: TestSegmentPattern
      description: |-
        Use this operation to test a rules pattern that you plan to use to create an audience segment. For more information about segments, see [CreateSegment](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pattern:
                  $ref: '#/components/schemas/SegmentPattern'
                payload:
                  $ref: '#/components/schemas/JsonValue'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '429':
          description: |-
            The request was denied because of request throttling. Retry the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /projects/{project}/data-delivery:
    patch:
      operationId: UpdateProjectDataDelivery
      description: |-
        Updates the data storage options for this project. If you store evaluation events, you an keep them and analyze them on your own. If you choose not to store evaluation events, Evidently deletes them after using them to produce metrics and other experiment results that you can view.

        You can't specify both `cloudWatchLogs` and `s3Destination` in the same operation.
      parameters:
      - name: project
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                s3Destination:
                  $ref: '#/components/schemas/S3DestinationConfig'
                cloudWatchLogs:
                  $ref: '#/components/schemas/CloudWatchLogsDestinationConfig'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient permissions to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A resource was in an inconsistent state during an update or a deletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The request references a resource that does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '400':
          description: |-
            The value of a parameter in the request caused an error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: You do not have sufficient permissions to perform this action.
    AppConfigResourceId:
      type: string
      pattern: '[a-z0-9]{4,7}'
    Arn:
      type: string
      pattern: arn:[^:]*:[^:]*:[^:]*:[^:]*:.*
      minLength: 0
      maxLength: 2048
    BatchEvaluateFeatureRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the feature being
            evaluated.
        requests:
          allOf:
          - $ref: '#/components/schemas/EvaluationRequestsList'
          description: An array of structures, where each structure assigns a feature
            variation to one user session.
      required:
      - project
      - requests
    BatchEvaluateFeatureResponse:
      type: object
      properties:
        results:
          allOf:
          - $ref: '#/components/schemas/EvaluationResultsList'
          description: An array of structures, where each structure displays the results
            of one feature evaluation assignment to one user session.
    ChangeDirectionEnum:
      type: string
      enum:
      - INCREASE
      - DECREASE
    CloudWatchLogsDestination:
      type: object
      properties:
        logGroup:
          allOf:
          - $ref: '#/components/schemas/CwLogGroupSafeName'
          description: The name of the log group where the project stores evaluation
            events.
      description: A structure containing the CloudWatch Logs log group where the
        project stores evaluation events.
    CloudWatchLogsDestinationConfig:
      type: object
      properties:
        logGroup:
          allOf:
          - $ref: '#/components/schemas/CwLogGroupSafeName'
          description: The name of the log group where the project stores evaluation
            events.
      description: A structure containing the CloudWatch Logs log group where the
        project stores evaluation events.
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the resource that caused the exception.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the resource that is associated with the error.
      description: A resource was in an inconsistent state during an update or a deletion.
    CreateExperimentRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that you want to create the
            new experiment in.
        name:
          allOf:
          - $ref: '#/components/schemas/ExperimentName'
          description: A name for the new experiment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: An optional description of the experiment.
        treatments:
          allOf:
          - $ref: '#/components/schemas/TreatmentConfigList'
          description: An array of structures that describe the configuration of each
            feature variation used in the experiment.
        metricGoals:
          allOf:
          - $ref: '#/components/schemas/MetricGoalConfigList'
          description: An array of structures that defines the metrics used for the
            experiment, and whether a higher or lower value for each metric is the
            goal.
        randomizationSalt:
          allOf:
          - $ref: '#/components/schemas/RandomizationSalt'
          description: When Evidently assigns a particular user session to an experiment,
            it must use a randomization ID to determine which variation the user session
            is served. This randomization ID is a combination of the entity ID and
            `randomizationSalt`. If you omit `randomizationSalt`, Evidently uses the
            experiment name as the `randomizationSalt`.
        samplingRate:
          allOf:
          - $ref: '#/components/schemas/SplitWeight'
          description: 'The portion of the available audience that you want to allocate
            to this experiment, in thousandths of a percent. The available audience
            is the total audience minus the audience that you have allocated to overrides
            or current launches of this feature.


            This is represented in thousandths of a percent. For example, specify
            10,000 to allocate 10% of the available audience.'
        onlineAbConfig:
          allOf:
          - $ref: '#/components/schemas/OnlineAbConfig'
          description: A structure that contains the configuration of which variation
            to use as the "control" version. tThe "control" version is used for comparison
            with other variations. This structure also specifies how much experiment
            traffic is allocated to each variation.
        segment:
          allOf:
          - $ref: '#/components/schemas/SegmentRef'
          description: Specifies an audience _segment_ to use in the experiment. When
            a segment is used in an experiment, only user sessions that match the
            segment pattern are used in the experiment.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: 'Assigns one or more tags (key-value pairs) to the experiment.


            Tags can help you organize and categorize your resources. You can also
            use them to scope user permissions by granting a user permission to access
            or change only resources with certain tag values.


            Tags don''t have any semantic meaning to Amazon Web Services and are interpreted
            strictly as strings of characters.


            You can associate as many as 50 tags with an experiment.


            For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).'
      required:
      - project
      - name
      - treatments
      - metricGoals
    CreateExperimentResponse:
      type: object
      properties:
        experiment:
          allOf:
          - $ref: '#/components/schemas/Experiment'
          description: A structure containing the configuration details of the experiment
            that you created.
      required:
      - experiment
    CreateFeatureRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that is to contain the new feature.
        name:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The name for the new feature.
        evaluationStrategy:
          allOf:
          - $ref: '#/components/schemas/FeatureEvaluationStrategy'
          description: Specify `ALL_RULES` to activate the traffic allocation specified
            by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to
            serve the default variation to all users instead.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: An optional description of the feature.
        variations:
          allOf:
          - $ref: '#/components/schemas/VariationConfigsList'
          description: An array of structures that contain the configuration of the
            feature's different variations.
        defaultVariation:
          allOf:
          - $ref: '#/components/schemas/VariationName'
          description: 'The name of the variation to use as the default variation.
            The default variation is served to users who are not allocated to any
            ongoing launches or experiments of this feature.


            This variation must also be listed in the `variations` structure.


            If you omit `defaultVariation`, the first variation listed in the `variations`
            structure is used as the default variation.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: 'Assigns one or more tags (key-value pairs) to the feature.


            Tags can help you organize and categorize your resources. You can also
            use them to scope user permissions by granting a user permission to access
            or change only resources with certain tag values.


            Tags don''t have any semantic meaning to Amazon Web Services and are interpreted
            strictly as strings of characters.


            You can associate as many as 50 tags with a feature.


            For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).'
        entityOverrides:
          allOf:
          - $ref: '#/components/schemas/EntityOverrideMap'
          description: 'Specify users that should always be served a specific variation
            of a feature. Each user is specified by a key-value pair . For each key,
            specify a user by entering their user ID, account ID, or some other identifier.
            For the value, specify the name of the variation that they are to be served.


            This parameter is limited to 2500 overrides or a total of 40KB. The 40KB
            limit includes an overhead of 6 bytes per override.'
      required:
      - project
      - name
      - variations
    CreateFeatureResponse:
      type: object
      properties:
        feature:
          allOf:
          - $ref: '#/components/schemas/Feature'
          description: A structure that contains information about the new feature.
    CreateLaunchRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that you want to create the
            launch in.
        name:
          allOf:
          - $ref: '#/components/schemas/LaunchName'
          description: The name for the new launch.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: An optional description for the launch.
        scheduledSplitsConfig:
          allOf:
          - $ref: '#/components/schemas/ScheduledSplitsLaunchConfig'
          description: An array of structures that define the traffic allocation percentages
            among the feature variations during each step of the launch.
        metricMonitors:
          allOf:
          - $ref: '#/components/schemas/MetricMonitorConfigList'
          description: An array of structures that define the metrics that will be
            used to monitor the launch performance.
        groups:
          allOf:
          - $ref: '#/components/schemas/LaunchGroupConfigList'
          description: An array of structures that contains the feature and variations
            that are to be used for the launch.
        randomizationSalt:
          allOf:
          - $ref: '#/components/schemas/RandomizationSalt'
          description: When Evidently assigns a particular user session to a launch,
            it must use a randomization ID to determine which variation the user session
            is served. This randomization ID is a combination of the entity ID and
            `randomizationSalt`. If you omit `randomizationSalt`, Evidently uses the
            launch name as the `randomizationSalt`.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: 'Assigns one or more tags (key-value pairs) to the launch.


            Tags can help you organize and categorize your resources. You can also
            use them to scope user permissions by granting a user permission to access
            or change only resources with certain tag values.


            Tags don''t have any semantic meaning to Amazon Web Services and are interpreted
            strictly as strings of characters.


            You can associate as many as 50 tags with a launch.


            For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).'
      required:
      - project
      - name
      - groups
    CreateLaunchResponse:
      type: object
      properties:
        launch:
          allOf:
          - $ref: '#/components/schemas/Launch'
          description: A structure that contains the configuration of the launch that
            was created.
      required:
      - launch
    CreateProjectRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name for the project.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: An optional description of the project.
        dataDelivery:
          allOf:
          - $ref: '#/components/schemas/ProjectDataDeliveryConfig'
          description: A structure that contains information about where Evidently
            is to store evaluation events for longer term storage, if you choose to
            do so. If you choose not to store these events, Evidently deletes them
            after using them to produce metrics and other experiment results that
            you can view.
        appConfigResource:
          allOf:
          - $ref: '#/components/schemas/ProjectAppConfigResourceConfig'
          description: 'Use this parameter if the project will use _client-side evaluation
            powered by AppConfig_. Client-side evaluation allows your application
            to assign variations to user sessions locally instead of by calling the
            [EvaluateFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html)
            operation. This mitigates the latency and availability risks that come
            with an API call. For more information, see [ Client-side evaluation -
            powered by AppConfig.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-client-side-evaluation.html)


            This parameter is a structure that contains information about the AppConfig
            application and environment that will be used as for client-side evaluation.


            To create a project that uses client-side evaluation, you must have the
            `evidently:ExportProjectAsConfiguration` permission.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: 'Assigns one or more tags (key-value pairs) to the project.


            Tags can help you organize and categorize your resources. You can also
            use them to scope user permissions by granting a user permission to access
            or change only resources with certain tag values.


            Tags don''t have any semantic meaning to Amazon Web Services and are interpreted
            strictly as strings of characters.


            You can associate as many as 50 tags with a project.


            For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).'
      required:
      - name
    CreateProjectResponse:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/Project'
          description: A structure that contains information about the created project.
      required:
      - project
    CreateSegmentRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SegmentName'
          description: A name for the segment.
        pattern:
          allOf:
          - $ref: '#/components/schemas/SegmentPattern'
          description: The pattern to use for the segment. For more information about
            pattern syntax, see [ Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: An optional description for this segment.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: 'Assigns one or more tags (key-value pairs) to the segment.


            Tags can help you organize and categorize your resources. You can also
            use them to scope user permissions by granting a user permission to access
            or change only resources with certain tag values.


            Tags don''t have any semantic meaning to Amazon Web Services and are interpreted
            strictly as strings of characters.


            You can associate as many as 50 tags with a segment.


            For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).'
      required:
      - name
      - pattern
    CreateSegmentResponse:
      type: object
      properties:
        segment:
          allOf:
          - $ref: '#/components/schemas/Segment'
          description: A structure that contains the complete information about the
            segment that was just created.
      required:
      - segment
    CwDimensionSafeName:
      type: string
      pattern: ^[\S]+$
      minLength: 1
      maxLength: 255
    CwLogGroupSafeName:
      type: string
      pattern: ^[-a-zA-Z0-9._/]+$
      minLength: 1
      maxLength: 512
    DeleteExperimentRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the experiment
            to delete.
        experiment:
          allOf:
          - $ref: '#/components/schemas/ExperimentName'
          description: The name of the experiment to delete.
      required:
      - project
      - experiment
    DeleteExperimentResponse:
      type: object
      properties: {}
    DeleteFeatureRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the feature to
            delete.
        feature:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The name of the feature to delete.
      required:
      - project
      - feature
    DeleteFeatureResponse:
      type: object
      properties: {}
    DeleteLaunchRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the launch to
            delete.
        launch:
          allOf:
          - $ref: '#/components/schemas/LaunchName'
          description: The name of the launch to delete.
      required:
      - project
      - launch
    DeleteLaunchResponse:
      type: object
      properties: {}
    DeleteProjectRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project to delete.
      required:
      - project
    DeleteProjectResponse:
      type: object
      properties: {}
    DeleteSegmentRequest:
      type: object
      properties:
        segment:
          allOf:
          - $ref: '#/components/schemas/SegmentRef'
          description: Specifies the segment to delete.
      required:
      - segment
    DeleteSegmentResponse:
      type: object
      properties: {}
    Description:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 160
    DoubleValueList:
      type: array
      items:
        type: number
    EntityId:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 512
    EntityOverrideMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/VariationName'
    ErrorCodeEnum:
      type: string
      minLength: 1
      maxLength: 64
    ErrorMessage:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 1024
    EvaluateFeatureRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains this feature.
        feature:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The name of the feature being evaluated.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: An internal ID that represents a unique user of the application.
            This `entityID` is checked against any override rules assigned for this
            feature.
        evaluationContext:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: 'A JSON object of attributes that you can optionally pass in
            as part of the evaluation event sent to Evidently from the user session.
            Evidently can use this value to match user sessions with defined audience
            segments. For more information, see [Use segments to focus your audience](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html).


            If you include this parameter, the value must be a JSON object. A JSON
            array is not supported.'
      required:
      - project
      - feature
      - entityId
    EvaluateFeatureResponse:
      type: object
      properties:
        variation:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the variation that was served to the user session.
        value:
          allOf:
          - $ref: '#/components/schemas/VariableValue'
          description: The value assigned to this variation to differentiate it from
            the other variations of this feature.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the reason that the user session was assigned this
            variation. Possible values include `DEFAULT`, meaning the user was served
            the default variation; `LAUNCH_RULE_MATCH`, if the user session was enrolled
            in a launch; `EXPERIMENT_RULE_MATCH`, if the user session was enrolled
            in an experiment; or `ENTITY_OVERRIDES_MATCH`, if the user's `entityId`
            matches an override rule.
        details:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: If this user was assigned to a launch or experiment, this field
            lists the launch or experiment name.
    EvaluationRequest:
      type: object
      properties:
        feature:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The name of the feature being evaluated.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: An internal ID that represents a unique user session of the
            application. This `entityID` is checked against any override rules assigned
            for this feature.
        evaluationContext:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: A JSON block of attributes that you can optionally pass in.
            This JSON block is included in the evaluation events sent to Evidently
            from the user session.
      required:
      - feature
      - entityId
      description: This structure assigns a feature variation to one user session.
    EvaluationRequestsList:
      type: array
      items:
        $ref: '#/components/schemas/EvaluationRequest'
    EvaluationResult:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The name or ARN of the project that contains the feature being
            evaluated.
        feature:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The name of the feature being evaluated.
        variation:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the variation that was served to the user session.
        value:
          allOf:
          - $ref: '#/components/schemas/VariableValue'
          description: The value assigned to this variation to differentiate it from
            the other variations of this feature.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: An internal ID that represents a unique user session of the
            application.
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the reason that the user session was assigned this
            variation. Possible values include `DEFAULT`, meaning the user was served
            the default variation; `LAUNCH_RULE_MATCH`, if the user session was enrolled
            in a launch; or `EXPERIMENT_RULE_MATCH`, if the user session was enrolled
            in an experiment.
        details:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: If this user was assigned to a launch or experiment, this field
            lists the launch or experiment name.
      required:
      - feature
      - entityId
      description: This structure displays the results of one feature evaluation assignment
        to one user session.
    EvaluationResultsList:
      type: array
      items:
        $ref: '#/components/schemas/EvaluationResult'
    EvaluationRule:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RuleName'
          description: The name of the experiment or launch.
        type:
          allOf:
          - $ref: '#/components/schemas/RuleType'
          description: This value is `aws.evidently.splits` if this is an evaluation
            rule for a launch, and it is `aws.evidently.onlineab` if this is an evaluation
            rule for an experiment.
      required:
      - type
      description: A structure that contains the information about an evaluation rule
        for this feature, if it is used in a launch or experiment.
    EvaluationRulesList:
      type: array
      items:
        $ref: '#/components/schemas/EvaluationRule'
    Event:
      type: object
      properties:
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of the event.
        type:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: '`aws.evidently.evaluation` specifies an evaluation event,
            which determines which feature variation that a user sees. `aws.evidently.custom`
            specifies a custom event, which generates metrics from user actions such
            as clicks and checkouts.'
        data:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: The event data.
      required:
      - timestamp
      - type
      - data
      description: A structure that contains the information about one evaluation
        event or custom event sent to Evidently. This is a JSON payload. If this event
        specifies a pre-defined event type, the payload must follow the defined event
        schema.
    EventList:
      type: array
      items:
        $ref: '#/components/schemas/Event'
    EventType:
      type: string
      enum:
      - aws.evidently.evaluation
      - aws.evidently.custom
    Experiment:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ExperimentArn'
          description: The ARN of the experiment.
        name:
          allOf:
          - $ref: '#/components/schemas/ExperimentName'
          description: The name of the experiment.
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectArn'
          description: The name or ARN of the project that contains this experiment.
        status:
          allOf:
          - $ref: '#/components/schemas/ExperimentStatus'
          description: The current state of the experiment.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: If the experiment was stopped, this is the string that was
            entered by the person who stopped the experiment, to explain why it was
            stopped.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the experiment.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the experiment is first created.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the experiment was most recently updated.
        schedule:
          allOf:
          - $ref: '#/components/schemas/ExperimentSchedule'
          description: A structure that contains the time and date that Evidently
            completed the analysis of the experiment.
        execution:
          allOf:
          - $ref: '#/components/schemas/ExperimentExecution'
          description: A structure that contains the date and time that the experiment
            started and ended.
        treatments:
          allOf:
          - $ref: '#/components/schemas/TreatmentList'
          description: An array of structures that describe the configuration of each
            feature variation used in the experiment.
        metricGoals:
          allOf:
          - $ref: '#/components/schemas/MetricGoalsList'
          description: An array of structures that defines the metrics used for the
            experiment, and whether a higher or lower value for each metric is the
            goal.
        randomizationSalt:
          allOf:
          - $ref: '#/components/schemas/RandomizationSalt'
          description: This value is used when Evidently assigns a particular user
            session to the experiment. It helps create a randomization ID to determine
            which variation the user session is served. This randomization ID is a
            combination of the entity ID and `randomizationSalt`.
        samplingRate:
          allOf:
          - $ref: '#/components/schemas/SplitWeight'
          description: 'In thousandths of a percent, the amount of the available audience
            that is allocated to this experiment. The available audience is the total
            audience minus the audience that you have allocated to overrides or current
            launches of this feature.


            This is represented in thousandths of a percent, so a value of 10,000
            is 10% of the available audience.'
        segment:
          allOf:
          - $ref: '#/components/schemas/SegmentArn'
          description: The audience segment being used for the experiment, if a segment
            is being used.
        type:
          allOf:
          - $ref: '#/components/schemas/ExperimentType'
          description: The type of this experiment. Currently, this value must be
            `aws.experiment.onlineab`.
        onlineAbDefinition:
          allOf:
          - $ref: '#/components/schemas/OnlineAbDefinition'
          description: A structure that contains the configuration of which variation
            to use as the "control" version. The "control" version is used for comparison
            with other variations. This structure also specifies how much experiment
            traffic is allocated to each variation.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values associated with this experiment.
      required:
      - arn
      - name
      - status
      - createdTime
      - lastUpdatedTime
      - type
      description: A structure containing the configuration details of an experiment.
    ExperimentArn:
      type: string
      pattern: arn:[^:]*:[^:]*:[^:]*:[^:]*:project/[-a-zA-Z0-9._]*/experiment/[-a-zA-Z0-9._]*
      minLength: 0
      maxLength: 2048
    ExperimentBaseStat:
      type: string
      enum:
      - Mean
    ExperimentExecution:
      type: object
      properties:
        startedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the experiment started.
        endedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the experiment ended.
      description: This structure contains the date and time that the experiment started
        and ended.
    ExperimentList:
      type: array
      items:
        $ref: '#/components/schemas/Experiment'
    ExperimentName:
      type: string
      pattern: ^[-a-zA-Z0-9._]*$
      minLength: 1
      maxLength: 127
    ExperimentReport:
      type: object
      properties:
        metricName:
          allOf:
          - $ref: '#/components/schemas/CwDimensionSafeName'
          description: The name of the metric that is analyzed in this experiment
            report.
        treatmentName:
          allOf:
          - $ref: '#/components/schemas/TreatmentName'
          description: The name of the variation that this report pertains to.
        reportName:
          allOf:
          - $ref: '#/components/schemas/ExperimentReportName'
          description: The type of analysis used for this report.
        content:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: The content of the report.
      description: A structure that contains results of an experiment.
    ExperimentReportList:
      type: array
      items:
        $ref: '#/components/schemas/ExperimentReport'
    ExperimentReportName:
      type: string
      enum:
      - BayesianInference
    ExperimentReportNameList:
      type: array
      items:
        $ref: '#/components/schemas/ExperimentReportName'
    ExperimentResultRequestType:
      type: string
      enum:
      - BaseStat
      - TreatmentEffect
      - ConfidenceInterval
      - PValue
    ExperimentResultRequestTypeList:
      type: array
      items:
        $ref: '#/components/schemas/ExperimentResultRequestType'
    ExperimentResultResponseType:
      type: string
      enum:
      - Mean
      - TreatmentEffect
      - ConfidenceIntervalUpperBound
      - ConfidenceIntervalLowerBound
      - PValue
    ExperimentResultsData:
      type: object
      properties:
        metricName:
          allOf:
          - $ref: '#/components/schemas/CwDimensionSafeName'
          description: The name of the metric.
        treatmentName:
          allOf:
          - $ref: '#/components/schemas/TreatmentName'
          description: The treatment, or variation, that returned the `values` in
            this structure.
        resultStat:
          allOf:
          - $ref: '#/components/schemas/ExperimentResultResponseType'
          description: The experiment statistic that these results pertain to.
        values:
          allOf:
          - $ref: '#/components/schemas/DoubleValueList'
          description: The values for the `metricName` that were recorded in the experiment.
      description: A structure that contains experiment results for one metric that
        is monitored in the experiment.
    ExperimentResultsDataList:
      type: array
      items:
        $ref: '#/components/schemas/ExperimentResultsData'
    ExperimentSchedule:
      type: object
      properties:
        analysisCompleteTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time and date that Evidently completed the analysis of
            the experiment.
      description: This structure contains the time and date that Evidently completed
        the analysis of the experiment.
    ExperimentStatus:
      type: string
      enum:
      - CREATED
      - UPDATING
      - RUNNING
      - COMPLETED
      - CANCELLED
    ExperimentStopDesiredState:
      type: string
      enum:
      - COMPLETED
      - CANCELLED
    ExperimentType:
      type: string
      enum:
      - aws.evidently.onlineab
    Feature:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/FeatureArn'
          description: The ARN of the feature.
        name:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The name of the feature.
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectArn'
          description: The name or ARN of the project that contains the feature.
        status:
          allOf:
          - $ref: '#/components/schemas/FeatureStatus'
          description: The current state of the feature.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the feature is created.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the feature was most recently updated.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the feature.
        evaluationStrategy:
          allOf:
          - $ref: '#/components/schemas/FeatureEvaluationStrategy'
          description: If this value is `ALL_RULES`, the traffic allocation specified
            by any ongoing launches or experiments is being used. If this is `DEFAULT_VARIATION`,
            the default variation is being served to all users.
        valueType:
          allOf:
          - $ref: '#/components/schemas/VariationValueType'
          description: Defines the type of value used to define the different feature
            variations. For more information, see [Variation types](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-variationtypes.html)
        variations:
          allOf:
          - $ref: '#/components/schemas/VariationsList'
          description: An array of structures that contain the configuration of the
            feature's different variations.
        defaultVariation:
          allOf:
          - $ref: '#/components/schemas/VariationName'
          description: 'The name of the variation that is used as the default variation.
            The default variation is served to users who are not allocated to any
            ongoing launches or experiments of this feature.


            This variation must also be listed in the `variations` structure.


            If you omit `defaultVariation`, the first variation listed in the `variations`
            structure is used as the default variation.'
        evaluationRules:
          allOf:
          - $ref: '#/components/schemas/EvaluationRulesList'
          description: An array of structures that define the evaluation rules for
            the feature.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values associated with this feature.
        entityOverrides:
          allOf:
          - $ref: '#/components/schemas/EntityOverrideMap'
          description: 'A set of key-value pairs that specify users who should always
            be served a specific variation of a feature. Each key specifies a user
            using their user ID, account ID, or some other identifier. The value specifies
            the name of the variation that the user is to be served.


            For the override to be successful, the value of the key must match the
            `entityId` used in the [EvaluateFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html)
            operation.'
      required:
      - arn
      - name
      - status
      - createdTime
      - lastUpdatedTime
      - evaluationStrategy
      - valueType
      - variations
      description: This structure contains information about one Evidently feature
        in your account.
    FeatureArn:
      type: string
      pattern: arn:[^:]*:[^:]*:[^:]*:[^:]*:project/[-a-zA-Z0-9._]*/feature/[-a-zA-Z0-9._]*
      minLength: 0
      maxLength: 2048
    FeatureEvaluationStrategy:
      type: string
      enum:
      - ALL_RULES
      - DEFAULT_VARIATION
    FeatureName:
      type: string
      pattern: ^[-a-zA-Z0-9._]*$
      minLength: 1
      maxLength: 127
    FeatureStatus:
      type: string
      enum:
      - AVAILABLE
      - UPDATING
    FeatureSummariesList:
      type: array
      items:
        $ref: '#/components/schemas/FeatureSummary'
    FeatureSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the feature.
        name:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The name of the feature.
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the feature.
        status:
          allOf:
          - $ref: '#/components/schemas/FeatureStatus'
          description: The current state of the feature.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the feature is created.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the feature was most recently updated.
        evaluationStrategy:
          allOf:
          - $ref: '#/components/schemas/FeatureEvaluationStrategy'
          description: If this value is `ALL_RULES`, the traffic allocation specified
            by any ongoing launches or experiments is being used. If this is `DEFAULT_VARIATION`,
            the default variation is being served to all users.
        evaluationRules:
          allOf:
          - $ref: '#/components/schemas/EvaluationRulesList'
          description: An array of structures that define
        defaultVariation:
          allOf:
          - $ref: '#/components/schemas/VariationName'
          description: The name of the variation that is used as the default variation.
            The default variation is served to users who are not allocated to any
            ongoing launches or experiments of this feature.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values associated with this feature.
      required:
      - arn
      - name
      - status
      - createdTime
      - lastUpdatedTime
      - evaluationStrategy
      description: This structure contains information about one Evidently feature
        in your account.
    FeatureToVariationMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/VariationName'
    GetExperimentRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the experiment.
        experiment:
          allOf:
          - $ref: '#/components/schemas/ExperimentName'
          description: The name of the experiment that you want to see the details
            of.
      required:
      - project
      - experiment
    GetExperimentResponse:
      type: object
      properties:
        experiment:
          allOf:
          - $ref: '#/components/schemas/Experiment'
          description: A structure containing the configuration details of the experiment.
    GetExperimentResultsRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the experiment
            that you want to see the results of.
        experiment:
          allOf:
          - $ref: '#/components/schemas/ExperimentName'
          description: The name of the experiment to retrieve the results of.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the experiment started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the experiment ended, if it is completed.
            This must be no longer than 30 days after the experiment start time.
        metricNames:
          allOf:
          - $ref: '#/components/schemas/MetricNameList'
          description: The names of the experiment metrics that you want to see the
            results of.
        treatmentNames:
          allOf:
          - $ref: '#/components/schemas/TreatmentNameList'
          description: The names of the experiment treatments that you want to see
            the results for.
        baseStat:
          allOf:
          - $ref: '#/components/schemas/ExperimentBaseStat'
          description: The statistic used to calculate experiment results. Currently
            the only valid value is `mean`, which uses the mean of the collected values
            as the statistic.
        resultStats:
          allOf:
          - $ref: '#/components/schemas/ExperimentResultRequestTypeList'
          description: "The statistics that you want to see in the returned results.\n\
            \n  * `PValue` specifies to use p-values for the results. A p-value is\
            \ used in hypothesis testing to measure how often you are willing to make\
            \ a mistake in rejecting the null hypothesis. A general practice is to\
            \ reject the null hypothesis and declare that the results are statistically\
            \ significant when the p-value is less than 0.05.\n\n  * `ConfidenceInterval`\
            \ specifies a confidence interval for the results. The confidence interval\
            \ represents the range of values for the chosen metric that is likely\
            \ to contain the true difference between the `baseStat` of a variation\
            \ and the baseline. Evidently returns the 95% confidence interval. \n\n\
            \  * `TreatmentEffect` is the difference in the statistic specified by\
            \ the `baseStat` parameter between each variation and the default variation.\
            \ \n\n  * `BaseStat` returns the statistical values collected for the\
            \ metric for each variation. The statistic uses the same statistic specified\
            \ in the `baseStat` parameter. Therefore, if `baseStat` is `mean`, this\
            \ returns the mean of the values collected for each variation."
        reportNames:
          allOf:
          - $ref: '#/components/schemas/ExperimentReportNameList'
          description: The names of the report types that you want to see. Currently,
            `BayesianInference` is the only valid value.
        period:
          allOf:
          - $ref: '#/components/schemas/ResultsPeriod'
          description: In seconds, the amount of time to aggregate results together.
      required:
      - project
      - experiment
      - metricNames
      - treatmentNames
    GetExperimentResultsResponse:
      type: object
      properties:
        resultsData:
          allOf:
          - $ref: '#/components/schemas/ExperimentResultsDataList'
          description: An array of structures that include experiment results including
            metric names and values.
        reports:
          allOf:
          - $ref: '#/components/schemas/ExperimentReportList'
          description: An array of structures that include the reports that you requested.
        timestamps:
          allOf:
          - $ref: '#/components/schemas/TimestampList'
          description: The timestamps of each result returned.
        details:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If the experiment doesn't yet have enough events to provide
            valid results, this field is returned with the message `Not enough events
            to generate results`. If there are enough events to provide valid results,
            this field is not returned.
    GetFeatureRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the feature.
        feature:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The name of the feature that you want to retrieve information
            for.
      required:
      - project
      - feature
    GetFeatureResponse:
      type: object
      properties:
        feature:
          allOf:
          - $ref: '#/components/schemas/Feature'
          description: A structure containing the configuration details of the feature.
      required:
      - feature
    GetLaunchRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the launch.
        launch:
          allOf:
          - $ref: '#/components/schemas/LaunchName'
          description: The name of the launch that you want to see the details of.
      required:
      - project
      - launch
    GetLaunchResponse:
      type: object
      properties:
        launch:
          allOf:
          - $ref: '#/components/schemas/Launch'
          description: A structure containing the configuration details of the launch.
    GetProjectRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that you want to see the details
            of.
      required:
      - project
    GetProjectResponse:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/Project'
          description: A structure containing the configuration details of the project.
      required:
      - project
    GetSegmentRequest:
      type: object
      properties:
        segment:
          allOf:
          - $ref: '#/components/schemas/SegmentRef'
          description: The ARN of the segment to return information for.
      required:
      - segment
    GetSegmentResponse:
      type: object
      properties:
        segment:
          allOf:
          - $ref: '#/components/schemas/Segment'
          description: A structure that contains the complete information about the
            segment.
      required:
      - segment
    GroupName:
      type: string
      pattern: ^[-a-zA-Z0-9._]*$
      minLength: 1
      maxLength: 127
    GroupToWeightMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SplitWeight'
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Unexpected error while processing the request. Retry the request.
    JsonPath:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 256
    JsonValue:
      type: string
    Launch:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LaunchArn'
          description: The ARN of the launch.
        name:
          allOf:
          - $ref: '#/components/schemas/LaunchName'
          description: The name of the launch.
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the launch.
        status:
          allOf:
          - $ref: '#/components/schemas/LaunchStatus'
          description: The current state of the launch.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: If the launch was stopped, this is the string that was entered
            by the person who stopped the launch, to explain why it was stopped.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the launch.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the launch is created.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the launch was most recently updated.
        execution:
          allOf:
          - $ref: '#/components/schemas/LaunchExecution'
          description: A structure that contains information about the start and end
            times of the launch.
        groups:
          allOf:
          - $ref: '#/components/schemas/LaunchGroupList'
          description: An array of structures that define the feature variations that
            are being used in the launch.
        metricMonitors:
          allOf:
          - $ref: '#/components/schemas/MetricMonitorList'
          description: An array of structures that define the metrics that are being
            used to monitor the launch performance.
        randomizationSalt:
          allOf:
          - $ref: '#/components/schemas/RandomizationSalt'
          description: This value is used when Evidently assigns a particular user
            session to the launch, to help create a randomization ID to determine
            which variation the user session is served. This randomization ID is a
            combination of the entity ID and `randomizationSalt`.
        type:
          allOf:
          - $ref: '#/components/schemas/LaunchType'
          description: The type of launch.
        scheduledSplitsDefinition:
          allOf:
          - $ref: '#/components/schemas/ScheduledSplitsLaunchDefinition'
          description: An array of structures that define the traffic allocation percentages
            among the feature variations during each step of the launch.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values associated with this launch.
      required:
      - arn
      - name
      - status
      - createdTime
      - lastUpdatedTime
      - type
      description: This structure contains the configuration details of one Evidently
        launch.
    LaunchArn:
      type: string
      pattern: arn:[^:]*:[^:]*:[^:]*:[^:]*:project/[-a-zA-Z0-9._]*/launch/[-a-zA-Z0-9._]*
      minLength: 0
      maxLength: 2048
    LaunchExecution:
      type: object
      properties:
        startedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the launch started.
        endedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the launch ended.
      description: This structure contains information about the start and end times
        of the launch.
    LaunchGroup:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/GroupName'
          description: The name of the launch group.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the launch group.
        featureVariations:
          allOf:
          - $ref: '#/components/schemas/FeatureToVariationMap'
          description: The feature variation for this launch group. This is a key-value
            pair.
      required:
      - name
      - featureVariations
      description: A structure that defines one launch group in a launch. A launch
        group is a variation of the feature that you are including in the launch.
    LaunchGroupConfig:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/GroupName'
          description: A name for this launch group.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the launch group.
        feature:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The feature that this launch is using.
        variation:
          allOf:
          - $ref: '#/components/schemas/VariationName'
          description: The feature variation to use for this launch group.
      required:
      - name
      - feature
      - variation
      description: A structure that defines one launch group in a launch. A launch
        group is a variation of the feature that you are including in the launch.
    LaunchGroupConfigList:
      type: array
      items:
        $ref: '#/components/schemas/LaunchGroupConfig'
    LaunchGroupList:
      type: array
      items:
        $ref: '#/components/schemas/LaunchGroup'
    LaunchName:
      type: string
      pattern: ^[-a-zA-Z0-9._]*$
      minLength: 1
      maxLength: 127
    LaunchStatus:
      type: string
      enum:
      - CREATED
      - UPDATING
      - RUNNING
      - COMPLETED
      - CANCELLED
    LaunchStopDesiredState:
      type: string
      enum:
      - COMPLETED
      - CANCELLED
    LaunchType:
      type: string
      enum:
      - aws.evidently.splits
    LaunchesList:
      type: array
      items:
        $ref: '#/components/schemas/Launch'
    ListExperimentsRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project to return the experiment list
            from.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxExperiments'
          description: The maximum number of results to include in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use when requesting the next set of results. You
            received this token from a previous `ListExperiments` operation.
        status:
          allOf:
          - $ref: '#/components/schemas/ExperimentStatus'
          description: Use this optional parameter to limit the returned results to
            only the experiments with the status that you specify here.
      required:
      - project
    ListExperimentsResponse:
      type: object
      properties:
        experiments:
          allOf:
          - $ref: '#/components/schemas/ExperimentList'
          description: An array of structures that contain the configuration details
            of the experiments in the specified project.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use in a subsequent `ListExperiments` operation
            to return the next set of results.
    ListFeaturesRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project to return the feature list from.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxFeatures'
          description: The maximum number of results to include in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use when requesting the next set of results. You
            received this token from a previous `ListFeatures` operation.
      required:
      - project
    ListFeaturesResponse:
      type: object
      properties:
        features:
          allOf:
          - $ref: '#/components/schemas/FeatureSummariesList'
          description: An array of structures that contain the configuration details
            of the features in the specified project.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use in a subsequent `ListFeatures` operation to
            return the next set of results.
    ListLaunchesRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project to return the launch list from.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxLaunches'
          description: The maximum number of results to include in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use when requesting the next set of results. You
            received this token from a previous `ListLaunches` operation.
        status:
          allOf:
          - $ref: '#/components/schemas/LaunchStatus'
          description: Use this optional parameter to limit the returned results to
            only the launches with the status that you specify here.
      required:
      - project
    ListLaunchesResponse:
      type: object
      properties:
        launches:
          allOf:
          - $ref: '#/components/schemas/LaunchesList'
          description: An array of structures that contain the configuration details
            of the launches in the specified project.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use in a subsequent `ListLaunches` operation to
            return the next set of results.
    ListProjectsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxProjects'
          description: The maximum number of results to include in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use when requesting the next set of results. You
            received this token from a previous `ListProjects` operation.
    ListProjectsResponse:
      type: object
      properties:
        projects:
          allOf:
          - $ref: '#/components/schemas/ProjectSummariesList'
          description: An array of structures that contain the configuration details
            of the projects in the Region.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use in a subsequent `ListProjects` operation to
            return the next set of results.
    ListSegmentReferencesRequest:
      type: object
      properties:
        segment:
          allOf:
          - $ref: '#/components/schemas/SegmentRef'
          description: The ARN of the segment that you want to view information for.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxReferences'
          description: The maximum number of results to include in the response. If
            you omit this, the default of 50 is used.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use when requesting the next set of results. You
            received this token from a previous `ListSegmentReferences` operation.
        type:
          allOf:
          - $ref: '#/components/schemas/SegmentReferenceResourceType'
          description: Specifies whether to return information about launches or experiments
            that use this segment.
      required:
      - segment
      - type
    ListSegmentReferencesResponse:
      type: object
      properties:
        referencedBy:
          allOf:
          - $ref: '#/components/schemas/RefResourceList'
          description: An array of structures, where each structure contains information
            about one experiment or launch that uses this segment.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use in a subsequent `ListSegmentReferences` operation
            to return the next set of results.
    ListSegmentsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxSegments'
          description: The maximum number of results to include in the response. If
            you omit this, the default of 50 is used.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use when requesting the next set of results. You
            received this token from a previous `ListSegments` operation.
    ListSegmentsResponse:
      type: object
      properties:
        segments:
          allOf:
          - $ref: '#/components/schemas/SegmentList'
          description: An array of structures that contain information about the segments
            in this Region.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token to use in a subsequent `ListSegments` operation to
            return the next set of results.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the resource that you want to see the tags of.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values associated with the resource
            you specified.
    MaxExperiments:
      type: integer
      minimum: 1
      maximum: 100
    MaxFeatures:
      type: integer
      minimum: 1
      maximum: 100
    MaxLaunches:
      type: integer
      minimum: 1
      maximum: 100
    MaxProjects:
      type: integer
      minimum: 1
      maximum: 50
    MaxReferences:
      type: integer
      minimum: 1
      maximum: 100
    MaxSegments:
      type: integer
      minimum: 1
      maximum: 50
    MetricDefinition:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/CwDimensionSafeName'
          description: The name of the metric.
        entityIdKey:
          allOf:
          - $ref: '#/components/schemas/JsonPath'
          description: The entity, such as a user or session, that does an action
            that causes a metric value to be recorded.
        valueKey:
          allOf:
          - $ref: '#/components/schemas/JsonPath'
          description: The value that is tracked to produce the metric.
        eventPattern:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: 'The EventBridge event pattern that defines how the metric
            is recorded.


            For more information about EventBridge event patterns, see [Amazon EventBridge
            event patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html).'
        unitLabel:
          allOf:
          - $ref: '#/components/schemas/MetricUnitLabel'
          description: The label for the units that the metric is measuring.
      description: This structure defines a metric that is being used to evaluate
        the variations during a launch or experiment.
    MetricDefinitionConfig:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/CwDimensionSafeName'
          description: A name for the metric.
        entityIdKey:
          allOf:
          - $ref: '#/components/schemas/JsonPath'
          description: The entity, such as a user or session, that does an action
            that causes a metric value to be recorded. An example is `userDetails.userID`.
        valueKey:
          allOf:
          - $ref: '#/components/schemas/JsonPath'
          description: The value that is tracked to produce the metric.
        eventPattern:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: 'The EventBridge event pattern that defines how the metric
            is recorded.


            For more information about EventBridge event patterns, see [Amazon EventBridge
            event patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html).'
        unitLabel:
          allOf:
          - $ref: '#/components/schemas/MetricUnitLabel'
          description: A label for the units that the metric is measuring.
      required:
      - name
      - entityIdKey
      - valueKey
      description: This structure defines a metric that you want to use to evaluate
        the variations during a launch or experiment.
    MetricGoal:
      type: object
      properties:
        metricDefinition:
          allOf:
          - $ref: '#/components/schemas/MetricDefinition'
          description: A structure that contains details about the metric.
        desiredChange:
          allOf:
          - $ref: '#/components/schemas/ChangeDirectionEnum'
          description: '`INCREASE` means that a variation with a higher number for
            this metric is performing better.


            `DECREASE` means that a variation with a lower number for this metric
            is performing better.'
      required:
      - metricDefinition
      description: A structure that tells Evidently whether higher or lower values
        are desired for a metric that is used in an experiment.
    MetricGoalConfig:
      type: object
      properties:
        metricDefinition:
          allOf:
          - $ref: '#/components/schemas/MetricDefinitionConfig'
          description: A structure that contains details about the metric.
        desiredChange:
          allOf:
          - $ref: '#/components/schemas/ChangeDirectionEnum'
          description: '`INCREASE` means that a variation with a higher number for
            this metric is performing better.


            `DECREASE` means that a variation with a lower number for this metric
            is performing better.'
      required:
      - metricDefinition
      description: Use this structure to tell Evidently whether higher or lower values
        are desired for a metric that is used in an experiment.
    MetricGoalConfigList:
      type: array
      items:
        $ref: '#/components/schemas/MetricGoalConfig'
    MetricGoalsList:
      type: array
      items:
        $ref: '#/components/schemas/MetricGoal'
    MetricMonitor:
      type: object
      properties:
        metricDefinition:
          allOf:
          - $ref: '#/components/schemas/MetricDefinition'
          description: A structure that defines the metric.
      required:
      - metricDefinition
      description: A structure that defines a metric to be used to monitor performance
        of the variations during a launch.
    MetricMonitorConfig:
      type: object
      properties:
        metricDefinition:
          allOf:
          - $ref: '#/components/schemas/MetricDefinitionConfig'
          description: A structure that defines the metric.
      required:
      - metricDefinition
      description: A structure that defines a metric to be used to monitor performance
        of the variations during a launch.
    MetricMonitorConfigList:
      type: array
      items:
        $ref: '#/components/schemas/MetricMonitorConfig'
    MetricMonitorList:
      type: array
      items:
        $ref: '#/components/schemas/MetricMonitor'
    MetricNameList:
      type: array
      items:
        $ref: '#/components/schemas/CwDimensionSafeName'
    MetricUnitLabel:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 256
    NextToken:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 8192
    OnlineAbConfig:
      type: object
      properties:
        controlTreatmentName:
          allOf:
          - $ref: '#/components/schemas/TreatmentName'
          description: The name of the variation that is to be the default variation
            that the other variations are compared to.
        treatmentWeights:
          allOf:
          - $ref: '#/components/schemas/TreatmentToWeightMap'
          description: A set of key-value pairs. The keys are variation names, and
            the values are the portion of experiment traffic to be assigned to that
            variation. Specify the traffic portion in thousandths of a percent, so
            20,000 for a variation would allocate 20% of the experiment traffic to
            that variation.
      description: A structure that contains the configuration of which variation
        to use as the "control" version. The "control" version is used for comparison
        with other variations. This structure also specifies how much experiment traffic
        is allocated to each variation.
    OnlineAbDefinition:
      type: object
      properties:
        controlTreatmentName:
          allOf:
          - $ref: '#/components/schemas/TreatmentName'
          description: The name of the variation that is the default variation that
            the other variations are compared to.
        treatmentWeights:
          allOf:
          - $ref: '#/components/schemas/TreatmentToWeightMap'
          description: A set of key-value pairs. The keys are variation names, and
            the values are the portion of experiment traffic to be assigned to that
            variation. The traffic portion is specified in thousandths of a percent,
            so 20,000 for a variation would allocate 20% of the experiment traffic
            to that variation.
      description: A structure that contains the configuration of which variation
        to use as the "control" version. The "control" version is used for comparison
        with other variations. This structure also specifies how much experiment traffic
        is allocated to each variation.
    Project:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ProjectArn'
          description: The name or ARN of the project.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project.
        status:
          allOf:
          - $ref: '#/components/schemas/ProjectStatus'
          description: The current state of the project.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The user-entered description of the project.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the project is created.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the project was most recently updated.
        featureCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of features currently in the project.
        launchCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of launches currently in the project. This includes
            all launches that have been created and not deleted, whether they are
            ongoing or not.
        activeLaunchCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of ongoing launches currently in the project.
        experimentCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of experiments currently in the project. This includes
            all experiments that have been created and not deleted, whether they are
            ongoing or not.
        activeExperimentCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of ongoing experiments currently in the project.
        dataDelivery:
          allOf:
          - $ref: '#/components/schemas/ProjectDataDelivery'
          description: A structure that contains information about where Evidently
            is to store evaluation events for longer term storage.
        appConfigResource:
          allOf:
          - $ref: '#/components/schemas/ProjectAppConfigResource'
          description: This structure defines the configuration of how your application
            integrates with AppConfig to run client-side evaluation.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values associated with this project.
      required:
      - arn
      - name
      - status
      - createdTime
      - lastUpdatedTime
      description: This structure defines a project, which is the logical object in
        Evidently that can contain features, launches, and experiments. Use projects
        to group similar features together.
    ProjectAppConfigResource:
      type: object
      properties:
        applicationId:
          allOf:
          - $ref: '#/components/schemas/AppConfigResourceId'
          description: The ID of the AppConfig application to use for client-side
            evaluation.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/AppConfigResourceId'
          description: The ID of the AppConfig environment to use for client-side
            evaluation. This must be an environment that is within the application
            that you specify for `applicationId`.
        configurationProfileId:
          allOf:
          - $ref: '#/components/schemas/AppConfigResourceId'
          description: The ID of the AppConfig profile to use for client-side evaluation.
      required:
      - applicationId
      - environmentId
      - configurationProfileId
      description: This is a structure that defines the configuration of how your
        application integrates with AppConfig to run client-side evaluation.
    ProjectAppConfigResourceConfig:
      type: object
      properties:
        applicationId:
          allOf:
          - $ref: '#/components/schemas/AppConfigResourceId'
          description: The ID of the AppConfig application to use for client-side
            evaluation.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/AppConfigResourceId'
          description: The ID of the AppConfig environment to use for client-side
            evaluation. This must be an environment that is within the application
            that you specify for `applicationId`.
      description: 'Use this parameter to configure client-side evaluation for your
        project. Client-side evaluation allows your application to assign variations
        to user sessions locally instead of by calling the [EvaluateFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html)
        operation to assign the variations. This mitigates the latency and availability
        risks that come with an API call.


        `ProjectAppConfigResource` is a structure that defines the configuration of
        how your application integrates with AppConfig to run client-side evaluation.'
    ProjectArn:
      type: string
      pattern: arn:[^:]*:[^:]*:[^:]*:[^:]*:project/[-a-zA-Z0-9._]*
      minLength: 0
      maxLength: 2048
    ProjectDataDelivery:
      type: object
      properties:
        s3Destination:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          description: If the project stores evaluation events in an Amazon S3 bucket,
            this structure stores the bucket name and bucket prefix.
        cloudWatchLogs:
          allOf:
          - $ref: '#/components/schemas/CloudWatchLogsDestination'
          description: If the project stores evaluation events in CloudWatch Logs,
            this structure stores the log group name.
      description: A structure that contains information about where Evidently is
        to store evaluation events for longer term storage.
    ProjectDataDeliveryConfig:
      type: object
      properties:
        s3Destination:
          allOf:
          - $ref: '#/components/schemas/S3DestinationConfig'
          description: If the project stores evaluation events in an Amazon S3 bucket,
            this structure stores the bucket name and bucket prefix.
        cloudWatchLogs:
          allOf:
          - $ref: '#/components/schemas/CloudWatchLogsDestinationConfig'
          description: If the project stores evaluation events in CloudWatch Logs,
            this structure stores the log group name.
      description: A structure that contains information about where Evidently is
        to store evaluation events for longer term storage.
    ProjectName:
      type: string
      pattern: ^[-a-zA-Z0-9._]*$
      minLength: 1
      maxLength: 127
    ProjectRef:
      type: string
      pattern: (^[a-zA-Z0-9._-]*$)|(arn:[^:]*:[^:]*:[^:]*:[^:]*:project/[a-zA-Z0-9._-]*)
      minLength: 0
      maxLength: 2048
    ProjectStatus:
      type: string
      enum:
      - AVAILABLE
      - UPDATING
    ProjectSummariesList:
      type: array
      items:
        $ref: '#/components/schemas/ProjectSummary'
    ProjectSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ProjectArn'
          description: The name or ARN of the project.
        name:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          description: The name of the project.
        status:
          allOf:
          - $ref: '#/components/schemas/ProjectStatus'
          description: The current state of the project.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the project.
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the project is created.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the project was most recently updated.
        featureCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of features currently in the project.
        launchCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of launches currently in the project, including
            launches that are ongoing, completed, and not started yet.
        activeLaunchCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of ongoing launches currently in the project.
        experimentCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of experiments currently in the project.
        activeExperimentCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of experiments currently in the project.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values associated with this project.
      required:
      - arn
      - name
      - status
      - createdTime
      - lastUpdatedTime
      description: A structure that contains configuration information about an Evidently
        project.
    PutProjectEventsRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project to write the events to.
        events:
          allOf:
          - $ref: '#/components/schemas/EventList'
          description: An array of event structures that contain the performance data
            that is being sent to Evidently.
      required:
      - project
      - events
    PutProjectEventsResponse:
      type: object
      properties:
        failedEventCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of events in the operation that could not be used
            by Evidently.
        eventResults:
          allOf:
          - $ref: '#/components/schemas/PutProjectEventsResultEntryList'
          description: A structure that contains Evidently's response to the sent
            events, including an event ID and error codes, if any.
    PutProjectEventsResultEntry:
      type: object
      properties:
        eventId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          description: A unique ID assigned to this `PutProjectEvents` operation.
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCodeEnum'
          description: If the `PutProjectEvents` operation has an error, the error
            code is returned here.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: If the `PutProjectEvents` operation has an error, the error
            message is returned here.
      description: A structure that contains Evidently's response to the sent events,
        including an event ID and error codes, if any.
    PutProjectEventsResultEntryList:
      type: array
      items:
        $ref: '#/components/schemas/PutProjectEventsResultEntry'
    RandomizationSalt:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 127
    RefResource:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the experiment or launch.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies whether the resource that this structure contains
            information about is an experiment or a launch.
        arn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the experiment or launch.
        status:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The status of the experiment or launch.
        startTime:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The day and time that this experiment or launch started.
        endTime:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The day and time that this experiment or launch ended.
        lastUpdatedOn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The day and time that this experiment or launch was most recently
            updated.
      required:
      - name
      - type
      description: A structure that contains information about one experiment or launch
        that uses the specified segment.
    RefResourceList:
      type: array
      items:
        $ref: '#/components/schemas/RefResource'
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the resource that caused the exception.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the resource that is associated with the error.
      description: The request references a resource that does not exist.
    ResultsPeriod:
      type: integer
      format: int64
      default: 0
      minimum: 300
      maximum: 90000
    RuleName:
      type: string
      minLength: 0
      maxLength: 1024
    RuleType:
      type: string
      minLength: 0
      maxLength: 1024
    S3BucketSafeName:
      type: string
      pattern: ^[a-z0-9][-a-z0-9]*[a-z0-9]$
      minLength: 3
      maxLength: 63
    S3Destination:
      type: object
      properties:
        bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketSafeName'
          description: The name of the bucket in which Evidently stores evaluation
            events.
        prefix:
          allOf:
          - $ref: '#/components/schemas/S3PrefixSafeName'
          description: The bucket prefix in which Evidently stores evaluation events.
      description: If the project stores evaluation events in an Amazon S3 bucket,
        this structure stores the bucket name and bucket prefix.
    S3DestinationConfig:
      type: object
      properties:
        bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketSafeName'
          description: The name of the bucket in which Evidently stores evaluation
            events.
        prefix:
          allOf:
          - $ref: '#/components/schemas/S3PrefixSafeName'
          description: The bucket prefix in which Evidently stores evaluation events.
      description: If the project stores evaluation events in an Amazon S3 bucket,
        this structure stores the bucket name and bucket prefix.
    S3PrefixSafeName:
      type: string
      pattern: ^[-a-zA-Z0-9!_.*'()/]*$
      minLength: 1
      maxLength: 1024
    ScheduledSplit:
      type: object
      properties:
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that this step of the launch starts.
        groupWeights:
          allOf:
          - $ref: '#/components/schemas/GroupToWeightMap'
          description: 'The traffic allocation percentages among the feature variations
            during one step of a launch. This is a set of key-value pairs. The keys
            are variation names. The values represent the percentage of traffic to
            allocate to that variation during this step.


            The values is expressed in thousandths of a percent, so assigning a weight
            of 50000 assigns 50% of traffic to that variation.


            If the sum of the weights for all the variations in a segment override
            does not add up to 100,000, then the remaining traffic that matches this
            segment is not assigned by this segment override, and instead moves on
            to the next segment override or the default traffic split.'
        segmentOverrides:
          allOf:
          - $ref: '#/components/schemas/SegmentOverridesList'
          description: 'Use this parameter to specify different traffic splits for
            one or more audience _segments_. A segment is a portion of your audience
            that share one or more characteristics. Examples could be Chrome browser
            users, users in Europe, or Firefox browser users in Europe who also fit
            other criteria that your application collects, such as age.


            This parameter is an array of up to six segment override objects. Each
            of these objects specifies a segment that you have already created, and
            defines the traffic split for that segment.'
      required:
      - startTime
      description: This structure defines the traffic allocation percentages among
        the feature variations during one step of a launch, and the start time of
        that step.
    ScheduledSplitConfig:
      type: object
      properties:
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that this step of the launch starts.
        groupWeights:
          allOf:
          - $ref: '#/components/schemas/GroupToWeightMap'
          description: 'The traffic allocation percentages among the feature variations
            during one step of a launch. This is a set of key-value pairs. The keys
            are variation names. The values represent the percentage of traffic to
            allocate to that variation during this step.


            The values is expressed in thousandths of a percent, so assigning a weight
            of 50000 assigns 50% of traffic to that variation.


            If the sum of the weights for all the variations in a segment override
            does not add up to 100,000, then the remaining traffic that matches this
            segment is not assigned by this segment override, and instead moves on
            to the next segment override or the default traffic split.'
        segmentOverrides:
          allOf:
          - $ref: '#/components/schemas/SegmentOverridesList'
          description: 'Use this parameter to specify different traffic splits for
            one or more audience _segments_. A segment is a portion of your audience
            that share one or more characteristics. Examples could be Chrome browser
            users, users in Europe, or Firefox browser users in Europe who also fit
            other criteria that your application collects, such as age.


            This parameter is an array of up to six segment override objects. Each
            of these objects specifies a segment that you have already created, and
            defines the traffic split for that segment.'
      required:
      - startTime
      - groupWeights
      description: This structure defines the traffic allocation percentages among
        the feature variations during one step of a launch, and the start time of
        that step.
    ScheduledSplitConfigList:
      type: array
      items:
        $ref: '#/components/schemas/ScheduledSplitConfig'
    ScheduledSplitsLaunchConfig:
      type: object
      properties:
        steps:
          allOf:
          - $ref: '#/components/schemas/ScheduledSplitConfigList'
          description: An array of structures that define the traffic allocation percentages
            among the feature variations during each step of the launch. This also
            defines the start time of each step.
      required:
      - steps
      description: An array of structures that define the traffic allocation percentages
        among the feature variations during each step of a launch. This also defines
        the start time of each step.
    ScheduledSplitsLaunchDefinition:
      type: object
      properties:
        steps:
          allOf:
          - $ref: '#/components/schemas/ScheduledStepList'
          description: An array of structures that define the traffic allocation percentages
            among the feature variations during each step of the launch. This also
            defines the start time of each step.
      description: An array of structures that define the traffic allocation percentages
        among the feature variations during each step of a launch. This also defines
        the start time of each step.
    ScheduledStepList:
      type: array
      items:
        $ref: '#/components/schemas/ScheduledSplit'
    Segment:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/SegmentArn'
          description: The ARN of the segment.
        name:
          allOf:
          - $ref: '#/components/schemas/SegmentName'
          description: The name of the segment.
        pattern:
          allOf:
          - $ref: '#/components/schemas/SegmentPattern'
          description: The pattern that defines the attributes to use to evalute whether
            a user session will be in the segment. For more information about the
            pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html).
        createdTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that this segment was created.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that this segment was most recently updated.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The customer-created description for this segment.
        experimentCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of experiments that this segment is used in. This
            count includes all current experiments, not just those that are currently
            running.
        launchCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of launches that this segment is used in. This count
            includes all current launches, not just those that are currently running.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values associated with this launch.
      required:
      - arn
      - name
      - pattern
      - createdTime
      - lastUpdatedTime
      description: This structure contains information about one audience _segment_.
        You can use segments in your experiments and launches to narrow the user sessions
        used for experiment or launch to only the user sessions that match one or
        more criteria.
    SegmentArn:
      type: string
      pattern: arn:[^:]*:[^:]*:[^:]*:[^:]*:segment/[-a-zA-Z0-9._]*
      minLength: 0
      maxLength: 2048
    SegmentList:
      type: array
      items:
        $ref: '#/components/schemas/Segment'
    SegmentName:
      type: string
      pattern: ^[-a-zA-Z0-9._]*$
      minLength: 1
      maxLength: 64
    SegmentOverride:
      type: object
      properties:
        segment:
          allOf:
          - $ref: '#/components/schemas/SegmentRef'
          description: The ARN of the segment to use.
        evaluationOrder:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: A number indicating the order to use to evaluate segment overrides,
            if there are more than one. Segment overrides with lower numbers are evaluated
            first.
        weights:
          allOf:
          - $ref: '#/components/schemas/GroupToWeightMap'
          description: The traffic allocation percentages among the feature variations
            to assign to this segment. This is a set of key-value pairs. The keys
            are variation names. The values represent the amount of traffic to allocate
            to that variation for this segment. This is expressed in thousandths of
            a percent, so a weight of 50000 represents 50% of traffic.
      required:
      - segment
      - evaluationOrder
      - weights
      description: This structure specifies a segment that you have already created,
        and defines the traffic split for that segment to be used in a launch.
    SegmentOverridesList:
      type: array
      items:
        $ref: '#/components/schemas/SegmentOverride'
    SegmentPattern:
      type: string
      minLength: 1
      maxLength: 1024
    SegmentRef:
      type: string
      pattern: (^[-a-zA-Z0-9._]*$)|(arn:[^:]*:[^:]*:[^:]*:[^:]*:segment/[-a-zA-Z0-9._]*)
      minLength: 0
      maxLength: 2048
    SegmentReferenceResourceType:
      type: string
      enum:
      - EXPERIMENT
      - LAUNCH
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the resource that caused the exception.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the resource that is associated with the error.
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the service that is associated with the error.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the service quota that was exceeded.
      description: The request would cause a service quota to be exceeded.
    ServiceUnavailableException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The service was unavailable. Retry the request.
    SplitWeight:
      type: integer
      format: int64
      default: 0
      minimum: 0
      maximum: 100000
    StartExperimentRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the experiment
            to start.
        experiment:
          allOf:
          - $ref: '#/components/schemas/ExperimentName'
          description: The name of the experiment to start.
        analysisCompleteTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time to end the experiment. This must be no more
            than 30 days after the experiment starts.
      required:
      - project
      - experiment
      - analysisCompleteTime
    StartExperimentResponse:
      type: object
      properties:
        startedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp that indicates when the experiment started.
    StartLaunchRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the launch to
            start.
        launch:
          allOf:
          - $ref: '#/components/schemas/LaunchName'
          description: The name of the launch to start.
      required:
      - project
      - launch
    StartLaunchResponse:
      type: object
      properties:
        launch:
          allOf:
          - $ref: '#/components/schemas/Launch'
          description: A structure that contains information about the launch that
            was started.
      required:
      - launch
    StopExperimentRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the experiment
            to stop.
        experiment:
          allOf:
          - $ref: '#/components/schemas/ExperimentName'
          description: The name of the experiment to stop.
        desiredState:
          allOf:
          - $ref: '#/components/schemas/ExperimentStopDesiredState'
          description: Specify whether the experiment is to be considered `COMPLETED`
            or `CANCELLED` after it stops.
        reason:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A string that describes why you are stopping the experiment.
      required:
      - project
      - experiment
    StopExperimentResponse:
      type: object
      properties:
        endedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the experiment stopped.
    StopLaunchRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the launch that
            you want to stop.
        launch:
          allOf:
          - $ref: '#/components/schemas/LaunchName'
          description: The name of the launch to stop.
        desiredState:
          allOf:
          - $ref: '#/components/schemas/LaunchStopDesiredState'
          description: Specify whether to consider the launch as `COMPLETED` or `CANCELLED`
            after it stops.
        reason:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A string that describes why you are stopping the launch.
      required:
      - project
      - launch
    StopLaunchResponse:
      type: object
      properties:
        endedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the launch stopped.
    TagKey:
      type: string
      pattern: ^(?!aws:)[a-zA-Z+-=._:/]+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the CloudWatch Evidently resource that you're adding
            tags to.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of key-value pairs to associate with the resource.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TestSegmentPatternRequest:
      type: object
      properties:
        pattern:
          allOf:
          - $ref: '#/components/schemas/SegmentPattern'
          description: The pattern to test.
        payload:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          description: A sample `evaluationContext` JSON block to test against the
            specified pattern.
      required:
      - pattern
      - payload
    TestSegmentPatternResponse:
      type: object
      properties:
        match:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Returns `true` if the pattern matches the payload.
      required:
      - match
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the service that is associated with the error.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the service quota that was exceeded.
      description: The request was denied because of request throttling. Retry the
        request.
    TimestampList:
      type: array
      items:
        type: string
        format: date-time
    Treatment:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/TreatmentName'
          description: The name of this treatment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the treatment.
        featureVariations:
          allOf:
          - $ref: '#/components/schemas/FeatureToVariationMap'
          description: The feature variation used for this treatment. This is a key-value
            pair. The key is the feature name, and the value is the variation name.
      required:
      - name
      description: A structure that defines one treatment in an experiment. A treatment
        is a variation of the feature that you are including in the experiment.
    TreatmentConfig:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/TreatmentName'
          description: A name for this treatment.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for this treatment.
        feature:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The feature that this experiment is testing.
        variation:
          allOf:
          - $ref: '#/components/schemas/VariationName'
          description: The name of the variation to use as this treatment in the experiment.
      required:
      - name
      - feature
      - variation
      description: A structure that defines one treatment in an experiment. A treatment
        is a variation of the feature that you are including in the experiment.
    TreatmentConfigList:
      type: array
      items:
        $ref: '#/components/schemas/TreatmentConfig'
    TreatmentList:
      type: array
      items:
        $ref: '#/components/schemas/Treatment'
    TreatmentName:
      type: string
      pattern: ^[-a-zA-Z0-9._]*$
      minLength: 1
      maxLength: 127
    TreatmentNameList:
      type: array
      items:
        $ref: '#/components/schemas/TreatmentName'
    TreatmentToWeightMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SplitWeight'
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the CloudWatch Evidently resource that you're removing
            tags from.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The list of tag keys to remove from the resource.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateExperimentRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the experiment
            that you want to update.
        experiment:
          allOf:
          - $ref: '#/components/schemas/ExperimentName'
          description: The name of the experiment to update.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: An optional description of the experiment.
        treatments:
          allOf:
          - $ref: '#/components/schemas/TreatmentConfigList'
          description: An array of structures that define the variations being tested
            in the experiment.
        metricGoals:
          allOf:
          - $ref: '#/components/schemas/MetricGoalConfigList'
          description: An array of structures that defines the metrics used for the
            experiment, and whether a higher or lower value for each metric is the
            goal.
        randomizationSalt:
          allOf:
          - $ref: '#/components/schemas/RandomizationSalt'
          description: When Evidently assigns a particular user session to an experiment,
            it must use a randomization ID to determine which variation the user session
            is served. This randomization ID is a combination of the entity ID and
            `randomizationSalt`. If you omit `randomizationSalt`, Evidently uses the
            experiment name as the `randomizationSalt`.
        samplingRate:
          allOf:
          - $ref: '#/components/schemas/SplitWeight'
          description: 'The portion of the available audience that you want to allocate
            to this experiment, in thousandths of a percent. The available audience
            is the total audience minus the audience that you have allocated to overrides
            or current launches of this feature.


            This is represented in thousandths of a percent. For example, specify
            20,000 to allocate 20% of the available audience.'
        segment:
          allOf:
          - $ref: '#/components/schemas/SegmentRef'
          description: Adds an audience _segment_ to an experiment. When a segment
            is used in an experiment, only user sessions that match the segment pattern
            are used in the experiment. You can't use this parameter if the experiment
            is currently running.
        removeSegment:
          allOf:
          - $ref: '#/components/schemas/PrimitiveBoolean'
          description: Removes a segment from being used in an experiment. You can't
            use this parameter if the experiment is currently running.
        onlineAbConfig:
          allOf:
          - $ref: '#/components/schemas/OnlineAbConfig'
          description: A structure that contains the configuration of which variation
            o use as the "control" version. The "control" version is used for comparison
            with other variations. This structure also specifies how much experiment
            traffic is allocated to each variation.
      required:
      - project
      - experiment
    UpdateExperimentResponse:
      type: object
      properties:
        experiment:
          allOf:
          - $ref: '#/components/schemas/Experiment'
          description: A structure containing the configuration details of the experiment
            that was updated.
      required:
      - experiment
    UpdateFeatureRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the feature to
            be updated.
        feature:
          allOf:
          - $ref: '#/components/schemas/FeatureName'
          description: The name of the feature to be updated.
        evaluationStrategy:
          allOf:
          - $ref: '#/components/schemas/FeatureEvaluationStrategy'
          description: Specify `ALL_RULES` to activate the traffic allocation specified
            by any ongoing launches or experiments. Specify `DEFAULT_VARIATION` to
            serve the default variation to all users instead.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: An optional description of the feature.
        addOrUpdateVariations:
          allOf:
          - $ref: '#/components/schemas/VariationConfigsList'
          description: To update variation configurations for this feature, or add
            new ones, specify this structure. In this array, include any variations
            that you want to add or update. If the array includes a variation name
            that already exists for this feature, it is updated. If it includes a
            new variation name, it is added as a new variation.
        removeVariations:
          allOf:
          - $ref: '#/components/schemas/VariationNameList'
          description: 'Removes a variation from the feature. If the variation you
            specify doesn''t exist, then this makes no change and does not report
            an error.


            This operation fails if you try to remove a variation that is part of
            an ongoing launch or experiment.'
        defaultVariation:
          allOf:
          - $ref: '#/components/schemas/VariationName'
          description: The name of the variation to use as the default variation.
            The default variation is served to users who are not allocated to any
            ongoing launches or experiments of this feature.
        entityOverrides:
          allOf:
          - $ref: '#/components/schemas/EntityOverrideMap'
          description: 'Specified users that should always be served a specific variation
            of a feature. Each user is specified by a key-value pair . For each key,
            specify a user by entering their user ID, account ID, or some other identifier.
            For the value, specify the name of the variation that they are to be served.


            This parameter is limited to 2500 overrides or a total of 40KB. The 40KB
            limit includes an overhead of 6 bytes per override.'
      required:
      - project
      - feature
    UpdateFeatureResponse:
      type: object
      properties:
        feature:
          allOf:
          - $ref: '#/components/schemas/Feature'
          description: A structure that contains information about the updated feature.
      required:
      - feature
    UpdateLaunchRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that contains the launch that
            you want to update.
        launch:
          allOf:
          - $ref: '#/components/schemas/LaunchName'
          description: The name of the launch that is to be updated.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: An optional description for the launch.
        groups:
          allOf:
          - $ref: '#/components/schemas/LaunchGroupConfigList'
          description: An array of structures that contains the feature and variations
            that are to be used for the launch.
        metricMonitors:
          allOf:
          - $ref: '#/components/schemas/MetricMonitorConfigList'
          description: An array of structures that define the metrics that will be
            used to monitor the launch performance.
        randomizationSalt:
          allOf:
          - $ref: '#/components/schemas/RandomizationSalt'
          description: When Evidently assigns a particular user session to a launch,
            it must use a randomization ID to determine which variation the user session
            is served. This randomization ID is a combination of the entity ID and
            `randomizationSalt`. If you omit `randomizationSalt`, Evidently uses the
            launch name as the `randomizationSalt`.
        scheduledSplitsConfig:
          allOf:
          - $ref: '#/components/schemas/ScheduledSplitsLaunchConfig'
          description: An array of structures that define the traffic allocation percentages
            among the feature variations during each step of the launch.
      required:
      - project
      - launch
    UpdateLaunchResponse:
      type: object
      properties:
        launch:
          allOf:
          - $ref: '#/components/schemas/Launch'
          description: A structure that contains the new configuration of the launch
            that was updated.
      required:
      - launch
    UpdateProjectDataDeliveryRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project that you want to modify the
            data storage options for.
        s3Destination:
          allOf:
          - $ref: '#/components/schemas/S3DestinationConfig'
          description: A structure containing the S3 bucket name and bucket prefix
            where you want to store evaluation events.
        cloudWatchLogs:
          allOf:
          - $ref: '#/components/schemas/CloudWatchLogsDestinationConfig'
          description: A structure containing the CloudWatch Logs log group where
            you want to store evaluation events.
      required:
      - project
    UpdateProjectDataDeliveryResponse:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/Project'
          description: A structure containing details about the project that you updated.
      required:
      - project
    UpdateProjectRequest:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/ProjectRef'
          description: The name or ARN of the project to update.
        appConfigResource:
          allOf:
          - $ref: '#/components/schemas/ProjectAppConfigResourceConfig'
          description: 'Use this parameter if the project will use client-side evaluation
            powered by AppConfig. Client-side evaluation allows your application to
            assign variations to user sessions locally instead of by calling the [EvaluateFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html)
            operation. This mitigates the latency and availability risks that come
            with an API call. allows you to


            This parameter is a structure that contains information about the AppConfig
            application that will be used for client-side evaluation.'
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: An optional description of the project.
      required:
      - project
    UpdateProjectResponse:
      type: object
      properties:
        project:
          allOf:
          - $ref: '#/components/schemas/Project'
          description: A structure containing information about the updated project.
      required:
      - project
    Uuid:
      type: string
      pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
      minLength: 36
      maxLength: 36
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: A reason for the error.
        fieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: The parameter that caused the exception.
      description: The value of a parameter in the request caused an error.
    ValidationExceptionField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error name.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message.
      required:
      - name
      - message
      description: A structure containing an error name and message.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - unknownOperation
      - cannotParse
      - fieldValidationFailed
      - other
    VariableValue:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/Boolean'
        description: |-
          If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          If this feature uses the string variation type, this field contains the string value of this variation.
      - allOf:
        - $ref: '#/components/schemas/Long'
        description: |-
          If this feature uses the long variation type, this field contains the long value of this variation.
      - allOf:
        - $ref: '#/components/schemas/Double'
        description: |-
          If this feature uses the double integer variation type, this field contains the double integer value of this variation.
      description: |-
        The value assigned to a feature variation. This structure must contain exactly one field. It can be `boolValue`, `doubleValue`, `longValue`, or `stringValue`.
    Variation:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/VariationName'
          description: The name of the variation.
        value:
          allOf:
          - $ref: '#/components/schemas/VariableValue'
          description: The value assigned to this variation.
      description: This structure contains the name and variation value of one variation
        of a feature.
    VariationConfig:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/VariationName'
          description: The name of the variation.
        value:
          allOf:
          - $ref: '#/components/schemas/VariableValue'
          description: The value assigned to this variation.
      required:
      - name
      - value
      description: This structure contains the name and variation value of one variation
        of a feature.
    VariationConfigsList:
      type: array
      items:
        $ref: '#/components/schemas/VariationConfig'
    VariationName:
      type: string
      pattern: ^[-a-zA-Z0-9._]*$
      minLength: 1
      maxLength: 127
    VariationNameList:
      type: array
      items:
        $ref: '#/components/schemas/VariationName'
    VariationValueType:
      type: string
      enum:
      - STRING
      - LONG
      - DOUBLE
      - BOOLEAN
    VariationsList:
      type: array
      items:
        $ref: '#/components/schemas/Variation'
