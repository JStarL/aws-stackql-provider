openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: emr_containers
  x-aws-serviceName: emrcontainers
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-10-01'
  title: Amazon EMR Containers
  description: |-
    Amazon EMR on EKS provides a deployment option for Amazon EMR that allows you to run open-source big data frameworks on Amazon Elastic Kubernetes Service (Amazon EKS). With this deployment option, you can focus on running analytics workloads while Amazon EMR on EKS builds, configures, and manages containers for open-source applications. For more information about Amazon EMR on EKS concepts and tasks, see [What is Amazon EMR on EKS](https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/emr-eks.html).

    _Amazon EMR containers_ is the API name for Amazon EMR on EKS. The `emr-containers` prefix is used in the following scenarios:

      * It is the prefix in the CLI commands for Amazon EMR on EKS. For example, `aws emr-containers start-job-run`.

      * It is the prefix before IAM policy actions for Amazon EMR on EKS. For example, `"Action": [ "emr-containers:StartJobRun"]`. For more information, see [Policy actions for Amazon EMR on EKS](https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions).

      * It is the prefix used in Amazon EMR on EKS service endpoints. For example, `emr-containers.us-east-2.amazonaws.com`. For more information, see [Amazon EMR on EKSService Endpoints](https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/service-quotas.html#service-endpoints).
servers:
- description: The Amazon EMR Containers regional endpoint
  url: https://emr-containers.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /virtualclusters/{virtualClusterId}/jobruns/{id}:
    delete:
      operationId: CancelJobRun
      description: |-
        Cancels a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: virtualClusterId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeJobRun
      description: |-
        Displays detailed information about a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: virtualClusterId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /jobtemplates:
    post:
      operationId: CreateJobTemplate
      description: |-
        Creates a job template. Job template stores values of StartJobRun API request in a template and can be used to start a job run. Job template allows two use cases: avoid repeating recurring StartJobRun API request values, enforcing certain values in StartJobRun API request.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceNameString'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                jobTemplateData:
                  $ref: '#/components/schemas/JobTemplateData'
                tags:
                  $ref: '#/components/schemas/TagMap'
                kmsKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListJobTemplates
      description: |-
        Lists job templates based on a set of parameters. Job template stores values of StartJobRun API request in a template and can be used to start a job run. Job template allows two use cases: avoid repeating recurring StartJobRun API request values, enforcing certain values in StartJobRun API request.
      parameters:
      - name: createdAfter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Date'
      - name: createdBefore
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Date'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/JavaInteger'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /virtualclusters/{virtualClusterId}/endpoints:
    post:
      operationId: CreateManagedEndpoint
      description: |-
        Creates a managed endpoint. A managed endpoint is a gateway that connects Amazon EMR Studio to Amazon EMR on EKS so that Amazon EMR Studio can communicate with your virtual cluster.
      parameters:
      - name: virtualClusterId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceNameString'
                type:
                  $ref: '#/components/schemas/EndpointType'
                releaseLabel:
                  $ref: '#/components/schemas/ReleaseLabel'
                executionRoleArn:
                  $ref: '#/components/schemas/IAMRoleArn'
                certificateArn:
                  $ref: '#/components/schemas/ACMCertArn'
                configurationOverrides:
                  $ref: '#/components/schemas/ConfigurationOverrides'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListManagedEndpoints
      description: |-
        Lists managed endpoints based on a set of parameters. A managed endpoint is a gateway that connects Amazon EMR Studio to Amazon EMR on EKS so that Amazon EMR Studio can communicate with your virtual cluster.
      parameters:
      - name: virtualClusterId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: createdBefore
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Date'
      - name: createdAfter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Date'
      - name: types
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EndpointTypes'
      - name: states
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EndpointStates'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/JavaInteger'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /securityconfigurations:
    post:
      operationId: CreateSecurityConfiguration
      description: |-
        Creates a security configuration. Security configurations in Amazon EMR on EKS are templates for different security setups. You can use security configurations to configure the Lake Formation integration setup. You can also create a security configuration to re-use a security setup each time you create a virtual cluster.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                name:
                  $ref: '#/components/schemas/ResourceNameString'
                securityConfigurationData:
                  $ref: '#/components/schemas/SecurityConfigurationData'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListSecurityConfigurations
      description: |-
        Lists security configurations based on a set of parameters. Security configurations in Amazon EMR on EKS are templates for different security setups. You can use security configurations to configure the Lake Formation integration setup. You can also create a security configuration to re-use a security setup each time you create a virtual cluster.
      parameters:
      - name: createdAfter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Date'
      - name: createdBefore
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Date'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/JavaInteger'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /virtualclusters:
    post:
      operationId: CreateVirtualCluster
      description: |-
        Creates a virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceNameString'
                containerProvider:
                  $ref: '#/components/schemas/ContainerProvider'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                tags:
                  $ref: '#/components/schemas/TagMap'
                securityConfigurationId:
                  $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '429':
          description: |-
            The request exceeded the Amazon EKS API operation limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EKSRequestThrottledException'
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListVirtualClusters
      description: |-
        Lists information about the specified virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.
      parameters:
      - name: containerProviderId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String1024'
      - name: containerProviderType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ContainerProviderType'
      - name: createdAfter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Date'
      - name: createdBefore
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Date'
      - name: states
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/VirtualClusterStates'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/JavaInteger'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: eksAccessEntryIntegrated
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /jobtemplates/{id}:
    delete:
      operationId: DeleteJobTemplate
      description: |-
        Deletes a job template. Job template stores values of StartJobRun API request in a template and can be used to start a job run. Job template allows two use cases: avoid repeating recurring StartJobRun API request values, enforcing certain values in StartJobRun API request.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeJobTemplate
      description: |-
        Displays detailed information about a specified job template. Job template stores values of StartJobRun API request in a template and can be used to start a job run. Job template allows two use cases: avoid repeating recurring StartJobRun API request values, enforcing certain values in StartJobRun API request.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /virtualclusters/{virtualClusterId}/endpoints/{id}:
    delete:
      operationId: DeleteManagedEndpoint
      description: |-
        Deletes a managed endpoint. A managed endpoint is a gateway that connects Amazon EMR Studio to Amazon EMR on EKS so that Amazon EMR Studio can communicate with your virtual cluster.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: virtualClusterId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeManagedEndpoint
      description: |-
        Displays detailed information about a managed endpoint. A managed endpoint is a gateway that connects Amazon EMR Studio to Amazon EMR on EKS so that Amazon EMR Studio can communicate with your virtual cluster.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: virtualClusterId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /virtualclusters/{id}:
    delete:
      operationId: DeleteVirtualCluster
      description: |-
        Deletes a virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeVirtualCluster
      description: |-
        Displays detailed information about a specified virtual cluster. Virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list and delete virtual clusters. They do not consume any additional resource in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /securityconfigurations/{id}:
    get:
      operationId: DescribeSecurityConfiguration
      description: |-
        Displays detailed information about a specified security configuration. Security configurations in Amazon EMR on EKS are templates for different security setups. You can use security configurations to configure the Lake Formation integration setup. You can also create a security configuration to re-use a security setup each time you create a virtual cluster.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /virtualclusters/{virtualClusterIdentifier}/endpoints/{endpointIdentifier}/credentials:
    post:
      operationId: GetManagedEndpointSessionCredentials
      description: |-
        Generate a session token to connect to a managed endpoint.
      parameters:
      - name: endpointIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String2048'
      - name: virtualClusterIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String2048'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                executionRoleArn:
                  $ref: '#/components/schemas/IAMRoleArn'
                credentialType:
                  $ref: '#/components/schemas/CredentialType'
                durationInSeconds:
                  $ref: '#/components/schemas/JavaInteger'
                logContext:
                  $ref: '#/components/schemas/LogContext'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /virtualclusters/{virtualClusterId}/jobruns:
    get:
      operationId: ListJobRuns
      description: |-
        Lists job runs based on a set of parameters. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.
      parameters:
      - name: virtualClusterId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      - name: createdBefore
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Date'
      - name: createdAfter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Date'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResourceNameString'
      - name: states
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/JobRunStates'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/JavaInteger'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartJobRun
      description: |-
        Starts a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS.
      parameters:
      - name: virtualClusterId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ResourceNameString'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                executionRoleArn:
                  $ref: '#/components/schemas/IAMRoleArn'
                releaseLabel:
                  $ref: '#/components/schemas/ReleaseLabel'
                jobDriver:
                  $ref: '#/components/schemas/JobDriver'
                configurationOverrides:
                  $ref: '#/components/schemas/ConfigurationOverrides'
                tags:
                  $ref: '#/components/schemas/TagMap'
                jobTemplateId:
                  $ref: '#/components/schemas/ResourceIdString'
                jobTemplateParameters:
                  $ref: '#/components/schemas/TemplateParameterInputMap'
                retryPolicyConfiguration:
                  $ref: '#/components/schemas/RetryPolicyConfiguration'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Lists the tags assigned to the resources.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RsiArn'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Assigns tags to resources. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value, both of which you define. Tags enable you to categorize your Amazon Web Services resources by attributes such as purpose, owner, or environment. When you have many resources of the same type, you can quickly identify a specific resource based on the tags you've assigned to it. For example, you can define a set of tags for your Amazon EMR on EKS clusters to help you track each cluster's owner and stack level. We recommend that you devise a consistent set of tag keys for each resource type. You can then search and filter the resources based on the tags that you add.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RsiArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes tags from resources.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RsiArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '500':
          description: |-
            This is an internal server exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            There are invalid parameters in the client request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    ACMCertArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):acm:.+:(\d{12}):certificate/.+$
      minLength: 44
      maxLength: 2048
    AllowAWSToRetainLogs:
      type: string
      enum:
      - ENABLED
      - DISABLED
    AuthorizationConfiguration:
      type: object
      properties:
        lakeFormationConfiguration:
          allOf:
          - $ref: '#/components/schemas/LakeFormationConfiguration'
          description: Lake Formation related configuration inputs for the security
            configuration.
        encryptionConfiguration:
          allOf:
          - $ref: '#/components/schemas/EncryptionConfiguration'
          description: Encryption-related configuration input for the security configuration.
      description: Authorization-related configuration inputs for the security configuration.
    Base64Encoded:
      type: string
      pattern: ^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$
      minLength: 0
      maxLength: 5000
    Boolean:
      type: boolean
    CancelJobRunRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the job run to cancel.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the virtual cluster for which the job run will be
            canceled.
      required:
      - id
      - virtualClusterId
    CancelJobRunResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The output contains the ID of the cancelled job run.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The output contains the virtual cluster ID for which the job
            run is cancelled.
    Certificate:
      type: object
      properties:
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/ACMCertArn'
          description: The ARN of the certificate generated for managed endpoint.
        certificateData:
          allOf:
          - $ref: '#/components/schemas/Base64Encoded'
          description: The base64 encoded PEM certificate data generated for managed
            endpoint.
      description: The entity representing certificate data generated for managed
        endpoint.
    CertificateProviderType:
      type: string
      enum:
      - PEM
    ClientToken:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 64
    CloudWatchMonitoringConfiguration:
      type: object
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/LogGroupName'
          description: The name of the log group for log publishing.
        logStreamNamePrefix:
          allOf:
          - $ref: '#/components/schemas/String256'
          description: The specified name prefix for log streams.
      required:
      - logGroupName
      description: A configuration for CloudWatch monitoring. You can configure your
        jobs to send log information to CloudWatch Logs.
    ClusterId:
      type: string
      pattern: ^[0-9A-Za-z][A-Za-z0-9\-_]*$
      minLength: 1
      maxLength: 100
    Configuration:
      type: object
      properties:
        classification:
          allOf:
          - $ref: '#/components/schemas/String1024'
          description: The classification within a configuration.
        properties:
          allOf:
          - $ref: '#/components/schemas/SensitivePropertiesMap'
          description: A set of properties specified within a configuration classification.
        configurations:
          allOf:
          - $ref: '#/components/schemas/ConfigurationList'
          description: A list of additional configurations to apply within a configuration
            object.
      required:
      - classification
      description: A configuration specification to be used when provisioning virtual
        clusters, which can include configurations for applications and software bundled
        with Amazon EMR on EKS. A configuration consists of a classification, properties,
        and optional nested configurations. A classification refers to an application-specific
        configuration file. Properties are the settings you want to change in that
        file.
    ConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/Configuration'
    ConfigurationOverrides:
      type: object
      properties:
        applicationConfiguration:
          allOf:
          - $ref: '#/components/schemas/ConfigurationList'
          description: The configurations for the application running by the job run.
        monitoringConfiguration:
          allOf:
          - $ref: '#/components/schemas/MonitoringConfiguration'
          description: The configurations for monitoring.
      description: A configuration specification to be used to override existing configurations.
    ContainerInfo:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/EksInfo'
        description: |-
          The information about the Amazon EKS cluster.
      description: |-
        The information about the container used for a job run or a managed endpoint.
    ContainerLogRotationConfiguration:
      type: object
      properties:
        rotationSize:
          allOf:
          - $ref: '#/components/schemas/RotationSize'
          description: The file size at which to rotate logs. Minimum of 2KB, Maximum
            of 2GB.
        maxFilesToKeep:
          allOf:
          - $ref: '#/components/schemas/MaxFilesToKeep'
          description: The number of files to keep in container after rotation.
      required:
      - rotationSize
      - maxFilesToKeep
      description: The settings for container log rotation.
    ContainerProvider:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/ContainerProviderType'
          description: The type of the container provider. Amazon EKS is the only
            supported type as of now.
        id:
          allOf:
          - $ref: '#/components/schemas/ClusterId'
          description: The ID of the container cluster.
        info:
          allOf:
          - $ref: '#/components/schemas/ContainerInfo'
          description: The information about the container cluster.
      required:
      - type
      - id
      description: The information about the container provider.
    ContainerProviderType:
      type: string
      enum:
      - EKS
    CreateJobTemplateRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The specified name of the job template.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token of the job template.
        jobTemplateData:
          allOf:
          - $ref: '#/components/schemas/JobTemplateData'
          description: The job template data which holds values of StartJobRun API
            request.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags that are associated with the job template.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key ARN used to encrypt the job template.
      required:
      - name
      - clientToken
      - jobTemplateData
    CreateJobTemplateResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: This output display the created job template ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: This output displays the name of the created job template.
        arn:
          allOf:
          - $ref: '#/components/schemas/JobTemplateArn'
          description: This output display the ARN of the created job template.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: This output displays the date and time when the job template
            was created.
    CreateManagedEndpointRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The name of the managed endpoint.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the virtual cluster for which a managed endpoint
            is created.
        type:
          allOf:
          - $ref: '#/components/schemas/EndpointType'
          description: The type of the managed endpoint.
        releaseLabel:
          allOf:
          - $ref: '#/components/schemas/ReleaseLabel'
          description: The Amazon EMR release version.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/IAMRoleArn'
          description: The ARN of the execution role.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/ACMCertArn'
          description: The certificate ARN provided by users for the managed endpoint.
            This field is under deprecation and will be removed in future releases.
        configurationOverrides:
          allOf:
          - $ref: '#/components/schemas/ConfigurationOverrides'
          description: The configuration settings that will be used to override existing
            configurations.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client idempotency token for this create call.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the managed endpoint.
      required:
      - name
      - virtualClusterId
      - type
      - releaseLabel
      - executionRoleArn
      - clientToken
    CreateManagedEndpointResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The output contains the ID of the managed endpoint.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The output contains the name of the managed endpoint.
        arn:
          allOf:
          - $ref: '#/components/schemas/EndpointArn'
          description: The output contains the ARN of the managed endpoint.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The output contains the ID of the virtual cluster.
    CreateSecurityConfigurationRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client idempotency token to use when creating the security
            configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The name of the security configuration.
        securityConfigurationData:
          allOf:
          - $ref: '#/components/schemas/SecurityConfigurationData'
          description: Security configuration input for the request.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags to add to the security configuration.
      required:
      - clientToken
      - name
      - securityConfigurationData
    CreateSecurityConfigurationResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the security configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The name of the security configuration.
        arn:
          allOf:
          - $ref: '#/components/schemas/SecurityConfigurationArn'
          description: The ARN (Amazon Resource Name) of the security configuration.
    CreateVirtualClusterRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The specified name of the virtual cluster.
        containerProvider:
          allOf:
          - $ref: '#/components/schemas/ContainerProvider'
          description: The container provider of the virtual cluster.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token of the virtual cluster.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags assigned to the virtual cluster.
        securityConfigurationId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the security configuration.
      required:
      - name
      - containerProvider
      - clientToken
    CreateVirtualClusterResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: This output contains the virtual cluster ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: This output contains the name of the virtual cluster.
        arn:
          allOf:
          - $ref: '#/components/schemas/VirtualClusterArn'
          description: This output contains the ARN of virtual cluster.
    CredentialType:
      type: string
      pattern: ^.*\S.*$
      minLength: 1
      maxLength: 64
    Credentials:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/Token'
        description: |-
          The actual session token being returned.
      description: |-
        The structure containing the session token being returned.
    Date:
      type: string
      format: date-time
    DeleteJobTemplateRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the job template that will be deleted.
      required:
      - id
    DeleteJobTemplateResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: This output contains the ID of the job template that was deleted.
    DeleteManagedEndpointRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the managed endpoint.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the endpoint's virtual cluster.
      required:
      - id
      - virtualClusterId
    DeleteManagedEndpointResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The output displays the ID of the managed endpoint.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The output displays the ID of the endpoint's virtual cluster.
    DeleteVirtualClusterRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the virtual cluster that will be deleted.
      required:
      - id
    DeleteVirtualClusterResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: This output contains the ID of the virtual cluster that will
            be deleted.
    DescribeJobRunRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the job run request.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the virtual cluster for which the job run is submitted.
      required:
      - id
      - virtualClusterId
    DescribeJobRunResponse:
      type: object
      properties:
        jobRun:
          allOf:
          - $ref: '#/components/schemas/JobRun'
          description: The output displays information about a job run.
    DescribeJobTemplateRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the job template that will be described.
      required:
      - id
    DescribeJobTemplateResponse:
      type: object
      properties:
        jobTemplate:
          allOf:
          - $ref: '#/components/schemas/JobTemplate'
          description: This output displays information about the specified job template.
    DescribeManagedEndpointRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: This output displays ID of the managed endpoint.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the endpoint's virtual cluster.
      required:
      - id
      - virtualClusterId
    DescribeManagedEndpointResponse:
      type: object
      properties:
        endpoint:
          allOf:
          - $ref: '#/components/schemas/Endpoint'
          description: This output displays information about a managed endpoint.
    DescribeSecurityConfigurationRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the security configuration.
      required:
      - id
    DescribeSecurityConfigurationResponse:
      type: object
      properties:
        securityConfiguration:
          allOf:
          - $ref: '#/components/schemas/SecurityConfiguration'
          description: Details of the security configuration.
    DescribeVirtualClusterRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the virtual cluster that will be described.
      required:
      - id
    DescribeVirtualClusterResponse:
      type: object
      properties:
        virtualCluster:
          allOf:
          - $ref: '#/components/schemas/VirtualCluster'
          description: This output displays information about the specified virtual
            cluster.
    EKSRequestThrottledException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String1024'
      description: The request exceeded the Amazon EKS API operation limits.
    EksInfo:
      type: object
      properties:
        namespace:
          allOf:
          - $ref: '#/components/schemas/KubernetesNamespace'
          description: The namespaces of the Amazon EKS cluster.
      description: The information about the Amazon EKS cluster.
    EncryptionConfiguration:
      type: object
      properties:
        inTransitEncryptionConfiguration:
          allOf:
          - $ref: '#/components/schemas/InTransitEncryptionConfiguration'
          description: In-transit encryption-related input for the security configuration.
      description: Configurations related to encryption for the security configuration.
    Endpoint:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the endpoint.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The name of the endpoint.
        arn:
          allOf:
          - $ref: '#/components/schemas/EndpointArn'
          description: The ARN of the endpoint.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the endpoint's virtual cluster.
        type:
          allOf:
          - $ref: '#/components/schemas/EndpointType'
          description: The type of the endpoint.
        state:
          allOf:
          - $ref: '#/components/schemas/EndpointState'
          description: The state of the endpoint.
        releaseLabel:
          allOf:
          - $ref: '#/components/schemas/ReleaseLabel'
          description: The EMR release version to be used for the endpoint.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/IAMRoleArn'
          description: The execution role ARN of the endpoint.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/ACMCertArn'
          description: The certificate ARN of the endpoint. This field is under deprecation
            and will be removed in future.
        certificateAuthority:
          allOf:
          - $ref: '#/components/schemas/Certificate'
          description: The certificate generated by emr control plane on customer
            behalf to secure the managed endpoint.
        configurationOverrides:
          allOf:
          - $ref: '#/components/schemas/ConfigurationOverrides'
          description: The configuration settings that are used to override existing
            configurations for endpoints.
        serverUrl:
          allOf:
          - $ref: '#/components/schemas/UriString'
          description: The server URL of the endpoint.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time when the endpoint was created.
        securityGroup:
          allOf:
          - $ref: '#/components/schemas/String256'
          description: The security group configuration of the endpoint.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIds'
          description: The subnet IDs of the endpoint.
        stateDetails:
          allOf:
          - $ref: '#/components/schemas/String256'
          description: Additional details of the endpoint state.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/FailureReason'
          description: The reasons why the endpoint has failed.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags of the endpoint.
      description: This entity represents the endpoint that is managed by Amazon EMR
        on EKS.
    EndpointArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+\/endpoints\/[0-9a-zA-Z]+$
      minLength: 60
      maxLength: 1024
    EndpointState:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - TERMINATING
      - TERMINATED
      - TERMINATED_WITH_ERRORS
    EndpointStates:
      type: array
      items:
        $ref: '#/components/schemas/EndpointState'
    EndpointType:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 64
    EndpointTypes:
      type: array
      items:
        $ref: '#/components/schemas/EndpointType'
    Endpoints:
      type: array
      items:
        $ref: '#/components/schemas/Endpoint'
    EntryPointArgument:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 10280
    EntryPointArguments:
      type: array
      items:
        $ref: '#/components/schemas/EntryPointArgument'
    EntryPointPath:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 256
    FailureReason:
      type: string
      enum:
      - INTERNAL_ERROR
      - USER_ERROR
      - VALIDATION_ERROR
      - CLUSTER_UNAVAILABLE
    GetManagedEndpointSessionCredentialsRequest:
      type: object
      properties:
        endpointIdentifier:
          allOf:
          - $ref: '#/components/schemas/String2048'
          description: The ARN of the managed endpoint for which the request is submitted.
        virtualClusterIdentifier:
          allOf:
          - $ref: '#/components/schemas/String2048'
          description: The ARN of the Virtual Cluster which the Managed Endpoint belongs
            to.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/IAMRoleArn'
          description: The IAM Execution Role ARN that will be used by the job run.
        credentialType:
          allOf:
          - $ref: '#/components/schemas/CredentialType'
          description: Type of the token requested. Currently supported and default
            value of this field is “TOKEN.”
        durationInSeconds:
          allOf:
          - $ref: '#/components/schemas/JavaInteger'
          description: Duration in seconds for which the session token is valid. The
            default duration is 15 minutes and the maximum is 12 hours.
        logContext:
          allOf:
          - $ref: '#/components/schemas/LogContext'
          description: String identifier used to separate sections of the execution
            logs uploaded to S3.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client idempotency token of the job run request.
      required:
      - endpointIdentifier
      - virtualClusterIdentifier
      - executionRoleArn
      - credentialType
    GetManagedEndpointSessionCredentialsResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The identifier of the session token returned.
        credentials:
          allOf:
          - $ref: '#/components/schemas/Credentials'
          description: The structure containing the session credentials.
        expiresAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time when the session token will expire.
    IAMRoleArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$
      minLength: 20
      maxLength: 2048
    InTransitEncryptionConfiguration:
      type: object
      properties:
        tlsCertificateConfiguration:
          allOf:
          - $ref: '#/components/schemas/TLSCertificateConfiguration'
          description: TLS certificate-related configuration input for the security
            configuration.
      description: Configurations related to in-transit encryption for the security
        configuration.
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String1024'
      description: This is an internal server exception.
    JavaInteger:
      type: integer
    JobArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+\/jobruns\/[0-9a-zA-Z]+$
      minLength: 60
      maxLength: 1024
    JobDriver:
      type: object
      properties:
        sparkSubmitJobDriver:
          allOf:
          - $ref: '#/components/schemas/SparkSubmitJobDriver'
          description: The job driver parameters specified for spark submit.
        sparkSqlJobDriver:
          allOf:
          - $ref: '#/components/schemas/SparkSqlJobDriver'
          description: The job driver for job type.
      description: Specify the driver that the job runs on. Exactly one of the two
        available job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
    JobRun:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the job run.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The name of the job run.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the job run's virtual cluster.
        arn:
          allOf:
          - $ref: '#/components/schemas/JobArn'
          description: The ARN of job run.
        state:
          allOf:
          - $ref: '#/components/schemas/JobRunState'
          description: The state of the job run.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client token used to start a job run.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/IAMRoleArn'
          description: The execution role ARN of the job run.
        releaseLabel:
          allOf:
          - $ref: '#/components/schemas/ReleaseLabel'
          description: The release version of Amazon EMR.
        configurationOverrides:
          allOf:
          - $ref: '#/components/schemas/ConfigurationOverrides'
          description: The configuration settings that are used to override default
            configuration.
        jobDriver:
          allOf:
          - $ref: '#/components/schemas/JobDriver'
          description: Parameters of job driver for the job run.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time when the job run was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/RequestIdentityUserArn'
          description: The user who created the job run.
        finishedAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time when the job run has finished.
        stateDetails:
          allOf:
          - $ref: '#/components/schemas/String256'
          description: Additional details of the job run state.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/FailureReason'
          description: The reasons why the job run has failed.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The assigned tags of the job run.
        retryPolicyConfiguration:
          allOf:
          - $ref: '#/components/schemas/RetryPolicyConfiguration'
          description: The configuration of the retry policy that the job runs on.
        retryPolicyExecution:
          allOf:
          - $ref: '#/components/schemas/RetryPolicyExecution'
          description: The current status of the retry policy executed on the job.
      description: This entity describes a job run. A job run is a unit of work, such
        as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon
        EMR on EKS.
    JobRunState:
      type: string
      enum:
      - PENDING
      - SUBMITTED
      - RUNNING
      - FAILED
      - CANCELLED
      - CANCEL_PENDING
      - COMPLETED
    JobRunStates:
      type: array
      items:
        $ref: '#/components/schemas/JobRunState'
    JobRuns:
      type: array
      items:
        $ref: '#/components/schemas/JobRun'
    JobTemplate:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The name of the job template.
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the job template.
        arn:
          allOf:
          - $ref: '#/components/schemas/JobTemplateArn'
          description: The ARN of the job template.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time when the job template was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/RequestIdentityUserArn'
          description: The user who created the job template.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags assigned to the job template.
        jobTemplateData:
          allOf:
          - $ref: '#/components/schemas/JobTemplateData'
          description: The job template data which holds values of StartJobRun API
            request.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The KMS key ARN used to encrypt the job template.
        decryptionError:
          allOf:
          - $ref: '#/components/schemas/String2048'
          description: The error message in case the decryption of job template fails.
      required:
      - jobTemplateData
      description: 'This entity describes a job template. Job template stores values
        of StartJobRun API request in a template and can be used to start a job run.
        Job template allows two use cases: avoid repeating recurring StartJobRun API
        request values, enforcing certain values in StartJobRun API request.'
    JobTemplateArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/jobtemplates\/[0-9a-zA-Z]+$
      minLength: 60
      maxLength: 1024
    JobTemplateData:
      type: object
      properties:
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/ParametricIAMRoleArn'
          description: The execution role ARN of the job run.
        releaseLabel:
          allOf:
          - $ref: '#/components/schemas/ParametricReleaseLabel'
          description: The release version of Amazon EMR.
        configurationOverrides:
          allOf:
          - $ref: '#/components/schemas/ParametricConfigurationOverrides'
          description: The configuration settings that are used to override defaults
            configuration.
        jobDriver:
          $ref: '#/components/schemas/JobDriver'
        parameterConfiguration:
          allOf:
          - $ref: '#/components/schemas/TemplateParameterConfigurationMap'
          description: The configuration of parameters existing in the job template.
        jobTags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags assigned to jobs started using the job template.
      required:
      - executionRoleArn
      - releaseLabel
      - jobDriver
      description: The values of StartJobRun API requests used in job runs started
        using the job template.
    JobTemplates:
      type: array
      items:
        $ref: '#/components/schemas/JobTemplate'
    KmsKeyArn:
      type: string
      pattern: ^(arn:(aws[a-zA-Z0-9-]*):kms:.+:(\d{12})?:key\/[(0-9a-zA-Z)-?]+|\$\{[a-zA-Z]\w*\})$
      minLength: 3
      maxLength: 2048
    KubernetesNamespace:
      type: string
      pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
      minLength: 1
      maxLength: 63
    LakeFormationConfiguration:
      type: object
      properties:
        authorizedSessionTagValue:
          allOf:
          - $ref: '#/components/schemas/SessionTagValue'
          description: The session tag to authorize Amazon EMR on EKS for API calls
            to Lake Formation.
        secureNamespaceInfo:
          allOf:
          - $ref: '#/components/schemas/SecureNamespaceInfo'
          description: The namespace input of the system job.
        queryEngineRoleArn:
          allOf:
          - $ref: '#/components/schemas/IAMRoleArn'
          description: The query engine IAM role ARN that is tied to the secure Spark
            job. The `QueryEngine` role assumes the `JobExecutionRole` to execute
            all the Lake Formation calls.
      description: Lake Formation related configuration inputs for the security configuration.
    ListJobRunsRequest:
      type: object
      properties:
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the virtual cluster for which to list the job run.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time before which the job runs were submitted.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time after which the job runs were submitted.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The name of the job run.
        states:
          allOf:
          - $ref: '#/components/schemas/JobRunStates'
          description: The states of the job run.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/JavaInteger'
          description: The maximum number of job runs that can be listed.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token for the next set of job runs to return.
      required:
      - virtualClusterId
    ListJobRunsResponse:
      type: object
      properties:
        jobRuns:
          allOf:
          - $ref: '#/components/schemas/JobRuns'
          description: This output lists information about the specified job runs.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: This output displays the token for the next set of job runs.
    ListJobTemplatesRequest:
      type: object
      properties:
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time after which the job templates were created.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time before which the job templates were created.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/JavaInteger'
          description: The maximum number of job templates that can be listed.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token for the next set of job templates to return.
    ListJobTemplatesResponse:
      type: object
      properties:
        templates:
          allOf:
          - $ref: '#/components/schemas/JobTemplates'
          description: This output lists information about the specified job templates.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: This output displays the token for the next set of job templates.
    ListManagedEndpointsRequest:
      type: object
      properties:
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the virtual cluster.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time before which the endpoints are created.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time after which the endpoints are created.
        types:
          allOf:
          - $ref: '#/components/schemas/EndpointTypes'
          description: The types of the managed endpoints.
        states:
          allOf:
          - $ref: '#/components/schemas/EndpointStates'
          description: The states of the managed endpoints.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/JavaInteger'
          description: The maximum number of managed endpoints that can be listed.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token for the next set of managed endpoints to return.
      required:
      - virtualClusterId
    ListManagedEndpointsResponse:
      type: object
      properties:
        endpoints:
          allOf:
          - $ref: '#/components/schemas/Endpoints'
          description: The managed endpoints to be listed.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token for the next set of endpoints to return.
    ListSecurityConfigurationsRequest:
      type: object
      properties:
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time after which the security configuration was
            created.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time before which the security configuration was
            created.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/JavaInteger'
          description: The maximum number of security configurations the operation
            can list.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token for the next set of security configurations to return.
    ListSecurityConfigurationsResponse:
      type: object
      properties:
        securityConfigurations:
          allOf:
          - $ref: '#/components/schemas/SecurityConfigurations'
          description: The list of returned security configurations.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token for the next set of security configurations to return.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/RsiArn'
          description: The ARN of tagged resources.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags assigned to resources.
    ListVirtualClustersRequest:
      type: object
      properties:
        containerProviderId:
          allOf:
          - $ref: '#/components/schemas/String1024'
          description: The container provider ID of the virtual cluster.
        containerProviderType:
          allOf:
          - $ref: '#/components/schemas/ContainerProviderType'
          description: The container provider type of the virtual cluster. Amazon
            EKS is the only supported type as of now.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time after which the virtual clusters are created.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time before which the virtual clusters are created.
        states:
          allOf:
          - $ref: '#/components/schemas/VirtualClusterStates'
          description: The states of the requested virtual clusters.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/JavaInteger'
          description: The maximum number of virtual clusters that can be listed.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token for the next set of virtual clusters to return.
        eksAccessEntryIntegrated:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Optional Boolean that specifies whether the operation should
            return the virtual clusters that have the access entry integration enabled
            or disabled. If not specified, the operation returns all applicable virtual
            clusters.
    ListVirtualClustersResponse:
      type: object
      properties:
        virtualClusters:
          allOf:
          - $ref: '#/components/schemas/VirtualClusters'
          description: This output lists the specified virtual clusters.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: This output displays the token for the next set of virtual
            clusters.
    LogContext:
      type: string
      pattern: ^((?!.*-s3alias)(?!xn--.*)[a-z0-9][-a-z0-9.]*)?[a-z0-9]$
      minLength: 3
      maxLength: 63
    LogGroupName:
      type: string
      pattern: ^[\.\-_/#A-Za-z0-9]+$
      minLength: 1
      maxLength: 512
    ManagedLogs:
      type: object
      properties:
        allowAWSToRetainLogs:
          allOf:
          - $ref: '#/components/schemas/AllowAWSToRetainLogs'
          description: Determines whether Amazon Web Services can retain logs.
        encryptionKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon resource name (ARN) of the encryption key for logs.
      description: The entity that provides configuration control over managed logs.
    MaxFilesToKeep:
      type: integer
      minimum: 1
      maximum: 50
    MonitoringConfiguration:
      type: object
      properties:
        managedLogs:
          allOf:
          - $ref: '#/components/schemas/ManagedLogs'
          description: The entity that controls configuration for managed logs.
        persistentAppUI:
          allOf:
          - $ref: '#/components/schemas/PersistentAppUI'
          description: Monitoring configurations for the persistent application UI.
        cloudWatchMonitoringConfiguration:
          allOf:
          - $ref: '#/components/schemas/CloudWatchMonitoringConfiguration'
          description: Monitoring configurations for CloudWatch.
        s3MonitoringConfiguration:
          allOf:
          - $ref: '#/components/schemas/S3MonitoringConfiguration'
          description: Amazon S3 configuration for monitoring log publishing.
        containerLogRotationConfiguration:
          allOf:
          - $ref: '#/components/schemas/ContainerLogRotationConfiguration'
          description: Enable or disable container log rotation.
      description: Configuration setting for monitoring.
    NextToken:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 1024
    ParametricCloudWatchMonitoringConfiguration:
      type: object
      properties:
        logGroupName:
          allOf:
          - $ref: '#/components/schemas/TemplateParameter'
          description: The name of the log group for log publishing.
        logStreamNamePrefix:
          allOf:
          - $ref: '#/components/schemas/String256'
          description: The specified name prefix for log streams.
      description: A configuration for CloudWatch monitoring. You can configure your
        jobs to send log information to CloudWatch Logs. This data type allows job
        template parameters to be specified within.
    ParametricConfigurationOverrides:
      type: object
      properties:
        applicationConfiguration:
          allOf:
          - $ref: '#/components/schemas/ConfigurationList'
          description: The configurations for the application running by the job run.
        monitoringConfiguration:
          allOf:
          - $ref: '#/components/schemas/ParametricMonitoringConfiguration'
          description: The configurations for monitoring.
      description: A configuration specification to be used to override existing configurations.
        This data type allows job template parameters to be specified within.
    ParametricIAMRoleArn:
      type: string
      pattern: ^(^arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)$)|([\.\-_\#A-Za-z0-9\$\{\}]+)$
      minLength: 4
      maxLength: 2048
    ParametricMonitoringConfiguration:
      type: object
      properties:
        persistentAppUI:
          allOf:
          - $ref: '#/components/schemas/TemplateParameter'
          description: Monitoring configurations for the persistent application UI.
        cloudWatchMonitoringConfiguration:
          allOf:
          - $ref: '#/components/schemas/ParametricCloudWatchMonitoringConfiguration'
          description: Monitoring configurations for CloudWatch.
        s3MonitoringConfiguration:
          allOf:
          - $ref: '#/components/schemas/ParametricS3MonitoringConfiguration'
          description: Amazon S3 configuration for monitoring log publishing.
      description: Configuration setting for monitoring. This data type allows job
        template parameters to be specified within.
    ParametricReleaseLabel:
      type: string
      pattern: ^([\.\-_/A-Za-z0-9]+|\$\{[a-zA-Z]\w*\})$
      minLength: 1
      maxLength: 64
    ParametricS3MonitoringConfiguration:
      type: object
      properties:
        logUri:
          allOf:
          - $ref: '#/components/schemas/UriString'
          description: Amazon S3 destination URI for log publishing.
      description: Amazon S3 configuration for monitoring log publishing. You can
        configure your jobs to send log information to Amazon S3. This data type allows
        job template parameters to be specified within.
    PersistentAppUI:
      type: string
      enum:
      - ENABLED
      - DISABLED
    ReleaseLabel:
      type: string
      pattern: ^[\.\-_/A-Za-z0-9]+$
      minLength: 1
      maxLength: 64
    RequestIdentityUserArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):(iam|sts)::(\d{12})?:[\w/+=,.@-]+$
      minLength: 20
      maxLength: 2048
    RequestThrottledException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String1024'
      description: The request throttled.
    ResourceIdString:
      type: string
      pattern: ^[0-9a-z]+$
      minLength: 1
      maxLength: 64
    ResourceNameString:
      type: string
      pattern: ^[\.\-_/#A-Za-z0-9]+$
      minLength: 1
      maxLength: 64
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String1024'
      description: The specified resource was not found.
    RetryPolicyConfiguration:
      type: object
      properties:
        maxAttempts:
          allOf:
          - $ref: '#/components/schemas/JavaInteger'
          description: The maximum number of attempts on the job's driver.
      required:
      - maxAttempts
      description: The configuration of the retry policy that the job runs on.
    RetryPolicyExecution:
      type: object
      properties:
        currentAttemptCount:
          allOf:
          - $ref: '#/components/schemas/JavaInteger'
          description: The current number of attempts made on the driver of the job.
      required:
      - currentAttemptCount
      description: The current status of the retry policy executed on the job.
    RotationSize:
      type: string
      pattern: ^\d+(\.\d+)?[KMG][Bb]?$
      minLength: 3
      maxLength: 12
    RsiArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):/virtualclusters/.+$
      minLength: 60
      maxLength: 500
    S3MonitoringConfiguration:
      type: object
      properties:
        logUri:
          allOf:
          - $ref: '#/components/schemas/UriString'
          description: Amazon S3 destination URI for log publishing.
      required:
      - logUri
      description: Amazon S3 configuration for monitoring log publishing. You can
        configure your jobs to send log information to Amazon S3.
    SecretsManagerArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):secretsmanager:.+:(\d{12}):secret:[0-9a-zA-Z/_+=.@-]+$
      minLength: 3
      maxLength: 2048
    SecureNamespaceInfo:
      type: object
      properties:
        clusterId:
          allOf:
          - $ref: '#/components/schemas/ClusterId'
          description: The ID of the Amazon EKS cluster where Amazon EMR on EKS jobs
            run.
        namespace:
          allOf:
          - $ref: '#/components/schemas/KubernetesNamespace'
          description: The namespace of the Amazon EKS cluster where the system jobs
            run.
      description: Namespace inputs for the system job.
    SecurityConfiguration:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the security configuration.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The name of the security configuration.
        arn:
          allOf:
          - $ref: '#/components/schemas/SecurityConfigurationArn'
          description: The ARN (Amazon Resource Name) of the security configuration.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time that the job run was created.
        createdBy:
          allOf:
          - $ref: '#/components/schemas/RequestIdentityUserArn'
          description: The user who created the job run.
        securityConfigurationData:
          allOf:
          - $ref: '#/components/schemas/SecurityConfigurationData'
          description: Security configuration inputs for the request.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags to assign to the security configuration.
      description: Inputs related to the security configuration. Security configurations
        in Amazon EMR on EKS are templates for different security setups. You can
        use security configurations to configure the Lake Formation integration setup.
        You can also create a security configuration to re-use a security setup each
        time you create a virtual cluster.
    SecurityConfigurationArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/securityconfigurations\/[0-9a-zA-Z]+$
      minLength: 60
      maxLength: 1024
    SecurityConfigurationData:
      type: object
      properties:
        authorizationConfiguration:
          allOf:
          - $ref: '#/components/schemas/AuthorizationConfiguration'
          description: Authorization-related configuration input for the security
            configuration.
      description: Configurations related to the security configuration for the request.
    SecurityConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/SecurityConfiguration'
    SensitivePropertiesMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String1024'
    SessionTagValue:
      type: string
      pattern: ^[\.\-_/#A-Za-z0-9 ]+$
      minLength: 1
      maxLength: 512
    SparkSqlJobDriver:
      type: object
      properties:
        entryPoint:
          allOf:
          - $ref: '#/components/schemas/EntryPointPath'
          description: The SQL file to be executed.
        sparkSqlParameters:
          allOf:
          - $ref: '#/components/schemas/SparkSqlParameters'
          description: The Spark parameters to be included in the Spark SQL command.
      description: The job driver for job type.
    SparkSqlParameters:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 102400
    SparkSubmitJobDriver:
      type: object
      properties:
        entryPoint:
          allOf:
          - $ref: '#/components/schemas/EntryPointPath'
          description: The entry point of job application.
        entryPointArguments:
          allOf:
          - $ref: '#/components/schemas/EntryPointArguments'
          description: The arguments for job application.
        sparkSubmitParameters:
          allOf:
          - $ref: '#/components/schemas/SparkSubmitParameters'
          description: The Spark submit parameters that are used for job runs.
      required:
      - entryPoint
      description: The information about job driver for Spark submit.
    SparkSubmitParameters:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 102400
    StartJobRunRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The name of the job run.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The virtual cluster ID for which the job run request is submitted.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: The client idempotency token of the job run request.
        executionRoleArn:
          allOf:
          - $ref: '#/components/schemas/IAMRoleArn'
          description: The execution role ARN for the job run.
        releaseLabel:
          allOf:
          - $ref: '#/components/schemas/ReleaseLabel'
          description: The Amazon EMR release version to use for the job run.
        jobDriver:
          allOf:
          - $ref: '#/components/schemas/JobDriver'
          description: The job driver for the job run.
        configurationOverrides:
          allOf:
          - $ref: '#/components/schemas/ConfigurationOverrides'
          description: The configuration overrides for the job run.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags assigned to job runs.
        jobTemplateId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The job template ID to be used to start the job run.
        jobTemplateParameters:
          allOf:
          - $ref: '#/components/schemas/TemplateParameterInputMap'
          description: The values of job template parameters to start a job run.
        retryPolicyConfiguration:
          allOf:
          - $ref: '#/components/schemas/RetryPolicyConfiguration'
          description: The retry policy configuration for the job run.
      required:
      - virtualClusterId
      - clientToken
    StartJobRunResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: This output displays the started job run ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: This output displays the name of the started job run.
        arn:
          allOf:
          - $ref: '#/components/schemas/JobArn'
          description: This output lists the ARN of job run.
        virtualClusterId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: This output displays the virtual cluster ID for which the job
            run was submitted.
    String1024:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 1024
    String128:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 128
    String2048:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 2048
    String256:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 256
    StringEmpty256:
      type: string
      pattern: \S
      minLength: 0
      maxLength: 256
    SubnetIds:
      type: array
      items:
        $ref: '#/components/schemas/String256'
    TLSCertificateConfiguration:
      type: object
      properties:
        certificateProviderType:
          allOf:
          - $ref: '#/components/schemas/CertificateProviderType'
          description: 'The TLS certificate type. Acceptable values: `PEM` or `Custom`.'
        publicCertificateSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretsManagerArn'
          description: Secrets Manager ARN that contains the public TLS certificate
            contents, used for communication between the user job and the system job.
        privateCertificateSecretArn:
          allOf:
          - $ref: '#/components/schemas/SecretsManagerArn'
          description: Secrets Manager ARN that contains the private TLS certificate
            contents, used for communication between the user job and the system job.
      description: Configurations related to the TLS certificate for the security
        configuration.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/String128'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringEmpty256'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/RsiArn'
          description: The ARN of resources.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags assigned to resources.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TemplateParameter:
      type: string
      pattern: ^[\.\-_/#A-Za-z0-9\$\{\}]+$
      minLength: 1
      maxLength: 512
    TemplateParameterConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/TemplateParameterDataType'
          description: 'The type of the job template parameter. Allowed values are:
            ‘STRING’, ‘NUMBER’.'
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/String1024'
          description: The default value for the job template parameter.
      description: The configuration of a job template parameter.
    TemplateParameterConfigurationMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TemplateParameterConfiguration'
    TemplateParameterDataType:
      type: string
      enum:
      - NUMBER
      - STRING
    TemplateParameterInputMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String1024'
    TemplateParameterName:
      type: string
      pattern: ^[\.\-_\#A-Za-z0-9]+$
      minLength: 1
      maxLength: 512
    Token:
      type: string
      pattern: ^.*\S.*$
      minLength: 1
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/RsiArn'
          description: The ARN of resources.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: The tag keys of the resources.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UriString:
      type: string
      pattern: ^[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\r\n\t]*$
      minLength: 1
      maxLength: 10280
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String1024'
      description: There are invalid parameters in the client request.
    VirtualCluster:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the virtual cluster.
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceNameString'
          description: The name of the virtual cluster.
        arn:
          allOf:
          - $ref: '#/components/schemas/VirtualClusterArn'
          description: The ARN of the virtual cluster.
        state:
          allOf:
          - $ref: '#/components/schemas/VirtualClusterState'
          description: The state of the virtual cluster.
        containerProvider:
          allOf:
          - $ref: '#/components/schemas/ContainerProvider'
          description: The container provider of the virtual cluster.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Date'
          description: The date and time when the virtual cluster is created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The assigned tags of the virtual cluster.
        securityConfigurationId:
          allOf:
          - $ref: '#/components/schemas/ResourceIdString'
          description: The ID of the security configuration.
      description: This entity describes a virtual cluster. A virtual cluster is a
        Kubernetes namespace that Amazon EMR is registered with. Amazon EMR uses virtual
        clusters to run jobs and host endpoints. Multiple virtual clusters can be
        backed by the same physical cluster. However, each virtual cluster maps to
        one namespace on an Amazon EKS cluster. Virtual clusters do not create any
        active resources that contribute to your bill or that require lifecycle management
        outside the service.
    VirtualClusterArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z0-9-]*):emr-containers:.+:(\d{12}):\/virtualclusters\/[0-9a-zA-Z]+$
      minLength: 60
      maxLength: 1024
    VirtualClusterState:
      type: string
      enum:
      - RUNNING
      - TERMINATING
      - TERMINATED
      - ARRESTED
    VirtualClusterStates:
      type: array
      items:
        $ref: '#/components/schemas/VirtualClusterState'
    VirtualClusters:
      type: array
      items:
        $ref: '#/components/schemas/VirtualCluster'
